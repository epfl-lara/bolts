; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!11664 () Bool)

(assert start!11664)

(declare-fun b!97514 () Bool)

(declare-fun b_free!2429 () Bool)

(declare-fun b_next!2429 () Bool)

(assert (=> b!97514 (= b_free!2429 (not b_next!2429))))

(declare-fun tp!9572 () Bool)

(declare-fun b_and!5993 () Bool)

(assert (=> b!97514 (= tp!9572 b_and!5993)))

(declare-fun b!97516 () Bool)

(declare-fun b_free!2431 () Bool)

(declare-fun b_next!2431 () Bool)

(assert (=> b!97516 (= b_free!2431 (not b_next!2431))))

(declare-fun tp!9570 () Bool)

(declare-fun b_and!5995 () Bool)

(assert (=> b!97516 (= tp!9570 b_and!5995)))

(declare-fun b!97500 () Bool)

(declare-fun e!63599 () Bool)

(declare-fun tp_is_empty!2631 () Bool)

(assert (=> b!97500 (= e!63599 tp_is_empty!2631)))

(declare-fun b!97501 () Bool)

(declare-fun e!63601 () Bool)

(assert (=> b!97501 (= e!63601 tp_is_empty!2631)))

(declare-fun b!97502 () Bool)

(declare-fun res!49123 () Bool)

(declare-fun e!63603 () Bool)

(assert (=> b!97502 (=> (not res!49123) (not e!63603))))

(declare-datatypes ((V!3155 0))(
  ( (V!3156 (val!1360 Int)) )
))
(declare-datatypes ((array!4240 0))(
  ( (array!4241 (arr!2014 (Array (_ BitVec 32) (_ BitVec 64))) (size!2264 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!972 0))(
  ( (ValueCellFull!972 (v!2800 V!3155)) (EmptyCell!972) )
))
(declare-datatypes ((array!4242 0))(
  ( (array!4243 (arr!2015 (Array (_ BitVec 32) ValueCell!972)) (size!2265 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!852 0))(
  ( (LongMapFixedSize!853 (defaultEntry!2481 Int) (mask!6578 (_ BitVec 32)) (extraKeys!2302 (_ BitVec 32)) (zeroValue!2364 V!3155) (minValue!2364 V!3155) (_size!475 (_ BitVec 32)) (_keys!4171 array!4240) (_values!2464 array!4242) (_vacant!475 (_ BitVec 32))) )
))
(declare-fun newMap!16 () LongMapFixedSize!852)

(declare-datatypes ((Cell!656 0))(
  ( (Cell!657 (v!2801 LongMapFixedSize!852)) )
))
(declare-datatypes ((LongMap!656 0))(
  ( (LongMap!657 (underlying!339 Cell!656)) )
))
(declare-fun thiss!992 () LongMap!656)

(assert (=> b!97502 (= res!49123 (bvsge (bvadd #b00000000000000000000000000000001 (mask!6578 newMap!16)) (_size!475 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun b!97503 () Bool)

(declare-fun e!63597 () Bool)

(declare-fun e!63606 () Bool)

(assert (=> b!97503 (= e!63597 e!63606)))

(declare-fun b!97504 () Bool)

(declare-datatypes ((Unit!2965 0))(
  ( (Unit!2966) )
))
(declare-fun e!63609 () Unit!2965)

(declare-fun Unit!2967 () Unit!2965)

(assert (=> b!97504 (= e!63609 Unit!2967)))

(declare-fun lt!48802 () Unit!2965)

(declare-fun from!355 () (_ BitVec 32))

(declare-fun lemmaListMapContainsThenArrayContainsFrom!98 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) (_ BitVec 32) Int) Unit!2965)

(assert (=> b!97504 (= lt!48802 (lemmaListMapContainsThenArrayContainsFrom!98 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!4240 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!97504 (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!48804 () Unit!2965)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!4240 (_ BitVec 32) (_ BitVec 32)) Unit!2965)

(assert (=> b!97504 (= lt!48804 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1611 0))(
  ( (Nil!1608) (Cons!1607 (h!2201 (_ BitVec 64)) (t!5573 List!1611)) )
))
(declare-fun arrayNoDuplicates!0 (array!4240 (_ BitVec 32) List!1611) Bool)

(assert (=> b!97504 (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) from!355 Nil!1608)))

(declare-fun lt!48800 () Unit!2965)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!4240 (_ BitVec 32) (_ BitVec 64) List!1611) Unit!2965)

(assert (=> b!97504 (= lt!48800 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608)))))

(assert (=> b!97504 false))

(declare-fun mapIsEmpty!3745 () Bool)

(declare-fun mapRes!3746 () Bool)

(assert (=> mapIsEmpty!3745 mapRes!3746))

(declare-fun b!97505 () Bool)

(declare-fun res!49121 () Bool)

(declare-fun e!63600 () Bool)

(assert (=> b!97505 (=> (not res!49121) (not e!63600))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!97505 (= res!49121 (validMask!0 (mask!6578 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun b!97506 () Bool)

(declare-fun res!49122 () Bool)

(assert (=> b!97506 (=> (not res!49122) (not e!63603))))

(declare-fun valid!385 (LongMapFixedSize!852) Bool)

(assert (=> b!97506 (= res!49122 (valid!385 newMap!16))))

(declare-fun b!97507 () Bool)

(declare-fun e!63598 () Bool)

(declare-fun e!63610 () Bool)

(assert (=> b!97507 (= e!63598 (and e!63610 mapRes!3746))))

(declare-fun condMapEmpty!3745 () Bool)

(declare-fun mapDefault!3746 () ValueCell!972)

(assert (=> b!97507 (= condMapEmpty!3745 (= (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3746)))))

(declare-fun mapNonEmpty!3745 () Bool)

(declare-fun mapRes!3745 () Bool)

(declare-fun tp!9571 () Bool)

(assert (=> mapNonEmpty!3745 (= mapRes!3745 (and tp!9571 e!63601))))

(declare-fun mapKey!3745 () (_ BitVec 32))

(declare-fun mapRest!3745 () (Array (_ BitVec 32) ValueCell!972))

(declare-fun mapValue!3745 () ValueCell!972)

(assert (=> mapNonEmpty!3745 (= (arr!2015 (_values!2464 newMap!16)) (store mapRest!3745 mapKey!3745 mapValue!3745))))

(declare-fun res!49124 () Bool)

(assert (=> start!11664 (=> (not res!49124) (not e!63603))))

(declare-fun valid!386 (LongMap!656) Bool)

(assert (=> start!11664 (= res!49124 (valid!386 thiss!992))))

(assert (=> start!11664 e!63603))

(declare-fun e!63602 () Bool)

(assert (=> start!11664 e!63602))

(assert (=> start!11664 true))

(declare-fun e!63604 () Bool)

(assert (=> start!11664 e!63604))

(declare-fun b!97508 () Bool)

(assert (=> b!97508 (= e!63600 (and (= (size!2265 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!6578 (v!2801 (underlying!339 thiss!992))))) (= (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (size!2265 (_values!2464 (v!2801 (underlying!339 thiss!992))))) (bvsge (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000) (bvslt (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!97509 () Bool)

(declare-fun e!63611 () Bool)

(assert (=> b!97509 (= e!63603 e!63611)))

(declare-fun res!49120 () Bool)

(assert (=> b!97509 (=> (not res!49120) (not e!63611))))

(declare-datatypes ((tuple2!2352 0))(
  ( (tuple2!2353 (_1!1186 (_ BitVec 64)) (_2!1186 V!3155)) )
))
(declare-datatypes ((List!1612 0))(
  ( (Nil!1609) (Cons!1608 (h!2202 tuple2!2352) (t!5574 List!1612)) )
))
(declare-datatypes ((ListLongMap!1551 0))(
  ( (ListLongMap!1552 (toList!791 List!1612)) )
))
(declare-fun lt!48799 () ListLongMap!1551)

(declare-fun lt!48803 () ListLongMap!1551)

(assert (=> b!97509 (= res!49120 (and (= lt!48803 lt!48799) (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1255 (LongMapFixedSize!852) ListLongMap!1551)

(assert (=> b!97509 (= lt!48799 (map!1255 newMap!16))))

(declare-fun getCurrentListMap!472 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) Int) ListLongMap!1551)

(assert (=> b!97509 (= lt!48803 (getCurrentListMap!472 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun mapNonEmpty!3746 () Bool)

(declare-fun tp!9569 () Bool)

(assert (=> mapNonEmpty!3746 (= mapRes!3746 (and tp!9569 e!63599))))

(declare-fun mapKey!3746 () (_ BitVec 32))

(declare-fun mapRest!3746 () (Array (_ BitVec 32) ValueCell!972))

(declare-fun mapValue!3746 () ValueCell!972)

(assert (=> mapNonEmpty!3746 (= (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (store mapRest!3746 mapKey!3746 mapValue!3746))))

(declare-fun b!97510 () Bool)

(assert (=> b!97510 (= e!63610 tp_is_empty!2631)))

(declare-fun b!97511 () Bool)

(declare-fun e!63608 () Bool)

(assert (=> b!97511 (= e!63608 tp_is_empty!2631)))

(declare-fun b!97512 () Bool)

(assert (=> b!97512 (= e!63602 e!63597)))

(declare-fun b!97513 () Bool)

(declare-fun e!63607 () Bool)

(assert (=> b!97513 (= e!63607 (and e!63608 mapRes!3745))))

(declare-fun condMapEmpty!3746 () Bool)

(declare-fun mapDefault!3745 () ValueCell!972)

(assert (=> b!97513 (= condMapEmpty!3746 (= (arr!2015 (_values!2464 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3745)))))

(declare-fun array_inv!1211 (array!4240) Bool)

(declare-fun array_inv!1212 (array!4242) Bool)

(assert (=> b!97514 (= e!63606 (and tp!9572 tp_is_empty!2631 (array_inv!1211 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (array_inv!1212 (_values!2464 (v!2801 (underlying!339 thiss!992)))) e!63598))))

(declare-fun b!97515 () Bool)

(declare-fun Unit!2968 () Unit!2965)

(assert (=> b!97515 (= e!63609 Unit!2968)))

(assert (=> b!97516 (= e!63604 (and tp!9570 tp_is_empty!2631 (array_inv!1211 (_keys!4171 newMap!16)) (array_inv!1212 (_values!2464 newMap!16)) e!63607))))

(declare-fun b!97517 () Bool)

(declare-fun res!49119 () Bool)

(assert (=> b!97517 (=> (not res!49119) (not e!63603))))

(assert (=> b!97517 (= res!49119 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!97518 () Bool)

(assert (=> b!97518 (= e!63611 e!63600)))

(declare-fun res!49118 () Bool)

(assert (=> b!97518 (=> (not res!49118) (not e!63600))))

(declare-datatypes ((tuple2!2354 0))(
  ( (tuple2!2355 (_1!1187 Bool) (_2!1187 LongMapFixedSize!852)) )
))
(declare-fun lt!48801 () tuple2!2354)

(assert (=> b!97518 (= res!49118 (and (_1!1187 lt!48801) (bvsle from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!48805 () Unit!2965)

(assert (=> b!97518 (= lt!48805 e!63609)))

(declare-fun c!16498 () Bool)

(declare-fun contains!805 (ListLongMap!1551 (_ BitVec 64)) Bool)

(assert (=> b!97518 (= c!16498 (contains!805 lt!48799 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun update!146 (LongMapFixedSize!852 (_ BitVec 64) V!3155) tuple2!2354)

(declare-fun get!1296 (ValueCell!972 V!3155) V!3155)

(declare-fun dynLambda!378 (Int (_ BitVec 64)) V!3155)

(assert (=> b!97518 (= lt!48801 (update!146 newMap!16 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun mapIsEmpty!3746 () Bool)

(assert (=> mapIsEmpty!3746 mapRes!3745))

(assert (= (and start!11664 res!49124) b!97517))

(assert (= (and b!97517 res!49119) b!97506))

(assert (= (and b!97506 res!49122) b!97502))

(assert (= (and b!97502 res!49123) b!97509))

(assert (= (and b!97509 res!49120) b!97518))

(assert (= (and b!97518 c!16498) b!97504))

(assert (= (and b!97518 (not c!16498)) b!97515))

(assert (= (and b!97518 res!49118) b!97505))

(assert (= (and b!97505 res!49121) b!97508))

(assert (= (and b!97507 condMapEmpty!3745) mapIsEmpty!3745))

(assert (= (and b!97507 (not condMapEmpty!3745)) mapNonEmpty!3746))

(get-info :version)

(assert (= (and mapNonEmpty!3746 ((_ is ValueCellFull!972) mapValue!3746)) b!97500))

(assert (= (and b!97507 ((_ is ValueCellFull!972) mapDefault!3746)) b!97510))

(assert (= b!97514 b!97507))

(assert (= b!97503 b!97514))

(assert (= b!97512 b!97503))

(assert (= start!11664 b!97512))

(assert (= (and b!97513 condMapEmpty!3746) mapIsEmpty!3746))

(assert (= (and b!97513 (not condMapEmpty!3746)) mapNonEmpty!3745))

(assert (= (and mapNonEmpty!3745 ((_ is ValueCellFull!972) mapValue!3745)) b!97501))

(assert (= (and b!97513 ((_ is ValueCellFull!972) mapDefault!3745)) b!97511))

(assert (= b!97516 b!97513))

(assert (= start!11664 b!97516))

(declare-fun b_lambda!4353 () Bool)

(assert (=> (not b_lambda!4353) (not b!97518)))

(declare-fun t!5570 () Bool)

(declare-fun tb!1929 () Bool)

(assert (=> (and b!97514 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))) t!5570) tb!1929))

(declare-fun result!3269 () Bool)

(assert (=> tb!1929 (= result!3269 tp_is_empty!2631)))

(assert (=> b!97518 t!5570))

(declare-fun b_and!5997 () Bool)

(assert (= b_and!5993 (and (=> t!5570 result!3269) b_and!5997)))

(declare-fun t!5572 () Bool)

(declare-fun tb!1931 () Bool)

(assert (=> (and b!97516 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))) t!5572) tb!1931))

(declare-fun result!3273 () Bool)

(assert (= result!3273 result!3269))

(assert (=> b!97518 t!5572))

(declare-fun b_and!5999 () Bool)

(assert (= b_and!5995 (and (=> t!5572 result!3273) b_and!5999)))

(declare-fun m!106589 () Bool)

(assert (=> b!97514 m!106589))

(declare-fun m!106591 () Bool)

(assert (=> b!97514 m!106591))

(declare-fun m!106593 () Bool)

(assert (=> mapNonEmpty!3745 m!106593))

(declare-fun m!106595 () Bool)

(assert (=> b!97506 m!106595))

(declare-fun m!106597 () Bool)

(assert (=> start!11664 m!106597))

(declare-fun m!106599 () Bool)

(assert (=> mapNonEmpty!3746 m!106599))

(declare-fun m!106601 () Bool)

(assert (=> b!97505 m!106601))

(declare-fun m!106603 () Bool)

(assert (=> b!97518 m!106603))

(declare-fun m!106605 () Bool)

(assert (=> b!97518 m!106605))

(declare-fun m!106607 () Bool)

(assert (=> b!97518 m!106607))

(declare-fun m!106609 () Bool)

(assert (=> b!97518 m!106609))

(declare-fun m!106611 () Bool)

(assert (=> b!97518 m!106611))

(assert (=> b!97518 m!106609))

(assert (=> b!97518 m!106605))

(assert (=> b!97518 m!106609))

(assert (=> b!97518 m!106607))

(declare-fun m!106613 () Bool)

(assert (=> b!97518 m!106613))

(assert (=> b!97518 m!106603))

(assert (=> b!97509 m!106609))

(declare-fun m!106615 () Bool)

(assert (=> b!97509 m!106615))

(declare-fun m!106617 () Bool)

(assert (=> b!97509 m!106617))

(declare-fun m!106619 () Bool)

(assert (=> b!97516 m!106619))

(declare-fun m!106621 () Bool)

(assert (=> b!97516 m!106621))

(declare-fun m!106623 () Bool)

(assert (=> b!97504 m!106623))

(declare-fun m!106625 () Bool)

(assert (=> b!97504 m!106625))

(assert (=> b!97504 m!106609))

(declare-fun m!106627 () Bool)

(assert (=> b!97504 m!106627))

(assert (=> b!97504 m!106609))

(assert (=> b!97504 m!106609))

(declare-fun m!106629 () Bool)

(assert (=> b!97504 m!106629))

(assert (=> b!97504 m!106609))

(declare-fun m!106631 () Bool)

(assert (=> b!97504 m!106631))

(check-sat (not b!97516) (not b_next!2431) b_and!5999 tp_is_empty!2631 (not b_lambda!4353) b_and!5997 (not b!97506) (not b!97518) (not b!97504) (not mapNonEmpty!3746) (not b_next!2429) (not b!97505) (not b!97509) (not mapNonEmpty!3745) (not start!11664) (not b!97514))
(check-sat b_and!5997 b_and!5999 (not b_next!2429) (not b_next!2431))
(get-model)

(declare-fun b_lambda!4357 () Bool)

(assert (= b_lambda!4353 (or (and b!97514 b_free!2429) (and b!97516 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))))) b_lambda!4357)))

(check-sat (not b!97516) (not b_next!2431) b_and!5999 tp_is_empty!2631 b_and!5997 (not b_lambda!4357) (not b!97506) (not b!97518) (not b!97504) (not mapNonEmpty!3746) (not b_next!2429) (not b!97505) (not b!97509) (not mapNonEmpty!3745) (not start!11664) (not b!97514))
(check-sat b_and!5997 b_and!5999 (not b_next!2429) (not b_next!2431))
(get-model)

(declare-fun d!25989 () Bool)

(assert (=> d!25989 (= (valid!386 thiss!992) (valid!385 (v!2801 (underlying!339 thiss!992))))))

(declare-fun bs!4022 () Bool)

(assert (= bs!4022 d!25989))

(declare-fun m!106677 () Bool)

(assert (=> bs!4022 m!106677))

(assert (=> start!11664 d!25989))

(declare-fun d!25991 () Bool)

(declare-fun res!49152 () Bool)

(declare-fun e!63662 () Bool)

(assert (=> d!25991 (=> (not res!49152) (not e!63662))))

(declare-fun simpleValid!67 (LongMapFixedSize!852) Bool)

(assert (=> d!25991 (= res!49152 (simpleValid!67 newMap!16))))

(assert (=> d!25991 (= (valid!385 newMap!16) e!63662)))

(declare-fun b!97586 () Bool)

(declare-fun res!49153 () Bool)

(assert (=> b!97586 (=> (not res!49153) (not e!63662))))

(declare-fun arrayCountValidKeys!0 (array!4240 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!97586 (= res!49153 (= (arrayCountValidKeys!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (_size!475 newMap!16)))))

(declare-fun b!97587 () Bool)

(declare-fun res!49154 () Bool)

(assert (=> b!97587 (=> (not res!49154) (not e!63662))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4240 (_ BitVec 32)) Bool)

(assert (=> b!97587 (= res!49154 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!97588 () Bool)

(assert (=> b!97588 (= e!63662 (arrayNoDuplicates!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 Nil!1608))))

(assert (= (and d!25991 res!49152) b!97586))

(assert (= (and b!97586 res!49153) b!97587))

(assert (= (and b!97587 res!49154) b!97588))

(declare-fun m!106679 () Bool)

(assert (=> d!25991 m!106679))

(declare-fun m!106681 () Bool)

(assert (=> b!97586 m!106681))

(declare-fun m!106683 () Bool)

(assert (=> b!97587 m!106683))

(declare-fun m!106685 () Bool)

(assert (=> b!97588 m!106685))

(assert (=> b!97506 d!25991))

(declare-fun d!25993 () Bool)

(assert (=> d!25993 (= (array_inv!1211 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvsge (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!97514 d!25993))

(declare-fun d!25995 () Bool)

(assert (=> d!25995 (= (array_inv!1212 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvsge (size!2265 (_values!2464 (v!2801 (underlying!339 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!97514 d!25995))

(declare-fun d!25997 () Bool)

(assert (=> d!25997 (= (validMask!0 (mask!6578 (v!2801 (underlying!339 thiss!992)))) (and (or (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000001111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000011111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000001111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000011111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000001111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000011111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000001111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000011111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000001111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000011111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000001111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000011111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000111111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000001111111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000011111111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000111111111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000001111111111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000011111111111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000111111111111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00001111111111111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00011111111111111111111111111111) (= (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!97505 d!25997))

(declare-fun d!25999 () Bool)

(assert (=> d!25999 (= (map!1255 newMap!16) (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun bs!4023 () Bool)

(assert (= bs!4023 d!25999))

(declare-fun m!106687 () Bool)

(assert (=> bs!4023 m!106687))

(assert (=> b!97509 d!25999))

(declare-fun b!97631 () Bool)

(declare-fun e!63695 () Bool)

(declare-fun call!9894 () Bool)

(assert (=> b!97631 (= e!63695 (not call!9894))))

(declare-fun b!97632 () Bool)

(declare-fun e!63697 () Unit!2965)

(declare-fun lt!48890 () Unit!2965)

(assert (=> b!97632 (= e!63697 lt!48890)))

(declare-fun lt!48881 () ListLongMap!1551)

(declare-fun getCurrentListMapNoExtraKeys!102 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) Int) ListLongMap!1551)

(assert (=> b!97632 (= lt!48881 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun lt!48877 () (_ BitVec 64))

(assert (=> b!97632 (= lt!48877 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48874 () (_ BitVec 64))

(assert (=> b!97632 (= lt!48874 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48879 () Unit!2965)

(declare-fun addStillContains!68 (ListLongMap!1551 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2965)

(assert (=> b!97632 (= lt!48879 (addStillContains!68 lt!48881 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48874))))

(declare-fun +!138 (ListLongMap!1551 tuple2!2352) ListLongMap!1551)

(assert (=> b!97632 (contains!805 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48874)))

(declare-fun lt!48885 () Unit!2965)

(assert (=> b!97632 (= lt!48885 lt!48879)))

(declare-fun lt!48883 () ListLongMap!1551)

(assert (=> b!97632 (= lt!48883 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun lt!48887 () (_ BitVec 64))

(assert (=> b!97632 (= lt!48887 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48892 () (_ BitVec 64))

(assert (=> b!97632 (= lt!48892 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48872 () Unit!2965)

(declare-fun addApplyDifferent!68 (ListLongMap!1551 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2965)

(assert (=> b!97632 (= lt!48872 (addApplyDifferent!68 lt!48883 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48892))))

(declare-fun apply!92 (ListLongMap!1551 (_ BitVec 64)) V!3155)

(assert (=> b!97632 (= (apply!92 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48892) (apply!92 lt!48883 lt!48892))))

(declare-fun lt!48884 () Unit!2965)

(assert (=> b!97632 (= lt!48884 lt!48872)))

(declare-fun lt!48889 () ListLongMap!1551)

(assert (=> b!97632 (= lt!48889 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun lt!48886 () (_ BitVec 64))

(assert (=> b!97632 (= lt!48886 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48873 () (_ BitVec 64))

(assert (=> b!97632 (= lt!48873 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48876 () Unit!2965)

(assert (=> b!97632 (= lt!48876 (addApplyDifferent!68 lt!48889 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48873))))

(assert (=> b!97632 (= (apply!92 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48873) (apply!92 lt!48889 lt!48873))))

(declare-fun lt!48871 () Unit!2965)

(assert (=> b!97632 (= lt!48871 lt!48876)))

(declare-fun lt!48888 () ListLongMap!1551)

(assert (=> b!97632 (= lt!48888 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun lt!48882 () (_ BitVec 64))

(assert (=> b!97632 (= lt!48882 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48875 () (_ BitVec 64))

(assert (=> b!97632 (= lt!48875 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!97632 (= lt!48890 (addApplyDifferent!68 lt!48888 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48875))))

(assert (=> b!97632 (= (apply!92 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48875) (apply!92 lt!48888 lt!48875))))

(declare-fun b!97633 () Bool)

(declare-fun e!63696 () ListLongMap!1551)

(declare-fun call!9889 () ListLongMap!1551)

(assert (=> b!97633 (= e!63696 call!9889)))

(declare-fun bm!9885 () Bool)

(declare-fun call!9892 () ListLongMap!1551)

(assert (=> bm!9885 (= call!9889 call!9892)))

(declare-fun b!97634 () Bool)

(declare-fun e!63691 () Bool)

(declare-fun e!63692 () Bool)

(assert (=> b!97634 (= e!63691 e!63692)))

(declare-fun res!49180 () Bool)

(declare-fun call!9891 () Bool)

(assert (=> b!97634 (= res!49180 call!9891)))

(assert (=> b!97634 (=> (not res!49180) (not e!63692))))

(declare-fun b!97635 () Bool)

(declare-fun res!49176 () Bool)

(declare-fun e!63694 () Bool)

(assert (=> b!97635 (=> (not res!49176) (not e!63694))))

(assert (=> b!97635 (= res!49176 e!63691)))

(declare-fun c!16517 () Bool)

(assert (=> b!97635 (= c!16517 (not (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26001 () Bool)

(assert (=> d!26001 e!63694))

(declare-fun res!49173 () Bool)

(assert (=> d!26001 (=> (not res!49173) (not e!63694))))

(assert (=> d!26001 (= res!49173 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun lt!48891 () ListLongMap!1551)

(declare-fun lt!48880 () ListLongMap!1551)

(assert (=> d!26001 (= lt!48891 lt!48880)))

(declare-fun lt!48878 () Unit!2965)

(assert (=> d!26001 (= lt!48878 e!63697)))

(declare-fun c!16515 () Bool)

(declare-fun e!63693 () Bool)

(assert (=> d!26001 (= c!16515 e!63693)))

(declare-fun res!49174 () Bool)

(assert (=> d!26001 (=> (not res!49174) (not e!63693))))

(assert (=> d!26001 (= res!49174 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun e!63700 () ListLongMap!1551)

(assert (=> d!26001 (= lt!48880 e!63700)))

(declare-fun c!16514 () Bool)

(assert (=> d!26001 (= c!16514 (and (not (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26001 (validMask!0 (mask!6578 (v!2801 (underlying!339 thiss!992))))))

(assert (=> d!26001 (= (getCurrentListMap!472 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))) lt!48891)))

(declare-fun b!97636 () Bool)

(assert (=> b!97636 (= e!63692 (= (apply!92 lt!48891 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun call!9893 () ListLongMap!1551)

(declare-fun bm!9886 () Bool)

(declare-fun c!16519 () Bool)

(declare-fun call!9888 () ListLongMap!1551)

(declare-fun call!9890 () ListLongMap!1551)

(assert (=> bm!9886 (= call!9892 (+!138 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888)) (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!97637 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!97637 (= e!63693 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!97638 () Bool)

(declare-fun e!63701 () Bool)

(assert (=> b!97638 (= e!63701 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!97639 () Bool)

(assert (=> b!97639 (= e!63691 (not call!9891))))

(declare-fun b!97640 () Bool)

(declare-fun e!63689 () ListLongMap!1551)

(assert (=> b!97640 (= e!63689 call!9889)))

(declare-fun b!97641 () Bool)

(assert (=> b!97641 (= e!63700 e!63696)))

(assert (=> b!97641 (= c!16519 (and (not (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9887 () Bool)

(assert (=> bm!9887 (= call!9894 (contains!805 lt!48891 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97642 () Bool)

(declare-fun e!63690 () Bool)

(assert (=> b!97642 (= e!63690 (= (apply!92 lt!48891 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun b!97643 () Bool)

(declare-fun e!63699 () Bool)

(assert (=> b!97643 (= e!63699 (= (apply!92 lt!48891 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97643 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_values!2464 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> b!97643 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!97644 () Bool)

(declare-fun res!49175 () Bool)

(assert (=> b!97644 (=> (not res!49175) (not e!63694))))

(declare-fun e!63698 () Bool)

(assert (=> b!97644 (= res!49175 e!63698)))

(declare-fun res!49179 () Bool)

(assert (=> b!97644 (=> res!49179 e!63698)))

(assert (=> b!97644 (= res!49179 (not e!63701))))

(declare-fun res!49181 () Bool)

(assert (=> b!97644 (=> (not res!49181) (not e!63701))))

(assert (=> b!97644 (= res!49181 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!97645 () Bool)

(assert (=> b!97645 (= e!63689 call!9888)))

(declare-fun b!97646 () Bool)

(assert (=> b!97646 (= e!63698 e!63699)))

(declare-fun res!49178 () Bool)

(assert (=> b!97646 (=> (not res!49178) (not e!63699))))

(assert (=> b!97646 (= res!49178 (contains!805 lt!48891 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97646 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun bm!9888 () Bool)

(assert (=> bm!9888 (= call!9893 call!9890)))

(declare-fun b!97647 () Bool)

(assert (=> b!97647 (= e!63695 e!63690)))

(declare-fun res!49177 () Bool)

(assert (=> b!97647 (= res!49177 call!9894)))

(assert (=> b!97647 (=> (not res!49177) (not e!63690))))

(declare-fun bm!9889 () Bool)

(assert (=> bm!9889 (= call!9888 call!9893)))

(declare-fun b!97648 () Bool)

(declare-fun Unit!2972 () Unit!2965)

(assert (=> b!97648 (= e!63697 Unit!2972)))

(declare-fun b!97649 () Bool)

(declare-fun c!16516 () Bool)

(assert (=> b!97649 (= c!16516 (and (not (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!97649 (= e!63696 e!63689)))

(declare-fun bm!9890 () Bool)

(assert (=> bm!9890 (= call!9890 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun b!97650 () Bool)

(assert (=> b!97650 (= e!63700 (+!138 call!9892 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun bm!9891 () Bool)

(assert (=> bm!9891 (= call!9891 (contains!805 lt!48891 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97651 () Bool)

(assert (=> b!97651 (= e!63694 e!63695)))

(declare-fun c!16518 () Bool)

(assert (=> b!97651 (= c!16518 (not (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26001 c!16514) b!97650))

(assert (= (and d!26001 (not c!16514)) b!97641))

(assert (= (and b!97641 c!16519) b!97633))

(assert (= (and b!97641 (not c!16519)) b!97649))

(assert (= (and b!97649 c!16516) b!97640))

(assert (= (and b!97649 (not c!16516)) b!97645))

(assert (= (or b!97640 b!97645) bm!9889))

(assert (= (or b!97633 bm!9889) bm!9888))

(assert (= (or b!97633 b!97640) bm!9885))

(assert (= (or b!97650 bm!9888) bm!9890))

(assert (= (or b!97650 bm!9885) bm!9886))

(assert (= (and d!26001 res!49174) b!97637))

(assert (= (and d!26001 c!16515) b!97632))

(assert (= (and d!26001 (not c!16515)) b!97648))

(assert (= (and d!26001 res!49173) b!97644))

(assert (= (and b!97644 res!49181) b!97638))

(assert (= (and b!97644 (not res!49179)) b!97646))

(assert (= (and b!97646 res!49178) b!97643))

(assert (= (and b!97644 res!49175) b!97635))

(assert (= (and b!97635 c!16517) b!97634))

(assert (= (and b!97635 (not c!16517)) b!97639))

(assert (= (and b!97634 res!49180) b!97636))

(assert (= (or b!97634 b!97639) bm!9891))

(assert (= (and b!97635 res!49176) b!97651))

(assert (= (and b!97651 c!16518) b!97647))

(assert (= (and b!97651 (not c!16518)) b!97631))

(assert (= (and b!97647 res!49177) b!97642))

(assert (= (or b!97647 b!97631) bm!9887))

(declare-fun b_lambda!4359 () Bool)

(assert (=> (not b_lambda!4359) (not b!97643)))

(assert (=> b!97643 t!5570))

(declare-fun b_and!6009 () Bool)

(assert (= b_and!5997 (and (=> t!5570 result!3269) b_and!6009)))

(assert (=> b!97643 t!5572))

(declare-fun b_and!6011 () Bool)

(assert (= b_and!5999 (and (=> t!5572 result!3273) b_and!6011)))

(declare-fun m!106689 () Bool)

(assert (=> b!97638 m!106689))

(assert (=> b!97638 m!106689))

(declare-fun m!106691 () Bool)

(assert (=> b!97638 m!106691))

(declare-fun m!106693 () Bool)

(assert (=> bm!9886 m!106693))

(declare-fun m!106695 () Bool)

(assert (=> b!97636 m!106695))

(assert (=> b!97637 m!106689))

(assert (=> b!97637 m!106689))

(assert (=> b!97637 m!106691))

(declare-fun m!106697 () Bool)

(assert (=> b!97632 m!106697))

(declare-fun m!106699 () Bool)

(assert (=> b!97632 m!106699))

(declare-fun m!106701 () Bool)

(assert (=> b!97632 m!106701))

(declare-fun m!106703 () Bool)

(assert (=> b!97632 m!106703))

(declare-fun m!106705 () Bool)

(assert (=> b!97632 m!106705))

(assert (=> b!97632 m!106703))

(declare-fun m!106707 () Bool)

(assert (=> b!97632 m!106707))

(declare-fun m!106709 () Bool)

(assert (=> b!97632 m!106709))

(declare-fun m!106711 () Bool)

(assert (=> b!97632 m!106711))

(assert (=> b!97632 m!106699))

(declare-fun m!106713 () Bool)

(assert (=> b!97632 m!106713))

(declare-fun m!106715 () Bool)

(assert (=> b!97632 m!106715))

(declare-fun m!106717 () Bool)

(assert (=> b!97632 m!106717))

(declare-fun m!106719 () Bool)

(assert (=> b!97632 m!106719))

(declare-fun m!106721 () Bool)

(assert (=> b!97632 m!106721))

(declare-fun m!106723 () Bool)

(assert (=> b!97632 m!106723))

(assert (=> b!97632 m!106713))

(assert (=> b!97632 m!106689))

(declare-fun m!106725 () Bool)

(assert (=> b!97632 m!106725))

(assert (=> b!97632 m!106709))

(declare-fun m!106727 () Bool)

(assert (=> b!97632 m!106727))

(declare-fun m!106729 () Bool)

(assert (=> b!97642 m!106729))

(declare-fun m!106731 () Bool)

(assert (=> bm!9887 m!106731))

(assert (=> bm!9890 m!106707))

(assert (=> d!26001 m!106601))

(assert (=> b!97646 m!106689))

(assert (=> b!97646 m!106689))

(declare-fun m!106733 () Bool)

(assert (=> b!97646 m!106733))

(declare-fun m!106735 () Bool)

(assert (=> bm!9891 m!106735))

(declare-fun m!106737 () Bool)

(assert (=> b!97650 m!106737))

(declare-fun m!106739 () Bool)

(assert (=> b!97643 m!106739))

(assert (=> b!97643 m!106605))

(declare-fun m!106741 () Bool)

(assert (=> b!97643 m!106741))

(assert (=> b!97643 m!106605))

(assert (=> b!97643 m!106689))

(assert (=> b!97643 m!106689))

(declare-fun m!106743 () Bool)

(assert (=> b!97643 m!106743))

(assert (=> b!97643 m!106739))

(assert (=> b!97509 d!26001))

(declare-fun d!26003 () Bool)

(declare-fun e!63707 () Bool)

(assert (=> d!26003 e!63707))

(declare-fun res!49184 () Bool)

(assert (=> d!26003 (=> res!49184 e!63707)))

(declare-fun lt!48903 () Bool)

(assert (=> d!26003 (= res!49184 (not lt!48903))))

(declare-fun lt!48904 () Bool)

(assert (=> d!26003 (= lt!48903 lt!48904)))

(declare-fun lt!48901 () Unit!2965)

(declare-fun e!63706 () Unit!2965)

(assert (=> d!26003 (= lt!48901 e!63706)))

(declare-fun c!16522 () Bool)

(assert (=> d!26003 (= c!16522 lt!48904)))

(declare-fun containsKey!153 (List!1612 (_ BitVec 64)) Bool)

(assert (=> d!26003 (= lt!48904 (containsKey!153 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26003 (= (contains!805 lt!48799 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) lt!48903)))

(declare-fun b!97658 () Bool)

(declare-fun lt!48902 () Unit!2965)

(assert (=> b!97658 (= e!63706 lt!48902)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!102 (List!1612 (_ BitVec 64)) Unit!2965)

(assert (=> b!97658 (= lt!48902 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-datatypes ((Option!155 0))(
  ( (Some!154 (v!2805 V!3155)) (None!153) )
))
(declare-fun isDefined!103 (Option!155) Bool)

(declare-fun getValueByKey!149 (List!1612 (_ BitVec 64)) Option!155)

(assert (=> b!97658 (isDefined!103 (getValueByKey!149 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!97659 () Bool)

(declare-fun Unit!2973 () Unit!2965)

(assert (=> b!97659 (= e!63706 Unit!2973)))

(declare-fun b!97660 () Bool)

(assert (=> b!97660 (= e!63707 (isDefined!103 (getValueByKey!149 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (= (and d!26003 c!16522) b!97658))

(assert (= (and d!26003 (not c!16522)) b!97659))

(assert (= (and d!26003 (not res!49184)) b!97660))

(assert (=> d!26003 m!106609))

(declare-fun m!106745 () Bool)

(assert (=> d!26003 m!106745))

(assert (=> b!97658 m!106609))

(declare-fun m!106747 () Bool)

(assert (=> b!97658 m!106747))

(assert (=> b!97658 m!106609))

(declare-fun m!106749 () Bool)

(assert (=> b!97658 m!106749))

(assert (=> b!97658 m!106749))

(declare-fun m!106751 () Bool)

(assert (=> b!97658 m!106751))

(assert (=> b!97660 m!106609))

(assert (=> b!97660 m!106749))

(assert (=> b!97660 m!106749))

(assert (=> b!97660 m!106751))

(assert (=> b!97518 d!26003))

(declare-fun e!63772 () Bool)

(declare-fun b!97745 () Bool)

(declare-datatypes ((SeekEntryResult!263 0))(
  ( (MissingZero!263 (index!3195 (_ BitVec 32))) (Found!263 (index!3196 (_ BitVec 32))) (Intermediate!263 (undefined!1075 Bool) (index!3197 (_ BitVec 32)) (x!12969 (_ BitVec 32))) (Undefined!263) (MissingVacant!263 (index!3198 (_ BitVec 32))) )
))
(declare-fun lt!48959 () SeekEntryResult!263)

(assert (=> b!97745 (= e!63772 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48959)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!97746 () Bool)

(declare-fun e!63767 () Bool)

(declare-fun call!9948 () Bool)

(assert (=> b!97746 (= e!63767 (not call!9948))))

(declare-fun b!97747 () Bool)

(declare-fun res!49217 () Bool)

(assert (=> b!97747 (=> (not res!49217) (not e!63767))))

(declare-fun lt!48984 () SeekEntryResult!263)

(assert (=> b!97747 (= res!49217 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3195 lt!48984)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97748 () Bool)

(declare-fun res!49222 () Bool)

(declare-fun e!63773 () Bool)

(assert (=> b!97748 (=> (not res!49222) (not e!63773))))

(declare-fun lt!48975 () SeekEntryResult!263)

(assert (=> b!97748 (= res!49222 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3195 lt!48975)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97749 () Bool)

(declare-fun e!63752 () ListLongMap!1551)

(assert (=> b!97749 (= e!63752 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!97750 () Bool)

(declare-fun e!63765 () Bool)

(declare-fun e!63756 () Bool)

(assert (=> b!97750 (= e!63765 e!63756)))

(declare-fun res!49219 () Bool)

(declare-fun call!9958 () Bool)

(assert (=> b!97750 (= res!49219 call!9958)))

(assert (=> b!97750 (=> (not res!49219) (not e!63756))))

(declare-fun bm!9940 () Bool)

(declare-fun call!9954 () Bool)

(declare-fun call!9946 () Bool)

(assert (=> bm!9940 (= call!9954 call!9946)))

(declare-fun bm!9941 () Bool)

(declare-fun call!9959 () SeekEntryResult!263)

(declare-fun call!9955 () SeekEntryResult!263)

(assert (=> bm!9941 (= call!9959 call!9955)))

(declare-fun b!97751 () Bool)

(declare-fun res!49216 () Bool)

(assert (=> b!97751 (=> (not res!49216) (not e!63767))))

(declare-fun call!9951 () Bool)

(assert (=> b!97751 (= res!49216 call!9951)))

(declare-fun e!63766 () Bool)

(assert (=> b!97751 (= e!63766 e!63767)))

(declare-fun bm!9942 () Bool)

(declare-fun call!9943 () ListLongMap!1551)

(assert (=> bm!9942 (= call!9943 (map!1255 newMap!16))))

(declare-fun call!9964 () Unit!2965)

(declare-fun bm!9943 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) Int) Unit!2965)

(assert (=> bm!9943 (= call!9964 (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(declare-fun bm!9944 () Bool)

(declare-fun c!16556 () Bool)

(declare-fun c!16557 () Bool)

(assert (=> bm!9944 (= c!16556 c!16557)))

(declare-fun call!9953 () Bool)

(assert (=> bm!9944 (= call!9953 (contains!805 e!63752 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun bm!9945 () Bool)

(declare-fun call!9952 () ListLongMap!1551)

(declare-fun call!9956 () ListLongMap!1551)

(assert (=> bm!9945 (= call!9952 call!9956)))

(declare-fun b!97752 () Bool)

(declare-fun e!63768 () tuple2!2354)

(declare-fun lt!48978 () tuple2!2354)

(assert (=> b!97752 (= e!63768 (tuple2!2355 (_1!1187 lt!48978) (_2!1187 lt!48978)))))

(declare-fun call!9957 () tuple2!2354)

(assert (=> b!97752 (= lt!48978 call!9957)))

(declare-fun b!97753 () Bool)

(declare-fun call!9960 () Bool)

(assert (=> b!97753 (= e!63756 (not call!9960))))

(declare-fun c!16562 () Bool)

(declare-fun e!63753 () ListLongMap!1551)

(declare-fun call!9945 () ListLongMap!1551)

(declare-fun bm!9946 () Bool)

(declare-fun c!16560 () Bool)

(assert (=> bm!9946 (= call!9945 (+!138 e!63753 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!16552 () Bool)

(assert (=> bm!9946 (= c!16552 c!16562)))

(declare-fun bm!9947 () Bool)

(declare-fun call!9949 () ListLongMap!1551)

(declare-fun call!9966 () ListLongMap!1551)

(assert (=> bm!9947 (= call!9949 call!9966)))

(declare-fun b!97754 () Bool)

(declare-fun res!49215 () Bool)

(assert (=> b!97754 (= res!49215 call!9954)))

(assert (=> b!97754 (=> (not res!49215) (not e!63772))))

(declare-fun bm!9948 () Bool)

(assert (=> bm!9948 (= call!9951 call!9954)))

(declare-fun b!97755 () Bool)

(declare-fun e!63771 () tuple2!2354)

(assert (=> b!97755 (= e!63768 e!63771)))

(declare-fun c!16563 () Bool)

(declare-fun lt!48985 () SeekEntryResult!263)

(assert (=> b!97755 (= c!16563 ((_ is MissingZero!263) lt!48985))))

(declare-fun b!97756 () Bool)

(declare-fun e!63757 () Bool)

(assert (=> b!97756 (= e!63757 ((_ is Undefined!263) lt!48984))))

(declare-fun b!97757 () Bool)

(declare-fun e!63762 () Bool)

(declare-fun call!9950 () ListLongMap!1551)

(assert (=> b!97757 (= e!63762 (= call!9950 call!9943))))

(declare-fun b!97758 () Bool)

(declare-fun e!63769 () Unit!2965)

(declare-fun lt!48974 () Unit!2965)

(assert (=> b!97758 (= e!63769 lt!48974)))

(declare-fun call!9962 () Unit!2965)

(assert (=> b!97758 (= lt!48974 call!9962)))

(declare-fun call!9965 () SeekEntryResult!263)

(assert (=> b!97758 (= lt!48984 call!9965)))

(declare-fun c!16553 () Bool)

(assert (=> b!97758 (= c!16553 ((_ is MissingZero!263) lt!48984))))

(assert (=> b!97758 e!63766))

(declare-fun bm!9949 () Bool)

(declare-fun c!16555 () Bool)

(declare-fun updateHelperNewKey!41 (LongMapFixedSize!852 (_ BitVec 64) V!3155 (_ BitVec 32)) tuple2!2354)

(assert (=> bm!9949 (= call!9957 (updateHelperNewKey!41 newMap!16 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985))))))

(declare-fun b!97759 () Bool)

(declare-fun lt!48963 () Unit!2965)

(assert (=> b!97759 (= lt!48963 e!63769)))

(declare-fun c!16554 () Bool)

(assert (=> b!97759 (= c!16554 call!9953)))

(declare-fun e!63763 () tuple2!2354)

(assert (=> b!97759 (= e!63763 (tuple2!2355 false newMap!16))))

(declare-fun b!97760 () Bool)

(declare-fun lt!48981 () Unit!2965)

(declare-fun lt!48982 () Unit!2965)

(assert (=> b!97760 (= lt!48981 lt!48982)))

(declare-fun call!9947 () ListLongMap!1551)

(assert (=> b!97760 (= call!9947 call!9949)))

(declare-fun lt!48964 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!41 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 V!3155 Int) Unit!2965)

(assert (=> b!97760 (= lt!48982 (lemmaChangeZeroKeyThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48964 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) (defaultEntry!2481 newMap!16)))))

(assert (=> b!97760 (= lt!48964 (bvor (extraKeys!2302 newMap!16) #b00000000000000000000000000000001))))

(declare-fun e!63755 () tuple2!2354)

(assert (=> b!97760 (= e!63755 (tuple2!2355 true (LongMapFixedSize!853 (defaultEntry!2481 newMap!16) (mask!6578 newMap!16) (bvor (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) (_size!475 newMap!16) (_keys!4171 newMap!16) (_values!2464 newMap!16) (_vacant!475 newMap!16))))))

(declare-fun b!97761 () Bool)

(assert (=> b!97761 (= e!63765 ((_ is Undefined!263) lt!48975))))

(declare-fun bm!9950 () Bool)

(declare-fun call!9961 () Bool)

(assert (=> bm!9950 (= call!9958 call!9961)))

(declare-fun b!97762 () Bool)

(assert (=> b!97762 (= e!63753 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!97763 () Bool)

(declare-fun e!63758 () Bool)

(assert (=> b!97763 (= e!63762 e!63758)))

(declare-fun res!49214 () Bool)

(assert (=> b!97763 (= res!49214 (contains!805 call!9950 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> b!97763 (=> (not res!49214) (not e!63758))))

(declare-fun bm!9951 () Bool)

(declare-fun lt!48976 () array!4242)

(assert (=> bm!9951 (= call!9966 (getCurrentListMap!472 (_keys!4171 newMap!16) (ite c!16562 (_values!2464 newMap!16) lt!48976) (mask!6578 newMap!16) (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!97764 () Bool)

(declare-fun e!63760 () Unit!2965)

(declare-fun lt!48980 () Unit!2965)

(assert (=> b!97764 (= e!63760 lt!48980)))

(assert (=> b!97764 (= lt!48980 call!9964)))

(declare-fun lt!48965 () SeekEntryResult!263)

(assert (=> b!97764 (= lt!48965 call!9959)))

(declare-fun res!49221 () Bool)

(assert (=> b!97764 (= res!49221 ((_ is Found!263) lt!48965))))

(declare-fun e!63759 () Bool)

(assert (=> b!97764 (=> (not res!49221) (not e!63759))))

(assert (=> b!97764 e!63759))

(declare-fun bm!9952 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4240 (_ BitVec 32)) SeekEntryResult!263)

(assert (=> bm!9952 (= call!9955 (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!97765 () Bool)

(assert (=> b!97765 (= e!63753 (ite c!16560 call!9952 call!9949))))

(declare-fun b!97766 () Bool)

(declare-fun c!16558 () Bool)

(assert (=> b!97766 (= c!16558 ((_ is MissingVacant!263) lt!48975))))

(declare-fun e!63764 () Bool)

(assert (=> b!97766 (= e!63764 e!63765)))

(declare-fun bm!9953 () Bool)

(declare-fun call!9944 () Bool)

(assert (=> bm!9953 (= call!9960 call!9944)))

(declare-fun b!97767 () Bool)

(declare-fun lt!48969 () tuple2!2354)

(assert (=> b!97767 (= lt!48969 call!9957)))

(assert (=> b!97767 (= e!63771 (tuple2!2355 (_1!1187 lt!48969) (_2!1187 lt!48969)))))

(declare-fun bm!9954 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) Int) Unit!2965)

(assert (=> bm!9954 (= call!9962 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(declare-fun b!97768 () Bool)

(assert (=> b!97768 (= e!63758 (= call!9950 (+!138 call!9943 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!97769 () Bool)

(assert (=> b!97769 (= e!63773 (not call!9960))))

(declare-fun b!97770 () Bool)

(assert (=> b!97770 (= e!63759 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48965)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun bm!9955 () Bool)

(declare-fun lt!48968 () tuple2!2354)

(assert (=> bm!9955 (= call!9950 (map!1255 (_2!1187 lt!48968)))))

(declare-fun bm!9956 () Bool)

(declare-fun call!9963 () ListLongMap!1551)

(assert (=> bm!9956 (= call!9963 call!9956)))

(declare-fun b!97771 () Bool)

(declare-fun e!63754 () tuple2!2354)

(assert (=> b!97771 (= e!63754 e!63763)))

(assert (=> b!97771 (= lt!48985 (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (=> b!97771 (= c!16557 ((_ is Undefined!263) lt!48985))))

(declare-fun b!97772 () Bool)

(declare-fun lt!48962 () Unit!2965)

(declare-fun lt!48971 () Unit!2965)

(assert (=> b!97772 (= lt!48962 lt!48971)))

(assert (=> b!97772 (contains!805 call!9966 (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985)))))

(declare-fun lemmaValidKeyInArrayIsInListMap!99 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) Int) Unit!2965)

(assert (=> b!97772 (= lt!48971 (lemmaValidKeyInArrayIsInListMap!99 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3196 lt!48985) (defaultEntry!2481 newMap!16)))))

(assert (=> b!97772 (= lt!48976 (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))))

(declare-fun lt!48983 () Unit!2965)

(declare-fun lt!48967 () Unit!2965)

(assert (=> b!97772 (= lt!48983 lt!48967)))

(assert (=> b!97772 (= call!9945 call!9963)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) (_ BitVec 64) V!3155 Int) Unit!2965)

(assert (=> b!97772 (= lt!48967 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3196 lt!48985) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(declare-fun lt!48970 () Unit!2965)

(assert (=> b!97772 (= lt!48970 e!63760)))

(declare-fun c!16551 () Bool)

(assert (=> b!97772 (= c!16551 call!9953)))

(assert (=> b!97772 (= e!63771 (tuple2!2355 true (LongMapFixedSize!853 (defaultEntry!2481 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (_size!475 newMap!16) (_keys!4171 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (_vacant!475 newMap!16))))))

(declare-fun b!97773 () Bool)

(declare-fun c!16561 () Bool)

(assert (=> b!97773 (= c!16561 ((_ is MissingVacant!263) lt!48984))))

(assert (=> b!97773 (= e!63766 e!63757)))

(declare-fun b!97774 () Bool)

(declare-fun e!63770 () Bool)

(assert (=> b!97774 (= e!63770 e!63762)))

(declare-fun c!16559 () Bool)

(assert (=> b!97774 (= c!16559 (_1!1187 lt!48968))))

(declare-fun b!97775 () Bool)

(assert (=> b!97775 (= e!63752 call!9963)))

(declare-fun b!97776 () Bool)

(declare-fun res!49226 () Bool)

(assert (=> b!97776 (= res!49226 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3198 lt!48975)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97776 (=> (not res!49226) (not e!63756))))

(declare-fun bm!9957 () Bool)

(assert (=> bm!9957 (= call!9961 call!9946)))

(declare-fun bm!9958 () Bool)

(assert (=> bm!9958 (= call!9948 call!9944)))

(declare-fun d!26005 () Bool)

(assert (=> d!26005 e!63770))

(declare-fun res!49223 () Bool)

(assert (=> d!26005 (=> (not res!49223) (not e!63770))))

(assert (=> d!26005 (= res!49223 (valid!385 (_2!1187 lt!48968)))))

(assert (=> d!26005 (= lt!48968 e!63754)))

(assert (=> d!26005 (= c!16562 (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvneg (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (=> d!26005 (valid!385 newMap!16)))

(assert (=> d!26005 (= (update!146 newMap!16 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!48968)))

(declare-fun b!97777 () Bool)

(declare-fun e!63761 () Bool)

(assert (=> b!97777 (= e!63757 e!63761)))

(declare-fun res!49225 () Bool)

(assert (=> b!97777 (= res!49225 call!9951)))

(assert (=> b!97777 (=> (not res!49225) (not e!63761))))

(declare-fun b!97778 () Bool)

(declare-fun Unit!2974 () Unit!2965)

(assert (=> b!97778 (= e!63769 Unit!2974)))

(declare-fun lt!48979 () Unit!2965)

(assert (=> b!97778 (= lt!48979 call!9964)))

(assert (=> b!97778 (= lt!48959 call!9965)))

(declare-fun res!49224 () Bool)

(assert (=> b!97778 (= res!49224 ((_ is Found!263) lt!48959))))

(assert (=> b!97778 (=> (not res!49224) (not e!63772))))

(assert (=> b!97778 e!63772))

(declare-fun lt!48977 () Unit!2965)

(assert (=> b!97778 (= lt!48977 lt!48979)))

(assert (=> b!97778 false))

(declare-fun b!97779 () Bool)

(declare-fun res!49220 () Bool)

(assert (=> b!97779 (=> (not res!49220) (not e!63773))))

(assert (=> b!97779 (= res!49220 call!9958)))

(assert (=> b!97779 (= e!63764 e!63773)))

(declare-fun bm!9959 () Bool)

(declare-fun c!16564 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!9959 (= call!9946 (inRange!0 (ite c!16557 (ite c!16554 (index!3196 lt!48959) (ite c!16553 (index!3195 lt!48984) (index!3198 lt!48984))) (ite c!16551 (index!3196 lt!48965) (ite c!16564 (index!3195 lt!48975) (index!3198 lt!48975)))) (mask!6578 newMap!16)))))

(declare-fun b!97780 () Bool)

(declare-fun res!49213 () Bool)

(assert (=> b!97780 (= res!49213 call!9961)))

(assert (=> b!97780 (=> (not res!49213) (not e!63759))))

(declare-fun b!97781 () Bool)

(declare-fun res!49218 () Bool)

(assert (=> b!97781 (= res!49218 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3198 lt!48984)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97781 (=> (not res!49218) (not e!63761))))

(declare-fun bm!9960 () Bool)

(declare-fun lt!48973 () (_ BitVec 32))

(assert (=> bm!9960 (= call!9956 (getCurrentListMap!472 (_keys!4171 newMap!16) (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) (zeroValue!2364 newMap!16) (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!97782 () Bool)

(assert (=> b!97782 (= e!63754 e!63755)))

(assert (=> b!97782 (= c!16560 (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!9961 () Bool)

(assert (=> bm!9961 (= call!9944 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!97783 () Bool)

(declare-fun lt!48961 () Unit!2965)

(declare-fun lt!48966 () Unit!2965)

(assert (=> b!97783 (= lt!48961 lt!48966)))

(assert (=> b!97783 (= call!9947 call!9952)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 V!3155 Int) Unit!2965)

(assert (=> b!97783 (= lt!48966 (lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(assert (=> b!97783 (= lt!48973 (bvor (extraKeys!2302 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!97783 (= e!63755 (tuple2!2355 true (LongMapFixedSize!853 (defaultEntry!2481 newMap!16) (mask!6578 newMap!16) (bvor (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!475 newMap!16) (_keys!4171 newMap!16) (_values!2464 newMap!16) (_vacant!475 newMap!16))))))

(declare-fun bm!9962 () Bool)

(assert (=> bm!9962 (= call!9965 call!9955)))

(declare-fun bm!9963 () Bool)

(assert (=> bm!9963 (= call!9947 call!9945)))

(declare-fun b!97784 () Bool)

(assert (=> b!97784 (= c!16555 ((_ is MissingVacant!263) lt!48985))))

(assert (=> b!97784 (= e!63763 e!63768)))

(declare-fun b!97785 () Bool)

(assert (=> b!97785 (= e!63761 (not call!9948))))

(declare-fun b!97786 () Bool)

(declare-fun Unit!2975 () Unit!2965)

(assert (=> b!97786 (= e!63760 Unit!2975)))

(declare-fun lt!48972 () Unit!2965)

(assert (=> b!97786 (= lt!48972 call!9962)))

(assert (=> b!97786 (= lt!48975 call!9959)))

(assert (=> b!97786 (= c!16564 ((_ is MissingZero!263) lt!48975))))

(assert (=> b!97786 e!63764))

(declare-fun lt!48960 () Unit!2965)

(assert (=> b!97786 (= lt!48960 lt!48972)))

(assert (=> b!97786 false))

(assert (= (and d!26005 c!16562) b!97782))

(assert (= (and d!26005 (not c!16562)) b!97771))

(assert (= (and b!97782 c!16560) b!97760))

(assert (= (and b!97782 (not c!16560)) b!97783))

(assert (= (or b!97760 b!97783) bm!9947))

(assert (= (or b!97760 b!97783) bm!9945))

(assert (= (or b!97760 b!97783) bm!9963))

(assert (= (and b!97771 c!16557) b!97759))

(assert (= (and b!97771 (not c!16557)) b!97784))

(assert (= (and b!97759 c!16554) b!97778))

(assert (= (and b!97759 (not c!16554)) b!97758))

(assert (= (and b!97778 res!49224) b!97754))

(assert (= (and b!97754 res!49215) b!97745))

(assert (= (and b!97758 c!16553) b!97751))

(assert (= (and b!97758 (not c!16553)) b!97773))

(assert (= (and b!97751 res!49216) b!97747))

(assert (= (and b!97747 res!49217) b!97746))

(assert (= (and b!97773 c!16561) b!97777))

(assert (= (and b!97773 (not c!16561)) b!97756))

(assert (= (and b!97777 res!49225) b!97781))

(assert (= (and b!97781 res!49218) b!97785))

(assert (= (or b!97751 b!97777) bm!9948))

(assert (= (or b!97746 b!97785) bm!9958))

(assert (= (or b!97754 bm!9948) bm!9940))

(assert (= (or b!97778 b!97758) bm!9962))

(assert (= (and b!97784 c!16555) b!97752))

(assert (= (and b!97784 (not c!16555)) b!97755))

(assert (= (and b!97755 c!16563) b!97767))

(assert (= (and b!97755 (not c!16563)) b!97772))

(assert (= (and b!97772 c!16551) b!97764))

(assert (= (and b!97772 (not c!16551)) b!97786))

(assert (= (and b!97764 res!49221) b!97780))

(assert (= (and b!97780 res!49213) b!97770))

(assert (= (and b!97786 c!16564) b!97779))

(assert (= (and b!97786 (not c!16564)) b!97766))

(assert (= (and b!97779 res!49220) b!97748))

(assert (= (and b!97748 res!49222) b!97769))

(assert (= (and b!97766 c!16558) b!97750))

(assert (= (and b!97766 (not c!16558)) b!97761))

(assert (= (and b!97750 res!49219) b!97776))

(assert (= (and b!97776 res!49226) b!97753))

(assert (= (or b!97779 b!97750) bm!9950))

(assert (= (or b!97769 b!97753) bm!9953))

(assert (= (or b!97780 bm!9950) bm!9957))

(assert (= (or b!97764 b!97786) bm!9941))

(assert (= (or b!97752 b!97767) bm!9949))

(assert (= (or bm!9958 bm!9953) bm!9961))

(assert (= (or bm!9940 bm!9957) bm!9959))

(assert (= (or b!97759 b!97772) bm!9956))

(assert (= (or b!97778 b!97764) bm!9943))

(assert (= (or b!97758 b!97786) bm!9954))

(assert (= (or bm!9962 bm!9941) bm!9952))

(assert (= (or b!97759 b!97772) bm!9944))

(assert (= (and bm!9944 c!16556) b!97775))

(assert (= (and bm!9944 (not c!16556)) b!97749))

(assert (= (or bm!9945 bm!9956) bm!9960))

(assert (= (or bm!9947 b!97772) bm!9951))

(assert (= (or bm!9963 b!97772) bm!9946))

(assert (= (and bm!9946 c!16552) b!97765))

(assert (= (and bm!9946 (not c!16552)) b!97762))

(assert (= (and d!26005 res!49223) b!97774))

(assert (= (and b!97774 c!16559) b!97763))

(assert (= (and b!97774 (not c!16559)) b!97757))

(assert (= (and b!97763 res!49214) b!97768))

(assert (= (or b!97763 b!97768 b!97757) bm!9955))

(assert (= (or b!97768 b!97757) bm!9942))

(declare-fun m!106753 () Bool)

(assert (=> b!97781 m!106753))

(assert (=> bm!9961 m!106609))

(declare-fun m!106755 () Bool)

(assert (=> bm!9961 m!106755))

(assert (=> bm!9944 m!106609))

(declare-fun m!106757 () Bool)

(assert (=> bm!9944 m!106757))

(assert (=> b!97763 m!106609))

(declare-fun m!106759 () Bool)

(assert (=> b!97763 m!106759))

(declare-fun m!106761 () Bool)

(assert (=> bm!9960 m!106761))

(declare-fun m!106763 () Bool)

(assert (=> bm!9960 m!106763))

(assert (=> b!97783 m!106607))

(declare-fun m!106765 () Bool)

(assert (=> b!97783 m!106765))

(declare-fun m!106767 () Bool)

(assert (=> b!97776 m!106767))

(declare-fun m!106769 () Bool)

(assert (=> b!97748 m!106769))

(assert (=> bm!9949 m!106609))

(assert (=> bm!9949 m!106607))

(declare-fun m!106771 () Bool)

(assert (=> bm!9949 m!106771))

(declare-fun m!106773 () Bool)

(assert (=> bm!9955 m!106773))

(assert (=> b!97772 m!106609))

(assert (=> b!97772 m!106607))

(declare-fun m!106775 () Bool)

(assert (=> b!97772 m!106775))

(declare-fun m!106777 () Bool)

(assert (=> b!97772 m!106777))

(declare-fun m!106779 () Bool)

(assert (=> b!97772 m!106779))

(assert (=> b!97772 m!106777))

(declare-fun m!106781 () Bool)

(assert (=> b!97772 m!106781))

(assert (=> b!97772 m!106761))

(assert (=> b!97749 m!106687))

(declare-fun m!106783 () Bool)

(assert (=> bm!9959 m!106783))

(assert (=> bm!9952 m!106609))

(declare-fun m!106785 () Bool)

(assert (=> bm!9952 m!106785))

(assert (=> bm!9954 m!106609))

(declare-fun m!106787 () Bool)

(assert (=> bm!9954 m!106787))

(assert (=> b!97760 m!106607))

(declare-fun m!106789 () Bool)

(assert (=> b!97760 m!106789))

(assert (=> b!97771 m!106609))

(assert (=> b!97771 m!106785))

(assert (=> bm!9943 m!106609))

(declare-fun m!106791 () Bool)

(assert (=> bm!9943 m!106791))

(declare-fun m!106793 () Bool)

(assert (=> bm!9951 m!106793))

(declare-fun m!106795 () Bool)

(assert (=> b!97745 m!106795))

(declare-fun m!106797 () Bool)

(assert (=> d!26005 m!106797))

(assert (=> d!26005 m!106595))

(declare-fun m!106799 () Bool)

(assert (=> b!97747 m!106799))

(assert (=> b!97762 m!106687))

(assert (=> bm!9942 m!106615))

(declare-fun m!106801 () Bool)

(assert (=> b!97768 m!106801))

(declare-fun m!106803 () Bool)

(assert (=> b!97770 m!106803))

(declare-fun m!106805 () Bool)

(assert (=> bm!9946 m!106805))

(assert (=> b!97518 d!26005))

(declare-fun d!26007 () Bool)

(declare-fun c!16567 () Bool)

(assert (=> d!26007 (= c!16567 ((_ is ValueCellFull!972) (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun e!63776 () V!3155)

(assert (=> d!26007 (= (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63776)))

(declare-fun b!97791 () Bool)

(declare-fun get!1298 (ValueCell!972 V!3155) V!3155)

(assert (=> b!97791 (= e!63776 (get!1298 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!97792 () Bool)

(declare-fun get!1299 (ValueCell!972 V!3155) V!3155)

(assert (=> b!97792 (= e!63776 (get!1299 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26007 c!16567) b!97791))

(assert (= (and d!26007 (not c!16567)) b!97792))

(assert (=> b!97791 m!106603))

(assert (=> b!97791 m!106605))

(declare-fun m!106807 () Bool)

(assert (=> b!97791 m!106807))

(assert (=> b!97792 m!106603))

(assert (=> b!97792 m!106605))

(declare-fun m!106809 () Bool)

(assert (=> b!97792 m!106809))

(assert (=> b!97518 d!26007))

(declare-fun d!26009 () Bool)

(assert (=> d!26009 (not (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!48988 () Unit!2965)

(declare-fun choose!68 (array!4240 (_ BitVec 32) (_ BitVec 64) List!1611) Unit!2965)

(assert (=> d!26009 (= lt!48988 (choose!68 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608)))))

(assert (=> d!26009 (bvslt (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!26009 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608)) lt!48988)))

(declare-fun bs!4024 () Bool)

(assert (= bs!4024 d!26009))

(assert (=> bs!4024 m!106609))

(assert (=> bs!4024 m!106629))

(assert (=> bs!4024 m!106609))

(declare-fun m!106811 () Bool)

(assert (=> bs!4024 m!106811))

(assert (=> b!97504 d!26009))

(declare-fun d!26011 () Bool)

(assert (=> d!26011 (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) from!355 Nil!1608)))

(declare-fun lt!48991 () Unit!2965)

(declare-fun choose!39 (array!4240 (_ BitVec 32) (_ BitVec 32)) Unit!2965)

(assert (=> d!26011 (= lt!48991 (choose!39 (_keys!4171 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!26011 (bvslt (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!26011 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000 from!355) lt!48991)))

(declare-fun bs!4025 () Bool)

(assert (= bs!4025 d!26011))

(assert (=> bs!4025 m!106625))

(declare-fun m!106813 () Bool)

(assert (=> bs!4025 m!106813))

(assert (=> b!97504 d!26011))

(declare-fun d!26013 () Bool)

(declare-fun res!49231 () Bool)

(declare-fun e!63781 () Bool)

(assert (=> d!26013 (=> res!49231 e!63781)))

(assert (=> d!26013 (= res!49231 (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26013 (= (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!63781)))

(declare-fun b!97797 () Bool)

(declare-fun e!63782 () Bool)

(assert (=> b!97797 (= e!63781 e!63782)))

(declare-fun res!49232 () Bool)

(assert (=> b!97797 (=> (not res!49232) (not e!63782))))

(assert (=> b!97797 (= res!49232 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!97798 () Bool)

(assert (=> b!97798 (= e!63782 (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!26013 (not res!49231)) b!97797))

(assert (= (and b!97797 res!49232) b!97798))

(assert (=> d!26013 m!106689))

(assert (=> b!97798 m!106609))

(declare-fun m!106815 () Bool)

(assert (=> b!97798 m!106815))

(assert (=> b!97504 d!26013))

(declare-fun d!26015 () Bool)

(declare-fun e!63785 () Bool)

(assert (=> d!26015 e!63785))

(declare-fun c!16570 () Bool)

(assert (=> d!26015 (= c!16570 (and (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!48994 () Unit!2965)

(declare-fun choose!595 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) (_ BitVec 32) Int) Unit!2965)

(assert (=> d!26015 (= lt!48994 (choose!595 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))))))

(assert (=> d!26015 (validMask!0 (mask!6578 (v!2801 (underlying!339 thiss!992))))))

(assert (=> d!26015 (= (lemmaListMapContainsThenArrayContainsFrom!98 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))) lt!48994)))

(declare-fun b!97803 () Bool)

(assert (=> b!97803 (= e!63785 (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!97804 () Bool)

(assert (=> b!97804 (= e!63785 (ite (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26015 c!16570) b!97803))

(assert (= (and d!26015 (not c!16570)) b!97804))

(assert (=> d!26015 m!106609))

(declare-fun m!106817 () Bool)

(assert (=> d!26015 m!106817))

(assert (=> d!26015 m!106601))

(assert (=> b!97803 m!106609))

(assert (=> b!97803 m!106629))

(assert (=> b!97504 d!26015))

(declare-fun b!97815 () Bool)

(declare-fun e!63794 () Bool)

(declare-fun call!9969 () Bool)

(assert (=> b!97815 (= e!63794 call!9969)))

(declare-fun b!97816 () Bool)

(assert (=> b!97816 (= e!63794 call!9969)))

(declare-fun d!26017 () Bool)

(declare-fun res!49240 () Bool)

(declare-fun e!63797 () Bool)

(assert (=> d!26017 (=> res!49240 e!63797)))

(assert (=> d!26017 (= res!49240 (bvsge from!355 (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> d!26017 (= (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) from!355 Nil!1608) e!63797)))

(declare-fun b!97817 () Bool)

(declare-fun e!63795 () Bool)

(assert (=> b!97817 (= e!63797 e!63795)))

(declare-fun res!49241 () Bool)

(assert (=> b!97817 (=> (not res!49241) (not e!63795))))

(declare-fun e!63796 () Bool)

(assert (=> b!97817 (= res!49241 (not e!63796))))

(declare-fun res!49239 () Bool)

(assert (=> b!97817 (=> (not res!49239) (not e!63796))))

(assert (=> b!97817 (= res!49239 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!97818 () Bool)

(assert (=> b!97818 (= e!63795 e!63794)))

(declare-fun c!16573 () Bool)

(assert (=> b!97818 (= c!16573 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun bm!9966 () Bool)

(assert (=> bm!9966 (= call!9969 (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)))))

(declare-fun b!97819 () Bool)

(declare-fun contains!807 (List!1611 (_ BitVec 64)) Bool)

(assert (=> b!97819 (= e!63796 (contains!807 Nil!1608 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (= (and d!26017 (not res!49240)) b!97817))

(assert (= (and b!97817 res!49239) b!97819))

(assert (= (and b!97817 res!49241) b!97818))

(assert (= (and b!97818 c!16573) b!97815))

(assert (= (and b!97818 (not c!16573)) b!97816))

(assert (= (or b!97815 b!97816) bm!9966))

(assert (=> b!97817 m!106609))

(assert (=> b!97817 m!106609))

(declare-fun m!106819 () Bool)

(assert (=> b!97817 m!106819))

(assert (=> b!97818 m!106609))

(assert (=> b!97818 m!106609))

(assert (=> b!97818 m!106819))

(assert (=> bm!9966 m!106609))

(declare-fun m!106821 () Bool)

(assert (=> bm!9966 m!106821))

(assert (=> b!97819 m!106609))

(assert (=> b!97819 m!106609))

(declare-fun m!106823 () Bool)

(assert (=> b!97819 m!106823))

(assert (=> b!97504 d!26017))

(declare-fun d!26019 () Bool)

(assert (=> d!26019 (= (array_inv!1211 (_keys!4171 newMap!16)) (bvsge (size!2264 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97516 d!26019))

(declare-fun d!26021 () Bool)

(assert (=> d!26021 (= (array_inv!1212 (_values!2464 newMap!16)) (bvsge (size!2265 (_values!2464 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97516 d!26021))

(declare-fun mapIsEmpty!3755 () Bool)

(declare-fun mapRes!3755 () Bool)

(assert (=> mapIsEmpty!3755 mapRes!3755))

(declare-fun condMapEmpty!3755 () Bool)

(declare-fun mapDefault!3755 () ValueCell!972)

(assert (=> mapNonEmpty!3746 (= condMapEmpty!3755 (= mapRest!3746 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3755)))))

(declare-fun e!63802 () Bool)

(assert (=> mapNonEmpty!3746 (= tp!9569 (and e!63802 mapRes!3755))))

(declare-fun b!97826 () Bool)

(declare-fun e!63803 () Bool)

(assert (=> b!97826 (= e!63803 tp_is_empty!2631)))

(declare-fun b!97827 () Bool)

(assert (=> b!97827 (= e!63802 tp_is_empty!2631)))

(declare-fun mapNonEmpty!3755 () Bool)

(declare-fun tp!9587 () Bool)

(assert (=> mapNonEmpty!3755 (= mapRes!3755 (and tp!9587 e!63803))))

(declare-fun mapRest!3755 () (Array (_ BitVec 32) ValueCell!972))

(declare-fun mapKey!3755 () (_ BitVec 32))

(declare-fun mapValue!3755 () ValueCell!972)

(assert (=> mapNonEmpty!3755 (= mapRest!3746 (store mapRest!3755 mapKey!3755 mapValue!3755))))

(assert (= (and mapNonEmpty!3746 condMapEmpty!3755) mapIsEmpty!3755))

(assert (= (and mapNonEmpty!3746 (not condMapEmpty!3755)) mapNonEmpty!3755))

(assert (= (and mapNonEmpty!3755 ((_ is ValueCellFull!972) mapValue!3755)) b!97826))

(assert (= (and mapNonEmpty!3746 ((_ is ValueCellFull!972) mapDefault!3755)) b!97827))

(declare-fun m!106825 () Bool)

(assert (=> mapNonEmpty!3755 m!106825))

(declare-fun mapIsEmpty!3756 () Bool)

(declare-fun mapRes!3756 () Bool)

(assert (=> mapIsEmpty!3756 mapRes!3756))

(declare-fun condMapEmpty!3756 () Bool)

(declare-fun mapDefault!3756 () ValueCell!972)

(assert (=> mapNonEmpty!3745 (= condMapEmpty!3756 (= mapRest!3745 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3756)))))

(declare-fun e!63804 () Bool)

(assert (=> mapNonEmpty!3745 (= tp!9571 (and e!63804 mapRes!3756))))

(declare-fun b!97828 () Bool)

(declare-fun e!63805 () Bool)

(assert (=> b!97828 (= e!63805 tp_is_empty!2631)))

(declare-fun b!97829 () Bool)

(assert (=> b!97829 (= e!63804 tp_is_empty!2631)))

(declare-fun mapNonEmpty!3756 () Bool)

(declare-fun tp!9588 () Bool)

(assert (=> mapNonEmpty!3756 (= mapRes!3756 (and tp!9588 e!63805))))

(declare-fun mapValue!3756 () ValueCell!972)

(declare-fun mapKey!3756 () (_ BitVec 32))

(declare-fun mapRest!3756 () (Array (_ BitVec 32) ValueCell!972))

(assert (=> mapNonEmpty!3756 (= mapRest!3745 (store mapRest!3756 mapKey!3756 mapValue!3756))))

(assert (= (and mapNonEmpty!3745 condMapEmpty!3756) mapIsEmpty!3756))

(assert (= (and mapNonEmpty!3745 (not condMapEmpty!3756)) mapNonEmpty!3756))

(assert (= (and mapNonEmpty!3756 ((_ is ValueCellFull!972) mapValue!3756)) b!97828))

(assert (= (and mapNonEmpty!3745 ((_ is ValueCellFull!972) mapDefault!3756)) b!97829))

(declare-fun m!106827 () Bool)

(assert (=> mapNonEmpty!3756 m!106827))

(declare-fun b_lambda!4361 () Bool)

(assert (= b_lambda!4359 (or (and b!97514 b_free!2429) (and b!97516 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))))) b_lambda!4361)))

(check-sat (not b!97818) (not d!26015) (not b!97792) (not b!97646) (not d!26003) (not bm!9943) (not bm!9886) (not b!97588) (not d!26011) (not bm!9887) (not b!97762) (not b!97771) (not b!97798) (not b_next!2429) (not b!97642) (not mapNonEmpty!3756) (not b!97660) (not bm!9891) (not d!25989) (not b_next!2431) (not bm!9942) (not bm!9960) (not b!97749) (not d!26009) (not d!26005) (not b!97650) (not bm!9955) (not bm!9949) (not bm!9952) (not bm!9959) (not b!97783) (not b!97760) tp_is_empty!2631 (not d!26001) (not d!25991) (not b_lambda!4361) (not b!97587) b_and!6011 (not bm!9946) (not bm!9951) (not b!97643) (not b!97586) (not b!97637) (not b!97763) (not bm!9890) (not bm!9966) (not b!97791) (not b!97772) (not b!97632) (not d!25999) (not b_lambda!4357) (not b!97636) (not mapNonEmpty!3755) (not bm!9954) (not b!97768) (not b!97658) b_and!6009 (not b!97638) (not b!97803) (not bm!9961) (not b!97817) (not b!97819) (not bm!9944))
(check-sat b_and!6009 b_and!6011 (not b_next!2429) (not b_next!2431))
(get-model)

(declare-fun d!26023 () Bool)

(declare-fun e!63808 () Bool)

(assert (=> d!26023 e!63808))

(declare-fun res!49247 () Bool)

(assert (=> d!26023 (=> (not res!49247) (not e!63808))))

(declare-fun lt!49003 () ListLongMap!1551)

(assert (=> d!26023 (= res!49247 (contains!805 lt!49003 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun lt!49005 () List!1612)

(assert (=> d!26023 (= lt!49003 (ListLongMap!1552 lt!49005))))

(declare-fun lt!49006 () Unit!2965)

(declare-fun lt!49004 () Unit!2965)

(assert (=> d!26023 (= lt!49006 lt!49004)))

(assert (=> d!26023 (= (getValueByKey!149 lt!49005 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!67 (List!1612 (_ BitVec 64) V!3155) Unit!2965)

(assert (=> d!26023 (= lt!49004 (lemmaContainsTupThenGetReturnValue!67 lt!49005 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun insertStrictlySorted!69 (List!1612 (_ BitVec 64) V!3155) List!1612)

(assert (=> d!26023 (= lt!49005 (insertStrictlySorted!69 (toList!791 call!9892) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26023 (= (+!138 call!9892 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!49003)))

(declare-fun b!97834 () Bool)

(declare-fun res!49246 () Bool)

(assert (=> b!97834 (=> (not res!49246) (not e!63808))))

(assert (=> b!97834 (= res!49246 (= (getValueByKey!149 (toList!791 lt!49003) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!97835 () Bool)

(declare-fun contains!808 (List!1612 tuple2!2352) Bool)

(assert (=> b!97835 (= e!63808 (contains!808 (toList!791 lt!49003) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(assert (= (and d!26023 res!49247) b!97834))

(assert (= (and b!97834 res!49246) b!97835))

(declare-fun m!106829 () Bool)

(assert (=> d!26023 m!106829))

(declare-fun m!106831 () Bool)

(assert (=> d!26023 m!106831))

(declare-fun m!106833 () Bool)

(assert (=> d!26023 m!106833))

(declare-fun m!106835 () Bool)

(assert (=> d!26023 m!106835))

(declare-fun m!106837 () Bool)

(assert (=> b!97834 m!106837))

(declare-fun m!106839 () Bool)

(assert (=> b!97835 m!106839))

(assert (=> b!97650 d!26023))

(declare-fun d!26025 () Bool)

(declare-fun res!49248 () Bool)

(declare-fun e!63809 () Bool)

(assert (=> d!26025 (=> res!49248 e!63809)))

(assert (=> d!26025 (= res!49248 (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26025 (= (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!63809)))

(declare-fun b!97836 () Bool)

(declare-fun e!63810 () Bool)

(assert (=> b!97836 (= e!63809 e!63810)))

(declare-fun res!49249 () Bool)

(assert (=> b!97836 (=> (not res!49249) (not e!63810))))

(assert (=> b!97836 (= res!49249 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!97837 () Bool)

(assert (=> b!97837 (= e!63810 (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26025 (not res!49248)) b!97836))

(assert (= (and b!97836 res!49249) b!97837))

(declare-fun m!106841 () Bool)

(assert (=> d!26025 m!106841))

(assert (=> b!97837 m!106609))

(declare-fun m!106843 () Bool)

(assert (=> b!97837 m!106843))

(assert (=> b!97798 d!26025))

(declare-fun d!26027 () Bool)

(declare-fun lt!49009 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!100 (List!1611) (InoxSet (_ BitVec 64)))

(assert (=> d!26027 (= lt!49009 (select (content!100 Nil!1608) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun e!63815 () Bool)

(assert (=> d!26027 (= lt!49009 e!63815)))

(declare-fun res!49254 () Bool)

(assert (=> d!26027 (=> (not res!49254) (not e!63815))))

(assert (=> d!26027 (= res!49254 ((_ is Cons!1607) Nil!1608))))

(assert (=> d!26027 (= (contains!807 Nil!1608 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) lt!49009)))

(declare-fun b!97842 () Bool)

(declare-fun e!63816 () Bool)

(assert (=> b!97842 (= e!63815 e!63816)))

(declare-fun res!49255 () Bool)

(assert (=> b!97842 (=> res!49255 e!63816)))

(assert (=> b!97842 (= res!49255 (= (h!2201 Nil!1608) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!97843 () Bool)

(assert (=> b!97843 (= e!63816 (contains!807 (t!5573 Nil!1608) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (= (and d!26027 res!49254) b!97842))

(assert (= (and b!97842 (not res!49255)) b!97843))

(declare-fun m!106845 () Bool)

(assert (=> d!26027 m!106845))

(assert (=> d!26027 m!106609))

(declare-fun m!106847 () Bool)

(assert (=> d!26027 m!106847))

(assert (=> b!97843 m!106609))

(declare-fun m!106849 () Bool)

(assert (=> b!97843 m!106849))

(assert (=> b!97819 d!26027))

(declare-fun d!26029 () Bool)

(assert (=> d!26029 (= (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (and (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97818 d!26029))

(declare-fun d!26031 () Bool)

(declare-fun isEmpty!361 (Option!155) Bool)

(assert (=> d!26031 (= (isDefined!103 (getValueByKey!149 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))) (not (isEmpty!361 (getValueByKey!149 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))))

(declare-fun bs!4026 () Bool)

(assert (= bs!4026 d!26031))

(assert (=> bs!4026 m!106749))

(declare-fun m!106851 () Bool)

(assert (=> bs!4026 m!106851))

(assert (=> b!97660 d!26031))

(declare-fun b!97853 () Bool)

(declare-fun e!63821 () Option!155)

(declare-fun e!63822 () Option!155)

(assert (=> b!97853 (= e!63821 e!63822)))

(declare-fun c!16579 () Bool)

(assert (=> b!97853 (= c!16579 (and ((_ is Cons!1608) (toList!791 lt!48799)) (not (= (_1!1186 (h!2202 (toList!791 lt!48799))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))))

(declare-fun b!97855 () Bool)

(assert (=> b!97855 (= e!63822 None!153)))

(declare-fun d!26033 () Bool)

(declare-fun c!16578 () Bool)

(assert (=> d!26033 (= c!16578 (and ((_ is Cons!1608) (toList!791 lt!48799)) (= (_1!1186 (h!2202 (toList!791 lt!48799))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (=> d!26033 (= (getValueByKey!149 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) e!63821)))

(declare-fun b!97854 () Bool)

(assert (=> b!97854 (= e!63822 (getValueByKey!149 (t!5574 (toList!791 lt!48799)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!97852 () Bool)

(assert (=> b!97852 (= e!63821 (Some!154 (_2!1186 (h!2202 (toList!791 lt!48799)))))))

(assert (= (and d!26033 c!16578) b!97852))

(assert (= (and d!26033 (not c!16578)) b!97853))

(assert (= (and b!97853 c!16579) b!97854))

(assert (= (and b!97853 (not c!16579)) b!97855))

(assert (=> b!97854 m!106609))

(declare-fun m!106853 () Bool)

(assert (=> b!97854 m!106853))

(assert (=> b!97660 d!26033))

(declare-fun d!26035 () Bool)

(declare-fun e!63823 () Bool)

(assert (=> d!26035 e!63823))

(declare-fun res!49257 () Bool)

(assert (=> d!26035 (=> (not res!49257) (not e!63823))))

(declare-fun lt!49010 () ListLongMap!1551)

(assert (=> d!26035 (= res!49257 (contains!805 lt!49010 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49012 () List!1612)

(assert (=> d!26035 (= lt!49010 (ListLongMap!1552 lt!49012))))

(declare-fun lt!49013 () Unit!2965)

(declare-fun lt!49011 () Unit!2965)

(assert (=> d!26035 (= lt!49013 lt!49011)))

(assert (=> d!26035 (= (getValueByKey!149 lt!49012 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26035 (= lt!49011 (lemmaContainsTupThenGetReturnValue!67 lt!49012 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26035 (= lt!49012 (insertStrictlySorted!69 (toList!791 call!9943) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26035 (= (+!138 call!9943 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49010)))

(declare-fun b!97856 () Bool)

(declare-fun res!49256 () Bool)

(assert (=> b!97856 (=> (not res!49256) (not e!63823))))

(assert (=> b!97856 (= res!49256 (= (getValueByKey!149 (toList!791 lt!49010) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!97857 () Bool)

(assert (=> b!97857 (= e!63823 (contains!808 (toList!791 lt!49010) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26035 res!49257) b!97856))

(assert (= (and b!97856 res!49256) b!97857))

(declare-fun m!106855 () Bool)

(assert (=> d!26035 m!106855))

(declare-fun m!106857 () Bool)

(assert (=> d!26035 m!106857))

(declare-fun m!106859 () Bool)

(assert (=> d!26035 m!106859))

(declare-fun m!106861 () Bool)

(assert (=> d!26035 m!106861))

(declare-fun m!106863 () Bool)

(assert (=> b!97856 m!106863))

(declare-fun m!106865 () Bool)

(assert (=> b!97857 m!106865))

(assert (=> b!97768 d!26035))

(declare-fun d!26037 () Bool)

(declare-fun res!49258 () Bool)

(declare-fun e!63824 () Bool)

(assert (=> d!26037 (=> res!49258 e!63824)))

(assert (=> d!26037 (= res!49258 (= (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26037 (= (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000) e!63824)))

(declare-fun b!97858 () Bool)

(declare-fun e!63825 () Bool)

(assert (=> b!97858 (= e!63824 e!63825)))

(declare-fun res!49259 () Bool)

(assert (=> b!97858 (=> (not res!49259) (not e!63825))))

(assert (=> b!97858 (= res!49259 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!97859 () Bool)

(assert (=> b!97859 (= e!63825 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26037 (not res!49258)) b!97858))

(assert (= (and b!97858 res!49259) b!97859))

(declare-fun m!106867 () Bool)

(assert (=> d!26037 m!106867))

(assert (=> b!97859 m!106609))

(declare-fun m!106869 () Bool)

(assert (=> b!97859 m!106869))

(assert (=> bm!9961 d!26037))

(declare-fun d!26039 () Bool)

(assert (=> d!26039 (isDefined!103 (getValueByKey!149 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun lt!49016 () Unit!2965)

(declare-fun choose!596 (List!1612 (_ BitVec 64)) Unit!2965)

(assert (=> d!26039 (= lt!49016 (choose!596 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun e!63828 () Bool)

(assert (=> d!26039 e!63828))

(declare-fun res!49262 () Bool)

(assert (=> d!26039 (=> (not res!49262) (not e!63828))))

(declare-fun isStrictlySorted!299 (List!1612) Bool)

(assert (=> d!26039 (= res!49262 (isStrictlySorted!299 (toList!791 lt!48799)))))

(assert (=> d!26039 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) lt!49016)))

(declare-fun b!97862 () Bool)

(assert (=> b!97862 (= e!63828 (containsKey!153 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (= (and d!26039 res!49262) b!97862))

(assert (=> d!26039 m!106609))

(assert (=> d!26039 m!106749))

(assert (=> d!26039 m!106749))

(assert (=> d!26039 m!106751))

(assert (=> d!26039 m!106609))

(declare-fun m!106871 () Bool)

(assert (=> d!26039 m!106871))

(declare-fun m!106873 () Bool)

(assert (=> d!26039 m!106873))

(assert (=> b!97862 m!106609))

(assert (=> b!97862 m!106745))

(assert (=> b!97658 d!26039))

(assert (=> b!97658 d!26031))

(assert (=> b!97658 d!26033))

(assert (=> d!26009 d!26013))

(declare-fun d!26041 () Bool)

(assert (=> d!26041 (not (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!26041 true))

(declare-fun _$68!91 () Unit!2965)

(assert (=> d!26041 (= (choose!68 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608)) _$68!91)))

(declare-fun bs!4027 () Bool)

(assert (= bs!4027 d!26041))

(assert (=> bs!4027 m!106609))

(assert (=> bs!4027 m!106629))

(assert (=> d!26009 d!26041))

(declare-fun d!26043 () Bool)

(declare-fun e!63829 () Bool)

(assert (=> d!26043 e!63829))

(declare-fun res!49264 () Bool)

(assert (=> d!26043 (=> (not res!49264) (not e!63829))))

(declare-fun lt!49017 () ListLongMap!1551)

(assert (=> d!26043 (= res!49264 (contains!805 lt!49017 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!49019 () List!1612)

(assert (=> d!26043 (= lt!49017 (ListLongMap!1552 lt!49019))))

(declare-fun lt!49020 () Unit!2965)

(declare-fun lt!49018 () Unit!2965)

(assert (=> d!26043 (= lt!49020 lt!49018)))

(assert (=> d!26043 (= (getValueByKey!149 lt!49019 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!154 (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26043 (= lt!49018 (lemmaContainsTupThenGetReturnValue!67 lt!49019 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26043 (= lt!49019 (insertStrictlySorted!69 (toList!791 e!63753) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26043 (= (+!138 e!63753 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49017)))

(declare-fun b!97863 () Bool)

(declare-fun res!49263 () Bool)

(assert (=> b!97863 (=> (not res!49263) (not e!63829))))

(assert (=> b!97863 (= res!49263 (= (getValueByKey!149 (toList!791 lt!49017) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!154 (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!97864 () Bool)

(assert (=> b!97864 (= e!63829 (contains!808 (toList!791 lt!49017) (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26043 res!49264) b!97863))

(assert (= (and b!97863 res!49263) b!97864))

(declare-fun m!106875 () Bool)

(assert (=> d!26043 m!106875))

(declare-fun m!106877 () Bool)

(assert (=> d!26043 m!106877))

(declare-fun m!106879 () Bool)

(assert (=> d!26043 m!106879))

(declare-fun m!106881 () Bool)

(assert (=> d!26043 m!106881))

(declare-fun m!106883 () Bool)

(assert (=> b!97863 m!106883))

(declare-fun m!106885 () Bool)

(assert (=> b!97864 m!106885))

(assert (=> bm!9946 d!26043))

(declare-fun b!97865 () Bool)

(declare-fun e!63836 () Bool)

(declare-fun call!9976 () Bool)

(assert (=> b!97865 (= e!63836 (not call!9976))))

(declare-fun b!97866 () Bool)

(declare-fun e!63838 () Unit!2965)

(declare-fun lt!49040 () Unit!2965)

(assert (=> b!97866 (= e!63838 lt!49040)))

(declare-fun lt!49031 () ListLongMap!1551)

(assert (=> b!97866 (= lt!49031 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) (zeroValue!2364 newMap!16) (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49027 () (_ BitVec 64))

(assert (=> b!97866 (= lt!49027 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49024 () (_ BitVec 64))

(assert (=> b!97866 (= lt!49024 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49029 () Unit!2965)

(assert (=> b!97866 (= lt!49029 (addStillContains!68 lt!49031 lt!49027 (zeroValue!2364 newMap!16) lt!49024))))

(assert (=> b!97866 (contains!805 (+!138 lt!49031 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16))) lt!49024)))

(declare-fun lt!49035 () Unit!2965)

(assert (=> b!97866 (= lt!49035 lt!49029)))

(declare-fun lt!49033 () ListLongMap!1551)

(assert (=> b!97866 (= lt!49033 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) (zeroValue!2364 newMap!16) (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49037 () (_ BitVec 64))

(assert (=> b!97866 (= lt!49037 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49042 () (_ BitVec 64))

(assert (=> b!97866 (= lt!49042 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49022 () Unit!2965)

(assert (=> b!97866 (= lt!49022 (addApplyDifferent!68 lt!49033 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49042))))

(assert (=> b!97866 (= (apply!92 (+!138 lt!49033 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49042) (apply!92 lt!49033 lt!49042))))

(declare-fun lt!49034 () Unit!2965)

(assert (=> b!97866 (= lt!49034 lt!49022)))

(declare-fun lt!49039 () ListLongMap!1551)

(assert (=> b!97866 (= lt!49039 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) (zeroValue!2364 newMap!16) (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49036 () (_ BitVec 64))

(assert (=> b!97866 (= lt!49036 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49023 () (_ BitVec 64))

(assert (=> b!97866 (= lt!49023 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49026 () Unit!2965)

(assert (=> b!97866 (= lt!49026 (addApplyDifferent!68 lt!49039 lt!49036 (zeroValue!2364 newMap!16) lt!49023))))

(assert (=> b!97866 (= (apply!92 (+!138 lt!49039 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16))) lt!49023) (apply!92 lt!49039 lt!49023))))

(declare-fun lt!49021 () Unit!2965)

(assert (=> b!97866 (= lt!49021 lt!49026)))

(declare-fun lt!49038 () ListLongMap!1551)

(assert (=> b!97866 (= lt!49038 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) (zeroValue!2364 newMap!16) (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49032 () (_ BitVec 64))

(assert (=> b!97866 (= lt!49032 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49025 () (_ BitVec 64))

(assert (=> b!97866 (= lt!49025 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97866 (= lt!49040 (addApplyDifferent!68 lt!49038 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49025))))

(assert (=> b!97866 (= (apply!92 (+!138 lt!49038 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49025) (apply!92 lt!49038 lt!49025))))

(declare-fun b!97867 () Bool)

(declare-fun e!63837 () ListLongMap!1551)

(declare-fun call!9971 () ListLongMap!1551)

(assert (=> b!97867 (= e!63837 call!9971)))

(declare-fun bm!9967 () Bool)

(declare-fun call!9974 () ListLongMap!1551)

(assert (=> bm!9967 (= call!9971 call!9974)))

(declare-fun b!97868 () Bool)

(declare-fun e!63832 () Bool)

(declare-fun e!63833 () Bool)

(assert (=> b!97868 (= e!63832 e!63833)))

(declare-fun res!49272 () Bool)

(declare-fun call!9973 () Bool)

(assert (=> b!97868 (= res!49272 call!9973)))

(assert (=> b!97868 (=> (not res!49272) (not e!63833))))

(declare-fun b!97869 () Bool)

(declare-fun res!49268 () Bool)

(declare-fun e!63835 () Bool)

(assert (=> b!97869 (=> (not res!49268) (not e!63835))))

(assert (=> b!97869 (= res!49268 e!63832)))

(declare-fun c!16583 () Bool)

(assert (=> b!97869 (= c!16583 (not (= (bvand (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26045 () Bool)

(assert (=> d!26045 e!63835))

(declare-fun res!49265 () Bool)

(assert (=> d!26045 (=> (not res!49265) (not e!63835))))

(assert (=> d!26045 (= res!49265 (or (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))))

(declare-fun lt!49041 () ListLongMap!1551)

(declare-fun lt!49030 () ListLongMap!1551)

(assert (=> d!26045 (= lt!49041 lt!49030)))

(declare-fun lt!49028 () Unit!2965)

(assert (=> d!26045 (= lt!49028 e!63838)))

(declare-fun c!16581 () Bool)

(declare-fun e!63834 () Bool)

(assert (=> d!26045 (= c!16581 e!63834)))

(declare-fun res!49266 () Bool)

(assert (=> d!26045 (=> (not res!49266) (not e!63834))))

(assert (=> d!26045 (= res!49266 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun e!63841 () ListLongMap!1551)

(assert (=> d!26045 (= lt!49030 e!63841)))

(declare-fun c!16580 () Bool)

(assert (=> d!26045 (= c!16580 (and (not (= (bvand (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26045 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26045 (= (getCurrentListMap!472 (_keys!4171 newMap!16) (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) (zeroValue!2364 newMap!16) (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49041)))

(declare-fun b!97870 () Bool)

(assert (=> b!97870 (= e!63833 (= (apply!92 lt!49041 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun call!9975 () ListLongMap!1551)

(declare-fun call!9972 () ListLongMap!1551)

(declare-fun bm!9968 () Bool)

(declare-fun call!9970 () ListLongMap!1551)

(declare-fun c!16585 () Bool)

(assert (=> bm!9968 (= call!9974 (+!138 (ite c!16580 call!9972 (ite c!16585 call!9975 call!9970)) (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(declare-fun b!97871 () Bool)

(assert (=> b!97871 (= e!63834 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97872 () Bool)

(declare-fun e!63842 () Bool)

(assert (=> b!97872 (= e!63842 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97873 () Bool)

(assert (=> b!97873 (= e!63832 (not call!9973))))

(declare-fun b!97874 () Bool)

(declare-fun e!63830 () ListLongMap!1551)

(assert (=> b!97874 (= e!63830 call!9971)))

(declare-fun b!97875 () Bool)

(assert (=> b!97875 (= e!63841 e!63837)))

(assert (=> b!97875 (= c!16585 (and (not (= (bvand (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9969 () Bool)

(assert (=> bm!9969 (= call!9976 (contains!805 lt!49041 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97876 () Bool)

(declare-fun e!63831 () Bool)

(assert (=> b!97876 (= e!63831 (= (apply!92 lt!49041 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))

(declare-fun b!97877 () Bool)

(declare-fun e!63840 () Bool)

(assert (=> b!97877 (= e!63840 (= (apply!92 lt!49041 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97877 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))))))))

(assert (=> b!97877 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!97878 () Bool)

(declare-fun res!49267 () Bool)

(assert (=> b!97878 (=> (not res!49267) (not e!63835))))

(declare-fun e!63839 () Bool)

(assert (=> b!97878 (= res!49267 e!63839)))

(declare-fun res!49271 () Bool)

(assert (=> b!97878 (=> res!49271 e!63839)))

(assert (=> b!97878 (= res!49271 (not e!63842))))

(declare-fun res!49273 () Bool)

(assert (=> b!97878 (=> (not res!49273) (not e!63842))))

(assert (=> b!97878 (= res!49273 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!97879 () Bool)

(assert (=> b!97879 (= e!63830 call!9970)))

(declare-fun b!97880 () Bool)

(assert (=> b!97880 (= e!63839 e!63840)))

(declare-fun res!49270 () Bool)

(assert (=> b!97880 (=> (not res!49270) (not e!63840))))

(assert (=> b!97880 (= res!49270 (contains!805 lt!49041 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97880 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun bm!9970 () Bool)

(assert (=> bm!9970 (= call!9975 call!9972)))

(declare-fun b!97881 () Bool)

(assert (=> b!97881 (= e!63836 e!63831)))

(declare-fun res!49269 () Bool)

(assert (=> b!97881 (= res!49269 call!9976)))

(assert (=> b!97881 (=> (not res!49269) (not e!63831))))

(declare-fun bm!9971 () Bool)

(assert (=> bm!9971 (= call!9970 call!9975)))

(declare-fun b!97882 () Bool)

(declare-fun Unit!2976 () Unit!2965)

(assert (=> b!97882 (= e!63838 Unit!2976)))

(declare-fun c!16582 () Bool)

(declare-fun b!97883 () Bool)

(assert (=> b!97883 (= c!16582 (and (not (= (bvand (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!97883 (= e!63837 e!63830)))

(declare-fun bm!9972 () Bool)

(assert (=> bm!9972 (= call!9972 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) (zeroValue!2364 newMap!16) (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!97884 () Bool)

(assert (=> b!97884 (= e!63841 (+!138 call!9974 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))

(declare-fun bm!9973 () Bool)

(assert (=> bm!9973 (= call!9973 (contains!805 lt!49041 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97885 () Bool)

(assert (=> b!97885 (= e!63835 e!63836)))

(declare-fun c!16584 () Bool)

(assert (=> b!97885 (= c!16584 (not (= (bvand (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26045 c!16580) b!97884))

(assert (= (and d!26045 (not c!16580)) b!97875))

(assert (= (and b!97875 c!16585) b!97867))

(assert (= (and b!97875 (not c!16585)) b!97883))

(assert (= (and b!97883 c!16582) b!97874))

(assert (= (and b!97883 (not c!16582)) b!97879))

(assert (= (or b!97874 b!97879) bm!9971))

(assert (= (or b!97867 bm!9971) bm!9970))

(assert (= (or b!97867 b!97874) bm!9967))

(assert (= (or b!97884 bm!9970) bm!9972))

(assert (= (or b!97884 bm!9967) bm!9968))

(assert (= (and d!26045 res!49266) b!97871))

(assert (= (and d!26045 c!16581) b!97866))

(assert (= (and d!26045 (not c!16581)) b!97882))

(assert (= (and d!26045 res!49265) b!97878))

(assert (= (and b!97878 res!49273) b!97872))

(assert (= (and b!97878 (not res!49271)) b!97880))

(assert (= (and b!97880 res!49270) b!97877))

(assert (= (and b!97878 res!49267) b!97869))

(assert (= (and b!97869 c!16583) b!97868))

(assert (= (and b!97869 (not c!16583)) b!97873))

(assert (= (and b!97868 res!49272) b!97870))

(assert (= (or b!97868 b!97873) bm!9973))

(assert (= (and b!97869 res!49268) b!97885))

(assert (= (and b!97885 c!16584) b!97881))

(assert (= (and b!97885 (not c!16584)) b!97865))

(assert (= (and b!97881 res!49269) b!97876))

(assert (= (or b!97881 b!97865) bm!9969))

(declare-fun b_lambda!4363 () Bool)

(assert (=> (not b_lambda!4363) (not b!97877)))

(declare-fun tb!1937 () Bool)

(declare-fun t!5581 () Bool)

(assert (=> (and b!97514 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16)) t!5581) tb!1937))

(declare-fun result!3283 () Bool)

(assert (=> tb!1937 (= result!3283 tp_is_empty!2631)))

(assert (=> b!97877 t!5581))

(declare-fun b_and!6013 () Bool)

(assert (= b_and!6009 (and (=> t!5581 result!3283) b_and!6013)))

(declare-fun t!5583 () Bool)

(declare-fun tb!1939 () Bool)

(assert (=> (and b!97516 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 newMap!16)) t!5583) tb!1939))

(declare-fun result!3285 () Bool)

(assert (= result!3285 result!3283))

(assert (=> b!97877 t!5583))

(declare-fun b_and!6015 () Bool)

(assert (= b_and!6011 (and (=> t!5583 result!3285) b_and!6015)))

(assert (=> b!97872 m!106867))

(assert (=> b!97872 m!106867))

(declare-fun m!106887 () Bool)

(assert (=> b!97872 m!106887))

(declare-fun m!106889 () Bool)

(assert (=> bm!9968 m!106889))

(declare-fun m!106891 () Bool)

(assert (=> b!97870 m!106891))

(assert (=> b!97871 m!106867))

(assert (=> b!97871 m!106867))

(assert (=> b!97871 m!106887))

(declare-fun m!106893 () Bool)

(assert (=> b!97866 m!106893))

(declare-fun m!106895 () Bool)

(assert (=> b!97866 m!106895))

(declare-fun m!106897 () Bool)

(assert (=> b!97866 m!106897))

(declare-fun m!106899 () Bool)

(assert (=> b!97866 m!106899))

(declare-fun m!106901 () Bool)

(assert (=> b!97866 m!106901))

(assert (=> b!97866 m!106899))

(declare-fun m!106903 () Bool)

(assert (=> b!97866 m!106903))

(declare-fun m!106905 () Bool)

(assert (=> b!97866 m!106905))

(declare-fun m!106907 () Bool)

(assert (=> b!97866 m!106907))

(assert (=> b!97866 m!106895))

(declare-fun m!106909 () Bool)

(assert (=> b!97866 m!106909))

(declare-fun m!106911 () Bool)

(assert (=> b!97866 m!106911))

(declare-fun m!106913 () Bool)

(assert (=> b!97866 m!106913))

(declare-fun m!106915 () Bool)

(assert (=> b!97866 m!106915))

(declare-fun m!106917 () Bool)

(assert (=> b!97866 m!106917))

(declare-fun m!106919 () Bool)

(assert (=> b!97866 m!106919))

(assert (=> b!97866 m!106909))

(assert (=> b!97866 m!106867))

(declare-fun m!106921 () Bool)

(assert (=> b!97866 m!106921))

(assert (=> b!97866 m!106905))

(declare-fun m!106923 () Bool)

(assert (=> b!97866 m!106923))

(declare-fun m!106925 () Bool)

(assert (=> b!97876 m!106925))

(declare-fun m!106927 () Bool)

(assert (=> bm!9969 m!106927))

(assert (=> bm!9972 m!106903))

(declare-fun m!106929 () Bool)

(assert (=> d!26045 m!106929))

(assert (=> b!97880 m!106867))

(assert (=> b!97880 m!106867))

(declare-fun m!106931 () Bool)

(assert (=> b!97880 m!106931))

(declare-fun m!106933 () Bool)

(assert (=> bm!9973 m!106933))

(declare-fun m!106935 () Bool)

(assert (=> b!97884 m!106935))

(declare-fun m!106937 () Bool)

(assert (=> b!97877 m!106937))

(declare-fun m!106939 () Bool)

(assert (=> b!97877 m!106939))

(declare-fun m!106941 () Bool)

(assert (=> b!97877 m!106941))

(assert (=> b!97877 m!106939))

(assert (=> b!97877 m!106867))

(assert (=> b!97877 m!106867))

(declare-fun m!106943 () Bool)

(assert (=> b!97877 m!106943))

(assert (=> b!97877 m!106937))

(assert (=> bm!9960 d!26045))

(declare-fun d!26047 () Bool)

(declare-fun get!1300 (Option!155) V!3155)

(assert (=> d!26047 (= (apply!92 lt!48891 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1300 (getValueByKey!149 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4028 () Bool)

(assert (= bs!4028 d!26047))

(assert (=> bs!4028 m!106689))

(declare-fun m!106945 () Bool)

(assert (=> bs!4028 m!106945))

(assert (=> bs!4028 m!106945))

(declare-fun m!106947 () Bool)

(assert (=> bs!4028 m!106947))

(assert (=> b!97643 d!26047))

(declare-fun d!26049 () Bool)

(declare-fun c!16586 () Bool)

(assert (=> d!26049 (= c!16586 ((_ is ValueCellFull!972) (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!63843 () V!3155)

(assert (=> d!26049 (= (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63843)))

(declare-fun b!97886 () Bool)

(assert (=> b!97886 (= e!63843 (get!1298 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!97887 () Bool)

(assert (=> b!97887 (= e!63843 (get!1299 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26049 c!16586) b!97886))

(assert (= (and d!26049 (not c!16586)) b!97887))

(assert (=> b!97886 m!106739))

(assert (=> b!97886 m!106605))

(declare-fun m!106949 () Bool)

(assert (=> b!97886 m!106949))

(assert (=> b!97887 m!106739))

(assert (=> b!97887 m!106605))

(declare-fun m!106951 () Bool)

(assert (=> b!97887 m!106951))

(assert (=> b!97643 d!26049))

(declare-fun d!26051 () Bool)

(assert (=> d!26051 (= (inRange!0 (ite c!16557 (ite c!16554 (index!3196 lt!48959) (ite c!16553 (index!3195 lt!48984) (index!3198 lt!48984))) (ite c!16551 (index!3196 lt!48965) (ite c!16564 (index!3195 lt!48975) (index!3198 lt!48975)))) (mask!6578 newMap!16)) (and (bvsge (ite c!16557 (ite c!16554 (index!3196 lt!48959) (ite c!16553 (index!3195 lt!48984) (index!3198 lt!48984))) (ite c!16551 (index!3196 lt!48965) (ite c!16564 (index!3195 lt!48975) (index!3198 lt!48975)))) #b00000000000000000000000000000000) (bvslt (ite c!16557 (ite c!16554 (index!3196 lt!48959) (ite c!16553 (index!3195 lt!48984) (index!3198 lt!48984))) (ite c!16551 (index!3196 lt!48965) (ite c!16564 (index!3195 lt!48975) (index!3198 lt!48975)))) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9959 d!26051))

(declare-fun d!26053 () Bool)

(assert (=> d!26053 (= (apply!92 lt!48891 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1300 (getValueByKey!149 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4029 () Bool)

(assert (= bs!4029 d!26053))

(declare-fun m!106953 () Bool)

(assert (=> bs!4029 m!106953))

(assert (=> bs!4029 m!106953))

(declare-fun m!106955 () Bool)

(assert (=> bs!4029 m!106955))

(assert (=> b!97642 d!26053))

(declare-fun d!26055 () Bool)

(declare-fun e!63846 () Bool)

(assert (=> d!26055 e!63846))

(declare-fun res!49278 () Bool)

(assert (=> d!26055 (=> (not res!49278) (not e!63846))))

(declare-fun lt!49048 () SeekEntryResult!263)

(assert (=> d!26055 (= res!49278 ((_ is Found!263) lt!49048))))

(assert (=> d!26055 (= lt!49048 (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun lt!49047 () Unit!2965)

(declare-fun choose!597 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) Int) Unit!2965)

(assert (=> d!26055 (= lt!49047 (choose!597 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26055 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26055 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)) lt!49047)))

(declare-fun b!97892 () Bool)

(declare-fun res!49279 () Bool)

(assert (=> b!97892 (=> (not res!49279) (not e!63846))))

(assert (=> b!97892 (= res!49279 (inRange!0 (index!3196 lt!49048) (mask!6578 newMap!16)))))

(declare-fun b!97893 () Bool)

(assert (=> b!97893 (= e!63846 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!49048)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> b!97893 (and (bvsge (index!3196 lt!49048) #b00000000000000000000000000000000) (bvslt (index!3196 lt!49048) (size!2264 (_keys!4171 newMap!16))))))

(assert (= (and d!26055 res!49278) b!97892))

(assert (= (and b!97892 res!49279) b!97893))

(assert (=> d!26055 m!106609))

(assert (=> d!26055 m!106785))

(assert (=> d!26055 m!106609))

(declare-fun m!106957 () Bool)

(assert (=> d!26055 m!106957))

(assert (=> d!26055 m!106929))

(declare-fun m!106959 () Bool)

(assert (=> b!97892 m!106959))

(declare-fun m!106961 () Bool)

(assert (=> b!97893 m!106961))

(assert (=> bm!9943 d!26055))

(declare-fun d!26057 () Bool)

(assert (=> d!26057 (= (get!1298 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2800 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> b!97791 d!26057))

(assert (=> b!97803 d!26013))

(declare-fun d!26059 () Bool)

(declare-fun e!63848 () Bool)

(assert (=> d!26059 e!63848))

(declare-fun res!49280 () Bool)

(assert (=> d!26059 (=> res!49280 e!63848)))

(declare-fun lt!49051 () Bool)

(assert (=> d!26059 (= res!49280 (not lt!49051))))

(declare-fun lt!49052 () Bool)

(assert (=> d!26059 (= lt!49051 lt!49052)))

(declare-fun lt!49049 () Unit!2965)

(declare-fun e!63847 () Unit!2965)

(assert (=> d!26059 (= lt!49049 e!63847)))

(declare-fun c!16587 () Bool)

(assert (=> d!26059 (= c!16587 lt!49052)))

(assert (=> d!26059 (= lt!49052 (containsKey!153 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26059 (= (contains!805 call!9950 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) lt!49051)))

(declare-fun b!97894 () Bool)

(declare-fun lt!49050 () Unit!2965)

(assert (=> b!97894 (= e!63847 lt!49050)))

(assert (=> b!97894 (= lt!49050 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> b!97894 (isDefined!103 (getValueByKey!149 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!97895 () Bool)

(declare-fun Unit!2977 () Unit!2965)

(assert (=> b!97895 (= e!63847 Unit!2977)))

(declare-fun b!97896 () Bool)

(assert (=> b!97896 (= e!63848 (isDefined!103 (getValueByKey!149 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (= (and d!26059 c!16587) b!97894))

(assert (= (and d!26059 (not c!16587)) b!97895))

(assert (= (and d!26059 (not res!49280)) b!97896))

(assert (=> d!26059 m!106609))

(declare-fun m!106963 () Bool)

(assert (=> d!26059 m!106963))

(assert (=> b!97894 m!106609))

(declare-fun m!106965 () Bool)

(assert (=> b!97894 m!106965))

(assert (=> b!97894 m!106609))

(declare-fun m!106967 () Bool)

(assert (=> b!97894 m!106967))

(assert (=> b!97894 m!106967))

(declare-fun m!106969 () Bool)

(assert (=> b!97894 m!106969))

(assert (=> b!97896 m!106609))

(assert (=> b!97896 m!106967))

(assert (=> b!97896 m!106967))

(assert (=> b!97896 m!106969))

(assert (=> b!97763 d!26059))

(assert (=> d!26011 d!26017))

(declare-fun d!26061 () Bool)

(assert (=> d!26061 (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) from!355 Nil!1608)))

(assert (=> d!26061 true))

(declare-fun _$71!132 () Unit!2965)

(assert (=> d!26061 (= (choose!39 (_keys!4171 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!132)))

(declare-fun bs!4030 () Bool)

(assert (= bs!4030 d!26061))

(assert (=> bs!4030 m!106625))

(assert (=> d!26011 d!26061))

(declare-fun d!26063 () Bool)

(declare-fun res!49281 () Bool)

(declare-fun e!63849 () Bool)

(assert (=> d!26063 (=> (not res!49281) (not e!63849))))

(assert (=> d!26063 (= res!49281 (simpleValid!67 (_2!1187 lt!48968)))))

(assert (=> d!26063 (= (valid!385 (_2!1187 lt!48968)) e!63849)))

(declare-fun b!97897 () Bool)

(declare-fun res!49282 () Bool)

(assert (=> b!97897 (=> (not res!49282) (not e!63849))))

(assert (=> b!97897 (= res!49282 (= (arrayCountValidKeys!0 (_keys!4171 (_2!1187 lt!48968)) #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))) (_size!475 (_2!1187 lt!48968))))))

(declare-fun b!97898 () Bool)

(declare-fun res!49283 () Bool)

(assert (=> b!97898 (=> (not res!49283) (not e!63849))))

(assert (=> b!97898 (= res!49283 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 (_2!1187 lt!48968)) (mask!6578 (_2!1187 lt!48968))))))

(declare-fun b!97899 () Bool)

(assert (=> b!97899 (= e!63849 (arrayNoDuplicates!0 (_keys!4171 (_2!1187 lt!48968)) #b00000000000000000000000000000000 Nil!1608))))

(assert (= (and d!26063 res!49281) b!97897))

(assert (= (and b!97897 res!49282) b!97898))

(assert (= (and b!97898 res!49283) b!97899))

(declare-fun m!106971 () Bool)

(assert (=> d!26063 m!106971))

(declare-fun m!106973 () Bool)

(assert (=> b!97897 m!106973))

(declare-fun m!106975 () Bool)

(assert (=> b!97898 m!106975))

(declare-fun m!106977 () Bool)

(assert (=> b!97899 m!106977))

(assert (=> d!26005 d!26063))

(assert (=> d!26005 d!25991))

(declare-fun b!97900 () Bool)

(declare-fun e!63856 () Bool)

(declare-fun call!9983 () Bool)

(assert (=> b!97900 (= e!63856 (not call!9983))))

(declare-fun b!97901 () Bool)

(declare-fun e!63858 () Unit!2965)

(declare-fun lt!49072 () Unit!2965)

(assert (=> b!97901 (= e!63858 lt!49072)))

(declare-fun lt!49063 () ListLongMap!1551)

(assert (=> b!97901 (= lt!49063 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49059 () (_ BitVec 64))

(assert (=> b!97901 (= lt!49059 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49056 () (_ BitVec 64))

(assert (=> b!97901 (= lt!49056 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49061 () Unit!2965)

(assert (=> b!97901 (= lt!49061 (addStillContains!68 lt!49063 lt!49059 (zeroValue!2364 newMap!16) lt!49056))))

(assert (=> b!97901 (contains!805 (+!138 lt!49063 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16))) lt!49056)))

(declare-fun lt!49067 () Unit!2965)

(assert (=> b!97901 (= lt!49067 lt!49061)))

(declare-fun lt!49065 () ListLongMap!1551)

(assert (=> b!97901 (= lt!49065 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49069 () (_ BitVec 64))

(assert (=> b!97901 (= lt!49069 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49074 () (_ BitVec 64))

(assert (=> b!97901 (= lt!49074 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49054 () Unit!2965)

(assert (=> b!97901 (= lt!49054 (addApplyDifferent!68 lt!49065 lt!49069 (minValue!2364 newMap!16) lt!49074))))

(assert (=> b!97901 (= (apply!92 (+!138 lt!49065 (tuple2!2353 lt!49069 (minValue!2364 newMap!16))) lt!49074) (apply!92 lt!49065 lt!49074))))

(declare-fun lt!49066 () Unit!2965)

(assert (=> b!97901 (= lt!49066 lt!49054)))

(declare-fun lt!49071 () ListLongMap!1551)

(assert (=> b!97901 (= lt!49071 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49068 () (_ BitVec 64))

(assert (=> b!97901 (= lt!49068 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49055 () (_ BitVec 64))

(assert (=> b!97901 (= lt!49055 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49058 () Unit!2965)

(assert (=> b!97901 (= lt!49058 (addApplyDifferent!68 lt!49071 lt!49068 (zeroValue!2364 newMap!16) lt!49055))))

(assert (=> b!97901 (= (apply!92 (+!138 lt!49071 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16))) lt!49055) (apply!92 lt!49071 lt!49055))))

(declare-fun lt!49053 () Unit!2965)

(assert (=> b!97901 (= lt!49053 lt!49058)))

(declare-fun lt!49070 () ListLongMap!1551)

(assert (=> b!97901 (= lt!49070 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49064 () (_ BitVec 64))

(assert (=> b!97901 (= lt!49064 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49057 () (_ BitVec 64))

(assert (=> b!97901 (= lt!49057 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!97901 (= lt!49072 (addApplyDifferent!68 lt!49070 lt!49064 (minValue!2364 newMap!16) lt!49057))))

(assert (=> b!97901 (= (apply!92 (+!138 lt!49070 (tuple2!2353 lt!49064 (minValue!2364 newMap!16))) lt!49057) (apply!92 lt!49070 lt!49057))))

(declare-fun b!97902 () Bool)

(declare-fun e!63857 () ListLongMap!1551)

(declare-fun call!9978 () ListLongMap!1551)

(assert (=> b!97902 (= e!63857 call!9978)))

(declare-fun bm!9974 () Bool)

(declare-fun call!9981 () ListLongMap!1551)

(assert (=> bm!9974 (= call!9978 call!9981)))

(declare-fun b!97903 () Bool)

(declare-fun e!63852 () Bool)

(declare-fun e!63853 () Bool)

(assert (=> b!97903 (= e!63852 e!63853)))

(declare-fun res!49291 () Bool)

(declare-fun call!9980 () Bool)

(assert (=> b!97903 (= res!49291 call!9980)))

(assert (=> b!97903 (=> (not res!49291) (not e!63853))))

(declare-fun b!97904 () Bool)

(declare-fun res!49287 () Bool)

(declare-fun e!63855 () Bool)

(assert (=> b!97904 (=> (not res!49287) (not e!63855))))

(assert (=> b!97904 (= res!49287 e!63852)))

(declare-fun c!16591 () Bool)

(assert (=> b!97904 (= c!16591 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26065 () Bool)

(assert (=> d!26065 e!63855))

(declare-fun res!49284 () Bool)

(assert (=> d!26065 (=> (not res!49284) (not e!63855))))

(assert (=> d!26065 (= res!49284 (or (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))))

(declare-fun lt!49073 () ListLongMap!1551)

(declare-fun lt!49062 () ListLongMap!1551)

(assert (=> d!26065 (= lt!49073 lt!49062)))

(declare-fun lt!49060 () Unit!2965)

(assert (=> d!26065 (= lt!49060 e!63858)))

(declare-fun c!16589 () Bool)

(declare-fun e!63854 () Bool)

(assert (=> d!26065 (= c!16589 e!63854)))

(declare-fun res!49285 () Bool)

(assert (=> d!26065 (=> (not res!49285) (not e!63854))))

(assert (=> d!26065 (= res!49285 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun e!63861 () ListLongMap!1551)

(assert (=> d!26065 (= lt!49062 e!63861)))

(declare-fun c!16588 () Bool)

(assert (=> d!26065 (= c!16588 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26065 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26065 (= (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49073)))

(declare-fun b!97905 () Bool)

(assert (=> b!97905 (= e!63853 (= (apply!92 lt!49073 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun c!16593 () Bool)

(declare-fun call!9977 () ListLongMap!1551)

(declare-fun call!9979 () ListLongMap!1551)

(declare-fun call!9982 () ListLongMap!1551)

(declare-fun bm!9975 () Bool)

(assert (=> bm!9975 (= call!9981 (+!138 (ite c!16588 call!9979 (ite c!16593 call!9982 call!9977)) (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!97906 () Bool)

(assert (=> b!97906 (= e!63854 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97907 () Bool)

(declare-fun e!63862 () Bool)

(assert (=> b!97907 (= e!63862 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97908 () Bool)

(assert (=> b!97908 (= e!63852 (not call!9980))))

(declare-fun b!97909 () Bool)

(declare-fun e!63850 () ListLongMap!1551)

(assert (=> b!97909 (= e!63850 call!9978)))

(declare-fun b!97910 () Bool)

(assert (=> b!97910 (= e!63861 e!63857)))

(assert (=> b!97910 (= c!16593 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!9976 () Bool)

(assert (=> bm!9976 (= call!9983 (contains!805 lt!49073 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97911 () Bool)

(declare-fun e!63851 () Bool)

(assert (=> b!97911 (= e!63851 (= (apply!92 lt!49073 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!97912 () Bool)

(declare-fun e!63860 () Bool)

(assert (=> b!97912 (= e!63860 (= (apply!92 lt!49073 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97912 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_values!2464 newMap!16))))))

(assert (=> b!97912 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!97913 () Bool)

(declare-fun res!49286 () Bool)

(assert (=> b!97913 (=> (not res!49286) (not e!63855))))

(declare-fun e!63859 () Bool)

(assert (=> b!97913 (= res!49286 e!63859)))

(declare-fun res!49290 () Bool)

(assert (=> b!97913 (=> res!49290 e!63859)))

(assert (=> b!97913 (= res!49290 (not e!63862))))

(declare-fun res!49292 () Bool)

(assert (=> b!97913 (=> (not res!49292) (not e!63862))))

(assert (=> b!97913 (= res!49292 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!97914 () Bool)

(assert (=> b!97914 (= e!63850 call!9977)))

(declare-fun b!97915 () Bool)

(assert (=> b!97915 (= e!63859 e!63860)))

(declare-fun res!49289 () Bool)

(assert (=> b!97915 (=> (not res!49289) (not e!63860))))

(assert (=> b!97915 (= res!49289 (contains!805 lt!49073 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97915 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun bm!9977 () Bool)

(assert (=> bm!9977 (= call!9982 call!9979)))

(declare-fun b!97916 () Bool)

(assert (=> b!97916 (= e!63856 e!63851)))

(declare-fun res!49288 () Bool)

(assert (=> b!97916 (= res!49288 call!9983)))

(assert (=> b!97916 (=> (not res!49288) (not e!63851))))

(declare-fun bm!9978 () Bool)

(assert (=> bm!9978 (= call!9977 call!9982)))

(declare-fun b!97917 () Bool)

(declare-fun Unit!2978 () Unit!2965)

(assert (=> b!97917 (= e!63858 Unit!2978)))

(declare-fun b!97918 () Bool)

(declare-fun c!16590 () Bool)

(assert (=> b!97918 (= c!16590 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!97918 (= e!63857 e!63850)))

(declare-fun bm!9979 () Bool)

(assert (=> bm!9979 (= call!9979 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!97919 () Bool)

(assert (=> b!97919 (= e!63861 (+!138 call!9981 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun bm!9980 () Bool)

(assert (=> bm!9980 (= call!9980 (contains!805 lt!49073 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97920 () Bool)

(assert (=> b!97920 (= e!63855 e!63856)))

(declare-fun c!16592 () Bool)

(assert (=> b!97920 (= c!16592 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26065 c!16588) b!97919))

(assert (= (and d!26065 (not c!16588)) b!97910))

(assert (= (and b!97910 c!16593) b!97902))

(assert (= (and b!97910 (not c!16593)) b!97918))

(assert (= (and b!97918 c!16590) b!97909))

(assert (= (and b!97918 (not c!16590)) b!97914))

(assert (= (or b!97909 b!97914) bm!9978))

(assert (= (or b!97902 bm!9978) bm!9977))

(assert (= (or b!97902 b!97909) bm!9974))

(assert (= (or b!97919 bm!9977) bm!9979))

(assert (= (or b!97919 bm!9974) bm!9975))

(assert (= (and d!26065 res!49285) b!97906))

(assert (= (and d!26065 c!16589) b!97901))

(assert (= (and d!26065 (not c!16589)) b!97917))

(assert (= (and d!26065 res!49284) b!97913))

(assert (= (and b!97913 res!49292) b!97907))

(assert (= (and b!97913 (not res!49290)) b!97915))

(assert (= (and b!97915 res!49289) b!97912))

(assert (= (and b!97913 res!49286) b!97904))

(assert (= (and b!97904 c!16591) b!97903))

(assert (= (and b!97904 (not c!16591)) b!97908))

(assert (= (and b!97903 res!49291) b!97905))

(assert (= (or b!97903 b!97908) bm!9980))

(assert (= (and b!97904 res!49287) b!97920))

(assert (= (and b!97920 c!16592) b!97916))

(assert (= (and b!97920 (not c!16592)) b!97900))

(assert (= (and b!97916 res!49288) b!97911))

(assert (= (or b!97916 b!97900) bm!9976))

(declare-fun b_lambda!4365 () Bool)

(assert (=> (not b_lambda!4365) (not b!97912)))

(assert (=> b!97912 t!5581))

(declare-fun b_and!6017 () Bool)

(assert (= b_and!6013 (and (=> t!5581 result!3283) b_and!6017)))

(assert (=> b!97912 t!5583))

(declare-fun b_and!6019 () Bool)

(assert (= b_and!6015 (and (=> t!5583 result!3285) b_and!6019)))

(assert (=> b!97907 m!106867))

(assert (=> b!97907 m!106867))

(assert (=> b!97907 m!106887))

(declare-fun m!106979 () Bool)

(assert (=> bm!9975 m!106979))

(declare-fun m!106981 () Bool)

(assert (=> b!97905 m!106981))

(assert (=> b!97906 m!106867))

(assert (=> b!97906 m!106867))

(assert (=> b!97906 m!106887))

(declare-fun m!106983 () Bool)

(assert (=> b!97901 m!106983))

(declare-fun m!106985 () Bool)

(assert (=> b!97901 m!106985))

(declare-fun m!106987 () Bool)

(assert (=> b!97901 m!106987))

(declare-fun m!106989 () Bool)

(assert (=> b!97901 m!106989))

(declare-fun m!106991 () Bool)

(assert (=> b!97901 m!106991))

(assert (=> b!97901 m!106989))

(declare-fun m!106993 () Bool)

(assert (=> b!97901 m!106993))

(declare-fun m!106995 () Bool)

(assert (=> b!97901 m!106995))

(declare-fun m!106997 () Bool)

(assert (=> b!97901 m!106997))

(assert (=> b!97901 m!106985))

(declare-fun m!106999 () Bool)

(assert (=> b!97901 m!106999))

(declare-fun m!107001 () Bool)

(assert (=> b!97901 m!107001))

(declare-fun m!107003 () Bool)

(assert (=> b!97901 m!107003))

(declare-fun m!107005 () Bool)

(assert (=> b!97901 m!107005))

(declare-fun m!107007 () Bool)

(assert (=> b!97901 m!107007))

(declare-fun m!107009 () Bool)

(assert (=> b!97901 m!107009))

(assert (=> b!97901 m!106999))

(assert (=> b!97901 m!106867))

(declare-fun m!107011 () Bool)

(assert (=> b!97901 m!107011))

(assert (=> b!97901 m!106995))

(declare-fun m!107013 () Bool)

(assert (=> b!97901 m!107013))

(declare-fun m!107015 () Bool)

(assert (=> b!97911 m!107015))

(declare-fun m!107017 () Bool)

(assert (=> bm!9976 m!107017))

(assert (=> bm!9979 m!106993))

(assert (=> d!26065 m!106929))

(assert (=> b!97915 m!106867))

(assert (=> b!97915 m!106867))

(declare-fun m!107019 () Bool)

(assert (=> b!97915 m!107019))

(declare-fun m!107021 () Bool)

(assert (=> bm!9980 m!107021))

(declare-fun m!107023 () Bool)

(assert (=> b!97919 m!107023))

(declare-fun m!107025 () Bool)

(assert (=> b!97912 m!107025))

(assert (=> b!97912 m!106939))

(declare-fun m!107027 () Bool)

(assert (=> b!97912 m!107027))

(assert (=> b!97912 m!106939))

(assert (=> b!97912 m!106867))

(assert (=> b!97912 m!106867))

(declare-fun m!107029 () Bool)

(assert (=> b!97912 m!107029))

(assert (=> b!97912 m!107025))

(assert (=> d!25999 d!26065))

(declare-fun d!26067 () Bool)

(assert (=> d!26067 (= (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97637 d!26067))

(assert (=> b!97749 d!26065))

(declare-fun d!26069 () Bool)

(declare-fun e!63865 () Bool)

(assert (=> d!26069 e!63865))

(declare-fun c!16596 () Bool)

(assert (=> d!26069 (= c!16596 (and (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!26069 true))

(declare-fun _$29!126 () Unit!2965)

(assert (=> d!26069 (= (choose!595 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))) _$29!126)))

(declare-fun b!97925 () Bool)

(assert (=> b!97925 (= e!63865 (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!97926 () Bool)

(assert (=> b!97926 (= e!63865 (ite (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26069 c!16596) b!97925))

(assert (= (and d!26069 (not c!16596)) b!97926))

(assert (=> b!97925 m!106609))

(assert (=> b!97925 m!106629))

(assert (=> d!26015 d!26069))

(assert (=> d!26015 d!25997))

(declare-fun b!97927 () Bool)

(declare-fun e!63866 () Bool)

(declare-fun call!9984 () Bool)

(assert (=> b!97927 (= e!63866 call!9984)))

(declare-fun b!97928 () Bool)

(assert (=> b!97928 (= e!63866 call!9984)))

(declare-fun d!26071 () Bool)

(declare-fun res!49294 () Bool)

(declare-fun e!63869 () Bool)

(assert (=> d!26071 (=> res!49294 e!63869)))

(assert (=> d!26071 (= res!49294 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26071 (= (arrayNoDuplicates!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 Nil!1608) e!63869)))

(declare-fun b!97929 () Bool)

(declare-fun e!63867 () Bool)

(assert (=> b!97929 (= e!63869 e!63867)))

(declare-fun res!49295 () Bool)

(assert (=> b!97929 (=> (not res!49295) (not e!63867))))

(declare-fun e!63868 () Bool)

(assert (=> b!97929 (= res!49295 (not e!63868))))

(declare-fun res!49293 () Bool)

(assert (=> b!97929 (=> (not res!49293) (not e!63868))))

(assert (=> b!97929 (= res!49293 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97930 () Bool)

(assert (=> b!97930 (= e!63867 e!63866)))

(declare-fun c!16597 () Bool)

(assert (=> b!97930 (= c!16597 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9981 () Bool)

(assert (=> bm!9981 (= call!9984 (arrayNoDuplicates!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16597 (Cons!1607 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) Nil!1608) Nil!1608)))))

(declare-fun b!97931 () Bool)

(assert (=> b!97931 (= e!63868 (contains!807 Nil!1608 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!26071 (not res!49294)) b!97929))

(assert (= (and b!97929 res!49293) b!97931))

(assert (= (and b!97929 res!49295) b!97930))

(assert (= (and b!97930 c!16597) b!97927))

(assert (= (and b!97930 (not c!16597)) b!97928))

(assert (= (or b!97927 b!97928) bm!9981))

(assert (=> b!97929 m!106867))

(assert (=> b!97929 m!106867))

(assert (=> b!97929 m!106887))

(assert (=> b!97930 m!106867))

(assert (=> b!97930 m!106867))

(assert (=> b!97930 m!106887))

(assert (=> bm!9981 m!106867))

(declare-fun m!107031 () Bool)

(assert (=> bm!9981 m!107031))

(assert (=> b!97931 m!106867))

(assert (=> b!97931 m!106867))

(declare-fun m!107033 () Bool)

(assert (=> b!97931 m!107033))

(assert (=> b!97588 d!26071))

(declare-fun d!26073 () Bool)

(assert (=> d!26073 (= (+!138 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48964 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49077 () Unit!2965)

(declare-fun choose!598 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 V!3155 Int) Unit!2965)

(assert (=> d!26073 (= lt!49077 (choose!598 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48964 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26073 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26073 (= (lemmaChangeZeroKeyThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48964 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) (defaultEntry!2481 newMap!16)) lt!49077)))

(declare-fun bs!4031 () Bool)

(assert (= bs!4031 d!26073))

(assert (=> bs!4031 m!106607))

(declare-fun m!107035 () Bool)

(assert (=> bs!4031 m!107035))

(assert (=> bs!4031 m!106607))

(declare-fun m!107037 () Bool)

(assert (=> bs!4031 m!107037))

(assert (=> bs!4031 m!106929))

(assert (=> bs!4031 m!106687))

(declare-fun m!107039 () Bool)

(assert (=> bs!4031 m!107039))

(assert (=> bs!4031 m!106687))

(assert (=> b!97760 d!26073))

(declare-fun d!26075 () Bool)

(assert (=> d!26075 (= (apply!92 lt!48891 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1300 (getValueByKey!149 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4032 () Bool)

(assert (= bs!4032 d!26075))

(declare-fun m!107041 () Bool)

(assert (=> bs!4032 m!107041))

(assert (=> bs!4032 m!107041))

(declare-fun m!107043 () Bool)

(assert (=> bs!4032 m!107043))

(assert (=> b!97636 d!26075))

(declare-fun d!26077 () Bool)

(declare-fun e!63871 () Bool)

(assert (=> d!26077 e!63871))

(declare-fun res!49296 () Bool)

(assert (=> d!26077 (=> res!49296 e!63871)))

(declare-fun lt!49080 () Bool)

(assert (=> d!26077 (= res!49296 (not lt!49080))))

(declare-fun lt!49081 () Bool)

(assert (=> d!26077 (= lt!49080 lt!49081)))

(declare-fun lt!49078 () Unit!2965)

(declare-fun e!63870 () Unit!2965)

(assert (=> d!26077 (= lt!49078 e!63870)))

(declare-fun c!16598 () Bool)

(assert (=> d!26077 (= c!16598 lt!49081)))

(assert (=> d!26077 (= lt!49081 (containsKey!153 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(assert (=> d!26077 (= (contains!805 call!9966 (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))) lt!49080)))

(declare-fun b!97932 () Bool)

(declare-fun lt!49079 () Unit!2965)

(assert (=> b!97932 (= e!63870 lt!49079)))

(assert (=> b!97932 (= lt!49079 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(assert (=> b!97932 (isDefined!103 (getValueByKey!149 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(declare-fun b!97933 () Bool)

(declare-fun Unit!2979 () Unit!2965)

(assert (=> b!97933 (= e!63870 Unit!2979)))

(declare-fun b!97934 () Bool)

(assert (=> b!97934 (= e!63871 (isDefined!103 (getValueByKey!149 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985)))))))

(assert (= (and d!26077 c!16598) b!97932))

(assert (= (and d!26077 (not c!16598)) b!97933))

(assert (= (and d!26077 (not res!49296)) b!97934))

(assert (=> d!26077 m!106777))

(declare-fun m!107045 () Bool)

(assert (=> d!26077 m!107045))

(assert (=> b!97932 m!106777))

(declare-fun m!107047 () Bool)

(assert (=> b!97932 m!107047))

(assert (=> b!97932 m!106777))

(declare-fun m!107049 () Bool)

(assert (=> b!97932 m!107049))

(assert (=> b!97932 m!107049))

(declare-fun m!107051 () Bool)

(assert (=> b!97932 m!107051))

(assert (=> b!97934 m!106777))

(assert (=> b!97934 m!107049))

(assert (=> b!97934 m!107049))

(assert (=> b!97934 m!107051))

(assert (=> b!97772 d!26077))

(declare-fun d!26079 () Bool)

(declare-fun e!63874 () Bool)

(assert (=> d!26079 e!63874))

(declare-fun res!49299 () Bool)

(assert (=> d!26079 (=> (not res!49299) (not e!63874))))

(assert (=> d!26079 (= res!49299 (and (bvsge (index!3196 lt!48985) #b00000000000000000000000000000000) (bvslt (index!3196 lt!48985) (size!2264 (_keys!4171 newMap!16)))))))

(declare-fun lt!49084 () Unit!2965)

(declare-fun choose!599 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) Int) Unit!2965)

(assert (=> d!26079 (= lt!49084 (choose!599 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3196 lt!48985) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26079 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26079 (= (lemmaValidKeyInArrayIsInListMap!99 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3196 lt!48985) (defaultEntry!2481 newMap!16)) lt!49084)))

(declare-fun b!97937 () Bool)

(assert (=> b!97937 (= e!63874 (contains!805 (getCurrentListMap!472 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(assert (= (and d!26079 res!49299) b!97937))

(declare-fun m!107053 () Bool)

(assert (=> d!26079 m!107053))

(assert (=> d!26079 m!106929))

(declare-fun m!107055 () Bool)

(assert (=> b!97937 m!107055))

(assert (=> b!97937 m!106777))

(assert (=> b!97937 m!107055))

(assert (=> b!97937 m!106777))

(declare-fun m!107057 () Bool)

(assert (=> b!97937 m!107057))

(assert (=> b!97772 d!26079))

(declare-fun d!26081 () Bool)

(declare-fun e!63877 () Bool)

(assert (=> d!26081 e!63877))

(declare-fun res!49302 () Bool)

(assert (=> d!26081 (=> (not res!49302) (not e!63877))))

(assert (=> d!26081 (= res!49302 (and (bvsge (index!3196 lt!48985) #b00000000000000000000000000000000) (bvslt (index!3196 lt!48985) (size!2265 (_values!2464 newMap!16)))))))

(declare-fun lt!49087 () Unit!2965)

(declare-fun choose!600 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) (_ BitVec 64) V!3155 Int) Unit!2965)

(assert (=> d!26081 (= lt!49087 (choose!600 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3196 lt!48985) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26081 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26081 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3196 lt!48985) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)) lt!49087)))

(declare-fun b!97940 () Bool)

(assert (=> b!97940 (= e!63877 (= (+!138 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!472 (_keys!4171 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))))))

(assert (= (and d!26081 res!49302) b!97940))

(assert (=> d!26081 m!106609))

(assert (=> d!26081 m!106607))

(declare-fun m!107059 () Bool)

(assert (=> d!26081 m!107059))

(assert (=> d!26081 m!106929))

(assert (=> b!97940 m!106687))

(assert (=> b!97940 m!106687))

(declare-fun m!107061 () Bool)

(assert (=> b!97940 m!107061))

(assert (=> b!97940 m!106761))

(declare-fun m!107063 () Bool)

(assert (=> b!97940 m!107063))

(assert (=> b!97772 d!26081))

(declare-fun b!97949 () Bool)

(declare-fun e!63883 () (_ BitVec 32))

(declare-fun call!9987 () (_ BitVec 32))

(assert (=> b!97949 (= e!63883 (bvadd #b00000000000000000000000000000001 call!9987))))

(declare-fun b!97950 () Bool)

(assert (=> b!97950 (= e!63883 call!9987)))

(declare-fun d!26083 () Bool)

(declare-fun lt!49090 () (_ BitVec 32))

(assert (=> d!26083 (and (bvsge lt!49090 #b00000000000000000000000000000000) (bvsle lt!49090 (bvsub (size!2264 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!63882 () (_ BitVec 32))

(assert (=> d!26083 (= lt!49090 e!63882)))

(declare-fun c!16604 () Bool)

(assert (=> d!26083 (= c!16604 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26083 (and (bvsle #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2264 (_keys!4171 newMap!16)) (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26083 (= (arrayCountValidKeys!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) lt!49090)))

(declare-fun bm!9984 () Bool)

(assert (=> bm!9984 (= call!9987 (arrayCountValidKeys!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!97951 () Bool)

(assert (=> b!97951 (= e!63882 #b00000000000000000000000000000000)))

(declare-fun b!97952 () Bool)

(assert (=> b!97952 (= e!63882 e!63883)))

(declare-fun c!16603 () Bool)

(assert (=> b!97952 (= c!16603 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!26083 c!16604) b!97951))

(assert (= (and d!26083 (not c!16604)) b!97952))

(assert (= (and b!97952 c!16603) b!97949))

(assert (= (and b!97952 (not c!16603)) b!97950))

(assert (= (or b!97949 b!97950) bm!9984))

(declare-fun m!107065 () Bool)

(assert (=> bm!9984 m!107065))

(assert (=> b!97952 m!106867))

(assert (=> b!97952 m!106867))

(assert (=> b!97952 m!106887))

(assert (=> b!97586 d!26083))

(declare-fun bm!9994 () Bool)

(declare-fun call!9999 () Bool)

(declare-fun call!9998 () Bool)

(assert (=> bm!9994 (= call!9999 call!9998)))

(declare-fun b!97987 () Bool)

(declare-fun res!49323 () Bool)

(declare-fun e!63907 () Bool)

(assert (=> b!97987 (=> (not res!49323) (not e!63907))))

(declare-fun lt!49155 () tuple2!2354)

(assert (=> b!97987 (= res!49323 (contains!805 (map!1255 (_2!1187 lt!49155)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!97988 () Bool)

(declare-fun res!49327 () Bool)

(declare-fun lt!49176 () SeekEntryResult!263)

(assert (=> b!97988 (= res!49327 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3198 lt!49176)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63906 () Bool)

(assert (=> b!97988 (=> (not res!49327) (not e!63906))))

(declare-fun b!97989 () Bool)

(declare-fun e!63900 () Bool)

(declare-fun call!9997 () Bool)

(assert (=> b!97989 (= e!63900 (not call!9997))))

(declare-fun call!9996 () SeekEntryResult!263)

(declare-fun bm!9995 () Bool)

(assert (=> bm!9995 (= call!9996 (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun lt!49163 () SeekEntryResult!263)

(declare-fun bm!9996 () Bool)

(declare-fun c!16616 () Bool)

(declare-fun c!16614 () Bool)

(assert (=> bm!9996 (= call!9998 (inRange!0 (ite c!16614 (index!3196 lt!49163) (ite c!16616 (index!3195 lt!49176) (index!3198 lt!49176))) (mask!6578 newMap!16)))))

(declare-fun e!63902 () Bool)

(declare-fun b!97990 () Bool)

(assert (=> b!97990 (= e!63902 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!49163)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!97991 () Bool)

(declare-fun e!63905 () Unit!2965)

(declare-fun Unit!2980 () Unit!2965)

(assert (=> b!97991 (= e!63905 Unit!2980)))

(declare-fun lt!49167 () Unit!2965)

(assert (=> b!97991 (= lt!49167 (lemmaInListMapThenSeekEntryOrOpenFindsIt!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(assert (=> b!97991 (= lt!49163 call!9996)))

(declare-fun res!49324 () Bool)

(assert (=> b!97991 (= res!49324 ((_ is Found!263) lt!49163))))

(assert (=> b!97991 (=> (not res!49324) (not e!63902))))

(assert (=> b!97991 e!63902))

(declare-fun lt!49154 () Unit!2965)

(assert (=> b!97991 (= lt!49154 lt!49167)))

(assert (=> b!97991 false))

(declare-fun b!97992 () Bool)

(assert (=> b!97992 (= e!63906 (not call!9997))))

(declare-fun b!97993 () Bool)

(declare-fun c!16615 () Bool)

(assert (=> b!97993 (= c!16615 ((_ is MissingVacant!263) lt!49176))))

(declare-fun e!63904 () Bool)

(declare-fun e!63903 () Bool)

(assert (=> b!97993 (= e!63904 e!63903)))

(declare-fun bm!9993 () Bool)

(assert (=> bm!9993 (= call!9997 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun d!26085 () Bool)

(assert (=> d!26085 e!63907))

(declare-fun res!49329 () Bool)

(assert (=> d!26085 (=> (not res!49329) (not e!63907))))

(assert (=> d!26085 (= res!49329 (_1!1187 lt!49155))))

(assert (=> d!26085 (= lt!49155 (tuple2!2355 true (LongMapFixedSize!853 (defaultEntry!2481 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (bvadd (_size!475 newMap!16) #b00000000000000000000000000000001) (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (_vacant!475 newMap!16))))))

(declare-fun lt!49152 () Unit!2965)

(declare-fun lt!49162 () Unit!2965)

(assert (=> d!26085 (= lt!49152 lt!49162)))

(declare-fun lt!49161 () array!4240)

(declare-fun lt!49174 () array!4242)

(assert (=> d!26085 (contains!805 (getCurrentListMap!472 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985))))))

(assert (=> d!26085 (= lt!49162 (lemmaValidKeyInArrayIsInListMap!99 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26085 (= lt!49174 (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))))

(assert (=> d!26085 (= lt!49161 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun lt!49165 () Unit!2965)

(declare-fun lt!49175 () Unit!2965)

(assert (=> d!26085 (= lt!49165 lt!49175)))

(declare-fun lt!49180 () array!4240)

(assert (=> d!26085 (= (arrayCountValidKeys!0 lt!49180 (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (bvadd (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4240 (_ BitVec 32)) Unit!2965)

(assert (=> d!26085 (= lt!49175 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!49180 (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985))))))

(assert (=> d!26085 (= lt!49180 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun lt!49151 () Unit!2965)

(declare-fun lt!49171 () Unit!2965)

(assert (=> d!26085 (= lt!49151 lt!49171)))

(declare-fun lt!49173 () array!4240)

(assert (=> d!26085 (arrayContainsKey!0 lt!49173 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4240 (_ BitVec 64) (_ BitVec 32)) Unit!2965)

(assert (=> d!26085 (= lt!49171 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!49173 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985))))))

(assert (=> d!26085 (= lt!49173 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun lt!49156 () Unit!2965)

(declare-fun lt!49159 () Unit!2965)

(assert (=> d!26085 (= lt!49156 lt!49159)))

(assert (=> d!26085 (= (+!138 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!472 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!25 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) (_ BitVec 64) V!3155 Int) Unit!2965)

(assert (=> d!26085 (= lt!49159 (lemmaAddValidKeyToArrayThenAddPairToListMap!25 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49170 () Unit!2965)

(declare-fun lt!49169 () Unit!2965)

(assert (=> d!26085 (= lt!49170 lt!49169)))

(assert (=> d!26085 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (mask!6578 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4240 (_ BitVec 32) (_ BitVec 32)) Unit!2965)

(assert (=> d!26085 (= lt!49169 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (mask!6578 newMap!16)))))

(declare-fun lt!49153 () Unit!2965)

(declare-fun lt!49166 () Unit!2965)

(assert (=> d!26085 (= lt!49153 lt!49166)))

(assert (=> d!26085 (= (arrayCountValidKeys!0 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4240 (_ BitVec 32) (_ BitVec 64)) Unit!2965)

(assert (=> d!26085 (= lt!49166 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4171 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun lt!49178 () Unit!2965)

(declare-fun lt!49177 () Unit!2965)

(assert (=> d!26085 (= lt!49178 lt!49177)))

(declare-fun lt!49168 () (_ BitVec 32))

(declare-fun lt!49158 () List!1611)

(assert (=> d!26085 (arrayNoDuplicates!0 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) lt!49168 lt!49158)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4240 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1611) Unit!2965)

(assert (=> d!26085 (= lt!49177 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) lt!49168 lt!49158))))

(assert (=> d!26085 (= lt!49158 Nil!1608)))

(assert (=> d!26085 (= lt!49168 #b00000000000000000000000000000000)))

(declare-fun lt!49157 () Unit!2965)

(declare-fun e!63901 () Unit!2965)

(assert (=> d!26085 (= lt!49157 e!63901)))

(declare-fun c!16613 () Bool)

(assert (=> d!26085 (= c!16613 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!49164 () Unit!2965)

(assert (=> d!26085 (= lt!49164 e!63905)))

(assert (=> d!26085 (= c!16614 (contains!805 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26085 (valid!385 newMap!16)))

(assert (=> d!26085 (= (updateHelperNewKey!41 newMap!16 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985))) lt!49155)))

(declare-fun b!97994 () Bool)

(declare-fun lt!49179 () Unit!2965)

(assert (=> b!97994 (= e!63905 lt!49179)))

(assert (=> b!97994 (= lt!49179 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(assert (=> b!97994 (= lt!49176 call!9996)))

(assert (=> b!97994 (= c!16616 ((_ is MissingZero!263) lt!49176))))

(assert (=> b!97994 e!63904))

(declare-fun b!97995 () Bool)

(assert (=> b!97995 (= e!63903 ((_ is Undefined!263) lt!49176))))

(declare-fun b!97996 () Bool)

(declare-fun res!49322 () Bool)

(assert (=> b!97996 (= res!49322 call!9998)))

(assert (=> b!97996 (=> (not res!49322) (not e!63902))))

(declare-fun b!97997 () Bool)

(declare-fun Unit!2981 () Unit!2965)

(assert (=> b!97997 (= e!63901 Unit!2981)))

(declare-fun lt!49172 () Unit!2965)

(declare-fun lemmaArrayContainsKeyThenInListMap!25 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) (_ BitVec 32) Int) Unit!2965)

(assert (=> b!97997 (= lt!49172 (lemmaArrayContainsKeyThenInListMap!25 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(assert (=> b!97997 (contains!805 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))

(declare-fun lt!49160 () Unit!2965)

(assert (=> b!97997 (= lt!49160 lt!49172)))

(assert (=> b!97997 false))

(declare-fun b!97998 () Bool)

(declare-fun res!49325 () Bool)

(assert (=> b!97998 (=> (not res!49325) (not e!63907))))

(assert (=> b!97998 (= res!49325 (valid!385 (_2!1187 lt!49155)))))

(declare-fun b!97999 () Bool)

(assert (=> b!97999 (= e!63903 e!63906)))

(declare-fun res!49326 () Bool)

(assert (=> b!97999 (= res!49326 call!9999)))

(assert (=> b!97999 (=> (not res!49326) (not e!63906))))

(declare-fun b!98000 () Bool)

(declare-fun res!49321 () Bool)

(assert (=> b!98000 (=> (not res!49321) (not e!63900))))

(assert (=> b!98000 (= res!49321 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3195 lt!49176)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98001 () Bool)

(assert (=> b!98001 (= e!63907 (= (map!1255 (_2!1187 lt!49155)) (+!138 (map!1255 newMap!16) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98002 () Bool)

(declare-fun Unit!2982 () Unit!2965)

(assert (=> b!98002 (= e!63901 Unit!2982)))

(declare-fun b!98003 () Bool)

(declare-fun res!49328 () Bool)

(assert (=> b!98003 (=> (not res!49328) (not e!63900))))

(assert (=> b!98003 (= res!49328 call!9999)))

(assert (=> b!98003 (= e!63904 e!63900)))

(assert (= (and d!26085 c!16614) b!97991))

(assert (= (and d!26085 (not c!16614)) b!97994))

(assert (= (and b!97991 res!49324) b!97996))

(assert (= (and b!97996 res!49322) b!97990))

(assert (= (and b!97994 c!16616) b!98003))

(assert (= (and b!97994 (not c!16616)) b!97993))

(assert (= (and b!98003 res!49328) b!98000))

(assert (= (and b!98000 res!49321) b!97989))

(assert (= (and b!97993 c!16615) b!97999))

(assert (= (and b!97993 (not c!16615)) b!97995))

(assert (= (and b!97999 res!49326) b!97988))

(assert (= (and b!97988 res!49327) b!97992))

(assert (= (or b!98003 b!97999) bm!9994))

(assert (= (or b!97989 b!97992) bm!9993))

(assert (= (or b!97996 bm!9994) bm!9996))

(assert (= (or b!97991 b!97994) bm!9995))

(assert (= (and d!26085 c!16613) b!97997))

(assert (= (and d!26085 (not c!16613)) b!98002))

(assert (= (and d!26085 res!49329) b!97998))

(assert (= (and b!97998 res!49325) b!97987))

(assert (= (and b!97987 res!49323) b!98001))

(declare-fun m!107067 () Bool)

(assert (=> b!97990 m!107067))

(declare-fun m!107069 () Bool)

(assert (=> b!97987 m!107069))

(assert (=> b!97987 m!107069))

(assert (=> b!97987 m!106609))

(declare-fun m!107071 () Bool)

(assert (=> b!97987 m!107071))

(declare-fun m!107073 () Bool)

(assert (=> b!98000 m!107073))

(declare-fun m!107075 () Bool)

(assert (=> b!97998 m!107075))

(assert (=> b!97994 m!106609))

(assert (=> b!97994 m!106787))

(assert (=> b!97997 m!106609))

(declare-fun m!107077 () Bool)

(assert (=> b!97997 m!107077))

(assert (=> b!97997 m!106687))

(assert (=> b!97997 m!106687))

(assert (=> b!97997 m!106609))

(declare-fun m!107079 () Bool)

(assert (=> b!97997 m!107079))

(assert (=> bm!9993 m!106609))

(assert (=> bm!9993 m!106755))

(declare-fun m!107081 () Bool)

(assert (=> bm!9996 m!107081))

(assert (=> bm!9995 m!106609))

(assert (=> bm!9995 m!106785))

(declare-fun m!107083 () Bool)

(assert (=> d!26085 m!107083))

(declare-fun m!107085 () Bool)

(assert (=> d!26085 m!107085))

(declare-fun m!107087 () Bool)

(assert (=> d!26085 m!107087))

(declare-fun m!107089 () Bool)

(assert (=> d!26085 m!107089))

(assert (=> d!26085 m!106609))

(assert (=> d!26085 m!106755))

(declare-fun m!107091 () Bool)

(assert (=> d!26085 m!107091))

(assert (=> d!26085 m!106609))

(assert (=> d!26085 m!106607))

(declare-fun m!107093 () Bool)

(assert (=> d!26085 m!107093))

(assert (=> d!26085 m!106681))

(declare-fun m!107095 () Bool)

(assert (=> d!26085 m!107095))

(assert (=> d!26085 m!107087))

(declare-fun m!107097 () Bool)

(assert (=> d!26085 m!107097))

(assert (=> d!26085 m!106687))

(declare-fun m!107099 () Bool)

(assert (=> d!26085 m!107099))

(declare-fun m!107101 () Bool)

(assert (=> d!26085 m!107101))

(declare-fun m!107103 () Bool)

(assert (=> d!26085 m!107103))

(assert (=> d!26085 m!106609))

(declare-fun m!107105 () Bool)

(assert (=> d!26085 m!107105))

(assert (=> d!26085 m!107095))

(assert (=> d!26085 m!106609))

(declare-fun m!107107 () Bool)

(assert (=> d!26085 m!107107))

(declare-fun m!107109 () Bool)

(assert (=> d!26085 m!107109))

(assert (=> d!26085 m!106609))

(declare-fun m!107111 () Bool)

(assert (=> d!26085 m!107111))

(assert (=> d!26085 m!106687))

(assert (=> d!26085 m!106609))

(assert (=> d!26085 m!107079))

(assert (=> d!26085 m!106595))

(assert (=> d!26085 m!106687))

(assert (=> d!26085 m!107061))

(assert (=> d!26085 m!106609))

(declare-fun m!107113 () Bool)

(assert (=> d!26085 m!107113))

(declare-fun m!107115 () Bool)

(assert (=> d!26085 m!107115))

(assert (=> d!26085 m!106609))

(declare-fun m!107117 () Bool)

(assert (=> d!26085 m!107117))

(assert (=> b!97991 m!106609))

(assert (=> b!97991 m!106791))

(declare-fun m!107119 () Bool)

(assert (=> b!97988 m!107119))

(assert (=> b!98001 m!107069))

(assert (=> b!98001 m!106615))

(assert (=> b!98001 m!106615))

(declare-fun m!107121 () Bool)

(assert (=> b!98001 m!107121))

(assert (=> bm!9949 d!26085))

(declare-fun d!26087 () Bool)

(declare-fun res!49341 () Bool)

(declare-fun e!63910 () Bool)

(assert (=> d!26087 (=> (not res!49341) (not e!63910))))

(assert (=> d!26087 (= res!49341 (validMask!0 (mask!6578 newMap!16)))))

(assert (=> d!26087 (= (simpleValid!67 newMap!16) e!63910)))

(declare-fun b!98014 () Bool)

(declare-fun res!49339 () Bool)

(assert (=> b!98014 (=> (not res!49339) (not e!63910))))

(declare-fun size!2268 (LongMapFixedSize!852) (_ BitVec 32))

(assert (=> b!98014 (= res!49339 (= (size!2268 newMap!16) (bvadd (_size!475 newMap!16) (bvsdiv (bvadd (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!98015 () Bool)

(assert (=> b!98015 (= e!63910 (and (bvsge (extraKeys!2302 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2302 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!475 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!98013 () Bool)

(declare-fun res!49338 () Bool)

(assert (=> b!98013 (=> (not res!49338) (not e!63910))))

(assert (=> b!98013 (= res!49338 (bvsge (size!2268 newMap!16) (_size!475 newMap!16)))))

(declare-fun b!98012 () Bool)

(declare-fun res!49340 () Bool)

(assert (=> b!98012 (=> (not res!49340) (not e!63910))))

(assert (=> b!98012 (= res!49340 (and (= (size!2265 (_values!2464 newMap!16)) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001)) (= (size!2264 (_keys!4171 newMap!16)) (size!2265 (_values!2464 newMap!16))) (bvsge (_size!475 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!475 newMap!16) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001))))))

(assert (= (and d!26087 res!49341) b!98012))

(assert (= (and b!98012 res!49340) b!98013))

(assert (= (and b!98013 res!49338) b!98014))

(assert (= (and b!98014 res!49339) b!98015))

(assert (=> d!26087 m!106929))

(declare-fun m!107123 () Bool)

(assert (=> b!98014 m!107123))

(assert (=> b!98013 m!107123))

(assert (=> d!25991 d!26087))

(declare-fun b!98028 () Bool)

(declare-fun e!63919 () SeekEntryResult!263)

(assert (=> b!98028 (= e!63919 Undefined!263)))

(declare-fun lt!49189 () SeekEntryResult!263)

(declare-fun d!26089 () Bool)

(assert (=> d!26089 (and (or ((_ is Undefined!263) lt!49189) (not ((_ is Found!263) lt!49189)) (and (bvsge (index!3196 lt!49189) #b00000000000000000000000000000000) (bvslt (index!3196 lt!49189) (size!2264 (_keys!4171 newMap!16))))) (or ((_ is Undefined!263) lt!49189) ((_ is Found!263) lt!49189) (not ((_ is MissingZero!263) lt!49189)) (and (bvsge (index!3195 lt!49189) #b00000000000000000000000000000000) (bvslt (index!3195 lt!49189) (size!2264 (_keys!4171 newMap!16))))) (or ((_ is Undefined!263) lt!49189) ((_ is Found!263) lt!49189) ((_ is MissingZero!263) lt!49189) (not ((_ is MissingVacant!263) lt!49189)) (and (bvsge (index!3198 lt!49189) #b00000000000000000000000000000000) (bvslt (index!3198 lt!49189) (size!2264 (_keys!4171 newMap!16))))) (or ((_ is Undefined!263) lt!49189) (ite ((_ is Found!263) lt!49189) (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!49189)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (ite ((_ is MissingZero!263) lt!49189) (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3195 lt!49189)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!263) lt!49189) (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3198 lt!49189)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26089 (= lt!49189 e!63919)))

(declare-fun c!16625 () Bool)

(declare-fun lt!49187 () SeekEntryResult!263)

(assert (=> d!26089 (= c!16625 (and ((_ is Intermediate!263) lt!49187) (undefined!1075 lt!49187)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4240 (_ BitVec 32)) SeekEntryResult!263)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!26089 (= lt!49187 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (mask!6578 newMap!16)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (=> d!26089 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26089 (= (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)) lt!49189)))

(declare-fun b!98029 () Bool)

(declare-fun e!63918 () SeekEntryResult!263)

(assert (=> b!98029 (= e!63918 (Found!263 (index!3197 lt!49187)))))

(declare-fun b!98030 () Bool)

(declare-fun e!63917 () SeekEntryResult!263)

(assert (=> b!98030 (= e!63917 (MissingZero!263 (index!3197 lt!49187)))))

(declare-fun b!98031 () Bool)

(assert (=> b!98031 (= e!63919 e!63918)))

(declare-fun lt!49188 () (_ BitVec 64))

(assert (=> b!98031 (= lt!49188 (select (arr!2014 (_keys!4171 newMap!16)) (index!3197 lt!49187)))))

(declare-fun c!16624 () Bool)

(assert (=> b!98031 (= c!16624 (= lt!49188 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!98032 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4240 (_ BitVec 32)) SeekEntryResult!263)

(assert (=> b!98032 (= e!63917 (seekKeyOrZeroReturnVacant!0 (x!12969 lt!49187) (index!3197 lt!49187) (index!3197 lt!49187) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!98033 () Bool)

(declare-fun c!16623 () Bool)

(assert (=> b!98033 (= c!16623 (= lt!49188 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98033 (= e!63918 e!63917)))

(assert (= (and d!26089 c!16625) b!98028))

(assert (= (and d!26089 (not c!16625)) b!98031))

(assert (= (and b!98031 c!16624) b!98029))

(assert (= (and b!98031 (not c!16624)) b!98033))

(assert (= (and b!98033 c!16623) b!98030))

(assert (= (and b!98033 (not c!16623)) b!98032))

(declare-fun m!107125 () Bool)

(assert (=> d!26089 m!107125))

(assert (=> d!26089 m!106609))

(declare-fun m!107127 () Bool)

(assert (=> d!26089 m!107127))

(declare-fun m!107129 () Bool)

(assert (=> d!26089 m!107129))

(assert (=> d!26089 m!107127))

(assert (=> d!26089 m!106609))

(declare-fun m!107131 () Bool)

(assert (=> d!26089 m!107131))

(declare-fun m!107133 () Bool)

(assert (=> d!26089 m!107133))

(assert (=> d!26089 m!106929))

(declare-fun m!107135 () Bool)

(assert (=> b!98031 m!107135))

(assert (=> b!98032 m!106609))

(declare-fun m!107137 () Bool)

(assert (=> b!98032 m!107137))

(assert (=> b!97771 d!26089))

(declare-fun b!98058 () Bool)

(declare-fun e!63935 () Bool)

(declare-fun lt!49205 () ListLongMap!1551)

(declare-fun isEmpty!362 (ListLongMap!1551) Bool)

(assert (=> b!98058 (= e!63935 (isEmpty!362 lt!49205))))

(declare-fun b!98059 () Bool)

(declare-fun res!49350 () Bool)

(declare-fun e!63938 () Bool)

(assert (=> b!98059 (=> (not res!49350) (not e!63938))))

(assert (=> b!98059 (= res!49350 (not (contains!805 lt!49205 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98060 () Bool)

(declare-fun e!63937 () Bool)

(assert (=> b!98060 (= e!63938 e!63937)))

(declare-fun c!16635 () Bool)

(declare-fun e!63936 () Bool)

(assert (=> b!98060 (= c!16635 e!63936)))

(declare-fun res!49351 () Bool)

(assert (=> b!98060 (=> (not res!49351) (not e!63936))))

(assert (=> b!98060 (= res!49351 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!98061 () Bool)

(declare-fun e!63939 () Bool)

(assert (=> b!98061 (= e!63937 e!63939)))

(assert (=> b!98061 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun res!49352 () Bool)

(assert (=> b!98061 (= res!49352 (contains!805 lt!49205 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98061 (=> (not res!49352) (not e!63939))))

(declare-fun b!98063 () Bool)

(declare-fun lt!49206 () Unit!2965)

(declare-fun lt!49204 () Unit!2965)

(assert (=> b!98063 (= lt!49206 lt!49204)))

(declare-fun lt!49208 () (_ BitVec 64))

(declare-fun lt!49209 () V!3155)

(declare-fun lt!49207 () ListLongMap!1551)

(declare-fun lt!49210 () (_ BitVec 64))

(assert (=> b!98063 (not (contains!805 (+!138 lt!49207 (tuple2!2353 lt!49208 lt!49209)) lt!49210))))

(declare-fun addStillNotContains!42 (ListLongMap!1551 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2965)

(assert (=> b!98063 (= lt!49204 (addStillNotContains!42 lt!49207 lt!49208 lt!49209 lt!49210))))

(assert (=> b!98063 (= lt!49210 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98063 (= lt!49209 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98063 (= lt!49208 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun call!10002 () ListLongMap!1551)

(assert (=> b!98063 (= lt!49207 call!10002)))

(declare-fun e!63934 () ListLongMap!1551)

(assert (=> b!98063 (= e!63934 (+!138 call!10002 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98064 () Bool)

(assert (=> b!98064 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> b!98064 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2265 (_values!2464 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> b!98064 (= e!63939 (= (apply!92 lt!49205 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98065 () Bool)

(assert (=> b!98065 (= e!63934 call!10002)))

(declare-fun b!98066 () Bool)

(declare-fun e!63940 () ListLongMap!1551)

(assert (=> b!98066 (= e!63940 e!63934)))

(declare-fun c!16634 () Bool)

(assert (=> b!98066 (= c!16634 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!98067 () Bool)

(assert (=> b!98067 (= e!63935 (= lt!49205 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!98068 () Bool)

(assert (=> b!98068 (= e!63936 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98068 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!98069 () Bool)

(assert (=> b!98069 (= e!63937 e!63935)))

(declare-fun c!16636 () Bool)

(assert (=> b!98069 (= c!16636 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun bm!9999 () Bool)

(assert (=> bm!9999 (= call!10002 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun d!26091 () Bool)

(assert (=> d!26091 e!63938))

(declare-fun res!49353 () Bool)

(assert (=> d!26091 (=> (not res!49353) (not e!63938))))

(assert (=> d!26091 (= res!49353 (not (contains!805 lt!49205 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26091 (= lt!49205 e!63940)))

(declare-fun c!16637 () Bool)

(assert (=> d!26091 (= c!16637 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> d!26091 (validMask!0 (mask!6578 (v!2801 (underlying!339 thiss!992))))))

(assert (=> d!26091 (= (getCurrentListMapNoExtraKeys!102 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))) lt!49205)))

(declare-fun b!98062 () Bool)

(assert (=> b!98062 (= e!63940 (ListLongMap!1552 Nil!1609))))

(assert (= (and d!26091 c!16637) b!98062))

(assert (= (and d!26091 (not c!16637)) b!98066))

(assert (= (and b!98066 c!16634) b!98063))

(assert (= (and b!98066 (not c!16634)) b!98065))

(assert (= (or b!98063 b!98065) bm!9999))

(assert (= (and d!26091 res!49353) b!98059))

(assert (= (and b!98059 res!49350) b!98060))

(assert (= (and b!98060 res!49351) b!98068))

(assert (= (and b!98060 c!16635) b!98061))

(assert (= (and b!98060 (not c!16635)) b!98069))

(assert (= (and b!98061 res!49352) b!98064))

(assert (= (and b!98069 c!16636) b!98067))

(assert (= (and b!98069 (not c!16636)) b!98058))

(declare-fun b_lambda!4367 () Bool)

(assert (=> (not b_lambda!4367) (not b!98063)))

(assert (=> b!98063 t!5570))

(declare-fun b_and!6021 () Bool)

(assert (= b_and!6017 (and (=> t!5570 result!3269) b_and!6021)))

(assert (=> b!98063 t!5572))

(declare-fun b_and!6023 () Bool)

(assert (= b_and!6019 (and (=> t!5572 result!3273) b_and!6023)))

(declare-fun b_lambda!4369 () Bool)

(assert (=> (not b_lambda!4369) (not b!98064)))

(assert (=> b!98064 t!5570))

(declare-fun b_and!6025 () Bool)

(assert (= b_and!6021 (and (=> t!5570 result!3269) b_and!6025)))

(assert (=> b!98064 t!5572))

(declare-fun b_and!6027 () Bool)

(assert (= b_and!6023 (and (=> t!5572 result!3273) b_and!6027)))

(declare-fun m!107139 () Bool)

(assert (=> b!98058 m!107139))

(assert (=> b!98068 m!106689))

(assert (=> b!98068 m!106689))

(assert (=> b!98068 m!106691))

(declare-fun m!107141 () Bool)

(assert (=> d!26091 m!107141))

(assert (=> d!26091 m!106601))

(declare-fun m!107143 () Bool)

(assert (=> b!98063 m!107143))

(declare-fun m!107145 () Bool)

(assert (=> b!98063 m!107145))

(assert (=> b!98063 m!107143))

(declare-fun m!107147 () Bool)

(assert (=> b!98063 m!107147))

(assert (=> b!98063 m!106689))

(assert (=> b!98063 m!106605))

(assert (=> b!98063 m!106739))

(assert (=> b!98063 m!106605))

(assert (=> b!98063 m!106741))

(assert (=> b!98063 m!106739))

(declare-fun m!107149 () Bool)

(assert (=> b!98063 m!107149))

(declare-fun m!107151 () Bool)

(assert (=> b!98059 m!107151))

(assert (=> b!98066 m!106689))

(assert (=> b!98066 m!106689))

(assert (=> b!98066 m!106691))

(assert (=> b!98064 m!106689))

(declare-fun m!107153 () Bool)

(assert (=> b!98064 m!107153))

(assert (=> b!98064 m!106689))

(assert (=> b!98064 m!106605))

(assert (=> b!98064 m!106739))

(assert (=> b!98064 m!106605))

(assert (=> b!98064 m!106741))

(assert (=> b!98064 m!106739))

(declare-fun m!107155 () Bool)

(assert (=> bm!9999 m!107155))

(assert (=> b!98067 m!107155))

(assert (=> b!98061 m!106689))

(assert (=> b!98061 m!106689))

(declare-fun m!107157 () Bool)

(assert (=> b!98061 m!107157))

(assert (=> bm!9890 d!26091))

(declare-fun b!98070 () Bool)

(declare-fun e!63941 () Bool)

(declare-fun call!10003 () Bool)

(assert (=> b!98070 (= e!63941 call!10003)))

(declare-fun b!98071 () Bool)

(assert (=> b!98071 (= e!63941 call!10003)))

(declare-fun d!26093 () Bool)

(declare-fun res!49355 () Bool)

(declare-fun e!63944 () Bool)

(assert (=> d!26093 (=> res!49355 e!63944)))

(assert (=> d!26093 (= res!49355 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> d!26093 (= (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)) e!63944)))

(declare-fun b!98072 () Bool)

(declare-fun e!63942 () Bool)

(assert (=> b!98072 (= e!63944 e!63942)))

(declare-fun res!49356 () Bool)

(assert (=> b!98072 (=> (not res!49356) (not e!63942))))

(declare-fun e!63943 () Bool)

(assert (=> b!98072 (= res!49356 (not e!63943))))

(declare-fun res!49354 () Bool)

(assert (=> b!98072 (=> (not res!49354) (not e!63943))))

(assert (=> b!98072 (= res!49354 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!98073 () Bool)

(assert (=> b!98073 (= e!63942 e!63941)))

(declare-fun c!16638 () Bool)

(assert (=> b!98073 (= c!16638 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun bm!10000 () Bool)

(assert (=> bm!10000 (= call!10003 (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16638 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608))))))

(declare-fun b!98074 () Bool)

(assert (=> b!98074 (= e!63943 (contains!807 (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!26093 (not res!49355)) b!98072))

(assert (= (and b!98072 res!49354) b!98074))

(assert (= (and b!98072 res!49356) b!98073))

(assert (= (and b!98073 c!16638) b!98070))

(assert (= (and b!98073 (not c!16638)) b!98071))

(assert (= (or b!98070 b!98071) bm!10000))

(declare-fun m!107159 () Bool)

(assert (=> b!98072 m!107159))

(assert (=> b!98072 m!107159))

(declare-fun m!107161 () Bool)

(assert (=> b!98072 m!107161))

(assert (=> b!98073 m!107159))

(assert (=> b!98073 m!107159))

(assert (=> b!98073 m!107161))

(assert (=> bm!10000 m!107159))

(declare-fun m!107163 () Bool)

(assert (=> bm!10000 m!107163))

(assert (=> b!98074 m!107159))

(assert (=> b!98074 m!107159))

(declare-fun m!107165 () Bool)

(assert (=> b!98074 m!107165))

(assert (=> bm!9966 d!26093))

(declare-fun d!26095 () Bool)

(assert (=> d!26095 (= (apply!92 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48875) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48875)))))

(declare-fun bs!4033 () Bool)

(assert (= bs!4033 d!26095))

(declare-fun m!107167 () Bool)

(assert (=> bs!4033 m!107167))

(assert (=> bs!4033 m!107167))

(declare-fun m!107169 () Bool)

(assert (=> bs!4033 m!107169))

(assert (=> b!97632 d!26095))

(assert (=> b!97632 d!26091))

(declare-fun d!26097 () Bool)

(assert (=> d!26097 (= (apply!92 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48875) (apply!92 lt!48888 lt!48875))))

(declare-fun lt!49213 () Unit!2965)

(declare-fun choose!601 (ListLongMap!1551 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2965)

(assert (=> d!26097 (= lt!49213 (choose!601 lt!48888 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48875))))

(declare-fun e!63947 () Bool)

(assert (=> d!26097 e!63947))

(declare-fun res!49359 () Bool)

(assert (=> d!26097 (=> (not res!49359) (not e!63947))))

(assert (=> d!26097 (= res!49359 (contains!805 lt!48888 lt!48875))))

(assert (=> d!26097 (= (addApplyDifferent!68 lt!48888 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48875) lt!49213)))

(declare-fun b!98078 () Bool)

(assert (=> b!98078 (= e!63947 (not (= lt!48875 lt!48882)))))

(assert (= (and d!26097 res!49359) b!98078))

(assert (=> d!26097 m!106719))

(assert (=> d!26097 m!106703))

(assert (=> d!26097 m!106705))

(declare-fun m!107171 () Bool)

(assert (=> d!26097 m!107171))

(declare-fun m!107173 () Bool)

(assert (=> d!26097 m!107173))

(assert (=> d!26097 m!106703))

(assert (=> b!97632 d!26097))

(declare-fun d!26099 () Bool)

(assert (=> d!26099 (contains!805 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48874)))

(declare-fun lt!49216 () Unit!2965)

(declare-fun choose!602 (ListLongMap!1551 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2965)

(assert (=> d!26099 (= lt!49216 (choose!602 lt!48881 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48874))))

(assert (=> d!26099 (contains!805 lt!48881 lt!48874)))

(assert (=> d!26099 (= (addStillContains!68 lt!48881 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48874) lt!49216)))

(declare-fun bs!4034 () Bool)

(assert (= bs!4034 d!26099))

(assert (=> bs!4034 m!106709))

(assert (=> bs!4034 m!106709))

(assert (=> bs!4034 m!106727))

(declare-fun m!107175 () Bool)

(assert (=> bs!4034 m!107175))

(declare-fun m!107177 () Bool)

(assert (=> bs!4034 m!107177))

(assert (=> b!97632 d!26099))

(declare-fun d!26101 () Bool)

(assert (=> d!26101 (= (apply!92 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48873) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48873)))))

(declare-fun bs!4035 () Bool)

(assert (= bs!4035 d!26101))

(declare-fun m!107179 () Bool)

(assert (=> bs!4035 m!107179))

(assert (=> bs!4035 m!107179))

(declare-fun m!107181 () Bool)

(assert (=> bs!4035 m!107181))

(assert (=> b!97632 d!26101))

(declare-fun d!26103 () Bool)

(assert (=> d!26103 (= (apply!92 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48873) (apply!92 lt!48889 lt!48873))))

(declare-fun lt!49217 () Unit!2965)

(assert (=> d!26103 (= lt!49217 (choose!601 lt!48889 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48873))))

(declare-fun e!63948 () Bool)

(assert (=> d!26103 e!63948))

(declare-fun res!49360 () Bool)

(assert (=> d!26103 (=> (not res!49360) (not e!63948))))

(assert (=> d!26103 (= res!49360 (contains!805 lt!48889 lt!48873))))

(assert (=> d!26103 (= (addApplyDifferent!68 lt!48889 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48873) lt!49217)))

(declare-fun b!98080 () Bool)

(assert (=> b!98080 (= e!63948 (not (= lt!48873 lt!48886)))))

(assert (= (and d!26103 res!49360) b!98080))

(assert (=> d!26103 m!106717))

(assert (=> d!26103 m!106699))

(assert (=> d!26103 m!106701))

(declare-fun m!107183 () Bool)

(assert (=> d!26103 m!107183))

(declare-fun m!107185 () Bool)

(assert (=> d!26103 m!107185))

(assert (=> d!26103 m!106699))

(assert (=> b!97632 d!26103))

(declare-fun d!26105 () Bool)

(assert (=> d!26105 (= (apply!92 lt!48888 lt!48875) (get!1300 (getValueByKey!149 (toList!791 lt!48888) lt!48875)))))

(declare-fun bs!4036 () Bool)

(assert (= bs!4036 d!26105))

(declare-fun m!107187 () Bool)

(assert (=> bs!4036 m!107187))

(assert (=> bs!4036 m!107187))

(declare-fun m!107189 () Bool)

(assert (=> bs!4036 m!107189))

(assert (=> b!97632 d!26105))

(declare-fun d!26107 () Bool)

(declare-fun e!63949 () Bool)

(assert (=> d!26107 e!63949))

(declare-fun res!49362 () Bool)

(assert (=> d!26107 (=> (not res!49362) (not e!63949))))

(declare-fun lt!49218 () ListLongMap!1551)

(assert (=> d!26107 (= res!49362 (contains!805 lt!49218 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun lt!49220 () List!1612)

(assert (=> d!26107 (= lt!49218 (ListLongMap!1552 lt!49220))))

(declare-fun lt!49221 () Unit!2965)

(declare-fun lt!49219 () Unit!2965)

(assert (=> d!26107 (= lt!49221 lt!49219)))

(assert (=> d!26107 (= (getValueByKey!149 lt!49220 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26107 (= lt!49219 (lemmaContainsTupThenGetReturnValue!67 lt!49220 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26107 (= lt!49220 (insertStrictlySorted!69 (toList!791 lt!48888) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26107 (= (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!49218)))

(declare-fun b!98081 () Bool)

(declare-fun res!49361 () Bool)

(assert (=> b!98081 (=> (not res!49361) (not e!63949))))

(assert (=> b!98081 (= res!49361 (= (getValueByKey!149 (toList!791 lt!49218) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98082 () Bool)

(assert (=> b!98082 (= e!63949 (contains!808 (toList!791 lt!49218) (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(assert (= (and d!26107 res!49362) b!98081))

(assert (= (and b!98081 res!49361) b!98082))

(declare-fun m!107191 () Bool)

(assert (=> d!26107 m!107191))

(declare-fun m!107193 () Bool)

(assert (=> d!26107 m!107193))

(declare-fun m!107195 () Bool)

(assert (=> d!26107 m!107195))

(declare-fun m!107197 () Bool)

(assert (=> d!26107 m!107197))

(declare-fun m!107199 () Bool)

(assert (=> b!98081 m!107199))

(declare-fun m!107201 () Bool)

(assert (=> b!98082 m!107201))

(assert (=> b!97632 d!26107))

(declare-fun d!26109 () Bool)

(declare-fun e!63950 () Bool)

(assert (=> d!26109 e!63950))

(declare-fun res!49364 () Bool)

(assert (=> d!26109 (=> (not res!49364) (not e!63950))))

(declare-fun lt!49222 () ListLongMap!1551)

(assert (=> d!26109 (= res!49364 (contains!805 lt!49222 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun lt!49224 () List!1612)

(assert (=> d!26109 (= lt!49222 (ListLongMap!1552 lt!49224))))

(declare-fun lt!49225 () Unit!2965)

(declare-fun lt!49223 () Unit!2965)

(assert (=> d!26109 (= lt!49225 lt!49223)))

(assert (=> d!26109 (= (getValueByKey!149 lt!49224 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26109 (= lt!49223 (lemmaContainsTupThenGetReturnValue!67 lt!49224 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26109 (= lt!49224 (insertStrictlySorted!69 (toList!791 lt!48881) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26109 (= (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!49222)))

(declare-fun b!98083 () Bool)

(declare-fun res!49363 () Bool)

(assert (=> b!98083 (=> (not res!49363) (not e!63950))))

(assert (=> b!98083 (= res!49363 (= (getValueByKey!149 (toList!791 lt!49222) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98084 () Bool)

(assert (=> b!98084 (= e!63950 (contains!808 (toList!791 lt!49222) (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(assert (= (and d!26109 res!49364) b!98083))

(assert (= (and b!98083 res!49363) b!98084))

(declare-fun m!107203 () Bool)

(assert (=> d!26109 m!107203))

(declare-fun m!107205 () Bool)

(assert (=> d!26109 m!107205))

(declare-fun m!107207 () Bool)

(assert (=> d!26109 m!107207))

(declare-fun m!107209 () Bool)

(assert (=> d!26109 m!107209))

(declare-fun m!107211 () Bool)

(assert (=> b!98083 m!107211))

(declare-fun m!107213 () Bool)

(assert (=> b!98084 m!107213))

(assert (=> b!97632 d!26109))

(declare-fun d!26111 () Bool)

(assert (=> d!26111 (= (apply!92 lt!48889 lt!48873) (get!1300 (getValueByKey!149 (toList!791 lt!48889) lt!48873)))))

(declare-fun bs!4037 () Bool)

(assert (= bs!4037 d!26111))

(declare-fun m!107215 () Bool)

(assert (=> bs!4037 m!107215))

(assert (=> bs!4037 m!107215))

(declare-fun m!107217 () Bool)

(assert (=> bs!4037 m!107217))

(assert (=> b!97632 d!26111))

(declare-fun d!26113 () Bool)

(assert (=> d!26113 (= (apply!92 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48892) (apply!92 lt!48883 lt!48892))))

(declare-fun lt!49226 () Unit!2965)

(assert (=> d!26113 (= lt!49226 (choose!601 lt!48883 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48892))))

(declare-fun e!63951 () Bool)

(assert (=> d!26113 e!63951))

(declare-fun res!49365 () Bool)

(assert (=> d!26113 (=> (not res!49365) (not e!63951))))

(assert (=> d!26113 (= res!49365 (contains!805 lt!48883 lt!48892))))

(assert (=> d!26113 (= (addApplyDifferent!68 lt!48883 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48892) lt!49226)))

(declare-fun b!98085 () Bool)

(assert (=> b!98085 (= e!63951 (not (= lt!48892 lt!48887)))))

(assert (= (and d!26113 res!49365) b!98085))

(assert (=> d!26113 m!106723))

(assert (=> d!26113 m!106713))

(assert (=> d!26113 m!106715))

(declare-fun m!107219 () Bool)

(assert (=> d!26113 m!107219))

(declare-fun m!107221 () Bool)

(assert (=> d!26113 m!107221))

(assert (=> d!26113 m!106713))

(assert (=> b!97632 d!26113))

(declare-fun d!26115 () Bool)

(declare-fun e!63952 () Bool)

(assert (=> d!26115 e!63952))

(declare-fun res!49367 () Bool)

(assert (=> d!26115 (=> (not res!49367) (not e!63952))))

(declare-fun lt!49227 () ListLongMap!1551)

(assert (=> d!26115 (= res!49367 (contains!805 lt!49227 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun lt!49229 () List!1612)

(assert (=> d!26115 (= lt!49227 (ListLongMap!1552 lt!49229))))

(declare-fun lt!49230 () Unit!2965)

(declare-fun lt!49228 () Unit!2965)

(assert (=> d!26115 (= lt!49230 lt!49228)))

(assert (=> d!26115 (= (getValueByKey!149 lt!49229 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26115 (= lt!49228 (lemmaContainsTupThenGetReturnValue!67 lt!49229 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26115 (= lt!49229 (insertStrictlySorted!69 (toList!791 lt!48889) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26115 (= (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!49227)))

(declare-fun b!98086 () Bool)

(declare-fun res!49366 () Bool)

(assert (=> b!98086 (=> (not res!49366) (not e!63952))))

(assert (=> b!98086 (= res!49366 (= (getValueByKey!149 (toList!791 lt!49227) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98087 () Bool)

(assert (=> b!98087 (= e!63952 (contains!808 (toList!791 lt!49227) (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(assert (= (and d!26115 res!49367) b!98086))

(assert (= (and b!98086 res!49366) b!98087))

(declare-fun m!107223 () Bool)

(assert (=> d!26115 m!107223))

(declare-fun m!107225 () Bool)

(assert (=> d!26115 m!107225))

(declare-fun m!107227 () Bool)

(assert (=> d!26115 m!107227))

(declare-fun m!107229 () Bool)

(assert (=> d!26115 m!107229))

(declare-fun m!107231 () Bool)

(assert (=> b!98086 m!107231))

(declare-fun m!107233 () Bool)

(assert (=> b!98087 m!107233))

(assert (=> b!97632 d!26115))

(declare-fun d!26117 () Bool)

(assert (=> d!26117 (= (apply!92 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48892) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48892)))))

(declare-fun bs!4038 () Bool)

(assert (= bs!4038 d!26117))

(declare-fun m!107235 () Bool)

(assert (=> bs!4038 m!107235))

(assert (=> bs!4038 m!107235))

(declare-fun m!107237 () Bool)

(assert (=> bs!4038 m!107237))

(assert (=> b!97632 d!26117))

(declare-fun d!26119 () Bool)

(assert (=> d!26119 (= (apply!92 lt!48883 lt!48892) (get!1300 (getValueByKey!149 (toList!791 lt!48883) lt!48892)))))

(declare-fun bs!4039 () Bool)

(assert (= bs!4039 d!26119))

(declare-fun m!107239 () Bool)

(assert (=> bs!4039 m!107239))

(assert (=> bs!4039 m!107239))

(declare-fun m!107241 () Bool)

(assert (=> bs!4039 m!107241))

(assert (=> b!97632 d!26119))

(declare-fun d!26121 () Bool)

(declare-fun e!63954 () Bool)

(assert (=> d!26121 e!63954))

(declare-fun res!49368 () Bool)

(assert (=> d!26121 (=> res!49368 e!63954)))

(declare-fun lt!49233 () Bool)

(assert (=> d!26121 (= res!49368 (not lt!49233))))

(declare-fun lt!49234 () Bool)

(assert (=> d!26121 (= lt!49233 lt!49234)))

(declare-fun lt!49231 () Unit!2965)

(declare-fun e!63953 () Unit!2965)

(assert (=> d!26121 (= lt!49231 e!63953)))

(declare-fun c!16639 () Bool)

(assert (=> d!26121 (= c!16639 lt!49234)))

(assert (=> d!26121 (= lt!49234 (containsKey!153 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874))))

(assert (=> d!26121 (= (contains!805 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48874) lt!49233)))

(declare-fun b!98088 () Bool)

(declare-fun lt!49232 () Unit!2965)

(assert (=> b!98088 (= e!63953 lt!49232)))

(assert (=> b!98088 (= lt!49232 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874))))

(assert (=> b!98088 (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874))))

(declare-fun b!98089 () Bool)

(declare-fun Unit!2983 () Unit!2965)

(assert (=> b!98089 (= e!63953 Unit!2983)))

(declare-fun b!98090 () Bool)

(assert (=> b!98090 (= e!63954 (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874)))))

(assert (= (and d!26121 c!16639) b!98088))

(assert (= (and d!26121 (not c!16639)) b!98089))

(assert (= (and d!26121 (not res!49368)) b!98090))

(declare-fun m!107243 () Bool)

(assert (=> d!26121 m!107243))

(declare-fun m!107245 () Bool)

(assert (=> b!98088 m!107245))

(declare-fun m!107247 () Bool)

(assert (=> b!98088 m!107247))

(assert (=> b!98088 m!107247))

(declare-fun m!107249 () Bool)

(assert (=> b!98088 m!107249))

(assert (=> b!98090 m!107247))

(assert (=> b!98090 m!107247))

(assert (=> b!98090 m!107249))

(assert (=> b!97632 d!26121))

(declare-fun d!26123 () Bool)

(declare-fun e!63955 () Bool)

(assert (=> d!26123 e!63955))

(declare-fun res!49370 () Bool)

(assert (=> d!26123 (=> (not res!49370) (not e!63955))))

(declare-fun lt!49235 () ListLongMap!1551)

(assert (=> d!26123 (= res!49370 (contains!805 lt!49235 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun lt!49237 () List!1612)

(assert (=> d!26123 (= lt!49235 (ListLongMap!1552 lt!49237))))

(declare-fun lt!49238 () Unit!2965)

(declare-fun lt!49236 () Unit!2965)

(assert (=> d!26123 (= lt!49238 lt!49236)))

(assert (=> d!26123 (= (getValueByKey!149 lt!49237 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26123 (= lt!49236 (lemmaContainsTupThenGetReturnValue!67 lt!49237 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26123 (= lt!49237 (insertStrictlySorted!69 (toList!791 lt!48883) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26123 (= (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!49235)))

(declare-fun b!98091 () Bool)

(declare-fun res!49369 () Bool)

(assert (=> b!98091 (=> (not res!49369) (not e!63955))))

(assert (=> b!98091 (= res!49369 (= (getValueByKey!149 (toList!791 lt!49235) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98092 () Bool)

(assert (=> b!98092 (= e!63955 (contains!808 (toList!791 lt!49235) (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(assert (= (and d!26123 res!49370) b!98091))

(assert (= (and b!98091 res!49369) b!98092))

(declare-fun m!107251 () Bool)

(assert (=> d!26123 m!107251))

(declare-fun m!107253 () Bool)

(assert (=> d!26123 m!107253))

(declare-fun m!107255 () Bool)

(assert (=> d!26123 m!107255))

(declare-fun m!107257 () Bool)

(assert (=> d!26123 m!107257))

(declare-fun m!107259 () Bool)

(assert (=> b!98091 m!107259))

(declare-fun m!107261 () Bool)

(assert (=> b!98092 m!107261))

(assert (=> b!97632 d!26123))

(declare-fun d!26125 () Bool)

(assert (=> d!26125 (= (map!1255 (_2!1187 lt!48968)) (getCurrentListMap!472 (_keys!4171 (_2!1187 lt!48968)) (_values!2464 (_2!1187 lt!48968)) (mask!6578 (_2!1187 lt!48968)) (extraKeys!2302 (_2!1187 lt!48968)) (zeroValue!2364 (_2!1187 lt!48968)) (minValue!2364 (_2!1187 lt!48968)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1187 lt!48968))))))

(declare-fun bs!4040 () Bool)

(assert (= bs!4040 d!26125))

(declare-fun m!107263 () Bool)

(assert (=> bs!4040 m!107263))

(assert (=> bm!9955 d!26125))

(declare-fun d!26127 () Bool)

(assert (=> d!26127 (= (+!138 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49241 () Unit!2965)

(declare-fun choose!603 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 V!3155 Int) Unit!2965)

(assert (=> d!26127 (= lt!49241 (choose!603 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26127 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26127 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)) lt!49241)))

(declare-fun bs!4041 () Bool)

(assert (= bs!4041 d!26127))

(assert (=> bs!4041 m!106607))

(declare-fun m!107265 () Bool)

(assert (=> bs!4041 m!107265))

(assert (=> bs!4041 m!106607))

(declare-fun m!107267 () Bool)

(assert (=> bs!4041 m!107267))

(assert (=> bs!4041 m!106687))

(declare-fun m!107269 () Bool)

(assert (=> bs!4041 m!107269))

(assert (=> bs!4041 m!106929))

(assert (=> bs!4041 m!106687))

(assert (=> b!97783 d!26127))

(assert (=> b!97817 d!26029))

(declare-fun b!98109 () Bool)

(declare-fun res!49381 () Bool)

(declare-fun e!63967 () Bool)

(assert (=> b!98109 (=> (not res!49381) (not e!63967))))

(declare-fun call!10008 () Bool)

(assert (=> b!98109 (= res!49381 call!10008)))

(declare-fun e!63965 () Bool)

(assert (=> b!98109 (= e!63965 e!63967)))

(declare-fun b!98110 () Bool)

(declare-fun res!49382 () Bool)

(assert (=> b!98110 (=> (not res!49382) (not e!63967))))

(declare-fun lt!49247 () SeekEntryResult!263)

(assert (=> b!98110 (= res!49382 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3198 lt!49247)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98110 (and (bvsge (index!3198 lt!49247) #b00000000000000000000000000000000) (bvslt (index!3198 lt!49247) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98111 () Bool)

(declare-fun e!63964 () Bool)

(declare-fun call!10009 () Bool)

(assert (=> b!98111 (= e!63964 (not call!10009))))

(declare-fun b!98112 () Bool)

(declare-fun e!63966 () Bool)

(assert (=> b!98112 (= e!63966 e!63965)))

(declare-fun c!16644 () Bool)

(assert (=> b!98112 (= c!16644 ((_ is MissingVacant!263) lt!49247))))

(declare-fun d!26129 () Bool)

(assert (=> d!26129 e!63966))

(declare-fun c!16645 () Bool)

(assert (=> d!26129 (= c!16645 ((_ is MissingZero!263) lt!49247))))

(assert (=> d!26129 (= lt!49247 (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun lt!49246 () Unit!2965)

(declare-fun choose!604 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) Int) Unit!2965)

(assert (=> d!26129 (= lt!49246 (choose!604 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26129 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26129 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!41 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)) lt!49246)))

(declare-fun bm!10005 () Bool)

(assert (=> bm!10005 (= call!10009 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!98113 () Bool)

(assert (=> b!98113 (= e!63965 ((_ is Undefined!263) lt!49247))))

(declare-fun bm!10006 () Bool)

(assert (=> bm!10006 (= call!10008 (inRange!0 (ite c!16645 (index!3195 lt!49247) (index!3198 lt!49247)) (mask!6578 newMap!16)))))

(declare-fun b!98114 () Bool)

(assert (=> b!98114 (and (bvsge (index!3195 lt!49247) #b00000000000000000000000000000000) (bvslt (index!3195 lt!49247) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun res!49379 () Bool)

(assert (=> b!98114 (= res!49379 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3195 lt!49247)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98114 (=> (not res!49379) (not e!63964))))

(declare-fun b!98115 () Bool)

(assert (=> b!98115 (= e!63966 e!63964)))

(declare-fun res!49380 () Bool)

(assert (=> b!98115 (= res!49380 call!10008)))

(assert (=> b!98115 (=> (not res!49380) (not e!63964))))

(declare-fun b!98116 () Bool)

(assert (=> b!98116 (= e!63967 (not call!10009))))

(assert (= (and d!26129 c!16645) b!98115))

(assert (= (and d!26129 (not c!16645)) b!98112))

(assert (= (and b!98115 res!49380) b!98114))

(assert (= (and b!98114 res!49379) b!98111))

(assert (= (and b!98112 c!16644) b!98109))

(assert (= (and b!98112 (not c!16644)) b!98113))

(assert (= (and b!98109 res!49381) b!98110))

(assert (= (and b!98110 res!49382) b!98116))

(assert (= (or b!98115 b!98109) bm!10006))

(assert (= (or b!98111 b!98116) bm!10005))

(assert (=> d!26129 m!106609))

(assert (=> d!26129 m!106785))

(assert (=> d!26129 m!106609))

(declare-fun m!107271 () Bool)

(assert (=> d!26129 m!107271))

(assert (=> d!26129 m!106929))

(declare-fun m!107273 () Bool)

(assert (=> bm!10006 m!107273))

(declare-fun m!107275 () Bool)

(assert (=> b!98110 m!107275))

(assert (=> bm!10005 m!106609))

(assert (=> bm!10005 m!106755))

(declare-fun m!107277 () Bool)

(assert (=> b!98114 m!107277))

(assert (=> bm!9954 d!26129))

(declare-fun d!26131 () Bool)

(declare-fun e!63969 () Bool)

(assert (=> d!26131 e!63969))

(declare-fun res!49383 () Bool)

(assert (=> d!26131 (=> res!49383 e!63969)))

(declare-fun lt!49250 () Bool)

(assert (=> d!26131 (= res!49383 (not lt!49250))))

(declare-fun lt!49251 () Bool)

(assert (=> d!26131 (= lt!49250 lt!49251)))

(declare-fun lt!49248 () Unit!2965)

(declare-fun e!63968 () Unit!2965)

(assert (=> d!26131 (= lt!49248 e!63968)))

(declare-fun c!16646 () Bool)

(assert (=> d!26131 (= c!16646 lt!49251)))

(assert (=> d!26131 (= lt!49251 (containsKey!153 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26131 (= (contains!805 lt!48891 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49250)))

(declare-fun b!98117 () Bool)

(declare-fun lt!49249 () Unit!2965)

(assert (=> b!98117 (= e!63968 lt!49249)))

(assert (=> b!98117 (= lt!49249 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98117 (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!98118 () Bool)

(declare-fun Unit!2984 () Unit!2965)

(assert (=> b!98118 (= e!63968 Unit!2984)))

(declare-fun b!98119 () Bool)

(assert (=> b!98119 (= e!63969 (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26131 c!16646) b!98117))

(assert (= (and d!26131 (not c!16646)) b!98118))

(assert (= (and d!26131 (not res!49383)) b!98119))

(assert (=> d!26131 m!106689))

(declare-fun m!107279 () Bool)

(assert (=> d!26131 m!107279))

(assert (=> b!98117 m!106689))

(declare-fun m!107281 () Bool)

(assert (=> b!98117 m!107281))

(assert (=> b!98117 m!106689))

(assert (=> b!98117 m!106945))

(assert (=> b!98117 m!106945))

(declare-fun m!107283 () Bool)

(assert (=> b!98117 m!107283))

(assert (=> b!98119 m!106689))

(assert (=> b!98119 m!106945))

(assert (=> b!98119 m!106945))

(assert (=> b!98119 m!107283))

(assert (=> b!97646 d!26131))

(assert (=> d!26001 d!25997))

(declare-fun d!26133 () Bool)

(declare-fun res!49384 () Bool)

(declare-fun e!63970 () Bool)

(assert (=> d!26133 (=> (not res!49384) (not e!63970))))

(assert (=> d!26133 (= res!49384 (simpleValid!67 (v!2801 (underlying!339 thiss!992))))))

(assert (=> d!26133 (= (valid!385 (v!2801 (underlying!339 thiss!992))) e!63970)))

(declare-fun b!98120 () Bool)

(declare-fun res!49385 () Bool)

(assert (=> b!98120 (=> (not res!49385) (not e!63970))))

(assert (=> b!98120 (= res!49385 (= (arrayCountValidKeys!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000 (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))) (_size!475 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun b!98121 () Bool)

(declare-fun res!49386 () Bool)

(assert (=> b!98121 (=> (not res!49386) (not e!63970))))

(assert (=> b!98121 (= res!49386 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun b!98122 () Bool)

(assert (=> b!98122 (= e!63970 (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000 Nil!1608))))

(assert (= (and d!26133 res!49384) b!98120))

(assert (= (and b!98120 res!49385) b!98121))

(assert (= (and b!98121 res!49386) b!98122))

(declare-fun m!107285 () Bool)

(assert (=> d!26133 m!107285))

(declare-fun m!107287 () Bool)

(assert (=> b!98120 m!107287))

(declare-fun m!107289 () Bool)

(assert (=> b!98121 m!107289))

(declare-fun m!107291 () Bool)

(assert (=> b!98122 m!107291))

(assert (=> d!25989 d!26133))

(assert (=> bm!9952 d!26089))

(declare-fun d!26135 () Bool)

(declare-fun e!63972 () Bool)

(assert (=> d!26135 e!63972))

(declare-fun res!49387 () Bool)

(assert (=> d!26135 (=> res!49387 e!63972)))

(declare-fun lt!49254 () Bool)

(assert (=> d!26135 (= res!49387 (not lt!49254))))

(declare-fun lt!49255 () Bool)

(assert (=> d!26135 (= lt!49254 lt!49255)))

(declare-fun lt!49252 () Unit!2965)

(declare-fun e!63971 () Unit!2965)

(assert (=> d!26135 (= lt!49252 e!63971)))

(declare-fun c!16647 () Bool)

(assert (=> d!26135 (= c!16647 lt!49255)))

(assert (=> d!26135 (= lt!49255 (containsKey!153 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26135 (= (contains!805 e!63752 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) lt!49254)))

(declare-fun b!98123 () Bool)

(declare-fun lt!49253 () Unit!2965)

(assert (=> b!98123 (= e!63971 lt!49253)))

(assert (=> b!98123 (= lt!49253 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> b!98123 (isDefined!103 (getValueByKey!149 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!98124 () Bool)

(declare-fun Unit!2985 () Unit!2965)

(assert (=> b!98124 (= e!63971 Unit!2985)))

(declare-fun b!98125 () Bool)

(assert (=> b!98125 (= e!63972 (isDefined!103 (getValueByKey!149 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (= (and d!26135 c!16647) b!98123))

(assert (= (and d!26135 (not c!16647)) b!98124))

(assert (= (and d!26135 (not res!49387)) b!98125))

(assert (=> d!26135 m!106609))

(declare-fun m!107293 () Bool)

(assert (=> d!26135 m!107293))

(assert (=> b!98123 m!106609))

(declare-fun m!107295 () Bool)

(assert (=> b!98123 m!107295))

(assert (=> b!98123 m!106609))

(declare-fun m!107297 () Bool)

(assert (=> b!98123 m!107297))

(assert (=> b!98123 m!107297))

(declare-fun m!107299 () Bool)

(assert (=> b!98123 m!107299))

(assert (=> b!98125 m!106609))

(assert (=> b!98125 m!107297))

(assert (=> b!98125 m!107297))

(assert (=> b!98125 m!107299))

(assert (=> bm!9944 d!26135))

(declare-fun d!26137 () Bool)

(declare-fun e!63974 () Bool)

(assert (=> d!26137 e!63974))

(declare-fun res!49388 () Bool)

(assert (=> d!26137 (=> res!49388 e!63974)))

(declare-fun lt!49258 () Bool)

(assert (=> d!26137 (= res!49388 (not lt!49258))))

(declare-fun lt!49259 () Bool)

(assert (=> d!26137 (= lt!49258 lt!49259)))

(declare-fun lt!49256 () Unit!2965)

(declare-fun e!63973 () Unit!2965)

(assert (=> d!26137 (= lt!49256 e!63973)))

(declare-fun c!16648 () Bool)

(assert (=> d!26137 (= c!16648 lt!49259)))

(assert (=> d!26137 (= lt!49259 (containsKey!153 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26137 (= (contains!805 lt!48891 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49258)))

(declare-fun b!98126 () Bool)

(declare-fun lt!49257 () Unit!2965)

(assert (=> b!98126 (= e!63973 lt!49257)))

(assert (=> b!98126 (= lt!49257 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98126 (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98127 () Bool)

(declare-fun Unit!2986 () Unit!2965)

(assert (=> b!98127 (= e!63973 Unit!2986)))

(declare-fun b!98128 () Bool)

(assert (=> b!98128 (= e!63974 (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26137 c!16648) b!98126))

(assert (= (and d!26137 (not c!16648)) b!98127))

(assert (= (and d!26137 (not res!49388)) b!98128))

(declare-fun m!107301 () Bool)

(assert (=> d!26137 m!107301))

(declare-fun m!107303 () Bool)

(assert (=> b!98126 m!107303))

(assert (=> b!98126 m!106953))

(assert (=> b!98126 m!106953))

(declare-fun m!107305 () Bool)

(assert (=> b!98126 m!107305))

(assert (=> b!98128 m!106953))

(assert (=> b!98128 m!106953))

(assert (=> b!98128 m!107305))

(assert (=> bm!9887 d!26137))

(declare-fun b!98129 () Bool)

(declare-fun e!63981 () Bool)

(declare-fun call!10016 () Bool)

(assert (=> b!98129 (= e!63981 (not call!10016))))

(declare-fun b!98130 () Bool)

(declare-fun e!63983 () Unit!2965)

(declare-fun lt!49279 () Unit!2965)

(assert (=> b!98130 (= e!63983 lt!49279)))

(declare-fun lt!49270 () ListLongMap!1551)

(assert (=> b!98130 (= lt!49270 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite c!16562 (_values!2464 newMap!16) lt!48976) (mask!6578 newMap!16) (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49266 () (_ BitVec 64))

(assert (=> b!98130 (= lt!49266 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49263 () (_ BitVec 64))

(assert (=> b!98130 (= lt!49263 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49268 () Unit!2965)

(assert (=> b!98130 (= lt!49268 (addStillContains!68 lt!49270 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49263))))

(assert (=> b!98130 (contains!805 (+!138 lt!49270 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49263)))

(declare-fun lt!49274 () Unit!2965)

(assert (=> b!98130 (= lt!49274 lt!49268)))

(declare-fun lt!49272 () ListLongMap!1551)

(assert (=> b!98130 (= lt!49272 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite c!16562 (_values!2464 newMap!16) lt!48976) (mask!6578 newMap!16) (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49276 () (_ BitVec 64))

(assert (=> b!98130 (= lt!49276 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49281 () (_ BitVec 64))

(assert (=> b!98130 (= lt!49281 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49261 () Unit!2965)

(assert (=> b!98130 (= lt!49261 (addApplyDifferent!68 lt!49272 lt!49276 (minValue!2364 newMap!16) lt!49281))))

(assert (=> b!98130 (= (apply!92 (+!138 lt!49272 (tuple2!2353 lt!49276 (minValue!2364 newMap!16))) lt!49281) (apply!92 lt!49272 lt!49281))))

(declare-fun lt!49273 () Unit!2965)

(assert (=> b!98130 (= lt!49273 lt!49261)))

(declare-fun lt!49278 () ListLongMap!1551)

(assert (=> b!98130 (= lt!49278 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite c!16562 (_values!2464 newMap!16) lt!48976) (mask!6578 newMap!16) (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49275 () (_ BitVec 64))

(assert (=> b!98130 (= lt!49275 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49262 () (_ BitVec 64))

(assert (=> b!98130 (= lt!49262 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49265 () Unit!2965)

(assert (=> b!98130 (= lt!49265 (addApplyDifferent!68 lt!49278 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49262))))

(assert (=> b!98130 (= (apply!92 (+!138 lt!49278 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49262) (apply!92 lt!49278 lt!49262))))

(declare-fun lt!49260 () Unit!2965)

(assert (=> b!98130 (= lt!49260 lt!49265)))

(declare-fun lt!49277 () ListLongMap!1551)

(assert (=> b!98130 (= lt!49277 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite c!16562 (_values!2464 newMap!16) lt!48976) (mask!6578 newMap!16) (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49271 () (_ BitVec 64))

(assert (=> b!98130 (= lt!49271 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49264 () (_ BitVec 64))

(assert (=> b!98130 (= lt!49264 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98130 (= lt!49279 (addApplyDifferent!68 lt!49277 lt!49271 (minValue!2364 newMap!16) lt!49264))))

(assert (=> b!98130 (= (apply!92 (+!138 lt!49277 (tuple2!2353 lt!49271 (minValue!2364 newMap!16))) lt!49264) (apply!92 lt!49277 lt!49264))))

(declare-fun b!98131 () Bool)

(declare-fun e!63982 () ListLongMap!1551)

(declare-fun call!10011 () ListLongMap!1551)

(assert (=> b!98131 (= e!63982 call!10011)))

(declare-fun bm!10007 () Bool)

(declare-fun call!10014 () ListLongMap!1551)

(assert (=> bm!10007 (= call!10011 call!10014)))

(declare-fun b!98132 () Bool)

(declare-fun e!63977 () Bool)

(declare-fun e!63978 () Bool)

(assert (=> b!98132 (= e!63977 e!63978)))

(declare-fun res!49396 () Bool)

(declare-fun call!10013 () Bool)

(assert (=> b!98132 (= res!49396 call!10013)))

(assert (=> b!98132 (=> (not res!49396) (not e!63978))))

(declare-fun b!98133 () Bool)

(declare-fun res!49392 () Bool)

(declare-fun e!63980 () Bool)

(assert (=> b!98133 (=> (not res!49392) (not e!63980))))

(assert (=> b!98133 (= res!49392 e!63977)))

(declare-fun c!16652 () Bool)

(assert (=> b!98133 (= c!16652 (not (= (bvand (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26139 () Bool)

(assert (=> d!26139 e!63980))

(declare-fun res!49389 () Bool)

(assert (=> d!26139 (=> (not res!49389) (not e!63980))))

(assert (=> d!26139 (= res!49389 (or (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))))

(declare-fun lt!49280 () ListLongMap!1551)

(declare-fun lt!49269 () ListLongMap!1551)

(assert (=> d!26139 (= lt!49280 lt!49269)))

(declare-fun lt!49267 () Unit!2965)

(assert (=> d!26139 (= lt!49267 e!63983)))

(declare-fun c!16650 () Bool)

(declare-fun e!63979 () Bool)

(assert (=> d!26139 (= c!16650 e!63979)))

(declare-fun res!49390 () Bool)

(assert (=> d!26139 (=> (not res!49390) (not e!63979))))

(assert (=> d!26139 (= res!49390 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun e!63986 () ListLongMap!1551)

(assert (=> d!26139 (= lt!49269 e!63986)))

(declare-fun c!16649 () Bool)

(assert (=> d!26139 (= c!16649 (and (not (= (bvand (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26139 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26139 (= (getCurrentListMap!472 (_keys!4171 newMap!16) (ite c!16562 (_values!2464 newMap!16) lt!48976) (mask!6578 newMap!16) (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49280)))

(declare-fun b!98134 () Bool)

(assert (=> b!98134 (= e!63978 (= (apply!92 lt!49280 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))

(declare-fun call!10012 () ListLongMap!1551)

(declare-fun c!16654 () Bool)

(declare-fun call!10010 () ListLongMap!1551)

(declare-fun bm!10008 () Bool)

(declare-fun call!10015 () ListLongMap!1551)

(assert (=> bm!10008 (= call!10014 (+!138 (ite c!16649 call!10012 (ite c!16654 call!10015 call!10010)) (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!98135 () Bool)

(assert (=> b!98135 (= e!63979 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98136 () Bool)

(declare-fun e!63987 () Bool)

(assert (=> b!98136 (= e!63987 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98137 () Bool)

(assert (=> b!98137 (= e!63977 (not call!10013))))

(declare-fun b!98138 () Bool)

(declare-fun e!63975 () ListLongMap!1551)

(assert (=> b!98138 (= e!63975 call!10011)))

(declare-fun b!98139 () Bool)

(assert (=> b!98139 (= e!63986 e!63982)))

(assert (=> b!98139 (= c!16654 (and (not (= (bvand (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10009 () Bool)

(assert (=> bm!10009 (= call!10016 (contains!805 lt!49280 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98140 () Bool)

(declare-fun e!63976 () Bool)

(assert (=> b!98140 (= e!63976 (= (apply!92 lt!49280 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!98141 () Bool)

(declare-fun e!63985 () Bool)

(assert (=> b!98141 (= e!63985 (= (apply!92 lt!49280 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 (ite c!16562 (_values!2464 newMap!16) lt!48976)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98141 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (ite c!16562 (_values!2464 newMap!16) lt!48976))))))

(assert (=> b!98141 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98142 () Bool)

(declare-fun res!49391 () Bool)

(assert (=> b!98142 (=> (not res!49391) (not e!63980))))

(declare-fun e!63984 () Bool)

(assert (=> b!98142 (= res!49391 e!63984)))

(declare-fun res!49395 () Bool)

(assert (=> b!98142 (=> res!49395 e!63984)))

(assert (=> b!98142 (= res!49395 (not e!63987))))

(declare-fun res!49397 () Bool)

(assert (=> b!98142 (=> (not res!49397) (not e!63987))))

(assert (=> b!98142 (= res!49397 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98143 () Bool)

(assert (=> b!98143 (= e!63975 call!10010)))

(declare-fun b!98144 () Bool)

(assert (=> b!98144 (= e!63984 e!63985)))

(declare-fun res!49394 () Bool)

(assert (=> b!98144 (=> (not res!49394) (not e!63985))))

(assert (=> b!98144 (= res!49394 (contains!805 lt!49280 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98144 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun bm!10010 () Bool)

(assert (=> bm!10010 (= call!10015 call!10012)))

(declare-fun b!98145 () Bool)

(assert (=> b!98145 (= e!63981 e!63976)))

(declare-fun res!49393 () Bool)

(assert (=> b!98145 (= res!49393 call!10016)))

(assert (=> b!98145 (=> (not res!49393) (not e!63976))))

(declare-fun bm!10011 () Bool)

(assert (=> bm!10011 (= call!10010 call!10015)))

(declare-fun b!98146 () Bool)

(declare-fun Unit!2987 () Unit!2965)

(assert (=> b!98146 (= e!63983 Unit!2987)))

(declare-fun b!98147 () Bool)

(declare-fun c!16651 () Bool)

(assert (=> b!98147 (= c!16651 (and (not (= (bvand (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98147 (= e!63982 e!63975)))

(declare-fun bm!10012 () Bool)

(assert (=> bm!10012 (= call!10012 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite c!16562 (_values!2464 newMap!16) lt!48976) (mask!6578 newMap!16) (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!98148 () Bool)

(assert (=> b!98148 (= e!63986 (+!138 call!10014 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun bm!10013 () Bool)

(assert (=> bm!10013 (= call!10013 (contains!805 lt!49280 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98149 () Bool)

(assert (=> b!98149 (= e!63980 e!63981)))

(declare-fun c!16653 () Bool)

(assert (=> b!98149 (= c!16653 (not (= (bvand (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26139 c!16649) b!98148))

(assert (= (and d!26139 (not c!16649)) b!98139))

(assert (= (and b!98139 c!16654) b!98131))

(assert (= (and b!98139 (not c!16654)) b!98147))

(assert (= (and b!98147 c!16651) b!98138))

(assert (= (and b!98147 (not c!16651)) b!98143))

(assert (= (or b!98138 b!98143) bm!10011))

(assert (= (or b!98131 bm!10011) bm!10010))

(assert (= (or b!98131 b!98138) bm!10007))

(assert (= (or b!98148 bm!10010) bm!10012))

(assert (= (or b!98148 bm!10007) bm!10008))

(assert (= (and d!26139 res!49390) b!98135))

(assert (= (and d!26139 c!16650) b!98130))

(assert (= (and d!26139 (not c!16650)) b!98146))

(assert (= (and d!26139 res!49389) b!98142))

(assert (= (and b!98142 res!49397) b!98136))

(assert (= (and b!98142 (not res!49395)) b!98144))

(assert (= (and b!98144 res!49394) b!98141))

(assert (= (and b!98142 res!49391) b!98133))

(assert (= (and b!98133 c!16652) b!98132))

(assert (= (and b!98133 (not c!16652)) b!98137))

(assert (= (and b!98132 res!49396) b!98134))

(assert (= (or b!98132 b!98137) bm!10013))

(assert (= (and b!98133 res!49392) b!98149))

(assert (= (and b!98149 c!16653) b!98145))

(assert (= (and b!98149 (not c!16653)) b!98129))

(assert (= (and b!98145 res!49393) b!98140))

(assert (= (or b!98145 b!98129) bm!10009))

(declare-fun b_lambda!4371 () Bool)

(assert (=> (not b_lambda!4371) (not b!98141)))

(assert (=> b!98141 t!5581))

(declare-fun b_and!6029 () Bool)

(assert (= b_and!6025 (and (=> t!5581 result!3283) b_and!6029)))

(assert (=> b!98141 t!5583))

(declare-fun b_and!6031 () Bool)

(assert (= b_and!6027 (and (=> t!5583 result!3285) b_and!6031)))

(assert (=> b!98136 m!106867))

(assert (=> b!98136 m!106867))

(assert (=> b!98136 m!106887))

(declare-fun m!107307 () Bool)

(assert (=> bm!10008 m!107307))

(declare-fun m!107309 () Bool)

(assert (=> b!98134 m!107309))

(assert (=> b!98135 m!106867))

(assert (=> b!98135 m!106867))

(assert (=> b!98135 m!106887))

(declare-fun m!107311 () Bool)

(assert (=> b!98130 m!107311))

(declare-fun m!107313 () Bool)

(assert (=> b!98130 m!107313))

(declare-fun m!107315 () Bool)

(assert (=> b!98130 m!107315))

(declare-fun m!107317 () Bool)

(assert (=> b!98130 m!107317))

(declare-fun m!107319 () Bool)

(assert (=> b!98130 m!107319))

(assert (=> b!98130 m!107317))

(declare-fun m!107321 () Bool)

(assert (=> b!98130 m!107321))

(declare-fun m!107323 () Bool)

(assert (=> b!98130 m!107323))

(declare-fun m!107325 () Bool)

(assert (=> b!98130 m!107325))

(assert (=> b!98130 m!107313))

(declare-fun m!107327 () Bool)

(assert (=> b!98130 m!107327))

(declare-fun m!107329 () Bool)

(assert (=> b!98130 m!107329))

(declare-fun m!107331 () Bool)

(assert (=> b!98130 m!107331))

(declare-fun m!107333 () Bool)

(assert (=> b!98130 m!107333))

(declare-fun m!107335 () Bool)

(assert (=> b!98130 m!107335))

(declare-fun m!107337 () Bool)

(assert (=> b!98130 m!107337))

(assert (=> b!98130 m!107327))

(assert (=> b!98130 m!106867))

(declare-fun m!107339 () Bool)

(assert (=> b!98130 m!107339))

(assert (=> b!98130 m!107323))

(declare-fun m!107341 () Bool)

(assert (=> b!98130 m!107341))

(declare-fun m!107343 () Bool)

(assert (=> b!98140 m!107343))

(declare-fun m!107345 () Bool)

(assert (=> bm!10009 m!107345))

(assert (=> bm!10012 m!107321))

(assert (=> d!26139 m!106929))

(assert (=> b!98144 m!106867))

(assert (=> b!98144 m!106867))

(declare-fun m!107347 () Bool)

(assert (=> b!98144 m!107347))

(declare-fun m!107349 () Bool)

(assert (=> bm!10013 m!107349))

(declare-fun m!107351 () Bool)

(assert (=> b!98148 m!107351))

(declare-fun m!107353 () Bool)

(assert (=> b!98141 m!107353))

(assert (=> b!98141 m!106939))

(declare-fun m!107355 () Bool)

(assert (=> b!98141 m!107355))

(assert (=> b!98141 m!106939))

(assert (=> b!98141 m!106867))

(assert (=> b!98141 m!106867))

(declare-fun m!107357 () Bool)

(assert (=> b!98141 m!107357))

(assert (=> b!98141 m!107353))

(assert (=> bm!9951 d!26139))

(assert (=> bm!9942 d!25999))

(declare-fun d!26141 () Bool)

(assert (=> d!26141 (= (get!1299 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97792 d!26141))

(assert (=> b!97762 d!26065))

(assert (=> b!97638 d!26067))

(declare-fun d!26143 () Bool)

(declare-fun e!63988 () Bool)

(assert (=> d!26143 e!63988))

(declare-fun res!49399 () Bool)

(assert (=> d!26143 (=> (not res!49399) (not e!63988))))

(declare-fun lt!49282 () ListLongMap!1551)

(assert (=> d!26143 (= res!49399 (contains!805 lt!49282 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun lt!49284 () List!1612)

(assert (=> d!26143 (= lt!49282 (ListLongMap!1552 lt!49284))))

(declare-fun lt!49285 () Unit!2965)

(declare-fun lt!49283 () Unit!2965)

(assert (=> d!26143 (= lt!49285 lt!49283)))

(assert (=> d!26143 (= (getValueByKey!149 lt!49284 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) (Some!154 (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26143 (= lt!49283 (lemmaContainsTupThenGetReturnValue!67 lt!49284 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26143 (= lt!49284 (insertStrictlySorted!69 (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888))) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26143 (= (+!138 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888)) (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49282)))

(declare-fun b!98150 () Bool)

(declare-fun res!49398 () Bool)

(assert (=> b!98150 (=> (not res!49398) (not e!63988))))

(assert (=> b!98150 (= res!49398 (= (getValueByKey!149 (toList!791 lt!49282) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) (Some!154 (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98151 () Bool)

(assert (=> b!98151 (= e!63988 (contains!808 (toList!791 lt!49282) (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (= (and d!26143 res!49399) b!98150))

(assert (= (and b!98150 res!49398) b!98151))

(declare-fun m!107359 () Bool)

(assert (=> d!26143 m!107359))

(declare-fun m!107361 () Bool)

(assert (=> d!26143 m!107361))

(declare-fun m!107363 () Bool)

(assert (=> d!26143 m!107363))

(declare-fun m!107365 () Bool)

(assert (=> d!26143 m!107365))

(declare-fun m!107367 () Bool)

(assert (=> b!98150 m!107367))

(declare-fun m!107369 () Bool)

(assert (=> b!98151 m!107369))

(assert (=> bm!9886 d!26143))

(declare-fun d!26145 () Bool)

(declare-fun res!49404 () Bool)

(declare-fun e!63993 () Bool)

(assert (=> d!26145 (=> res!49404 e!63993)))

(assert (=> d!26145 (= res!49404 (and ((_ is Cons!1608) (toList!791 lt!48799)) (= (_1!1186 (h!2202 (toList!791 lt!48799))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (=> d!26145 (= (containsKey!153 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) e!63993)))

(declare-fun b!98156 () Bool)

(declare-fun e!63994 () Bool)

(assert (=> b!98156 (= e!63993 e!63994)))

(declare-fun res!49405 () Bool)

(assert (=> b!98156 (=> (not res!49405) (not e!63994))))

(assert (=> b!98156 (= res!49405 (and (or (not ((_ is Cons!1608) (toList!791 lt!48799))) (bvsle (_1!1186 (h!2202 (toList!791 lt!48799))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))) ((_ is Cons!1608) (toList!791 lt!48799)) (bvslt (_1!1186 (h!2202 (toList!791 lt!48799))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(declare-fun b!98157 () Bool)

(assert (=> b!98157 (= e!63994 (containsKey!153 (t!5574 (toList!791 lt!48799)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (= (and d!26145 (not res!49404)) b!98156))

(assert (= (and b!98156 res!49405) b!98157))

(assert (=> b!98157 m!106609))

(declare-fun m!107371 () Bool)

(assert (=> b!98157 m!107371))

(assert (=> d!26003 d!26145))

(declare-fun bm!10016 () Bool)

(declare-fun call!10019 () Bool)

(assert (=> bm!10016 (= call!10019 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!98166 () Bool)

(declare-fun e!64003 () Bool)

(declare-fun e!64002 () Bool)

(assert (=> b!98166 (= e!64003 e!64002)))

(declare-fun c!16657 () Bool)

(assert (=> b!98166 (= c!16657 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98167 () Bool)

(assert (=> b!98167 (= e!64002 call!10019)))

(declare-fun b!98168 () Bool)

(declare-fun e!64001 () Bool)

(assert (=> b!98168 (= e!64002 e!64001)))

(declare-fun lt!49292 () (_ BitVec 64))

(assert (=> b!98168 (= lt!49292 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49293 () Unit!2965)

(assert (=> b!98168 (= lt!49293 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4171 newMap!16) lt!49292 #b00000000000000000000000000000000))))

(assert (=> b!98168 (arrayContainsKey!0 (_keys!4171 newMap!16) lt!49292 #b00000000000000000000000000000000)))

(declare-fun lt!49294 () Unit!2965)

(assert (=> b!98168 (= lt!49294 lt!49293)))

(declare-fun res!49411 () Bool)

(assert (=> b!98168 (= res!49411 (= (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (_keys!4171 newMap!16) (mask!6578 newMap!16)) (Found!263 #b00000000000000000000000000000000)))))

(assert (=> b!98168 (=> (not res!49411) (not e!64001))))

(declare-fun d!26147 () Bool)

(declare-fun res!49410 () Bool)

(assert (=> d!26147 (=> res!49410 e!64003)))

(assert (=> d!26147 (= res!49410 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26147 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 newMap!16) (mask!6578 newMap!16)) e!64003)))

(declare-fun b!98169 () Bool)

(assert (=> b!98169 (= e!64001 call!10019)))

(assert (= (and d!26147 (not res!49410)) b!98166))

(assert (= (and b!98166 c!16657) b!98168))

(assert (= (and b!98166 (not c!16657)) b!98167))

(assert (= (and b!98168 res!49411) b!98169))

(assert (= (or b!98169 b!98167) bm!10016))

(declare-fun m!107373 () Bool)

(assert (=> bm!10016 m!107373))

(assert (=> b!98166 m!106867))

(assert (=> b!98166 m!106867))

(assert (=> b!98166 m!106887))

(assert (=> b!98168 m!106867))

(declare-fun m!107375 () Bool)

(assert (=> b!98168 m!107375))

(declare-fun m!107377 () Bool)

(assert (=> b!98168 m!107377))

(assert (=> b!98168 m!106867))

(declare-fun m!107379 () Bool)

(assert (=> b!98168 m!107379))

(assert (=> b!97587 d!26147))

(declare-fun d!26149 () Bool)

(declare-fun e!64005 () Bool)

(assert (=> d!26149 e!64005))

(declare-fun res!49412 () Bool)

(assert (=> d!26149 (=> res!49412 e!64005)))

(declare-fun lt!49297 () Bool)

(assert (=> d!26149 (= res!49412 (not lt!49297))))

(declare-fun lt!49298 () Bool)

(assert (=> d!26149 (= lt!49297 lt!49298)))

(declare-fun lt!49295 () Unit!2965)

(declare-fun e!64004 () Unit!2965)

(assert (=> d!26149 (= lt!49295 e!64004)))

(declare-fun c!16658 () Bool)

(assert (=> d!26149 (= c!16658 lt!49298)))

(assert (=> d!26149 (= lt!49298 (containsKey!153 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26149 (= (contains!805 lt!48891 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49297)))

(declare-fun b!98170 () Bool)

(declare-fun lt!49296 () Unit!2965)

(assert (=> b!98170 (= e!64004 lt!49296)))

(assert (=> b!98170 (= lt!49296 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98170 (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98171 () Bool)

(declare-fun Unit!2988 () Unit!2965)

(assert (=> b!98171 (= e!64004 Unit!2988)))

(declare-fun b!98172 () Bool)

(assert (=> b!98172 (= e!64005 (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26149 c!16658) b!98170))

(assert (= (and d!26149 (not c!16658)) b!98171))

(assert (= (and d!26149 (not res!49412)) b!98172))

(declare-fun m!107381 () Bool)

(assert (=> d!26149 m!107381))

(declare-fun m!107383 () Bool)

(assert (=> b!98170 m!107383))

(assert (=> b!98170 m!107041))

(assert (=> b!98170 m!107041))

(declare-fun m!107385 () Bool)

(assert (=> b!98170 m!107385))

(assert (=> b!98172 m!107041))

(assert (=> b!98172 m!107041))

(assert (=> b!98172 m!107385))

(assert (=> bm!9891 d!26149))

(declare-fun mapIsEmpty!3757 () Bool)

(declare-fun mapRes!3757 () Bool)

(assert (=> mapIsEmpty!3757 mapRes!3757))

(declare-fun condMapEmpty!3757 () Bool)

(declare-fun mapDefault!3757 () ValueCell!972)

(assert (=> mapNonEmpty!3755 (= condMapEmpty!3757 (= mapRest!3755 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3757)))))

(declare-fun e!64006 () Bool)

(assert (=> mapNonEmpty!3755 (= tp!9587 (and e!64006 mapRes!3757))))

(declare-fun b!98173 () Bool)

(declare-fun e!64007 () Bool)

(assert (=> b!98173 (= e!64007 tp_is_empty!2631)))

(declare-fun b!98174 () Bool)

(assert (=> b!98174 (= e!64006 tp_is_empty!2631)))

(declare-fun mapNonEmpty!3757 () Bool)

(declare-fun tp!9589 () Bool)

(assert (=> mapNonEmpty!3757 (= mapRes!3757 (and tp!9589 e!64007))))

(declare-fun mapKey!3757 () (_ BitVec 32))

(declare-fun mapValue!3757 () ValueCell!972)

(declare-fun mapRest!3757 () (Array (_ BitVec 32) ValueCell!972))

(assert (=> mapNonEmpty!3757 (= mapRest!3755 (store mapRest!3757 mapKey!3757 mapValue!3757))))

(assert (= (and mapNonEmpty!3755 condMapEmpty!3757) mapIsEmpty!3757))

(assert (= (and mapNonEmpty!3755 (not condMapEmpty!3757)) mapNonEmpty!3757))

(assert (= (and mapNonEmpty!3757 ((_ is ValueCellFull!972) mapValue!3757)) b!98173))

(assert (= (and mapNonEmpty!3755 ((_ is ValueCellFull!972) mapDefault!3757)) b!98174))

(declare-fun m!107387 () Bool)

(assert (=> mapNonEmpty!3757 m!107387))

(declare-fun mapIsEmpty!3758 () Bool)

(declare-fun mapRes!3758 () Bool)

(assert (=> mapIsEmpty!3758 mapRes!3758))

(declare-fun condMapEmpty!3758 () Bool)

(declare-fun mapDefault!3758 () ValueCell!972)

(assert (=> mapNonEmpty!3756 (= condMapEmpty!3758 (= mapRest!3756 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3758)))))

(declare-fun e!64008 () Bool)

(assert (=> mapNonEmpty!3756 (= tp!9588 (and e!64008 mapRes!3758))))

(declare-fun b!98175 () Bool)

(declare-fun e!64009 () Bool)

(assert (=> b!98175 (= e!64009 tp_is_empty!2631)))

(declare-fun b!98176 () Bool)

(assert (=> b!98176 (= e!64008 tp_is_empty!2631)))

(declare-fun mapNonEmpty!3758 () Bool)

(declare-fun tp!9590 () Bool)

(assert (=> mapNonEmpty!3758 (= mapRes!3758 (and tp!9590 e!64009))))

(declare-fun mapValue!3758 () ValueCell!972)

(declare-fun mapRest!3758 () (Array (_ BitVec 32) ValueCell!972))

(declare-fun mapKey!3758 () (_ BitVec 32))

(assert (=> mapNonEmpty!3758 (= mapRest!3756 (store mapRest!3758 mapKey!3758 mapValue!3758))))

(assert (= (and mapNonEmpty!3756 condMapEmpty!3758) mapIsEmpty!3758))

(assert (= (and mapNonEmpty!3756 (not condMapEmpty!3758)) mapNonEmpty!3758))

(assert (= (and mapNonEmpty!3758 ((_ is ValueCellFull!972) mapValue!3758)) b!98175))

(assert (= (and mapNonEmpty!3756 ((_ is ValueCellFull!972) mapDefault!3758)) b!98176))

(declare-fun m!107389 () Bool)

(assert (=> mapNonEmpty!3758 m!107389))

(declare-fun b_lambda!4373 () Bool)

(assert (= b_lambda!4369 (or (and b!97514 b_free!2429) (and b!97516 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))))) b_lambda!4373)))

(declare-fun b_lambda!4375 () Bool)

(assert (= b_lambda!4371 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4375)))

(declare-fun b_lambda!4377 () Bool)

(assert (= b_lambda!4363 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4377)))

(declare-fun b_lambda!4379 () Bool)

(assert (= b_lambda!4365 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4379)))

(declare-fun b_lambda!4381 () Bool)

(assert (= b_lambda!4367 (or (and b!97514 b_free!2429) (and b!97516 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))))) b_lambda!4381)))

(check-sat (not d!26041) (not b!97907) (not b!98063) (not d!26065) (not bm!10016) (not b!98170) (not d!26103) (not b!97877) (not b!98092) (not b!98157) (not b!97870) (not b!98088) (not b!97929) (not b!97932) (not b!98081) (not b!97859) (not d!26035) (not b!97896) (not b!97931) (not d!26087) (not d!26123) (not b_next!2429) (not b!98014) (not d!26117) (not d!26079) (not b!97919) (not d!26131) (not bm!9999) (not b!97843) (not d!26045) (not d!26135) (not b!98125) (not b!98144) (not b!97834) (not b!98073) (not d!26113) (not b!98066) (not mapNonEmpty!3758) (not bm!10012) (not d!26149) (not b!98123) (not bm!9972) (not b!98082) (not d!26055) (not b_lambda!4381) (not bm!9969) (not b!98128) (not d!26143) (not b_next!2431) (not d!26101) (not b_lambda!4373) (not b!97876) (not bm!9975) (not bm!9980) (not b!98086) (not b!97884) (not b!98122) (not b!97940) (not d!26081) (not b!98067) (not b!97899) (not d!26043) (not d!26089) (not b!98148) (not d!26053) (not bm!10008) (not b!97864) (not d!26027) (not d!26095) (not d!26061) (not b_lambda!4377) (not bm!10000) (not d!26047) (not b!98013) (not b!98001) tp_is_empty!2631 (not b!98150) (not b!97894) (not d!26115) (not b!97925) (not d!26099) (not d!26125) (not b!97906) (not d!26129) (not b!97837) (not b_lambda!4361) (not b!97912) (not d!26023) (not b!98140) (not b!97997) (not d!26063) (not b!98091) b_and!6029 (not b!97937) (not b!98120) (not b!98119) (not b!97856) (not bm!9996) (not bm!10009) (not b!98136) (not bm!10006) (not d!26127) (not b!98064) (not b!98117) (not b!97866) (not b!98130) (not d!26073) (not d!26109) (not bm!9973) (not b!97871) (not d!26085) (not b!98061) (not d!26039) (not b!98068) (not b!97915) (not b!97998) (not b!98126) (not b!97987) (not b!98059) (not b!97901) (not b!97887) (not b!97930) (not b!97905) (not b!98121) (not d!26031) (not b!97898) (not b!97863) (not bm!10013) (not b!97892) (not b!97897) (not d!26111) (not b_lambda!4357) (not b!97911) (not b!98083) (not d!26075) (not b!97952) (not mapNonEmpty!3757) (not b_lambda!4375) (not b!97994) (not d!26119) (not d!26107) (not d!26059) (not d!26077) (not b!98074) (not b!97872) (not d!26139) (not b!98087) (not bm!9968) (not b_lambda!4379) (not b!98168) (not bm!9995) (not b!97862) (not bm!9981) (not b!98072) (not bm!9984) (not bm!10005) (not b!98141) (not b!97854) (not b!98134) (not b!98172) (not b!98032) (not bm!9979) (not d!26121) (not b!97886) (not b!98135) b_and!6031 (not d!26133) (not b!98084) (not b!97880) (not b!97857) (not b!97934) (not b!98090) (not b!98151) (not d!26105) (not d!26097) (not b!97835) (not d!26137) (not d!26091) (not b!98166) (not b!97991) (not b!98058) (not bm!9993) (not bm!9976))
(check-sat b_and!6029 b_and!6031 (not b_next!2429) (not b_next!2431))
(get-model)

(declare-fun b!98177 () Bool)

(declare-fun e!64010 () Bool)

(declare-fun call!10020 () Bool)

(assert (=> b!98177 (= e!64010 call!10020)))

(declare-fun b!98178 () Bool)

(assert (=> b!98178 (= e!64010 call!10020)))

(declare-fun d!26151 () Bool)

(declare-fun res!49414 () Bool)

(declare-fun e!64013 () Bool)

(assert (=> d!26151 (=> res!49414 e!64013)))

(assert (=> d!26151 (= res!49414 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> d!26151 (= (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16638 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608))) e!64013)))

(declare-fun b!98179 () Bool)

(declare-fun e!64011 () Bool)

(assert (=> b!98179 (= e!64013 e!64011)))

(declare-fun res!49415 () Bool)

(assert (=> b!98179 (=> (not res!49415) (not e!64011))))

(declare-fun e!64012 () Bool)

(assert (=> b!98179 (= res!49415 (not e!64012))))

(declare-fun res!49413 () Bool)

(assert (=> b!98179 (=> (not res!49413) (not e!64012))))

(assert (=> b!98179 (= res!49413 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!98180 () Bool)

(assert (=> b!98180 (= e!64011 e!64010)))

(declare-fun c!16659 () Bool)

(assert (=> b!98180 (= c!16659 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun bm!10017 () Bool)

(assert (=> bm!10017 (= call!10020 (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16659 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!16638 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608))) (ite c!16638 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)))))))

(declare-fun b!98181 () Bool)

(assert (=> b!98181 (= e!64012 (contains!807 (ite c!16638 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!26151 (not res!49414)) b!98179))

(assert (= (and b!98179 res!49413) b!98181))

(assert (= (and b!98179 res!49415) b!98180))

(assert (= (and b!98180 c!16659) b!98177))

(assert (= (and b!98180 (not c!16659)) b!98178))

(assert (= (or b!98177 b!98178) bm!10017))

(declare-fun m!107391 () Bool)

(assert (=> b!98179 m!107391))

(assert (=> b!98179 m!107391))

(declare-fun m!107393 () Bool)

(assert (=> b!98179 m!107393))

(assert (=> b!98180 m!107391))

(assert (=> b!98180 m!107391))

(assert (=> b!98180 m!107393))

(assert (=> bm!10017 m!107391))

(declare-fun m!107395 () Bool)

(assert (=> bm!10017 m!107395))

(assert (=> b!98181 m!107391))

(assert (=> b!98181 m!107391))

(declare-fun m!107397 () Bool)

(assert (=> b!98181 m!107397))

(assert (=> bm!10000 d!26151))

(declare-fun d!26153 () Bool)

(declare-fun e!64015 () Bool)

(assert (=> d!26153 e!64015))

(declare-fun res!49416 () Bool)

(assert (=> d!26153 (=> res!49416 e!64015)))

(declare-fun lt!49301 () Bool)

(assert (=> d!26153 (= res!49416 (not lt!49301))))

(declare-fun lt!49302 () Bool)

(assert (=> d!26153 (= lt!49301 lt!49302)))

(declare-fun lt!49299 () Unit!2965)

(declare-fun e!64014 () Unit!2965)

(assert (=> d!26153 (= lt!49299 e!64014)))

(declare-fun c!16660 () Bool)

(assert (=> d!26153 (= c!16660 lt!49302)))

(assert (=> d!26153 (= lt!49302 (containsKey!153 (toList!791 lt!49222) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26153 (= (contains!805 lt!49222 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49301)))

(declare-fun b!98182 () Bool)

(declare-fun lt!49300 () Unit!2965)

(assert (=> b!98182 (= e!64014 lt!49300)))

(assert (=> b!98182 (= lt!49300 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49222) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> b!98182 (isDefined!103 (getValueByKey!149 (toList!791 lt!49222) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98183 () Bool)

(declare-fun Unit!2989 () Unit!2965)

(assert (=> b!98183 (= e!64014 Unit!2989)))

(declare-fun b!98184 () Bool)

(assert (=> b!98184 (= e!64015 (isDefined!103 (getValueByKey!149 (toList!791 lt!49222) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (= (and d!26153 c!16660) b!98182))

(assert (= (and d!26153 (not c!16660)) b!98183))

(assert (= (and d!26153 (not res!49416)) b!98184))

(declare-fun m!107399 () Bool)

(assert (=> d!26153 m!107399))

(declare-fun m!107401 () Bool)

(assert (=> b!98182 m!107401))

(assert (=> b!98182 m!107211))

(assert (=> b!98182 m!107211))

(declare-fun m!107403 () Bool)

(assert (=> b!98182 m!107403))

(assert (=> b!98184 m!107211))

(assert (=> b!98184 m!107211))

(assert (=> b!98184 m!107403))

(assert (=> d!26109 d!26153))

(declare-fun b!98186 () Bool)

(declare-fun e!64016 () Option!155)

(declare-fun e!64017 () Option!155)

(assert (=> b!98186 (= e!64016 e!64017)))

(declare-fun c!16662 () Bool)

(assert (=> b!98186 (= c!16662 (and ((_ is Cons!1608) lt!49224) (not (= (_1!1186 (h!2202 lt!49224)) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98188 () Bool)

(assert (=> b!98188 (= e!64017 None!153)))

(declare-fun c!16661 () Bool)

(declare-fun d!26155 () Bool)

(assert (=> d!26155 (= c!16661 (and ((_ is Cons!1608) lt!49224) (= (_1!1186 (h!2202 lt!49224)) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26155 (= (getValueByKey!149 lt!49224 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) e!64016)))

(declare-fun b!98187 () Bool)

(assert (=> b!98187 (= e!64017 (getValueByKey!149 (t!5574 lt!49224) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98185 () Bool)

(assert (=> b!98185 (= e!64016 (Some!154 (_2!1186 (h!2202 lt!49224))))))

(assert (= (and d!26155 c!16661) b!98185))

(assert (= (and d!26155 (not c!16661)) b!98186))

(assert (= (and b!98186 c!16662) b!98187))

(assert (= (and b!98186 (not c!16662)) b!98188))

(declare-fun m!107405 () Bool)

(assert (=> b!98187 m!107405))

(assert (=> d!26109 d!26155))

(declare-fun d!26157 () Bool)

(assert (=> d!26157 (= (getValueByKey!149 lt!49224 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun lt!49305 () Unit!2965)

(declare-fun choose!605 (List!1612 (_ BitVec 64) V!3155) Unit!2965)

(assert (=> d!26157 (= lt!49305 (choose!605 lt!49224 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun e!64020 () Bool)

(assert (=> d!26157 e!64020))

(declare-fun res!49421 () Bool)

(assert (=> d!26157 (=> (not res!49421) (not e!64020))))

(assert (=> d!26157 (= res!49421 (isStrictlySorted!299 lt!49224))))

(assert (=> d!26157 (= (lemmaContainsTupThenGetReturnValue!67 lt!49224 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49305)))

(declare-fun b!98193 () Bool)

(declare-fun res!49422 () Bool)

(assert (=> b!98193 (=> (not res!49422) (not e!64020))))

(assert (=> b!98193 (= res!49422 (containsKey!153 lt!49224 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98194 () Bool)

(assert (=> b!98194 (= e!64020 (contains!808 lt!49224 (tuple2!2353 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (= (and d!26157 res!49421) b!98193))

(assert (= (and b!98193 res!49422) b!98194))

(assert (=> d!26157 m!107205))

(declare-fun m!107407 () Bool)

(assert (=> d!26157 m!107407))

(declare-fun m!107409 () Bool)

(assert (=> d!26157 m!107409))

(declare-fun m!107411 () Bool)

(assert (=> b!98193 m!107411))

(declare-fun m!107413 () Bool)

(assert (=> b!98194 m!107413))

(assert (=> d!26109 d!26157))

(declare-fun d!26159 () Bool)

(declare-fun e!64032 () Bool)

(assert (=> d!26159 e!64032))

(declare-fun res!49427 () Bool)

(assert (=> d!26159 (=> (not res!49427) (not e!64032))))

(declare-fun lt!49308 () List!1612)

(assert (=> d!26159 (= res!49427 (isStrictlySorted!299 lt!49308))))

(declare-fun e!64031 () List!1612)

(assert (=> d!26159 (= lt!49308 e!64031)))

(declare-fun c!16674 () Bool)

(assert (=> d!26159 (= c!16674 (and ((_ is Cons!1608) (toList!791 lt!48881)) (bvslt (_1!1186 (h!2202 (toList!791 lt!48881))) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26159 (isStrictlySorted!299 (toList!791 lt!48881))))

(assert (=> d!26159 (= (insertStrictlySorted!69 (toList!791 lt!48881) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49308)))

(declare-fun b!98215 () Bool)

(assert (=> b!98215 (= e!64032 (contains!808 lt!49308 (tuple2!2353 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98216 () Bool)

(declare-fun res!49428 () Bool)

(assert (=> b!98216 (=> (not res!49428) (not e!64032))))

(assert (=> b!98216 (= res!49428 (containsKey!153 lt!49308 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98217 () Bool)

(declare-fun e!64035 () List!1612)

(declare-fun call!10029 () List!1612)

(assert (=> b!98217 (= e!64035 call!10029)))

(declare-fun bm!10024 () Bool)

(declare-fun call!10028 () List!1612)

(declare-fun e!64033 () List!1612)

(declare-fun $colon$colon!77 (List!1612 tuple2!2352) List!1612)

(assert (=> bm!10024 (= call!10028 ($colon$colon!77 e!64033 (ite c!16674 (h!2202 (toList!791 lt!48881)) (tuple2!2353 (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun c!16672 () Bool)

(assert (=> bm!10024 (= c!16672 c!16674)))

(declare-fun b!98218 () Bool)

(assert (=> b!98218 (= e!64033 (insertStrictlySorted!69 (t!5574 (toList!791 lt!48881)) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun c!16671 () Bool)

(declare-fun c!16673 () Bool)

(declare-fun b!98219 () Bool)

(assert (=> b!98219 (= e!64033 (ite c!16671 (t!5574 (toList!791 lt!48881)) (ite c!16673 (Cons!1608 (h!2202 (toList!791 lt!48881)) (t!5574 (toList!791 lt!48881))) Nil!1609)))))

(declare-fun b!98220 () Bool)

(assert (=> b!98220 (= c!16673 (and ((_ is Cons!1608) (toList!791 lt!48881)) (bvsgt (_1!1186 (h!2202 (toList!791 lt!48881))) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun e!64034 () List!1612)

(assert (=> b!98220 (= e!64035 e!64034)))

(declare-fun bm!10025 () Bool)

(declare-fun call!10027 () List!1612)

(assert (=> bm!10025 (= call!10027 call!10029)))

(declare-fun b!98221 () Bool)

(assert (=> b!98221 (= e!64031 e!64035)))

(assert (=> b!98221 (= c!16671 (and ((_ is Cons!1608) (toList!791 lt!48881)) (= (_1!1186 (h!2202 (toList!791 lt!48881))) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98222 () Bool)

(assert (=> b!98222 (= e!64031 call!10028)))

(declare-fun b!98223 () Bool)

(assert (=> b!98223 (= e!64034 call!10027)))

(declare-fun bm!10026 () Bool)

(assert (=> bm!10026 (= call!10029 call!10028)))

(declare-fun b!98224 () Bool)

(assert (=> b!98224 (= e!64034 call!10027)))

(assert (= (and d!26159 c!16674) b!98222))

(assert (= (and d!26159 (not c!16674)) b!98221))

(assert (= (and b!98221 c!16671) b!98217))

(assert (= (and b!98221 (not c!16671)) b!98220))

(assert (= (and b!98220 c!16673) b!98223))

(assert (= (and b!98220 (not c!16673)) b!98224))

(assert (= (or b!98223 b!98224) bm!10025))

(assert (= (or b!98217 bm!10025) bm!10026))

(assert (= (or b!98222 bm!10026) bm!10024))

(assert (= (and bm!10024 c!16672) b!98218))

(assert (= (and bm!10024 (not c!16672)) b!98219))

(assert (= (and d!26159 res!49427) b!98216))

(assert (= (and b!98216 res!49428) b!98215))

(declare-fun m!107415 () Bool)

(assert (=> bm!10024 m!107415))

(declare-fun m!107417 () Bool)

(assert (=> b!98215 m!107417))

(declare-fun m!107419 () Bool)

(assert (=> d!26159 m!107419))

(declare-fun m!107421 () Bool)

(assert (=> d!26159 m!107421))

(declare-fun m!107423 () Bool)

(assert (=> b!98216 m!107423))

(declare-fun m!107425 () Bool)

(assert (=> b!98218 m!107425))

(assert (=> d!26109 d!26159))

(assert (=> d!26099 d!26121))

(assert (=> d!26099 d!26109))

(declare-fun d!26161 () Bool)

(assert (=> d!26161 (contains!805 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48874)))

(assert (=> d!26161 true))

(declare-fun _$35!339 () Unit!2965)

(assert (=> d!26161 (= (choose!602 lt!48881 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48874) _$35!339)))

(declare-fun bs!4042 () Bool)

(assert (= bs!4042 d!26161))

(assert (=> bs!4042 m!106709))

(assert (=> bs!4042 m!106709))

(assert (=> bs!4042 m!106727))

(assert (=> d!26099 d!26161))

(declare-fun d!26163 () Bool)

(declare-fun e!64037 () Bool)

(assert (=> d!26163 e!64037))

(declare-fun res!49429 () Bool)

(assert (=> d!26163 (=> res!49429 e!64037)))

(declare-fun lt!49311 () Bool)

(assert (=> d!26163 (= res!49429 (not lt!49311))))

(declare-fun lt!49312 () Bool)

(assert (=> d!26163 (= lt!49311 lt!49312)))

(declare-fun lt!49309 () Unit!2965)

(declare-fun e!64036 () Unit!2965)

(assert (=> d!26163 (= lt!49309 e!64036)))

(declare-fun c!16675 () Bool)

(assert (=> d!26163 (= c!16675 lt!49312)))

(assert (=> d!26163 (= lt!49312 (containsKey!153 (toList!791 lt!48881) lt!48874))))

(assert (=> d!26163 (= (contains!805 lt!48881 lt!48874) lt!49311)))

(declare-fun b!98226 () Bool)

(declare-fun lt!49310 () Unit!2965)

(assert (=> b!98226 (= e!64036 lt!49310)))

(assert (=> b!98226 (= lt!49310 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48881) lt!48874))))

(assert (=> b!98226 (isDefined!103 (getValueByKey!149 (toList!791 lt!48881) lt!48874))))

(declare-fun b!98227 () Bool)

(declare-fun Unit!2990 () Unit!2965)

(assert (=> b!98227 (= e!64036 Unit!2990)))

(declare-fun b!98228 () Bool)

(assert (=> b!98228 (= e!64037 (isDefined!103 (getValueByKey!149 (toList!791 lt!48881) lt!48874)))))

(assert (= (and d!26163 c!16675) b!98226))

(assert (= (and d!26163 (not c!16675)) b!98227))

(assert (= (and d!26163 (not res!49429)) b!98228))

(declare-fun m!107427 () Bool)

(assert (=> d!26163 m!107427))

(declare-fun m!107429 () Bool)

(assert (=> b!98226 m!107429))

(declare-fun m!107431 () Bool)

(assert (=> b!98226 m!107431))

(assert (=> b!98226 m!107431))

(declare-fun m!107433 () Bool)

(assert (=> b!98226 m!107433))

(assert (=> b!98228 m!107431))

(assert (=> b!98228 m!107431))

(assert (=> b!98228 m!107433))

(assert (=> d!26099 d!26163))

(declare-fun d!26165 () Bool)

(assert (=> d!26165 (= (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97930 d!26165))

(declare-fun d!26167 () Bool)

(assert (=> d!26167 (= (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48892)) (v!2805 (getValueByKey!149 (toList!791 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48892)))))

(assert (=> d!26117 d!26167))

(declare-fun b!98230 () Bool)

(declare-fun e!64038 () Option!155)

(declare-fun e!64039 () Option!155)

(assert (=> b!98230 (= e!64038 e!64039)))

(declare-fun c!16677 () Bool)

(assert (=> b!98230 (= c!16677 (and ((_ is Cons!1608) (toList!791 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) (not (= (_1!1186 (h!2202 (toList!791 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))) lt!48892))))))

(declare-fun b!98232 () Bool)

(assert (=> b!98232 (= e!64039 None!153)))

(declare-fun d!26169 () Bool)

(declare-fun c!16676 () Bool)

(assert (=> d!26169 (= c!16676 (and ((_ is Cons!1608) (toList!791 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) (= (_1!1186 (h!2202 (toList!791 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))) lt!48892)))))

(assert (=> d!26169 (= (getValueByKey!149 (toList!791 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48892) e!64038)))

(declare-fun b!98231 () Bool)

(assert (=> b!98231 (= e!64039 (getValueByKey!149 (t!5574 (toList!791 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) lt!48892))))

(declare-fun b!98229 () Bool)

(assert (=> b!98229 (= e!64038 (Some!154 (_2!1186 (h!2202 (toList!791 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))))

(assert (= (and d!26169 c!16676) b!98229))

(assert (= (and d!26169 (not c!16676)) b!98230))

(assert (= (and b!98230 c!16677) b!98231))

(assert (= (and b!98230 (not c!16677)) b!98232))

(declare-fun m!107435 () Bool)

(assert (=> b!98231 m!107435))

(assert (=> d!26117 d!26169))

(declare-fun d!26171 () Bool)

(declare-fun e!64040 () Bool)

(assert (=> d!26171 e!64040))

(declare-fun res!49431 () Bool)

(assert (=> d!26171 (=> (not res!49431) (not e!64040))))

(declare-fun lt!49313 () ListLongMap!1551)

(assert (=> d!26171 (= res!49431 (contains!805 lt!49313 (_1!1186 (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(declare-fun lt!49315 () List!1612)

(assert (=> d!26171 (= lt!49313 (ListLongMap!1552 lt!49315))))

(declare-fun lt!49316 () Unit!2965)

(declare-fun lt!49314 () Unit!2965)

(assert (=> d!26171 (= lt!49316 lt!49314)))

(assert (=> d!26171 (= (getValueByKey!149 lt!49315 (_1!1186 (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))) (Some!154 (_2!1186 (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26171 (= lt!49314 (lemmaContainsTupThenGetReturnValue!67 lt!49315 (_1!1186 (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (_2!1186 (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26171 (= lt!49315 (insertStrictlySorted!69 (toList!791 (ite c!16649 call!10012 (ite c!16654 call!10015 call!10010))) (_1!1186 (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (_2!1186 (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26171 (= (+!138 (ite c!16649 call!10012 (ite c!16654 call!10015 call!10010)) (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) lt!49313)))

(declare-fun b!98233 () Bool)

(declare-fun res!49430 () Bool)

(assert (=> b!98233 (=> (not res!49430) (not e!64040))))

(assert (=> b!98233 (= res!49430 (= (getValueByKey!149 (toList!791 lt!49313) (_1!1186 (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))) (Some!154 (_2!1186 (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))))

(declare-fun b!98234 () Bool)

(assert (=> b!98234 (= e!64040 (contains!808 (toList!791 lt!49313) (ite (or c!16649 c!16654) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (= (and d!26171 res!49431) b!98233))

(assert (= (and b!98233 res!49430) b!98234))

(declare-fun m!107437 () Bool)

(assert (=> d!26171 m!107437))

(declare-fun m!107439 () Bool)

(assert (=> d!26171 m!107439))

(declare-fun m!107441 () Bool)

(assert (=> d!26171 m!107441))

(declare-fun m!107443 () Bool)

(assert (=> d!26171 m!107443))

(declare-fun m!107445 () Bool)

(assert (=> b!98233 m!107445))

(declare-fun m!107447 () Bool)

(assert (=> b!98234 m!107447))

(assert (=> bm!10008 d!26171))

(declare-fun d!26173 () Bool)

(assert (=> d!26173 (= (apply!92 lt!49041 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1300 (getValueByKey!149 (toList!791 lt!49041) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4043 () Bool)

(assert (= bs!4043 d!26173))

(declare-fun m!107449 () Bool)

(assert (=> bs!4043 m!107449))

(assert (=> bs!4043 m!107449))

(declare-fun m!107451 () Bool)

(assert (=> bs!4043 m!107451))

(assert (=> b!97876 d!26173))

(declare-fun d!26175 () Bool)

(assert (=> d!26175 (= (get!1298 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2800 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!97886 d!26175))

(declare-fun d!26177 () Bool)

(declare-fun res!49432 () Bool)

(declare-fun e!64041 () Bool)

(assert (=> d!26177 (=> res!49432 e!64041)))

(assert (=> d!26177 (= res!49432 (and ((_ is Cons!1608) (toList!791 e!63752)) (= (_1!1186 (h!2202 (toList!791 e!63752))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (=> d!26177 (= (containsKey!153 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) e!64041)))

(declare-fun b!98235 () Bool)

(declare-fun e!64042 () Bool)

(assert (=> b!98235 (= e!64041 e!64042)))

(declare-fun res!49433 () Bool)

(assert (=> b!98235 (=> (not res!49433) (not e!64042))))

(assert (=> b!98235 (= res!49433 (and (or (not ((_ is Cons!1608) (toList!791 e!63752))) (bvsle (_1!1186 (h!2202 (toList!791 e!63752))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))) ((_ is Cons!1608) (toList!791 e!63752)) (bvslt (_1!1186 (h!2202 (toList!791 e!63752))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(declare-fun b!98236 () Bool)

(assert (=> b!98236 (= e!64042 (containsKey!153 (t!5574 (toList!791 e!63752)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (= (and d!26177 (not res!49432)) b!98235))

(assert (= (and b!98235 res!49433) b!98236))

(assert (=> b!98236 m!106609))

(declare-fun m!107453 () Bool)

(assert (=> b!98236 m!107453))

(assert (=> d!26135 d!26177))

(declare-fun d!26179 () Bool)

(declare-fun res!49434 () Bool)

(declare-fun e!64043 () Bool)

(assert (=> d!26179 (=> res!49434 e!64043)))

(assert (=> d!26179 (= res!49434 (and ((_ is Cons!1608) (toList!791 lt!48891)) (= (_1!1186 (h!2202 (toList!791 lt!48891))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26179 (= (containsKey!153 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000) e!64043)))

(declare-fun b!98237 () Bool)

(declare-fun e!64044 () Bool)

(assert (=> b!98237 (= e!64043 e!64044)))

(declare-fun res!49435 () Bool)

(assert (=> b!98237 (=> (not res!49435) (not e!64044))))

(assert (=> b!98237 (= res!49435 (and (or (not ((_ is Cons!1608) (toList!791 lt!48891))) (bvsle (_1!1186 (h!2202 (toList!791 lt!48891))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1608) (toList!791 lt!48891)) (bvslt (_1!1186 (h!2202 (toList!791 lt!48891))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98238 () Bool)

(assert (=> b!98238 (= e!64044 (containsKey!153 (t!5574 (toList!791 lt!48891)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26179 (not res!49434)) b!98237))

(assert (= (and b!98237 res!49435) b!98238))

(declare-fun m!107455 () Bool)

(assert (=> b!98238 m!107455))

(assert (=> d!26137 d!26179))

(declare-fun d!26181 () Bool)

(declare-fun e!64045 () Bool)

(assert (=> d!26181 e!64045))

(declare-fun res!49437 () Bool)

(assert (=> d!26181 (=> (not res!49437) (not e!64045))))

(declare-fun lt!49317 () ListLongMap!1551)

(assert (=> d!26181 (= res!49437 (contains!805 lt!49317 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49319 () List!1612)

(assert (=> d!26181 (= lt!49317 (ListLongMap!1552 lt!49319))))

(declare-fun lt!49320 () Unit!2965)

(declare-fun lt!49318 () Unit!2965)

(assert (=> d!26181 (= lt!49320 lt!49318)))

(assert (=> d!26181 (= (getValueByKey!149 lt!49319 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26181 (= lt!49318 (lemmaContainsTupThenGetReturnValue!67 lt!49319 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26181 (= lt!49319 (insertStrictlySorted!69 (toList!791 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26181 (= (+!138 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49317)))

(declare-fun b!98239 () Bool)

(declare-fun res!49436 () Bool)

(assert (=> b!98239 (=> (not res!49436) (not e!64045))))

(assert (=> b!98239 (= res!49436 (= (getValueByKey!149 (toList!791 lt!49317) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98240 () Bool)

(assert (=> b!98240 (= e!64045 (contains!808 (toList!791 lt!49317) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26181 res!49437) b!98239))

(assert (= (and b!98239 res!49436) b!98240))

(declare-fun m!107457 () Bool)

(assert (=> d!26181 m!107457))

(declare-fun m!107459 () Bool)

(assert (=> d!26181 m!107459))

(declare-fun m!107461 () Bool)

(assert (=> d!26181 m!107461))

(declare-fun m!107463 () Bool)

(assert (=> d!26181 m!107463))

(declare-fun m!107465 () Bool)

(assert (=> b!98239 m!107465))

(declare-fun m!107467 () Bool)

(assert (=> b!98240 m!107467))

(assert (=> d!26127 d!26181))

(declare-fun d!26183 () Bool)

(assert (=> d!26183 (= (+!138 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(assert (=> d!26183 true))

(declare-fun _$8!85 () Unit!2965)

(assert (=> d!26183 (= (choose!603 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)) _$8!85)))

(declare-fun bs!4044 () Bool)

(assert (= bs!4044 d!26183))

(assert (=> bs!4044 m!106687))

(assert (=> bs!4044 m!106687))

(assert (=> bs!4044 m!107269))

(assert (=> bs!4044 m!106607))

(assert (=> bs!4044 m!107267))

(assert (=> d!26127 d!26183))

(assert (=> d!26127 d!26065))

(declare-fun d!26185 () Bool)

(assert (=> d!26185 (= (validMask!0 (mask!6578 newMap!16)) (and (or (= (mask!6578 newMap!16) #b00000000000000000000000000000111) (= (mask!6578 newMap!16) #b00000000000000000000000000001111) (= (mask!6578 newMap!16) #b00000000000000000000000000011111) (= (mask!6578 newMap!16) #b00000000000000000000000000111111) (= (mask!6578 newMap!16) #b00000000000000000000000001111111) (= (mask!6578 newMap!16) #b00000000000000000000000011111111) (= (mask!6578 newMap!16) #b00000000000000000000000111111111) (= (mask!6578 newMap!16) #b00000000000000000000001111111111) (= (mask!6578 newMap!16) #b00000000000000000000011111111111) (= (mask!6578 newMap!16) #b00000000000000000000111111111111) (= (mask!6578 newMap!16) #b00000000000000000001111111111111) (= (mask!6578 newMap!16) #b00000000000000000011111111111111) (= (mask!6578 newMap!16) #b00000000000000000111111111111111) (= (mask!6578 newMap!16) #b00000000000000001111111111111111) (= (mask!6578 newMap!16) #b00000000000000011111111111111111) (= (mask!6578 newMap!16) #b00000000000000111111111111111111) (= (mask!6578 newMap!16) #b00000000000001111111111111111111) (= (mask!6578 newMap!16) #b00000000000011111111111111111111) (= (mask!6578 newMap!16) #b00000000000111111111111111111111) (= (mask!6578 newMap!16) #b00000000001111111111111111111111) (= (mask!6578 newMap!16) #b00000000011111111111111111111111) (= (mask!6578 newMap!16) #b00000000111111111111111111111111) (= (mask!6578 newMap!16) #b00000001111111111111111111111111) (= (mask!6578 newMap!16) #b00000011111111111111111111111111) (= (mask!6578 newMap!16) #b00000111111111111111111111111111) (= (mask!6578 newMap!16) #b00001111111111111111111111111111) (= (mask!6578 newMap!16) #b00011111111111111111111111111111) (= (mask!6578 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!6578 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!26127 d!26185))

(declare-fun b!98241 () Bool)

(declare-fun e!64052 () Bool)

(declare-fun call!10036 () Bool)

(assert (=> b!98241 (= e!64052 (not call!10036))))

(declare-fun b!98242 () Bool)

(declare-fun e!64054 () Unit!2965)

(declare-fun lt!49340 () Unit!2965)

(assert (=> b!98242 (= e!64054 lt!49340)))

(declare-fun lt!49331 () ListLongMap!1551)

(assert (=> b!98242 (= lt!49331 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49327 () (_ BitVec 64))

(assert (=> b!98242 (= lt!49327 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49324 () (_ BitVec 64))

(assert (=> b!98242 (= lt!49324 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49329 () Unit!2965)

(assert (=> b!98242 (= lt!49329 (addStillContains!68 lt!49331 lt!49327 (zeroValue!2364 newMap!16) lt!49324))))

(assert (=> b!98242 (contains!805 (+!138 lt!49331 (tuple2!2353 lt!49327 (zeroValue!2364 newMap!16))) lt!49324)))

(declare-fun lt!49335 () Unit!2965)

(assert (=> b!98242 (= lt!49335 lt!49329)))

(declare-fun lt!49333 () ListLongMap!1551)

(assert (=> b!98242 (= lt!49333 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49337 () (_ BitVec 64))

(assert (=> b!98242 (= lt!49337 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49342 () (_ BitVec 64))

(assert (=> b!98242 (= lt!49342 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49322 () Unit!2965)

(assert (=> b!98242 (= lt!49322 (addApplyDifferent!68 lt!49333 lt!49337 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49342))))

(assert (=> b!98242 (= (apply!92 (+!138 lt!49333 (tuple2!2353 lt!49337 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49342) (apply!92 lt!49333 lt!49342))))

(declare-fun lt!49334 () Unit!2965)

(assert (=> b!98242 (= lt!49334 lt!49322)))

(declare-fun lt!49339 () ListLongMap!1551)

(assert (=> b!98242 (= lt!49339 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49336 () (_ BitVec 64))

(assert (=> b!98242 (= lt!49336 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49323 () (_ BitVec 64))

(assert (=> b!98242 (= lt!49323 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49326 () Unit!2965)

(assert (=> b!98242 (= lt!49326 (addApplyDifferent!68 lt!49339 lt!49336 (zeroValue!2364 newMap!16) lt!49323))))

(assert (=> b!98242 (= (apply!92 (+!138 lt!49339 (tuple2!2353 lt!49336 (zeroValue!2364 newMap!16))) lt!49323) (apply!92 lt!49339 lt!49323))))

(declare-fun lt!49321 () Unit!2965)

(assert (=> b!98242 (= lt!49321 lt!49326)))

(declare-fun lt!49338 () ListLongMap!1551)

(assert (=> b!98242 (= lt!49338 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49332 () (_ BitVec 64))

(assert (=> b!98242 (= lt!49332 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49325 () (_ BitVec 64))

(assert (=> b!98242 (= lt!49325 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98242 (= lt!49340 (addApplyDifferent!68 lt!49338 lt!49332 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49325))))

(assert (=> b!98242 (= (apply!92 (+!138 lt!49338 (tuple2!2353 lt!49332 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49325) (apply!92 lt!49338 lt!49325))))

(declare-fun b!98243 () Bool)

(declare-fun e!64053 () ListLongMap!1551)

(declare-fun call!10031 () ListLongMap!1551)

(assert (=> b!98243 (= e!64053 call!10031)))

(declare-fun bm!10027 () Bool)

(declare-fun call!10034 () ListLongMap!1551)

(assert (=> bm!10027 (= call!10031 call!10034)))

(declare-fun b!98244 () Bool)

(declare-fun e!64048 () Bool)

(declare-fun e!64049 () Bool)

(assert (=> b!98244 (= e!64048 e!64049)))

(declare-fun res!49445 () Bool)

(declare-fun call!10033 () Bool)

(assert (=> b!98244 (= res!49445 call!10033)))

(assert (=> b!98244 (=> (not res!49445) (not e!64049))))

(declare-fun b!98245 () Bool)

(declare-fun res!49441 () Bool)

(declare-fun e!64051 () Bool)

(assert (=> b!98245 (=> (not res!49441) (not e!64051))))

(assert (=> b!98245 (= res!49441 e!64048)))

(declare-fun c!16681 () Bool)

(assert (=> b!98245 (= c!16681 (not (= (bvand lt!48973 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26187 () Bool)

(assert (=> d!26187 e!64051))

(declare-fun res!49438 () Bool)

(assert (=> d!26187 (=> (not res!49438) (not e!64051))))

(assert (=> d!26187 (= res!49438 (or (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))))

(declare-fun lt!49341 () ListLongMap!1551)

(declare-fun lt!49330 () ListLongMap!1551)

(assert (=> d!26187 (= lt!49341 lt!49330)))

(declare-fun lt!49328 () Unit!2965)

(assert (=> d!26187 (= lt!49328 e!64054)))

(declare-fun c!16679 () Bool)

(declare-fun e!64050 () Bool)

(assert (=> d!26187 (= c!16679 e!64050)))

(declare-fun res!49439 () Bool)

(assert (=> d!26187 (=> (not res!49439) (not e!64050))))

(assert (=> d!26187 (= res!49439 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun e!64057 () ListLongMap!1551)

(assert (=> d!26187 (= lt!49330 e!64057)))

(declare-fun c!16678 () Bool)

(assert (=> d!26187 (= c!16678 (and (not (= (bvand lt!48973 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!48973 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26187 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26187 (= (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49341)))

(declare-fun b!98246 () Bool)

(assert (=> b!98246 (= e!64049 (= (apply!92 lt!49341 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun bm!10028 () Bool)

(declare-fun call!10032 () ListLongMap!1551)

(declare-fun call!10030 () ListLongMap!1551)

(declare-fun call!10035 () ListLongMap!1551)

(declare-fun c!16683 () Bool)

(assert (=> bm!10028 (= call!10034 (+!138 (ite c!16678 call!10032 (ite c!16683 call!10035 call!10030)) (ite (or c!16678 c!16683) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98247 () Bool)

(assert (=> b!98247 (= e!64050 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98248 () Bool)

(declare-fun e!64058 () Bool)

(assert (=> b!98248 (= e!64058 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98249 () Bool)

(assert (=> b!98249 (= e!64048 (not call!10033))))

(declare-fun b!98250 () Bool)

(declare-fun e!64046 () ListLongMap!1551)

(assert (=> b!98250 (= e!64046 call!10031)))

(declare-fun b!98251 () Bool)

(assert (=> b!98251 (= e!64057 e!64053)))

(assert (=> b!98251 (= c!16683 (and (not (= (bvand lt!48973 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!48973 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10029 () Bool)

(assert (=> bm!10029 (= call!10036 (contains!805 lt!49341 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98252 () Bool)

(declare-fun e!64047 () Bool)

(assert (=> b!98252 (= e!64047 (= (apply!92 lt!49341 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98253 () Bool)

(declare-fun e!64056 () Bool)

(assert (=> b!98253 (= e!64056 (= (apply!92 lt!49341 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98253 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_values!2464 newMap!16))))))

(assert (=> b!98253 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98254 () Bool)

(declare-fun res!49440 () Bool)

(assert (=> b!98254 (=> (not res!49440) (not e!64051))))

(declare-fun e!64055 () Bool)

(assert (=> b!98254 (= res!49440 e!64055)))

(declare-fun res!49444 () Bool)

(assert (=> b!98254 (=> res!49444 e!64055)))

(assert (=> b!98254 (= res!49444 (not e!64058))))

(declare-fun res!49446 () Bool)

(assert (=> b!98254 (=> (not res!49446) (not e!64058))))

(assert (=> b!98254 (= res!49446 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98255 () Bool)

(assert (=> b!98255 (= e!64046 call!10030)))

(declare-fun b!98256 () Bool)

(assert (=> b!98256 (= e!64055 e!64056)))

(declare-fun res!49443 () Bool)

(assert (=> b!98256 (=> (not res!49443) (not e!64056))))

(assert (=> b!98256 (= res!49443 (contains!805 lt!49341 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98256 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun bm!10030 () Bool)

(assert (=> bm!10030 (= call!10035 call!10032)))

(declare-fun b!98257 () Bool)

(assert (=> b!98257 (= e!64052 e!64047)))

(declare-fun res!49442 () Bool)

(assert (=> b!98257 (= res!49442 call!10036)))

(assert (=> b!98257 (=> (not res!49442) (not e!64047))))

(declare-fun bm!10031 () Bool)

(assert (=> bm!10031 (= call!10030 call!10035)))

(declare-fun b!98258 () Bool)

(declare-fun Unit!2991 () Unit!2965)

(assert (=> b!98258 (= e!64054 Unit!2991)))

(declare-fun b!98259 () Bool)

(declare-fun c!16680 () Bool)

(assert (=> b!98259 (= c!16680 (and (not (= (bvand lt!48973 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!48973 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98259 (= e!64053 e!64046)))

(declare-fun bm!10032 () Bool)

(assert (=> bm!10032 (= call!10032 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48973 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!98260 () Bool)

(assert (=> b!98260 (= e!64057 (+!138 call!10034 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!10033 () Bool)

(assert (=> bm!10033 (= call!10033 (contains!805 lt!49341 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98261 () Bool)

(assert (=> b!98261 (= e!64051 e!64052)))

(declare-fun c!16682 () Bool)

(assert (=> b!98261 (= c!16682 (not (= (bvand lt!48973 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26187 c!16678) b!98260))

(assert (= (and d!26187 (not c!16678)) b!98251))

(assert (= (and b!98251 c!16683) b!98243))

(assert (= (and b!98251 (not c!16683)) b!98259))

(assert (= (and b!98259 c!16680) b!98250))

(assert (= (and b!98259 (not c!16680)) b!98255))

(assert (= (or b!98250 b!98255) bm!10031))

(assert (= (or b!98243 bm!10031) bm!10030))

(assert (= (or b!98243 b!98250) bm!10027))

(assert (= (or b!98260 bm!10030) bm!10032))

(assert (= (or b!98260 bm!10027) bm!10028))

(assert (= (and d!26187 res!49439) b!98247))

(assert (= (and d!26187 c!16679) b!98242))

(assert (= (and d!26187 (not c!16679)) b!98258))

(assert (= (and d!26187 res!49438) b!98254))

(assert (= (and b!98254 res!49446) b!98248))

(assert (= (and b!98254 (not res!49444)) b!98256))

(assert (= (and b!98256 res!49443) b!98253))

(assert (= (and b!98254 res!49440) b!98245))

(assert (= (and b!98245 c!16681) b!98244))

(assert (= (and b!98245 (not c!16681)) b!98249))

(assert (= (and b!98244 res!49445) b!98246))

(assert (= (or b!98244 b!98249) bm!10033))

(assert (= (and b!98245 res!49441) b!98261))

(assert (= (and b!98261 c!16682) b!98257))

(assert (= (and b!98261 (not c!16682)) b!98241))

(assert (= (and b!98257 res!49442) b!98252))

(assert (= (or b!98257 b!98241) bm!10029))

(declare-fun b_lambda!4383 () Bool)

(assert (=> (not b_lambda!4383) (not b!98253)))

(assert (=> b!98253 t!5581))

(declare-fun b_and!6033 () Bool)

(assert (= b_and!6029 (and (=> t!5581 result!3283) b_and!6033)))

(assert (=> b!98253 t!5583))

(declare-fun b_and!6035 () Bool)

(assert (= b_and!6031 (and (=> t!5583 result!3285) b_and!6035)))

(assert (=> b!98248 m!106867))

(assert (=> b!98248 m!106867))

(assert (=> b!98248 m!106887))

(declare-fun m!107469 () Bool)

(assert (=> bm!10028 m!107469))

(declare-fun m!107471 () Bool)

(assert (=> b!98246 m!107471))

(assert (=> b!98247 m!106867))

(assert (=> b!98247 m!106867))

(assert (=> b!98247 m!106887))

(declare-fun m!107473 () Bool)

(assert (=> b!98242 m!107473))

(declare-fun m!107475 () Bool)

(assert (=> b!98242 m!107475))

(declare-fun m!107477 () Bool)

(assert (=> b!98242 m!107477))

(declare-fun m!107479 () Bool)

(assert (=> b!98242 m!107479))

(declare-fun m!107481 () Bool)

(assert (=> b!98242 m!107481))

(assert (=> b!98242 m!107479))

(assert (=> b!98242 m!106607))

(declare-fun m!107483 () Bool)

(assert (=> b!98242 m!107483))

(declare-fun m!107485 () Bool)

(assert (=> b!98242 m!107485))

(assert (=> b!98242 m!106607))

(declare-fun m!107487 () Bool)

(assert (=> b!98242 m!107487))

(assert (=> b!98242 m!107475))

(declare-fun m!107489 () Bool)

(assert (=> b!98242 m!107489))

(declare-fun m!107491 () Bool)

(assert (=> b!98242 m!107491))

(declare-fun m!107493 () Bool)

(assert (=> b!98242 m!107493))

(declare-fun m!107495 () Bool)

(assert (=> b!98242 m!107495))

(declare-fun m!107497 () Bool)

(assert (=> b!98242 m!107497))

(declare-fun m!107499 () Bool)

(assert (=> b!98242 m!107499))

(assert (=> b!98242 m!107489))

(assert (=> b!98242 m!106867))

(assert (=> b!98242 m!106607))

(declare-fun m!107501 () Bool)

(assert (=> b!98242 m!107501))

(assert (=> b!98242 m!107485))

(declare-fun m!107503 () Bool)

(assert (=> b!98242 m!107503))

(declare-fun m!107505 () Bool)

(assert (=> b!98252 m!107505))

(declare-fun m!107507 () Bool)

(assert (=> bm!10029 m!107507))

(assert (=> bm!10032 m!106607))

(assert (=> bm!10032 m!107483))

(assert (=> d!26187 m!106929))

(assert (=> b!98256 m!106867))

(assert (=> b!98256 m!106867))

(declare-fun m!107509 () Bool)

(assert (=> b!98256 m!107509))

(declare-fun m!107511 () Bool)

(assert (=> bm!10033 m!107511))

(declare-fun m!107513 () Bool)

(assert (=> b!98260 m!107513))

(assert (=> b!98253 m!107025))

(assert (=> b!98253 m!106939))

(assert (=> b!98253 m!107027))

(assert (=> b!98253 m!106939))

(assert (=> b!98253 m!106867))

(assert (=> b!98253 m!106867))

(declare-fun m!107515 () Bool)

(assert (=> b!98253 m!107515))

(assert (=> b!98253 m!107025))

(assert (=> d!26127 d!26187))

(declare-fun d!26189 () Bool)

(assert (=> d!26189 (contains!805 (getCurrentListMap!472 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985)))))

(assert (=> d!26189 true))

(declare-fun _$16!117 () Unit!2965)

(assert (=> d!26189 (= (choose!599 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3196 lt!48985) (defaultEntry!2481 newMap!16)) _$16!117)))

(declare-fun bs!4045 () Bool)

(assert (= bs!4045 d!26189))

(assert (=> bs!4045 m!107055))

(assert (=> bs!4045 m!106777))

(assert (=> bs!4045 m!107055))

(assert (=> bs!4045 m!106777))

(assert (=> bs!4045 m!107057))

(assert (=> d!26079 d!26189))

(assert (=> d!26079 d!26185))

(declare-fun d!26191 () Bool)

(declare-fun res!49447 () Bool)

(declare-fun e!64059 () Bool)

(assert (=> d!26191 (=> res!49447 e!64059)))

(assert (=> d!26191 (= res!49447 (and ((_ is Cons!1608) (toList!791 call!9966)) (= (_1!1186 (h!2202 (toList!791 call!9966))) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985)))))))

(assert (=> d!26191 (= (containsKey!153 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))) e!64059)))

(declare-fun b!98262 () Bool)

(declare-fun e!64060 () Bool)

(assert (=> b!98262 (= e!64059 e!64060)))

(declare-fun res!49448 () Bool)

(assert (=> b!98262 (=> (not res!49448) (not e!64060))))

(assert (=> b!98262 (= res!49448 (and (or (not ((_ is Cons!1608) (toList!791 call!9966))) (bvsle (_1!1186 (h!2202 (toList!791 call!9966))) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985)))) ((_ is Cons!1608) (toList!791 call!9966)) (bvslt (_1!1186 (h!2202 (toList!791 call!9966))) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985)))))))

(declare-fun b!98263 () Bool)

(assert (=> b!98263 (= e!64060 (containsKey!153 (t!5574 (toList!791 call!9966)) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(assert (= (and d!26191 (not res!49447)) b!98262))

(assert (= (and b!98262 res!49448) b!98263))

(assert (=> b!98263 m!106777))

(declare-fun m!107517 () Bool)

(assert (=> b!98263 m!107517))

(assert (=> d!26077 d!26191))

(assert (=> bm!9993 d!26037))

(declare-fun d!26193 () Bool)

(assert (=> d!26193 (= (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!361 (getValueByKey!149 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!4046 () Bool)

(assert (= bs!4046 d!26193))

(assert (=> bs!4046 m!106945))

(declare-fun m!107519 () Bool)

(assert (=> bs!4046 m!107519))

(assert (=> b!98119 d!26193))

(declare-fun b!98265 () Bool)

(declare-fun e!64061 () Option!155)

(declare-fun e!64062 () Option!155)

(assert (=> b!98265 (= e!64061 e!64062)))

(declare-fun c!16685 () Bool)

(assert (=> b!98265 (= c!16685 (and ((_ is Cons!1608) (toList!791 lt!48891)) (not (= (_1!1186 (h!2202 (toList!791 lt!48891))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!98267 () Bool)

(assert (=> b!98267 (= e!64062 None!153)))

(declare-fun c!16684 () Bool)

(declare-fun d!26195 () Bool)

(assert (=> d!26195 (= c!16684 (and ((_ is Cons!1608) (toList!791 lt!48891)) (= (_1!1186 (h!2202 (toList!791 lt!48891))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26195 (= (getValueByKey!149 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!64061)))

(declare-fun b!98266 () Bool)

(assert (=> b!98266 (= e!64062 (getValueByKey!149 (t!5574 (toList!791 lt!48891)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!98264 () Bool)

(assert (=> b!98264 (= e!64061 (Some!154 (_2!1186 (h!2202 (toList!791 lt!48891)))))))

(assert (= (and d!26195 c!16684) b!98264))

(assert (= (and d!26195 (not c!16684)) b!98265))

(assert (= (and b!98265 c!16685) b!98266))

(assert (= (and b!98265 (not c!16685)) b!98267))

(assert (=> b!98266 m!106689))

(declare-fun m!107521 () Bool)

(assert (=> b!98266 m!107521))

(assert (=> b!98119 d!26195))

(declare-fun d!26197 () Bool)

(declare-fun lt!49345 () Bool)

(declare-fun content!101 (List!1612) (InoxSet tuple2!2352))

(assert (=> d!26197 (= lt!49345 (select (content!101 (toList!791 lt!49010)) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!64067 () Bool)

(assert (=> d!26197 (= lt!49345 e!64067)))

(declare-fun res!49453 () Bool)

(assert (=> d!26197 (=> (not res!49453) (not e!64067))))

(assert (=> d!26197 (= res!49453 ((_ is Cons!1608) (toList!791 lt!49010)))))

(assert (=> d!26197 (= (contains!808 (toList!791 lt!49010) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49345)))

(declare-fun b!98272 () Bool)

(declare-fun e!64068 () Bool)

(assert (=> b!98272 (= e!64067 e!64068)))

(declare-fun res!49454 () Bool)

(assert (=> b!98272 (=> res!49454 e!64068)))

(assert (=> b!98272 (= res!49454 (= (h!2202 (toList!791 lt!49010)) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98273 () Bool)

(assert (=> b!98273 (= e!64068 (contains!808 (t!5574 (toList!791 lt!49010)) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26197 res!49453) b!98272))

(assert (= (and b!98272 (not res!49454)) b!98273))

(declare-fun m!107523 () Bool)

(assert (=> d!26197 m!107523))

(declare-fun m!107525 () Bool)

(assert (=> d!26197 m!107525))

(declare-fun m!107527 () Bool)

(assert (=> b!98273 m!107527))

(assert (=> b!97857 d!26197))

(assert (=> b!98068 d!26067))

(declare-fun d!26199 () Bool)

(declare-fun e!64069 () Bool)

(assert (=> d!26199 e!64069))

(declare-fun res!49456 () Bool)

(assert (=> d!26199 (=> (not res!49456) (not e!64069))))

(declare-fun lt!49346 () ListLongMap!1551)

(assert (=> d!26199 (= res!49456 (contains!805 lt!49346 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49348 () List!1612)

(assert (=> d!26199 (= lt!49346 (ListLongMap!1552 lt!49348))))

(declare-fun lt!49349 () Unit!2965)

(declare-fun lt!49347 () Unit!2965)

(assert (=> d!26199 (= lt!49349 lt!49347)))

(assert (=> d!26199 (= (getValueByKey!149 lt!49348 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26199 (= lt!49347 (lemmaContainsTupThenGetReturnValue!67 lt!49348 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26199 (= lt!49348 (insertStrictlySorted!69 (toList!791 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26199 (= (+!138 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49346)))

(declare-fun b!98274 () Bool)

(declare-fun res!49455 () Bool)

(assert (=> b!98274 (=> (not res!49455) (not e!64069))))

(assert (=> b!98274 (= res!49455 (= (getValueByKey!149 (toList!791 lt!49346) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98275 () Bool)

(assert (=> b!98275 (= e!64069 (contains!808 (toList!791 lt!49346) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26199 res!49456) b!98274))

(assert (= (and b!98274 res!49455) b!98275))

(declare-fun m!107529 () Bool)

(assert (=> d!26199 m!107529))

(declare-fun m!107531 () Bool)

(assert (=> d!26199 m!107531))

(declare-fun m!107533 () Bool)

(assert (=> d!26199 m!107533))

(declare-fun m!107535 () Bool)

(assert (=> d!26199 m!107535))

(declare-fun m!107537 () Bool)

(assert (=> b!98274 m!107537))

(declare-fun m!107539 () Bool)

(assert (=> b!98275 m!107539))

(assert (=> d!26085 d!26199))

(declare-fun b!98276 () Bool)

(declare-fun e!64076 () Bool)

(declare-fun call!10043 () Bool)

(assert (=> b!98276 (= e!64076 (not call!10043))))

(declare-fun b!98277 () Bool)

(declare-fun e!64078 () Unit!2965)

(declare-fun lt!49369 () Unit!2965)

(assert (=> b!98277 (= e!64078 lt!49369)))

(declare-fun lt!49360 () ListLongMap!1551)

(assert (=> b!98277 (= lt!49360 (getCurrentListMapNoExtraKeys!102 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49356 () (_ BitVec 64))

(assert (=> b!98277 (= lt!49356 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49353 () (_ BitVec 64))

(assert (=> b!98277 (= lt!49353 (select (arr!2014 lt!49161) #b00000000000000000000000000000000))))

(declare-fun lt!49358 () Unit!2965)

(assert (=> b!98277 (= lt!49358 (addStillContains!68 lt!49360 lt!49356 (zeroValue!2364 newMap!16) lt!49353))))

(assert (=> b!98277 (contains!805 (+!138 lt!49360 (tuple2!2353 lt!49356 (zeroValue!2364 newMap!16))) lt!49353)))

(declare-fun lt!49364 () Unit!2965)

(assert (=> b!98277 (= lt!49364 lt!49358)))

(declare-fun lt!49362 () ListLongMap!1551)

(assert (=> b!98277 (= lt!49362 (getCurrentListMapNoExtraKeys!102 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49366 () (_ BitVec 64))

(assert (=> b!98277 (= lt!49366 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49371 () (_ BitVec 64))

(assert (=> b!98277 (= lt!49371 (select (arr!2014 lt!49161) #b00000000000000000000000000000000))))

(declare-fun lt!49351 () Unit!2965)

(assert (=> b!98277 (= lt!49351 (addApplyDifferent!68 lt!49362 lt!49366 (minValue!2364 newMap!16) lt!49371))))

(assert (=> b!98277 (= (apply!92 (+!138 lt!49362 (tuple2!2353 lt!49366 (minValue!2364 newMap!16))) lt!49371) (apply!92 lt!49362 lt!49371))))

(declare-fun lt!49363 () Unit!2965)

(assert (=> b!98277 (= lt!49363 lt!49351)))

(declare-fun lt!49368 () ListLongMap!1551)

(assert (=> b!98277 (= lt!49368 (getCurrentListMapNoExtraKeys!102 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49365 () (_ BitVec 64))

(assert (=> b!98277 (= lt!49365 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49352 () (_ BitVec 64))

(assert (=> b!98277 (= lt!49352 (select (arr!2014 lt!49161) #b00000000000000000000000000000000))))

(declare-fun lt!49355 () Unit!2965)

(assert (=> b!98277 (= lt!49355 (addApplyDifferent!68 lt!49368 lt!49365 (zeroValue!2364 newMap!16) lt!49352))))

(assert (=> b!98277 (= (apply!92 (+!138 lt!49368 (tuple2!2353 lt!49365 (zeroValue!2364 newMap!16))) lt!49352) (apply!92 lt!49368 lt!49352))))

(declare-fun lt!49350 () Unit!2965)

(assert (=> b!98277 (= lt!49350 lt!49355)))

(declare-fun lt!49367 () ListLongMap!1551)

(assert (=> b!98277 (= lt!49367 (getCurrentListMapNoExtraKeys!102 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49361 () (_ BitVec 64))

(assert (=> b!98277 (= lt!49361 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49354 () (_ BitVec 64))

(assert (=> b!98277 (= lt!49354 (select (arr!2014 lt!49161) #b00000000000000000000000000000000))))

(assert (=> b!98277 (= lt!49369 (addApplyDifferent!68 lt!49367 lt!49361 (minValue!2364 newMap!16) lt!49354))))

(assert (=> b!98277 (= (apply!92 (+!138 lt!49367 (tuple2!2353 lt!49361 (minValue!2364 newMap!16))) lt!49354) (apply!92 lt!49367 lt!49354))))

(declare-fun b!98278 () Bool)

(declare-fun e!64077 () ListLongMap!1551)

(declare-fun call!10038 () ListLongMap!1551)

(assert (=> b!98278 (= e!64077 call!10038)))

(declare-fun bm!10034 () Bool)

(declare-fun call!10041 () ListLongMap!1551)

(assert (=> bm!10034 (= call!10038 call!10041)))

(declare-fun b!98279 () Bool)

(declare-fun e!64072 () Bool)

(declare-fun e!64073 () Bool)

(assert (=> b!98279 (= e!64072 e!64073)))

(declare-fun res!49464 () Bool)

(declare-fun call!10040 () Bool)

(assert (=> b!98279 (= res!49464 call!10040)))

(assert (=> b!98279 (=> (not res!49464) (not e!64073))))

(declare-fun b!98280 () Bool)

(declare-fun res!49460 () Bool)

(declare-fun e!64075 () Bool)

(assert (=> b!98280 (=> (not res!49460) (not e!64075))))

(assert (=> b!98280 (= res!49460 e!64072)))

(declare-fun c!16689 () Bool)

(assert (=> b!98280 (= c!16689 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26201 () Bool)

(assert (=> d!26201 e!64075))

(declare-fun res!49457 () Bool)

(assert (=> d!26201 (=> (not res!49457) (not e!64075))))

(assert (=> d!26201 (= res!49457 (or (bvsge #b00000000000000000000000000000000 (size!2264 lt!49161)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 lt!49161)))))))

(declare-fun lt!49370 () ListLongMap!1551)

(declare-fun lt!49359 () ListLongMap!1551)

(assert (=> d!26201 (= lt!49370 lt!49359)))

(declare-fun lt!49357 () Unit!2965)

(assert (=> d!26201 (= lt!49357 e!64078)))

(declare-fun c!16687 () Bool)

(declare-fun e!64074 () Bool)

(assert (=> d!26201 (= c!16687 e!64074)))

(declare-fun res!49458 () Bool)

(assert (=> d!26201 (=> (not res!49458) (not e!64074))))

(assert (=> d!26201 (= res!49458 (bvslt #b00000000000000000000000000000000 (size!2264 lt!49161)))))

(declare-fun e!64081 () ListLongMap!1551)

(assert (=> d!26201 (= lt!49359 e!64081)))

(declare-fun c!16686 () Bool)

(assert (=> d!26201 (= c!16686 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26201 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26201 (= (getCurrentListMap!472 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49370)))

(declare-fun b!98281 () Bool)

(assert (=> b!98281 (= e!64073 (= (apply!92 lt!49370 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun call!10039 () ListLongMap!1551)

(declare-fun call!10037 () ListLongMap!1551)

(declare-fun bm!10035 () Bool)

(declare-fun call!10042 () ListLongMap!1551)

(declare-fun c!16691 () Bool)

(assert (=> bm!10035 (= call!10041 (+!138 (ite c!16686 call!10039 (ite c!16691 call!10042 call!10037)) (ite (or c!16686 c!16691) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!98282 () Bool)

(assert (=> b!98282 (= e!64074 (validKeyInArray!0 (select (arr!2014 lt!49161) #b00000000000000000000000000000000)))))

(declare-fun b!98283 () Bool)

(declare-fun e!64082 () Bool)

(assert (=> b!98283 (= e!64082 (validKeyInArray!0 (select (arr!2014 lt!49161) #b00000000000000000000000000000000)))))

(declare-fun b!98284 () Bool)

(assert (=> b!98284 (= e!64072 (not call!10040))))

(declare-fun b!98285 () Bool)

(declare-fun e!64070 () ListLongMap!1551)

(assert (=> b!98285 (= e!64070 call!10038)))

(declare-fun b!98286 () Bool)

(assert (=> b!98286 (= e!64081 e!64077)))

(assert (=> b!98286 (= c!16691 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10036 () Bool)

(assert (=> bm!10036 (= call!10043 (contains!805 lt!49370 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98287 () Bool)

(declare-fun e!64071 () Bool)

(assert (=> b!98287 (= e!64071 (= (apply!92 lt!49370 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!98288 () Bool)

(declare-fun e!64080 () Bool)

(assert (=> b!98288 (= e!64080 (= (apply!92 lt!49370 (select (arr!2014 lt!49161) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 lt!49174) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98288 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 lt!49174)))))

(assert (=> b!98288 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 lt!49161)))))

(declare-fun b!98289 () Bool)

(declare-fun res!49459 () Bool)

(assert (=> b!98289 (=> (not res!49459) (not e!64075))))

(declare-fun e!64079 () Bool)

(assert (=> b!98289 (= res!49459 e!64079)))

(declare-fun res!49463 () Bool)

(assert (=> b!98289 (=> res!49463 e!64079)))

(assert (=> b!98289 (= res!49463 (not e!64082))))

(declare-fun res!49465 () Bool)

(assert (=> b!98289 (=> (not res!49465) (not e!64082))))

(assert (=> b!98289 (= res!49465 (bvslt #b00000000000000000000000000000000 (size!2264 lt!49161)))))

(declare-fun b!98290 () Bool)

(assert (=> b!98290 (= e!64070 call!10037)))

(declare-fun b!98291 () Bool)

(assert (=> b!98291 (= e!64079 e!64080)))

(declare-fun res!49462 () Bool)

(assert (=> b!98291 (=> (not res!49462) (not e!64080))))

(assert (=> b!98291 (= res!49462 (contains!805 lt!49370 (select (arr!2014 lt!49161) #b00000000000000000000000000000000)))))

(assert (=> b!98291 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 lt!49161)))))

(declare-fun bm!10037 () Bool)

(assert (=> bm!10037 (= call!10042 call!10039)))

(declare-fun b!98292 () Bool)

(assert (=> b!98292 (= e!64076 e!64071)))

(declare-fun res!49461 () Bool)

(assert (=> b!98292 (= res!49461 call!10043)))

(assert (=> b!98292 (=> (not res!49461) (not e!64071))))

(declare-fun bm!10038 () Bool)

(assert (=> bm!10038 (= call!10037 call!10042)))

(declare-fun b!98293 () Bool)

(declare-fun Unit!2992 () Unit!2965)

(assert (=> b!98293 (= e!64078 Unit!2992)))

(declare-fun b!98294 () Bool)

(declare-fun c!16688 () Bool)

(assert (=> b!98294 (= c!16688 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98294 (= e!64077 e!64070)))

(declare-fun bm!10039 () Bool)

(assert (=> bm!10039 (= call!10039 (getCurrentListMapNoExtraKeys!102 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!98295 () Bool)

(assert (=> b!98295 (= e!64081 (+!138 call!10041 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun bm!10040 () Bool)

(assert (=> bm!10040 (= call!10040 (contains!805 lt!49370 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98296 () Bool)

(assert (=> b!98296 (= e!64075 e!64076)))

(declare-fun c!16690 () Bool)

(assert (=> b!98296 (= c!16690 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26201 c!16686) b!98295))

(assert (= (and d!26201 (not c!16686)) b!98286))

(assert (= (and b!98286 c!16691) b!98278))

(assert (= (and b!98286 (not c!16691)) b!98294))

(assert (= (and b!98294 c!16688) b!98285))

(assert (= (and b!98294 (not c!16688)) b!98290))

(assert (= (or b!98285 b!98290) bm!10038))

(assert (= (or b!98278 bm!10038) bm!10037))

(assert (= (or b!98278 b!98285) bm!10034))

(assert (= (or b!98295 bm!10037) bm!10039))

(assert (= (or b!98295 bm!10034) bm!10035))

(assert (= (and d!26201 res!49458) b!98282))

(assert (= (and d!26201 c!16687) b!98277))

(assert (= (and d!26201 (not c!16687)) b!98293))

(assert (= (and d!26201 res!49457) b!98289))

(assert (= (and b!98289 res!49465) b!98283))

(assert (= (and b!98289 (not res!49463)) b!98291))

(assert (= (and b!98291 res!49462) b!98288))

(assert (= (and b!98289 res!49459) b!98280))

(assert (= (and b!98280 c!16689) b!98279))

(assert (= (and b!98280 (not c!16689)) b!98284))

(assert (= (and b!98279 res!49464) b!98281))

(assert (= (or b!98279 b!98284) bm!10040))

(assert (= (and b!98280 res!49460) b!98296))

(assert (= (and b!98296 c!16690) b!98292))

(assert (= (and b!98296 (not c!16690)) b!98276))

(assert (= (and b!98292 res!49461) b!98287))

(assert (= (or b!98292 b!98276) bm!10036))

(declare-fun b_lambda!4385 () Bool)

(assert (=> (not b_lambda!4385) (not b!98288)))

(assert (=> b!98288 t!5581))

(declare-fun b_and!6037 () Bool)

(assert (= b_and!6033 (and (=> t!5581 result!3283) b_and!6037)))

(assert (=> b!98288 t!5583))

(declare-fun b_and!6039 () Bool)

(assert (= b_and!6035 (and (=> t!5583 result!3285) b_and!6039)))

(declare-fun m!107541 () Bool)

(assert (=> b!98283 m!107541))

(assert (=> b!98283 m!107541))

(declare-fun m!107543 () Bool)

(assert (=> b!98283 m!107543))

(declare-fun m!107545 () Bool)

(assert (=> bm!10035 m!107545))

(declare-fun m!107547 () Bool)

(assert (=> b!98281 m!107547))

(assert (=> b!98282 m!107541))

(assert (=> b!98282 m!107541))

(assert (=> b!98282 m!107543))

(declare-fun m!107549 () Bool)

(assert (=> b!98277 m!107549))

(declare-fun m!107551 () Bool)

(assert (=> b!98277 m!107551))

(declare-fun m!107553 () Bool)

(assert (=> b!98277 m!107553))

(declare-fun m!107555 () Bool)

(assert (=> b!98277 m!107555))

(declare-fun m!107557 () Bool)

(assert (=> b!98277 m!107557))

(assert (=> b!98277 m!107555))

(declare-fun m!107559 () Bool)

(assert (=> b!98277 m!107559))

(declare-fun m!107561 () Bool)

(assert (=> b!98277 m!107561))

(declare-fun m!107563 () Bool)

(assert (=> b!98277 m!107563))

(assert (=> b!98277 m!107551))

(declare-fun m!107565 () Bool)

(assert (=> b!98277 m!107565))

(declare-fun m!107567 () Bool)

(assert (=> b!98277 m!107567))

(declare-fun m!107569 () Bool)

(assert (=> b!98277 m!107569))

(declare-fun m!107571 () Bool)

(assert (=> b!98277 m!107571))

(declare-fun m!107573 () Bool)

(assert (=> b!98277 m!107573))

(declare-fun m!107575 () Bool)

(assert (=> b!98277 m!107575))

(assert (=> b!98277 m!107565))

(assert (=> b!98277 m!107541))

(declare-fun m!107577 () Bool)

(assert (=> b!98277 m!107577))

(assert (=> b!98277 m!107561))

(declare-fun m!107579 () Bool)

(assert (=> b!98277 m!107579))

(declare-fun m!107581 () Bool)

(assert (=> b!98287 m!107581))

(declare-fun m!107583 () Bool)

(assert (=> bm!10036 m!107583))

(assert (=> bm!10039 m!107559))

(assert (=> d!26201 m!106929))

(assert (=> b!98291 m!107541))

(assert (=> b!98291 m!107541))

(declare-fun m!107585 () Bool)

(assert (=> b!98291 m!107585))

(declare-fun m!107587 () Bool)

(assert (=> bm!10040 m!107587))

(declare-fun m!107589 () Bool)

(assert (=> b!98295 m!107589))

(declare-fun m!107591 () Bool)

(assert (=> b!98288 m!107591))

(assert (=> b!98288 m!106939))

(declare-fun m!107593 () Bool)

(assert (=> b!98288 m!107593))

(assert (=> b!98288 m!106939))

(assert (=> b!98288 m!107541))

(assert (=> b!98288 m!107541))

(declare-fun m!107595 () Bool)

(assert (=> b!98288 m!107595))

(assert (=> b!98288 m!107591))

(assert (=> d!26085 d!26201))

(declare-fun d!26203 () Bool)

(assert (=> d!26203 (arrayContainsKey!0 lt!49173 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!49374 () Unit!2965)

(declare-fun choose!13 (array!4240 (_ BitVec 64) (_ BitVec 32)) Unit!2965)

(assert (=> d!26203 (= lt!49374 (choose!13 lt!49173 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985))))))

(assert (=> d!26203 (bvsge (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000000)))

(assert (=> d!26203 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!49173 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985))) lt!49374)))

(declare-fun bs!4047 () Bool)

(assert (= bs!4047 d!26203))

(assert (=> bs!4047 m!106609))

(assert (=> bs!4047 m!107107))

(assert (=> bs!4047 m!106609))

(declare-fun m!107597 () Bool)

(assert (=> bs!4047 m!107597))

(assert (=> d!26085 d!26203))

(declare-fun d!26205 () Bool)

(declare-fun e!64083 () Bool)

(assert (=> d!26205 e!64083))

(declare-fun res!49466 () Bool)

(assert (=> d!26205 (=> (not res!49466) (not e!64083))))

(assert (=> d!26205 (= res!49466 (and (bvsge (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000000) (bvslt (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (size!2264 lt!49161))))))

(declare-fun lt!49375 () Unit!2965)

(assert (=> d!26205 (= lt!49375 (choose!599 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26205 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26205 (= (lemmaValidKeyInArrayIsInListMap!99 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (defaultEntry!2481 newMap!16)) lt!49375)))

(declare-fun b!98297 () Bool)

(assert (=> b!98297 (= e!64083 (contains!805 (getCurrentListMap!472 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2014 lt!49161) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)))))))

(assert (= (and d!26205 res!49466) b!98297))

(declare-fun m!107599 () Bool)

(assert (=> d!26205 m!107599))

(assert (=> d!26205 m!106929))

(assert (=> b!98297 m!107095))

(declare-fun m!107601 () Bool)

(assert (=> b!98297 m!107601))

(assert (=> b!98297 m!107095))

(assert (=> b!98297 m!107601))

(declare-fun m!107603 () Bool)

(assert (=> b!98297 m!107603))

(assert (=> d!26085 d!26205))

(declare-fun d!26207 () Bool)

(declare-fun e!64086 () Bool)

(assert (=> d!26207 e!64086))

(declare-fun res!49469 () Bool)

(assert (=> d!26207 (=> (not res!49469) (not e!64086))))

(assert (=> d!26207 (= res!49469 (and (bvsge (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000000) (bvslt (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (size!2264 (_keys!4171 newMap!16))) (bvslt (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (size!2265 (_values!2464 newMap!16)))))))

(declare-fun lt!49378 () Unit!2965)

(declare-fun choose!606 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 32) (_ BitVec 64) V!3155 Int) Unit!2965)

(assert (=> d!26207 (= lt!49378 (choose!606 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)))))

(assert (=> d!26207 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26207 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!25 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)) lt!49378)))

(declare-fun b!98300 () Bool)

(assert (=> b!98300 (= e!64086 (= (+!138 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!472 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))))))

(assert (= (and d!26207 res!49469) b!98300))

(assert (=> d!26207 m!106609))

(assert (=> d!26207 m!106607))

(declare-fun m!107605 () Bool)

(assert (=> d!26207 m!107605))

(assert (=> d!26207 m!106929))

(assert (=> b!98300 m!107115))

(assert (=> b!98300 m!107083))

(assert (=> b!98300 m!106687))

(assert (=> b!98300 m!107061))

(assert (=> b!98300 m!107101))

(assert (=> b!98300 m!106687))

(assert (=> d!26085 d!26207))

(declare-fun d!26209 () Bool)

(declare-fun e!64089 () Bool)

(assert (=> d!26209 e!64089))

(declare-fun res!49472 () Bool)

(assert (=> d!26209 (=> (not res!49472) (not e!64089))))

(assert (=> d!26209 (= res!49472 (and (bvsge (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000000) (bvslt (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (size!2264 (_keys!4171 newMap!16)))))))

(declare-fun lt!49381 () Unit!2965)

(declare-fun choose!102 ((_ BitVec 64) array!4240 (_ BitVec 32) (_ BitVec 32)) Unit!2965)

(assert (=> d!26209 (= lt!49381 (choose!102 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (mask!6578 newMap!16)))))

(assert (=> d!26209 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26209 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (mask!6578 newMap!16)) lt!49381)))

(declare-fun b!98303 () Bool)

(assert (=> b!98303 (= e!64089 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (mask!6578 newMap!16)))))

(assert (= (and d!26209 res!49472) b!98303))

(assert (=> d!26209 m!106609))

(declare-fun m!107607 () Bool)

(assert (=> d!26209 m!107607))

(assert (=> d!26209 m!106929))

(assert (=> b!98303 m!107115))

(assert (=> b!98303 m!107109))

(assert (=> d!26085 d!26209))

(assert (=> d!26085 d!26065))

(assert (=> d!26085 d!25991))

(assert (=> d!26085 d!26083))

(declare-fun b!98304 () Bool)

(declare-fun e!64091 () (_ BitVec 32))

(declare-fun call!10044 () (_ BitVec 32))

(assert (=> b!98304 (= e!64091 (bvadd #b00000000000000000000000000000001 call!10044))))

(declare-fun b!98305 () Bool)

(assert (=> b!98305 (= e!64091 call!10044)))

(declare-fun d!26211 () Bool)

(declare-fun lt!49382 () (_ BitVec 32))

(assert (=> d!26211 (and (bvsge lt!49382 #b00000000000000000000000000000000) (bvsle lt!49382 (bvsub (size!2264 lt!49180) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)))))))

(declare-fun e!64090 () (_ BitVec 32))

(assert (=> d!26211 (= lt!49382 e!64090)))

(declare-fun c!16693 () Bool)

(assert (=> d!26211 (= c!16693 (bvsge (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (bvadd (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000001)))))

(assert (=> d!26211 (and (bvsle (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (bvadd (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000001)) (bvsge (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000001) (size!2264 lt!49180)))))

(assert (=> d!26211 (= (arrayCountValidKeys!0 lt!49180 (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (bvadd (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000001)) lt!49382)))

(declare-fun bm!10041 () Bool)

(assert (=> bm!10041 (= call!10044 (arrayCountValidKeys!0 lt!49180 (bvadd (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000001) (bvadd (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000001)))))

(declare-fun b!98306 () Bool)

(assert (=> b!98306 (= e!64090 #b00000000000000000000000000000000)))

(declare-fun b!98307 () Bool)

(assert (=> b!98307 (= e!64090 e!64091)))

(declare-fun c!16692 () Bool)

(assert (=> b!98307 (= c!16692 (validKeyInArray!0 (select (arr!2014 lt!49180) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)))))))

(assert (= (and d!26211 c!16693) b!98306))

(assert (= (and d!26211 (not c!16693)) b!98307))

(assert (= (and b!98307 c!16692) b!98304))

(assert (= (and b!98307 (not c!16692)) b!98305))

(assert (= (or b!98304 b!98305) bm!10041))

(declare-fun m!107609 () Bool)

(assert (=> bm!10041 m!107609))

(declare-fun m!107611 () Bool)

(assert (=> b!98307 m!107611))

(assert (=> b!98307 m!107611))

(declare-fun m!107613 () Bool)

(assert (=> b!98307 m!107613))

(assert (=> d!26085 d!26211))

(declare-fun d!26213 () Bool)

(assert (=> d!26213 (= (arrayCountValidKeys!0 lt!49180 (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (bvadd (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!49385 () Unit!2965)

(declare-fun choose!2 (array!4240 (_ BitVec 32)) Unit!2965)

(assert (=> d!26213 (= lt!49385 (choose!2 lt!49180 (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985))))))

(declare-fun e!64094 () Bool)

(assert (=> d!26213 e!64094))

(declare-fun res!49477 () Bool)

(assert (=> d!26213 (=> (not res!49477) (not e!64094))))

(assert (=> d!26213 (= res!49477 (and (bvsge (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000000) (bvslt (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (size!2264 lt!49180))))))

(assert (=> d!26213 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!49180 (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985))) lt!49385)))

(declare-fun b!98312 () Bool)

(declare-fun res!49478 () Bool)

(assert (=> b!98312 (=> (not res!49478) (not e!64094))))

(assert (=> b!98312 (= res!49478 (validKeyInArray!0 (select (arr!2014 lt!49180) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)))))))

(declare-fun b!98313 () Bool)

(assert (=> b!98313 (= e!64094 (bvslt (size!2264 lt!49180) #b01111111111111111111111111111111))))

(assert (= (and d!26213 res!49477) b!98312))

(assert (= (and b!98312 res!49478) b!98313))

(assert (=> d!26213 m!107103))

(declare-fun m!107615 () Bool)

(assert (=> d!26213 m!107615))

(assert (=> b!98312 m!107611))

(assert (=> b!98312 m!107611))

(assert (=> b!98312 m!107613))

(assert (=> d!26085 d!26213))

(declare-fun b!98314 () Bool)

(declare-fun e!64096 () (_ BitVec 32))

(declare-fun call!10045 () (_ BitVec 32))

(assert (=> b!98314 (= e!64096 (bvadd #b00000000000000000000000000000001 call!10045))))

(declare-fun b!98315 () Bool)

(assert (=> b!98315 (= e!64096 call!10045)))

(declare-fun d!26215 () Bool)

(declare-fun lt!49386 () (_ BitVec 32))

(assert (=> d!26215 (and (bvsge lt!49386 #b00000000000000000000000000000000) (bvsle lt!49386 (bvsub (size!2264 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!64095 () (_ BitVec 32))

(assert (=> d!26215 (= lt!49386 e!64095)))

(declare-fun c!16695 () Bool)

(assert (=> d!26215 (= c!16695 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26215 (and (bvsle #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2264 (_keys!4171 newMap!16)) (size!2264 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))))))

(assert (=> d!26215 (= (arrayCountValidKeys!0 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) lt!49386)))

(declare-fun bm!10042 () Bool)

(assert (=> bm!10042 (= call!10045 (arrayCountValidKeys!0 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98316 () Bool)

(assert (=> b!98316 (= e!64095 #b00000000000000000000000000000000)))

(declare-fun b!98317 () Bool)

(assert (=> b!98317 (= e!64095 e!64096)))

(declare-fun c!16694 () Bool)

(assert (=> b!98317 (= c!16694 (validKeyInArray!0 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (= (and d!26215 c!16695) b!98316))

(assert (= (and d!26215 (not c!16695)) b!98317))

(assert (= (and b!98317 c!16694) b!98314))

(assert (= (and b!98317 (not c!16694)) b!98315))

(assert (= (or b!98314 b!98315) bm!10042))

(declare-fun m!107617 () Bool)

(assert (=> bm!10042 m!107617))

(declare-fun m!107619 () Bool)

(assert (=> b!98317 m!107619))

(assert (=> b!98317 m!107619))

(declare-fun m!107621 () Bool)

(assert (=> b!98317 m!107621))

(assert (=> d!26085 d!26215))

(declare-fun call!10046 () Bool)

(declare-fun bm!10043 () Bool)

(assert (=> bm!10043 (= call!10046 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (mask!6578 newMap!16)))))

(declare-fun b!98318 () Bool)

(declare-fun e!64099 () Bool)

(declare-fun e!64098 () Bool)

(assert (=> b!98318 (= e!64099 e!64098)))

(declare-fun c!16696 () Bool)

(assert (=> b!98318 (= c!16696 (validKeyInArray!0 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!98319 () Bool)

(assert (=> b!98319 (= e!64098 call!10046)))

(declare-fun b!98320 () Bool)

(declare-fun e!64097 () Bool)

(assert (=> b!98320 (= e!64098 e!64097)))

(declare-fun lt!49387 () (_ BitVec 64))

(assert (=> b!98320 (= lt!49387 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49388 () Unit!2965)

(assert (=> b!98320 (= lt!49388 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) lt!49387 #b00000000000000000000000000000000))))

(assert (=> b!98320 (arrayContainsKey!0 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) lt!49387 #b00000000000000000000000000000000)))

(declare-fun lt!49389 () Unit!2965)

(assert (=> b!98320 (= lt!49389 lt!49388)))

(declare-fun res!49480 () Bool)

(assert (=> b!98320 (= res!49480 (= (seekEntryOrOpen!0 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000) (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (mask!6578 newMap!16)) (Found!263 #b00000000000000000000000000000000)))))

(assert (=> b!98320 (=> (not res!49480) (not e!64097))))

(declare-fun d!26217 () Bool)

(declare-fun res!49479 () Bool)

(assert (=> d!26217 (=> res!49479 e!64099)))

(assert (=> d!26217 (= res!49479 (bvsge #b00000000000000000000000000000000 (size!2264 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))))))

(assert (=> d!26217 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (mask!6578 newMap!16)) e!64099)))

(declare-fun b!98321 () Bool)

(assert (=> b!98321 (= e!64097 call!10046)))

(assert (= (and d!26217 (not res!49479)) b!98318))

(assert (= (and b!98318 c!16696) b!98320))

(assert (= (and b!98318 (not c!16696)) b!98319))

(assert (= (and b!98320 res!49480) b!98321))

(assert (= (or b!98321 b!98319) bm!10043))

(declare-fun m!107623 () Bool)

(assert (=> bm!10043 m!107623))

(assert (=> b!98318 m!107619))

(assert (=> b!98318 m!107619))

(assert (=> b!98318 m!107621))

(assert (=> b!98320 m!107619))

(declare-fun m!107625 () Bool)

(assert (=> b!98320 m!107625))

(declare-fun m!107627 () Bool)

(assert (=> b!98320 m!107627))

(assert (=> b!98320 m!107619))

(declare-fun m!107629 () Bool)

(assert (=> b!98320 m!107629))

(assert (=> d!26085 d!26217))

(declare-fun b!98322 () Bool)

(declare-fun e!64100 () Bool)

(declare-fun call!10047 () Bool)

(assert (=> b!98322 (= e!64100 call!10047)))

(declare-fun b!98323 () Bool)

(assert (=> b!98323 (= e!64100 call!10047)))

(declare-fun d!26219 () Bool)

(declare-fun res!49482 () Bool)

(declare-fun e!64103 () Bool)

(assert (=> d!26219 (=> res!49482 e!64103)))

(assert (=> d!26219 (= res!49482 (bvsge lt!49168 (size!2264 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))))))

(assert (=> d!26219 (= (arrayNoDuplicates!0 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) lt!49168 lt!49158) e!64103)))

(declare-fun b!98324 () Bool)

(declare-fun e!64101 () Bool)

(assert (=> b!98324 (= e!64103 e!64101)))

(declare-fun res!49483 () Bool)

(assert (=> b!98324 (=> (not res!49483) (not e!64101))))

(declare-fun e!64102 () Bool)

(assert (=> b!98324 (= res!49483 (not e!64102))))

(declare-fun res!49481 () Bool)

(assert (=> b!98324 (=> (not res!49481) (not e!64102))))

(assert (=> b!98324 (= res!49481 (validKeyInArray!0 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) lt!49168)))))

(declare-fun b!98325 () Bool)

(assert (=> b!98325 (= e!64101 e!64100)))

(declare-fun c!16697 () Bool)

(assert (=> b!98325 (= c!16697 (validKeyInArray!0 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) lt!49168)))))

(declare-fun bm!10044 () Bool)

(assert (=> bm!10044 (= call!10047 (arrayNoDuplicates!0 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (bvadd lt!49168 #b00000000000000000000000000000001) (ite c!16697 (Cons!1607 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) lt!49168) lt!49158) lt!49158)))))

(declare-fun b!98326 () Bool)

(assert (=> b!98326 (= e!64102 (contains!807 lt!49158 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) lt!49168)))))

(assert (= (and d!26219 (not res!49482)) b!98324))

(assert (= (and b!98324 res!49481) b!98326))

(assert (= (and b!98324 res!49483) b!98325))

(assert (= (and b!98325 c!16697) b!98322))

(assert (= (and b!98325 (not c!16697)) b!98323))

(assert (= (or b!98322 b!98323) bm!10044))

(declare-fun m!107631 () Bool)

(assert (=> b!98324 m!107631))

(assert (=> b!98324 m!107631))

(declare-fun m!107633 () Bool)

(assert (=> b!98324 m!107633))

(assert (=> b!98325 m!107631))

(assert (=> b!98325 m!107631))

(assert (=> b!98325 m!107633))

(assert (=> bm!10044 m!107631))

(declare-fun m!107635 () Bool)

(assert (=> bm!10044 m!107635))

(assert (=> b!98326 m!107631))

(assert (=> b!98326 m!107631))

(declare-fun m!107637 () Bool)

(assert (=> b!98326 m!107637))

(assert (=> d!26085 d!26219))

(declare-fun d!26221 () Bool)

(declare-fun e!64106 () Bool)

(assert (=> d!26221 e!64106))

(declare-fun res!49486 () Bool)

(assert (=> d!26221 (=> (not res!49486) (not e!64106))))

(assert (=> d!26221 (= res!49486 (and (bvsge (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000000) (bvslt (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (size!2264 (_keys!4171 newMap!16)))))))

(declare-fun lt!49392 () Unit!2965)

(declare-fun choose!41 (array!4240 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1611) Unit!2965)

(assert (=> d!26221 (= lt!49392 (choose!41 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) lt!49168 lt!49158))))

(assert (=> d!26221 (bvslt (size!2264 (_keys!4171 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!26221 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) lt!49168 lt!49158) lt!49392)))

(declare-fun b!98329 () Bool)

(assert (=> b!98329 (= e!64106 (arrayNoDuplicates!0 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) lt!49168 lt!49158))))

(assert (= (and d!26221 res!49486) b!98329))

(assert (=> d!26221 m!106609))

(declare-fun m!107639 () Bool)

(assert (=> d!26221 m!107639))

(assert (=> b!98329 m!107115))

(assert (=> b!98329 m!107085))

(assert (=> d!26085 d!26221))

(declare-fun d!26223 () Bool)

(declare-fun e!64108 () Bool)

(assert (=> d!26223 e!64108))

(declare-fun res!49487 () Bool)

(assert (=> d!26223 (=> res!49487 e!64108)))

(declare-fun lt!49395 () Bool)

(assert (=> d!26223 (= res!49487 (not lt!49395))))

(declare-fun lt!49396 () Bool)

(assert (=> d!26223 (= lt!49395 lt!49396)))

(declare-fun lt!49393 () Unit!2965)

(declare-fun e!64107 () Unit!2965)

(assert (=> d!26223 (= lt!49393 e!64107)))

(declare-fun c!16698 () Bool)

(assert (=> d!26223 (= c!16698 lt!49396)))

(assert (=> d!26223 (= lt!49396 (containsKey!153 (toList!791 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26223 (= (contains!805 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) lt!49395)))

(declare-fun b!98330 () Bool)

(declare-fun lt!49394 () Unit!2965)

(assert (=> b!98330 (= e!64107 lt!49394)))

(assert (=> b!98330 (= lt!49394 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> b!98330 (isDefined!103 (getValueByKey!149 (toList!791 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!98331 () Bool)

(declare-fun Unit!2993 () Unit!2965)

(assert (=> b!98331 (= e!64107 Unit!2993)))

(declare-fun b!98332 () Bool)

(assert (=> b!98332 (= e!64108 (isDefined!103 (getValueByKey!149 (toList!791 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (= (and d!26223 c!16698) b!98330))

(assert (= (and d!26223 (not c!16698)) b!98331))

(assert (= (and d!26223 (not res!49487)) b!98332))

(assert (=> d!26223 m!106609))

(declare-fun m!107641 () Bool)

(assert (=> d!26223 m!107641))

(assert (=> b!98330 m!106609))

(declare-fun m!107643 () Bool)

(assert (=> b!98330 m!107643))

(assert (=> b!98330 m!106609))

(declare-fun m!107645 () Bool)

(assert (=> b!98330 m!107645))

(assert (=> b!98330 m!107645))

(declare-fun m!107647 () Bool)

(assert (=> b!98330 m!107647))

(assert (=> b!98332 m!106609))

(assert (=> b!98332 m!107645))

(assert (=> b!98332 m!107645))

(assert (=> b!98332 m!107647))

(assert (=> d!26085 d!26223))

(assert (=> d!26085 d!26037))

(declare-fun d!26225 () Bool)

(declare-fun res!49488 () Bool)

(declare-fun e!64109 () Bool)

(assert (=> d!26225 (=> res!49488 e!64109)))

(assert (=> d!26225 (= res!49488 (= (select (arr!2014 lt!49173) #b00000000000000000000000000000000) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26225 (= (arrayContainsKey!0 lt!49173 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000) e!64109)))

(declare-fun b!98333 () Bool)

(declare-fun e!64110 () Bool)

(assert (=> b!98333 (= e!64109 e!64110)))

(declare-fun res!49489 () Bool)

(assert (=> b!98333 (=> (not res!49489) (not e!64110))))

(assert (=> b!98333 (= res!49489 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 lt!49173)))))

(declare-fun b!98334 () Bool)

(assert (=> b!98334 (= e!64110 (arrayContainsKey!0 lt!49173 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26225 (not res!49488)) b!98333))

(assert (= (and b!98333 res!49489) b!98334))

(declare-fun m!107649 () Bool)

(assert (=> d!26225 m!107649))

(assert (=> b!98334 m!106609))

(declare-fun m!107651 () Bool)

(assert (=> b!98334 m!107651))

(assert (=> d!26085 d!26225))

(declare-fun d!26227 () Bool)

(declare-fun e!64112 () Bool)

(assert (=> d!26227 e!64112))

(declare-fun res!49490 () Bool)

(assert (=> d!26227 (=> res!49490 e!64112)))

(declare-fun lt!49399 () Bool)

(assert (=> d!26227 (= res!49490 (not lt!49399))))

(declare-fun lt!49400 () Bool)

(assert (=> d!26227 (= lt!49399 lt!49400)))

(declare-fun lt!49397 () Unit!2965)

(declare-fun e!64111 () Unit!2965)

(assert (=> d!26227 (= lt!49397 e!64111)))

(declare-fun c!16699 () Bool)

(assert (=> d!26227 (= c!16699 lt!49400)))

(assert (=> d!26227 (= lt!49400 (containsKey!153 (toList!791 (getCurrentListMap!472 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)))))))

(assert (=> d!26227 (= (contains!805 (getCurrentListMap!472 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)))) lt!49399)))

(declare-fun b!98335 () Bool)

(declare-fun lt!49398 () Unit!2965)

(assert (=> b!98335 (= e!64111 lt!49398)))

(assert (=> b!98335 (= lt!49398 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 (getCurrentListMap!472 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)))))))

(assert (=> b!98335 (isDefined!103 (getValueByKey!149 (toList!791 (getCurrentListMap!472 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)))))))

(declare-fun b!98336 () Bool)

(declare-fun Unit!2994 () Unit!2965)

(assert (=> b!98336 (= e!64111 Unit!2994)))

(declare-fun b!98337 () Bool)

(assert (=> b!98337 (= e!64112 (isDefined!103 (getValueByKey!149 (toList!791 (getCurrentListMap!472 lt!49161 lt!49174 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985))))))))

(assert (= (and d!26227 c!16699) b!98335))

(assert (= (and d!26227 (not c!16699)) b!98336))

(assert (= (and d!26227 (not res!49490)) b!98337))

(assert (=> d!26227 m!107087))

(declare-fun m!107653 () Bool)

(assert (=> d!26227 m!107653))

(assert (=> b!98335 m!107087))

(declare-fun m!107655 () Bool)

(assert (=> b!98335 m!107655))

(assert (=> b!98335 m!107087))

(declare-fun m!107657 () Bool)

(assert (=> b!98335 m!107657))

(assert (=> b!98335 m!107657))

(declare-fun m!107659 () Bool)

(assert (=> b!98335 m!107659))

(assert (=> b!98337 m!107087))

(assert (=> b!98337 m!107657))

(assert (=> b!98337 m!107657))

(assert (=> b!98337 m!107659))

(assert (=> d!26085 d!26227))

(declare-fun b!98338 () Bool)

(declare-fun e!64119 () Bool)

(declare-fun call!10054 () Bool)

(assert (=> b!98338 (= e!64119 (not call!10054))))

(declare-fun b!98339 () Bool)

(declare-fun e!64121 () Unit!2965)

(declare-fun lt!49420 () Unit!2965)

(assert (=> b!98339 (= e!64121 lt!49420)))

(declare-fun lt!49411 () ListLongMap!1551)

(assert (=> b!98339 (= lt!49411 (getCurrentListMapNoExtraKeys!102 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49407 () (_ BitVec 64))

(assert (=> b!98339 (= lt!49407 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49404 () (_ BitVec 64))

(assert (=> b!98339 (= lt!49404 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49409 () Unit!2965)

(assert (=> b!98339 (= lt!49409 (addStillContains!68 lt!49411 lt!49407 (zeroValue!2364 newMap!16) lt!49404))))

(assert (=> b!98339 (contains!805 (+!138 lt!49411 (tuple2!2353 lt!49407 (zeroValue!2364 newMap!16))) lt!49404)))

(declare-fun lt!49415 () Unit!2965)

(assert (=> b!98339 (= lt!49415 lt!49409)))

(declare-fun lt!49413 () ListLongMap!1551)

(assert (=> b!98339 (= lt!49413 (getCurrentListMapNoExtraKeys!102 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49417 () (_ BitVec 64))

(assert (=> b!98339 (= lt!49417 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49422 () (_ BitVec 64))

(assert (=> b!98339 (= lt!49422 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49402 () Unit!2965)

(assert (=> b!98339 (= lt!49402 (addApplyDifferent!68 lt!49413 lt!49417 (minValue!2364 newMap!16) lt!49422))))

(assert (=> b!98339 (= (apply!92 (+!138 lt!49413 (tuple2!2353 lt!49417 (minValue!2364 newMap!16))) lt!49422) (apply!92 lt!49413 lt!49422))))

(declare-fun lt!49414 () Unit!2965)

(assert (=> b!98339 (= lt!49414 lt!49402)))

(declare-fun lt!49419 () ListLongMap!1551)

(assert (=> b!98339 (= lt!49419 (getCurrentListMapNoExtraKeys!102 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49416 () (_ BitVec 64))

(assert (=> b!98339 (= lt!49416 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49403 () (_ BitVec 64))

(assert (=> b!98339 (= lt!49403 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!49406 () Unit!2965)

(assert (=> b!98339 (= lt!49406 (addApplyDifferent!68 lt!49419 lt!49416 (zeroValue!2364 newMap!16) lt!49403))))

(assert (=> b!98339 (= (apply!92 (+!138 lt!49419 (tuple2!2353 lt!49416 (zeroValue!2364 newMap!16))) lt!49403) (apply!92 lt!49419 lt!49403))))

(declare-fun lt!49401 () Unit!2965)

(assert (=> b!98339 (= lt!49401 lt!49406)))

(declare-fun lt!49418 () ListLongMap!1551)

(assert (=> b!98339 (= lt!49418 (getCurrentListMapNoExtraKeys!102 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49412 () (_ BitVec 64))

(assert (=> b!98339 (= lt!49412 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49405 () (_ BitVec 64))

(assert (=> b!98339 (= lt!49405 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!98339 (= lt!49420 (addApplyDifferent!68 lt!49418 lt!49412 (minValue!2364 newMap!16) lt!49405))))

(assert (=> b!98339 (= (apply!92 (+!138 lt!49418 (tuple2!2353 lt!49412 (minValue!2364 newMap!16))) lt!49405) (apply!92 lt!49418 lt!49405))))

(declare-fun b!98340 () Bool)

(declare-fun e!64120 () ListLongMap!1551)

(declare-fun call!10049 () ListLongMap!1551)

(assert (=> b!98340 (= e!64120 call!10049)))

(declare-fun bm!10045 () Bool)

(declare-fun call!10052 () ListLongMap!1551)

(assert (=> bm!10045 (= call!10049 call!10052)))

(declare-fun b!98341 () Bool)

(declare-fun e!64115 () Bool)

(declare-fun e!64116 () Bool)

(assert (=> b!98341 (= e!64115 e!64116)))

(declare-fun res!49498 () Bool)

(declare-fun call!10051 () Bool)

(assert (=> b!98341 (= res!49498 call!10051)))

(assert (=> b!98341 (=> (not res!49498) (not e!64116))))

(declare-fun b!98342 () Bool)

(declare-fun res!49494 () Bool)

(declare-fun e!64118 () Bool)

(assert (=> b!98342 (=> (not res!49494) (not e!64118))))

(assert (=> b!98342 (= res!49494 e!64115)))

(declare-fun c!16703 () Bool)

(assert (=> b!98342 (= c!16703 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26229 () Bool)

(assert (=> d!26229 e!64118))

(declare-fun res!49491 () Bool)

(assert (=> d!26229 (=> (not res!49491) (not e!64118))))

(assert (=> d!26229 (= res!49491 (or (bvsge #b00000000000000000000000000000000 (size!2264 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))))))))

(declare-fun lt!49421 () ListLongMap!1551)

(declare-fun lt!49410 () ListLongMap!1551)

(assert (=> d!26229 (= lt!49421 lt!49410)))

(declare-fun lt!49408 () Unit!2965)

(assert (=> d!26229 (= lt!49408 e!64121)))

(declare-fun c!16701 () Bool)

(declare-fun e!64117 () Bool)

(assert (=> d!26229 (= c!16701 e!64117)))

(declare-fun res!49492 () Bool)

(assert (=> d!26229 (=> (not res!49492) (not e!64117))))

(assert (=> d!26229 (= res!49492 (bvslt #b00000000000000000000000000000000 (size!2264 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))))))

(declare-fun e!64124 () ListLongMap!1551)

(assert (=> d!26229 (= lt!49410 e!64124)))

(declare-fun c!16700 () Bool)

(assert (=> d!26229 (= c!16700 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26229 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26229 (= (getCurrentListMap!472 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49421)))

(declare-fun b!98343 () Bool)

(assert (=> b!98343 (= e!64116 (= (apply!92 lt!49421 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun call!10053 () ListLongMap!1551)

(declare-fun bm!10046 () Bool)

(declare-fun call!10048 () ListLongMap!1551)

(declare-fun c!16705 () Bool)

(declare-fun call!10050 () ListLongMap!1551)

(assert (=> bm!10046 (= call!10052 (+!138 (ite c!16700 call!10050 (ite c!16705 call!10053 call!10048)) (ite (or c!16700 c!16705) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!98344 () Bool)

(assert (=> b!98344 (= e!64117 (validKeyInArray!0 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!98345 () Bool)

(declare-fun e!64125 () Bool)

(assert (=> b!98345 (= e!64125 (validKeyInArray!0 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!98346 () Bool)

(assert (=> b!98346 (= e!64115 (not call!10051))))

(declare-fun b!98347 () Bool)

(declare-fun e!64113 () ListLongMap!1551)

(assert (=> b!98347 (= e!64113 call!10049)))

(declare-fun b!98348 () Bool)

(assert (=> b!98348 (= e!64124 e!64120)))

(assert (=> b!98348 (= c!16705 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10047 () Bool)

(assert (=> bm!10047 (= call!10054 (contains!805 lt!49421 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98349 () Bool)

(declare-fun e!64114 () Bool)

(assert (=> b!98349 (= e!64114 (= (apply!92 lt!49421 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!98350 () Bool)

(declare-fun e!64123 () Bool)

(assert (=> b!98350 (= e!64123 (= (apply!92 lt!49421 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98350 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))))))

(assert (=> b!98350 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))))))

(declare-fun b!98351 () Bool)

(declare-fun res!49493 () Bool)

(assert (=> b!98351 (=> (not res!49493) (not e!64118))))

(declare-fun e!64122 () Bool)

(assert (=> b!98351 (= res!49493 e!64122)))

(declare-fun res!49497 () Bool)

(assert (=> b!98351 (=> res!49497 e!64122)))

(assert (=> b!98351 (= res!49497 (not e!64125))))

(declare-fun res!49499 () Bool)

(assert (=> b!98351 (=> (not res!49499) (not e!64125))))

(assert (=> b!98351 (= res!49499 (bvslt #b00000000000000000000000000000000 (size!2264 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))))))

(declare-fun b!98352 () Bool)

(assert (=> b!98352 (= e!64113 call!10048)))

(declare-fun b!98353 () Bool)

(assert (=> b!98353 (= e!64122 e!64123)))

(declare-fun res!49496 () Bool)

(assert (=> b!98353 (=> (not res!49496) (not e!64123))))

(assert (=> b!98353 (= res!49496 (contains!805 lt!49421 (select (arr!2014 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!98353 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))))))))

(declare-fun bm!10048 () Bool)

(assert (=> bm!10048 (= call!10053 call!10050)))

(declare-fun b!98354 () Bool)

(assert (=> b!98354 (= e!64119 e!64114)))

(declare-fun res!49495 () Bool)

(assert (=> b!98354 (= res!49495 call!10054)))

(assert (=> b!98354 (=> (not res!49495) (not e!64114))))

(declare-fun bm!10049 () Bool)

(assert (=> bm!10049 (= call!10048 call!10053)))

(declare-fun b!98355 () Bool)

(declare-fun Unit!2995 () Unit!2965)

(assert (=> b!98355 (= e!64121 Unit!2995)))

(declare-fun b!98356 () Bool)

(declare-fun c!16702 () Bool)

(assert (=> b!98356 (= c!16702 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98356 (= e!64120 e!64113)))

(declare-fun bm!10050 () Bool)

(assert (=> bm!10050 (= call!10050 (getCurrentListMapNoExtraKeys!102 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!98357 () Bool)

(assert (=> b!98357 (= e!64124 (+!138 call!10052 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun bm!10051 () Bool)

(assert (=> bm!10051 (= call!10051 (contains!805 lt!49421 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98358 () Bool)

(assert (=> b!98358 (= e!64118 e!64119)))

(declare-fun c!16704 () Bool)

(assert (=> b!98358 (= c!16704 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26229 c!16700) b!98357))

(assert (= (and d!26229 (not c!16700)) b!98348))

(assert (= (and b!98348 c!16705) b!98340))

(assert (= (and b!98348 (not c!16705)) b!98356))

(assert (= (and b!98356 c!16702) b!98347))

(assert (= (and b!98356 (not c!16702)) b!98352))

(assert (= (or b!98347 b!98352) bm!10049))

(assert (= (or b!98340 bm!10049) bm!10048))

(assert (= (or b!98340 b!98347) bm!10045))

(assert (= (or b!98357 bm!10048) bm!10050))

(assert (= (or b!98357 bm!10045) bm!10046))

(assert (= (and d!26229 res!49492) b!98344))

(assert (= (and d!26229 c!16701) b!98339))

(assert (= (and d!26229 (not c!16701)) b!98355))

(assert (= (and d!26229 res!49491) b!98351))

(assert (= (and b!98351 res!49499) b!98345))

(assert (= (and b!98351 (not res!49497)) b!98353))

(assert (= (and b!98353 res!49496) b!98350))

(assert (= (and b!98351 res!49493) b!98342))

(assert (= (and b!98342 c!16703) b!98341))

(assert (= (and b!98342 (not c!16703)) b!98346))

(assert (= (and b!98341 res!49498) b!98343))

(assert (= (or b!98341 b!98346) bm!10051))

(assert (= (and b!98342 res!49494) b!98358))

(assert (= (and b!98358 c!16704) b!98354))

(assert (= (and b!98358 (not c!16704)) b!98338))

(assert (= (and b!98354 res!49495) b!98349))

(assert (= (or b!98354 b!98338) bm!10047))

(declare-fun b_lambda!4387 () Bool)

(assert (=> (not b_lambda!4387) (not b!98350)))

(assert (=> b!98350 t!5581))

(declare-fun b_and!6041 () Bool)

(assert (= b_and!6037 (and (=> t!5581 result!3283) b_and!6041)))

(assert (=> b!98350 t!5583))

(declare-fun b_and!6043 () Bool)

(assert (= b_and!6039 (and (=> t!5583 result!3285) b_and!6043)))

(assert (=> b!98345 m!107619))

(assert (=> b!98345 m!107619))

(assert (=> b!98345 m!107621))

(declare-fun m!107661 () Bool)

(assert (=> bm!10046 m!107661))

(declare-fun m!107663 () Bool)

(assert (=> b!98343 m!107663))

(assert (=> b!98344 m!107619))

(assert (=> b!98344 m!107619))

(assert (=> b!98344 m!107621))

(declare-fun m!107665 () Bool)

(assert (=> b!98339 m!107665))

(declare-fun m!107667 () Bool)

(assert (=> b!98339 m!107667))

(declare-fun m!107669 () Bool)

(assert (=> b!98339 m!107669))

(declare-fun m!107671 () Bool)

(assert (=> b!98339 m!107671))

(declare-fun m!107673 () Bool)

(assert (=> b!98339 m!107673))

(assert (=> b!98339 m!107671))

(declare-fun m!107675 () Bool)

(assert (=> b!98339 m!107675))

(declare-fun m!107677 () Bool)

(assert (=> b!98339 m!107677))

(declare-fun m!107679 () Bool)

(assert (=> b!98339 m!107679))

(assert (=> b!98339 m!107667))

(declare-fun m!107681 () Bool)

(assert (=> b!98339 m!107681))

(declare-fun m!107683 () Bool)

(assert (=> b!98339 m!107683))

(declare-fun m!107685 () Bool)

(assert (=> b!98339 m!107685))

(declare-fun m!107687 () Bool)

(assert (=> b!98339 m!107687))

(declare-fun m!107689 () Bool)

(assert (=> b!98339 m!107689))

(declare-fun m!107691 () Bool)

(assert (=> b!98339 m!107691))

(assert (=> b!98339 m!107681))

(assert (=> b!98339 m!107619))

(declare-fun m!107693 () Bool)

(assert (=> b!98339 m!107693))

(assert (=> b!98339 m!107677))

(declare-fun m!107695 () Bool)

(assert (=> b!98339 m!107695))

(declare-fun m!107697 () Bool)

(assert (=> b!98349 m!107697))

(declare-fun m!107699 () Bool)

(assert (=> bm!10047 m!107699))

(assert (=> bm!10050 m!107675))

(assert (=> d!26229 m!106929))

(assert (=> b!98353 m!107619))

(assert (=> b!98353 m!107619))

(declare-fun m!107701 () Bool)

(assert (=> b!98353 m!107701))

(declare-fun m!107703 () Bool)

(assert (=> bm!10051 m!107703))

(declare-fun m!107705 () Bool)

(assert (=> b!98357 m!107705))

(declare-fun m!107707 () Bool)

(assert (=> b!98350 m!107707))

(assert (=> b!98350 m!106939))

(declare-fun m!107709 () Bool)

(assert (=> b!98350 m!107709))

(assert (=> b!98350 m!106939))

(assert (=> b!98350 m!107619))

(assert (=> b!98350 m!107619))

(declare-fun m!107711 () Bool)

(assert (=> b!98350 m!107711))

(assert (=> b!98350 m!107707))

(assert (=> d!26085 d!26229))

(declare-fun d!26231 () Bool)

(declare-fun e!64131 () Bool)

(assert (=> d!26231 e!64131))

(declare-fun res!49508 () Bool)

(assert (=> d!26231 (=> (not res!49508) (not e!64131))))

(assert (=> d!26231 (= res!49508 (and (bvsge (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000000) (bvslt (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (size!2264 (_keys!4171 newMap!16)))))))

(declare-fun lt!49425 () Unit!2965)

(declare-fun choose!1 (array!4240 (_ BitVec 32) (_ BitVec 64)) Unit!2965)

(assert (=> d!26231 (= lt!49425 (choose!1 (_keys!4171 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun e!64130 () Bool)

(assert (=> d!26231 e!64130))

(declare-fun res!49511 () Bool)

(assert (=> d!26231 (=> (not res!49511) (not e!64130))))

(assert (=> d!26231 (= res!49511 (and (bvsge (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) #b00000000000000000000000000000000) (bvslt (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (size!2264 (_keys!4171 newMap!16)))))))

(assert (=> d!26231 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4171 newMap!16) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) lt!49425)))

(declare-fun b!98369 () Bool)

(assert (=> b!98369 (= e!64130 (bvslt (size!2264 (_keys!4171 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!98367 () Bool)

(declare-fun res!49510 () Bool)

(assert (=> b!98367 (=> (not res!49510) (not e!64130))))

(assert (=> b!98367 (= res!49510 (not (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985))))))))

(declare-fun b!98368 () Bool)

(declare-fun res!49509 () Bool)

(assert (=> b!98368 (=> (not res!49509) (not e!64130))))

(assert (=> b!98368 (= res!49509 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!98370 () Bool)

(assert (=> b!98370 (= e!64131 (= (arrayCountValidKeys!0 (array!4241 (store (arr!2014 (_keys!4171 newMap!16)) (ite c!16555 (index!3198 lt!48985) (index!3195 lt!48985)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (size!2264 (_keys!4171 newMap!16))) #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4171 newMap!16) #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) #b00000000000000000000000000000001)))))

(assert (= (and d!26231 res!49511) b!98367))

(assert (= (and b!98367 res!49510) b!98368))

(assert (= (and b!98368 res!49509) b!98369))

(assert (= (and d!26231 res!49508) b!98370))

(assert (=> d!26231 m!106609))

(declare-fun m!107713 () Bool)

(assert (=> d!26231 m!107713))

(declare-fun m!107715 () Bool)

(assert (=> b!98367 m!107715))

(assert (=> b!98367 m!107715))

(declare-fun m!107717 () Bool)

(assert (=> b!98367 m!107717))

(assert (=> b!98368 m!106609))

(assert (=> b!98368 m!106819))

(assert (=> b!98370 m!107115))

(assert (=> b!98370 m!107089))

(assert (=> b!98370 m!106681))

(assert (=> d!26085 d!26231))

(assert (=> b!97862 d!26145))

(declare-fun b!98371 () Bool)

(declare-fun e!64133 () Bool)

(declare-fun lt!49427 () ListLongMap!1551)

(assert (=> b!98371 (= e!64133 (isEmpty!362 lt!49427))))

(declare-fun b!98372 () Bool)

(declare-fun res!49512 () Bool)

(declare-fun e!64136 () Bool)

(assert (=> b!98372 (=> (not res!49512) (not e!64136))))

(assert (=> b!98372 (= res!49512 (not (contains!805 lt!49427 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98373 () Bool)

(declare-fun e!64135 () Bool)

(assert (=> b!98373 (= e!64136 e!64135)))

(declare-fun c!16707 () Bool)

(declare-fun e!64134 () Bool)

(assert (=> b!98373 (= c!16707 e!64134)))

(declare-fun res!49513 () Bool)

(assert (=> b!98373 (=> (not res!49513) (not e!64134))))

(assert (=> b!98373 (= res!49513 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98374 () Bool)

(declare-fun e!64137 () Bool)

(assert (=> b!98374 (= e!64135 e!64137)))

(assert (=> b!98374 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun res!49514 () Bool)

(assert (=> b!98374 (= res!49514 (contains!805 lt!49427 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98374 (=> (not res!49514) (not e!64137))))

(declare-fun b!98376 () Bool)

(declare-fun lt!49428 () Unit!2965)

(declare-fun lt!49426 () Unit!2965)

(assert (=> b!98376 (= lt!49428 lt!49426)))

(declare-fun lt!49432 () (_ BitVec 64))

(declare-fun lt!49431 () V!3155)

(declare-fun lt!49430 () (_ BitVec 64))

(declare-fun lt!49429 () ListLongMap!1551)

(assert (=> b!98376 (not (contains!805 (+!138 lt!49429 (tuple2!2353 lt!49430 lt!49431)) lt!49432))))

(assert (=> b!98376 (= lt!49426 (addStillNotContains!42 lt!49429 lt!49430 lt!49431 lt!49432))))

(assert (=> b!98376 (= lt!49432 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98376 (= lt!49431 (get!1296 (select (arr!2015 (ite c!16562 (_values!2464 newMap!16) lt!48976)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98376 (= lt!49430 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!10055 () ListLongMap!1551)

(assert (=> b!98376 (= lt!49429 call!10055)))

(declare-fun e!64132 () ListLongMap!1551)

(assert (=> b!98376 (= e!64132 (+!138 call!10055 (tuple2!2353 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (get!1296 (select (arr!2015 (ite c!16562 (_values!2464 newMap!16) lt!48976)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98377 () Bool)

(assert (=> b!98377 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(assert (=> b!98377 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (ite c!16562 (_values!2464 newMap!16) lt!48976))))))

(assert (=> b!98377 (= e!64137 (= (apply!92 lt!49427 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 (ite c!16562 (_values!2464 newMap!16) lt!48976)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98378 () Bool)

(assert (=> b!98378 (= e!64132 call!10055)))

(declare-fun b!98379 () Bool)

(declare-fun e!64138 () ListLongMap!1551)

(assert (=> b!98379 (= e!64138 e!64132)))

(declare-fun c!16706 () Bool)

(assert (=> b!98379 (= c!16706 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98380 () Bool)

(assert (=> b!98380 (= e!64133 (= lt!49427 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite c!16562 (_values!2464 newMap!16) lt!48976) (mask!6578 newMap!16) (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (minValue!2364 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16))))))

(declare-fun b!98381 () Bool)

(assert (=> b!98381 (= e!64134 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98381 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!98382 () Bool)

(assert (=> b!98382 (= e!64135 e!64133)))

(declare-fun c!16708 () Bool)

(assert (=> b!98382 (= c!16708 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun bm!10052 () Bool)

(assert (=> bm!10052 (= call!10055 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite c!16562 (_values!2464 newMap!16) lt!48976) (mask!6578 newMap!16) (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (minValue!2364 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16)))))

(declare-fun d!26233 () Bool)

(assert (=> d!26233 e!64136))

(declare-fun res!49515 () Bool)

(assert (=> d!26233 (=> (not res!49515) (not e!64136))))

(assert (=> d!26233 (= res!49515 (not (contains!805 lt!49427 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26233 (= lt!49427 e!64138)))

(declare-fun c!16709 () Bool)

(assert (=> d!26233 (= c!16709 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26233 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26233 (= (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite c!16562 (_values!2464 newMap!16) lt!48976) (mask!6578 newMap!16) (ite (and c!16562 c!16560) lt!48964 (extraKeys!2302 newMap!16)) (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49427)))

(declare-fun b!98375 () Bool)

(assert (=> b!98375 (= e!64138 (ListLongMap!1552 Nil!1609))))

(assert (= (and d!26233 c!16709) b!98375))

(assert (= (and d!26233 (not c!16709)) b!98379))

(assert (= (and b!98379 c!16706) b!98376))

(assert (= (and b!98379 (not c!16706)) b!98378))

(assert (= (or b!98376 b!98378) bm!10052))

(assert (= (and d!26233 res!49515) b!98372))

(assert (= (and b!98372 res!49512) b!98373))

(assert (= (and b!98373 res!49513) b!98381))

(assert (= (and b!98373 c!16707) b!98374))

(assert (= (and b!98373 (not c!16707)) b!98382))

(assert (= (and b!98374 res!49514) b!98377))

(assert (= (and b!98382 c!16708) b!98380))

(assert (= (and b!98382 (not c!16708)) b!98371))

(declare-fun b_lambda!4389 () Bool)

(assert (=> (not b_lambda!4389) (not b!98376)))

(assert (=> b!98376 t!5581))

(declare-fun b_and!6045 () Bool)

(assert (= b_and!6041 (and (=> t!5581 result!3283) b_and!6045)))

(assert (=> b!98376 t!5583))

(declare-fun b_and!6047 () Bool)

(assert (= b_and!6043 (and (=> t!5583 result!3285) b_and!6047)))

(declare-fun b_lambda!4391 () Bool)

(assert (=> (not b_lambda!4391) (not b!98377)))

(assert (=> b!98377 t!5581))

(declare-fun b_and!6049 () Bool)

(assert (= b_and!6045 (and (=> t!5581 result!3283) b_and!6049)))

(assert (=> b!98377 t!5583))

(declare-fun b_and!6051 () Bool)

(assert (= b_and!6047 (and (=> t!5583 result!3285) b_and!6051)))

(declare-fun m!107719 () Bool)

(assert (=> b!98371 m!107719))

(assert (=> b!98381 m!106867))

(assert (=> b!98381 m!106867))

(assert (=> b!98381 m!106887))

(declare-fun m!107721 () Bool)

(assert (=> d!26233 m!107721))

(assert (=> d!26233 m!106929))

(declare-fun m!107723 () Bool)

(assert (=> b!98376 m!107723))

(declare-fun m!107725 () Bool)

(assert (=> b!98376 m!107725))

(assert (=> b!98376 m!107723))

(declare-fun m!107727 () Bool)

(assert (=> b!98376 m!107727))

(assert (=> b!98376 m!106867))

(assert (=> b!98376 m!106939))

(assert (=> b!98376 m!107353))

(assert (=> b!98376 m!106939))

(assert (=> b!98376 m!107355))

(assert (=> b!98376 m!107353))

(declare-fun m!107729 () Bool)

(assert (=> b!98376 m!107729))

(declare-fun m!107731 () Bool)

(assert (=> b!98372 m!107731))

(assert (=> b!98379 m!106867))

(assert (=> b!98379 m!106867))

(assert (=> b!98379 m!106887))

(assert (=> b!98377 m!106867))

(declare-fun m!107733 () Bool)

(assert (=> b!98377 m!107733))

(assert (=> b!98377 m!106867))

(assert (=> b!98377 m!106939))

(assert (=> b!98377 m!107353))

(assert (=> b!98377 m!106939))

(assert (=> b!98377 m!107355))

(assert (=> b!98377 m!107353))

(declare-fun m!107735 () Bool)

(assert (=> bm!10052 m!107735))

(assert (=> b!98380 m!107735))

(assert (=> b!98374 m!106867))

(assert (=> b!98374 m!106867))

(declare-fun m!107737 () Bool)

(assert (=> b!98374 m!107737))

(assert (=> bm!10012 d!26233))

(declare-fun d!26235 () Bool)

(assert (=> d!26235 (arrayContainsKey!0 (_keys!4171 newMap!16) lt!49292 #b00000000000000000000000000000000)))

(declare-fun lt!49433 () Unit!2965)

(assert (=> d!26235 (= lt!49433 (choose!13 (_keys!4171 newMap!16) lt!49292 #b00000000000000000000000000000000))))

(assert (=> d!26235 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!26235 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4171 newMap!16) lt!49292 #b00000000000000000000000000000000) lt!49433)))

(declare-fun bs!4048 () Bool)

(assert (= bs!4048 d!26235))

(assert (=> bs!4048 m!107377))

(declare-fun m!107739 () Bool)

(assert (=> bs!4048 m!107739))

(assert (=> b!98168 d!26235))

(declare-fun d!26237 () Bool)

(declare-fun res!49516 () Bool)

(declare-fun e!64139 () Bool)

(assert (=> d!26237 (=> res!49516 e!64139)))

(assert (=> d!26237 (= res!49516 (= (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) lt!49292))))

(assert (=> d!26237 (= (arrayContainsKey!0 (_keys!4171 newMap!16) lt!49292 #b00000000000000000000000000000000) e!64139)))

(declare-fun b!98383 () Bool)

(declare-fun e!64140 () Bool)

(assert (=> b!98383 (= e!64139 e!64140)))

(declare-fun res!49517 () Bool)

(assert (=> b!98383 (=> (not res!49517) (not e!64140))))

(assert (=> b!98383 (= res!49517 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98384 () Bool)

(assert (=> b!98384 (= e!64140 (arrayContainsKey!0 (_keys!4171 newMap!16) lt!49292 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26237 (not res!49516)) b!98383))

(assert (= (and b!98383 res!49517) b!98384))

(assert (=> d!26237 m!106867))

(declare-fun m!107741 () Bool)

(assert (=> b!98384 m!107741))

(assert (=> b!98168 d!26237))

(declare-fun b!98385 () Bool)

(declare-fun e!64143 () SeekEntryResult!263)

(assert (=> b!98385 (= e!64143 Undefined!263)))

(declare-fun d!26239 () Bool)

(declare-fun lt!49436 () SeekEntryResult!263)

(assert (=> d!26239 (and (or ((_ is Undefined!263) lt!49436) (not ((_ is Found!263) lt!49436)) (and (bvsge (index!3196 lt!49436) #b00000000000000000000000000000000) (bvslt (index!3196 lt!49436) (size!2264 (_keys!4171 newMap!16))))) (or ((_ is Undefined!263) lt!49436) ((_ is Found!263) lt!49436) (not ((_ is MissingZero!263) lt!49436)) (and (bvsge (index!3195 lt!49436) #b00000000000000000000000000000000) (bvslt (index!3195 lt!49436) (size!2264 (_keys!4171 newMap!16))))) (or ((_ is Undefined!263) lt!49436) ((_ is Found!263) lt!49436) ((_ is MissingZero!263) lt!49436) (not ((_ is MissingVacant!263) lt!49436)) (and (bvsge (index!3198 lt!49436) #b00000000000000000000000000000000) (bvslt (index!3198 lt!49436) (size!2264 (_keys!4171 newMap!16))))) (or ((_ is Undefined!263) lt!49436) (ite ((_ is Found!263) lt!49436) (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!49436)) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!263) lt!49436) (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3195 lt!49436)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!263) lt!49436) (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3198 lt!49436)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26239 (= lt!49436 e!64143)))

(declare-fun c!16712 () Bool)

(declare-fun lt!49434 () SeekEntryResult!263)

(assert (=> d!26239 (= c!16712 (and ((_ is Intermediate!263) lt!49434) (undefined!1075 lt!49434)))))

(assert (=> d!26239 (= lt!49434 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (mask!6578 newMap!16)) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (=> d!26239 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26239 (= (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (_keys!4171 newMap!16) (mask!6578 newMap!16)) lt!49436)))

(declare-fun b!98386 () Bool)

(declare-fun e!64142 () SeekEntryResult!263)

(assert (=> b!98386 (= e!64142 (Found!263 (index!3197 lt!49434)))))

(declare-fun b!98387 () Bool)

(declare-fun e!64141 () SeekEntryResult!263)

(assert (=> b!98387 (= e!64141 (MissingZero!263 (index!3197 lt!49434)))))

(declare-fun b!98388 () Bool)

(assert (=> b!98388 (= e!64143 e!64142)))

(declare-fun lt!49435 () (_ BitVec 64))

(assert (=> b!98388 (= lt!49435 (select (arr!2014 (_keys!4171 newMap!16)) (index!3197 lt!49434)))))

(declare-fun c!16711 () Bool)

(assert (=> b!98388 (= c!16711 (= lt!49435 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98389 () Bool)

(assert (=> b!98389 (= e!64141 (seekKeyOrZeroReturnVacant!0 (x!12969 lt!49434) (index!3197 lt!49434) (index!3197 lt!49434) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!98390 () Bool)

(declare-fun c!16710 () Bool)

(assert (=> b!98390 (= c!16710 (= lt!49435 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98390 (= e!64142 e!64141)))

(assert (= (and d!26239 c!16712) b!98385))

(assert (= (and d!26239 (not c!16712)) b!98388))

(assert (= (and b!98388 c!16711) b!98386))

(assert (= (and b!98388 (not c!16711)) b!98390))

(assert (= (and b!98390 c!16710) b!98387))

(assert (= (and b!98390 (not c!16710)) b!98389))

(declare-fun m!107743 () Bool)

(assert (=> d!26239 m!107743))

(assert (=> d!26239 m!106867))

(declare-fun m!107745 () Bool)

(assert (=> d!26239 m!107745))

(declare-fun m!107747 () Bool)

(assert (=> d!26239 m!107747))

(assert (=> d!26239 m!107745))

(assert (=> d!26239 m!106867))

(declare-fun m!107749 () Bool)

(assert (=> d!26239 m!107749))

(declare-fun m!107751 () Bool)

(assert (=> d!26239 m!107751))

(assert (=> d!26239 m!106929))

(declare-fun m!107753 () Bool)

(assert (=> b!98388 m!107753))

(assert (=> b!98389 m!106867))

(declare-fun m!107755 () Bool)

(assert (=> b!98389 m!107755))

(assert (=> b!98168 d!26239))

(declare-fun d!26241 () Bool)

(assert (=> d!26241 (= (get!1300 (getValueByKey!149 (toList!791 lt!48888) lt!48875)) (v!2805 (getValueByKey!149 (toList!791 lt!48888) lt!48875)))))

(assert (=> d!26105 d!26241))

(declare-fun b!98392 () Bool)

(declare-fun e!64144 () Option!155)

(declare-fun e!64145 () Option!155)

(assert (=> b!98392 (= e!64144 e!64145)))

(declare-fun c!16714 () Bool)

(assert (=> b!98392 (= c!16714 (and ((_ is Cons!1608) (toList!791 lt!48888)) (not (= (_1!1186 (h!2202 (toList!791 lt!48888))) lt!48875))))))

(declare-fun b!98394 () Bool)

(assert (=> b!98394 (= e!64145 None!153)))

(declare-fun d!26243 () Bool)

(declare-fun c!16713 () Bool)

(assert (=> d!26243 (= c!16713 (and ((_ is Cons!1608) (toList!791 lt!48888)) (= (_1!1186 (h!2202 (toList!791 lt!48888))) lt!48875)))))

(assert (=> d!26243 (= (getValueByKey!149 (toList!791 lt!48888) lt!48875) e!64144)))

(declare-fun b!98393 () Bool)

(assert (=> b!98393 (= e!64145 (getValueByKey!149 (t!5574 (toList!791 lt!48888)) lt!48875))))

(declare-fun b!98391 () Bool)

(assert (=> b!98391 (= e!64144 (Some!154 (_2!1186 (h!2202 (toList!791 lt!48888)))))))

(assert (= (and d!26243 c!16713) b!98391))

(assert (= (and d!26243 (not c!16713)) b!98392))

(assert (= (and b!98392 c!16714) b!98393))

(assert (= (and b!98392 (not c!16714)) b!98394))

(declare-fun m!107757 () Bool)

(assert (=> b!98393 m!107757))

(assert (=> d!26105 d!26243))

(assert (=> d!26045 d!26185))

(declare-fun d!26245 () Bool)

(declare-fun e!64147 () Bool)

(assert (=> d!26245 e!64147))

(declare-fun res!49518 () Bool)

(assert (=> d!26245 (=> res!49518 e!64147)))

(declare-fun lt!49439 () Bool)

(assert (=> d!26245 (= res!49518 (not lt!49439))))

(declare-fun lt!49440 () Bool)

(assert (=> d!26245 (= lt!49439 lt!49440)))

(declare-fun lt!49437 () Unit!2965)

(declare-fun e!64146 () Unit!2965)

(assert (=> d!26245 (= lt!49437 e!64146)))

(declare-fun c!16715 () Bool)

(assert (=> d!26245 (= c!16715 lt!49440)))

(assert (=> d!26245 (= lt!49440 (containsKey!153 (toList!791 (+!138 lt!49207 (tuple2!2353 lt!49208 lt!49209))) lt!49210))))

(assert (=> d!26245 (= (contains!805 (+!138 lt!49207 (tuple2!2353 lt!49208 lt!49209)) lt!49210) lt!49439)))

(declare-fun b!98395 () Bool)

(declare-fun lt!49438 () Unit!2965)

(assert (=> b!98395 (= e!64146 lt!49438)))

(assert (=> b!98395 (= lt!49438 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 (+!138 lt!49207 (tuple2!2353 lt!49208 lt!49209))) lt!49210))))

(assert (=> b!98395 (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!49207 (tuple2!2353 lt!49208 lt!49209))) lt!49210))))

(declare-fun b!98396 () Bool)

(declare-fun Unit!2996 () Unit!2965)

(assert (=> b!98396 (= e!64146 Unit!2996)))

(declare-fun b!98397 () Bool)

(assert (=> b!98397 (= e!64147 (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!49207 (tuple2!2353 lt!49208 lt!49209))) lt!49210)))))

(assert (= (and d!26245 c!16715) b!98395))

(assert (= (and d!26245 (not c!16715)) b!98396))

(assert (= (and d!26245 (not res!49518)) b!98397))

(declare-fun m!107759 () Bool)

(assert (=> d!26245 m!107759))

(declare-fun m!107761 () Bool)

(assert (=> b!98395 m!107761))

(declare-fun m!107763 () Bool)

(assert (=> b!98395 m!107763))

(assert (=> b!98395 m!107763))

(declare-fun m!107765 () Bool)

(assert (=> b!98395 m!107765))

(assert (=> b!98397 m!107763))

(assert (=> b!98397 m!107763))

(assert (=> b!98397 m!107765))

(assert (=> b!98063 d!26245))

(declare-fun d!26247 () Bool)

(assert (=> d!26247 (not (contains!805 (+!138 lt!49207 (tuple2!2353 lt!49208 lt!49209)) lt!49210))))

(declare-fun lt!49443 () Unit!2965)

(declare-fun choose!607 (ListLongMap!1551 (_ BitVec 64) V!3155 (_ BitVec 64)) Unit!2965)

(assert (=> d!26247 (= lt!49443 (choose!607 lt!49207 lt!49208 lt!49209 lt!49210))))

(declare-fun e!64150 () Bool)

(assert (=> d!26247 e!64150))

(declare-fun res!49521 () Bool)

(assert (=> d!26247 (=> (not res!49521) (not e!64150))))

(assert (=> d!26247 (= res!49521 (not (contains!805 lt!49207 lt!49210)))))

(assert (=> d!26247 (= (addStillNotContains!42 lt!49207 lt!49208 lt!49209 lt!49210) lt!49443)))

(declare-fun b!98401 () Bool)

(assert (=> b!98401 (= e!64150 (not (= lt!49208 lt!49210)))))

(assert (= (and d!26247 res!49521) b!98401))

(assert (=> d!26247 m!107143))

(assert (=> d!26247 m!107143))

(assert (=> d!26247 m!107145))

(declare-fun m!107767 () Bool)

(assert (=> d!26247 m!107767))

(declare-fun m!107769 () Bool)

(assert (=> d!26247 m!107769))

(assert (=> b!98063 d!26247))

(declare-fun d!26249 () Bool)

(declare-fun e!64151 () Bool)

(assert (=> d!26249 e!64151))

(declare-fun res!49523 () Bool)

(assert (=> d!26249 (=> (not res!49523) (not e!64151))))

(declare-fun lt!49444 () ListLongMap!1551)

(assert (=> d!26249 (= res!49523 (contains!805 lt!49444 (_1!1186 (tuple2!2353 lt!49208 lt!49209))))))

(declare-fun lt!49446 () List!1612)

(assert (=> d!26249 (= lt!49444 (ListLongMap!1552 lt!49446))))

(declare-fun lt!49447 () Unit!2965)

(declare-fun lt!49445 () Unit!2965)

(assert (=> d!26249 (= lt!49447 lt!49445)))

(assert (=> d!26249 (= (getValueByKey!149 lt!49446 (_1!1186 (tuple2!2353 lt!49208 lt!49209))) (Some!154 (_2!1186 (tuple2!2353 lt!49208 lt!49209))))))

(assert (=> d!26249 (= lt!49445 (lemmaContainsTupThenGetReturnValue!67 lt!49446 (_1!1186 (tuple2!2353 lt!49208 lt!49209)) (_2!1186 (tuple2!2353 lt!49208 lt!49209))))))

(assert (=> d!26249 (= lt!49446 (insertStrictlySorted!69 (toList!791 lt!49207) (_1!1186 (tuple2!2353 lt!49208 lt!49209)) (_2!1186 (tuple2!2353 lt!49208 lt!49209))))))

(assert (=> d!26249 (= (+!138 lt!49207 (tuple2!2353 lt!49208 lt!49209)) lt!49444)))

(declare-fun b!98402 () Bool)

(declare-fun res!49522 () Bool)

(assert (=> b!98402 (=> (not res!49522) (not e!64151))))

(assert (=> b!98402 (= res!49522 (= (getValueByKey!149 (toList!791 lt!49444) (_1!1186 (tuple2!2353 lt!49208 lt!49209))) (Some!154 (_2!1186 (tuple2!2353 lt!49208 lt!49209)))))))

(declare-fun b!98403 () Bool)

(assert (=> b!98403 (= e!64151 (contains!808 (toList!791 lt!49444) (tuple2!2353 lt!49208 lt!49209)))))

(assert (= (and d!26249 res!49523) b!98402))

(assert (= (and b!98402 res!49522) b!98403))

(declare-fun m!107771 () Bool)

(assert (=> d!26249 m!107771))

(declare-fun m!107773 () Bool)

(assert (=> d!26249 m!107773))

(declare-fun m!107775 () Bool)

(assert (=> d!26249 m!107775))

(declare-fun m!107777 () Bool)

(assert (=> d!26249 m!107777))

(declare-fun m!107779 () Bool)

(assert (=> b!98402 m!107779))

(declare-fun m!107781 () Bool)

(assert (=> b!98403 m!107781))

(assert (=> b!98063 d!26249))

(declare-fun d!26251 () Bool)

(declare-fun e!64152 () Bool)

(assert (=> d!26251 e!64152))

(declare-fun res!49525 () Bool)

(assert (=> d!26251 (=> (not res!49525) (not e!64152))))

(declare-fun lt!49448 () ListLongMap!1551)

(assert (=> d!26251 (= res!49525 (contains!805 lt!49448 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49450 () List!1612)

(assert (=> d!26251 (= lt!49448 (ListLongMap!1552 lt!49450))))

(declare-fun lt!49451 () Unit!2965)

(declare-fun lt!49449 () Unit!2965)

(assert (=> d!26251 (= lt!49451 lt!49449)))

(assert (=> d!26251 (= (getValueByKey!149 lt!49450 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26251 (= lt!49449 (lemmaContainsTupThenGetReturnValue!67 lt!49450 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26251 (= lt!49450 (insertStrictlySorted!69 (toList!791 call!10002) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26251 (= (+!138 call!10002 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49448)))

(declare-fun b!98404 () Bool)

(declare-fun res!49524 () Bool)

(assert (=> b!98404 (=> (not res!49524) (not e!64152))))

(assert (=> b!98404 (= res!49524 (= (getValueByKey!149 (toList!791 lt!49448) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98405 () Bool)

(assert (=> b!98405 (= e!64152 (contains!808 (toList!791 lt!49448) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26251 res!49525) b!98404))

(assert (= (and b!98404 res!49524) b!98405))

(declare-fun m!107783 () Bool)

(assert (=> d!26251 m!107783))

(declare-fun m!107785 () Bool)

(assert (=> d!26251 m!107785))

(declare-fun m!107787 () Bool)

(assert (=> d!26251 m!107787))

(declare-fun m!107789 () Bool)

(assert (=> d!26251 m!107789))

(declare-fun m!107791 () Bool)

(assert (=> b!98404 m!107791))

(declare-fun m!107793 () Bool)

(assert (=> b!98405 m!107793))

(assert (=> b!98063 d!26251))

(assert (=> b!98063 d!26049))

(assert (=> bm!10005 d!26037))

(declare-fun d!26253 () Bool)

(declare-fun e!64154 () Bool)

(assert (=> d!26253 e!64154))

(declare-fun res!49526 () Bool)

(assert (=> d!26253 (=> res!49526 e!64154)))

(declare-fun lt!49454 () Bool)

(assert (=> d!26253 (= res!49526 (not lt!49454))))

(declare-fun lt!49455 () Bool)

(assert (=> d!26253 (= lt!49454 lt!49455)))

(declare-fun lt!49452 () Unit!2965)

(declare-fun e!64153 () Unit!2965)

(assert (=> d!26253 (= lt!49452 e!64153)))

(declare-fun c!16716 () Bool)

(assert (=> d!26253 (= c!16716 lt!49455)))

(assert (=> d!26253 (= lt!49455 (containsKey!153 (toList!791 lt!49041) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26253 (= (contains!805 lt!49041 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49454)))

(declare-fun b!98406 () Bool)

(declare-fun lt!49453 () Unit!2965)

(assert (=> b!98406 (= e!64153 lt!49453)))

(assert (=> b!98406 (= lt!49453 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49041) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98406 (isDefined!103 (getValueByKey!149 (toList!791 lt!49041) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98407 () Bool)

(declare-fun Unit!2997 () Unit!2965)

(assert (=> b!98407 (= e!64153 Unit!2997)))

(declare-fun b!98408 () Bool)

(assert (=> b!98408 (= e!64154 (isDefined!103 (getValueByKey!149 (toList!791 lt!49041) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26253 c!16716) b!98406))

(assert (= (and d!26253 (not c!16716)) b!98407))

(assert (= (and d!26253 (not res!49526)) b!98408))

(declare-fun m!107795 () Bool)

(assert (=> d!26253 m!107795))

(declare-fun m!107797 () Bool)

(assert (=> b!98406 m!107797))

(declare-fun m!107799 () Bool)

(assert (=> b!98406 m!107799))

(assert (=> b!98406 m!107799))

(declare-fun m!107801 () Bool)

(assert (=> b!98406 m!107801))

(assert (=> b!98408 m!107799))

(assert (=> b!98408 m!107799))

(assert (=> b!98408 m!107801))

(assert (=> bm!9973 d!26253))

(declare-fun b!98410 () Bool)

(declare-fun e!64155 () Option!155)

(declare-fun e!64156 () Option!155)

(assert (=> b!98410 (= e!64155 e!64156)))

(declare-fun c!16718 () Bool)

(assert (=> b!98410 (= c!16718 (and ((_ is Cons!1608) (toList!791 lt!49222)) (not (= (_1!1186 (h!2202 (toList!791 lt!49222))) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98412 () Bool)

(assert (=> b!98412 (= e!64156 None!153)))

(declare-fun c!16717 () Bool)

(declare-fun d!26255 () Bool)

(assert (=> d!26255 (= c!16717 (and ((_ is Cons!1608) (toList!791 lt!49222)) (= (_1!1186 (h!2202 (toList!791 lt!49222))) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26255 (= (getValueByKey!149 (toList!791 lt!49222) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) e!64155)))

(declare-fun b!98411 () Bool)

(assert (=> b!98411 (= e!64156 (getValueByKey!149 (t!5574 (toList!791 lt!49222)) (_1!1186 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98409 () Bool)

(assert (=> b!98409 (= e!64155 (Some!154 (_2!1186 (h!2202 (toList!791 lt!49222)))))))

(assert (= (and d!26255 c!16717) b!98409))

(assert (= (and d!26255 (not c!16717)) b!98410))

(assert (= (and b!98410 c!16718) b!98411))

(assert (= (and b!98410 (not c!16718)) b!98412))

(declare-fun m!107803 () Bool)

(assert (=> b!98411 m!107803))

(assert (=> b!98083 d!26255))

(declare-fun d!26257 () Bool)

(declare-fun e!64157 () Bool)

(assert (=> d!26257 e!64157))

(declare-fun res!49528 () Bool)

(assert (=> d!26257 (=> (not res!49528) (not e!64157))))

(declare-fun lt!49456 () ListLongMap!1551)

(assert (=> d!26257 (= res!49528 (contains!805 lt!49456 (_1!1186 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49458 () List!1612)

(assert (=> d!26257 (= lt!49456 (ListLongMap!1552 lt!49458))))

(declare-fun lt!49459 () Unit!2965)

(declare-fun lt!49457 () Unit!2965)

(assert (=> d!26257 (= lt!49459 lt!49457)))

(assert (=> d!26257 (= (getValueByKey!149 lt!49458 (_1!1186 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26257 (= lt!49457 (lemmaContainsTupThenGetReturnValue!67 lt!49458 (_1!1186 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26257 (= lt!49458 (insertStrictlySorted!69 (toList!791 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (_1!1186 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26257 (= (+!138 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49456)))

(declare-fun b!98413 () Bool)

(declare-fun res!49527 () Bool)

(assert (=> b!98413 (=> (not res!49527) (not e!64157))))

(assert (=> b!98413 (= res!49527 (= (getValueByKey!149 (toList!791 lt!49456) (_1!1186 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98414 () Bool)

(assert (=> b!98414 (= e!64157 (contains!808 (toList!791 lt!49456) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26257 res!49528) b!98413))

(assert (= (and b!98413 res!49527) b!98414))

(declare-fun m!107805 () Bool)

(assert (=> d!26257 m!107805))

(declare-fun m!107807 () Bool)

(assert (=> d!26257 m!107807))

(declare-fun m!107809 () Bool)

(assert (=> d!26257 m!107809))

(declare-fun m!107811 () Bool)

(assert (=> d!26257 m!107811))

(declare-fun m!107813 () Bool)

(assert (=> b!98413 m!107813))

(declare-fun m!107815 () Bool)

(assert (=> b!98414 m!107815))

(assert (=> d!26073 d!26257))

(assert (=> d!26073 d!26185))

(declare-fun b!98415 () Bool)

(declare-fun e!64164 () Bool)

(declare-fun call!10062 () Bool)

(assert (=> b!98415 (= e!64164 (not call!10062))))

(declare-fun b!98416 () Bool)

(declare-fun e!64166 () Unit!2965)

(declare-fun lt!49479 () Unit!2965)

(assert (=> b!98416 (= e!64166 lt!49479)))

(declare-fun lt!49470 () ListLongMap!1551)

(assert (=> b!98416 (= lt!49470 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48964 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49466 () (_ BitVec 64))

(assert (=> b!98416 (= lt!49466 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49463 () (_ BitVec 64))

(assert (=> b!98416 (= lt!49463 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49468 () Unit!2965)

(assert (=> b!98416 (= lt!49468 (addStillContains!68 lt!49470 lt!49466 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49463))))

(assert (=> b!98416 (contains!805 (+!138 lt!49470 (tuple2!2353 lt!49466 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49463)))

(declare-fun lt!49474 () Unit!2965)

(assert (=> b!98416 (= lt!49474 lt!49468)))

(declare-fun lt!49472 () ListLongMap!1551)

(assert (=> b!98416 (= lt!49472 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48964 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49476 () (_ BitVec 64))

(assert (=> b!98416 (= lt!49476 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49481 () (_ BitVec 64))

(assert (=> b!98416 (= lt!49481 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49461 () Unit!2965)

(assert (=> b!98416 (= lt!49461 (addApplyDifferent!68 lt!49472 lt!49476 (minValue!2364 newMap!16) lt!49481))))

(assert (=> b!98416 (= (apply!92 (+!138 lt!49472 (tuple2!2353 lt!49476 (minValue!2364 newMap!16))) lt!49481) (apply!92 lt!49472 lt!49481))))

(declare-fun lt!49473 () Unit!2965)

(assert (=> b!98416 (= lt!49473 lt!49461)))

(declare-fun lt!49478 () ListLongMap!1551)

(assert (=> b!98416 (= lt!49478 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48964 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49475 () (_ BitVec 64))

(assert (=> b!98416 (= lt!49475 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49462 () (_ BitVec 64))

(assert (=> b!98416 (= lt!49462 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49465 () Unit!2965)

(assert (=> b!98416 (= lt!49465 (addApplyDifferent!68 lt!49478 lt!49475 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!49462))))

(assert (=> b!98416 (= (apply!92 (+!138 lt!49478 (tuple2!2353 lt!49475 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49462) (apply!92 lt!49478 lt!49462))))

(declare-fun lt!49460 () Unit!2965)

(assert (=> b!98416 (= lt!49460 lt!49465)))

(declare-fun lt!49477 () ListLongMap!1551)

(assert (=> b!98416 (= lt!49477 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48964 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49471 () (_ BitVec 64))

(assert (=> b!98416 (= lt!49471 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49464 () (_ BitVec 64))

(assert (=> b!98416 (= lt!49464 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98416 (= lt!49479 (addApplyDifferent!68 lt!49477 lt!49471 (minValue!2364 newMap!16) lt!49464))))

(assert (=> b!98416 (= (apply!92 (+!138 lt!49477 (tuple2!2353 lt!49471 (minValue!2364 newMap!16))) lt!49464) (apply!92 lt!49477 lt!49464))))

(declare-fun b!98417 () Bool)

(declare-fun e!64165 () ListLongMap!1551)

(declare-fun call!10057 () ListLongMap!1551)

(assert (=> b!98417 (= e!64165 call!10057)))

(declare-fun bm!10053 () Bool)

(declare-fun call!10060 () ListLongMap!1551)

(assert (=> bm!10053 (= call!10057 call!10060)))

(declare-fun b!98418 () Bool)

(declare-fun e!64160 () Bool)

(declare-fun e!64161 () Bool)

(assert (=> b!98418 (= e!64160 e!64161)))

(declare-fun res!49536 () Bool)

(declare-fun call!10059 () Bool)

(assert (=> b!98418 (= res!49536 call!10059)))

(assert (=> b!98418 (=> (not res!49536) (not e!64161))))

(declare-fun b!98419 () Bool)

(declare-fun res!49532 () Bool)

(declare-fun e!64163 () Bool)

(assert (=> b!98419 (=> (not res!49532) (not e!64163))))

(assert (=> b!98419 (= res!49532 e!64160)))

(declare-fun c!16722 () Bool)

(assert (=> b!98419 (= c!16722 (not (= (bvand lt!48964 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26259 () Bool)

(assert (=> d!26259 e!64163))

(declare-fun res!49529 () Bool)

(assert (=> d!26259 (=> (not res!49529) (not e!64163))))

(assert (=> d!26259 (= res!49529 (or (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))))

(declare-fun lt!49480 () ListLongMap!1551)

(declare-fun lt!49469 () ListLongMap!1551)

(assert (=> d!26259 (= lt!49480 lt!49469)))

(declare-fun lt!49467 () Unit!2965)

(assert (=> d!26259 (= lt!49467 e!64166)))

(declare-fun c!16720 () Bool)

(declare-fun e!64162 () Bool)

(assert (=> d!26259 (= c!16720 e!64162)))

(declare-fun res!49530 () Bool)

(assert (=> d!26259 (=> (not res!49530) (not e!64162))))

(assert (=> d!26259 (= res!49530 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun e!64169 () ListLongMap!1551)

(assert (=> d!26259 (= lt!49469 e!64169)))

(declare-fun c!16719 () Bool)

(assert (=> d!26259 (= c!16719 (and (not (= (bvand lt!48964 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!48964 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26259 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26259 (= (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48964 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49480)))

(declare-fun b!98420 () Bool)

(assert (=> b!98420 (= e!64161 (= (apply!92 lt!49480 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun c!16724 () Bool)

(declare-fun call!10061 () ListLongMap!1551)

(declare-fun call!10058 () ListLongMap!1551)

(declare-fun call!10056 () ListLongMap!1551)

(declare-fun bm!10054 () Bool)

(assert (=> bm!10054 (= call!10060 (+!138 (ite c!16719 call!10058 (ite c!16724 call!10061 call!10056)) (ite (or c!16719 c!16724) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!98421 () Bool)

(assert (=> b!98421 (= e!64162 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98422 () Bool)

(declare-fun e!64170 () Bool)

(assert (=> b!98422 (= e!64170 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98423 () Bool)

(assert (=> b!98423 (= e!64160 (not call!10059))))

(declare-fun b!98424 () Bool)

(declare-fun e!64158 () ListLongMap!1551)

(assert (=> b!98424 (= e!64158 call!10057)))

(declare-fun b!98425 () Bool)

(assert (=> b!98425 (= e!64169 e!64165)))

(assert (=> b!98425 (= c!16724 (and (not (= (bvand lt!48964 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!48964 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10055 () Bool)

(assert (=> bm!10055 (= call!10062 (contains!805 lt!49480 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98426 () Bool)

(declare-fun e!64159 () Bool)

(assert (=> b!98426 (= e!64159 (= (apply!92 lt!49480 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!98427 () Bool)

(declare-fun e!64168 () Bool)

(assert (=> b!98427 (= e!64168 (= (apply!92 lt!49480 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98427 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_values!2464 newMap!16))))))

(assert (=> b!98427 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98428 () Bool)

(declare-fun res!49531 () Bool)

(assert (=> b!98428 (=> (not res!49531) (not e!64163))))

(declare-fun e!64167 () Bool)

(assert (=> b!98428 (= res!49531 e!64167)))

(declare-fun res!49535 () Bool)

(assert (=> b!98428 (=> res!49535 e!64167)))

(assert (=> b!98428 (= res!49535 (not e!64170))))

(declare-fun res!49537 () Bool)

(assert (=> b!98428 (=> (not res!49537) (not e!64170))))

(assert (=> b!98428 (= res!49537 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98429 () Bool)

(assert (=> b!98429 (= e!64158 call!10056)))

(declare-fun b!98430 () Bool)

(assert (=> b!98430 (= e!64167 e!64168)))

(declare-fun res!49534 () Bool)

(assert (=> b!98430 (=> (not res!49534) (not e!64168))))

(assert (=> b!98430 (= res!49534 (contains!805 lt!49480 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98430 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun bm!10056 () Bool)

(assert (=> bm!10056 (= call!10061 call!10058)))

(declare-fun b!98431 () Bool)

(assert (=> b!98431 (= e!64164 e!64159)))

(declare-fun res!49533 () Bool)

(assert (=> b!98431 (= res!49533 call!10062)))

(assert (=> b!98431 (=> (not res!49533) (not e!64159))))

(declare-fun bm!10057 () Bool)

(assert (=> bm!10057 (= call!10056 call!10061)))

(declare-fun b!98432 () Bool)

(declare-fun Unit!2998 () Unit!2965)

(assert (=> b!98432 (= e!64166 Unit!2998)))

(declare-fun b!98433 () Bool)

(declare-fun c!16721 () Bool)

(assert (=> b!98433 (= c!16721 (and (not (= (bvand lt!48964 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!48964 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98433 (= e!64165 e!64158)))

(declare-fun bm!10058 () Bool)

(assert (=> bm!10058 (= call!10058 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48964 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!98434 () Bool)

(assert (=> b!98434 (= e!64169 (+!138 call!10060 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun bm!10059 () Bool)

(assert (=> bm!10059 (= call!10059 (contains!805 lt!49480 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98435 () Bool)

(assert (=> b!98435 (= e!64163 e!64164)))

(declare-fun c!16723 () Bool)

(assert (=> b!98435 (= c!16723 (not (= (bvand lt!48964 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26259 c!16719) b!98434))

(assert (= (and d!26259 (not c!16719)) b!98425))

(assert (= (and b!98425 c!16724) b!98417))

(assert (= (and b!98425 (not c!16724)) b!98433))

(assert (= (and b!98433 c!16721) b!98424))

(assert (= (and b!98433 (not c!16721)) b!98429))

(assert (= (or b!98424 b!98429) bm!10057))

(assert (= (or b!98417 bm!10057) bm!10056))

(assert (= (or b!98417 b!98424) bm!10053))

(assert (= (or b!98434 bm!10056) bm!10058))

(assert (= (or b!98434 bm!10053) bm!10054))

(assert (= (and d!26259 res!49530) b!98421))

(assert (= (and d!26259 c!16720) b!98416))

(assert (= (and d!26259 (not c!16720)) b!98432))

(assert (= (and d!26259 res!49529) b!98428))

(assert (= (and b!98428 res!49537) b!98422))

(assert (= (and b!98428 (not res!49535)) b!98430))

(assert (= (and b!98430 res!49534) b!98427))

(assert (= (and b!98428 res!49531) b!98419))

(assert (= (and b!98419 c!16722) b!98418))

(assert (= (and b!98419 (not c!16722)) b!98423))

(assert (= (and b!98418 res!49536) b!98420))

(assert (= (or b!98418 b!98423) bm!10059))

(assert (= (and b!98419 res!49532) b!98435))

(assert (= (and b!98435 c!16723) b!98431))

(assert (= (and b!98435 (not c!16723)) b!98415))

(assert (= (and b!98431 res!49533) b!98426))

(assert (= (or b!98431 b!98415) bm!10055))

(declare-fun b_lambda!4393 () Bool)

(assert (=> (not b_lambda!4393) (not b!98427)))

(assert (=> b!98427 t!5581))

(declare-fun b_and!6053 () Bool)

(assert (= b_and!6049 (and (=> t!5581 result!3283) b_and!6053)))

(assert (=> b!98427 t!5583))

(declare-fun b_and!6055 () Bool)

(assert (= b_and!6051 (and (=> t!5583 result!3285) b_and!6055)))

(assert (=> b!98422 m!106867))

(assert (=> b!98422 m!106867))

(assert (=> b!98422 m!106887))

(declare-fun m!107817 () Bool)

(assert (=> bm!10054 m!107817))

(declare-fun m!107819 () Bool)

(assert (=> b!98420 m!107819))

(assert (=> b!98421 m!106867))

(assert (=> b!98421 m!106867))

(assert (=> b!98421 m!106887))

(assert (=> b!98416 m!106607))

(declare-fun m!107821 () Bool)

(assert (=> b!98416 m!107821))

(declare-fun m!107823 () Bool)

(assert (=> b!98416 m!107823))

(declare-fun m!107825 () Bool)

(assert (=> b!98416 m!107825))

(declare-fun m!107827 () Bool)

(assert (=> b!98416 m!107827))

(declare-fun m!107829 () Bool)

(assert (=> b!98416 m!107829))

(assert (=> b!98416 m!107827))

(assert (=> b!98416 m!106607))

(declare-fun m!107831 () Bool)

(assert (=> b!98416 m!107831))

(declare-fun m!107833 () Bool)

(assert (=> b!98416 m!107833))

(declare-fun m!107835 () Bool)

(assert (=> b!98416 m!107835))

(assert (=> b!98416 m!107823))

(declare-fun m!107837 () Bool)

(assert (=> b!98416 m!107837))

(declare-fun m!107839 () Bool)

(assert (=> b!98416 m!107839))

(declare-fun m!107841 () Bool)

(assert (=> b!98416 m!107841))

(declare-fun m!107843 () Bool)

(assert (=> b!98416 m!107843))

(assert (=> b!98416 m!106607))

(declare-fun m!107845 () Bool)

(assert (=> b!98416 m!107845))

(declare-fun m!107847 () Bool)

(assert (=> b!98416 m!107847))

(assert (=> b!98416 m!107837))

(assert (=> b!98416 m!106867))

(declare-fun m!107849 () Bool)

(assert (=> b!98416 m!107849))

(assert (=> b!98416 m!107833))

(declare-fun m!107851 () Bool)

(assert (=> b!98416 m!107851))

(declare-fun m!107853 () Bool)

(assert (=> b!98426 m!107853))

(declare-fun m!107855 () Bool)

(assert (=> bm!10055 m!107855))

(assert (=> bm!10058 m!106607))

(assert (=> bm!10058 m!107831))

(assert (=> d!26259 m!106929))

(assert (=> b!98430 m!106867))

(assert (=> b!98430 m!106867))

(declare-fun m!107857 () Bool)

(assert (=> b!98430 m!107857))

(declare-fun m!107859 () Bool)

(assert (=> bm!10059 m!107859))

(declare-fun m!107861 () Bool)

(assert (=> b!98434 m!107861))

(assert (=> b!98427 m!107025))

(assert (=> b!98427 m!106939))

(assert (=> b!98427 m!107027))

(assert (=> b!98427 m!106939))

(assert (=> b!98427 m!106867))

(assert (=> b!98427 m!106867))

(declare-fun m!107863 () Bool)

(assert (=> b!98427 m!107863))

(assert (=> b!98427 m!107025))

(assert (=> d!26073 d!26259))

(declare-fun d!26261 () Bool)

(assert (=> d!26261 (= (+!138 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) lt!48964 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(assert (=> d!26261 true))

(declare-fun _$7!83 () Unit!2965)

(assert (=> d!26261 (= (choose!598 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) lt!48964 (zeroValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2364 newMap!16) (defaultEntry!2481 newMap!16)) _$7!83)))

(declare-fun bs!4049 () Bool)

(assert (= bs!4049 d!26261))

(assert (=> bs!4049 m!106687))

(assert (=> bs!4049 m!106687))

(assert (=> bs!4049 m!107039))

(assert (=> bs!4049 m!106607))

(assert (=> bs!4049 m!107037))

(assert (=> d!26073 d!26261))

(assert (=> d!26073 d!26065))

(assert (=> b!97906 d!26165))

(declare-fun d!26263 () Bool)

(declare-fun e!64172 () Bool)

(assert (=> d!26263 e!64172))

(declare-fun res!49538 () Bool)

(assert (=> d!26263 (=> res!49538 e!64172)))

(declare-fun lt!49484 () Bool)

(assert (=> d!26263 (= res!49538 (not lt!49484))))

(declare-fun lt!49485 () Bool)

(assert (=> d!26263 (= lt!49484 lt!49485)))

(declare-fun lt!49482 () Unit!2965)

(declare-fun e!64171 () Unit!2965)

(assert (=> d!26263 (= lt!49482 e!64171)))

(declare-fun c!16725 () Bool)

(assert (=> d!26263 (= c!16725 lt!49485)))

(assert (=> d!26263 (= lt!49485 (containsKey!153 (toList!791 lt!49205) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26263 (= (contains!805 lt!49205 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49484)))

(declare-fun b!98436 () Bool)

(declare-fun lt!49483 () Unit!2965)

(assert (=> b!98436 (= e!64171 lt!49483)))

(assert (=> b!98436 (= lt!49483 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49205) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98436 (isDefined!103 (getValueByKey!149 (toList!791 lt!49205) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98437 () Bool)

(declare-fun Unit!2999 () Unit!2965)

(assert (=> b!98437 (= e!64171 Unit!2999)))

(declare-fun b!98438 () Bool)

(assert (=> b!98438 (= e!64172 (isDefined!103 (getValueByKey!149 (toList!791 lt!49205) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26263 c!16725) b!98436))

(assert (= (and d!26263 (not c!16725)) b!98437))

(assert (= (and d!26263 (not res!49538)) b!98438))

(declare-fun m!107865 () Bool)

(assert (=> d!26263 m!107865))

(declare-fun m!107867 () Bool)

(assert (=> b!98436 m!107867))

(declare-fun m!107869 () Bool)

(assert (=> b!98436 m!107869))

(assert (=> b!98436 m!107869))

(declare-fun m!107871 () Bool)

(assert (=> b!98436 m!107871))

(assert (=> b!98438 m!107869))

(assert (=> b!98438 m!107869))

(assert (=> b!98438 m!107871))

(assert (=> b!98059 d!26263))

(declare-fun d!26265 () Bool)

(assert (=> d!26265 (= (apply!92 lt!49280 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1300 (getValueByKey!149 (toList!791 lt!49280) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4050 () Bool)

(assert (= bs!4050 d!26265))

(assert (=> bs!4050 m!106867))

(declare-fun m!107873 () Bool)

(assert (=> bs!4050 m!107873))

(assert (=> bs!4050 m!107873))

(declare-fun m!107875 () Bool)

(assert (=> bs!4050 m!107875))

(assert (=> b!98141 d!26265))

(declare-fun d!26267 () Bool)

(declare-fun c!16726 () Bool)

(assert (=> d!26267 (= c!16726 ((_ is ValueCellFull!972) (select (arr!2015 (ite c!16562 (_values!2464 newMap!16) lt!48976)) #b00000000000000000000000000000000)))))

(declare-fun e!64173 () V!3155)

(assert (=> d!26267 (= (get!1296 (select (arr!2015 (ite c!16562 (_values!2464 newMap!16) lt!48976)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64173)))

(declare-fun b!98439 () Bool)

(assert (=> b!98439 (= e!64173 (get!1298 (select (arr!2015 (ite c!16562 (_values!2464 newMap!16) lt!48976)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98440 () Bool)

(assert (=> b!98440 (= e!64173 (get!1299 (select (arr!2015 (ite c!16562 (_values!2464 newMap!16) lt!48976)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26267 c!16726) b!98439))

(assert (= (and d!26267 (not c!16726)) b!98440))

(assert (=> b!98439 m!107353))

(assert (=> b!98439 m!106939))

(declare-fun m!107877 () Bool)

(assert (=> b!98439 m!107877))

(assert (=> b!98440 m!107353))

(assert (=> b!98440 m!106939))

(declare-fun m!107879 () Bool)

(assert (=> b!98440 m!107879))

(assert (=> b!98141 d!26267))

(declare-fun d!26269 () Bool)

(assert (=> d!26269 (= (apply!92 lt!49038 lt!49025) (get!1300 (getValueByKey!149 (toList!791 lt!49038) lt!49025)))))

(declare-fun bs!4051 () Bool)

(assert (= bs!4051 d!26269))

(declare-fun m!107881 () Bool)

(assert (=> bs!4051 m!107881))

(assert (=> bs!4051 m!107881))

(declare-fun m!107883 () Bool)

(assert (=> bs!4051 m!107883))

(assert (=> b!97866 d!26269))

(declare-fun d!26271 () Bool)

(declare-fun e!64174 () Bool)

(assert (=> d!26271 e!64174))

(declare-fun res!49540 () Bool)

(assert (=> d!26271 (=> (not res!49540) (not e!64174))))

(declare-fun lt!49486 () ListLongMap!1551)

(assert (=> d!26271 (= res!49540 (contains!805 lt!49486 (_1!1186 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16)))))))

(declare-fun lt!49488 () List!1612)

(assert (=> d!26271 (= lt!49486 (ListLongMap!1552 lt!49488))))

(declare-fun lt!49489 () Unit!2965)

(declare-fun lt!49487 () Unit!2965)

(assert (=> d!26271 (= lt!49489 lt!49487)))

(assert (=> d!26271 (= (getValueByKey!149 lt!49488 (_1!1186 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26271 (= lt!49487 (lemmaContainsTupThenGetReturnValue!67 lt!49488 (_1!1186 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26271 (= lt!49488 (insertStrictlySorted!69 (toList!791 lt!49039) (_1!1186 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26271 (= (+!138 lt!49039 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16))) lt!49486)))

(declare-fun b!98441 () Bool)

(declare-fun res!49539 () Bool)

(assert (=> b!98441 (=> (not res!49539) (not e!64174))))

(assert (=> b!98441 (= res!49539 (= (getValueByKey!149 (toList!791 lt!49486) (_1!1186 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16))))))))

(declare-fun b!98442 () Bool)

(assert (=> b!98442 (= e!64174 (contains!808 (toList!791 lt!49486) (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16))))))

(assert (= (and d!26271 res!49540) b!98441))

(assert (= (and b!98441 res!49539) b!98442))

(declare-fun m!107885 () Bool)

(assert (=> d!26271 m!107885))

(declare-fun m!107887 () Bool)

(assert (=> d!26271 m!107887))

(declare-fun m!107889 () Bool)

(assert (=> d!26271 m!107889))

(declare-fun m!107891 () Bool)

(assert (=> d!26271 m!107891))

(declare-fun m!107893 () Bool)

(assert (=> b!98441 m!107893))

(declare-fun m!107895 () Bool)

(assert (=> b!98442 m!107895))

(assert (=> b!97866 d!26271))

(declare-fun d!26273 () Bool)

(assert (=> d!26273 (= (apply!92 (+!138 lt!49039 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16))) lt!49023) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!49039 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16)))) lt!49023)))))

(declare-fun bs!4052 () Bool)

(assert (= bs!4052 d!26273))

(declare-fun m!107897 () Bool)

(assert (=> bs!4052 m!107897))

(assert (=> bs!4052 m!107897))

(declare-fun m!107899 () Bool)

(assert (=> bs!4052 m!107899))

(assert (=> b!97866 d!26273))

(declare-fun d!26275 () Bool)

(assert (=> d!26275 (= (apply!92 (+!138 lt!49038 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49025) (apply!92 lt!49038 lt!49025))))

(declare-fun lt!49490 () Unit!2965)

(assert (=> d!26275 (= lt!49490 (choose!601 lt!49038 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49025))))

(declare-fun e!64175 () Bool)

(assert (=> d!26275 e!64175))

(declare-fun res!49541 () Bool)

(assert (=> d!26275 (=> (not res!49541) (not e!64175))))

(assert (=> d!26275 (= res!49541 (contains!805 lt!49038 lt!49025))))

(assert (=> d!26275 (= (addApplyDifferent!68 lt!49038 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49025) lt!49490)))

(declare-fun b!98443 () Bool)

(assert (=> b!98443 (= e!64175 (not (= lt!49025 lt!49032)))))

(assert (= (and d!26275 res!49541) b!98443))

(assert (=> d!26275 m!106915))

(assert (=> d!26275 m!106899))

(assert (=> d!26275 m!106901))

(declare-fun m!107901 () Bool)

(assert (=> d!26275 m!107901))

(declare-fun m!107903 () Bool)

(assert (=> d!26275 m!107903))

(assert (=> d!26275 m!106899))

(assert (=> b!97866 d!26275))

(declare-fun d!26277 () Bool)

(assert (=> d!26277 (= (apply!92 (+!138 lt!49033 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49042) (apply!92 lt!49033 lt!49042))))

(declare-fun lt!49491 () Unit!2965)

(assert (=> d!26277 (= lt!49491 (choose!601 lt!49033 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49042))))

(declare-fun e!64176 () Bool)

(assert (=> d!26277 e!64176))

(declare-fun res!49542 () Bool)

(assert (=> d!26277 (=> (not res!49542) (not e!64176))))

(assert (=> d!26277 (= res!49542 (contains!805 lt!49033 lt!49042))))

(assert (=> d!26277 (= (addApplyDifferent!68 lt!49033 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) lt!49042) lt!49491)))

(declare-fun b!98444 () Bool)

(assert (=> b!98444 (= e!64176 (not (= lt!49042 lt!49037)))))

(assert (= (and d!26277 res!49542) b!98444))

(assert (=> d!26277 m!106919))

(assert (=> d!26277 m!106909))

(assert (=> d!26277 m!106911))

(declare-fun m!107905 () Bool)

(assert (=> d!26277 m!107905))

(declare-fun m!107907 () Bool)

(assert (=> d!26277 m!107907))

(assert (=> d!26277 m!106909))

(assert (=> b!97866 d!26277))

(declare-fun b!98445 () Bool)

(declare-fun e!64178 () Bool)

(declare-fun lt!49493 () ListLongMap!1551)

(assert (=> b!98445 (= e!64178 (isEmpty!362 lt!49493))))

(declare-fun b!98446 () Bool)

(declare-fun res!49543 () Bool)

(declare-fun e!64181 () Bool)

(assert (=> b!98446 (=> (not res!49543) (not e!64181))))

(assert (=> b!98446 (= res!49543 (not (contains!805 lt!49493 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98447 () Bool)

(declare-fun e!64180 () Bool)

(assert (=> b!98447 (= e!64181 e!64180)))

(declare-fun c!16728 () Bool)

(declare-fun e!64179 () Bool)

(assert (=> b!98447 (= c!16728 e!64179)))

(declare-fun res!49544 () Bool)

(assert (=> b!98447 (=> (not res!49544) (not e!64179))))

(assert (=> b!98447 (= res!49544 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98448 () Bool)

(declare-fun e!64182 () Bool)

(assert (=> b!98448 (= e!64180 e!64182)))

(assert (=> b!98448 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun res!49545 () Bool)

(assert (=> b!98448 (= res!49545 (contains!805 lt!49493 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98448 (=> (not res!49545) (not e!64182))))

(declare-fun b!98450 () Bool)

(declare-fun lt!49494 () Unit!2965)

(declare-fun lt!49492 () Unit!2965)

(assert (=> b!98450 (= lt!49494 lt!49492)))

(declare-fun lt!49497 () V!3155)

(declare-fun lt!49498 () (_ BitVec 64))

(declare-fun lt!49496 () (_ BitVec 64))

(declare-fun lt!49495 () ListLongMap!1551)

(assert (=> b!98450 (not (contains!805 (+!138 lt!49495 (tuple2!2353 lt!49496 lt!49497)) lt!49498))))

(assert (=> b!98450 (= lt!49492 (addStillNotContains!42 lt!49495 lt!49496 lt!49497 lt!49498))))

(assert (=> b!98450 (= lt!49498 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98450 (= lt!49497 (get!1296 (select (arr!2015 (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98450 (= lt!49496 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!10063 () ListLongMap!1551)

(assert (=> b!98450 (= lt!49495 call!10063)))

(declare-fun e!64177 () ListLongMap!1551)

(assert (=> b!98450 (= e!64177 (+!138 call!10063 (tuple2!2353 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (get!1296 (select (arr!2015 (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98451 () Bool)

(assert (=> b!98451 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(assert (=> b!98451 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))))))))

(assert (=> b!98451 (= e!64182 (= (apply!92 lt!49493 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98452 () Bool)

(assert (=> b!98452 (= e!64177 call!10063)))

(declare-fun b!98453 () Bool)

(declare-fun e!64183 () ListLongMap!1551)

(assert (=> b!98453 (= e!64183 e!64177)))

(declare-fun c!16727 () Bool)

(assert (=> b!98453 (= c!16727 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98454 () Bool)

(assert (=> b!98454 (= e!64178 (= lt!49493 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) (zeroValue!2364 newMap!16) (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16))))))

(declare-fun b!98455 () Bool)

(assert (=> b!98455 (= e!64179 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98455 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!98456 () Bool)

(assert (=> b!98456 (= e!64180 e!64178)))

(declare-fun c!16729 () Bool)

(assert (=> b!98456 (= c!16729 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun bm!10060 () Bool)

(assert (=> bm!10060 (= call!10063 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) (zeroValue!2364 newMap!16) (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16)))))

(declare-fun d!26279 () Bool)

(assert (=> d!26279 e!64181))

(declare-fun res!49546 () Bool)

(assert (=> d!26279 (=> (not res!49546) (not e!64181))))

(assert (=> d!26279 (= res!49546 (not (contains!805 lt!49493 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26279 (= lt!49493 e!64183)))

(declare-fun c!16730 () Bool)

(assert (=> d!26279 (= c!16730 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26279 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26279 (= (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) (mask!6578 newMap!16) (ite c!16562 (ite c!16560 (extraKeys!2302 newMap!16) lt!48973) (extraKeys!2302 newMap!16)) (zeroValue!2364 newMap!16) (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49493)))

(declare-fun b!98449 () Bool)

(assert (=> b!98449 (= e!64183 (ListLongMap!1552 Nil!1609))))

(assert (= (and d!26279 c!16730) b!98449))

(assert (= (and d!26279 (not c!16730)) b!98453))

(assert (= (and b!98453 c!16727) b!98450))

(assert (= (and b!98453 (not c!16727)) b!98452))

(assert (= (or b!98450 b!98452) bm!10060))

(assert (= (and d!26279 res!49546) b!98446))

(assert (= (and b!98446 res!49543) b!98447))

(assert (= (and b!98447 res!49544) b!98455))

(assert (= (and b!98447 c!16728) b!98448))

(assert (= (and b!98447 (not c!16728)) b!98456))

(assert (= (and b!98448 res!49545) b!98451))

(assert (= (and b!98456 c!16729) b!98454))

(assert (= (and b!98456 (not c!16729)) b!98445))

(declare-fun b_lambda!4395 () Bool)

(assert (=> (not b_lambda!4395) (not b!98450)))

(assert (=> b!98450 t!5581))

(declare-fun b_and!6057 () Bool)

(assert (= b_and!6053 (and (=> t!5581 result!3283) b_and!6057)))

(assert (=> b!98450 t!5583))

(declare-fun b_and!6059 () Bool)

(assert (= b_and!6055 (and (=> t!5583 result!3285) b_and!6059)))

(declare-fun b_lambda!4397 () Bool)

(assert (=> (not b_lambda!4397) (not b!98451)))

(assert (=> b!98451 t!5581))

(declare-fun b_and!6061 () Bool)

(assert (= b_and!6057 (and (=> t!5581 result!3283) b_and!6061)))

(assert (=> b!98451 t!5583))

(declare-fun b_and!6063 () Bool)

(assert (= b_and!6059 (and (=> t!5583 result!3285) b_and!6063)))

(declare-fun m!107909 () Bool)

(assert (=> b!98445 m!107909))

(assert (=> b!98455 m!106867))

(assert (=> b!98455 m!106867))

(assert (=> b!98455 m!106887))

(declare-fun m!107911 () Bool)

(assert (=> d!26279 m!107911))

(assert (=> d!26279 m!106929))

(declare-fun m!107913 () Bool)

(assert (=> b!98450 m!107913))

(declare-fun m!107915 () Bool)

(assert (=> b!98450 m!107915))

(assert (=> b!98450 m!107913))

(declare-fun m!107917 () Bool)

(assert (=> b!98450 m!107917))

(assert (=> b!98450 m!106867))

(assert (=> b!98450 m!106939))

(assert (=> b!98450 m!106937))

(assert (=> b!98450 m!106939))

(assert (=> b!98450 m!106941))

(assert (=> b!98450 m!106937))

(declare-fun m!107919 () Bool)

(assert (=> b!98450 m!107919))

(declare-fun m!107921 () Bool)

(assert (=> b!98446 m!107921))

(assert (=> b!98453 m!106867))

(assert (=> b!98453 m!106867))

(assert (=> b!98453 m!106887))

(assert (=> b!98451 m!106867))

(declare-fun m!107923 () Bool)

(assert (=> b!98451 m!107923))

(assert (=> b!98451 m!106867))

(assert (=> b!98451 m!106939))

(assert (=> b!98451 m!106937))

(assert (=> b!98451 m!106939))

(assert (=> b!98451 m!106941))

(assert (=> b!98451 m!106937))

(declare-fun m!107925 () Bool)

(assert (=> bm!10060 m!107925))

(assert (=> b!98454 m!107925))

(assert (=> b!98448 m!106867))

(assert (=> b!98448 m!106867))

(declare-fun m!107927 () Bool)

(assert (=> b!98448 m!107927))

(assert (=> b!97866 d!26279))

(declare-fun d!26281 () Bool)

(assert (=> d!26281 (= (apply!92 lt!49033 lt!49042) (get!1300 (getValueByKey!149 (toList!791 lt!49033) lt!49042)))))

(declare-fun bs!4053 () Bool)

(assert (= bs!4053 d!26281))

(declare-fun m!107929 () Bool)

(assert (=> bs!4053 m!107929))

(assert (=> bs!4053 m!107929))

(declare-fun m!107931 () Bool)

(assert (=> bs!4053 m!107931))

(assert (=> b!97866 d!26281))

(declare-fun d!26283 () Bool)

(declare-fun e!64184 () Bool)

(assert (=> d!26283 e!64184))

(declare-fun res!49548 () Bool)

(assert (=> d!26283 (=> (not res!49548) (not e!64184))))

(declare-fun lt!49499 () ListLongMap!1551)

(assert (=> d!26283 (= res!49548 (contains!805 lt!49499 (_1!1186 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(declare-fun lt!49501 () List!1612)

(assert (=> d!26283 (= lt!49499 (ListLongMap!1552 lt!49501))))

(declare-fun lt!49502 () Unit!2965)

(declare-fun lt!49500 () Unit!2965)

(assert (=> d!26283 (= lt!49502 lt!49500)))

(assert (=> d!26283 (= (getValueByKey!149 lt!49501 (_1!1186 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!154 (_2!1186 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26283 (= lt!49500 (lemmaContainsTupThenGetReturnValue!67 lt!49501 (_1!1186 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1186 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26283 (= lt!49501 (insertStrictlySorted!69 (toList!791 lt!49038) (_1!1186 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1186 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26283 (= (+!138 lt!49038 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49499)))

(declare-fun b!98457 () Bool)

(declare-fun res!49547 () Bool)

(assert (=> b!98457 (=> (not res!49547) (not e!64184))))

(assert (=> b!98457 (= res!49547 (= (getValueByKey!149 (toList!791 lt!49499) (_1!1186 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!154 (_2!1186 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(declare-fun b!98458 () Bool)

(assert (=> b!98458 (= e!64184 (contains!808 (toList!791 lt!49499) (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))

(assert (= (and d!26283 res!49548) b!98457))

(assert (= (and b!98457 res!49547) b!98458))

(declare-fun m!107933 () Bool)

(assert (=> d!26283 m!107933))

(declare-fun m!107935 () Bool)

(assert (=> d!26283 m!107935))

(declare-fun m!107937 () Bool)

(assert (=> d!26283 m!107937))

(declare-fun m!107939 () Bool)

(assert (=> d!26283 m!107939))

(declare-fun m!107941 () Bool)

(assert (=> b!98457 m!107941))

(declare-fun m!107943 () Bool)

(assert (=> b!98458 m!107943))

(assert (=> b!97866 d!26283))

(declare-fun d!26285 () Bool)

(assert (=> d!26285 (= (apply!92 (+!138 lt!49039 (tuple2!2353 lt!49036 (zeroValue!2364 newMap!16))) lt!49023) (apply!92 lt!49039 lt!49023))))

(declare-fun lt!49503 () Unit!2965)

(assert (=> d!26285 (= lt!49503 (choose!601 lt!49039 lt!49036 (zeroValue!2364 newMap!16) lt!49023))))

(declare-fun e!64185 () Bool)

(assert (=> d!26285 e!64185))

(declare-fun res!49549 () Bool)

(assert (=> d!26285 (=> (not res!49549) (not e!64185))))

(assert (=> d!26285 (= res!49549 (contains!805 lt!49039 lt!49023))))

(assert (=> d!26285 (= (addApplyDifferent!68 lt!49039 lt!49036 (zeroValue!2364 newMap!16) lt!49023) lt!49503)))

(declare-fun b!98459 () Bool)

(assert (=> b!98459 (= e!64185 (not (= lt!49023 lt!49036)))))

(assert (= (and d!26285 res!49549) b!98459))

(assert (=> d!26285 m!106913))

(assert (=> d!26285 m!106895))

(assert (=> d!26285 m!106897))

(declare-fun m!107945 () Bool)

(assert (=> d!26285 m!107945))

(declare-fun m!107947 () Bool)

(assert (=> d!26285 m!107947))

(assert (=> d!26285 m!106895))

(assert (=> b!97866 d!26285))

(declare-fun d!26287 () Bool)

(declare-fun e!64186 () Bool)

(assert (=> d!26287 e!64186))

(declare-fun res!49551 () Bool)

(assert (=> d!26287 (=> (not res!49551) (not e!64186))))

(declare-fun lt!49504 () ListLongMap!1551)

(assert (=> d!26287 (= res!49551 (contains!805 lt!49504 (_1!1186 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16)))))))

(declare-fun lt!49506 () List!1612)

(assert (=> d!26287 (= lt!49504 (ListLongMap!1552 lt!49506))))

(declare-fun lt!49507 () Unit!2965)

(declare-fun lt!49505 () Unit!2965)

(assert (=> d!26287 (= lt!49507 lt!49505)))

(assert (=> d!26287 (= (getValueByKey!149 lt!49506 (_1!1186 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26287 (= lt!49505 (lemmaContainsTupThenGetReturnValue!67 lt!49506 (_1!1186 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26287 (= lt!49506 (insertStrictlySorted!69 (toList!791 lt!49031) (_1!1186 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26287 (= (+!138 lt!49031 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16))) lt!49504)))

(declare-fun b!98460 () Bool)

(declare-fun res!49550 () Bool)

(assert (=> b!98460 (=> (not res!49550) (not e!64186))))

(assert (=> b!98460 (= res!49550 (= (getValueByKey!149 (toList!791 lt!49504) (_1!1186 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16))))))))

(declare-fun b!98461 () Bool)

(assert (=> b!98461 (= e!64186 (contains!808 (toList!791 lt!49504) (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16))))))

(assert (= (and d!26287 res!49551) b!98460))

(assert (= (and b!98460 res!49550) b!98461))

(declare-fun m!107949 () Bool)

(assert (=> d!26287 m!107949))

(declare-fun m!107951 () Bool)

(assert (=> d!26287 m!107951))

(declare-fun m!107953 () Bool)

(assert (=> d!26287 m!107953))

(declare-fun m!107955 () Bool)

(assert (=> d!26287 m!107955))

(declare-fun m!107957 () Bool)

(assert (=> b!98460 m!107957))

(declare-fun m!107959 () Bool)

(assert (=> b!98461 m!107959))

(assert (=> b!97866 d!26287))

(declare-fun d!26289 () Bool)

(declare-fun e!64188 () Bool)

(assert (=> d!26289 e!64188))

(declare-fun res!49552 () Bool)

(assert (=> d!26289 (=> res!49552 e!64188)))

(declare-fun lt!49510 () Bool)

(assert (=> d!26289 (= res!49552 (not lt!49510))))

(declare-fun lt!49511 () Bool)

(assert (=> d!26289 (= lt!49510 lt!49511)))

(declare-fun lt!49508 () Unit!2965)

(declare-fun e!64187 () Unit!2965)

(assert (=> d!26289 (= lt!49508 e!64187)))

(declare-fun c!16731 () Bool)

(assert (=> d!26289 (= c!16731 lt!49511)))

(assert (=> d!26289 (= lt!49511 (containsKey!153 (toList!791 (+!138 lt!49031 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16)))) lt!49024))))

(assert (=> d!26289 (= (contains!805 (+!138 lt!49031 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16))) lt!49024) lt!49510)))

(declare-fun b!98462 () Bool)

(declare-fun lt!49509 () Unit!2965)

(assert (=> b!98462 (= e!64187 lt!49509)))

(assert (=> b!98462 (= lt!49509 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 (+!138 lt!49031 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16)))) lt!49024))))

(assert (=> b!98462 (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!49031 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16)))) lt!49024))))

(declare-fun b!98463 () Bool)

(declare-fun Unit!3000 () Unit!2965)

(assert (=> b!98463 (= e!64187 Unit!3000)))

(declare-fun b!98464 () Bool)

(assert (=> b!98464 (= e!64188 (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!49031 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16)))) lt!49024)))))

(assert (= (and d!26289 c!16731) b!98462))

(assert (= (and d!26289 (not c!16731)) b!98463))

(assert (= (and d!26289 (not res!49552)) b!98464))

(declare-fun m!107961 () Bool)

(assert (=> d!26289 m!107961))

(declare-fun m!107963 () Bool)

(assert (=> b!98462 m!107963))

(declare-fun m!107965 () Bool)

(assert (=> b!98462 m!107965))

(assert (=> b!98462 m!107965))

(declare-fun m!107967 () Bool)

(assert (=> b!98462 m!107967))

(assert (=> b!98464 m!107965))

(assert (=> b!98464 m!107965))

(assert (=> b!98464 m!107967))

(assert (=> b!97866 d!26289))

(declare-fun d!26291 () Bool)

(assert (=> d!26291 (= (apply!92 (+!138 lt!49038 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49025) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!49038 (tuple2!2353 lt!49032 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) lt!49025)))))

(declare-fun bs!4054 () Bool)

(assert (= bs!4054 d!26291))

(declare-fun m!107969 () Bool)

(assert (=> bs!4054 m!107969))

(assert (=> bs!4054 m!107969))

(declare-fun m!107971 () Bool)

(assert (=> bs!4054 m!107971))

(assert (=> b!97866 d!26291))

(declare-fun d!26293 () Bool)

(declare-fun e!64189 () Bool)

(assert (=> d!26293 e!64189))

(declare-fun res!49554 () Bool)

(assert (=> d!26293 (=> (not res!49554) (not e!64189))))

(declare-fun lt!49512 () ListLongMap!1551)

(assert (=> d!26293 (= res!49554 (contains!805 lt!49512 (_1!1186 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(declare-fun lt!49514 () List!1612)

(assert (=> d!26293 (= lt!49512 (ListLongMap!1552 lt!49514))))

(declare-fun lt!49515 () Unit!2965)

(declare-fun lt!49513 () Unit!2965)

(assert (=> d!26293 (= lt!49515 lt!49513)))

(assert (=> d!26293 (= (getValueByKey!149 lt!49514 (_1!1186 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!154 (_2!1186 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26293 (= lt!49513 (lemmaContainsTupThenGetReturnValue!67 lt!49514 (_1!1186 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1186 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26293 (= lt!49514 (insertStrictlySorted!69 (toList!791 lt!49033) (_1!1186 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1186 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26293 (= (+!138 lt!49033 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49512)))

(declare-fun b!98465 () Bool)

(declare-fun res!49553 () Bool)

(assert (=> b!98465 (=> (not res!49553) (not e!64189))))

(assert (=> b!98465 (= res!49553 (= (getValueByKey!149 (toList!791 lt!49512) (_1!1186 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!154 (_2!1186 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(declare-fun b!98466 () Bool)

(assert (=> b!98466 (= e!64189 (contains!808 (toList!791 lt!49512) (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))

(assert (= (and d!26293 res!49554) b!98465))

(assert (= (and b!98465 res!49553) b!98466))

(declare-fun m!107973 () Bool)

(assert (=> d!26293 m!107973))

(declare-fun m!107975 () Bool)

(assert (=> d!26293 m!107975))

(declare-fun m!107977 () Bool)

(assert (=> d!26293 m!107977))

(declare-fun m!107979 () Bool)

(assert (=> d!26293 m!107979))

(declare-fun m!107981 () Bool)

(assert (=> b!98465 m!107981))

(declare-fun m!107983 () Bool)

(assert (=> b!98466 m!107983))

(assert (=> b!97866 d!26293))

(declare-fun d!26295 () Bool)

(assert (=> d!26295 (= (apply!92 lt!49039 lt!49023) (get!1300 (getValueByKey!149 (toList!791 lt!49039) lt!49023)))))

(declare-fun bs!4055 () Bool)

(assert (= bs!4055 d!26295))

(declare-fun m!107985 () Bool)

(assert (=> bs!4055 m!107985))

(assert (=> bs!4055 m!107985))

(declare-fun m!107987 () Bool)

(assert (=> bs!4055 m!107987))

(assert (=> b!97866 d!26295))

(declare-fun d!26297 () Bool)

(assert (=> d!26297 (= (apply!92 (+!138 lt!49033 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49042) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!49033 (tuple2!2353 lt!49037 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) lt!49042)))))

(declare-fun bs!4056 () Bool)

(assert (= bs!4056 d!26297))

(declare-fun m!107989 () Bool)

(assert (=> bs!4056 m!107989))

(assert (=> bs!4056 m!107989))

(declare-fun m!107991 () Bool)

(assert (=> bs!4056 m!107991))

(assert (=> b!97866 d!26297))

(declare-fun d!26299 () Bool)

(assert (=> d!26299 (contains!805 (+!138 lt!49031 (tuple2!2353 lt!49027 (zeroValue!2364 newMap!16))) lt!49024)))

(declare-fun lt!49516 () Unit!2965)

(assert (=> d!26299 (= lt!49516 (choose!602 lt!49031 lt!49027 (zeroValue!2364 newMap!16) lt!49024))))

(assert (=> d!26299 (contains!805 lt!49031 lt!49024)))

(assert (=> d!26299 (= (addStillContains!68 lt!49031 lt!49027 (zeroValue!2364 newMap!16) lt!49024) lt!49516)))

(declare-fun bs!4057 () Bool)

(assert (= bs!4057 d!26299))

(assert (=> bs!4057 m!106905))

(assert (=> bs!4057 m!106905))

(assert (=> bs!4057 m!106923))

(declare-fun m!107993 () Bool)

(assert (=> bs!4057 m!107993))

(declare-fun m!107995 () Bool)

(assert (=> bs!4057 m!107995))

(assert (=> b!97866 d!26299))

(declare-fun b!98468 () Bool)

(declare-fun e!64190 () Option!155)

(declare-fun e!64191 () Option!155)

(assert (=> b!98468 (= e!64190 e!64191)))

(declare-fun c!16733 () Bool)

(assert (=> b!98468 (= c!16733 (and ((_ is Cons!1608) (toList!791 lt!49003)) (not (= (_1!1186 (h!2202 (toList!791 lt!49003))) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98470 () Bool)

(assert (=> b!98470 (= e!64191 None!153)))

(declare-fun d!26301 () Bool)

(declare-fun c!16732 () Bool)

(assert (=> d!26301 (= c!16732 (and ((_ is Cons!1608) (toList!791 lt!49003)) (= (_1!1186 (h!2202 (toList!791 lt!49003))) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26301 (= (getValueByKey!149 (toList!791 lt!49003) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) e!64190)))

(declare-fun b!98469 () Bool)

(assert (=> b!98469 (= e!64191 (getValueByKey!149 (t!5574 (toList!791 lt!49003)) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98467 () Bool)

(assert (=> b!98467 (= e!64190 (Some!154 (_2!1186 (h!2202 (toList!791 lt!49003)))))))

(assert (= (and d!26301 c!16732) b!98467))

(assert (= (and d!26301 (not c!16732)) b!98468))

(assert (= (and b!98468 c!16733) b!98469))

(assert (= (and b!98468 (not c!16733)) b!98470))

(declare-fun m!107997 () Bool)

(assert (=> b!98469 m!107997))

(assert (=> b!97834 d!26301))

(declare-fun d!26303 () Bool)

(declare-fun res!49555 () Bool)

(declare-fun e!64192 () Bool)

(assert (=> d!26303 (=> res!49555 e!64192)))

(assert (=> d!26303 (= res!49555 (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26303 (= (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!64192)))

(declare-fun b!98471 () Bool)

(declare-fun e!64193 () Bool)

(assert (=> b!98471 (= e!64192 e!64193)))

(declare-fun res!49556 () Bool)

(assert (=> b!98471 (=> (not res!49556) (not e!64193))))

(assert (=> b!98471 (= res!49556 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!98472 () Bool)

(assert (=> b!98472 (= e!64193 (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26303 (not res!49555)) b!98471))

(assert (= (and b!98471 res!49556) b!98472))

(declare-fun m!107999 () Bool)

(assert (=> d!26303 m!107999))

(assert (=> b!98472 m!106609))

(declare-fun m!108001 () Bool)

(assert (=> b!98472 m!108001))

(assert (=> b!97837 d!26303))

(declare-fun d!26305 () Bool)

(declare-fun e!64195 () Bool)

(assert (=> d!26305 e!64195))

(declare-fun res!49557 () Bool)

(assert (=> d!26305 (=> res!49557 e!64195)))

(declare-fun lt!49519 () Bool)

(assert (=> d!26305 (= res!49557 (not lt!49519))))

(declare-fun lt!49520 () Bool)

(assert (=> d!26305 (= lt!49519 lt!49520)))

(declare-fun lt!49517 () Unit!2965)

(declare-fun e!64194 () Unit!2965)

(assert (=> d!26305 (= lt!49517 e!64194)))

(declare-fun c!16734 () Bool)

(assert (=> d!26305 (= c!16734 lt!49520)))

(assert (=> d!26305 (= lt!49520 (containsKey!153 (toList!791 lt!49010) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26305 (= (contains!805 lt!49010 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49519)))

(declare-fun b!98473 () Bool)

(declare-fun lt!49518 () Unit!2965)

(assert (=> b!98473 (= e!64194 lt!49518)))

(assert (=> b!98473 (= lt!49518 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49010) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!98473 (isDefined!103 (getValueByKey!149 (toList!791 lt!49010) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98474 () Bool)

(declare-fun Unit!3001 () Unit!2965)

(assert (=> b!98474 (= e!64194 Unit!3001)))

(declare-fun b!98475 () Bool)

(assert (=> b!98475 (= e!64195 (isDefined!103 (getValueByKey!149 (toList!791 lt!49010) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26305 c!16734) b!98473))

(assert (= (and d!26305 (not c!16734)) b!98474))

(assert (= (and d!26305 (not res!49557)) b!98475))

(declare-fun m!108003 () Bool)

(assert (=> d!26305 m!108003))

(declare-fun m!108005 () Bool)

(assert (=> b!98473 m!108005))

(assert (=> b!98473 m!106863))

(assert (=> b!98473 m!106863))

(declare-fun m!108007 () Bool)

(assert (=> b!98473 m!108007))

(assert (=> b!98475 m!106863))

(assert (=> b!98475 m!106863))

(assert (=> b!98475 m!108007))

(assert (=> d!26035 d!26305))

(declare-fun b!98477 () Bool)

(declare-fun e!64196 () Option!155)

(declare-fun e!64197 () Option!155)

(assert (=> b!98477 (= e!64196 e!64197)))

(declare-fun c!16736 () Bool)

(assert (=> b!98477 (= c!16736 (and ((_ is Cons!1608) lt!49012) (not (= (_1!1186 (h!2202 lt!49012)) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!98479 () Bool)

(assert (=> b!98479 (= e!64197 None!153)))

(declare-fun c!16735 () Bool)

(declare-fun d!26307 () Bool)

(assert (=> d!26307 (= c!16735 (and ((_ is Cons!1608) lt!49012) (= (_1!1186 (h!2202 lt!49012)) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26307 (= (getValueByKey!149 lt!49012 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!64196)))

(declare-fun b!98478 () Bool)

(assert (=> b!98478 (= e!64197 (getValueByKey!149 (t!5574 lt!49012) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98476 () Bool)

(assert (=> b!98476 (= e!64196 (Some!154 (_2!1186 (h!2202 lt!49012))))))

(assert (= (and d!26307 c!16735) b!98476))

(assert (= (and d!26307 (not c!16735)) b!98477))

(assert (= (and b!98477 c!16736) b!98478))

(assert (= (and b!98477 (not c!16736)) b!98479))

(declare-fun m!108009 () Bool)

(assert (=> b!98478 m!108009))

(assert (=> d!26035 d!26307))

(declare-fun d!26309 () Bool)

(assert (=> d!26309 (= (getValueByKey!149 lt!49012 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49521 () Unit!2965)

(assert (=> d!26309 (= lt!49521 (choose!605 lt!49012 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64198 () Bool)

(assert (=> d!26309 e!64198))

(declare-fun res!49558 () Bool)

(assert (=> d!26309 (=> (not res!49558) (not e!64198))))

(assert (=> d!26309 (= res!49558 (isStrictlySorted!299 lt!49012))))

(assert (=> d!26309 (= (lemmaContainsTupThenGetReturnValue!67 lt!49012 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49521)))

(declare-fun b!98480 () Bool)

(declare-fun res!49559 () Bool)

(assert (=> b!98480 (=> (not res!49559) (not e!64198))))

(assert (=> b!98480 (= res!49559 (containsKey!153 lt!49012 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98481 () Bool)

(assert (=> b!98481 (= e!64198 (contains!808 lt!49012 (tuple2!2353 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26309 res!49558) b!98480))

(assert (= (and b!98480 res!49559) b!98481))

(assert (=> d!26309 m!106857))

(declare-fun m!108011 () Bool)

(assert (=> d!26309 m!108011))

(declare-fun m!108013 () Bool)

(assert (=> d!26309 m!108013))

(declare-fun m!108015 () Bool)

(assert (=> b!98480 m!108015))

(declare-fun m!108017 () Bool)

(assert (=> b!98481 m!108017))

(assert (=> d!26035 d!26309))

(declare-fun d!26311 () Bool)

(declare-fun e!64200 () Bool)

(assert (=> d!26311 e!64200))

(declare-fun res!49560 () Bool)

(assert (=> d!26311 (=> (not res!49560) (not e!64200))))

(declare-fun lt!49522 () List!1612)

(assert (=> d!26311 (= res!49560 (isStrictlySorted!299 lt!49522))))

(declare-fun e!64199 () List!1612)

(assert (=> d!26311 (= lt!49522 e!64199)))

(declare-fun c!16740 () Bool)

(assert (=> d!26311 (= c!16740 (and ((_ is Cons!1608) (toList!791 call!9943)) (bvslt (_1!1186 (h!2202 (toList!791 call!9943))) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26311 (isStrictlySorted!299 (toList!791 call!9943))))

(assert (=> d!26311 (= (insertStrictlySorted!69 (toList!791 call!9943) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49522)))

(declare-fun b!98482 () Bool)

(assert (=> b!98482 (= e!64200 (contains!808 lt!49522 (tuple2!2353 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98483 () Bool)

(declare-fun res!49561 () Bool)

(assert (=> b!98483 (=> (not res!49561) (not e!64200))))

(assert (=> b!98483 (= res!49561 (containsKey!153 lt!49522 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98484 () Bool)

(declare-fun e!64203 () List!1612)

(declare-fun call!10066 () List!1612)

(assert (=> b!98484 (= e!64203 call!10066)))

(declare-fun bm!10061 () Bool)

(declare-fun e!64201 () List!1612)

(declare-fun call!10065 () List!1612)

(assert (=> bm!10061 (= call!10065 ($colon$colon!77 e!64201 (ite c!16740 (h!2202 (toList!791 call!9943)) (tuple2!2353 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!16738 () Bool)

(assert (=> bm!10061 (= c!16738 c!16740)))

(declare-fun b!98485 () Bool)

(assert (=> b!98485 (= e!64201 (insertStrictlySorted!69 (t!5574 (toList!791 call!9943)) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!16739 () Bool)

(declare-fun c!16737 () Bool)

(declare-fun b!98486 () Bool)

(assert (=> b!98486 (= e!64201 (ite c!16737 (t!5574 (toList!791 call!9943)) (ite c!16739 (Cons!1608 (h!2202 (toList!791 call!9943)) (t!5574 (toList!791 call!9943))) Nil!1609)))))

(declare-fun b!98487 () Bool)

(assert (=> b!98487 (= c!16739 (and ((_ is Cons!1608) (toList!791 call!9943)) (bvsgt (_1!1186 (h!2202 (toList!791 call!9943))) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!64202 () List!1612)

(assert (=> b!98487 (= e!64203 e!64202)))

(declare-fun bm!10062 () Bool)

(declare-fun call!10064 () List!1612)

(assert (=> bm!10062 (= call!10064 call!10066)))

(declare-fun b!98488 () Bool)

(assert (=> b!98488 (= e!64199 e!64203)))

(assert (=> b!98488 (= c!16737 (and ((_ is Cons!1608) (toList!791 call!9943)) (= (_1!1186 (h!2202 (toList!791 call!9943))) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98489 () Bool)

(assert (=> b!98489 (= e!64199 call!10065)))

(declare-fun b!98490 () Bool)

(assert (=> b!98490 (= e!64202 call!10064)))

(declare-fun bm!10063 () Bool)

(assert (=> bm!10063 (= call!10066 call!10065)))

(declare-fun b!98491 () Bool)

(assert (=> b!98491 (= e!64202 call!10064)))

(assert (= (and d!26311 c!16740) b!98489))

(assert (= (and d!26311 (not c!16740)) b!98488))

(assert (= (and b!98488 c!16737) b!98484))

(assert (= (and b!98488 (not c!16737)) b!98487))

(assert (= (and b!98487 c!16739) b!98490))

(assert (= (and b!98487 (not c!16739)) b!98491))

(assert (= (or b!98490 b!98491) bm!10062))

(assert (= (or b!98484 bm!10062) bm!10063))

(assert (= (or b!98489 bm!10063) bm!10061))

(assert (= (and bm!10061 c!16738) b!98485))

(assert (= (and bm!10061 (not c!16738)) b!98486))

(assert (= (and d!26311 res!49560) b!98483))

(assert (= (and b!98483 res!49561) b!98482))

(declare-fun m!108019 () Bool)

(assert (=> bm!10061 m!108019))

(declare-fun m!108021 () Bool)

(assert (=> b!98482 m!108021))

(declare-fun m!108023 () Bool)

(assert (=> d!26311 m!108023))

(declare-fun m!108025 () Bool)

(assert (=> d!26311 m!108025))

(declare-fun m!108027 () Bool)

(assert (=> b!98483 m!108027))

(declare-fun m!108029 () Bool)

(assert (=> b!98485 m!108029))

(assert (=> d!26035 d!26311))

(declare-fun d!26313 () Bool)

(assert (=> d!26313 (= (inRange!0 (index!3196 lt!49048) (mask!6578 newMap!16)) (and (bvsge (index!3196 lt!49048) #b00000000000000000000000000000000) (bvslt (index!3196 lt!49048) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!97892 d!26313))

(declare-fun d!26315 () Bool)

(assert (=> d!26315 (= (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874)) (not (isEmpty!361 (getValueByKey!149 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874))))))

(declare-fun bs!4058 () Bool)

(assert (= bs!4058 d!26315))

(assert (=> bs!4058 m!107247))

(declare-fun m!108031 () Bool)

(assert (=> bs!4058 m!108031))

(assert (=> b!98090 d!26315))

(declare-fun b!98493 () Bool)

(declare-fun e!64204 () Option!155)

(declare-fun e!64205 () Option!155)

(assert (=> b!98493 (= e!64204 e!64205)))

(declare-fun c!16742 () Bool)

(assert (=> b!98493 (= c!16742 (and ((_ is Cons!1608) (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))) (not (= (_1!1186 (h!2202 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))) lt!48874))))))

(declare-fun b!98495 () Bool)

(assert (=> b!98495 (= e!64205 None!153)))

(declare-fun c!16741 () Bool)

(declare-fun d!26317 () Bool)

(assert (=> d!26317 (= c!16741 (and ((_ is Cons!1608) (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))) (= (_1!1186 (h!2202 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))) lt!48874)))))

(assert (=> d!26317 (= (getValueByKey!149 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874) e!64204)))

(declare-fun b!98494 () Bool)

(assert (=> b!98494 (= e!64205 (getValueByKey!149 (t!5574 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))) lt!48874))))

(declare-fun b!98492 () Bool)

(assert (=> b!98492 (= e!64204 (Some!154 (_2!1186 (h!2202 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))))

(assert (= (and d!26317 c!16741) b!98492))

(assert (= (and d!26317 (not c!16741)) b!98493))

(assert (= (and b!98493 c!16742) b!98494))

(assert (= (and b!98493 (not c!16742)) b!98495))

(declare-fun m!108033 () Bool)

(assert (=> b!98494 m!108033))

(assert (=> b!98090 d!26317))

(declare-fun d!26319 () Bool)

(declare-fun e!64206 () Bool)

(assert (=> d!26319 e!64206))

(declare-fun res!49563 () Bool)

(assert (=> d!26319 (=> (not res!49563) (not e!64206))))

(declare-fun lt!49523 () ListLongMap!1551)

(assert (=> d!26319 (= res!49563 (contains!805 lt!49523 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun lt!49525 () List!1612)

(assert (=> d!26319 (= lt!49523 (ListLongMap!1552 lt!49525))))

(declare-fun lt!49526 () Unit!2965)

(declare-fun lt!49524 () Unit!2965)

(assert (=> d!26319 (= lt!49526 lt!49524)))

(assert (=> d!26319 (= (getValueByKey!149 lt!49525 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26319 (= lt!49524 (lemmaContainsTupThenGetReturnValue!67 lt!49525 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26319 (= lt!49525 (insertStrictlySorted!69 (toList!791 call!9981) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26319 (= (+!138 call!9981 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) lt!49523)))

(declare-fun b!98496 () Bool)

(declare-fun res!49562 () Bool)

(assert (=> b!98496 (=> (not res!49562) (not e!64206))))

(assert (=> b!98496 (= res!49562 (= (getValueByKey!149 (toList!791 lt!49523) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(declare-fun b!98497 () Bool)

(assert (=> b!98497 (= e!64206 (contains!808 (toList!791 lt!49523) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(assert (= (and d!26319 res!49563) b!98496))

(assert (= (and b!98496 res!49562) b!98497))

(declare-fun m!108035 () Bool)

(assert (=> d!26319 m!108035))

(declare-fun m!108037 () Bool)

(assert (=> d!26319 m!108037))

(declare-fun m!108039 () Bool)

(assert (=> d!26319 m!108039))

(declare-fun m!108041 () Bool)

(assert (=> d!26319 m!108041))

(declare-fun m!108043 () Bool)

(assert (=> b!98496 m!108043))

(declare-fun m!108045 () Bool)

(assert (=> b!98497 m!108045))

(assert (=> b!97919 d!26319))

(assert (=> b!97991 d!26055))

(declare-fun d!26321 () Bool)

(declare-fun e!64208 () Bool)

(assert (=> d!26321 e!64208))

(declare-fun res!49564 () Bool)

(assert (=> d!26321 (=> res!49564 e!64208)))

(declare-fun lt!49529 () Bool)

(assert (=> d!26321 (= res!49564 (not lt!49529))))

(declare-fun lt!49530 () Bool)

(assert (=> d!26321 (= lt!49529 lt!49530)))

(declare-fun lt!49527 () Unit!2965)

(declare-fun e!64207 () Unit!2965)

(assert (=> d!26321 (= lt!49527 e!64207)))

(declare-fun c!16743 () Bool)

(assert (=> d!26321 (= c!16743 lt!49530)))

(assert (=> d!26321 (= lt!49530 (containsKey!153 (toList!791 lt!49041) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26321 (= (contains!805 lt!49041 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) lt!49529)))

(declare-fun b!98498 () Bool)

(declare-fun lt!49528 () Unit!2965)

(assert (=> b!98498 (= e!64207 lt!49528)))

(assert (=> b!98498 (= lt!49528 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49041) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98498 (isDefined!103 (getValueByKey!149 (toList!791 lt!49041) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98499 () Bool)

(declare-fun Unit!3002 () Unit!2965)

(assert (=> b!98499 (= e!64207 Unit!3002)))

(declare-fun b!98500 () Bool)

(assert (=> b!98500 (= e!64208 (isDefined!103 (getValueByKey!149 (toList!791 lt!49041) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26321 c!16743) b!98498))

(assert (= (and d!26321 (not c!16743)) b!98499))

(assert (= (and d!26321 (not res!49564)) b!98500))

(assert (=> d!26321 m!106867))

(declare-fun m!108047 () Bool)

(assert (=> d!26321 m!108047))

(assert (=> b!98498 m!106867))

(declare-fun m!108049 () Bool)

(assert (=> b!98498 m!108049))

(assert (=> b!98498 m!106867))

(declare-fun m!108051 () Bool)

(assert (=> b!98498 m!108051))

(assert (=> b!98498 m!108051))

(declare-fun m!108053 () Bool)

(assert (=> b!98498 m!108053))

(assert (=> b!98500 m!106867))

(assert (=> b!98500 m!108051))

(assert (=> b!98500 m!108051))

(assert (=> b!98500 m!108053))

(assert (=> b!97880 d!26321))

(declare-fun d!26323 () Bool)

(declare-fun res!49568 () Bool)

(declare-fun e!64209 () Bool)

(assert (=> d!26323 (=> (not res!49568) (not e!64209))))

(assert (=> d!26323 (= res!49568 (validMask!0 (mask!6578 (v!2801 (underlying!339 thiss!992)))))))

(assert (=> d!26323 (= (simpleValid!67 (v!2801 (underlying!339 thiss!992))) e!64209)))

(declare-fun b!98503 () Bool)

(declare-fun res!49566 () Bool)

(assert (=> b!98503 (=> (not res!49566) (not e!64209))))

(assert (=> b!98503 (= res!49566 (= (size!2268 (v!2801 (underlying!339 thiss!992))) (bvadd (_size!475 (v!2801 (underlying!339 thiss!992))) (bvsdiv (bvadd (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!98504 () Bool)

(assert (=> b!98504 (= e!64209 (and (bvsge (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!475 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!98502 () Bool)

(declare-fun res!49565 () Bool)

(assert (=> b!98502 (=> (not res!49565) (not e!64209))))

(assert (=> b!98502 (= res!49565 (bvsge (size!2268 (v!2801 (underlying!339 thiss!992))) (_size!475 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun b!98501 () Bool)

(declare-fun res!49567 () Bool)

(assert (=> b!98501 (=> (not res!49567) (not e!64209))))

(assert (=> b!98501 (= res!49567 (and (= (size!2265 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000001)) (= (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (size!2265 (_values!2464 (v!2801 (underlying!339 thiss!992))))) (bvsge (_size!475 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!475 (v!2801 (underlying!339 thiss!992))) (bvadd (mask!6578 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000001))))))

(assert (= (and d!26323 res!49568) b!98501))

(assert (= (and b!98501 res!49567) b!98502))

(assert (= (and b!98502 res!49565) b!98503))

(assert (= (and b!98503 res!49566) b!98504))

(assert (=> d!26323 m!106601))

(declare-fun m!108055 () Bool)

(assert (=> b!98503 m!108055))

(assert (=> b!98502 m!108055))

(assert (=> d!26133 d!26323))

(declare-fun d!26325 () Bool)

(declare-fun res!49569 () Bool)

(declare-fun e!64210 () Bool)

(assert (=> d!26325 (=> res!49569 e!64210)))

(assert (=> d!26325 (= res!49569 (and ((_ is Cons!1608) (t!5574 (toList!791 lt!48799))) (= (_1!1186 (h!2202 (t!5574 (toList!791 lt!48799)))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (=> d!26325 (= (containsKey!153 (t!5574 (toList!791 lt!48799)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) e!64210)))

(declare-fun b!98505 () Bool)

(declare-fun e!64211 () Bool)

(assert (=> b!98505 (= e!64210 e!64211)))

(declare-fun res!49570 () Bool)

(assert (=> b!98505 (=> (not res!49570) (not e!64211))))

(assert (=> b!98505 (= res!49570 (and (or (not ((_ is Cons!1608) (t!5574 (toList!791 lt!48799)))) (bvsle (_1!1186 (h!2202 (t!5574 (toList!791 lt!48799)))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))) ((_ is Cons!1608) (t!5574 (toList!791 lt!48799))) (bvslt (_1!1186 (h!2202 (t!5574 (toList!791 lt!48799)))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(declare-fun b!98506 () Bool)

(assert (=> b!98506 (= e!64211 (containsKey!153 (t!5574 (t!5574 (toList!791 lt!48799))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (= (and d!26325 (not res!49569)) b!98505))

(assert (= (and b!98505 res!49570) b!98506))

(assert (=> b!98506 m!106609))

(declare-fun m!108057 () Bool)

(assert (=> b!98506 m!108057))

(assert (=> b!98157 d!26325))

(declare-fun b!98507 () Bool)

(declare-fun e!64212 () Bool)

(declare-fun call!10067 () Bool)

(assert (=> b!98507 (= e!64212 call!10067)))

(declare-fun b!98508 () Bool)

(assert (=> b!98508 (= e!64212 call!10067)))

(declare-fun d!26327 () Bool)

(declare-fun res!49572 () Bool)

(declare-fun e!64215 () Bool)

(assert (=> d!26327 (=> res!49572 e!64215)))

(assert (=> d!26327 (= res!49572 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26327 (= (arrayNoDuplicates!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16597 (Cons!1607 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) Nil!1608) Nil!1608)) e!64215)))

(declare-fun b!98509 () Bool)

(declare-fun e!64213 () Bool)

(assert (=> b!98509 (= e!64215 e!64213)))

(declare-fun res!49573 () Bool)

(assert (=> b!98509 (=> (not res!49573) (not e!64213))))

(declare-fun e!64214 () Bool)

(assert (=> b!98509 (= res!49573 (not e!64214))))

(declare-fun res!49571 () Bool)

(assert (=> b!98509 (=> (not res!49571) (not e!64214))))

(assert (=> b!98509 (= res!49571 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!98510 () Bool)

(assert (=> b!98510 (= e!64213 e!64212)))

(declare-fun c!16744 () Bool)

(assert (=> b!98510 (= c!16744 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!10064 () Bool)

(assert (=> bm!10064 (= call!10067 (arrayNoDuplicates!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16744 (Cons!1607 (select (arr!2014 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!16597 (Cons!1607 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) Nil!1608) Nil!1608)) (ite c!16597 (Cons!1607 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) Nil!1608) Nil!1608))))))

(declare-fun b!98511 () Bool)

(assert (=> b!98511 (= e!64214 (contains!807 (ite c!16597 (Cons!1607 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) Nil!1608) Nil!1608) (select (arr!2014 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!26327 (not res!49572)) b!98509))

(assert (= (and b!98509 res!49571) b!98511))

(assert (= (and b!98509 res!49573) b!98510))

(assert (= (and b!98510 c!16744) b!98507))

(assert (= (and b!98510 (not c!16744)) b!98508))

(assert (= (or b!98507 b!98508) bm!10064))

(declare-fun m!108059 () Bool)

(assert (=> b!98509 m!108059))

(assert (=> b!98509 m!108059))

(declare-fun m!108061 () Bool)

(assert (=> b!98509 m!108061))

(assert (=> b!98510 m!108059))

(assert (=> b!98510 m!108059))

(assert (=> b!98510 m!108061))

(assert (=> bm!10064 m!108059))

(declare-fun m!108063 () Bool)

(assert (=> bm!10064 m!108063))

(assert (=> b!98511 m!108059))

(assert (=> b!98511 m!108059))

(declare-fun m!108065 () Bool)

(assert (=> b!98511 m!108065))

(assert (=> bm!9981 d!26327))

(declare-fun d!26329 () Bool)

(assert (=> d!26329 (= (apply!92 lt!49041 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1300 (getValueByKey!149 (toList!791 lt!49041) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4059 () Bool)

(assert (= bs!4059 d!26329))

(assert (=> bs!4059 m!106867))

(assert (=> bs!4059 m!108051))

(assert (=> bs!4059 m!108051))

(declare-fun m!108067 () Bool)

(assert (=> bs!4059 m!108067))

(assert (=> b!97877 d!26329))

(declare-fun d!26331 () Bool)

(declare-fun c!16745 () Bool)

(assert (=> d!26331 (= c!16745 ((_ is ValueCellFull!972) (select (arr!2015 (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!64216 () V!3155)

(assert (=> d!26331 (= (get!1296 (select (arr!2015 (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64216)))

(declare-fun b!98512 () Bool)

(assert (=> b!98512 (= e!64216 (get!1298 (select (arr!2015 (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98513 () Bool)

(assert (=> b!98513 (= e!64216 (get!1299 (select (arr!2015 (ite (or c!16562 c!16557) (_values!2464 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26331 c!16745) b!98512))

(assert (= (and d!26331 (not c!16745)) b!98513))

(assert (=> b!98512 m!106937))

(assert (=> b!98512 m!106939))

(declare-fun m!108069 () Bool)

(assert (=> b!98512 m!108069))

(assert (=> b!98513 m!106937))

(assert (=> b!98513 m!106939))

(declare-fun m!108071 () Bool)

(assert (=> b!98513 m!108071))

(assert (=> b!97877 d!26331))

(assert (=> bm!9995 d!26089))

(declare-fun d!26333 () Bool)

(declare-fun e!64217 () Bool)

(assert (=> d!26333 e!64217))

(declare-fun res!49575 () Bool)

(assert (=> d!26333 (=> (not res!49575) (not e!64217))))

(declare-fun lt!49531 () ListLongMap!1551)

(assert (=> d!26333 (= res!49575 (contains!805 lt!49531 (_1!1186 (tuple2!2353 lt!49069 (minValue!2364 newMap!16)))))))

(declare-fun lt!49533 () List!1612)

(assert (=> d!26333 (= lt!49531 (ListLongMap!1552 lt!49533))))

(declare-fun lt!49534 () Unit!2965)

(declare-fun lt!49532 () Unit!2965)

(assert (=> d!26333 (= lt!49534 lt!49532)))

(assert (=> d!26333 (= (getValueByKey!149 lt!49533 (_1!1186 (tuple2!2353 lt!49069 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49069 (minValue!2364 newMap!16)))))))

(assert (=> d!26333 (= lt!49532 (lemmaContainsTupThenGetReturnValue!67 lt!49533 (_1!1186 (tuple2!2353 lt!49069 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49069 (minValue!2364 newMap!16)))))))

(assert (=> d!26333 (= lt!49533 (insertStrictlySorted!69 (toList!791 lt!49065) (_1!1186 (tuple2!2353 lt!49069 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49069 (minValue!2364 newMap!16)))))))

(assert (=> d!26333 (= (+!138 lt!49065 (tuple2!2353 lt!49069 (minValue!2364 newMap!16))) lt!49531)))

(declare-fun b!98514 () Bool)

(declare-fun res!49574 () Bool)

(assert (=> b!98514 (=> (not res!49574) (not e!64217))))

(assert (=> b!98514 (= res!49574 (= (getValueByKey!149 (toList!791 lt!49531) (_1!1186 (tuple2!2353 lt!49069 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49069 (minValue!2364 newMap!16))))))))

(declare-fun b!98515 () Bool)

(assert (=> b!98515 (= e!64217 (contains!808 (toList!791 lt!49531) (tuple2!2353 lt!49069 (minValue!2364 newMap!16))))))

(assert (= (and d!26333 res!49575) b!98514))

(assert (= (and b!98514 res!49574) b!98515))

(declare-fun m!108073 () Bool)

(assert (=> d!26333 m!108073))

(declare-fun m!108075 () Bool)

(assert (=> d!26333 m!108075))

(declare-fun m!108077 () Bool)

(assert (=> d!26333 m!108077))

(declare-fun m!108079 () Bool)

(assert (=> d!26333 m!108079))

(declare-fun m!108081 () Bool)

(assert (=> b!98514 m!108081))

(declare-fun m!108083 () Bool)

(assert (=> b!98515 m!108083))

(assert (=> b!97901 d!26333))

(declare-fun d!26335 () Bool)

(assert (=> d!26335 (= (apply!92 (+!138 lt!49065 (tuple2!2353 lt!49069 (minValue!2364 newMap!16))) lt!49074) (apply!92 lt!49065 lt!49074))))

(declare-fun lt!49535 () Unit!2965)

(assert (=> d!26335 (= lt!49535 (choose!601 lt!49065 lt!49069 (minValue!2364 newMap!16) lt!49074))))

(declare-fun e!64218 () Bool)

(assert (=> d!26335 e!64218))

(declare-fun res!49576 () Bool)

(assert (=> d!26335 (=> (not res!49576) (not e!64218))))

(assert (=> d!26335 (= res!49576 (contains!805 lt!49065 lt!49074))))

(assert (=> d!26335 (= (addApplyDifferent!68 lt!49065 lt!49069 (minValue!2364 newMap!16) lt!49074) lt!49535)))

(declare-fun b!98516 () Bool)

(assert (=> b!98516 (= e!64218 (not (= lt!49074 lt!49069)))))

(assert (= (and d!26335 res!49576) b!98516))

(assert (=> d!26335 m!107009))

(assert (=> d!26335 m!106999))

(assert (=> d!26335 m!107001))

(declare-fun m!108085 () Bool)

(assert (=> d!26335 m!108085))

(declare-fun m!108087 () Bool)

(assert (=> d!26335 m!108087))

(assert (=> d!26335 m!106999))

(assert (=> b!97901 d!26335))

(declare-fun d!26337 () Bool)

(assert (=> d!26337 (= (apply!92 (+!138 lt!49065 (tuple2!2353 lt!49069 (minValue!2364 newMap!16))) lt!49074) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!49065 (tuple2!2353 lt!49069 (minValue!2364 newMap!16)))) lt!49074)))))

(declare-fun bs!4060 () Bool)

(assert (= bs!4060 d!26337))

(declare-fun m!108089 () Bool)

(assert (=> bs!4060 m!108089))

(assert (=> bs!4060 m!108089))

(declare-fun m!108091 () Bool)

(assert (=> bs!4060 m!108091))

(assert (=> b!97901 d!26337))

(declare-fun d!26339 () Bool)

(assert (=> d!26339 (= (apply!92 (+!138 lt!49071 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16))) lt!49055) (apply!92 lt!49071 lt!49055))))

(declare-fun lt!49536 () Unit!2965)

(assert (=> d!26339 (= lt!49536 (choose!601 lt!49071 lt!49068 (zeroValue!2364 newMap!16) lt!49055))))

(declare-fun e!64219 () Bool)

(assert (=> d!26339 e!64219))

(declare-fun res!49577 () Bool)

(assert (=> d!26339 (=> (not res!49577) (not e!64219))))

(assert (=> d!26339 (= res!49577 (contains!805 lt!49071 lt!49055))))

(assert (=> d!26339 (= (addApplyDifferent!68 lt!49071 lt!49068 (zeroValue!2364 newMap!16) lt!49055) lt!49536)))

(declare-fun b!98517 () Bool)

(assert (=> b!98517 (= e!64219 (not (= lt!49055 lt!49068)))))

(assert (= (and d!26339 res!49577) b!98517))

(assert (=> d!26339 m!107003))

(assert (=> d!26339 m!106985))

(assert (=> d!26339 m!106987))

(declare-fun m!108093 () Bool)

(assert (=> d!26339 m!108093))

(declare-fun m!108095 () Bool)

(assert (=> d!26339 m!108095))

(assert (=> d!26339 m!106985))

(assert (=> b!97901 d!26339))

(declare-fun d!26341 () Bool)

(assert (=> d!26341 (= (apply!92 lt!49065 lt!49074) (get!1300 (getValueByKey!149 (toList!791 lt!49065) lt!49074)))))

(declare-fun bs!4061 () Bool)

(assert (= bs!4061 d!26341))

(declare-fun m!108097 () Bool)

(assert (=> bs!4061 m!108097))

(assert (=> bs!4061 m!108097))

(declare-fun m!108099 () Bool)

(assert (=> bs!4061 m!108099))

(assert (=> b!97901 d!26341))

(declare-fun d!26343 () Bool)

(assert (=> d!26343 (= (apply!92 lt!49071 lt!49055) (get!1300 (getValueByKey!149 (toList!791 lt!49071) lt!49055)))))

(declare-fun bs!4062 () Bool)

(assert (= bs!4062 d!26343))

(declare-fun m!108101 () Bool)

(assert (=> bs!4062 m!108101))

(assert (=> bs!4062 m!108101))

(declare-fun m!108103 () Bool)

(assert (=> bs!4062 m!108103))

(assert (=> b!97901 d!26343))

(declare-fun d!26345 () Bool)

(assert (=> d!26345 (= (apply!92 lt!49070 lt!49057) (get!1300 (getValueByKey!149 (toList!791 lt!49070) lt!49057)))))

(declare-fun bs!4063 () Bool)

(assert (= bs!4063 d!26345))

(declare-fun m!108105 () Bool)

(assert (=> bs!4063 m!108105))

(assert (=> bs!4063 m!108105))

(declare-fun m!108107 () Bool)

(assert (=> bs!4063 m!108107))

(assert (=> b!97901 d!26345))

(declare-fun d!26347 () Bool)

(assert (=> d!26347 (= (apply!92 (+!138 lt!49070 (tuple2!2353 lt!49064 (minValue!2364 newMap!16))) lt!49057) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!49070 (tuple2!2353 lt!49064 (minValue!2364 newMap!16)))) lt!49057)))))

(declare-fun bs!4064 () Bool)

(assert (= bs!4064 d!26347))

(declare-fun m!108109 () Bool)

(assert (=> bs!4064 m!108109))

(assert (=> bs!4064 m!108109))

(declare-fun m!108111 () Bool)

(assert (=> bs!4064 m!108111))

(assert (=> b!97901 d!26347))

(declare-fun d!26349 () Bool)

(assert (=> d!26349 (contains!805 (+!138 lt!49063 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16))) lt!49056)))

(declare-fun lt!49537 () Unit!2965)

(assert (=> d!26349 (= lt!49537 (choose!602 lt!49063 lt!49059 (zeroValue!2364 newMap!16) lt!49056))))

(assert (=> d!26349 (contains!805 lt!49063 lt!49056)))

(assert (=> d!26349 (= (addStillContains!68 lt!49063 lt!49059 (zeroValue!2364 newMap!16) lt!49056) lt!49537)))

(declare-fun bs!4065 () Bool)

(assert (= bs!4065 d!26349))

(assert (=> bs!4065 m!106995))

(assert (=> bs!4065 m!106995))

(assert (=> bs!4065 m!107013))

(declare-fun m!108113 () Bool)

(assert (=> bs!4065 m!108113))

(declare-fun m!108115 () Bool)

(assert (=> bs!4065 m!108115))

(assert (=> b!97901 d!26349))

(declare-fun d!26351 () Bool)

(declare-fun e!64220 () Bool)

(assert (=> d!26351 e!64220))

(declare-fun res!49579 () Bool)

(assert (=> d!26351 (=> (not res!49579) (not e!64220))))

(declare-fun lt!49538 () ListLongMap!1551)

(assert (=> d!26351 (= res!49579 (contains!805 lt!49538 (_1!1186 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16)))))))

(declare-fun lt!49540 () List!1612)

(assert (=> d!26351 (= lt!49538 (ListLongMap!1552 lt!49540))))

(declare-fun lt!49541 () Unit!2965)

(declare-fun lt!49539 () Unit!2965)

(assert (=> d!26351 (= lt!49541 lt!49539)))

(assert (=> d!26351 (= (getValueByKey!149 lt!49540 (_1!1186 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26351 (= lt!49539 (lemmaContainsTupThenGetReturnValue!67 lt!49540 (_1!1186 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26351 (= lt!49540 (insertStrictlySorted!69 (toList!791 lt!49071) (_1!1186 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26351 (= (+!138 lt!49071 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16))) lt!49538)))

(declare-fun b!98518 () Bool)

(declare-fun res!49578 () Bool)

(assert (=> b!98518 (=> (not res!49578) (not e!64220))))

(assert (=> b!98518 (= res!49578 (= (getValueByKey!149 (toList!791 lt!49538) (_1!1186 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16))))))))

(declare-fun b!98519 () Bool)

(assert (=> b!98519 (= e!64220 (contains!808 (toList!791 lt!49538) (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16))))))

(assert (= (and d!26351 res!49579) b!98518))

(assert (= (and b!98518 res!49578) b!98519))

(declare-fun m!108117 () Bool)

(assert (=> d!26351 m!108117))

(declare-fun m!108119 () Bool)

(assert (=> d!26351 m!108119))

(declare-fun m!108121 () Bool)

(assert (=> d!26351 m!108121))

(declare-fun m!108123 () Bool)

(assert (=> d!26351 m!108123))

(declare-fun m!108125 () Bool)

(assert (=> b!98518 m!108125))

(declare-fun m!108127 () Bool)

(assert (=> b!98519 m!108127))

(assert (=> b!97901 d!26351))

(declare-fun d!26353 () Bool)

(declare-fun e!64221 () Bool)

(assert (=> d!26353 e!64221))

(declare-fun res!49581 () Bool)

(assert (=> d!26353 (=> (not res!49581) (not e!64221))))

(declare-fun lt!49542 () ListLongMap!1551)

(assert (=> d!26353 (= res!49581 (contains!805 lt!49542 (_1!1186 (tuple2!2353 lt!49064 (minValue!2364 newMap!16)))))))

(declare-fun lt!49544 () List!1612)

(assert (=> d!26353 (= lt!49542 (ListLongMap!1552 lt!49544))))

(declare-fun lt!49545 () Unit!2965)

(declare-fun lt!49543 () Unit!2965)

(assert (=> d!26353 (= lt!49545 lt!49543)))

(assert (=> d!26353 (= (getValueByKey!149 lt!49544 (_1!1186 (tuple2!2353 lt!49064 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49064 (minValue!2364 newMap!16)))))))

(assert (=> d!26353 (= lt!49543 (lemmaContainsTupThenGetReturnValue!67 lt!49544 (_1!1186 (tuple2!2353 lt!49064 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49064 (minValue!2364 newMap!16)))))))

(assert (=> d!26353 (= lt!49544 (insertStrictlySorted!69 (toList!791 lt!49070) (_1!1186 (tuple2!2353 lt!49064 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49064 (minValue!2364 newMap!16)))))))

(assert (=> d!26353 (= (+!138 lt!49070 (tuple2!2353 lt!49064 (minValue!2364 newMap!16))) lt!49542)))

(declare-fun b!98520 () Bool)

(declare-fun res!49580 () Bool)

(assert (=> b!98520 (=> (not res!49580) (not e!64221))))

(assert (=> b!98520 (= res!49580 (= (getValueByKey!149 (toList!791 lt!49542) (_1!1186 (tuple2!2353 lt!49064 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49064 (minValue!2364 newMap!16))))))))

(declare-fun b!98521 () Bool)

(assert (=> b!98521 (= e!64221 (contains!808 (toList!791 lt!49542) (tuple2!2353 lt!49064 (minValue!2364 newMap!16))))))

(assert (= (and d!26353 res!49581) b!98520))

(assert (= (and b!98520 res!49580) b!98521))

(declare-fun m!108129 () Bool)

(assert (=> d!26353 m!108129))

(declare-fun m!108131 () Bool)

(assert (=> d!26353 m!108131))

(declare-fun m!108133 () Bool)

(assert (=> d!26353 m!108133))

(declare-fun m!108135 () Bool)

(assert (=> d!26353 m!108135))

(declare-fun m!108137 () Bool)

(assert (=> b!98520 m!108137))

(declare-fun m!108139 () Bool)

(assert (=> b!98521 m!108139))

(assert (=> b!97901 d!26353))

(declare-fun d!26355 () Bool)

(declare-fun e!64223 () Bool)

(assert (=> d!26355 e!64223))

(declare-fun res!49582 () Bool)

(assert (=> d!26355 (=> res!49582 e!64223)))

(declare-fun lt!49548 () Bool)

(assert (=> d!26355 (= res!49582 (not lt!49548))))

(declare-fun lt!49549 () Bool)

(assert (=> d!26355 (= lt!49548 lt!49549)))

(declare-fun lt!49546 () Unit!2965)

(declare-fun e!64222 () Unit!2965)

(assert (=> d!26355 (= lt!49546 e!64222)))

(declare-fun c!16746 () Bool)

(assert (=> d!26355 (= c!16746 lt!49549)))

(assert (=> d!26355 (= lt!49549 (containsKey!153 (toList!791 (+!138 lt!49063 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16)))) lt!49056))))

(assert (=> d!26355 (= (contains!805 (+!138 lt!49063 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16))) lt!49056) lt!49548)))

(declare-fun b!98522 () Bool)

(declare-fun lt!49547 () Unit!2965)

(assert (=> b!98522 (= e!64222 lt!49547)))

(assert (=> b!98522 (= lt!49547 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 (+!138 lt!49063 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16)))) lt!49056))))

(assert (=> b!98522 (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!49063 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16)))) lt!49056))))

(declare-fun b!98523 () Bool)

(declare-fun Unit!3003 () Unit!2965)

(assert (=> b!98523 (= e!64222 Unit!3003)))

(declare-fun b!98524 () Bool)

(assert (=> b!98524 (= e!64223 (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!49063 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16)))) lt!49056)))))

(assert (= (and d!26355 c!16746) b!98522))

(assert (= (and d!26355 (not c!16746)) b!98523))

(assert (= (and d!26355 (not res!49582)) b!98524))

(declare-fun m!108141 () Bool)

(assert (=> d!26355 m!108141))

(declare-fun m!108143 () Bool)

(assert (=> b!98522 m!108143))

(declare-fun m!108145 () Bool)

(assert (=> b!98522 m!108145))

(assert (=> b!98522 m!108145))

(declare-fun m!108147 () Bool)

(assert (=> b!98522 m!108147))

(assert (=> b!98524 m!108145))

(assert (=> b!98524 m!108145))

(assert (=> b!98524 m!108147))

(assert (=> b!97901 d!26355))

(declare-fun d!26357 () Bool)

(assert (=> d!26357 (= (apply!92 (+!138 lt!49070 (tuple2!2353 lt!49064 (minValue!2364 newMap!16))) lt!49057) (apply!92 lt!49070 lt!49057))))

(declare-fun lt!49550 () Unit!2965)

(assert (=> d!26357 (= lt!49550 (choose!601 lt!49070 lt!49064 (minValue!2364 newMap!16) lt!49057))))

(declare-fun e!64224 () Bool)

(assert (=> d!26357 e!64224))

(declare-fun res!49583 () Bool)

(assert (=> d!26357 (=> (not res!49583) (not e!64224))))

(assert (=> d!26357 (= res!49583 (contains!805 lt!49070 lt!49057))))

(assert (=> d!26357 (= (addApplyDifferent!68 lt!49070 lt!49064 (minValue!2364 newMap!16) lt!49057) lt!49550)))

(declare-fun b!98525 () Bool)

(assert (=> b!98525 (= e!64224 (not (= lt!49057 lt!49064)))))

(assert (= (and d!26357 res!49583) b!98525))

(assert (=> d!26357 m!107005))

(assert (=> d!26357 m!106989))

(assert (=> d!26357 m!106991))

(declare-fun m!108149 () Bool)

(assert (=> d!26357 m!108149))

(declare-fun m!108151 () Bool)

(assert (=> d!26357 m!108151))

(assert (=> d!26357 m!106989))

(assert (=> b!97901 d!26357))

(declare-fun b!98526 () Bool)

(declare-fun e!64226 () Bool)

(declare-fun lt!49552 () ListLongMap!1551)

(assert (=> b!98526 (= e!64226 (isEmpty!362 lt!49552))))

(declare-fun b!98527 () Bool)

(declare-fun res!49584 () Bool)

(declare-fun e!64229 () Bool)

(assert (=> b!98527 (=> (not res!49584) (not e!64229))))

(assert (=> b!98527 (= res!49584 (not (contains!805 lt!49552 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98528 () Bool)

(declare-fun e!64228 () Bool)

(assert (=> b!98528 (= e!64229 e!64228)))

(declare-fun c!16748 () Bool)

(declare-fun e!64227 () Bool)

(assert (=> b!98528 (= c!16748 e!64227)))

(declare-fun res!49585 () Bool)

(assert (=> b!98528 (=> (not res!49585) (not e!64227))))

(assert (=> b!98528 (= res!49585 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98529 () Bool)

(declare-fun e!64230 () Bool)

(assert (=> b!98529 (= e!64228 e!64230)))

(assert (=> b!98529 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun res!49586 () Bool)

(assert (=> b!98529 (= res!49586 (contains!805 lt!49552 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98529 (=> (not res!49586) (not e!64230))))

(declare-fun b!98531 () Bool)

(declare-fun lt!49553 () Unit!2965)

(declare-fun lt!49551 () Unit!2965)

(assert (=> b!98531 (= lt!49553 lt!49551)))

(declare-fun lt!49554 () ListLongMap!1551)

(declare-fun lt!49556 () V!3155)

(declare-fun lt!49555 () (_ BitVec 64))

(declare-fun lt!49557 () (_ BitVec 64))

(assert (=> b!98531 (not (contains!805 (+!138 lt!49554 (tuple2!2353 lt!49555 lt!49556)) lt!49557))))

(assert (=> b!98531 (= lt!49551 (addStillNotContains!42 lt!49554 lt!49555 lt!49556 lt!49557))))

(assert (=> b!98531 (= lt!49557 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98531 (= lt!49556 (get!1296 (select (arr!2015 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98531 (= lt!49555 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!10068 () ListLongMap!1551)

(assert (=> b!98531 (= lt!49554 call!10068)))

(declare-fun e!64225 () ListLongMap!1551)

(assert (=> b!98531 (= e!64225 (+!138 call!10068 (tuple2!2353 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000) (get!1296 (select (arr!2015 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98532 () Bool)

(assert (=> b!98532 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(assert (=> b!98532 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_values!2464 newMap!16))))))

(assert (=> b!98532 (= e!64230 (= (apply!92 lt!49552 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98533 () Bool)

(assert (=> b!98533 (= e!64225 call!10068)))

(declare-fun b!98534 () Bool)

(declare-fun e!64231 () ListLongMap!1551)

(assert (=> b!98534 (= e!64231 e!64225)))

(declare-fun c!16747 () Bool)

(assert (=> b!98534 (= c!16747 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98535 () Bool)

(assert (=> b!98535 (= e!64226 (= lt!49552 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16))))))

(declare-fun b!98536 () Bool)

(assert (=> b!98536 (= e!64227 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98536 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!98537 () Bool)

(assert (=> b!98537 (= e!64228 e!64226)))

(declare-fun c!16749 () Bool)

(assert (=> b!98537 (= c!16749 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun bm!10065 () Bool)

(assert (=> bm!10065 (= call!10068 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2481 newMap!16)))))

(declare-fun d!26359 () Bool)

(assert (=> d!26359 e!64229))

(declare-fun res!49587 () Bool)

(assert (=> d!26359 (=> (not res!49587) (not e!64229))))

(assert (=> d!26359 (= res!49587 (not (contains!805 lt!49552 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26359 (= lt!49552 e!64231)))

(declare-fun c!16750 () Bool)

(assert (=> d!26359 (= c!16750 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26359 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26359 (= (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49552)))

(declare-fun b!98530 () Bool)

(assert (=> b!98530 (= e!64231 (ListLongMap!1552 Nil!1609))))

(assert (= (and d!26359 c!16750) b!98530))

(assert (= (and d!26359 (not c!16750)) b!98534))

(assert (= (and b!98534 c!16747) b!98531))

(assert (= (and b!98534 (not c!16747)) b!98533))

(assert (= (or b!98531 b!98533) bm!10065))

(assert (= (and d!26359 res!49587) b!98527))

(assert (= (and b!98527 res!49584) b!98528))

(assert (= (and b!98528 res!49585) b!98536))

(assert (= (and b!98528 c!16748) b!98529))

(assert (= (and b!98528 (not c!16748)) b!98537))

(assert (= (and b!98529 res!49586) b!98532))

(assert (= (and b!98537 c!16749) b!98535))

(assert (= (and b!98537 (not c!16749)) b!98526))

(declare-fun b_lambda!4399 () Bool)

(assert (=> (not b_lambda!4399) (not b!98531)))

(assert (=> b!98531 t!5581))

(declare-fun b_and!6065 () Bool)

(assert (= b_and!6061 (and (=> t!5581 result!3283) b_and!6065)))

(assert (=> b!98531 t!5583))

(declare-fun b_and!6067 () Bool)

(assert (= b_and!6063 (and (=> t!5583 result!3285) b_and!6067)))

(declare-fun b_lambda!4401 () Bool)

(assert (=> (not b_lambda!4401) (not b!98532)))

(assert (=> b!98532 t!5581))

(declare-fun b_and!6069 () Bool)

(assert (= b_and!6065 (and (=> t!5581 result!3283) b_and!6069)))

(assert (=> b!98532 t!5583))

(declare-fun b_and!6071 () Bool)

(assert (= b_and!6067 (and (=> t!5583 result!3285) b_and!6071)))

(declare-fun m!108153 () Bool)

(assert (=> b!98526 m!108153))

(assert (=> b!98536 m!106867))

(assert (=> b!98536 m!106867))

(assert (=> b!98536 m!106887))

(declare-fun m!108155 () Bool)

(assert (=> d!26359 m!108155))

(assert (=> d!26359 m!106929))

(declare-fun m!108157 () Bool)

(assert (=> b!98531 m!108157))

(declare-fun m!108159 () Bool)

(assert (=> b!98531 m!108159))

(assert (=> b!98531 m!108157))

(declare-fun m!108161 () Bool)

(assert (=> b!98531 m!108161))

(assert (=> b!98531 m!106867))

(assert (=> b!98531 m!106939))

(assert (=> b!98531 m!107025))

(assert (=> b!98531 m!106939))

(assert (=> b!98531 m!107027))

(assert (=> b!98531 m!107025))

(declare-fun m!108163 () Bool)

(assert (=> b!98531 m!108163))

(declare-fun m!108165 () Bool)

(assert (=> b!98527 m!108165))

(assert (=> b!98534 m!106867))

(assert (=> b!98534 m!106867))

(assert (=> b!98534 m!106887))

(assert (=> b!98532 m!106867))

(declare-fun m!108167 () Bool)

(assert (=> b!98532 m!108167))

(assert (=> b!98532 m!106867))

(assert (=> b!98532 m!106939))

(assert (=> b!98532 m!107025))

(assert (=> b!98532 m!106939))

(assert (=> b!98532 m!107027))

(assert (=> b!98532 m!107025))

(declare-fun m!108169 () Bool)

(assert (=> bm!10065 m!108169))

(assert (=> b!98535 m!108169))

(assert (=> b!98529 m!106867))

(assert (=> b!98529 m!106867))

(declare-fun m!108171 () Bool)

(assert (=> b!98529 m!108171))

(assert (=> b!97901 d!26359))

(declare-fun d!26361 () Bool)

(assert (=> d!26361 (= (apply!92 (+!138 lt!49071 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16))) lt!49055) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!49071 (tuple2!2353 lt!49068 (zeroValue!2364 newMap!16)))) lt!49055)))))

(declare-fun bs!4066 () Bool)

(assert (= bs!4066 d!26361))

(declare-fun m!108173 () Bool)

(assert (=> bs!4066 m!108173))

(assert (=> bs!4066 m!108173))

(declare-fun m!108175 () Bool)

(assert (=> bs!4066 m!108175))

(assert (=> b!97901 d!26361))

(declare-fun d!26363 () Bool)

(declare-fun e!64232 () Bool)

(assert (=> d!26363 e!64232))

(declare-fun res!49589 () Bool)

(assert (=> d!26363 (=> (not res!49589) (not e!64232))))

(declare-fun lt!49558 () ListLongMap!1551)

(assert (=> d!26363 (= res!49589 (contains!805 lt!49558 (_1!1186 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16)))))))

(declare-fun lt!49560 () List!1612)

(assert (=> d!26363 (= lt!49558 (ListLongMap!1552 lt!49560))))

(declare-fun lt!49561 () Unit!2965)

(declare-fun lt!49559 () Unit!2965)

(assert (=> d!26363 (= lt!49561 lt!49559)))

(assert (=> d!26363 (= (getValueByKey!149 lt!49560 (_1!1186 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26363 (= lt!49559 (lemmaContainsTupThenGetReturnValue!67 lt!49560 (_1!1186 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26363 (= lt!49560 (insertStrictlySorted!69 (toList!791 lt!49063) (_1!1186 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16)))))))

(assert (=> d!26363 (= (+!138 lt!49063 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16))) lt!49558)))

(declare-fun b!98538 () Bool)

(declare-fun res!49588 () Bool)

(assert (=> b!98538 (=> (not res!49588) (not e!64232))))

(assert (=> b!98538 (= res!49588 (= (getValueByKey!149 (toList!791 lt!49558) (_1!1186 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16))))))))

(declare-fun b!98539 () Bool)

(assert (=> b!98539 (= e!64232 (contains!808 (toList!791 lt!49558) (tuple2!2353 lt!49059 (zeroValue!2364 newMap!16))))))

(assert (= (and d!26363 res!49589) b!98538))

(assert (= (and b!98538 res!49588) b!98539))

(declare-fun m!108177 () Bool)

(assert (=> d!26363 m!108177))

(declare-fun m!108179 () Bool)

(assert (=> d!26363 m!108179))

(declare-fun m!108181 () Bool)

(assert (=> d!26363 m!108181))

(declare-fun m!108183 () Bool)

(assert (=> d!26363 m!108183))

(declare-fun m!108185 () Bool)

(assert (=> b!98538 m!108185))

(declare-fun m!108187 () Bool)

(assert (=> b!98539 m!108187))

(assert (=> b!97901 d!26363))

(declare-fun d!26365 () Bool)

(assert (=> d!26365 (= (get!1299 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97887 d!26365))

(declare-fun b!98541 () Bool)

(declare-fun e!64233 () Option!155)

(declare-fun e!64234 () Option!155)

(assert (=> b!98541 (= e!64233 e!64234)))

(declare-fun c!16752 () Bool)

(assert (=> b!98541 (= c!16752 (and ((_ is Cons!1608) (toList!791 lt!49235)) (not (= (_1!1186 (h!2202 (toList!791 lt!49235))) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98543 () Bool)

(assert (=> b!98543 (= e!64234 None!153)))

(declare-fun d!26367 () Bool)

(declare-fun c!16751 () Bool)

(assert (=> d!26367 (= c!16751 (and ((_ is Cons!1608) (toList!791 lt!49235)) (= (_1!1186 (h!2202 (toList!791 lt!49235))) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26367 (= (getValueByKey!149 (toList!791 lt!49235) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) e!64233)))

(declare-fun b!98542 () Bool)

(assert (=> b!98542 (= e!64234 (getValueByKey!149 (t!5574 (toList!791 lt!49235)) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98540 () Bool)

(assert (=> b!98540 (= e!64233 (Some!154 (_2!1186 (h!2202 (toList!791 lt!49235)))))))

(assert (= (and d!26367 c!16751) b!98540))

(assert (= (and d!26367 (not c!16751)) b!98541))

(assert (= (and b!98541 c!16752) b!98542))

(assert (= (and b!98541 (not c!16752)) b!98543))

(declare-fun m!108189 () Bool)

(assert (=> b!98542 m!108189))

(assert (=> b!98091 d!26367))

(declare-fun b!98545 () Bool)

(declare-fun e!64235 () Option!155)

(declare-fun e!64236 () Option!155)

(assert (=> b!98545 (= e!64235 e!64236)))

(declare-fun c!16754 () Bool)

(assert (=> b!98545 (= c!16754 (and ((_ is Cons!1608) (toList!791 lt!49017)) (not (= (_1!1186 (h!2202 (toList!791 lt!49017))) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!98547 () Bool)

(assert (=> b!98547 (= e!64236 None!153)))

(declare-fun d!26369 () Bool)

(declare-fun c!16753 () Bool)

(assert (=> d!26369 (= c!16753 (and ((_ is Cons!1608) (toList!791 lt!49017)) (= (_1!1186 (h!2202 (toList!791 lt!49017))) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26369 (= (getValueByKey!149 (toList!791 lt!49017) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!64235)))

(declare-fun b!98546 () Bool)

(assert (=> b!98546 (= e!64236 (getValueByKey!149 (t!5574 (toList!791 lt!49017)) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98544 () Bool)

(assert (=> b!98544 (= e!64235 (Some!154 (_2!1186 (h!2202 (toList!791 lt!49017)))))))

(assert (= (and d!26369 c!16753) b!98544))

(assert (= (and d!26369 (not c!16753)) b!98545))

(assert (= (and b!98545 c!16754) b!98546))

(assert (= (and b!98545 (not c!16754)) b!98547))

(declare-fun m!108191 () Bool)

(assert (=> b!98546 m!108191))

(assert (=> b!97863 d!26369))

(assert (=> d!26039 d!26031))

(assert (=> d!26039 d!26033))

(declare-fun d!26371 () Bool)

(assert (=> d!26371 (isDefined!103 (getValueByKey!149 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26371 true))

(declare-fun _$12!344 () Unit!2965)

(assert (=> d!26371 (= (choose!596 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) _$12!344)))

(declare-fun bs!4067 () Bool)

(assert (= bs!4067 d!26371))

(assert (=> bs!4067 m!106609))

(assert (=> bs!4067 m!106749))

(assert (=> bs!4067 m!106749))

(assert (=> bs!4067 m!106751))

(assert (=> d!26039 d!26371))

(declare-fun d!26373 () Bool)

(declare-fun res!49594 () Bool)

(declare-fun e!64241 () Bool)

(assert (=> d!26373 (=> res!49594 e!64241)))

(assert (=> d!26373 (= res!49594 (or ((_ is Nil!1609) (toList!791 lt!48799)) ((_ is Nil!1609) (t!5574 (toList!791 lt!48799)))))))

(assert (=> d!26373 (= (isStrictlySorted!299 (toList!791 lt!48799)) e!64241)))

(declare-fun b!98552 () Bool)

(declare-fun e!64242 () Bool)

(assert (=> b!98552 (= e!64241 e!64242)))

(declare-fun res!49595 () Bool)

(assert (=> b!98552 (=> (not res!49595) (not e!64242))))

(assert (=> b!98552 (= res!49595 (bvslt (_1!1186 (h!2202 (toList!791 lt!48799))) (_1!1186 (h!2202 (t!5574 (toList!791 lt!48799))))))))

(declare-fun b!98553 () Bool)

(assert (=> b!98553 (= e!64242 (isStrictlySorted!299 (t!5574 (toList!791 lt!48799))))))

(assert (= (and d!26373 (not res!49594)) b!98552))

(assert (= (and b!98552 res!49595) b!98553))

(declare-fun m!108193 () Bool)

(assert (=> b!98553 m!108193))

(assert (=> d!26039 d!26373))

(assert (=> b!98135 d!26165))

(assert (=> d!26097 d!26095))

(declare-fun d!26375 () Bool)

(declare-fun e!64244 () Bool)

(assert (=> d!26375 e!64244))

(declare-fun res!49596 () Bool)

(assert (=> d!26375 (=> res!49596 e!64244)))

(declare-fun lt!49564 () Bool)

(assert (=> d!26375 (= res!49596 (not lt!49564))))

(declare-fun lt!49565 () Bool)

(assert (=> d!26375 (= lt!49564 lt!49565)))

(declare-fun lt!49562 () Unit!2965)

(declare-fun e!64243 () Unit!2965)

(assert (=> d!26375 (= lt!49562 e!64243)))

(declare-fun c!16755 () Bool)

(assert (=> d!26375 (= c!16755 lt!49565)))

(assert (=> d!26375 (= lt!49565 (containsKey!153 (toList!791 lt!48888) lt!48875))))

(assert (=> d!26375 (= (contains!805 lt!48888 lt!48875) lt!49564)))

(declare-fun b!98554 () Bool)

(declare-fun lt!49563 () Unit!2965)

(assert (=> b!98554 (= e!64243 lt!49563)))

(assert (=> b!98554 (= lt!49563 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48888) lt!48875))))

(assert (=> b!98554 (isDefined!103 (getValueByKey!149 (toList!791 lt!48888) lt!48875))))

(declare-fun b!98555 () Bool)

(declare-fun Unit!3004 () Unit!2965)

(assert (=> b!98555 (= e!64243 Unit!3004)))

(declare-fun b!98556 () Bool)

(assert (=> b!98556 (= e!64244 (isDefined!103 (getValueByKey!149 (toList!791 lt!48888) lt!48875)))))

(assert (= (and d!26375 c!16755) b!98554))

(assert (= (and d!26375 (not c!16755)) b!98555))

(assert (= (and d!26375 (not res!49596)) b!98556))

(declare-fun m!108195 () Bool)

(assert (=> d!26375 m!108195))

(declare-fun m!108197 () Bool)

(assert (=> b!98554 m!108197))

(assert (=> b!98554 m!107187))

(assert (=> b!98554 m!107187))

(declare-fun m!108199 () Bool)

(assert (=> b!98554 m!108199))

(assert (=> b!98556 m!107187))

(assert (=> b!98556 m!107187))

(assert (=> b!98556 m!108199))

(assert (=> d!26097 d!26375))

(assert (=> d!26097 d!26105))

(assert (=> d!26097 d!26107))

(declare-fun d!26377 () Bool)

(assert (=> d!26377 (= (apply!92 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48875) (apply!92 lt!48888 lt!48875))))

(assert (=> d!26377 true))

(declare-fun _$34!863 () Unit!2965)

(assert (=> d!26377 (= (choose!601 lt!48888 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48875) _$34!863)))

(declare-fun bs!4068 () Bool)

(assert (= bs!4068 d!26377))

(assert (=> bs!4068 m!106703))

(assert (=> bs!4068 m!106703))

(assert (=> bs!4068 m!106705))

(assert (=> bs!4068 m!106719))

(assert (=> d!26097 d!26377))

(declare-fun d!26379 () Bool)

(declare-fun e!64246 () Bool)

(assert (=> d!26379 e!64246))

(declare-fun res!49597 () Bool)

(assert (=> d!26379 (=> res!49597 e!64246)))

(declare-fun lt!49568 () Bool)

(assert (=> d!26379 (= res!49597 (not lt!49568))))

(declare-fun lt!49569 () Bool)

(assert (=> d!26379 (= lt!49568 lt!49569)))

(declare-fun lt!49566 () Unit!2965)

(declare-fun e!64245 () Unit!2965)

(assert (=> d!26379 (= lt!49566 e!64245)))

(declare-fun c!16756 () Bool)

(assert (=> d!26379 (= c!16756 lt!49569)))

(assert (=> d!26379 (= lt!49569 (containsKey!153 (toList!791 (getCurrentListMap!472 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(assert (=> d!26379 (= (contains!805 (getCurrentListMap!472 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))) lt!49568)))

(declare-fun b!98558 () Bool)

(declare-fun lt!49567 () Unit!2965)

(assert (=> b!98558 (= e!64245 lt!49567)))

(assert (=> b!98558 (= lt!49567 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 (getCurrentListMap!472 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(assert (=> b!98558 (isDefined!103 (getValueByKey!149 (toList!791 (getCurrentListMap!472 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(declare-fun b!98559 () Bool)

(declare-fun Unit!3005 () Unit!2965)

(assert (=> b!98559 (= e!64245 Unit!3005)))

(declare-fun b!98560 () Bool)

(assert (=> b!98560 (= e!64246 (isDefined!103 (getValueByKey!149 (toList!791 (getCurrentListMap!472 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16))) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985)))))))

(assert (= (and d!26379 c!16756) b!98558))

(assert (= (and d!26379 (not c!16756)) b!98559))

(assert (= (and d!26379 (not res!49597)) b!98560))

(assert (=> d!26379 m!106777))

(declare-fun m!108201 () Bool)

(assert (=> d!26379 m!108201))

(assert (=> b!98558 m!106777))

(declare-fun m!108203 () Bool)

(assert (=> b!98558 m!108203))

(assert (=> b!98558 m!106777))

(declare-fun m!108205 () Bool)

(assert (=> b!98558 m!108205))

(assert (=> b!98558 m!108205))

(declare-fun m!108207 () Bool)

(assert (=> b!98558 m!108207))

(assert (=> b!98560 m!106777))

(assert (=> b!98560 m!108205))

(assert (=> b!98560 m!108205))

(assert (=> b!98560 m!108207))

(assert (=> b!97937 d!26379))

(declare-fun b!98561 () Bool)

(declare-fun e!64253 () Bool)

(declare-fun call!10075 () Bool)

(assert (=> b!98561 (= e!64253 (not call!10075))))

(declare-fun b!98562 () Bool)

(declare-fun e!64255 () Unit!2965)

(declare-fun lt!49589 () Unit!2965)

(assert (=> b!98562 (= e!64255 lt!49589)))

(declare-fun lt!49580 () ListLongMap!1551)

(assert (=> b!98562 (= lt!49580 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49576 () (_ BitVec 64))

(assert (=> b!98562 (= lt!49576 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49573 () (_ BitVec 64))

(assert (=> b!98562 (= lt!49573 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49578 () Unit!2965)

(assert (=> b!98562 (= lt!49578 (addStillContains!68 lt!49580 lt!49576 (zeroValue!2364 newMap!16) lt!49573))))

(assert (=> b!98562 (contains!805 (+!138 lt!49580 (tuple2!2353 lt!49576 (zeroValue!2364 newMap!16))) lt!49573)))

(declare-fun lt!49584 () Unit!2965)

(assert (=> b!98562 (= lt!49584 lt!49578)))

(declare-fun lt!49582 () ListLongMap!1551)

(assert (=> b!98562 (= lt!49582 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49586 () (_ BitVec 64))

(assert (=> b!98562 (= lt!49586 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49591 () (_ BitVec 64))

(assert (=> b!98562 (= lt!49591 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49571 () Unit!2965)

(assert (=> b!98562 (= lt!49571 (addApplyDifferent!68 lt!49582 lt!49586 (minValue!2364 newMap!16) lt!49591))))

(assert (=> b!98562 (= (apply!92 (+!138 lt!49582 (tuple2!2353 lt!49586 (minValue!2364 newMap!16))) lt!49591) (apply!92 lt!49582 lt!49591))))

(declare-fun lt!49583 () Unit!2965)

(assert (=> b!98562 (= lt!49583 lt!49571)))

(declare-fun lt!49588 () ListLongMap!1551)

(assert (=> b!98562 (= lt!49588 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49585 () (_ BitVec 64))

(assert (=> b!98562 (= lt!49585 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49572 () (_ BitVec 64))

(assert (=> b!98562 (= lt!49572 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49575 () Unit!2965)

(assert (=> b!98562 (= lt!49575 (addApplyDifferent!68 lt!49588 lt!49585 (zeroValue!2364 newMap!16) lt!49572))))

(assert (=> b!98562 (= (apply!92 (+!138 lt!49588 (tuple2!2353 lt!49585 (zeroValue!2364 newMap!16))) lt!49572) (apply!92 lt!49588 lt!49572))))

(declare-fun lt!49570 () Unit!2965)

(assert (=> b!98562 (= lt!49570 lt!49575)))

(declare-fun lt!49587 () ListLongMap!1551)

(assert (=> b!98562 (= lt!49587 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49581 () (_ BitVec 64))

(assert (=> b!98562 (= lt!49581 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49574 () (_ BitVec 64))

(assert (=> b!98562 (= lt!49574 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98562 (= lt!49589 (addApplyDifferent!68 lt!49587 lt!49581 (minValue!2364 newMap!16) lt!49574))))

(assert (=> b!98562 (= (apply!92 (+!138 lt!49587 (tuple2!2353 lt!49581 (minValue!2364 newMap!16))) lt!49574) (apply!92 lt!49587 lt!49574))))

(declare-fun b!98563 () Bool)

(declare-fun e!64254 () ListLongMap!1551)

(declare-fun call!10070 () ListLongMap!1551)

(assert (=> b!98563 (= e!64254 call!10070)))

(declare-fun bm!10066 () Bool)

(declare-fun call!10073 () ListLongMap!1551)

(assert (=> bm!10066 (= call!10070 call!10073)))

(declare-fun b!98564 () Bool)

(declare-fun e!64249 () Bool)

(declare-fun e!64250 () Bool)

(assert (=> b!98564 (= e!64249 e!64250)))

(declare-fun res!49605 () Bool)

(declare-fun call!10072 () Bool)

(assert (=> b!98564 (= res!49605 call!10072)))

(assert (=> b!98564 (=> (not res!49605) (not e!64250))))

(declare-fun b!98565 () Bool)

(declare-fun res!49601 () Bool)

(declare-fun e!64252 () Bool)

(assert (=> b!98565 (=> (not res!49601) (not e!64252))))

(assert (=> b!98565 (= res!49601 e!64249)))

(declare-fun c!16760 () Bool)

(assert (=> b!98565 (= c!16760 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26381 () Bool)

(assert (=> d!26381 e!64252))

(declare-fun res!49598 () Bool)

(assert (=> d!26381 (=> (not res!49598) (not e!64252))))

(assert (=> d!26381 (= res!49598 (or (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))))

(declare-fun lt!49590 () ListLongMap!1551)

(declare-fun lt!49579 () ListLongMap!1551)

(assert (=> d!26381 (= lt!49590 lt!49579)))

(declare-fun lt!49577 () Unit!2965)

(assert (=> d!26381 (= lt!49577 e!64255)))

(declare-fun c!16758 () Bool)

(declare-fun e!64251 () Bool)

(assert (=> d!26381 (= c!16758 e!64251)))

(declare-fun res!49599 () Bool)

(assert (=> d!26381 (=> (not res!49599) (not e!64251))))

(assert (=> d!26381 (= res!49599 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun e!64258 () ListLongMap!1551)

(assert (=> d!26381 (= lt!49579 e!64258)))

(declare-fun c!16757 () Bool)

(assert (=> d!26381 (= c!16757 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26381 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26381 (= (getCurrentListMap!472 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49590)))

(declare-fun b!98566 () Bool)

(assert (=> b!98566 (= e!64250 (= (apply!92 lt!49590 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun call!10074 () ListLongMap!1551)

(declare-fun bm!10067 () Bool)

(declare-fun call!10071 () ListLongMap!1551)

(declare-fun call!10069 () ListLongMap!1551)

(declare-fun c!16762 () Bool)

(assert (=> bm!10067 (= call!10073 (+!138 (ite c!16757 call!10071 (ite c!16762 call!10074 call!10069)) (ite (or c!16757 c!16762) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!98567 () Bool)

(assert (=> b!98567 (= e!64251 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98568 () Bool)

(declare-fun e!64259 () Bool)

(assert (=> b!98568 (= e!64259 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98569 () Bool)

(assert (=> b!98569 (= e!64249 (not call!10072))))

(declare-fun b!98570 () Bool)

(declare-fun e!64247 () ListLongMap!1551)

(assert (=> b!98570 (= e!64247 call!10070)))

(declare-fun b!98571 () Bool)

(assert (=> b!98571 (= e!64258 e!64254)))

(assert (=> b!98571 (= c!16762 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10068 () Bool)

(assert (=> bm!10068 (= call!10075 (contains!805 lt!49590 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98572 () Bool)

(declare-fun e!64248 () Bool)

(assert (=> b!98572 (= e!64248 (= (apply!92 lt!49590 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun b!98573 () Bool)

(declare-fun e!64257 () Bool)

(assert (=> b!98573 (= e!64257 (= (apply!92 lt!49590 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 lt!48976) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98573 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 lt!48976)))))

(assert (=> b!98573 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98574 () Bool)

(declare-fun res!49600 () Bool)

(assert (=> b!98574 (=> (not res!49600) (not e!64252))))

(declare-fun e!64256 () Bool)

(assert (=> b!98574 (= res!49600 e!64256)))

(declare-fun res!49604 () Bool)

(assert (=> b!98574 (=> res!49604 e!64256)))

(assert (=> b!98574 (= res!49604 (not e!64259))))

(declare-fun res!49606 () Bool)

(assert (=> b!98574 (=> (not res!49606) (not e!64259))))

(assert (=> b!98574 (= res!49606 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98575 () Bool)

(assert (=> b!98575 (= e!64247 call!10069)))

(declare-fun b!98576 () Bool)

(assert (=> b!98576 (= e!64256 e!64257)))

(declare-fun res!49603 () Bool)

(assert (=> b!98576 (=> (not res!49603) (not e!64257))))

(assert (=> b!98576 (= res!49603 (contains!805 lt!49590 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98576 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun bm!10069 () Bool)

(assert (=> bm!10069 (= call!10074 call!10071)))

(declare-fun b!98577 () Bool)

(assert (=> b!98577 (= e!64253 e!64248)))

(declare-fun res!49602 () Bool)

(assert (=> b!98577 (= res!49602 call!10075)))

(assert (=> b!98577 (=> (not res!49602) (not e!64248))))

(declare-fun bm!10070 () Bool)

(assert (=> bm!10070 (= call!10069 call!10074)))

(declare-fun b!98578 () Bool)

(declare-fun Unit!3006 () Unit!2965)

(assert (=> b!98578 (= e!64255 Unit!3006)))

(declare-fun b!98579 () Bool)

(declare-fun c!16759 () Bool)

(assert (=> b!98579 (= c!16759 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98579 (= e!64254 e!64247)))

(declare-fun bm!10071 () Bool)

(assert (=> bm!10071 (= call!10071 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) lt!48976 (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!98580 () Bool)

(assert (=> b!98580 (= e!64258 (+!138 call!10073 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun bm!10072 () Bool)

(assert (=> bm!10072 (= call!10072 (contains!805 lt!49590 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98581 () Bool)

(assert (=> b!98581 (= e!64252 e!64253)))

(declare-fun c!16761 () Bool)

(assert (=> b!98581 (= c!16761 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26381 c!16757) b!98580))

(assert (= (and d!26381 (not c!16757)) b!98571))

(assert (= (and b!98571 c!16762) b!98563))

(assert (= (and b!98571 (not c!16762)) b!98579))

(assert (= (and b!98579 c!16759) b!98570))

(assert (= (and b!98579 (not c!16759)) b!98575))

(assert (= (or b!98570 b!98575) bm!10070))

(assert (= (or b!98563 bm!10070) bm!10069))

(assert (= (or b!98563 b!98570) bm!10066))

(assert (= (or b!98580 bm!10069) bm!10071))

(assert (= (or b!98580 bm!10066) bm!10067))

(assert (= (and d!26381 res!49599) b!98567))

(assert (= (and d!26381 c!16758) b!98562))

(assert (= (and d!26381 (not c!16758)) b!98578))

(assert (= (and d!26381 res!49598) b!98574))

(assert (= (and b!98574 res!49606) b!98568))

(assert (= (and b!98574 (not res!49604)) b!98576))

(assert (= (and b!98576 res!49603) b!98573))

(assert (= (and b!98574 res!49600) b!98565))

(assert (= (and b!98565 c!16760) b!98564))

(assert (= (and b!98565 (not c!16760)) b!98569))

(assert (= (and b!98564 res!49605) b!98566))

(assert (= (or b!98564 b!98569) bm!10072))

(assert (= (and b!98565 res!49601) b!98581))

(assert (= (and b!98581 c!16761) b!98577))

(assert (= (and b!98581 (not c!16761)) b!98561))

(assert (= (and b!98577 res!49602) b!98572))

(assert (= (or b!98577 b!98561) bm!10068))

(declare-fun b_lambda!4403 () Bool)

(assert (=> (not b_lambda!4403) (not b!98573)))

(assert (=> b!98573 t!5581))

(declare-fun b_and!6073 () Bool)

(assert (= b_and!6069 (and (=> t!5581 result!3283) b_and!6073)))

(assert (=> b!98573 t!5583))

(declare-fun b_and!6075 () Bool)

(assert (= b_and!6071 (and (=> t!5583 result!3285) b_and!6075)))

(assert (=> b!98568 m!106867))

(assert (=> b!98568 m!106867))

(assert (=> b!98568 m!106887))

(declare-fun m!108209 () Bool)

(assert (=> bm!10067 m!108209))

(declare-fun m!108211 () Bool)

(assert (=> b!98566 m!108211))

(assert (=> b!98567 m!106867))

(assert (=> b!98567 m!106867))

(assert (=> b!98567 m!106887))

(declare-fun m!108213 () Bool)

(assert (=> b!98562 m!108213))

(declare-fun m!108215 () Bool)

(assert (=> b!98562 m!108215))

(declare-fun m!108217 () Bool)

(assert (=> b!98562 m!108217))

(declare-fun m!108219 () Bool)

(assert (=> b!98562 m!108219))

(declare-fun m!108221 () Bool)

(assert (=> b!98562 m!108221))

(assert (=> b!98562 m!108219))

(declare-fun m!108223 () Bool)

(assert (=> b!98562 m!108223))

(declare-fun m!108225 () Bool)

(assert (=> b!98562 m!108225))

(declare-fun m!108227 () Bool)

(assert (=> b!98562 m!108227))

(assert (=> b!98562 m!108215))

(declare-fun m!108229 () Bool)

(assert (=> b!98562 m!108229))

(declare-fun m!108231 () Bool)

(assert (=> b!98562 m!108231))

(declare-fun m!108233 () Bool)

(assert (=> b!98562 m!108233))

(declare-fun m!108235 () Bool)

(assert (=> b!98562 m!108235))

(declare-fun m!108237 () Bool)

(assert (=> b!98562 m!108237))

(declare-fun m!108239 () Bool)

(assert (=> b!98562 m!108239))

(assert (=> b!98562 m!108229))

(assert (=> b!98562 m!106867))

(declare-fun m!108241 () Bool)

(assert (=> b!98562 m!108241))

(assert (=> b!98562 m!108225))

(declare-fun m!108243 () Bool)

(assert (=> b!98562 m!108243))

(declare-fun m!108245 () Bool)

(assert (=> b!98572 m!108245))

(declare-fun m!108247 () Bool)

(assert (=> bm!10068 m!108247))

(assert (=> bm!10071 m!108223))

(assert (=> d!26381 m!106929))

(assert (=> b!98576 m!106867))

(assert (=> b!98576 m!106867))

(declare-fun m!108249 () Bool)

(assert (=> b!98576 m!108249))

(declare-fun m!108251 () Bool)

(assert (=> bm!10072 m!108251))

(declare-fun m!108253 () Bool)

(assert (=> b!98580 m!108253))

(declare-fun m!108255 () Bool)

(assert (=> b!98573 m!108255))

(assert (=> b!98573 m!106939))

(declare-fun m!108257 () Bool)

(assert (=> b!98573 m!108257))

(assert (=> b!98573 m!106939))

(assert (=> b!98573 m!106867))

(assert (=> b!98573 m!106867))

(declare-fun m!108259 () Bool)

(assert (=> b!98573 m!108259))

(assert (=> b!98573 m!108255))

(assert (=> b!97937 d!26381))

(declare-fun d!26383 () Bool)

(declare-fun e!64260 () Bool)

(assert (=> d!26383 e!64260))

(declare-fun res!49608 () Bool)

(assert (=> d!26383 (=> (not res!49608) (not e!64260))))

(declare-fun lt!49592 () ListLongMap!1551)

(assert (=> d!26383 (= res!49608 (contains!805 lt!49592 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun lt!49594 () List!1612)

(assert (=> d!26383 (= lt!49592 (ListLongMap!1552 lt!49594))))

(declare-fun lt!49595 () Unit!2965)

(declare-fun lt!49593 () Unit!2965)

(assert (=> d!26383 (= lt!49595 lt!49593)))

(assert (=> d!26383 (= (getValueByKey!149 lt!49594 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26383 (= lt!49593 (lemmaContainsTupThenGetReturnValue!67 lt!49594 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26383 (= lt!49594 (insertStrictlySorted!69 (toList!791 call!10014) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (=> d!26383 (= (+!138 call!10014 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))) lt!49592)))

(declare-fun b!98582 () Bool)

(declare-fun res!49607 () Bool)

(assert (=> b!98582 (=> (not res!49607) (not e!64260))))

(assert (=> b!98582 (= res!49607 (= (getValueByKey!149 (toList!791 lt!49592) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(declare-fun b!98583 () Bool)

(assert (=> b!98583 (= e!64260 (contains!808 (toList!791 lt!49592) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(assert (= (and d!26383 res!49608) b!98582))

(assert (= (and b!98582 res!49607) b!98583))

(declare-fun m!108261 () Bool)

(assert (=> d!26383 m!108261))

(declare-fun m!108263 () Bool)

(assert (=> d!26383 m!108263))

(declare-fun m!108265 () Bool)

(assert (=> d!26383 m!108265))

(declare-fun m!108267 () Bool)

(assert (=> d!26383 m!108267))

(declare-fun m!108269 () Bool)

(assert (=> b!98582 m!108269))

(declare-fun m!108271 () Bool)

(assert (=> b!98583 m!108271))

(assert (=> b!98148 d!26383))

(declare-fun d!26385 () Bool)

(declare-fun e!64262 () Bool)

(assert (=> d!26385 e!64262))

(declare-fun res!49609 () Bool)

(assert (=> d!26385 (=> res!49609 e!64262)))

(declare-fun lt!49598 () Bool)

(assert (=> d!26385 (= res!49609 (not lt!49598))))

(declare-fun lt!49599 () Bool)

(assert (=> d!26385 (= lt!49598 lt!49599)))

(declare-fun lt!49596 () Unit!2965)

(declare-fun e!64261 () Unit!2965)

(assert (=> d!26385 (= lt!49596 e!64261)))

(declare-fun c!16763 () Bool)

(assert (=> d!26385 (= c!16763 lt!49599)))

(assert (=> d!26385 (= lt!49599 (containsKey!153 (toList!791 lt!49073) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26385 (= (contains!805 lt!49073 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) lt!49598)))

(declare-fun b!98584 () Bool)

(declare-fun lt!49597 () Unit!2965)

(assert (=> b!98584 (= e!64261 lt!49597)))

(assert (=> b!98584 (= lt!49597 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49073) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98584 (isDefined!103 (getValueByKey!149 (toList!791 lt!49073) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98585 () Bool)

(declare-fun Unit!3007 () Unit!2965)

(assert (=> b!98585 (= e!64261 Unit!3007)))

(declare-fun b!98586 () Bool)

(assert (=> b!98586 (= e!64262 (isDefined!103 (getValueByKey!149 (toList!791 lt!49073) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26385 c!16763) b!98584))

(assert (= (and d!26385 (not c!16763)) b!98585))

(assert (= (and d!26385 (not res!49609)) b!98586))

(assert (=> d!26385 m!106867))

(declare-fun m!108273 () Bool)

(assert (=> d!26385 m!108273))

(assert (=> b!98584 m!106867))

(declare-fun m!108275 () Bool)

(assert (=> b!98584 m!108275))

(assert (=> b!98584 m!106867))

(declare-fun m!108277 () Bool)

(assert (=> b!98584 m!108277))

(assert (=> b!98584 m!108277))

(declare-fun m!108279 () Bool)

(assert (=> b!98584 m!108279))

(assert (=> b!98586 m!106867))

(assert (=> b!98586 m!108277))

(assert (=> b!98586 m!108277))

(assert (=> b!98586 m!108279))

(assert (=> b!97915 d!26385))

(declare-fun d!26387 () Bool)

(assert (not d!26387))

(assert (=> b!97843 d!26387))

(declare-fun d!26389 () Bool)

(assert (=> d!26389 (= (size!2268 newMap!16) (bvadd (_size!475 newMap!16) (bvsdiv (bvadd (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!98013 d!26389))

(declare-fun d!26391 () Bool)

(declare-fun e!64263 () Bool)

(assert (=> d!26391 e!64263))

(declare-fun res!49611 () Bool)

(assert (=> d!26391 (=> (not res!49611) (not e!64263))))

(declare-fun lt!49600 () ListLongMap!1551)

(assert (=> d!26391 (= res!49611 (contains!805 lt!49600 (_1!1186 (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(declare-fun lt!49602 () List!1612)

(assert (=> d!26391 (= lt!49600 (ListLongMap!1552 lt!49602))))

(declare-fun lt!49603 () Unit!2965)

(declare-fun lt!49601 () Unit!2965)

(assert (=> d!26391 (= lt!49603 lt!49601)))

(assert (=> d!26391 (= (getValueByKey!149 lt!49602 (_1!1186 (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))) (Some!154 (_2!1186 (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(assert (=> d!26391 (= lt!49601 (lemmaContainsTupThenGetReturnValue!67 lt!49602 (_1!1186 (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (_2!1186 (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(assert (=> d!26391 (= lt!49602 (insertStrictlySorted!69 (toList!791 (ite c!16580 call!9972 (ite c!16585 call!9975 call!9970))) (_1!1186 (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (_2!1186 (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(assert (=> d!26391 (= (+!138 (ite c!16580 call!9972 (ite c!16585 call!9975 call!9970)) (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) lt!49600)))

(declare-fun b!98587 () Bool)

(declare-fun res!49610 () Bool)

(assert (=> b!98587 (=> (not res!49610) (not e!64263))))

(assert (=> b!98587 (= res!49610 (= (getValueByKey!149 (toList!791 lt!49600) (_1!1186 (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))) (Some!154 (_2!1186 (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))))

(declare-fun b!98588 () Bool)

(assert (=> b!98588 (= e!64263 (contains!808 (toList!791 lt!49600) (ite (or c!16580 c!16585) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (= (and d!26391 res!49611) b!98587))

(assert (= (and b!98587 res!49610) b!98588))

(declare-fun m!108281 () Bool)

(assert (=> d!26391 m!108281))

(declare-fun m!108283 () Bool)

(assert (=> d!26391 m!108283))

(declare-fun m!108285 () Bool)

(assert (=> d!26391 m!108285))

(declare-fun m!108287 () Bool)

(assert (=> d!26391 m!108287))

(declare-fun m!108289 () Bool)

(assert (=> b!98587 m!108289))

(declare-fun m!108291 () Bool)

(assert (=> b!98588 m!108291))

(assert (=> bm!9968 d!26391))

(declare-fun d!26393 () Bool)

(assert (=> d!26393 (= (content!100 Nil!1608) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!26027 d!26393))

(declare-fun b!98589 () Bool)

(declare-fun e!64265 () (_ BitVec 32))

(declare-fun call!10076 () (_ BitVec 32))

(assert (=> b!98589 (= e!64265 (bvadd #b00000000000000000000000000000001 call!10076))))

(declare-fun b!98590 () Bool)

(assert (=> b!98590 (= e!64265 call!10076)))

(declare-fun d!26395 () Bool)

(declare-fun lt!49604 () (_ BitVec 32))

(assert (=> d!26395 (and (bvsge lt!49604 #b00000000000000000000000000000000) (bvsle lt!49604 (bvsub (size!2264 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000)))))

(declare-fun e!64264 () (_ BitVec 32))

(assert (=> d!26395 (= lt!49604 e!64264)))

(declare-fun c!16765 () Bool)

(assert (=> d!26395 (= c!16765 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))))))

(assert (=> d!26395 (and (bvsle #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2264 (_keys!4171 (_2!1187 lt!48968))) (size!2264 (_keys!4171 (_2!1187 lt!48968)))))))

(assert (=> d!26395 (= (arrayCountValidKeys!0 (_keys!4171 (_2!1187 lt!48968)) #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))) lt!49604)))

(declare-fun bm!10073 () Bool)

(assert (=> bm!10073 (= call!10076 (arrayCountValidKeys!0 (_keys!4171 (_2!1187 lt!48968)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (_2!1187 lt!48968)))))))

(declare-fun b!98591 () Bool)

(assert (=> b!98591 (= e!64264 #b00000000000000000000000000000000)))

(declare-fun b!98592 () Bool)

(assert (=> b!98592 (= e!64264 e!64265)))

(declare-fun c!16764 () Bool)

(assert (=> b!98592 (= c!16764 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000)))))

(assert (= (and d!26395 c!16765) b!98591))

(assert (= (and d!26395 (not c!16765)) b!98592))

(assert (= (and b!98592 c!16764) b!98589))

(assert (= (and b!98592 (not c!16764)) b!98590))

(assert (= (or b!98589 b!98590) bm!10073))

(declare-fun m!108293 () Bool)

(assert (=> bm!10073 m!108293))

(declare-fun m!108295 () Bool)

(assert (=> b!98592 m!108295))

(assert (=> b!98592 m!108295))

(declare-fun m!108297 () Bool)

(assert (=> b!98592 m!108297))

(assert (=> b!97897 d!26395))

(declare-fun d!26397 () Bool)

(assert (=> d!26397 (= (inRange!0 (ite c!16645 (index!3195 lt!49247) (index!3198 lt!49247)) (mask!6578 newMap!16)) (and (bvsge (ite c!16645 (index!3195 lt!49247) (index!3198 lt!49247)) #b00000000000000000000000000000000) (bvslt (ite c!16645 (index!3195 lt!49247) (index!3198 lt!49247)) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10006 d!26397))

(declare-fun d!26399 () Bool)

(declare-fun e!64267 () Bool)

(assert (=> d!26399 e!64267))

(declare-fun res!49612 () Bool)

(assert (=> d!26399 (=> res!49612 e!64267)))

(declare-fun lt!49607 () Bool)

(assert (=> d!26399 (= res!49612 (not lt!49607))))

(declare-fun lt!49608 () Bool)

(assert (=> d!26399 (= lt!49607 lt!49608)))

(declare-fun lt!49605 () Unit!2965)

(declare-fun e!64266 () Unit!2965)

(assert (=> d!26399 (= lt!49605 e!64266)))

(declare-fun c!16766 () Bool)

(assert (=> d!26399 (= c!16766 lt!49608)))

(assert (=> d!26399 (= lt!49608 (containsKey!153 (toList!791 lt!49073) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26399 (= (contains!805 lt!49073 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49607)))

(declare-fun b!98593 () Bool)

(declare-fun lt!49606 () Unit!2965)

(assert (=> b!98593 (= e!64266 lt!49606)))

(assert (=> b!98593 (= lt!49606 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49073) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98593 (isDefined!103 (getValueByKey!149 (toList!791 lt!49073) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98594 () Bool)

(declare-fun Unit!3008 () Unit!2965)

(assert (=> b!98594 (= e!64266 Unit!3008)))

(declare-fun b!98595 () Bool)

(assert (=> b!98595 (= e!64267 (isDefined!103 (getValueByKey!149 (toList!791 lt!49073) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26399 c!16766) b!98593))

(assert (= (and d!26399 (not c!16766)) b!98594))

(assert (= (and d!26399 (not res!49612)) b!98595))

(declare-fun m!108299 () Bool)

(assert (=> d!26399 m!108299))

(declare-fun m!108301 () Bool)

(assert (=> b!98593 m!108301))

(declare-fun m!108303 () Bool)

(assert (=> b!98593 m!108303))

(assert (=> b!98593 m!108303))

(declare-fun m!108305 () Bool)

(assert (=> b!98593 m!108305))

(assert (=> b!98595 m!108303))

(assert (=> b!98595 m!108303))

(assert (=> b!98595 m!108305))

(assert (=> bm!9976 d!26399))

(declare-fun d!26401 () Bool)

(assert (=> d!26401 (= (apply!92 lt!49041 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1300 (getValueByKey!149 (toList!791 lt!49041) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4069 () Bool)

(assert (= bs!4069 d!26401))

(assert (=> bs!4069 m!107799))

(assert (=> bs!4069 m!107799))

(declare-fun m!108307 () Bool)

(assert (=> bs!4069 m!108307))

(assert (=> b!97870 d!26401))

(declare-fun d!26403 () Bool)

(assert (=> d!26403 (= (get!1300 (getValueByKey!149 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2805 (getValueByKey!149 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26053 d!26403))

(declare-fun b!98597 () Bool)

(declare-fun e!64268 () Option!155)

(declare-fun e!64269 () Option!155)

(assert (=> b!98597 (= e!64268 e!64269)))

(declare-fun c!16768 () Bool)

(assert (=> b!98597 (= c!16768 (and ((_ is Cons!1608) (toList!791 lt!48891)) (not (= (_1!1186 (h!2202 (toList!791 lt!48891))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98599 () Bool)

(assert (=> b!98599 (= e!64269 None!153)))

(declare-fun d!26405 () Bool)

(declare-fun c!16767 () Bool)

(assert (=> d!26405 (= c!16767 (and ((_ is Cons!1608) (toList!791 lt!48891)) (= (_1!1186 (h!2202 (toList!791 lt!48891))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26405 (= (getValueByKey!149 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000) e!64268)))

(declare-fun b!98598 () Bool)

(assert (=> b!98598 (= e!64269 (getValueByKey!149 (t!5574 (toList!791 lt!48891)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98596 () Bool)

(assert (=> b!98596 (= e!64268 (Some!154 (_2!1186 (h!2202 (toList!791 lt!48891)))))))

(assert (= (and d!26405 c!16767) b!98596))

(assert (= (and d!26405 (not c!16767)) b!98597))

(assert (= (and b!98597 c!16768) b!98598))

(assert (= (and b!98597 (not c!16768)) b!98599))

(declare-fun m!108309 () Bool)

(assert (=> b!98598 m!108309))

(assert (=> d!26053 d!26405))

(declare-fun d!26407 () Bool)

(assert (=> d!26407 (= (apply!92 lt!49205 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1300 (getValueByKey!149 (toList!791 lt!49205) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4070 () Bool)

(assert (= bs!4070 d!26407))

(assert (=> bs!4070 m!106689))

(declare-fun m!108311 () Bool)

(assert (=> bs!4070 m!108311))

(assert (=> bs!4070 m!108311))

(declare-fun m!108313 () Bool)

(assert (=> bs!4070 m!108313))

(assert (=> b!98064 d!26407))

(assert (=> b!98064 d!26049))

(assert (=> b!97952 d!26165))

(declare-fun d!26409 () Bool)

(assert (=> d!26409 (= (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!361 (getValueByKey!149 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4071 () Bool)

(assert (= bs!4071 d!26409))

(assert (=> bs!4071 m!107041))

(declare-fun m!108315 () Bool)

(assert (=> bs!4071 m!108315))

(assert (=> b!98172 d!26409))

(declare-fun b!98601 () Bool)

(declare-fun e!64270 () Option!155)

(declare-fun e!64271 () Option!155)

(assert (=> b!98601 (= e!64270 e!64271)))

(declare-fun c!16770 () Bool)

(assert (=> b!98601 (= c!16770 (and ((_ is Cons!1608) (toList!791 lt!48891)) (not (= (_1!1186 (h!2202 (toList!791 lt!48891))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98603 () Bool)

(assert (=> b!98603 (= e!64271 None!153)))

(declare-fun d!26411 () Bool)

(declare-fun c!16769 () Bool)

(assert (=> d!26411 (= c!16769 (and ((_ is Cons!1608) (toList!791 lt!48891)) (= (_1!1186 (h!2202 (toList!791 lt!48891))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26411 (= (getValueByKey!149 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000) e!64270)))

(declare-fun b!98602 () Bool)

(assert (=> b!98602 (= e!64271 (getValueByKey!149 (t!5574 (toList!791 lt!48891)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98600 () Bool)

(assert (=> b!98600 (= e!64270 (Some!154 (_2!1186 (h!2202 (toList!791 lt!48891)))))))

(assert (= (and d!26411 c!16769) b!98600))

(assert (= (and d!26411 (not c!16769)) b!98601))

(assert (= (and b!98601 c!16770) b!98602))

(assert (= (and b!98601 (not c!16770)) b!98603))

(declare-fun m!108317 () Bool)

(assert (=> b!98602 m!108317))

(assert (=> b!98172 d!26411))

(declare-fun d!26413 () Bool)

(assert (=> d!26413 (= (isDefined!103 (getValueByKey!149 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))) (not (isEmpty!361 (getValueByKey!149 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))))

(declare-fun bs!4072 () Bool)

(assert (= bs!4072 d!26413))

(assert (=> bs!4072 m!106967))

(declare-fun m!108319 () Bool)

(assert (=> bs!4072 m!108319))

(assert (=> b!97896 d!26413))

(declare-fun b!98605 () Bool)

(declare-fun e!64272 () Option!155)

(declare-fun e!64273 () Option!155)

(assert (=> b!98605 (= e!64272 e!64273)))

(declare-fun c!16772 () Bool)

(assert (=> b!98605 (= c!16772 (and ((_ is Cons!1608) (toList!791 call!9950)) (not (= (_1!1186 (h!2202 (toList!791 call!9950))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))))

(declare-fun b!98607 () Bool)

(assert (=> b!98607 (= e!64273 None!153)))

(declare-fun d!26415 () Bool)

(declare-fun c!16771 () Bool)

(assert (=> d!26415 (= c!16771 (and ((_ is Cons!1608) (toList!791 call!9950)) (= (_1!1186 (h!2202 (toList!791 call!9950))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (=> d!26415 (= (getValueByKey!149 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) e!64272)))

(declare-fun b!98606 () Bool)

(assert (=> b!98606 (= e!64273 (getValueByKey!149 (t!5574 (toList!791 call!9950)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!98604 () Bool)

(assert (=> b!98604 (= e!64272 (Some!154 (_2!1186 (h!2202 (toList!791 call!9950)))))))

(assert (= (and d!26415 c!16771) b!98604))

(assert (= (and d!26415 (not c!16771)) b!98605))

(assert (= (and b!98605 c!16772) b!98606))

(assert (= (and b!98605 (not c!16772)) b!98607))

(assert (=> b!98606 m!106609))

(declare-fun m!108321 () Bool)

(assert (=> b!98606 m!108321))

(assert (=> b!97896 d!26415))

(declare-fun b!98608 () Bool)

(declare-fun e!64275 () (_ BitVec 32))

(declare-fun call!10077 () (_ BitVec 32))

(assert (=> b!98608 (= e!64275 (bvadd #b00000000000000000000000000000001 call!10077))))

(declare-fun b!98609 () Bool)

(assert (=> b!98609 (= e!64275 call!10077)))

(declare-fun d!26417 () Bool)

(declare-fun lt!49609 () (_ BitVec 32))

(assert (=> d!26417 (and (bvsge lt!49609 #b00000000000000000000000000000000) (bvsle lt!49609 (bvsub (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun e!64274 () (_ BitVec 32))

(assert (=> d!26417 (= lt!49609 e!64274)))

(declare-fun c!16774 () Bool)

(assert (=> d!26417 (= c!16774 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> d!26417 (and (bvsle #b00000000000000000000000000000000 (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> d!26417 (= (arrayCountValidKeys!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000 (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))) lt!49609)))

(declare-fun bm!10074 () Bool)

(assert (=> bm!10074 (= call!10077 (arrayCountValidKeys!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!98610 () Bool)

(assert (=> b!98610 (= e!64274 #b00000000000000000000000000000000)))

(declare-fun b!98611 () Bool)

(assert (=> b!98611 (= e!64274 e!64275)))

(declare-fun c!16773 () Bool)

(assert (=> b!98611 (= c!16773 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!26417 c!16774) b!98610))

(assert (= (and d!26417 (not c!16774)) b!98611))

(assert (= (and b!98611 c!16773) b!98608))

(assert (= (and b!98611 (not c!16773)) b!98609))

(assert (= (or b!98608 b!98609) bm!10074))

(declare-fun m!108323 () Bool)

(assert (=> bm!10074 m!108323))

(declare-fun m!108325 () Bool)

(assert (=> b!98611 m!108325))

(assert (=> b!98611 m!108325))

(declare-fun m!108327 () Bool)

(assert (=> b!98611 m!108327))

(assert (=> b!98120 d!26417))

(declare-fun d!26419 () Bool)

(declare-fun res!49616 () Bool)

(declare-fun e!64276 () Bool)

(assert (=> d!26419 (=> (not res!49616) (not e!64276))))

(assert (=> d!26419 (= res!49616 (validMask!0 (mask!6578 (_2!1187 lt!48968))))))

(assert (=> d!26419 (= (simpleValid!67 (_2!1187 lt!48968)) e!64276)))

(declare-fun b!98614 () Bool)

(declare-fun res!49614 () Bool)

(assert (=> b!98614 (=> (not res!49614) (not e!64276))))

(assert (=> b!98614 (= res!49614 (= (size!2268 (_2!1187 lt!48968)) (bvadd (_size!475 (_2!1187 lt!48968)) (bvsdiv (bvadd (extraKeys!2302 (_2!1187 lt!48968)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!98615 () Bool)

(assert (=> b!98615 (= e!64276 (and (bvsge (extraKeys!2302 (_2!1187 lt!48968)) #b00000000000000000000000000000000) (bvsle (extraKeys!2302 (_2!1187 lt!48968)) #b00000000000000000000000000000011) (bvsge (_vacant!475 (_2!1187 lt!48968)) #b00000000000000000000000000000000)))))

(declare-fun b!98613 () Bool)

(declare-fun res!49613 () Bool)

(assert (=> b!98613 (=> (not res!49613) (not e!64276))))

(assert (=> b!98613 (= res!49613 (bvsge (size!2268 (_2!1187 lt!48968)) (_size!475 (_2!1187 lt!48968))))))

(declare-fun b!98612 () Bool)

(declare-fun res!49615 () Bool)

(assert (=> b!98612 (=> (not res!49615) (not e!64276))))

(assert (=> b!98612 (= res!49615 (and (= (size!2265 (_values!2464 (_2!1187 lt!48968))) (bvadd (mask!6578 (_2!1187 lt!48968)) #b00000000000000000000000000000001)) (= (size!2264 (_keys!4171 (_2!1187 lt!48968))) (size!2265 (_values!2464 (_2!1187 lt!48968)))) (bvsge (_size!475 (_2!1187 lt!48968)) #b00000000000000000000000000000000) (bvsle (_size!475 (_2!1187 lt!48968)) (bvadd (mask!6578 (_2!1187 lt!48968)) #b00000000000000000000000000000001))))))

(assert (= (and d!26419 res!49616) b!98612))

(assert (= (and b!98612 res!49615) b!98613))

(assert (= (and b!98613 res!49613) b!98614))

(assert (= (and b!98614 res!49614) b!98615))

(declare-fun m!108329 () Bool)

(assert (=> d!26419 m!108329))

(declare-fun m!108331 () Bool)

(assert (=> b!98614 m!108331))

(assert (=> b!98613 m!108331))

(assert (=> d!26063 d!26419))

(declare-fun b!98628 () Bool)

(declare-fun c!16783 () Bool)

(declare-fun lt!49615 () (_ BitVec 64))

(assert (=> b!98628 (= c!16783 (= lt!49615 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64283 () SeekEntryResult!263)

(declare-fun e!64285 () SeekEntryResult!263)

(assert (=> b!98628 (= e!64283 e!64285)))

(declare-fun b!98629 () Bool)

(declare-fun e!64284 () SeekEntryResult!263)

(assert (=> b!98629 (= e!64284 e!64283)))

(declare-fun c!16781 () Bool)

(assert (=> b!98629 (= c!16781 (= lt!49615 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun d!26421 () Bool)

(declare-fun lt!49614 () SeekEntryResult!263)

(assert (=> d!26421 (and (or ((_ is Undefined!263) lt!49614) (not ((_ is Found!263) lt!49614)) (and (bvsge (index!3196 lt!49614) #b00000000000000000000000000000000) (bvslt (index!3196 lt!49614) (size!2264 (_keys!4171 newMap!16))))) (or ((_ is Undefined!263) lt!49614) ((_ is Found!263) lt!49614) (not ((_ is MissingVacant!263) lt!49614)) (not (= (index!3198 lt!49614) (index!3197 lt!49187))) (and (bvsge (index!3198 lt!49614) #b00000000000000000000000000000000) (bvslt (index!3198 lt!49614) (size!2264 (_keys!4171 newMap!16))))) (or ((_ is Undefined!263) lt!49614) (ite ((_ is Found!263) lt!49614) (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!49614)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (and ((_ is MissingVacant!263) lt!49614) (= (index!3198 lt!49614) (index!3197 lt!49187)) (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3198 lt!49614)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!26421 (= lt!49614 e!64284)))

(declare-fun c!16782 () Bool)

(assert (=> d!26421 (= c!16782 (bvsge (x!12969 lt!49187) #b01111111111111111111111111111110))))

(assert (=> d!26421 (= lt!49615 (select (arr!2014 (_keys!4171 newMap!16)) (index!3197 lt!49187)))))

(assert (=> d!26421 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26421 (= (seekKeyOrZeroReturnVacant!0 (x!12969 lt!49187) (index!3197 lt!49187) (index!3197 lt!49187) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)) lt!49614)))

(declare-fun b!98630 () Bool)

(assert (=> b!98630 (= e!64285 (MissingVacant!263 (index!3197 lt!49187)))))

(declare-fun b!98631 () Bool)

(assert (=> b!98631 (= e!64284 Undefined!263)))

(declare-fun b!98632 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!98632 (= e!64285 (seekKeyOrZeroReturnVacant!0 (bvadd (x!12969 lt!49187) #b00000000000000000000000000000001) (nextIndex!0 (index!3197 lt!49187) (x!12969 lt!49187) (mask!6578 newMap!16)) (index!3197 lt!49187) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!98633 () Bool)

(assert (=> b!98633 (= e!64283 (Found!263 (index!3197 lt!49187)))))

(assert (= (and d!26421 c!16782) b!98631))

(assert (= (and d!26421 (not c!16782)) b!98629))

(assert (= (and b!98629 c!16781) b!98633))

(assert (= (and b!98629 (not c!16781)) b!98628))

(assert (= (and b!98628 c!16783) b!98630))

(assert (= (and b!98628 (not c!16783)) b!98632))

(declare-fun m!108333 () Bool)

(assert (=> d!26421 m!108333))

(declare-fun m!108335 () Bool)

(assert (=> d!26421 m!108335))

(assert (=> d!26421 m!107135))

(assert (=> d!26421 m!106929))

(declare-fun m!108337 () Bool)

(assert (=> b!98632 m!108337))

(assert (=> b!98632 m!108337))

(assert (=> b!98632 m!106609))

(declare-fun m!108339 () Bool)

(assert (=> b!98632 m!108339))

(assert (=> b!98032 d!26421))

(declare-fun d!26423 () Bool)

(assert (=> d!26423 (isDefined!103 (getValueByKey!149 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun lt!49616 () Unit!2965)

(assert (=> d!26423 (= lt!49616 (choose!596 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun e!64286 () Bool)

(assert (=> d!26423 e!64286))

(declare-fun res!49617 () Bool)

(assert (=> d!26423 (=> (not res!49617) (not e!64286))))

(assert (=> d!26423 (= res!49617 (isStrictlySorted!299 (toList!791 e!63752)))))

(assert (=> d!26423 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) lt!49616)))

(declare-fun b!98634 () Bool)

(assert (=> b!98634 (= e!64286 (containsKey!153 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (= (and d!26423 res!49617) b!98634))

(assert (=> d!26423 m!106609))

(assert (=> d!26423 m!107297))

(assert (=> d!26423 m!107297))

(assert (=> d!26423 m!107299))

(assert (=> d!26423 m!106609))

(declare-fun m!108341 () Bool)

(assert (=> d!26423 m!108341))

(declare-fun m!108343 () Bool)

(assert (=> d!26423 m!108343))

(assert (=> b!98634 m!106609))

(assert (=> b!98634 m!107293))

(assert (=> b!98123 d!26423))

(declare-fun d!26425 () Bool)

(assert (=> d!26425 (= (isDefined!103 (getValueByKey!149 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))) (not (isEmpty!361 (getValueByKey!149 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))))

(declare-fun bs!4073 () Bool)

(assert (= bs!4073 d!26425))

(assert (=> bs!4073 m!107297))

(declare-fun m!108345 () Bool)

(assert (=> bs!4073 m!108345))

(assert (=> b!98123 d!26425))

(declare-fun b!98636 () Bool)

(declare-fun e!64287 () Option!155)

(declare-fun e!64288 () Option!155)

(assert (=> b!98636 (= e!64287 e!64288)))

(declare-fun c!16785 () Bool)

(assert (=> b!98636 (= c!16785 (and ((_ is Cons!1608) (toList!791 e!63752)) (not (= (_1!1186 (h!2202 (toList!791 e!63752))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))))

(declare-fun b!98638 () Bool)

(assert (=> b!98638 (= e!64288 None!153)))

(declare-fun d!26427 () Bool)

(declare-fun c!16784 () Bool)

(assert (=> d!26427 (= c!16784 (and ((_ is Cons!1608) (toList!791 e!63752)) (= (_1!1186 (h!2202 (toList!791 e!63752))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (=> d!26427 (= (getValueByKey!149 (toList!791 e!63752) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) e!64287)))

(declare-fun b!98637 () Bool)

(assert (=> b!98637 (= e!64288 (getValueByKey!149 (t!5574 (toList!791 e!63752)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!98635 () Bool)

(assert (=> b!98635 (= e!64287 (Some!154 (_2!1186 (h!2202 (toList!791 e!63752)))))))

(assert (= (and d!26427 c!16784) b!98635))

(assert (= (and d!26427 (not c!16784)) b!98636))

(assert (= (and b!98636 c!16785) b!98637))

(assert (= (and b!98636 (not c!16785)) b!98638))

(assert (=> b!98637 m!106609))

(declare-fun m!108347 () Bool)

(assert (=> b!98637 m!108347))

(assert (=> b!98123 d!26427))

(declare-fun bm!10075 () Bool)

(declare-fun call!10078 () Bool)

(assert (=> bm!10075 (= call!10078 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!98639 () Bool)

(declare-fun e!64291 () Bool)

(declare-fun e!64290 () Bool)

(assert (=> b!98639 (= e!64291 e!64290)))

(declare-fun c!16786 () Bool)

(assert (=> b!98639 (= c!16786 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!98640 () Bool)

(assert (=> b!98640 (= e!64290 call!10078)))

(declare-fun b!98641 () Bool)

(declare-fun e!64289 () Bool)

(assert (=> b!98641 (= e!64290 e!64289)))

(declare-fun lt!49617 () (_ BitVec 64))

(assert (=> b!98641 (= lt!49617 (select (arr!2014 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!49618 () Unit!2965)

(assert (=> b!98641 (= lt!49618 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4171 newMap!16) lt!49617 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!98641 (arrayContainsKey!0 (_keys!4171 newMap!16) lt!49617 #b00000000000000000000000000000000)))

(declare-fun lt!49619 () Unit!2965)

(assert (=> b!98641 (= lt!49619 lt!49618)))

(declare-fun res!49619 () Bool)

(assert (=> b!98641 (= res!49619 (= (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4171 newMap!16) (mask!6578 newMap!16)) (Found!263 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!98641 (=> (not res!49619) (not e!64289))))

(declare-fun d!26429 () Bool)

(declare-fun res!49618 () Bool)

(assert (=> d!26429 (=> res!49618 e!64291)))

(assert (=> d!26429 (= res!49618 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26429 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4171 newMap!16) (mask!6578 newMap!16)) e!64291)))

(declare-fun b!98642 () Bool)

(assert (=> b!98642 (= e!64289 call!10078)))

(assert (= (and d!26429 (not res!49618)) b!98639))

(assert (= (and b!98639 c!16786) b!98641))

(assert (= (and b!98639 (not c!16786)) b!98640))

(assert (= (and b!98641 res!49619) b!98642))

(assert (= (or b!98642 b!98640) bm!10075))

(declare-fun m!108349 () Bool)

(assert (=> bm!10075 m!108349))

(assert (=> b!98639 m!108059))

(assert (=> b!98639 m!108059))

(assert (=> b!98639 m!108061))

(assert (=> b!98641 m!108059))

(declare-fun m!108351 () Bool)

(assert (=> b!98641 m!108351))

(declare-fun m!108353 () Bool)

(assert (=> b!98641 m!108353))

(assert (=> b!98641 m!108059))

(declare-fun m!108355 () Bool)

(assert (=> b!98641 m!108355))

(assert (=> bm!10016 d!26429))

(declare-fun d!26431 () Bool)

(assert (=> d!26431 (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!49620 () Unit!2965)

(assert (=> d!26431 (= lt!49620 (choose!596 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64292 () Bool)

(assert (=> d!26431 e!64292))

(declare-fun res!49620 () Bool)

(assert (=> d!26431 (=> (not res!49620) (not e!64292))))

(assert (=> d!26431 (= res!49620 (isStrictlySorted!299 (toList!791 lt!48891)))))

(assert (=> d!26431 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000) lt!49620)))

(declare-fun b!98643 () Bool)

(assert (=> b!98643 (= e!64292 (containsKey!153 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26431 res!49620) b!98643))

(assert (=> d!26431 m!106953))

(assert (=> d!26431 m!106953))

(assert (=> d!26431 m!107305))

(declare-fun m!108357 () Bool)

(assert (=> d!26431 m!108357))

(declare-fun m!108359 () Bool)

(assert (=> d!26431 m!108359))

(assert (=> b!98643 m!107301))

(assert (=> b!98126 d!26431))

(declare-fun d!26433 () Bool)

(assert (=> d!26433 (= (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!361 (getValueByKey!149 (toList!791 lt!48891) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4074 () Bool)

(assert (= bs!4074 d!26433))

(assert (=> bs!4074 m!106953))

(declare-fun m!108361 () Bool)

(assert (=> bs!4074 m!108361))

(assert (=> b!98126 d!26433))

(assert (=> b!98126 d!26405))

(assert (=> b!97907 d!26165))

(assert (=> b!97940 d!26199))

(assert (=> b!97940 d!26065))

(declare-fun b!98644 () Bool)

(declare-fun e!64299 () Bool)

(declare-fun call!10085 () Bool)

(assert (=> b!98644 (= e!64299 (not call!10085))))

(declare-fun b!98645 () Bool)

(declare-fun e!64301 () Unit!2965)

(declare-fun lt!49640 () Unit!2965)

(assert (=> b!98645 (= e!64301 lt!49640)))

(declare-fun lt!49631 () ListLongMap!1551)

(assert (=> b!98645 (= lt!49631 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49627 () (_ BitVec 64))

(assert (=> b!98645 (= lt!49627 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49624 () (_ BitVec 64))

(assert (=> b!98645 (= lt!49624 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49629 () Unit!2965)

(assert (=> b!98645 (= lt!49629 (addStillContains!68 lt!49631 lt!49627 (zeroValue!2364 newMap!16) lt!49624))))

(assert (=> b!98645 (contains!805 (+!138 lt!49631 (tuple2!2353 lt!49627 (zeroValue!2364 newMap!16))) lt!49624)))

(declare-fun lt!49635 () Unit!2965)

(assert (=> b!98645 (= lt!49635 lt!49629)))

(declare-fun lt!49633 () ListLongMap!1551)

(assert (=> b!98645 (= lt!49633 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49637 () (_ BitVec 64))

(assert (=> b!98645 (= lt!49637 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49642 () (_ BitVec 64))

(assert (=> b!98645 (= lt!49642 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49622 () Unit!2965)

(assert (=> b!98645 (= lt!49622 (addApplyDifferent!68 lt!49633 lt!49637 (minValue!2364 newMap!16) lt!49642))))

(assert (=> b!98645 (= (apply!92 (+!138 lt!49633 (tuple2!2353 lt!49637 (minValue!2364 newMap!16))) lt!49642) (apply!92 lt!49633 lt!49642))))

(declare-fun lt!49634 () Unit!2965)

(assert (=> b!98645 (= lt!49634 lt!49622)))

(declare-fun lt!49639 () ListLongMap!1551)

(assert (=> b!98645 (= lt!49639 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49636 () (_ BitVec 64))

(assert (=> b!98645 (= lt!49636 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49623 () (_ BitVec 64))

(assert (=> b!98645 (= lt!49623 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!49626 () Unit!2965)

(assert (=> b!98645 (= lt!49626 (addApplyDifferent!68 lt!49639 lt!49636 (zeroValue!2364 newMap!16) lt!49623))))

(assert (=> b!98645 (= (apply!92 (+!138 lt!49639 (tuple2!2353 lt!49636 (zeroValue!2364 newMap!16))) lt!49623) (apply!92 lt!49639 lt!49623))))

(declare-fun lt!49621 () Unit!2965)

(assert (=> b!98645 (= lt!49621 lt!49626)))

(declare-fun lt!49638 () ListLongMap!1551)

(assert (=> b!98645 (= lt!49638 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun lt!49632 () (_ BitVec 64))

(assert (=> b!98645 (= lt!49632 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49625 () (_ BitVec 64))

(assert (=> b!98645 (= lt!49625 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!98645 (= lt!49640 (addApplyDifferent!68 lt!49638 lt!49632 (minValue!2364 newMap!16) lt!49625))))

(assert (=> b!98645 (= (apply!92 (+!138 lt!49638 (tuple2!2353 lt!49632 (minValue!2364 newMap!16))) lt!49625) (apply!92 lt!49638 lt!49625))))

(declare-fun b!98646 () Bool)

(declare-fun e!64300 () ListLongMap!1551)

(declare-fun call!10080 () ListLongMap!1551)

(assert (=> b!98646 (= e!64300 call!10080)))

(declare-fun bm!10076 () Bool)

(declare-fun call!10083 () ListLongMap!1551)

(assert (=> bm!10076 (= call!10080 call!10083)))

(declare-fun b!98647 () Bool)

(declare-fun e!64295 () Bool)

(declare-fun e!64296 () Bool)

(assert (=> b!98647 (= e!64295 e!64296)))

(declare-fun res!49628 () Bool)

(declare-fun call!10082 () Bool)

(assert (=> b!98647 (= res!49628 call!10082)))

(assert (=> b!98647 (=> (not res!49628) (not e!64296))))

(declare-fun b!98648 () Bool)

(declare-fun res!49624 () Bool)

(declare-fun e!64298 () Bool)

(assert (=> b!98648 (=> (not res!49624) (not e!64298))))

(assert (=> b!98648 (= res!49624 e!64295)))

(declare-fun c!16790 () Bool)

(assert (=> b!98648 (= c!16790 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26435 () Bool)

(assert (=> d!26435 e!64298))

(declare-fun res!49621 () Bool)

(assert (=> d!26435 (=> (not res!49621) (not e!64298))))

(assert (=> d!26435 (= res!49621 (or (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))))

(declare-fun lt!49641 () ListLongMap!1551)

(declare-fun lt!49630 () ListLongMap!1551)

(assert (=> d!26435 (= lt!49641 lt!49630)))

(declare-fun lt!49628 () Unit!2965)

(assert (=> d!26435 (= lt!49628 e!64301)))

(declare-fun c!16788 () Bool)

(declare-fun e!64297 () Bool)

(assert (=> d!26435 (= c!16788 e!64297)))

(declare-fun res!49622 () Bool)

(assert (=> d!26435 (=> (not res!49622) (not e!64297))))

(assert (=> d!26435 (= res!49622 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun e!64304 () ListLongMap!1551)

(assert (=> d!26435 (= lt!49630 e!64304)))

(declare-fun c!16787 () Bool)

(assert (=> d!26435 (= c!16787 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26435 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26435 (= (getCurrentListMap!472 (_keys!4171 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49641)))

(declare-fun b!98649 () Bool)

(assert (=> b!98649 (= e!64296 (= (apply!92 lt!49641 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 newMap!16)))))

(declare-fun call!10081 () ListLongMap!1551)

(declare-fun bm!10077 () Bool)

(declare-fun call!10084 () ListLongMap!1551)

(declare-fun call!10079 () ListLongMap!1551)

(declare-fun c!16792 () Bool)

(assert (=> bm!10077 (= call!10083 (+!138 (ite c!16787 call!10081 (ite c!16792 call!10084 call!10079)) (ite (or c!16787 c!16792) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(declare-fun b!98650 () Bool)

(assert (=> b!98650 (= e!64297 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98651 () Bool)

(declare-fun e!64305 () Bool)

(assert (=> b!98651 (= e!64305 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98652 () Bool)

(assert (=> b!98652 (= e!64295 (not call!10082))))

(declare-fun b!98653 () Bool)

(declare-fun e!64293 () ListLongMap!1551)

(assert (=> b!98653 (= e!64293 call!10080)))

(declare-fun b!98654 () Bool)

(assert (=> b!98654 (= e!64304 e!64300)))

(assert (=> b!98654 (= c!16792 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10078 () Bool)

(assert (=> bm!10078 (= call!10085 (contains!805 lt!49641 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98655 () Bool)

(declare-fun e!64294 () Bool)

(assert (=> b!98655 (= e!64294 (= (apply!92 lt!49641 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 newMap!16)))))

(declare-fun e!64303 () Bool)

(declare-fun b!98656 () Bool)

(assert (=> b!98656 (= e!64303 (= (apply!92 lt!49641 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98656 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))))))))

(assert (=> b!98656 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98657 () Bool)

(declare-fun res!49623 () Bool)

(assert (=> b!98657 (=> (not res!49623) (not e!64298))))

(declare-fun e!64302 () Bool)

(assert (=> b!98657 (= res!49623 e!64302)))

(declare-fun res!49627 () Bool)

(assert (=> b!98657 (=> res!49627 e!64302)))

(assert (=> b!98657 (= res!49627 (not e!64305))))

(declare-fun res!49629 () Bool)

(assert (=> b!98657 (=> (not res!49629) (not e!64305))))

(assert (=> b!98657 (= res!49629 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98658 () Bool)

(assert (=> b!98658 (= e!64293 call!10079)))

(declare-fun b!98659 () Bool)

(assert (=> b!98659 (= e!64302 e!64303)))

(declare-fun res!49626 () Bool)

(assert (=> b!98659 (=> (not res!49626) (not e!64303))))

(assert (=> b!98659 (= res!49626 (contains!805 lt!49641 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98659 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 newMap!16))))))

(declare-fun bm!10079 () Bool)

(assert (=> bm!10079 (= call!10084 call!10081)))

(declare-fun b!98660 () Bool)

(assert (=> b!98660 (= e!64299 e!64294)))

(declare-fun res!49625 () Bool)

(assert (=> b!98660 (= res!49625 call!10085)))

(assert (=> b!98660 (=> (not res!49625) (not e!64294))))

(declare-fun bm!10080 () Bool)

(assert (=> bm!10080 (= call!10079 call!10084)))

(declare-fun b!98661 () Bool)

(declare-fun Unit!3009 () Unit!2965)

(assert (=> b!98661 (= e!64301 Unit!3009)))

(declare-fun b!98662 () Bool)

(declare-fun c!16789 () Bool)

(assert (=> b!98662 (= c!16789 (and (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98662 (= e!64300 e!64293)))

(declare-fun bm!10081 () Bool)

(assert (=> bm!10081 (= call!10081 (getCurrentListMapNoExtraKeys!102 (_keys!4171 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(declare-fun b!98663 () Bool)

(assert (=> b!98663 (= e!64304 (+!138 call!10083 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))

(declare-fun bm!10082 () Bool)

(assert (=> bm!10082 (= call!10082 (contains!805 lt!49641 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98664 () Bool)

(assert (=> b!98664 (= e!64298 e!64299)))

(declare-fun c!16791 () Bool)

(assert (=> b!98664 (= c!16791 (not (= (bvand (extraKeys!2302 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26435 c!16787) b!98663))

(assert (= (and d!26435 (not c!16787)) b!98654))

(assert (= (and b!98654 c!16792) b!98646))

(assert (= (and b!98654 (not c!16792)) b!98662))

(assert (= (and b!98662 c!16789) b!98653))

(assert (= (and b!98662 (not c!16789)) b!98658))

(assert (= (or b!98653 b!98658) bm!10080))

(assert (= (or b!98646 bm!10080) bm!10079))

(assert (= (or b!98646 b!98653) bm!10076))

(assert (= (or b!98663 bm!10079) bm!10081))

(assert (= (or b!98663 bm!10076) bm!10077))

(assert (= (and d!26435 res!49622) b!98650))

(assert (= (and d!26435 c!16788) b!98645))

(assert (= (and d!26435 (not c!16788)) b!98661))

(assert (= (and d!26435 res!49621) b!98657))

(assert (= (and b!98657 res!49629) b!98651))

(assert (= (and b!98657 (not res!49627)) b!98659))

(assert (= (and b!98659 res!49626) b!98656))

(assert (= (and b!98657 res!49623) b!98648))

(assert (= (and b!98648 c!16790) b!98647))

(assert (= (and b!98648 (not c!16790)) b!98652))

(assert (= (and b!98647 res!49628) b!98649))

(assert (= (or b!98647 b!98652) bm!10082))

(assert (= (and b!98648 res!49624) b!98664))

(assert (= (and b!98664 c!16791) b!98660))

(assert (= (and b!98664 (not c!16791)) b!98644))

(assert (= (and b!98660 res!49625) b!98655))

(assert (= (or b!98660 b!98644) bm!10078))

(declare-fun b_lambda!4405 () Bool)

(assert (=> (not b_lambda!4405) (not b!98656)))

(assert (=> b!98656 t!5581))

(declare-fun b_and!6077 () Bool)

(assert (= b_and!6073 (and (=> t!5581 result!3283) b_and!6077)))

(assert (=> b!98656 t!5583))

(declare-fun b_and!6079 () Bool)

(assert (= b_and!6075 (and (=> t!5583 result!3285) b_and!6079)))

(assert (=> b!98651 m!106867))

(assert (=> b!98651 m!106867))

(assert (=> b!98651 m!106887))

(declare-fun m!108363 () Bool)

(assert (=> bm!10077 m!108363))

(declare-fun m!108365 () Bool)

(assert (=> b!98649 m!108365))

(assert (=> b!98650 m!106867))

(assert (=> b!98650 m!106867))

(assert (=> b!98650 m!106887))

(declare-fun m!108367 () Bool)

(assert (=> b!98645 m!108367))

(declare-fun m!108369 () Bool)

(assert (=> b!98645 m!108369))

(declare-fun m!108371 () Bool)

(assert (=> b!98645 m!108371))

(declare-fun m!108373 () Bool)

(assert (=> b!98645 m!108373))

(declare-fun m!108375 () Bool)

(assert (=> b!98645 m!108375))

(assert (=> b!98645 m!108373))

(declare-fun m!108377 () Bool)

(assert (=> b!98645 m!108377))

(declare-fun m!108379 () Bool)

(assert (=> b!98645 m!108379))

(declare-fun m!108381 () Bool)

(assert (=> b!98645 m!108381))

(assert (=> b!98645 m!108369))

(declare-fun m!108383 () Bool)

(assert (=> b!98645 m!108383))

(declare-fun m!108385 () Bool)

(assert (=> b!98645 m!108385))

(declare-fun m!108387 () Bool)

(assert (=> b!98645 m!108387))

(declare-fun m!108389 () Bool)

(assert (=> b!98645 m!108389))

(declare-fun m!108391 () Bool)

(assert (=> b!98645 m!108391))

(declare-fun m!108393 () Bool)

(assert (=> b!98645 m!108393))

(assert (=> b!98645 m!108383))

(assert (=> b!98645 m!106867))

(declare-fun m!108395 () Bool)

(assert (=> b!98645 m!108395))

(assert (=> b!98645 m!108379))

(declare-fun m!108397 () Bool)

(assert (=> b!98645 m!108397))

(declare-fun m!108399 () Bool)

(assert (=> b!98655 m!108399))

(declare-fun m!108401 () Bool)

(assert (=> bm!10078 m!108401))

(assert (=> bm!10081 m!108377))

(assert (=> d!26435 m!106929))

(assert (=> b!98659 m!106867))

(assert (=> b!98659 m!106867))

(declare-fun m!108403 () Bool)

(assert (=> b!98659 m!108403))

(declare-fun m!108405 () Bool)

(assert (=> bm!10082 m!108405))

(declare-fun m!108407 () Bool)

(assert (=> b!98663 m!108407))

(declare-fun m!108409 () Bool)

(assert (=> b!98656 m!108409))

(assert (=> b!98656 m!106939))

(declare-fun m!108411 () Bool)

(assert (=> b!98656 m!108411))

(assert (=> b!98656 m!106939))

(assert (=> b!98656 m!106867))

(assert (=> b!98656 m!106867))

(declare-fun m!108413 () Bool)

(assert (=> b!98656 m!108413))

(assert (=> b!98656 m!108409))

(assert (=> b!97940 d!26435))

(declare-fun d!26437 () Bool)

(declare-fun e!64307 () Bool)

(assert (=> d!26437 e!64307))

(declare-fun res!49630 () Bool)

(assert (=> d!26437 (=> res!49630 e!64307)))

(declare-fun lt!49645 () Bool)

(assert (=> d!26437 (= res!49630 (not lt!49645))))

(declare-fun lt!49646 () Bool)

(assert (=> d!26437 (= lt!49645 lt!49646)))

(declare-fun lt!49643 () Unit!2965)

(declare-fun e!64306 () Unit!2965)

(assert (=> d!26437 (= lt!49643 e!64306)))

(declare-fun c!16793 () Bool)

(assert (=> d!26437 (= c!16793 lt!49646)))

(assert (=> d!26437 (= lt!49646 (containsKey!153 (toList!791 lt!48883) lt!48892))))

(assert (=> d!26437 (= (contains!805 lt!48883 lt!48892) lt!49645)))

(declare-fun b!98665 () Bool)

(declare-fun lt!49644 () Unit!2965)

(assert (=> b!98665 (= e!64306 lt!49644)))

(assert (=> b!98665 (= lt!49644 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48883) lt!48892))))

(assert (=> b!98665 (isDefined!103 (getValueByKey!149 (toList!791 lt!48883) lt!48892))))

(declare-fun b!98666 () Bool)

(declare-fun Unit!3010 () Unit!2965)

(assert (=> b!98666 (= e!64306 Unit!3010)))

(declare-fun b!98667 () Bool)

(assert (=> b!98667 (= e!64307 (isDefined!103 (getValueByKey!149 (toList!791 lt!48883) lt!48892)))))

(assert (= (and d!26437 c!16793) b!98665))

(assert (= (and d!26437 (not c!16793)) b!98666))

(assert (= (and d!26437 (not res!49630)) b!98667))

(declare-fun m!108415 () Bool)

(assert (=> d!26437 m!108415))

(declare-fun m!108417 () Bool)

(assert (=> b!98665 m!108417))

(assert (=> b!98665 m!107239))

(assert (=> b!98665 m!107239))

(declare-fun m!108419 () Bool)

(assert (=> b!98665 m!108419))

(assert (=> b!98667 m!107239))

(assert (=> b!98667 m!107239))

(assert (=> b!98667 m!108419))

(assert (=> d!26113 d!26437))

(declare-fun d!26439 () Bool)

(assert (=> d!26439 (= (apply!92 (+!138 lt!48883 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48892) (apply!92 lt!48883 lt!48892))))

(assert (=> d!26439 true))

(declare-fun _$34!864 () Unit!2965)

(assert (=> d!26439 (= (choose!601 lt!48883 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48892) _$34!864)))

(declare-fun bs!4075 () Bool)

(assert (= bs!4075 d!26439))

(assert (=> bs!4075 m!106713))

(assert (=> bs!4075 m!106713))

(assert (=> bs!4075 m!106715))

(assert (=> bs!4075 m!106723))

(assert (=> d!26113 d!26439))

(assert (=> d!26113 d!26117))

(assert (=> d!26113 d!26119))

(assert (=> d!26113 d!26123))

(declare-fun d!26441 () Bool)

(declare-fun lt!49647 () Bool)

(assert (=> d!26441 (= lt!49647 (select (content!101 (toList!791 lt!49003)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun e!64308 () Bool)

(assert (=> d!26441 (= lt!49647 e!64308)))

(declare-fun res!49631 () Bool)

(assert (=> d!26441 (=> (not res!49631) (not e!64308))))

(assert (=> d!26441 (= res!49631 ((_ is Cons!1608) (toList!791 lt!49003)))))

(assert (=> d!26441 (= (contains!808 (toList!791 lt!49003) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!49647)))

(declare-fun b!98668 () Bool)

(declare-fun e!64309 () Bool)

(assert (=> b!98668 (= e!64308 e!64309)))

(declare-fun res!49632 () Bool)

(assert (=> b!98668 (=> res!49632 e!64309)))

(assert (=> b!98668 (= res!49632 (= (h!2202 (toList!791 lt!49003)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!98669 () Bool)

(assert (=> b!98669 (= e!64309 (contains!808 (t!5574 (toList!791 lt!49003)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(assert (= (and d!26441 res!49631) b!98668))

(assert (= (and b!98668 (not res!49632)) b!98669))

(declare-fun m!108421 () Bool)

(assert (=> d!26441 m!108421))

(declare-fun m!108423 () Bool)

(assert (=> d!26441 m!108423))

(declare-fun m!108425 () Bool)

(assert (=> b!98669 m!108425))

(assert (=> b!97835 d!26441))

(declare-fun d!26443 () Bool)

(declare-fun lt!49648 () Bool)

(assert (=> d!26443 (= lt!49648 (select (content!101 (toList!791 lt!49222)) (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun e!64310 () Bool)

(assert (=> d!26443 (= lt!49648 e!64310)))

(declare-fun res!49633 () Bool)

(assert (=> d!26443 (=> (not res!49633) (not e!64310))))

(assert (=> d!26443 (= res!49633 ((_ is Cons!1608) (toList!791 lt!49222)))))

(assert (=> d!26443 (= (contains!808 (toList!791 lt!49222) (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!49648)))

(declare-fun b!98670 () Bool)

(declare-fun e!64311 () Bool)

(assert (=> b!98670 (= e!64310 e!64311)))

(declare-fun res!49634 () Bool)

(assert (=> b!98670 (=> res!49634 e!64311)))

(assert (=> b!98670 (= res!49634 (= (h!2202 (toList!791 lt!49222)) (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!98671 () Bool)

(assert (=> b!98671 (= e!64311 (contains!808 (t!5574 (toList!791 lt!49222)) (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(assert (= (and d!26443 res!49633) b!98670))

(assert (= (and b!98670 (not res!49634)) b!98671))

(declare-fun m!108427 () Bool)

(assert (=> d!26443 m!108427))

(declare-fun m!108429 () Bool)

(assert (=> d!26443 m!108429))

(declare-fun m!108431 () Bool)

(assert (=> b!98671 m!108431))

(assert (=> b!98084 d!26443))

(declare-fun d!26445 () Bool)

(declare-fun e!64313 () Bool)

(assert (=> d!26445 e!64313))

(declare-fun res!49635 () Bool)

(assert (=> d!26445 (=> res!49635 e!64313)))

(declare-fun lt!49651 () Bool)

(assert (=> d!26445 (= res!49635 (not lt!49651))))

(declare-fun lt!49652 () Bool)

(assert (=> d!26445 (= lt!49651 lt!49652)))

(declare-fun lt!49649 () Unit!2965)

(declare-fun e!64312 () Unit!2965)

(assert (=> d!26445 (= lt!49649 e!64312)))

(declare-fun c!16794 () Bool)

(assert (=> d!26445 (= c!16794 lt!49652)))

(assert (=> d!26445 (= lt!49652 (containsKey!153 (toList!791 lt!49205) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26445 (= (contains!805 lt!49205 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49651)))

(declare-fun b!98672 () Bool)

(declare-fun lt!49650 () Unit!2965)

(assert (=> b!98672 (= e!64312 lt!49650)))

(assert (=> b!98672 (= lt!49650 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49205) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98672 (isDefined!103 (getValueByKey!149 (toList!791 lt!49205) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98673 () Bool)

(declare-fun Unit!3011 () Unit!2965)

(assert (=> b!98673 (= e!64312 Unit!3011)))

(declare-fun b!98674 () Bool)

(assert (=> b!98674 (= e!64313 (isDefined!103 (getValueByKey!149 (toList!791 lt!49205) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26445 c!16794) b!98672))

(assert (= (and d!26445 (not c!16794)) b!98673))

(assert (= (and d!26445 (not res!49635)) b!98674))

(declare-fun m!108433 () Bool)

(assert (=> d!26445 m!108433))

(declare-fun m!108435 () Bool)

(assert (=> b!98672 m!108435))

(declare-fun m!108437 () Bool)

(assert (=> b!98672 m!108437))

(assert (=> b!98672 m!108437))

(declare-fun m!108439 () Bool)

(assert (=> b!98672 m!108439))

(assert (=> b!98674 m!108437))

(assert (=> b!98674 m!108437))

(assert (=> b!98674 m!108439))

(assert (=> d!26091 d!26445))

(assert (=> d!26091 d!25997))

(declare-fun d!26447 () Bool)

(assert (=> d!26447 (isDefined!103 (getValueByKey!149 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(declare-fun lt!49653 () Unit!2965)

(assert (=> d!26447 (= lt!49653 (choose!596 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(declare-fun e!64314 () Bool)

(assert (=> d!26447 e!64314))

(declare-fun res!49636 () Bool)

(assert (=> d!26447 (=> (not res!49636) (not e!64314))))

(assert (=> d!26447 (= res!49636 (isStrictlySorted!299 (toList!791 call!9966)))))

(assert (=> d!26447 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))) lt!49653)))

(declare-fun b!98675 () Bool)

(assert (=> b!98675 (= e!64314 (containsKey!153 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(assert (= (and d!26447 res!49636) b!98675))

(assert (=> d!26447 m!106777))

(assert (=> d!26447 m!107049))

(assert (=> d!26447 m!107049))

(assert (=> d!26447 m!107051))

(assert (=> d!26447 m!106777))

(declare-fun m!108441 () Bool)

(assert (=> d!26447 m!108441))

(declare-fun m!108443 () Bool)

(assert (=> d!26447 m!108443))

(assert (=> b!98675 m!106777))

(assert (=> b!98675 m!107045))

(assert (=> b!97932 d!26447))

(declare-fun d!26449 () Bool)

(assert (=> d!26449 (= (isDefined!103 (getValueByKey!149 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985)))) (not (isEmpty!361 (getValueByKey!149 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))))

(declare-fun bs!4076 () Bool)

(assert (= bs!4076 d!26449))

(assert (=> bs!4076 m!107049))

(declare-fun m!108445 () Bool)

(assert (=> bs!4076 m!108445))

(assert (=> b!97932 d!26449))

(declare-fun b!98677 () Bool)

(declare-fun e!64315 () Option!155)

(declare-fun e!64316 () Option!155)

(assert (=> b!98677 (= e!64315 e!64316)))

(declare-fun c!16796 () Bool)

(assert (=> b!98677 (= c!16796 (and ((_ is Cons!1608) (toList!791 call!9966)) (not (= (_1!1186 (h!2202 (toList!791 call!9966))) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))))

(declare-fun b!98679 () Bool)

(assert (=> b!98679 (= e!64316 None!153)))

(declare-fun c!16795 () Bool)

(declare-fun d!26451 () Bool)

(assert (=> d!26451 (= c!16795 (and ((_ is Cons!1608) (toList!791 call!9966)) (= (_1!1186 (h!2202 (toList!791 call!9966))) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985)))))))

(assert (=> d!26451 (= (getValueByKey!149 (toList!791 call!9966) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))) e!64315)))

(declare-fun b!98678 () Bool)

(assert (=> b!98678 (= e!64316 (getValueByKey!149 (t!5574 (toList!791 call!9966)) (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!48985))))))

(declare-fun b!98676 () Bool)

(assert (=> b!98676 (= e!64315 (Some!154 (_2!1186 (h!2202 (toList!791 call!9966)))))))

(assert (= (and d!26451 c!16795) b!98676))

(assert (= (and d!26451 (not c!16795)) b!98677))

(assert (= (and b!98677 c!16796) b!98678))

(assert (= (and b!98677 (not c!16796)) b!98679))

(assert (=> b!98678 m!106777))

(declare-fun m!108447 () Bool)

(assert (=> b!98678 m!108447))

(assert (=> b!97932 d!26451))

(assert (=> b!97925 d!26013))

(assert (=> d!26065 d!26185))

(declare-fun d!26453 () Bool)

(assert (=> d!26453 (= (+!138 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!472 (_keys!4171 newMap!16) (array!4243 (store (arr!2015 (_values!2464 newMap!16)) (index!3196 lt!48985) (ValueCellFull!972 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2265 (_values!2464 newMap!16))) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(assert (=> d!26453 true))

(declare-fun _$5!101 () Unit!2965)

(assert (=> d!26453 (= (choose!600 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (index!3196 lt!48985) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2481 newMap!16)) _$5!101)))

(declare-fun bs!4077 () Bool)

(assert (= bs!4077 d!26453))

(assert (=> bs!4077 m!106687))

(assert (=> bs!4077 m!106687))

(assert (=> bs!4077 m!107061))

(assert (=> bs!4077 m!106761))

(assert (=> bs!4077 m!107063))

(assert (=> d!26081 d!26453))

(assert (=> d!26081 d!26185))

(declare-fun d!26455 () Bool)

(declare-fun lt!49654 () Bool)

(assert (=> d!26455 (= lt!49654 (select (content!100 (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!64317 () Bool)

(assert (=> d!26455 (= lt!49654 e!64317)))

(declare-fun res!49637 () Bool)

(assert (=> d!26455 (=> (not res!49637) (not e!64317))))

(assert (=> d!26455 (= res!49637 ((_ is Cons!1607) (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)))))

(assert (=> d!26455 (= (contains!807 (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!49654)))

(declare-fun b!98680 () Bool)

(declare-fun e!64318 () Bool)

(assert (=> b!98680 (= e!64317 e!64318)))

(declare-fun res!49638 () Bool)

(assert (=> b!98680 (=> res!49638 e!64318)))

(assert (=> b!98680 (= res!49638 (= (h!2201 (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!98681 () Bool)

(assert (=> b!98681 (= e!64318 (contains!807 (t!5573 (ite c!16573 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) Nil!1608) Nil!1608)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!26455 res!49637) b!98680))

(assert (= (and b!98680 (not res!49638)) b!98681))

(declare-fun m!108449 () Bool)

(assert (=> d!26455 m!108449))

(assert (=> d!26455 m!107159))

(declare-fun m!108451 () Bool)

(assert (=> d!26455 m!108451))

(assert (=> b!98681 m!107159))

(declare-fun m!108453 () Bool)

(assert (=> b!98681 m!108453))

(assert (=> b!98074 d!26455))

(declare-fun d!26457 () Bool)

(declare-fun e!64320 () Bool)

(assert (=> d!26457 e!64320))

(declare-fun res!49639 () Bool)

(assert (=> d!26457 (=> res!49639 e!64320)))

(declare-fun lt!49657 () Bool)

(assert (=> d!26457 (= res!49639 (not lt!49657))))

(declare-fun lt!49658 () Bool)

(assert (=> d!26457 (= lt!49657 lt!49658)))

(declare-fun lt!49655 () Unit!2965)

(declare-fun e!64319 () Unit!2965)

(assert (=> d!26457 (= lt!49655 e!64319)))

(declare-fun c!16797 () Bool)

(assert (=> d!26457 (= c!16797 lt!49658)))

(assert (=> d!26457 (= lt!49658 (containsKey!153 (toList!791 lt!49073) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26457 (= (contains!805 lt!49073 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49657)))

(declare-fun b!98682 () Bool)

(declare-fun lt!49656 () Unit!2965)

(assert (=> b!98682 (= e!64319 lt!49656)))

(assert (=> b!98682 (= lt!49656 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49073) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98682 (isDefined!103 (getValueByKey!149 (toList!791 lt!49073) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98683 () Bool)

(declare-fun Unit!3012 () Unit!2965)

(assert (=> b!98683 (= e!64319 Unit!3012)))

(declare-fun b!98684 () Bool)

(assert (=> b!98684 (= e!64320 (isDefined!103 (getValueByKey!149 (toList!791 lt!49073) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26457 c!16797) b!98682))

(assert (= (and d!26457 (not c!16797)) b!98683))

(assert (= (and d!26457 (not res!49639)) b!98684))

(declare-fun m!108455 () Bool)

(assert (=> d!26457 m!108455))

(declare-fun m!108457 () Bool)

(assert (=> b!98682 m!108457))

(declare-fun m!108459 () Bool)

(assert (=> b!98682 m!108459))

(assert (=> b!98682 m!108459))

(declare-fun m!108461 () Bool)

(assert (=> b!98682 m!108461))

(assert (=> b!98684 m!108459))

(assert (=> b!98684 m!108459))

(assert (=> b!98684 m!108461))

(assert (=> bm!9980 d!26457))

(declare-fun d!26459 () Bool)

(declare-fun res!49640 () Bool)

(declare-fun e!64321 () Bool)

(assert (=> d!26459 (=> res!49640 e!64321)))

(assert (=> d!26459 (= res!49640 (and ((_ is Cons!1608) (toList!791 lt!48891)) (= (_1!1186 (h!2202 (toList!791 lt!48891))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26459 (= (containsKey!153 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000) e!64321)))

(declare-fun b!98685 () Bool)

(declare-fun e!64322 () Bool)

(assert (=> b!98685 (= e!64321 e!64322)))

(declare-fun res!49641 () Bool)

(assert (=> b!98685 (=> (not res!49641) (not e!64322))))

(assert (=> b!98685 (= res!49641 (and (or (not ((_ is Cons!1608) (toList!791 lt!48891))) (bvsle (_1!1186 (h!2202 (toList!791 lt!48891))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1608) (toList!791 lt!48891)) (bvslt (_1!1186 (h!2202 (toList!791 lt!48891))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98686 () Bool)

(assert (=> b!98686 (= e!64322 (containsKey!153 (t!5574 (toList!791 lt!48891)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26459 (not res!49640)) b!98685))

(assert (= (and b!98685 res!49641) b!98686))

(declare-fun m!108463 () Bool)

(assert (=> b!98686 m!108463))

(assert (=> d!26149 d!26459))

(declare-fun d!26461 () Bool)

(assert (=> d!26461 (= (get!1300 (getValueByKey!149 (toList!791 lt!48889) lt!48873)) (v!2805 (getValueByKey!149 (toList!791 lt!48889) lt!48873)))))

(assert (=> d!26111 d!26461))

(declare-fun b!98688 () Bool)

(declare-fun e!64323 () Option!155)

(declare-fun e!64324 () Option!155)

(assert (=> b!98688 (= e!64323 e!64324)))

(declare-fun c!16799 () Bool)

(assert (=> b!98688 (= c!16799 (and ((_ is Cons!1608) (toList!791 lt!48889)) (not (= (_1!1186 (h!2202 (toList!791 lt!48889))) lt!48873))))))

(declare-fun b!98690 () Bool)

(assert (=> b!98690 (= e!64324 None!153)))

(declare-fun d!26463 () Bool)

(declare-fun c!16798 () Bool)

(assert (=> d!26463 (= c!16798 (and ((_ is Cons!1608) (toList!791 lt!48889)) (= (_1!1186 (h!2202 (toList!791 lt!48889))) lt!48873)))))

(assert (=> d!26463 (= (getValueByKey!149 (toList!791 lt!48889) lt!48873) e!64323)))

(declare-fun b!98689 () Bool)

(assert (=> b!98689 (= e!64324 (getValueByKey!149 (t!5574 (toList!791 lt!48889)) lt!48873))))

(declare-fun b!98687 () Bool)

(assert (=> b!98687 (= e!64323 (Some!154 (_2!1186 (h!2202 (toList!791 lt!48889)))))))

(assert (= (and d!26463 c!16798) b!98687))

(assert (= (and d!26463 (not c!16798)) b!98688))

(assert (= (and b!98688 c!16799) b!98689))

(assert (= (and b!98688 (not c!16799)) b!98690))

(declare-fun m!108465 () Bool)

(assert (=> b!98689 m!108465))

(assert (=> d!26111 d!26463))

(assert (=> b!98136 d!26165))

(declare-fun lt!49659 () Bool)

(declare-fun d!26465 () Bool)

(assert (=> d!26465 (= lt!49659 (select (content!101 (toList!791 lt!49235)) (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun e!64325 () Bool)

(assert (=> d!26465 (= lt!49659 e!64325)))

(declare-fun res!49642 () Bool)

(assert (=> d!26465 (=> (not res!49642) (not e!64325))))

(assert (=> d!26465 (= res!49642 ((_ is Cons!1608) (toList!791 lt!49235)))))

(assert (=> d!26465 (= (contains!808 (toList!791 lt!49235) (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!49659)))

(declare-fun b!98691 () Bool)

(declare-fun e!64326 () Bool)

(assert (=> b!98691 (= e!64325 e!64326)))

(declare-fun res!49643 () Bool)

(assert (=> b!98691 (=> res!49643 e!64326)))

(assert (=> b!98691 (= res!49643 (= (h!2202 (toList!791 lt!49235)) (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!98692 () Bool)

(assert (=> b!98692 (= e!64326 (contains!808 (t!5574 (toList!791 lt!49235)) (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(assert (= (and d!26465 res!49642) b!98691))

(assert (= (and b!98691 (not res!49643)) b!98692))

(declare-fun m!108467 () Bool)

(assert (=> d!26465 m!108467))

(declare-fun m!108469 () Bool)

(assert (=> d!26465 m!108469))

(declare-fun m!108471 () Bool)

(assert (=> b!98692 m!108471))

(assert (=> b!98092 d!26465))

(declare-fun d!26467 () Bool)

(assert (=> d!26467 (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874))))

(declare-fun lt!49660 () Unit!2965)

(assert (=> d!26467 (= lt!49660 (choose!596 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874))))

(declare-fun e!64327 () Bool)

(assert (=> d!26467 e!64327))

(declare-fun res!49644 () Bool)

(assert (=> d!26467 (=> (not res!49644) (not e!64327))))

(assert (=> d!26467 (= res!49644 (isStrictlySorted!299 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26467 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874) lt!49660)))

(declare-fun b!98693 () Bool)

(assert (=> b!98693 (= e!64327 (containsKey!153 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874))))

(assert (= (and d!26467 res!49644) b!98693))

(assert (=> d!26467 m!107247))

(assert (=> d!26467 m!107247))

(assert (=> d!26467 m!107249))

(declare-fun m!108473 () Bool)

(assert (=> d!26467 m!108473))

(declare-fun m!108475 () Bool)

(assert (=> d!26467 m!108475))

(assert (=> b!98693 m!107243))

(assert (=> b!98088 d!26467))

(assert (=> b!98088 d!26315))

(assert (=> b!98088 d!26317))

(declare-fun d!26469 () Bool)

(assert (=> d!26469 (= (inRange!0 (ite c!16614 (index!3196 lt!49163) (ite c!16616 (index!3195 lt!49176) (index!3198 lt!49176))) (mask!6578 newMap!16)) (and (bvsge (ite c!16614 (index!3196 lt!49163) (ite c!16616 (index!3195 lt!49176) (index!3198 lt!49176))) #b00000000000000000000000000000000) (bvslt (ite c!16614 (index!3196 lt!49163) (ite c!16616 (index!3195 lt!49176) (index!3198 lt!49176))) (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9996 d!26469))

(assert (=> d!26041 d!26013))

(declare-fun d!26471 () Bool)

(declare-fun res!49645 () Bool)

(declare-fun e!64328 () Bool)

(assert (=> d!26471 (=> res!49645 e!64328)))

(assert (=> d!26471 (= res!49645 (and ((_ is Cons!1608) (toList!791 call!9950)) (= (_1!1186 (h!2202 (toList!791 call!9950))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (=> d!26471 (= (containsKey!153 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) e!64328)))

(declare-fun b!98694 () Bool)

(declare-fun e!64329 () Bool)

(assert (=> b!98694 (= e!64328 e!64329)))

(declare-fun res!49646 () Bool)

(assert (=> b!98694 (=> (not res!49646) (not e!64329))))

(assert (=> b!98694 (= res!49646 (and (or (not ((_ is Cons!1608) (toList!791 call!9950))) (bvsle (_1!1186 (h!2202 (toList!791 call!9950))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))) ((_ is Cons!1608) (toList!791 call!9950)) (bvslt (_1!1186 (h!2202 (toList!791 call!9950))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(declare-fun b!98695 () Bool)

(assert (=> b!98695 (= e!64329 (containsKey!153 (t!5574 (toList!791 call!9950)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (= (and d!26471 (not res!49645)) b!98694))

(assert (= (and b!98694 res!49646) b!98695))

(assert (=> b!98695 m!106609))

(declare-fun m!108477 () Bool)

(assert (=> b!98695 m!108477))

(assert (=> d!26059 d!26471))

(declare-fun d!26473 () Bool)

(declare-fun lt!49661 () Bool)

(assert (=> d!26473 (= lt!49661 (select (content!101 (toList!791 lt!49017)) (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64330 () Bool)

(assert (=> d!26473 (= lt!49661 e!64330)))

(declare-fun res!49647 () Bool)

(assert (=> d!26473 (=> (not res!49647) (not e!64330))))

(assert (=> d!26473 (= res!49647 ((_ is Cons!1608) (toList!791 lt!49017)))))

(assert (=> d!26473 (= (contains!808 (toList!791 lt!49017) (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!49661)))

(declare-fun b!98696 () Bool)

(declare-fun e!64331 () Bool)

(assert (=> b!98696 (= e!64330 e!64331)))

(declare-fun res!49648 () Bool)

(assert (=> b!98696 (=> res!49648 e!64331)))

(assert (=> b!98696 (= res!49648 (= (h!2202 (toList!791 lt!49017)) (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98697 () Bool)

(assert (=> b!98697 (= e!64331 (contains!808 (t!5574 (toList!791 lt!49017)) (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26473 res!49647) b!98696))

(assert (= (and b!98696 (not res!49648)) b!98697))

(declare-fun m!108479 () Bool)

(assert (=> d!26473 m!108479))

(declare-fun m!108481 () Bool)

(assert (=> d!26473 m!108481))

(declare-fun m!108483 () Bool)

(assert (=> b!98697 m!108483))

(assert (=> b!97864 d!26473))

(assert (=> d!26129 d!26089))

(declare-fun b!98714 () Bool)

(declare-fun e!64341 () Bool)

(declare-fun e!64340 () Bool)

(assert (=> b!98714 (= e!64341 e!64340)))

(declare-fun c!16804 () Bool)

(declare-fun lt!49664 () SeekEntryResult!263)

(assert (=> b!98714 (= c!16804 ((_ is MissingVacant!263) lt!49664))))

(declare-fun b!98715 () Bool)

(declare-fun e!64342 () Bool)

(declare-fun call!10090 () Bool)

(assert (=> b!98715 (= e!64342 (not call!10090))))

(declare-fun b!98716 () Bool)

(declare-fun res!49657 () Bool)

(assert (=> b!98716 (=> (not res!49657) (not e!64342))))

(declare-fun call!10091 () Bool)

(assert (=> b!98716 (= res!49657 call!10091)))

(assert (=> b!98716 (= e!64340 e!64342)))

(declare-fun b!98717 () Bool)

(declare-fun res!49660 () Bool)

(assert (=> b!98717 (= res!49660 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3195 lt!49664)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64343 () Bool)

(assert (=> b!98717 (=> (not res!49660) (not e!64343))))

(declare-fun b!98718 () Bool)

(assert (=> b!98718 (= e!64343 (not call!10090))))

(declare-fun bm!10087 () Bool)

(assert (=> bm!10087 (= call!10090 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun d!26475 () Bool)

(assert (=> d!26475 e!64341))

(declare-fun c!16805 () Bool)

(assert (=> d!26475 (= c!16805 ((_ is MissingZero!263) lt!49664))))

(assert (=> d!26475 (= lt!49664 (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (=> d!26475 true))

(declare-fun _$34!867 () Unit!2965)

(assert (=> d!26475 (= (choose!604 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)) _$34!867)))

(declare-fun bm!10088 () Bool)

(assert (=> bm!10088 (= call!10091 (inRange!0 (ite c!16805 (index!3195 lt!49664) (index!3198 lt!49664)) (mask!6578 newMap!16)))))

(declare-fun b!98719 () Bool)

(assert (=> b!98719 (= e!64340 ((_ is Undefined!263) lt!49664))))

(declare-fun b!98720 () Bool)

(assert (=> b!98720 (= e!64341 e!64343)))

(declare-fun res!49659 () Bool)

(assert (=> b!98720 (= res!49659 call!10091)))

(assert (=> b!98720 (=> (not res!49659) (not e!64343))))

(declare-fun b!98721 () Bool)

(declare-fun res!49658 () Bool)

(assert (=> b!98721 (=> (not res!49658) (not e!64342))))

(assert (=> b!98721 (= res!49658 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3198 lt!49664)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26475 c!16805) b!98720))

(assert (= (and d!26475 (not c!16805)) b!98714))

(assert (= (and b!98720 res!49659) b!98717))

(assert (= (and b!98717 res!49660) b!98718))

(assert (= (and b!98714 c!16804) b!98716))

(assert (= (and b!98714 (not c!16804)) b!98719))

(assert (= (and b!98716 res!49657) b!98721))

(assert (= (and b!98721 res!49658) b!98715))

(assert (= (or b!98720 b!98716) bm!10088))

(assert (= (or b!98718 b!98715) bm!10087))

(assert (=> d!26475 m!106609))

(assert (=> d!26475 m!106785))

(assert (=> bm!10087 m!106609))

(assert (=> bm!10087 m!106755))

(declare-fun m!108485 () Bool)

(assert (=> bm!10088 m!108485))

(declare-fun m!108487 () Bool)

(assert (=> b!98717 m!108487))

(declare-fun m!108489 () Bool)

(assert (=> b!98721 m!108489))

(assert (=> d!26129 d!26475))

(assert (=> d!26129 d!26185))

(declare-fun d!26477 () Bool)

(assert (=> d!26477 (= (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98072 d!26477))

(declare-fun d!26479 () Bool)

(declare-fun e!64345 () Bool)

(assert (=> d!26479 e!64345))

(declare-fun res!49661 () Bool)

(assert (=> d!26479 (=> res!49661 e!64345)))

(declare-fun lt!49667 () Bool)

(assert (=> d!26479 (= res!49661 (not lt!49667))))

(declare-fun lt!49668 () Bool)

(assert (=> d!26479 (= lt!49667 lt!49668)))

(declare-fun lt!49665 () Unit!2965)

(declare-fun e!64344 () Unit!2965)

(assert (=> d!26479 (= lt!49665 e!64344)))

(declare-fun c!16806 () Bool)

(assert (=> d!26479 (= c!16806 lt!49668)))

(assert (=> d!26479 (= lt!49668 (containsKey!153 (toList!791 lt!49227) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26479 (= (contains!805 lt!49227 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49667)))

(declare-fun b!98722 () Bool)

(declare-fun lt!49666 () Unit!2965)

(assert (=> b!98722 (= e!64344 lt!49666)))

(assert (=> b!98722 (= lt!49666 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49227) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> b!98722 (isDefined!103 (getValueByKey!149 (toList!791 lt!49227) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98723 () Bool)

(declare-fun Unit!3013 () Unit!2965)

(assert (=> b!98723 (= e!64344 Unit!3013)))

(declare-fun b!98724 () Bool)

(assert (=> b!98724 (= e!64345 (isDefined!103 (getValueByKey!149 (toList!791 lt!49227) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (= (and d!26479 c!16806) b!98722))

(assert (= (and d!26479 (not c!16806)) b!98723))

(assert (= (and d!26479 (not res!49661)) b!98724))

(declare-fun m!108491 () Bool)

(assert (=> d!26479 m!108491))

(declare-fun m!108493 () Bool)

(assert (=> b!98722 m!108493))

(assert (=> b!98722 m!107231))

(assert (=> b!98722 m!107231))

(declare-fun m!108495 () Bool)

(assert (=> b!98722 m!108495))

(assert (=> b!98724 m!107231))

(assert (=> b!98724 m!107231))

(assert (=> b!98724 m!108495))

(assert (=> d!26115 d!26479))

(declare-fun b!98726 () Bool)

(declare-fun e!64346 () Option!155)

(declare-fun e!64347 () Option!155)

(assert (=> b!98726 (= e!64346 e!64347)))

(declare-fun c!16808 () Bool)

(assert (=> b!98726 (= c!16808 (and ((_ is Cons!1608) lt!49229) (not (= (_1!1186 (h!2202 lt!49229)) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98728 () Bool)

(assert (=> b!98728 (= e!64347 None!153)))

(declare-fun c!16807 () Bool)

(declare-fun d!26481 () Bool)

(assert (=> d!26481 (= c!16807 (and ((_ is Cons!1608) lt!49229) (= (_1!1186 (h!2202 lt!49229)) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26481 (= (getValueByKey!149 lt!49229 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) e!64346)))

(declare-fun b!98727 () Bool)

(assert (=> b!98727 (= e!64347 (getValueByKey!149 (t!5574 lt!49229) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98725 () Bool)

(assert (=> b!98725 (= e!64346 (Some!154 (_2!1186 (h!2202 lt!49229))))))

(assert (= (and d!26481 c!16807) b!98725))

(assert (= (and d!26481 (not c!16807)) b!98726))

(assert (= (and b!98726 c!16808) b!98727))

(assert (= (and b!98726 (not c!16808)) b!98728))

(declare-fun m!108497 () Bool)

(assert (=> b!98727 m!108497))

(assert (=> d!26115 d!26481))

(declare-fun d!26483 () Bool)

(assert (=> d!26483 (= (getValueByKey!149 lt!49229 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun lt!49669 () Unit!2965)

(assert (=> d!26483 (= lt!49669 (choose!605 lt!49229 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun e!64348 () Bool)

(assert (=> d!26483 e!64348))

(declare-fun res!49662 () Bool)

(assert (=> d!26483 (=> (not res!49662) (not e!64348))))

(assert (=> d!26483 (= res!49662 (isStrictlySorted!299 lt!49229))))

(assert (=> d!26483 (= (lemmaContainsTupThenGetReturnValue!67 lt!49229 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49669)))

(declare-fun b!98729 () Bool)

(declare-fun res!49663 () Bool)

(assert (=> b!98729 (=> (not res!49663) (not e!64348))))

(assert (=> b!98729 (= res!49663 (containsKey!153 lt!49229 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98730 () Bool)

(assert (=> b!98730 (= e!64348 (contains!808 lt!49229 (tuple2!2353 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (= (and d!26483 res!49662) b!98729))

(assert (= (and b!98729 res!49663) b!98730))

(assert (=> d!26483 m!107225))

(declare-fun m!108499 () Bool)

(assert (=> d!26483 m!108499))

(declare-fun m!108501 () Bool)

(assert (=> d!26483 m!108501))

(declare-fun m!108503 () Bool)

(assert (=> b!98729 m!108503))

(declare-fun m!108505 () Bool)

(assert (=> b!98730 m!108505))

(assert (=> d!26115 d!26483))

(declare-fun d!26485 () Bool)

(declare-fun e!64350 () Bool)

(assert (=> d!26485 e!64350))

(declare-fun res!49664 () Bool)

(assert (=> d!26485 (=> (not res!49664) (not e!64350))))

(declare-fun lt!49670 () List!1612)

(assert (=> d!26485 (= res!49664 (isStrictlySorted!299 lt!49670))))

(declare-fun e!64349 () List!1612)

(assert (=> d!26485 (= lt!49670 e!64349)))

(declare-fun c!16812 () Bool)

(assert (=> d!26485 (= c!16812 (and ((_ is Cons!1608) (toList!791 lt!48889)) (bvslt (_1!1186 (h!2202 (toList!791 lt!48889))) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26485 (isStrictlySorted!299 (toList!791 lt!48889))))

(assert (=> d!26485 (= (insertStrictlySorted!69 (toList!791 lt!48889) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49670)))

(declare-fun b!98731 () Bool)

(assert (=> b!98731 (= e!64350 (contains!808 lt!49670 (tuple2!2353 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98732 () Bool)

(declare-fun res!49665 () Bool)

(assert (=> b!98732 (=> (not res!49665) (not e!64350))))

(assert (=> b!98732 (= res!49665 (containsKey!153 lt!49670 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98733 () Bool)

(declare-fun e!64353 () List!1612)

(declare-fun call!10094 () List!1612)

(assert (=> b!98733 (= e!64353 call!10094)))

(declare-fun e!64351 () List!1612)

(declare-fun bm!10089 () Bool)

(declare-fun call!10093 () List!1612)

(assert (=> bm!10089 (= call!10093 ($colon$colon!77 e!64351 (ite c!16812 (h!2202 (toList!791 lt!48889)) (tuple2!2353 (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun c!16810 () Bool)

(assert (=> bm!10089 (= c!16810 c!16812)))

(declare-fun b!98734 () Bool)

(assert (=> b!98734 (= e!64351 (insertStrictlySorted!69 (t!5574 (toList!791 lt!48889)) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun c!16811 () Bool)

(declare-fun c!16809 () Bool)

(declare-fun b!98735 () Bool)

(assert (=> b!98735 (= e!64351 (ite c!16809 (t!5574 (toList!791 lt!48889)) (ite c!16811 (Cons!1608 (h!2202 (toList!791 lt!48889)) (t!5574 (toList!791 lt!48889))) Nil!1609)))))

(declare-fun b!98736 () Bool)

(assert (=> b!98736 (= c!16811 (and ((_ is Cons!1608) (toList!791 lt!48889)) (bvsgt (_1!1186 (h!2202 (toList!791 lt!48889))) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun e!64352 () List!1612)

(assert (=> b!98736 (= e!64353 e!64352)))

(declare-fun bm!10090 () Bool)

(declare-fun call!10092 () List!1612)

(assert (=> bm!10090 (= call!10092 call!10094)))

(declare-fun b!98737 () Bool)

(assert (=> b!98737 (= e!64349 e!64353)))

(assert (=> b!98737 (= c!16809 (and ((_ is Cons!1608) (toList!791 lt!48889)) (= (_1!1186 (h!2202 (toList!791 lt!48889))) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98738 () Bool)

(assert (=> b!98738 (= e!64349 call!10093)))

(declare-fun b!98739 () Bool)

(assert (=> b!98739 (= e!64352 call!10092)))

(declare-fun bm!10091 () Bool)

(assert (=> bm!10091 (= call!10094 call!10093)))

(declare-fun b!98740 () Bool)

(assert (=> b!98740 (= e!64352 call!10092)))

(assert (= (and d!26485 c!16812) b!98738))

(assert (= (and d!26485 (not c!16812)) b!98737))

(assert (= (and b!98737 c!16809) b!98733))

(assert (= (and b!98737 (not c!16809)) b!98736))

(assert (= (and b!98736 c!16811) b!98739))

(assert (= (and b!98736 (not c!16811)) b!98740))

(assert (= (or b!98739 b!98740) bm!10090))

(assert (= (or b!98733 bm!10090) bm!10091))

(assert (= (or b!98738 bm!10091) bm!10089))

(assert (= (and bm!10089 c!16810) b!98734))

(assert (= (and bm!10089 (not c!16810)) b!98735))

(assert (= (and d!26485 res!49664) b!98732))

(assert (= (and b!98732 res!49665) b!98731))

(declare-fun m!108507 () Bool)

(assert (=> bm!10089 m!108507))

(declare-fun m!108509 () Bool)

(assert (=> b!98731 m!108509))

(declare-fun m!108511 () Bool)

(assert (=> d!26485 m!108511))

(declare-fun m!108513 () Bool)

(assert (=> d!26485 m!108513))

(declare-fun m!108515 () Bool)

(assert (=> b!98732 m!108515))

(declare-fun m!108517 () Bool)

(assert (=> b!98734 m!108517))

(assert (=> d!26115 d!26485))

(assert (=> d!26061 d!26017))

(declare-fun d!26487 () Bool)

(declare-fun e!64355 () Bool)

(assert (=> d!26487 e!64355))

(declare-fun res!49666 () Bool)

(assert (=> d!26487 (=> res!49666 e!64355)))

(declare-fun lt!49673 () Bool)

(assert (=> d!26487 (= res!49666 (not lt!49673))))

(declare-fun lt!49674 () Bool)

(assert (=> d!26487 (= lt!49673 lt!49674)))

(declare-fun lt!49671 () Unit!2965)

(declare-fun e!64354 () Unit!2965)

(assert (=> d!26487 (= lt!49671 e!64354)))

(declare-fun c!16813 () Bool)

(assert (=> d!26487 (= c!16813 lt!49674)))

(assert (=> d!26487 (= lt!49674 (containsKey!153 (toList!791 lt!49218) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26487 (= (contains!805 lt!49218 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49673)))

(declare-fun b!98741 () Bool)

(declare-fun lt!49672 () Unit!2965)

(assert (=> b!98741 (= e!64354 lt!49672)))

(assert (=> b!98741 (= lt!49672 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49218) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> b!98741 (isDefined!103 (getValueByKey!149 (toList!791 lt!49218) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98742 () Bool)

(declare-fun Unit!3014 () Unit!2965)

(assert (=> b!98742 (= e!64354 Unit!3014)))

(declare-fun b!98743 () Bool)

(assert (=> b!98743 (= e!64355 (isDefined!103 (getValueByKey!149 (toList!791 lt!49218) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (= (and d!26487 c!16813) b!98741))

(assert (= (and d!26487 (not c!16813)) b!98742))

(assert (= (and d!26487 (not res!49666)) b!98743))

(declare-fun m!108519 () Bool)

(assert (=> d!26487 m!108519))

(declare-fun m!108521 () Bool)

(assert (=> b!98741 m!108521))

(assert (=> b!98741 m!107199))

(assert (=> b!98741 m!107199))

(declare-fun m!108523 () Bool)

(assert (=> b!98741 m!108523))

(assert (=> b!98743 m!107199))

(assert (=> b!98743 m!107199))

(assert (=> b!98743 m!108523))

(assert (=> d!26107 d!26487))

(declare-fun b!98745 () Bool)

(declare-fun e!64356 () Option!155)

(declare-fun e!64357 () Option!155)

(assert (=> b!98745 (= e!64356 e!64357)))

(declare-fun c!16815 () Bool)

(assert (=> b!98745 (= c!16815 (and ((_ is Cons!1608) lt!49220) (not (= (_1!1186 (h!2202 lt!49220)) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98747 () Bool)

(assert (=> b!98747 (= e!64357 None!153)))

(declare-fun c!16814 () Bool)

(declare-fun d!26489 () Bool)

(assert (=> d!26489 (= c!16814 (and ((_ is Cons!1608) lt!49220) (= (_1!1186 (h!2202 lt!49220)) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26489 (= (getValueByKey!149 lt!49220 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) e!64356)))

(declare-fun b!98746 () Bool)

(assert (=> b!98746 (= e!64357 (getValueByKey!149 (t!5574 lt!49220) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98744 () Bool)

(assert (=> b!98744 (= e!64356 (Some!154 (_2!1186 (h!2202 lt!49220))))))

(assert (= (and d!26489 c!16814) b!98744))

(assert (= (and d!26489 (not c!16814)) b!98745))

(assert (= (and b!98745 c!16815) b!98746))

(assert (= (and b!98745 (not c!16815)) b!98747))

(declare-fun m!108525 () Bool)

(assert (=> b!98746 m!108525))

(assert (=> d!26107 d!26489))

(declare-fun d!26491 () Bool)

(assert (=> d!26491 (= (getValueByKey!149 lt!49220 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun lt!49675 () Unit!2965)

(assert (=> d!26491 (= lt!49675 (choose!605 lt!49220 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun e!64358 () Bool)

(assert (=> d!26491 e!64358))

(declare-fun res!49667 () Bool)

(assert (=> d!26491 (=> (not res!49667) (not e!64358))))

(assert (=> d!26491 (= res!49667 (isStrictlySorted!299 lt!49220))))

(assert (=> d!26491 (= (lemmaContainsTupThenGetReturnValue!67 lt!49220 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49675)))

(declare-fun b!98748 () Bool)

(declare-fun res!49668 () Bool)

(assert (=> b!98748 (=> (not res!49668) (not e!64358))))

(assert (=> b!98748 (= res!49668 (containsKey!153 lt!49220 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98749 () Bool)

(assert (=> b!98749 (= e!64358 (contains!808 lt!49220 (tuple2!2353 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (= (and d!26491 res!49667) b!98748))

(assert (= (and b!98748 res!49668) b!98749))

(assert (=> d!26491 m!107193))

(declare-fun m!108527 () Bool)

(assert (=> d!26491 m!108527))

(declare-fun m!108529 () Bool)

(assert (=> d!26491 m!108529))

(declare-fun m!108531 () Bool)

(assert (=> b!98748 m!108531))

(declare-fun m!108533 () Bool)

(assert (=> b!98749 m!108533))

(assert (=> d!26107 d!26491))

(declare-fun d!26493 () Bool)

(declare-fun e!64360 () Bool)

(assert (=> d!26493 e!64360))

(declare-fun res!49669 () Bool)

(assert (=> d!26493 (=> (not res!49669) (not e!64360))))

(declare-fun lt!49676 () List!1612)

(assert (=> d!26493 (= res!49669 (isStrictlySorted!299 lt!49676))))

(declare-fun e!64359 () List!1612)

(assert (=> d!26493 (= lt!49676 e!64359)))

(declare-fun c!16819 () Bool)

(assert (=> d!26493 (= c!16819 (and ((_ is Cons!1608) (toList!791 lt!48888)) (bvslt (_1!1186 (h!2202 (toList!791 lt!48888))) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26493 (isStrictlySorted!299 (toList!791 lt!48888))))

(assert (=> d!26493 (= (insertStrictlySorted!69 (toList!791 lt!48888) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49676)))

(declare-fun b!98750 () Bool)

(assert (=> b!98750 (= e!64360 (contains!808 lt!49676 (tuple2!2353 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98751 () Bool)

(declare-fun res!49670 () Bool)

(assert (=> b!98751 (=> (not res!49670) (not e!64360))))

(assert (=> b!98751 (= res!49670 (containsKey!153 lt!49676 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98752 () Bool)

(declare-fun e!64363 () List!1612)

(declare-fun call!10097 () List!1612)

(assert (=> b!98752 (= e!64363 call!10097)))

(declare-fun call!10096 () List!1612)

(declare-fun bm!10092 () Bool)

(declare-fun e!64361 () List!1612)

(assert (=> bm!10092 (= call!10096 ($colon$colon!77 e!64361 (ite c!16819 (h!2202 (toList!791 lt!48888)) (tuple2!2353 (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun c!16817 () Bool)

(assert (=> bm!10092 (= c!16817 c!16819)))

(declare-fun b!98753 () Bool)

(assert (=> b!98753 (= e!64361 (insertStrictlySorted!69 (t!5574 (toList!791 lt!48888)) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun c!16818 () Bool)

(declare-fun b!98754 () Bool)

(declare-fun c!16816 () Bool)

(assert (=> b!98754 (= e!64361 (ite c!16816 (t!5574 (toList!791 lt!48888)) (ite c!16818 (Cons!1608 (h!2202 (toList!791 lt!48888)) (t!5574 (toList!791 lt!48888))) Nil!1609)))))

(declare-fun b!98755 () Bool)

(assert (=> b!98755 (= c!16818 (and ((_ is Cons!1608) (toList!791 lt!48888)) (bvsgt (_1!1186 (h!2202 (toList!791 lt!48888))) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun e!64362 () List!1612)

(assert (=> b!98755 (= e!64363 e!64362)))

(declare-fun bm!10093 () Bool)

(declare-fun call!10095 () List!1612)

(assert (=> bm!10093 (= call!10095 call!10097)))

(declare-fun b!98756 () Bool)

(assert (=> b!98756 (= e!64359 e!64363)))

(assert (=> b!98756 (= c!16816 (and ((_ is Cons!1608) (toList!791 lt!48888)) (= (_1!1186 (h!2202 (toList!791 lt!48888))) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98757 () Bool)

(assert (=> b!98757 (= e!64359 call!10096)))

(declare-fun b!98758 () Bool)

(assert (=> b!98758 (= e!64362 call!10095)))

(declare-fun bm!10094 () Bool)

(assert (=> bm!10094 (= call!10097 call!10096)))

(declare-fun b!98759 () Bool)

(assert (=> b!98759 (= e!64362 call!10095)))

(assert (= (and d!26493 c!16819) b!98757))

(assert (= (and d!26493 (not c!16819)) b!98756))

(assert (= (and b!98756 c!16816) b!98752))

(assert (= (and b!98756 (not c!16816)) b!98755))

(assert (= (and b!98755 c!16818) b!98758))

(assert (= (and b!98755 (not c!16818)) b!98759))

(assert (= (or b!98758 b!98759) bm!10093))

(assert (= (or b!98752 bm!10093) bm!10094))

(assert (= (or b!98757 bm!10094) bm!10092))

(assert (= (and bm!10092 c!16817) b!98753))

(assert (= (and bm!10092 (not c!16817)) b!98754))

(assert (= (and d!26493 res!49669) b!98751))

(assert (= (and b!98751 res!49670) b!98750))

(declare-fun m!108535 () Bool)

(assert (=> bm!10092 m!108535))

(declare-fun m!108537 () Bool)

(assert (=> b!98750 m!108537))

(declare-fun m!108539 () Bool)

(assert (=> d!26493 m!108539))

(declare-fun m!108541 () Bool)

(assert (=> d!26493 m!108541))

(declare-fun m!108543 () Bool)

(assert (=> b!98751 m!108543))

(declare-fun m!108545 () Bool)

(assert (=> b!98753 m!108545))

(assert (=> d!26107 d!26493))

(declare-fun d!26495 () Bool)

(declare-fun e!64365 () Bool)

(assert (=> d!26495 e!64365))

(declare-fun res!49671 () Bool)

(assert (=> d!26495 (=> res!49671 e!64365)))

(declare-fun lt!49679 () Bool)

(assert (=> d!26495 (= res!49671 (not lt!49679))))

(declare-fun lt!49680 () Bool)

(assert (=> d!26495 (= lt!49679 lt!49680)))

(declare-fun lt!49677 () Unit!2965)

(declare-fun e!64364 () Unit!2965)

(assert (=> d!26495 (= lt!49677 e!64364)))

(declare-fun c!16820 () Bool)

(assert (=> d!26495 (= c!16820 lt!49680)))

(assert (=> d!26495 (= lt!49680 (containsKey!153 (toList!791 lt!49282) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26495 (= (contains!805 lt!49282 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) lt!49679)))

(declare-fun b!98760 () Bool)

(declare-fun lt!49678 () Unit!2965)

(assert (=> b!98760 (= e!64364 lt!49678)))

(assert (=> b!98760 (= lt!49678 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49282) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> b!98760 (isDefined!103 (getValueByKey!149 (toList!791 lt!49282) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98761 () Bool)

(declare-fun Unit!3015 () Unit!2965)

(assert (=> b!98761 (= e!64364 Unit!3015)))

(declare-fun b!98762 () Bool)

(assert (=> b!98762 (= e!64365 (isDefined!103 (getValueByKey!149 (toList!791 lt!49282) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(assert (= (and d!26495 c!16820) b!98760))

(assert (= (and d!26495 (not c!16820)) b!98761))

(assert (= (and d!26495 (not res!49671)) b!98762))

(declare-fun m!108547 () Bool)

(assert (=> d!26495 m!108547))

(declare-fun m!108549 () Bool)

(assert (=> b!98760 m!108549))

(assert (=> b!98760 m!107367))

(assert (=> b!98760 m!107367))

(declare-fun m!108551 () Bool)

(assert (=> b!98760 m!108551))

(assert (=> b!98762 m!107367))

(assert (=> b!98762 m!107367))

(assert (=> b!98762 m!108551))

(assert (=> d!26143 d!26495))

(declare-fun b!98764 () Bool)

(declare-fun e!64366 () Option!155)

(declare-fun e!64367 () Option!155)

(assert (=> b!98764 (= e!64366 e!64367)))

(declare-fun c!16822 () Bool)

(assert (=> b!98764 (= c!16822 (and ((_ is Cons!1608) lt!49284) (not (= (_1!1186 (h!2202 lt!49284)) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))))

(declare-fun b!98766 () Bool)

(assert (=> b!98766 (= e!64367 None!153)))

(declare-fun c!16821 () Bool)

(declare-fun d!26497 () Bool)

(assert (=> d!26497 (= c!16821 (and ((_ is Cons!1608) lt!49284) (= (_1!1186 (h!2202 lt!49284)) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(assert (=> d!26497 (= (getValueByKey!149 lt!49284 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) e!64366)))

(declare-fun b!98765 () Bool)

(assert (=> b!98765 (= e!64367 (getValueByKey!149 (t!5574 lt!49284) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98763 () Bool)

(assert (=> b!98763 (= e!64366 (Some!154 (_2!1186 (h!2202 lt!49284))))))

(assert (= (and d!26497 c!16821) b!98763))

(assert (= (and d!26497 (not c!16821)) b!98764))

(assert (= (and b!98764 c!16822) b!98765))

(assert (= (and b!98764 (not c!16822)) b!98766))

(declare-fun m!108553 () Bool)

(assert (=> b!98765 m!108553))

(assert (=> d!26143 d!26497))

(declare-fun d!26499 () Bool)

(assert (=> d!26499 (= (getValueByKey!149 lt!49284 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) (Some!154 (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun lt!49681 () Unit!2965)

(assert (=> d!26499 (= lt!49681 (choose!605 lt!49284 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun e!64368 () Bool)

(assert (=> d!26499 e!64368))

(declare-fun res!49672 () Bool)

(assert (=> d!26499 (=> (not res!49672) (not e!64368))))

(assert (=> d!26499 (= res!49672 (isStrictlySorted!299 lt!49284))))

(assert (=> d!26499 (= (lemmaContainsTupThenGetReturnValue!67 lt!49284 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) lt!49681)))

(declare-fun b!98767 () Bool)

(declare-fun res!49673 () Bool)

(assert (=> b!98767 (=> (not res!49673) (not e!64368))))

(assert (=> b!98767 (= res!49673 (containsKey!153 lt!49284 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98768 () Bool)

(assert (=> b!98768 (= e!64368 (contains!808 lt!49284 (tuple2!2353 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(assert (= (and d!26499 res!49672) b!98767))

(assert (= (and b!98767 res!49673) b!98768))

(assert (=> d!26499 m!107361))

(declare-fun m!108555 () Bool)

(assert (=> d!26499 m!108555))

(declare-fun m!108557 () Bool)

(assert (=> d!26499 m!108557))

(declare-fun m!108559 () Bool)

(assert (=> b!98767 m!108559))

(declare-fun m!108561 () Bool)

(assert (=> b!98768 m!108561))

(assert (=> d!26143 d!26499))

(declare-fun d!26501 () Bool)

(declare-fun e!64370 () Bool)

(assert (=> d!26501 e!64370))

(declare-fun res!49674 () Bool)

(assert (=> d!26501 (=> (not res!49674) (not e!64370))))

(declare-fun lt!49682 () List!1612)

(assert (=> d!26501 (= res!49674 (isStrictlySorted!299 lt!49682))))

(declare-fun e!64369 () List!1612)

(assert (=> d!26501 (= lt!49682 e!64369)))

(declare-fun c!16826 () Bool)

(assert (=> d!26501 (= c!16826 (and ((_ is Cons!1608) (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888)))) (bvslt (_1!1186 (h!2202 (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888))))) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(assert (=> d!26501 (isStrictlySorted!299 (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888))))))

(assert (=> d!26501 (= (insertStrictlySorted!69 (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888))) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) lt!49682)))

(declare-fun b!98769 () Bool)

(assert (=> b!98769 (= e!64370 (contains!808 lt!49682 (tuple2!2353 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98770 () Bool)

(declare-fun res!49675 () Bool)

(assert (=> b!98770 (=> (not res!49675) (not e!64370))))

(assert (=> b!98770 (= res!49675 (containsKey!153 lt!49682 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98771 () Bool)

(declare-fun e!64373 () List!1612)

(declare-fun call!10100 () List!1612)

(assert (=> b!98771 (= e!64373 call!10100)))

(declare-fun bm!10095 () Bool)

(declare-fun call!10099 () List!1612)

(declare-fun e!64371 () List!1612)

(assert (=> bm!10095 (= call!10099 ($colon$colon!77 e!64371 (ite c!16826 (h!2202 (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888)))) (tuple2!2353 (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))))

(declare-fun c!16824 () Bool)

(assert (=> bm!10095 (= c!16824 c!16826)))

(declare-fun b!98772 () Bool)

(assert (=> b!98772 (= e!64371 (insertStrictlySorted!69 (t!5574 (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888)))) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (_2!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun c!16825 () Bool)

(declare-fun b!98773 () Bool)

(declare-fun c!16823 () Bool)

(assert (=> b!98773 (= e!64371 (ite c!16823 (t!5574 (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888)))) (ite c!16825 (Cons!1608 (h!2202 (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888)))) (t!5574 (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888))))) Nil!1609)))))

(declare-fun b!98774 () Bool)

(assert (=> b!98774 (= c!16825 (and ((_ is Cons!1608) (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888)))) (bvsgt (_1!1186 (h!2202 (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888))))) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun e!64372 () List!1612)

(assert (=> b!98774 (= e!64373 e!64372)))

(declare-fun bm!10096 () Bool)

(declare-fun call!10098 () List!1612)

(assert (=> bm!10096 (= call!10098 call!10100)))

(declare-fun b!98775 () Bool)

(assert (=> b!98775 (= e!64369 e!64373)))

(assert (=> b!98775 (= c!16823 (and ((_ is Cons!1608) (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888)))) (= (_1!1186 (h!2202 (toList!791 (ite c!16514 call!9890 (ite c!16519 call!9893 call!9888))))) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98776 () Bool)

(assert (=> b!98776 (= e!64369 call!10099)))

(declare-fun b!98777 () Bool)

(assert (=> b!98777 (= e!64372 call!10098)))

(declare-fun bm!10097 () Bool)

(assert (=> bm!10097 (= call!10100 call!10099)))

(declare-fun b!98778 () Bool)

(assert (=> b!98778 (= e!64372 call!10098)))

(assert (= (and d!26501 c!16826) b!98776))

(assert (= (and d!26501 (not c!16826)) b!98775))

(assert (= (and b!98775 c!16823) b!98771))

(assert (= (and b!98775 (not c!16823)) b!98774))

(assert (= (and b!98774 c!16825) b!98777))

(assert (= (and b!98774 (not c!16825)) b!98778))

(assert (= (or b!98777 b!98778) bm!10096))

(assert (= (or b!98771 bm!10096) bm!10097))

(assert (= (or b!98776 bm!10097) bm!10095))

(assert (= (and bm!10095 c!16824) b!98772))

(assert (= (and bm!10095 (not c!16824)) b!98773))

(assert (= (and d!26501 res!49674) b!98770))

(assert (= (and b!98770 res!49675) b!98769))

(declare-fun m!108563 () Bool)

(assert (=> bm!10095 m!108563))

(declare-fun m!108565 () Bool)

(assert (=> b!98769 m!108565))

(declare-fun m!108567 () Bool)

(assert (=> d!26501 m!108567))

(declare-fun m!108569 () Bool)

(assert (=> d!26501 m!108569))

(declare-fun m!108571 () Bool)

(assert (=> b!98770 m!108571))

(declare-fun m!108573 () Bool)

(assert (=> b!98772 m!108573))

(assert (=> d!26143 d!26501))

(declare-fun d!26503 () Bool)

(declare-fun e!64375 () Bool)

(assert (=> d!26503 e!64375))

(declare-fun res!49676 () Bool)

(assert (=> d!26503 (=> res!49676 e!64375)))

(declare-fun lt!49685 () Bool)

(assert (=> d!26503 (= res!49676 (not lt!49685))))

(declare-fun lt!49686 () Bool)

(assert (=> d!26503 (= lt!49685 lt!49686)))

(declare-fun lt!49683 () Unit!2965)

(declare-fun e!64374 () Unit!2965)

(assert (=> d!26503 (= lt!49683 e!64374)))

(declare-fun c!16827 () Bool)

(assert (=> d!26503 (= c!16827 lt!49686)))

(assert (=> d!26503 (= lt!49686 (containsKey!153 (toList!791 lt!49280) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26503 (= (contains!805 lt!49280 #b0000000000000000000000000000000000000000000000000000000000000000) lt!49685)))

(declare-fun b!98779 () Bool)

(declare-fun lt!49684 () Unit!2965)

(assert (=> b!98779 (= e!64374 lt!49684)))

(assert (=> b!98779 (= lt!49684 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49280) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98779 (isDefined!103 (getValueByKey!149 (toList!791 lt!49280) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98780 () Bool)

(declare-fun Unit!3016 () Unit!2965)

(assert (=> b!98780 (= e!64374 Unit!3016)))

(declare-fun b!98781 () Bool)

(assert (=> b!98781 (= e!64375 (isDefined!103 (getValueByKey!149 (toList!791 lt!49280) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26503 c!16827) b!98779))

(assert (= (and d!26503 (not c!16827)) b!98780))

(assert (= (and d!26503 (not res!49676)) b!98781))

(declare-fun m!108575 () Bool)

(assert (=> d!26503 m!108575))

(declare-fun m!108577 () Bool)

(assert (=> b!98779 m!108577))

(declare-fun m!108579 () Bool)

(assert (=> b!98779 m!108579))

(assert (=> b!98779 m!108579))

(declare-fun m!108581 () Bool)

(assert (=> b!98779 m!108581))

(assert (=> b!98781 m!108579))

(assert (=> b!98781 m!108579))

(assert (=> b!98781 m!108581))

(assert (=> bm!10013 d!26503))

(declare-fun b!98782 () Bool)

(declare-fun e!64377 () Bool)

(declare-fun lt!49688 () ListLongMap!1551)

(assert (=> b!98782 (= e!64377 (isEmpty!362 lt!49688))))

(declare-fun b!98783 () Bool)

(declare-fun res!49677 () Bool)

(declare-fun e!64380 () Bool)

(assert (=> b!98783 (=> (not res!49677) (not e!64380))))

(assert (=> b!98783 (= res!49677 (not (contains!805 lt!49688 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98784 () Bool)

(declare-fun e!64379 () Bool)

(assert (=> b!98784 (= e!64380 e!64379)))

(declare-fun c!16829 () Bool)

(declare-fun e!64378 () Bool)

(assert (=> b!98784 (= c!16829 e!64378)))

(declare-fun res!49678 () Bool)

(assert (=> b!98784 (=> (not res!49678) (not e!64378))))

(assert (=> b!98784 (= res!49678 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!98785 () Bool)

(declare-fun e!64381 () Bool)

(assert (=> b!98785 (= e!64379 e!64381)))

(assert (=> b!98785 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun res!49679 () Bool)

(assert (=> b!98785 (= res!49679 (contains!805 lt!49688 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!98785 (=> (not res!49679) (not e!64381))))

(declare-fun b!98787 () Bool)

(declare-fun lt!49689 () Unit!2965)

(declare-fun lt!49687 () Unit!2965)

(assert (=> b!98787 (= lt!49689 lt!49687)))

(declare-fun lt!49690 () ListLongMap!1551)

(declare-fun lt!49691 () (_ BitVec 64))

(declare-fun lt!49693 () (_ BitVec 64))

(declare-fun lt!49692 () V!3155)

(assert (=> b!98787 (not (contains!805 (+!138 lt!49690 (tuple2!2353 lt!49691 lt!49692)) lt!49693))))

(assert (=> b!98787 (= lt!49687 (addStillNotContains!42 lt!49690 lt!49691 lt!49692 lt!49693))))

(assert (=> b!98787 (= lt!49693 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!98787 (= lt!49692 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!98787 (= lt!49691 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(declare-fun call!10101 () ListLongMap!1551)

(assert (=> b!98787 (= lt!49690 call!10101)))

(declare-fun e!64376 () ListLongMap!1551)

(assert (=> b!98787 (= e!64376 (+!138 call!10101 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!98788 () Bool)

(assert (=> b!98788 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> b!98788 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2265 (_values!2464 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> b!98788 (= e!64381 (= (apply!92 lt!49688 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!98789 () Bool)

(assert (=> b!98789 (= e!64376 call!10101)))

(declare-fun b!98790 () Bool)

(declare-fun e!64382 () ListLongMap!1551)

(assert (=> b!98790 (= e!64382 e!64376)))

(declare-fun c!16828 () Bool)

(assert (=> b!98790 (= c!16828 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!98791 () Bool)

(assert (=> b!98791 (= e!64377 (= lt!49688 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!98792 () Bool)

(assert (=> b!98792 (= e!64378 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!98792 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!98793 () Bool)

(assert (=> b!98793 (= e!64379 e!64377)))

(declare-fun c!16830 () Bool)

(assert (=> b!98793 (= c!16830 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun bm!10098 () Bool)

(assert (=> bm!10098 (= call!10101 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun d!26505 () Bool)

(assert (=> d!26505 e!64380))

(declare-fun res!49680 () Bool)

(assert (=> d!26505 (=> (not res!49680) (not e!64380))))

(assert (=> d!26505 (= res!49680 (not (contains!805 lt!49688 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26505 (= lt!49688 e!64382)))

(declare-fun c!16831 () Bool)

(assert (=> d!26505 (= c!16831 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> d!26505 (validMask!0 (mask!6578 (v!2801 (underlying!339 thiss!992))))))

(assert (=> d!26505 (= (getCurrentListMapNoExtraKeys!102 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (_values!2464 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992))) (extraKeys!2302 (v!2801 (underlying!339 thiss!992))) (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) (minValue!2364 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992)))) lt!49688)))

(declare-fun b!98786 () Bool)

(assert (=> b!98786 (= e!64382 (ListLongMap!1552 Nil!1609))))

(assert (= (and d!26505 c!16831) b!98786))

(assert (= (and d!26505 (not c!16831)) b!98790))

(assert (= (and b!98790 c!16828) b!98787))

(assert (= (and b!98790 (not c!16828)) b!98789))

(assert (= (or b!98787 b!98789) bm!10098))

(assert (= (and d!26505 res!49680) b!98783))

(assert (= (and b!98783 res!49677) b!98784))

(assert (= (and b!98784 res!49678) b!98792))

(assert (= (and b!98784 c!16829) b!98785))

(assert (= (and b!98784 (not c!16829)) b!98793))

(assert (= (and b!98785 res!49679) b!98788))

(assert (= (and b!98793 c!16830) b!98791))

(assert (= (and b!98793 (not c!16830)) b!98782))

(declare-fun b_lambda!4407 () Bool)

(assert (=> (not b_lambda!4407) (not b!98787)))

(assert (=> b!98787 t!5570))

(declare-fun b_and!6081 () Bool)

(assert (= b_and!6077 (and (=> t!5570 result!3269) b_and!6081)))

(assert (=> b!98787 t!5572))

(declare-fun b_and!6083 () Bool)

(assert (= b_and!6079 (and (=> t!5572 result!3273) b_and!6083)))

(declare-fun b_lambda!4409 () Bool)

(assert (=> (not b_lambda!4409) (not b!98788)))

(assert (=> b!98788 t!5570))

(declare-fun b_and!6085 () Bool)

(assert (= b_and!6081 (and (=> t!5570 result!3269) b_and!6085)))

(assert (=> b!98788 t!5572))

(declare-fun b_and!6087 () Bool)

(assert (= b_and!6083 (and (=> t!5572 result!3273) b_and!6087)))

(declare-fun m!108583 () Bool)

(assert (=> b!98782 m!108583))

(assert (=> b!98792 m!106841))

(assert (=> b!98792 m!106841))

(declare-fun m!108585 () Bool)

(assert (=> b!98792 m!108585))

(declare-fun m!108587 () Bool)

(assert (=> d!26505 m!108587))

(assert (=> d!26505 m!106601))

(declare-fun m!108589 () Bool)

(assert (=> b!98787 m!108589))

(declare-fun m!108591 () Bool)

(assert (=> b!98787 m!108591))

(assert (=> b!98787 m!108589))

(declare-fun m!108593 () Bool)

(assert (=> b!98787 m!108593))

(assert (=> b!98787 m!106841))

(assert (=> b!98787 m!106605))

(declare-fun m!108595 () Bool)

(assert (=> b!98787 m!108595))

(assert (=> b!98787 m!106605))

(declare-fun m!108597 () Bool)

(assert (=> b!98787 m!108597))

(assert (=> b!98787 m!108595))

(declare-fun m!108599 () Bool)

(assert (=> b!98787 m!108599))

(declare-fun m!108601 () Bool)

(assert (=> b!98783 m!108601))

(assert (=> b!98790 m!106841))

(assert (=> b!98790 m!106841))

(assert (=> b!98790 m!108585))

(assert (=> b!98788 m!106841))

(declare-fun m!108603 () Bool)

(assert (=> b!98788 m!108603))

(assert (=> b!98788 m!106841))

(assert (=> b!98788 m!106605))

(assert (=> b!98788 m!108595))

(assert (=> b!98788 m!106605))

(assert (=> b!98788 m!108597))

(assert (=> b!98788 m!108595))

(declare-fun m!108605 () Bool)

(assert (=> bm!10098 m!108605))

(assert (=> b!98791 m!108605))

(assert (=> b!98785 m!106841))

(assert (=> b!98785 m!106841))

(declare-fun m!108607 () Bool)

(assert (=> b!98785 m!108607))

(assert (=> bm!9999 d!26505))

(declare-fun d!26507 () Bool)

(declare-fun e!64384 () Bool)

(assert (=> d!26507 e!64384))

(declare-fun res!49681 () Bool)

(assert (=> d!26507 (=> res!49681 e!64384)))

(declare-fun lt!49696 () Bool)

(assert (=> d!26507 (= res!49681 (not lt!49696))))

(declare-fun lt!49697 () Bool)

(assert (=> d!26507 (= lt!49696 lt!49697)))

(declare-fun lt!49694 () Unit!2965)

(declare-fun e!64383 () Unit!2965)

(assert (=> d!26507 (= lt!49694 e!64383)))

(declare-fun c!16832 () Bool)

(assert (=> d!26507 (= c!16832 lt!49697)))

(assert (=> d!26507 (= lt!49697 (containsKey!153 (toList!791 (map!1255 (_2!1187 lt!49155))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26507 (= (contains!805 (map!1255 (_2!1187 lt!49155)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) lt!49696)))

(declare-fun b!98794 () Bool)

(declare-fun lt!49695 () Unit!2965)

(assert (=> b!98794 (= e!64383 lt!49695)))

(assert (=> b!98794 (= lt!49695 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 (map!1255 (_2!1187 lt!49155))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> b!98794 (isDefined!103 (getValueByKey!149 (toList!791 (map!1255 (_2!1187 lt!49155))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!98795 () Bool)

(declare-fun Unit!3017 () Unit!2965)

(assert (=> b!98795 (= e!64383 Unit!3017)))

(declare-fun b!98796 () Bool)

(assert (=> b!98796 (= e!64384 (isDefined!103 (getValueByKey!149 (toList!791 (map!1255 (_2!1187 lt!49155))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (= (and d!26507 c!16832) b!98794))

(assert (= (and d!26507 (not c!16832)) b!98795))

(assert (= (and d!26507 (not res!49681)) b!98796))

(assert (=> d!26507 m!106609))

(declare-fun m!108609 () Bool)

(assert (=> d!26507 m!108609))

(assert (=> b!98794 m!106609))

(declare-fun m!108611 () Bool)

(assert (=> b!98794 m!108611))

(assert (=> b!98794 m!106609))

(declare-fun m!108613 () Bool)

(assert (=> b!98794 m!108613))

(assert (=> b!98794 m!108613))

(declare-fun m!108615 () Bool)

(assert (=> b!98794 m!108615))

(assert (=> b!98796 m!106609))

(assert (=> b!98796 m!108613))

(assert (=> b!98796 m!108613))

(assert (=> b!98796 m!108615))

(assert (=> b!97987 d!26507))

(declare-fun d!26509 () Bool)

(assert (=> d!26509 (= (map!1255 (_2!1187 lt!49155)) (getCurrentListMap!472 (_keys!4171 (_2!1187 lt!49155)) (_values!2464 (_2!1187 lt!49155)) (mask!6578 (_2!1187 lt!49155)) (extraKeys!2302 (_2!1187 lt!49155)) (zeroValue!2364 (_2!1187 lt!49155)) (minValue!2364 (_2!1187 lt!49155)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1187 lt!49155))))))

(declare-fun bs!4078 () Bool)

(assert (= bs!4078 d!26509))

(declare-fun m!108617 () Bool)

(assert (=> bs!4078 m!108617))

(assert (=> b!97987 d!26509))

(assert (=> d!26139 d!26185))

(assert (=> b!98014 d!26389))

(assert (=> b!97871 d!26165))

(declare-fun bm!10099 () Bool)

(declare-fun call!10102 () Bool)

(assert (=> bm!10099 (= call!10102 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4171 (_2!1187 lt!48968)) (mask!6578 (_2!1187 lt!48968))))))

(declare-fun b!98797 () Bool)

(declare-fun e!64387 () Bool)

(declare-fun e!64386 () Bool)

(assert (=> b!98797 (= e!64387 e!64386)))

(declare-fun c!16833 () Bool)

(assert (=> b!98797 (= c!16833 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000)))))

(declare-fun b!98798 () Bool)

(assert (=> b!98798 (= e!64386 call!10102)))

(declare-fun b!98799 () Bool)

(declare-fun e!64385 () Bool)

(assert (=> b!98799 (= e!64386 e!64385)))

(declare-fun lt!49698 () (_ BitVec 64))

(assert (=> b!98799 (= lt!49698 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000))))

(declare-fun lt!49699 () Unit!2965)

(assert (=> b!98799 (= lt!49699 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4171 (_2!1187 lt!48968)) lt!49698 #b00000000000000000000000000000000))))

(assert (=> b!98799 (arrayContainsKey!0 (_keys!4171 (_2!1187 lt!48968)) lt!49698 #b00000000000000000000000000000000)))

(declare-fun lt!49700 () Unit!2965)

(assert (=> b!98799 (= lt!49700 lt!49699)))

(declare-fun res!49683 () Bool)

(assert (=> b!98799 (= res!49683 (= (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000) (_keys!4171 (_2!1187 lt!48968)) (mask!6578 (_2!1187 lt!48968))) (Found!263 #b00000000000000000000000000000000)))))

(assert (=> b!98799 (=> (not res!49683) (not e!64385))))

(declare-fun d!26511 () Bool)

(declare-fun res!49682 () Bool)

(assert (=> d!26511 (=> res!49682 e!64387)))

(assert (=> d!26511 (= res!49682 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))))))

(assert (=> d!26511 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 (_2!1187 lt!48968)) (mask!6578 (_2!1187 lt!48968))) e!64387)))

(declare-fun b!98800 () Bool)

(assert (=> b!98800 (= e!64385 call!10102)))

(assert (= (and d!26511 (not res!49682)) b!98797))

(assert (= (and b!98797 c!16833) b!98799))

(assert (= (and b!98797 (not c!16833)) b!98798))

(assert (= (and b!98799 res!49683) b!98800))

(assert (= (or b!98800 b!98798) bm!10099))

(declare-fun m!108619 () Bool)

(assert (=> bm!10099 m!108619))

(assert (=> b!98797 m!108295))

(assert (=> b!98797 m!108295))

(assert (=> b!98797 m!108297))

(assert (=> b!98799 m!108295))

(declare-fun m!108621 () Bool)

(assert (=> b!98799 m!108621))

(declare-fun m!108623 () Bool)

(assert (=> b!98799 m!108623))

(assert (=> b!98799 m!108295))

(declare-fun m!108625 () Bool)

(assert (=> b!98799 m!108625))

(assert (=> b!97898 d!26511))

(declare-fun d!26513 () Bool)

(assert (=> d!26513 (= (apply!92 (+!138 lt!49278 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49262) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!49278 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) lt!49262)))))

(declare-fun bs!4079 () Bool)

(assert (= bs!4079 d!26513))

(declare-fun m!108627 () Bool)

(assert (=> bs!4079 m!108627))

(assert (=> bs!4079 m!108627))

(declare-fun m!108629 () Bool)

(assert (=> bs!4079 m!108629))

(assert (=> b!98130 d!26513))

(declare-fun d!26515 () Bool)

(declare-fun e!64388 () Bool)

(assert (=> d!26515 e!64388))

(declare-fun res!49685 () Bool)

(assert (=> d!26515 (=> (not res!49685) (not e!64388))))

(declare-fun lt!49701 () ListLongMap!1551)

(assert (=> d!26515 (= res!49685 (contains!805 lt!49701 (_1!1186 (tuple2!2353 lt!49271 (minValue!2364 newMap!16)))))))

(declare-fun lt!49703 () List!1612)

(assert (=> d!26515 (= lt!49701 (ListLongMap!1552 lt!49703))))

(declare-fun lt!49704 () Unit!2965)

(declare-fun lt!49702 () Unit!2965)

(assert (=> d!26515 (= lt!49704 lt!49702)))

(assert (=> d!26515 (= (getValueByKey!149 lt!49703 (_1!1186 (tuple2!2353 lt!49271 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49271 (minValue!2364 newMap!16)))))))

(assert (=> d!26515 (= lt!49702 (lemmaContainsTupThenGetReturnValue!67 lt!49703 (_1!1186 (tuple2!2353 lt!49271 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49271 (minValue!2364 newMap!16)))))))

(assert (=> d!26515 (= lt!49703 (insertStrictlySorted!69 (toList!791 lt!49277) (_1!1186 (tuple2!2353 lt!49271 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49271 (minValue!2364 newMap!16)))))))

(assert (=> d!26515 (= (+!138 lt!49277 (tuple2!2353 lt!49271 (minValue!2364 newMap!16))) lt!49701)))

(declare-fun b!98801 () Bool)

(declare-fun res!49684 () Bool)

(assert (=> b!98801 (=> (not res!49684) (not e!64388))))

(assert (=> b!98801 (= res!49684 (= (getValueByKey!149 (toList!791 lt!49701) (_1!1186 (tuple2!2353 lt!49271 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49271 (minValue!2364 newMap!16))))))))

(declare-fun b!98802 () Bool)

(assert (=> b!98802 (= e!64388 (contains!808 (toList!791 lt!49701) (tuple2!2353 lt!49271 (minValue!2364 newMap!16))))))

(assert (= (and d!26515 res!49685) b!98801))

(assert (= (and b!98801 res!49684) b!98802))

(declare-fun m!108631 () Bool)

(assert (=> d!26515 m!108631))

(declare-fun m!108633 () Bool)

(assert (=> d!26515 m!108633))

(declare-fun m!108635 () Bool)

(assert (=> d!26515 m!108635))

(declare-fun m!108637 () Bool)

(assert (=> d!26515 m!108637))

(declare-fun m!108639 () Bool)

(assert (=> b!98801 m!108639))

(declare-fun m!108641 () Bool)

(assert (=> b!98802 m!108641))

(assert (=> b!98130 d!26515))

(declare-fun d!26517 () Bool)

(declare-fun e!64390 () Bool)

(assert (=> d!26517 e!64390))

(declare-fun res!49686 () Bool)

(assert (=> d!26517 (=> res!49686 e!64390)))

(declare-fun lt!49707 () Bool)

(assert (=> d!26517 (= res!49686 (not lt!49707))))

(declare-fun lt!49708 () Bool)

(assert (=> d!26517 (= lt!49707 lt!49708)))

(declare-fun lt!49705 () Unit!2965)

(declare-fun e!64389 () Unit!2965)

(assert (=> d!26517 (= lt!49705 e!64389)))

(declare-fun c!16834 () Bool)

(assert (=> d!26517 (= c!16834 lt!49708)))

(assert (=> d!26517 (= lt!49708 (containsKey!153 (toList!791 (+!138 lt!49270 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) lt!49263))))

(assert (=> d!26517 (= (contains!805 (+!138 lt!49270 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49263) lt!49707)))

(declare-fun b!98803 () Bool)

(declare-fun lt!49706 () Unit!2965)

(assert (=> b!98803 (= e!64389 lt!49706)))

(assert (=> b!98803 (= lt!49706 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 (+!138 lt!49270 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) lt!49263))))

(assert (=> b!98803 (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!49270 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) lt!49263))))

(declare-fun b!98804 () Bool)

(declare-fun Unit!3018 () Unit!2965)

(assert (=> b!98804 (= e!64389 Unit!3018)))

(declare-fun b!98805 () Bool)

(assert (=> b!98805 (= e!64390 (isDefined!103 (getValueByKey!149 (toList!791 (+!138 lt!49270 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) lt!49263)))))

(assert (= (and d!26517 c!16834) b!98803))

(assert (= (and d!26517 (not c!16834)) b!98804))

(assert (= (and d!26517 (not res!49686)) b!98805))

(declare-fun m!108643 () Bool)

(assert (=> d!26517 m!108643))

(declare-fun m!108645 () Bool)

(assert (=> b!98803 m!108645))

(declare-fun m!108647 () Bool)

(assert (=> b!98803 m!108647))

(assert (=> b!98803 m!108647))

(declare-fun m!108649 () Bool)

(assert (=> b!98803 m!108649))

(assert (=> b!98805 m!108647))

(assert (=> b!98805 m!108647))

(assert (=> b!98805 m!108649))

(assert (=> b!98130 d!26517))

(declare-fun d!26519 () Bool)

(assert (=> d!26519 (= (apply!92 (+!138 lt!49272 (tuple2!2353 lt!49276 (minValue!2364 newMap!16))) lt!49281) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!49272 (tuple2!2353 lt!49276 (minValue!2364 newMap!16)))) lt!49281)))))

(declare-fun bs!4080 () Bool)

(assert (= bs!4080 d!26519))

(declare-fun m!108651 () Bool)

(assert (=> bs!4080 m!108651))

(assert (=> bs!4080 m!108651))

(declare-fun m!108653 () Bool)

(assert (=> bs!4080 m!108653))

(assert (=> b!98130 d!26519))

(declare-fun d!26521 () Bool)

(assert (=> d!26521 (contains!805 (+!138 lt!49270 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49263)))

(declare-fun lt!49709 () Unit!2965)

(assert (=> d!26521 (= lt!49709 (choose!602 lt!49270 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49263))))

(assert (=> d!26521 (contains!805 lt!49270 lt!49263)))

(assert (=> d!26521 (= (addStillContains!68 lt!49270 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49263) lt!49709)))

(declare-fun bs!4081 () Bool)

(assert (= bs!4081 d!26521))

(assert (=> bs!4081 m!107323))

(assert (=> bs!4081 m!107323))

(assert (=> bs!4081 m!107341))

(declare-fun m!108655 () Bool)

(assert (=> bs!4081 m!108655))

(declare-fun m!108657 () Bool)

(assert (=> bs!4081 m!108657))

(assert (=> b!98130 d!26521))

(declare-fun d!26523 () Bool)

(assert (=> d!26523 (= (apply!92 (+!138 lt!49272 (tuple2!2353 lt!49276 (minValue!2364 newMap!16))) lt!49281) (apply!92 lt!49272 lt!49281))))

(declare-fun lt!49710 () Unit!2965)

(assert (=> d!26523 (= lt!49710 (choose!601 lt!49272 lt!49276 (minValue!2364 newMap!16) lt!49281))))

(declare-fun e!64391 () Bool)

(assert (=> d!26523 e!64391))

(declare-fun res!49687 () Bool)

(assert (=> d!26523 (=> (not res!49687) (not e!64391))))

(assert (=> d!26523 (= res!49687 (contains!805 lt!49272 lt!49281))))

(assert (=> d!26523 (= (addApplyDifferent!68 lt!49272 lt!49276 (minValue!2364 newMap!16) lt!49281) lt!49710)))

(declare-fun b!98806 () Bool)

(assert (=> b!98806 (= e!64391 (not (= lt!49281 lt!49276)))))

(assert (= (and d!26523 res!49687) b!98806))

(assert (=> d!26523 m!107337))

(assert (=> d!26523 m!107327))

(assert (=> d!26523 m!107329))

(declare-fun m!108659 () Bool)

(assert (=> d!26523 m!108659))

(declare-fun m!108661 () Bool)

(assert (=> d!26523 m!108661))

(assert (=> d!26523 m!107327))

(assert (=> b!98130 d!26523))

(assert (=> b!98130 d!26233))

(declare-fun d!26525 () Bool)

(assert (=> d!26525 (= (apply!92 (+!138 lt!49277 (tuple2!2353 lt!49271 (minValue!2364 newMap!16))) lt!49264) (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!49277 (tuple2!2353 lt!49271 (minValue!2364 newMap!16)))) lt!49264)))))

(declare-fun bs!4082 () Bool)

(assert (= bs!4082 d!26525))

(declare-fun m!108663 () Bool)

(assert (=> bs!4082 m!108663))

(assert (=> bs!4082 m!108663))

(declare-fun m!108665 () Bool)

(assert (=> bs!4082 m!108665))

(assert (=> b!98130 d!26525))

(declare-fun d!26527 () Bool)

(declare-fun e!64392 () Bool)

(assert (=> d!26527 e!64392))

(declare-fun res!49689 () Bool)

(assert (=> d!26527 (=> (not res!49689) (not e!64392))))

(declare-fun lt!49711 () ListLongMap!1551)

(assert (=> d!26527 (= res!49689 (contains!805 lt!49711 (_1!1186 (tuple2!2353 lt!49276 (minValue!2364 newMap!16)))))))

(declare-fun lt!49713 () List!1612)

(assert (=> d!26527 (= lt!49711 (ListLongMap!1552 lt!49713))))

(declare-fun lt!49714 () Unit!2965)

(declare-fun lt!49712 () Unit!2965)

(assert (=> d!26527 (= lt!49714 lt!49712)))

(assert (=> d!26527 (= (getValueByKey!149 lt!49713 (_1!1186 (tuple2!2353 lt!49276 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49276 (minValue!2364 newMap!16)))))))

(assert (=> d!26527 (= lt!49712 (lemmaContainsTupThenGetReturnValue!67 lt!49713 (_1!1186 (tuple2!2353 lt!49276 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49276 (minValue!2364 newMap!16)))))))

(assert (=> d!26527 (= lt!49713 (insertStrictlySorted!69 (toList!791 lt!49272) (_1!1186 (tuple2!2353 lt!49276 (minValue!2364 newMap!16))) (_2!1186 (tuple2!2353 lt!49276 (minValue!2364 newMap!16)))))))

(assert (=> d!26527 (= (+!138 lt!49272 (tuple2!2353 lt!49276 (minValue!2364 newMap!16))) lt!49711)))

(declare-fun b!98807 () Bool)

(declare-fun res!49688 () Bool)

(assert (=> b!98807 (=> (not res!49688) (not e!64392))))

(assert (=> b!98807 (= res!49688 (= (getValueByKey!149 (toList!791 lt!49711) (_1!1186 (tuple2!2353 lt!49276 (minValue!2364 newMap!16)))) (Some!154 (_2!1186 (tuple2!2353 lt!49276 (minValue!2364 newMap!16))))))))

(declare-fun b!98808 () Bool)

(assert (=> b!98808 (= e!64392 (contains!808 (toList!791 lt!49711) (tuple2!2353 lt!49276 (minValue!2364 newMap!16))))))

(assert (= (and d!26527 res!49689) b!98807))

(assert (= (and b!98807 res!49688) b!98808))

(declare-fun m!108667 () Bool)

(assert (=> d!26527 m!108667))

(declare-fun m!108669 () Bool)

(assert (=> d!26527 m!108669))

(declare-fun m!108671 () Bool)

(assert (=> d!26527 m!108671))

(declare-fun m!108673 () Bool)

(assert (=> d!26527 m!108673))

(declare-fun m!108675 () Bool)

(assert (=> b!98807 m!108675))

(declare-fun m!108677 () Bool)

(assert (=> b!98808 m!108677))

(assert (=> b!98130 d!26527))

(declare-fun d!26529 () Bool)

(assert (=> d!26529 (= (apply!92 (+!138 lt!49278 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49262) (apply!92 lt!49278 lt!49262))))

(declare-fun lt!49715 () Unit!2965)

(assert (=> d!26529 (= lt!49715 (choose!601 lt!49278 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49262))))

(declare-fun e!64393 () Bool)

(assert (=> d!26529 e!64393))

(declare-fun res!49690 () Bool)

(assert (=> d!26529 (=> (not res!49690) (not e!64393))))

(assert (=> d!26529 (= res!49690 (contains!805 lt!49278 lt!49262))))

(assert (=> d!26529 (= (addApplyDifferent!68 lt!49278 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)) lt!49262) lt!49715)))

(declare-fun b!98809 () Bool)

(assert (=> b!98809 (= e!64393 (not (= lt!49262 lt!49275)))))

(assert (= (and d!26529 res!49690) b!98809))

(assert (=> d!26529 m!107331))

(assert (=> d!26529 m!107313))

(assert (=> d!26529 m!107315))

(declare-fun m!108679 () Bool)

(assert (=> d!26529 m!108679))

(declare-fun m!108681 () Bool)

(assert (=> d!26529 m!108681))

(assert (=> d!26529 m!107313))

(assert (=> b!98130 d!26529))

(declare-fun d!26531 () Bool)

(declare-fun e!64394 () Bool)

(assert (=> d!26531 e!64394))

(declare-fun res!49692 () Bool)

(assert (=> d!26531 (=> (not res!49692) (not e!64394))))

(declare-fun lt!49716 () ListLongMap!1551)

(assert (=> d!26531 (= res!49692 (contains!805 lt!49716 (_1!1186 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(declare-fun lt!49718 () List!1612)

(assert (=> d!26531 (= lt!49716 (ListLongMap!1552 lt!49718))))

(declare-fun lt!49719 () Unit!2965)

(declare-fun lt!49717 () Unit!2965)

(assert (=> d!26531 (= lt!49719 lt!49717)))

(assert (=> d!26531 (= (getValueByKey!149 lt!49718 (_1!1186 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) (Some!154 (_2!1186 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26531 (= lt!49717 (lemmaContainsTupThenGetReturnValue!67 lt!49718 (_1!1186 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) (_2!1186 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26531 (= lt!49718 (insertStrictlySorted!69 (toList!791 lt!49278) (_1!1186 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) (_2!1186 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26531 (= (+!138 lt!49278 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49716)))

(declare-fun b!98810 () Bool)

(declare-fun res!49691 () Bool)

(assert (=> b!98810 (=> (not res!49691) (not e!64394))))

(assert (=> b!98810 (= res!49691 (= (getValueByKey!149 (toList!791 lt!49716) (_1!1186 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) (Some!154 (_2!1186 (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))))))))

(declare-fun b!98811 () Bool)

(assert (=> b!98811 (= e!64394 (contains!808 (toList!791 lt!49716) (tuple2!2353 lt!49275 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))))))

(assert (= (and d!26531 res!49692) b!98810))

(assert (= (and b!98810 res!49691) b!98811))

(declare-fun m!108683 () Bool)

(assert (=> d!26531 m!108683))

(declare-fun m!108685 () Bool)

(assert (=> d!26531 m!108685))

(declare-fun m!108687 () Bool)

(assert (=> d!26531 m!108687))

(declare-fun m!108689 () Bool)

(assert (=> d!26531 m!108689))

(declare-fun m!108691 () Bool)

(assert (=> b!98810 m!108691))

(declare-fun m!108693 () Bool)

(assert (=> b!98811 m!108693))

(assert (=> b!98130 d!26531))

(declare-fun d!26533 () Bool)

(assert (=> d!26533 (= (apply!92 (+!138 lt!49277 (tuple2!2353 lt!49271 (minValue!2364 newMap!16))) lt!49264) (apply!92 lt!49277 lt!49264))))

(declare-fun lt!49720 () Unit!2965)

(assert (=> d!26533 (= lt!49720 (choose!601 lt!49277 lt!49271 (minValue!2364 newMap!16) lt!49264))))

(declare-fun e!64395 () Bool)

(assert (=> d!26533 e!64395))

(declare-fun res!49693 () Bool)

(assert (=> d!26533 (=> (not res!49693) (not e!64395))))

(assert (=> d!26533 (= res!49693 (contains!805 lt!49277 lt!49264))))

(assert (=> d!26533 (= (addApplyDifferent!68 lt!49277 lt!49271 (minValue!2364 newMap!16) lt!49264) lt!49720)))

(declare-fun b!98812 () Bool)

(assert (=> b!98812 (= e!64395 (not (= lt!49264 lt!49271)))))

(assert (= (and d!26533 res!49693) b!98812))

(assert (=> d!26533 m!107333))

(assert (=> d!26533 m!107317))

(assert (=> d!26533 m!107319))

(declare-fun m!108695 () Bool)

(assert (=> d!26533 m!108695))

(declare-fun m!108697 () Bool)

(assert (=> d!26533 m!108697))

(assert (=> d!26533 m!107317))

(assert (=> b!98130 d!26533))

(declare-fun d!26535 () Bool)

(declare-fun e!64396 () Bool)

(assert (=> d!26535 e!64396))

(declare-fun res!49695 () Bool)

(assert (=> d!26535 (=> (not res!49695) (not e!64396))))

(declare-fun lt!49721 () ListLongMap!1551)

(assert (=> d!26535 (= res!49695 (contains!805 lt!49721 (_1!1186 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(declare-fun lt!49723 () List!1612)

(assert (=> d!26535 (= lt!49721 (ListLongMap!1552 lt!49723))))

(declare-fun lt!49724 () Unit!2965)

(declare-fun lt!49722 () Unit!2965)

(assert (=> d!26535 (= lt!49724 lt!49722)))

(assert (=> d!26535 (= (getValueByKey!149 lt!49723 (_1!1186 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) (Some!154 (_2!1186 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26535 (= lt!49722 (lemmaContainsTupThenGetReturnValue!67 lt!49723 (_1!1186 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) (_2!1186 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26535 (= lt!49723 (insertStrictlySorted!69 (toList!791 lt!49270) (_1!1186 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) (_2!1186 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))))))

(assert (=> d!26535 (= (+!138 lt!49270 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))) lt!49721)))

(declare-fun b!98813 () Bool)

(declare-fun res!49694 () Bool)

(assert (=> b!98813 (=> (not res!49694) (not e!64396))))

(assert (=> b!98813 (= res!49694 (= (getValueByKey!149 (toList!791 lt!49721) (_1!1186 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16))))) (Some!154 (_2!1186 (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))))))))

(declare-fun b!98814 () Bool)

(assert (=> b!98814 (= e!64396 (contains!808 (toList!791 lt!49721) (tuple2!2353 lt!49266 (ite (and c!16562 c!16560) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2364 newMap!16)))))))

(assert (= (and d!26535 res!49695) b!98813))

(assert (= (and b!98813 res!49694) b!98814))

(declare-fun m!108699 () Bool)

(assert (=> d!26535 m!108699))

(declare-fun m!108701 () Bool)

(assert (=> d!26535 m!108701))

(declare-fun m!108703 () Bool)

(assert (=> d!26535 m!108703))

(declare-fun m!108705 () Bool)

(assert (=> d!26535 m!108705))

(declare-fun m!108707 () Bool)

(assert (=> b!98813 m!108707))

(declare-fun m!108709 () Bool)

(assert (=> b!98814 m!108709))

(assert (=> b!98130 d!26535))

(declare-fun d!26537 () Bool)

(assert (=> d!26537 (= (apply!92 lt!49278 lt!49262) (get!1300 (getValueByKey!149 (toList!791 lt!49278) lt!49262)))))

(declare-fun bs!4083 () Bool)

(assert (= bs!4083 d!26537))

(declare-fun m!108711 () Bool)

(assert (=> bs!4083 m!108711))

(assert (=> bs!4083 m!108711))

(declare-fun m!108713 () Bool)

(assert (=> bs!4083 m!108713))

(assert (=> b!98130 d!26537))

(declare-fun d!26539 () Bool)

(assert (=> d!26539 (= (apply!92 lt!49277 lt!49264) (get!1300 (getValueByKey!149 (toList!791 lt!49277) lt!49264)))))

(declare-fun bs!4084 () Bool)

(assert (= bs!4084 d!26539))

(declare-fun m!108715 () Bool)

(assert (=> bs!4084 m!108715))

(assert (=> bs!4084 m!108715))

(declare-fun m!108717 () Bool)

(assert (=> bs!4084 m!108717))

(assert (=> b!98130 d!26539))

(declare-fun d!26541 () Bool)

(assert (=> d!26541 (= (apply!92 lt!49272 lt!49281) (get!1300 (getValueByKey!149 (toList!791 lt!49272) lt!49281)))))

(declare-fun bs!4085 () Bool)

(assert (= bs!4085 d!26541))

(declare-fun m!108719 () Bool)

(assert (=> bs!4085 m!108719))

(assert (=> bs!4085 m!108719))

(declare-fun m!108721 () Bool)

(assert (=> bs!4085 m!108721))

(assert (=> b!98130 d!26541))

(assert (=> b!98066 d!26067))

(declare-fun d!26543 () Bool)

(assert (=> d!26543 (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!49725 () Unit!2965)

(assert (=> d!26543 (= lt!49725 (choose!596 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!64397 () Bool)

(assert (=> d!26543 e!64397))

(declare-fun res!49696 () Bool)

(assert (=> d!26543 (=> (not res!49696) (not e!64397))))

(assert (=> d!26543 (= res!49696 (isStrictlySorted!299 (toList!791 lt!48891)))))

(assert (=> d!26543 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49725)))

(declare-fun b!98815 () Bool)

(assert (=> b!98815 (= e!64397 (containsKey!153 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26543 res!49696) b!98815))

(assert (=> d!26543 m!106689))

(assert (=> d!26543 m!106945))

(assert (=> d!26543 m!106945))

(assert (=> d!26543 m!107283))

(assert (=> d!26543 m!106689))

(declare-fun m!108723 () Bool)

(assert (=> d!26543 m!108723))

(assert (=> d!26543 m!108359))

(assert (=> b!98815 m!106689))

(assert (=> b!98815 m!107279))

(assert (=> b!98117 d!26543))

(assert (=> b!98117 d!26193))

(assert (=> b!98117 d!26195))

(declare-fun d!26545 () Bool)

(assert (=> d!26545 (= (apply!92 lt!49073 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) (get!1300 (getValueByKey!149 (toList!791 lt!49073) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4086 () Bool)

(assert (= bs!4086 d!26545))

(assert (=> bs!4086 m!106867))

(assert (=> bs!4086 m!108277))

(assert (=> bs!4086 m!108277))

(declare-fun m!108725 () Bool)

(assert (=> bs!4086 m!108725))

(assert (=> b!97912 d!26545))

(declare-fun d!26547 () Bool)

(declare-fun c!16835 () Bool)

(assert (=> d!26547 (= c!16835 ((_ is ValueCellFull!972) (select (arr!2015 (_values!2464 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!64398 () V!3155)

(assert (=> d!26547 (= (get!1296 (select (arr!2015 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64398)))

(declare-fun b!98816 () Bool)

(assert (=> b!98816 (= e!64398 (get!1298 (select (arr!2015 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!98817 () Bool)

(assert (=> b!98817 (= e!64398 (get!1299 (select (arr!2015 (_values!2464 newMap!16)) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26547 c!16835) b!98816))

(assert (= (and d!26547 (not c!16835)) b!98817))

(assert (=> b!98816 m!107025))

(assert (=> b!98816 m!106939))

(declare-fun m!108727 () Bool)

(assert (=> b!98816 m!108727))

(assert (=> b!98817 m!107025))

(assert (=> b!98817 m!106939))

(declare-fun m!108729 () Bool)

(assert (=> b!98817 m!108729))

(assert (=> b!97912 d!26547))

(declare-fun d!26549 () Bool)

(assert (=> d!26549 (= (apply!92 lt!49073 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1300 (getValueByKey!149 (toList!791 lt!49073) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4087 () Bool)

(assert (= bs!4087 d!26549))

(assert (=> bs!4087 m!108303))

(assert (=> bs!4087 m!108303))

(declare-fun m!108731 () Bool)

(assert (=> bs!4087 m!108731))

(assert (=> b!97911 d!26549))

(declare-fun d!26551 () Bool)

(declare-fun e!64400 () Bool)

(assert (=> d!26551 e!64400))

(declare-fun res!49697 () Bool)

(assert (=> d!26551 (=> res!49697 e!64400)))

(declare-fun lt!49728 () Bool)

(assert (=> d!26551 (= res!49697 (not lt!49728))))

(declare-fun lt!49729 () Bool)

(assert (=> d!26551 (= lt!49728 lt!49729)))

(declare-fun lt!49726 () Unit!2965)

(declare-fun e!64399 () Unit!2965)

(assert (=> d!26551 (= lt!49726 e!64399)))

(declare-fun c!16836 () Bool)

(assert (=> d!26551 (= c!16836 lt!49729)))

(assert (=> d!26551 (= lt!49729 (containsKey!153 (toList!791 lt!49235) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26551 (= (contains!805 lt!49235 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49728)))

(declare-fun b!98818 () Bool)

(declare-fun lt!49727 () Unit!2965)

(assert (=> b!98818 (= e!64399 lt!49727)))

(assert (=> b!98818 (= lt!49727 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49235) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> b!98818 (isDefined!103 (getValueByKey!149 (toList!791 lt!49235) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98819 () Bool)

(declare-fun Unit!3019 () Unit!2965)

(assert (=> b!98819 (= e!64399 Unit!3019)))

(declare-fun b!98820 () Bool)

(assert (=> b!98820 (= e!64400 (isDefined!103 (getValueByKey!149 (toList!791 lt!49235) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (= (and d!26551 c!16836) b!98818))

(assert (= (and d!26551 (not c!16836)) b!98819))

(assert (= (and d!26551 (not res!49697)) b!98820))

(declare-fun m!108733 () Bool)

(assert (=> d!26551 m!108733))

(declare-fun m!108735 () Bool)

(assert (=> b!98818 m!108735))

(assert (=> b!98818 m!107259))

(assert (=> b!98818 m!107259))

(declare-fun m!108737 () Bool)

(assert (=> b!98818 m!108737))

(assert (=> b!98820 m!107259))

(assert (=> b!98820 m!107259))

(assert (=> b!98820 m!108737))

(assert (=> d!26123 d!26551))

(declare-fun b!98822 () Bool)

(declare-fun e!64401 () Option!155)

(declare-fun e!64402 () Option!155)

(assert (=> b!98822 (= e!64401 e!64402)))

(declare-fun c!16838 () Bool)

(assert (=> b!98822 (= c!16838 (and ((_ is Cons!1608) lt!49237) (not (= (_1!1186 (h!2202 lt!49237)) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98824 () Bool)

(assert (=> b!98824 (= e!64402 None!153)))

(declare-fun d!26553 () Bool)

(declare-fun c!16837 () Bool)

(assert (=> d!26553 (= c!16837 (and ((_ is Cons!1608) lt!49237) (= (_1!1186 (h!2202 lt!49237)) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26553 (= (getValueByKey!149 lt!49237 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) e!64401)))

(declare-fun b!98823 () Bool)

(assert (=> b!98823 (= e!64402 (getValueByKey!149 (t!5574 lt!49237) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98821 () Bool)

(assert (=> b!98821 (= e!64401 (Some!154 (_2!1186 (h!2202 lt!49237))))))

(assert (= (and d!26553 c!16837) b!98821))

(assert (= (and d!26553 (not c!16837)) b!98822))

(assert (= (and b!98822 c!16838) b!98823))

(assert (= (and b!98822 (not c!16838)) b!98824))

(declare-fun m!108739 () Bool)

(assert (=> b!98823 m!108739))

(assert (=> d!26123 d!26553))

(declare-fun d!26555 () Bool)

(assert (=> d!26555 (= (getValueByKey!149 lt!49237 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun lt!49730 () Unit!2965)

(assert (=> d!26555 (= lt!49730 (choose!605 lt!49237 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun e!64403 () Bool)

(assert (=> d!26555 e!64403))

(declare-fun res!49698 () Bool)

(assert (=> d!26555 (=> (not res!49698) (not e!64403))))

(assert (=> d!26555 (= res!49698 (isStrictlySorted!299 lt!49237))))

(assert (=> d!26555 (= (lemmaContainsTupThenGetReturnValue!67 lt!49237 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49730)))

(declare-fun b!98825 () Bool)

(declare-fun res!49699 () Bool)

(assert (=> b!98825 (=> (not res!49699) (not e!64403))))

(assert (=> b!98825 (= res!49699 (containsKey!153 lt!49237 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98826 () Bool)

(assert (=> b!98826 (= e!64403 (contains!808 lt!49237 (tuple2!2353 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (= (and d!26555 res!49698) b!98825))

(assert (= (and b!98825 res!49699) b!98826))

(assert (=> d!26555 m!107253))

(declare-fun m!108741 () Bool)

(assert (=> d!26555 m!108741))

(declare-fun m!108743 () Bool)

(assert (=> d!26555 m!108743))

(declare-fun m!108745 () Bool)

(assert (=> b!98825 m!108745))

(declare-fun m!108747 () Bool)

(assert (=> b!98826 m!108747))

(assert (=> d!26123 d!26555))

(declare-fun d!26557 () Bool)

(declare-fun e!64405 () Bool)

(assert (=> d!26557 e!64405))

(declare-fun res!49700 () Bool)

(assert (=> d!26557 (=> (not res!49700) (not e!64405))))

(declare-fun lt!49731 () List!1612)

(assert (=> d!26557 (= res!49700 (isStrictlySorted!299 lt!49731))))

(declare-fun e!64404 () List!1612)

(assert (=> d!26557 (= lt!49731 e!64404)))

(declare-fun c!16842 () Bool)

(assert (=> d!26557 (= c!16842 (and ((_ is Cons!1608) (toList!791 lt!48883)) (bvslt (_1!1186 (h!2202 (toList!791 lt!48883))) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26557 (isStrictlySorted!299 (toList!791 lt!48883))))

(assert (=> d!26557 (= (insertStrictlySorted!69 (toList!791 lt!48883) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49731)))

(declare-fun b!98827 () Bool)

(assert (=> b!98827 (= e!64405 (contains!808 lt!49731 (tuple2!2353 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98828 () Bool)

(declare-fun res!49701 () Bool)

(assert (=> b!98828 (=> (not res!49701) (not e!64405))))

(assert (=> b!98828 (= res!49701 (containsKey!153 lt!49731 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98829 () Bool)

(declare-fun e!64408 () List!1612)

(declare-fun call!10105 () List!1612)

(assert (=> b!98829 (= e!64408 call!10105)))

(declare-fun e!64406 () List!1612)

(declare-fun call!10104 () List!1612)

(declare-fun bm!10100 () Bool)

(assert (=> bm!10100 (= call!10104 ($colon$colon!77 e!64406 (ite c!16842 (h!2202 (toList!791 lt!48883)) (tuple2!2353 (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun c!16840 () Bool)

(assert (=> bm!10100 (= c!16840 c!16842)))

(declare-fun b!98830 () Bool)

(assert (=> b!98830 (= e!64406 (insertStrictlySorted!69 (t!5574 (toList!791 lt!48883)) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98831 () Bool)

(declare-fun c!16839 () Bool)

(declare-fun c!16841 () Bool)

(assert (=> b!98831 (= e!64406 (ite c!16839 (t!5574 (toList!791 lt!48883)) (ite c!16841 (Cons!1608 (h!2202 (toList!791 lt!48883)) (t!5574 (toList!791 lt!48883))) Nil!1609)))))

(declare-fun b!98832 () Bool)

(assert (=> b!98832 (= c!16841 (and ((_ is Cons!1608) (toList!791 lt!48883)) (bvsgt (_1!1186 (h!2202 (toList!791 lt!48883))) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun e!64407 () List!1612)

(assert (=> b!98832 (= e!64408 e!64407)))

(declare-fun bm!10101 () Bool)

(declare-fun call!10103 () List!1612)

(assert (=> bm!10101 (= call!10103 call!10105)))

(declare-fun b!98833 () Bool)

(assert (=> b!98833 (= e!64404 e!64408)))

(assert (=> b!98833 (= c!16839 (and ((_ is Cons!1608) (toList!791 lt!48883)) (= (_1!1186 (h!2202 (toList!791 lt!48883))) (_1!1186 (tuple2!2353 lt!48887 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98834 () Bool)

(assert (=> b!98834 (= e!64404 call!10104)))

(declare-fun b!98835 () Bool)

(assert (=> b!98835 (= e!64407 call!10103)))

(declare-fun bm!10102 () Bool)

(assert (=> bm!10102 (= call!10105 call!10104)))

(declare-fun b!98836 () Bool)

(assert (=> b!98836 (= e!64407 call!10103)))

(assert (= (and d!26557 c!16842) b!98834))

(assert (= (and d!26557 (not c!16842)) b!98833))

(assert (= (and b!98833 c!16839) b!98829))

(assert (= (and b!98833 (not c!16839)) b!98832))

(assert (= (and b!98832 c!16841) b!98835))

(assert (= (and b!98832 (not c!16841)) b!98836))

(assert (= (or b!98835 b!98836) bm!10101))

(assert (= (or b!98829 bm!10101) bm!10102))

(assert (= (or b!98834 bm!10102) bm!10100))

(assert (= (and bm!10100 c!16840) b!98830))

(assert (= (and bm!10100 (not c!16840)) b!98831))

(assert (= (and d!26557 res!49700) b!98828))

(assert (= (and b!98828 res!49701) b!98827))

(declare-fun m!108749 () Bool)

(assert (=> bm!10100 m!108749))

(declare-fun m!108751 () Bool)

(assert (=> b!98827 m!108751))

(declare-fun m!108753 () Bool)

(assert (=> d!26557 m!108753))

(declare-fun m!108755 () Bool)

(assert (=> d!26557 m!108755))

(declare-fun m!108757 () Bool)

(assert (=> b!98828 m!108757))

(declare-fun m!108759 () Bool)

(assert (=> b!98830 m!108759))

(assert (=> d!26123 d!26557))

(declare-fun d!26559 () Bool)

(declare-fun res!49702 () Bool)

(declare-fun e!64409 () Bool)

(assert (=> d!26559 (=> res!49702 e!64409)))

(assert (=> d!26559 (= res!49702 (and ((_ is Cons!1608) (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))) (= (_1!1186 (h!2202 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))) lt!48874)))))

(assert (=> d!26559 (= (containsKey!153 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48874) e!64409)))

(declare-fun b!98837 () Bool)

(declare-fun e!64410 () Bool)

(assert (=> b!98837 (= e!64409 e!64410)))

(declare-fun res!49703 () Bool)

(assert (=> b!98837 (=> (not res!49703) (not e!64410))))

(assert (=> b!98837 (= res!49703 (and (or (not ((_ is Cons!1608) (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))) (bvsle (_1!1186 (h!2202 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))) lt!48874)) ((_ is Cons!1608) (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))) (bvslt (_1!1186 (h!2202 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))) lt!48874)))))

(declare-fun b!98838 () Bool)

(assert (=> b!98838 (= e!64410 (containsKey!153 (t!5574 (toList!791 (+!138 lt!48881 (tuple2!2353 lt!48877 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))) lt!48874))))

(assert (= (and d!26559 (not res!49702)) b!98837))

(assert (= (and b!98837 res!49703) b!98838))

(declare-fun m!108761 () Bool)

(assert (=> b!98838 m!108761))

(assert (=> d!26121 d!26559))

(assert (=> b!98001 d!26509))

(declare-fun d!26561 () Bool)

(declare-fun e!64411 () Bool)

(assert (=> d!26561 e!64411))

(declare-fun res!49705 () Bool)

(assert (=> d!26561 (=> (not res!49705) (not e!64411))))

(declare-fun lt!49732 () ListLongMap!1551)

(assert (=> d!26561 (= res!49705 (contains!805 lt!49732 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!49734 () List!1612)

(assert (=> d!26561 (= lt!49732 (ListLongMap!1552 lt!49734))))

(declare-fun lt!49735 () Unit!2965)

(declare-fun lt!49733 () Unit!2965)

(assert (=> d!26561 (= lt!49735 lt!49733)))

(assert (=> d!26561 (= (getValueByKey!149 lt!49734 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26561 (= lt!49733 (lemmaContainsTupThenGetReturnValue!67 lt!49734 (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26561 (= lt!49734 (insertStrictlySorted!69 (toList!791 (map!1255 newMap!16)) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26561 (= (+!138 (map!1255 newMap!16) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!49732)))

(declare-fun b!98839 () Bool)

(declare-fun res!49704 () Bool)

(assert (=> b!98839 (=> (not res!49704) (not e!64411))))

(assert (=> b!98839 (= res!49704 (= (getValueByKey!149 (toList!791 lt!49732) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98840 () Bool)

(assert (=> b!98840 (= e!64411 (contains!808 (toList!791 lt!49732) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26561 res!49705) b!98839))

(assert (= (and b!98839 res!49704) b!98840))

(declare-fun m!108763 () Bool)

(assert (=> d!26561 m!108763))

(declare-fun m!108765 () Bool)

(assert (=> d!26561 m!108765))

(declare-fun m!108767 () Bool)

(assert (=> d!26561 m!108767))

(declare-fun m!108769 () Bool)

(assert (=> d!26561 m!108769))

(declare-fun m!108771 () Bool)

(assert (=> b!98839 m!108771))

(declare-fun m!108773 () Bool)

(assert (=> b!98840 m!108773))

(assert (=> b!98001 d!26561))

(assert (=> b!98001 d!25999))

(declare-fun d!26563 () Bool)

(declare-fun e!64413 () Bool)

(assert (=> d!26563 e!64413))

(declare-fun res!49706 () Bool)

(assert (=> d!26563 (=> res!49706 e!64413)))

(declare-fun lt!49738 () Bool)

(assert (=> d!26563 (= res!49706 (not lt!49738))))

(declare-fun lt!49739 () Bool)

(assert (=> d!26563 (= lt!49738 lt!49739)))

(declare-fun lt!49736 () Unit!2965)

(declare-fun e!64412 () Unit!2965)

(assert (=> d!26563 (= lt!49736 e!64412)))

(declare-fun c!16843 () Bool)

(assert (=> d!26563 (= c!16843 lt!49739)))

(assert (=> d!26563 (= lt!49739 (containsKey!153 (toList!791 lt!49017) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26563 (= (contains!805 lt!49017 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49738)))

(declare-fun b!98841 () Bool)

(declare-fun lt!49737 () Unit!2965)

(assert (=> b!98841 (= e!64412 lt!49737)))

(assert (=> b!98841 (= lt!49737 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49017) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!98841 (isDefined!103 (getValueByKey!149 (toList!791 lt!49017) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98842 () Bool)

(declare-fun Unit!3020 () Unit!2965)

(assert (=> b!98842 (= e!64412 Unit!3020)))

(declare-fun b!98843 () Bool)

(assert (=> b!98843 (= e!64413 (isDefined!103 (getValueByKey!149 (toList!791 lt!49017) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!26563 c!16843) b!98841))

(assert (= (and d!26563 (not c!16843)) b!98842))

(assert (= (and d!26563 (not res!49706)) b!98843))

(declare-fun m!108775 () Bool)

(assert (=> d!26563 m!108775))

(declare-fun m!108777 () Bool)

(assert (=> b!98841 m!108777))

(assert (=> b!98841 m!106883))

(assert (=> b!98841 m!106883))

(declare-fun m!108779 () Bool)

(assert (=> b!98841 m!108779))

(assert (=> b!98843 m!106883))

(assert (=> b!98843 m!106883))

(assert (=> b!98843 m!108779))

(assert (=> d!26043 d!26563))

(declare-fun b!98845 () Bool)

(declare-fun e!64414 () Option!155)

(declare-fun e!64415 () Option!155)

(assert (=> b!98845 (= e!64414 e!64415)))

(declare-fun c!16845 () Bool)

(assert (=> b!98845 (= c!16845 (and ((_ is Cons!1608) lt!49019) (not (= (_1!1186 (h!2202 lt!49019)) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!98847 () Bool)

(assert (=> b!98847 (= e!64415 None!153)))

(declare-fun d!26565 () Bool)

(declare-fun c!16844 () Bool)

(assert (=> d!26565 (= c!16844 (and ((_ is Cons!1608) lt!49019) (= (_1!1186 (h!2202 lt!49019)) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26565 (= (getValueByKey!149 lt!49019 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!64414)))

(declare-fun b!98846 () Bool)

(assert (=> b!98846 (= e!64415 (getValueByKey!149 (t!5574 lt!49019) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98844 () Bool)

(assert (=> b!98844 (= e!64414 (Some!154 (_2!1186 (h!2202 lt!49019))))))

(assert (= (and d!26565 c!16844) b!98844))

(assert (= (and d!26565 (not c!16844)) b!98845))

(assert (= (and b!98845 c!16845) b!98846))

(assert (= (and b!98845 (not c!16845)) b!98847))

(declare-fun m!108781 () Bool)

(assert (=> b!98846 m!108781))

(assert (=> d!26043 d!26565))

(declare-fun d!26567 () Bool)

(assert (=> d!26567 (= (getValueByKey!149 lt!49019 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!154 (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!49740 () Unit!2965)

(assert (=> d!26567 (= lt!49740 (choose!605 lt!49019 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!64416 () Bool)

(assert (=> d!26567 e!64416))

(declare-fun res!49707 () Bool)

(assert (=> d!26567 (=> (not res!49707) (not e!64416))))

(assert (=> d!26567 (= res!49707 (isStrictlySorted!299 lt!49019))))

(assert (=> d!26567 (= (lemmaContainsTupThenGetReturnValue!67 lt!49019 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49740)))

(declare-fun b!98848 () Bool)

(declare-fun res!49708 () Bool)

(assert (=> b!98848 (=> (not res!49708) (not e!64416))))

(assert (=> b!98848 (= res!49708 (containsKey!153 lt!49019 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98849 () Bool)

(assert (=> b!98849 (= e!64416 (contains!808 lt!49019 (tuple2!2353 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!26567 res!49707) b!98848))

(assert (= (and b!98848 res!49708) b!98849))

(assert (=> d!26567 m!106877))

(declare-fun m!108783 () Bool)

(assert (=> d!26567 m!108783))

(declare-fun m!108785 () Bool)

(assert (=> d!26567 m!108785))

(declare-fun m!108787 () Bool)

(assert (=> b!98848 m!108787))

(declare-fun m!108789 () Bool)

(assert (=> b!98849 m!108789))

(assert (=> d!26043 d!26567))

(declare-fun d!26569 () Bool)

(declare-fun e!64418 () Bool)

(assert (=> d!26569 e!64418))

(declare-fun res!49709 () Bool)

(assert (=> d!26569 (=> (not res!49709) (not e!64418))))

(declare-fun lt!49741 () List!1612)

(assert (=> d!26569 (= res!49709 (isStrictlySorted!299 lt!49741))))

(declare-fun e!64417 () List!1612)

(assert (=> d!26569 (= lt!49741 e!64417)))

(declare-fun c!16849 () Bool)

(assert (=> d!26569 (= c!16849 (and ((_ is Cons!1608) (toList!791 e!63753)) (bvslt (_1!1186 (h!2202 (toList!791 e!63753))) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!26569 (isStrictlySorted!299 (toList!791 e!63753))))

(assert (=> d!26569 (= (insertStrictlySorted!69 (toList!791 e!63753) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!49741)))

(declare-fun b!98850 () Bool)

(assert (=> b!98850 (= e!64418 (contains!808 lt!49741 (tuple2!2353 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!98851 () Bool)

(declare-fun res!49710 () Bool)

(assert (=> b!98851 (=> (not res!49710) (not e!64418))))

(assert (=> b!98851 (= res!49710 (containsKey!153 lt!49741 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!98852 () Bool)

(declare-fun e!64421 () List!1612)

(declare-fun call!10108 () List!1612)

(assert (=> b!98852 (= e!64421 call!10108)))

(declare-fun bm!10103 () Bool)

(declare-fun e!64419 () List!1612)

(declare-fun call!10107 () List!1612)

(assert (=> bm!10103 (= call!10107 ($colon$colon!77 e!64419 (ite c!16849 (h!2202 (toList!791 e!63753)) (tuple2!2353 (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!16847 () Bool)

(assert (=> bm!10103 (= c!16847 c!16849)))

(declare-fun b!98853 () Bool)

(assert (=> b!98853 (= e!64419 (insertStrictlySorted!69 (t!5574 (toList!791 e!63753)) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun c!16848 () Bool)

(declare-fun c!16846 () Bool)

(declare-fun b!98854 () Bool)

(assert (=> b!98854 (= e!64419 (ite c!16846 (t!5574 (toList!791 e!63753)) (ite c!16848 (Cons!1608 (h!2202 (toList!791 e!63753)) (t!5574 (toList!791 e!63753))) Nil!1609)))))

(declare-fun b!98855 () Bool)

(assert (=> b!98855 (= c!16848 (and ((_ is Cons!1608) (toList!791 e!63753)) (bvsgt (_1!1186 (h!2202 (toList!791 e!63753))) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!64420 () List!1612)

(assert (=> b!98855 (= e!64421 e!64420)))

(declare-fun bm!10104 () Bool)

(declare-fun call!10106 () List!1612)

(assert (=> bm!10104 (= call!10106 call!10108)))

(declare-fun b!98856 () Bool)

(assert (=> b!98856 (= e!64417 e!64421)))

(assert (=> b!98856 (= c!16846 (and ((_ is Cons!1608) (toList!791 e!63753)) (= (_1!1186 (h!2202 (toList!791 e!63753))) (_1!1186 (ite c!16562 (ite c!16560 (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!98857 () Bool)

(assert (=> b!98857 (= e!64417 call!10107)))

(declare-fun b!98858 () Bool)

(assert (=> b!98858 (= e!64420 call!10106)))

(declare-fun bm!10105 () Bool)

(assert (=> bm!10105 (= call!10108 call!10107)))

(declare-fun b!98859 () Bool)

(assert (=> b!98859 (= e!64420 call!10106)))

(assert (= (and d!26569 c!16849) b!98857))

(assert (= (and d!26569 (not c!16849)) b!98856))

(assert (= (and b!98856 c!16846) b!98852))

(assert (= (and b!98856 (not c!16846)) b!98855))

(assert (= (and b!98855 c!16848) b!98858))

(assert (= (and b!98855 (not c!16848)) b!98859))

(assert (= (or b!98858 b!98859) bm!10104))

(assert (= (or b!98852 bm!10104) bm!10105))

(assert (= (or b!98857 bm!10105) bm!10103))

(assert (= (and bm!10103 c!16847) b!98853))

(assert (= (and bm!10103 (not c!16847)) b!98854))

(assert (= (and d!26569 res!49709) b!98851))

(assert (= (and b!98851 res!49710) b!98850))

(declare-fun m!108791 () Bool)

(assert (=> bm!10103 m!108791))

(declare-fun m!108793 () Bool)

(assert (=> b!98850 m!108793))

(declare-fun m!108795 () Bool)

(assert (=> d!26569 m!108795))

(declare-fun m!108797 () Bool)

(assert (=> d!26569 m!108797))

(declare-fun m!108799 () Bool)

(assert (=> b!98851 m!108799))

(declare-fun m!108801 () Bool)

(assert (=> b!98853 m!108801))

(assert (=> d!26043 d!26569))

(declare-fun d!26571 () Bool)

(assert (=> d!26571 (= (get!1300 (getValueByKey!149 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2805 (getValueByKey!149 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26075 d!26571))

(assert (=> d!26075 d!26411))

(assert (=> bm!9972 d!26279))

(declare-fun bm!10106 () Bool)

(declare-fun call!10109 () Bool)

(assert (=> bm!10106 (= call!10109 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4171 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992)))))))

(declare-fun b!98860 () Bool)

(declare-fun e!64424 () Bool)

(declare-fun e!64423 () Bool)

(assert (=> b!98860 (= e!64424 e!64423)))

(declare-fun c!16850 () Bool)

(assert (=> b!98860 (= c!16850 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!98861 () Bool)

(assert (=> b!98861 (= e!64423 call!10109)))

(declare-fun b!98862 () Bool)

(declare-fun e!64422 () Bool)

(assert (=> b!98862 (= e!64423 e!64422)))

(declare-fun lt!49742 () (_ BitVec 64))

(assert (=> b!98862 (= lt!49742 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!49743 () Unit!2965)

(assert (=> b!98862 (= lt!49743 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) lt!49742 #b00000000000000000000000000000000))))

(assert (=> b!98862 (arrayContainsKey!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) lt!49742 #b00000000000000000000000000000000)))

(declare-fun lt!49744 () Unit!2965)

(assert (=> b!98862 (= lt!49744 lt!49743)))

(declare-fun res!49712 () Bool)

(assert (=> b!98862 (= res!49712 (= (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b00000000000000000000000000000000) (_keys!4171 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992)))) (Found!263 #b00000000000000000000000000000000)))))

(assert (=> b!98862 (=> (not res!49712) (not e!64422))))

(declare-fun d!26573 () Bool)

(declare-fun res!49711 () Bool)

(assert (=> d!26573 (=> res!49711 e!64424)))

(assert (=> d!26573 (= res!49711 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> d!26573 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (mask!6578 (v!2801 (underlying!339 thiss!992)))) e!64424)))

(declare-fun b!98863 () Bool)

(assert (=> b!98863 (= e!64422 call!10109)))

(assert (= (and d!26573 (not res!49711)) b!98860))

(assert (= (and b!98860 c!16850) b!98862))

(assert (= (and b!98860 (not c!16850)) b!98861))

(assert (= (and b!98862 res!49712) b!98863))

(assert (= (or b!98863 b!98861) bm!10106))

(declare-fun m!108803 () Bool)

(assert (=> bm!10106 m!108803))

(assert (=> b!98860 m!108325))

(assert (=> b!98860 m!108325))

(assert (=> b!98860 m!108327))

(assert (=> b!98862 m!108325))

(declare-fun m!108805 () Bool)

(assert (=> b!98862 m!108805))

(declare-fun m!108807 () Bool)

(assert (=> b!98862 m!108807))

(assert (=> b!98862 m!108325))

(declare-fun m!108809 () Bool)

(assert (=> b!98862 m!108809))

(assert (=> b!98121 d!26573))

(declare-fun d!26575 () Bool)

(declare-fun e!64426 () Bool)

(assert (=> d!26575 e!64426))

(declare-fun res!49713 () Bool)

(assert (=> d!26575 (=> res!49713 e!64426)))

(declare-fun lt!49747 () Bool)

(assert (=> d!26575 (= res!49713 (not lt!49747))))

(declare-fun lt!49748 () Bool)

(assert (=> d!26575 (= lt!49747 lt!49748)))

(declare-fun lt!49745 () Unit!2965)

(declare-fun e!64425 () Unit!2965)

(assert (=> d!26575 (= lt!49745 e!64425)))

(declare-fun c!16851 () Bool)

(assert (=> d!26575 (= c!16851 lt!49748)))

(assert (=> d!26575 (= lt!49748 (containsKey!153 (toList!791 lt!49205) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26575 (= (contains!805 lt!49205 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!49747)))

(declare-fun b!98864 () Bool)

(declare-fun lt!49746 () Unit!2965)

(assert (=> b!98864 (= e!64425 lt!49746)))

(assert (=> b!98864 (= lt!49746 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49205) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!98864 (isDefined!103 (getValueByKey!149 (toList!791 lt!49205) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!98865 () Bool)

(declare-fun Unit!3021 () Unit!2965)

(assert (=> b!98865 (= e!64425 Unit!3021)))

(declare-fun b!98866 () Bool)

(assert (=> b!98866 (= e!64426 (isDefined!103 (getValueByKey!149 (toList!791 lt!49205) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26575 c!16851) b!98864))

(assert (= (and d!26575 (not c!16851)) b!98865))

(assert (= (and d!26575 (not res!49713)) b!98866))

(assert (=> d!26575 m!106689))

(declare-fun m!108811 () Bool)

(assert (=> d!26575 m!108811))

(assert (=> b!98864 m!106689))

(declare-fun m!108813 () Bool)

(assert (=> b!98864 m!108813))

(assert (=> b!98864 m!106689))

(assert (=> b!98864 m!108311))

(assert (=> b!98864 m!108311))

(declare-fun m!108815 () Bool)

(assert (=> b!98864 m!108815))

(assert (=> b!98866 m!106689))

(assert (=> b!98866 m!108311))

(assert (=> b!98866 m!108311))

(assert (=> b!98866 m!108815))

(assert (=> b!98061 d!26575))

(declare-fun d!26577 () Bool)

(assert (=> d!26577 (= (isEmpty!361 (getValueByKey!149 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))) (not ((_ is Some!154) (getValueByKey!149 (toList!791 lt!48799) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))))

(assert (=> d!26031 d!26577))

(declare-fun d!26579 () Bool)

(assert (=> d!26579 (contains!805 (getCurrentListMap!472 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))

(declare-fun lt!49751 () Unit!2965)

(declare-fun choose!608 (array!4240 array!4242 (_ BitVec 32) (_ BitVec 32) V!3155 V!3155 (_ BitVec 64) (_ BitVec 32) Int) Unit!2965)

(assert (=> d!26579 (= lt!49751 (choose!608 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)))))

(assert (=> d!26579 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26579 (= (lemmaArrayContainsKeyThenInListMap!25 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2481 newMap!16)) lt!49751)))

(declare-fun bs!4088 () Bool)

(assert (= bs!4088 d!26579))

(assert (=> bs!4088 m!106687))

(assert (=> bs!4088 m!106687))

(assert (=> bs!4088 m!106609))

(assert (=> bs!4088 m!107079))

(assert (=> bs!4088 m!106609))

(declare-fun m!108817 () Bool)

(assert (=> bs!4088 m!108817))

(assert (=> bs!4088 m!106929))

(assert (=> b!97997 d!26579))

(assert (=> b!97997 d!26223))

(assert (=> b!97997 d!26065))

(assert (=> b!98166 d!26165))

(declare-fun d!26581 () Bool)

(declare-fun res!49714 () Bool)

(declare-fun e!64427 () Bool)

(assert (=> d!26581 (=> res!49714 e!64427)))

(assert (=> d!26581 (= res!49714 (and ((_ is Cons!1608) (toList!791 lt!48891)) (= (_1!1186 (h!2202 (toList!791 lt!48891))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26581 (= (containsKey!153 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!64427)))

(declare-fun b!98867 () Bool)

(declare-fun e!64428 () Bool)

(assert (=> b!98867 (= e!64427 e!64428)))

(declare-fun res!49715 () Bool)

(assert (=> b!98867 (=> (not res!49715) (not e!64428))))

(assert (=> b!98867 (= res!49715 (and (or (not ((_ is Cons!1608) (toList!791 lt!48891))) (bvsle (_1!1186 (h!2202 (toList!791 lt!48891))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1608) (toList!791 lt!48891)) (bvslt (_1!1186 (h!2202 (toList!791 lt!48891))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!98868 () Bool)

(assert (=> b!98868 (= e!64428 (containsKey!153 (t!5574 (toList!791 lt!48891)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26581 (not res!49714)) b!98867))

(assert (= (and b!98867 res!49715) b!98868))

(assert (=> b!98868 m!106689))

(declare-fun m!108819 () Bool)

(assert (=> b!98868 m!108819))

(assert (=> d!26131 d!26581))

(declare-fun b!98870 () Bool)

(declare-fun e!64429 () Option!155)

(declare-fun e!64430 () Option!155)

(assert (=> b!98870 (= e!64429 e!64430)))

(declare-fun c!16853 () Bool)

(assert (=> b!98870 (= c!16853 (and ((_ is Cons!1608) (toList!791 lt!49227)) (not (= (_1!1186 (h!2202 (toList!791 lt!49227))) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98872 () Bool)

(assert (=> b!98872 (= e!64430 None!153)))

(declare-fun d!26583 () Bool)

(declare-fun c!16852 () Bool)

(assert (=> d!26583 (= c!16852 (and ((_ is Cons!1608) (toList!791 lt!49227)) (= (_1!1186 (h!2202 (toList!791 lt!49227))) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26583 (= (getValueByKey!149 (toList!791 lt!49227) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) e!64429)))

(declare-fun b!98871 () Bool)

(assert (=> b!98871 (= e!64430 (getValueByKey!149 (t!5574 (toList!791 lt!49227)) (_1!1186 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98869 () Bool)

(assert (=> b!98869 (= e!64429 (Some!154 (_2!1186 (h!2202 (toList!791 lt!49227)))))))

(assert (= (and d!26583 c!16852) b!98869))

(assert (= (and d!26583 (not c!16852)) b!98870))

(assert (= (and b!98870 c!16853) b!98871))

(assert (= (and b!98870 (not c!16853)) b!98872))

(declare-fun m!108821 () Bool)

(assert (=> b!98871 m!108821))

(assert (=> b!98086 d!26583))

(declare-fun b!98874 () Bool)

(declare-fun e!64431 () Option!155)

(declare-fun e!64432 () Option!155)

(assert (=> b!98874 (= e!64431 e!64432)))

(declare-fun c!16855 () Bool)

(assert (=> b!98874 (= c!16855 (and ((_ is Cons!1608) (toList!791 lt!49218)) (not (= (_1!1186 (h!2202 (toList!791 lt!49218))) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98876 () Bool)

(assert (=> b!98876 (= e!64432 None!153)))

(declare-fun c!16854 () Bool)

(declare-fun d!26585 () Bool)

(assert (=> d!26585 (= c!16854 (and ((_ is Cons!1608) (toList!791 lt!49218)) (= (_1!1186 (h!2202 (toList!791 lt!49218))) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26585 (= (getValueByKey!149 (toList!791 lt!49218) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) e!64431)))

(declare-fun b!98875 () Bool)

(assert (=> b!98875 (= e!64432 (getValueByKey!149 (t!5574 (toList!791 lt!49218)) (_1!1186 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98873 () Bool)

(assert (=> b!98873 (= e!64431 (Some!154 (_2!1186 (h!2202 (toList!791 lt!49218)))))))

(assert (= (and d!26585 c!16854) b!98873))

(assert (= (and d!26585 (not c!16854)) b!98874))

(assert (= (and b!98874 c!16855) b!98875))

(assert (= (and b!98874 (not c!16855)) b!98876))

(declare-fun m!108823 () Bool)

(assert (=> b!98875 m!108823))

(assert (=> b!98081 d!26585))

(declare-fun b!98878 () Bool)

(declare-fun e!64433 () Option!155)

(declare-fun e!64434 () Option!155)

(assert (=> b!98878 (= e!64433 e!64434)))

(declare-fun c!16857 () Bool)

(assert (=> b!98878 (= c!16857 (and ((_ is Cons!1608) (toList!791 lt!49282)) (not (= (_1!1186 (h!2202 (toList!791 lt!49282))) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))))

(declare-fun b!98880 () Bool)

(assert (=> b!98880 (= e!64434 None!153)))

(declare-fun d!26587 () Bool)

(declare-fun c!16856 () Bool)

(assert (=> d!26587 (= c!16856 (and ((_ is Cons!1608) (toList!791 lt!49282)) (= (_1!1186 (h!2202 (toList!791 lt!49282))) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(assert (=> d!26587 (= (getValueByKey!149 (toList!791 lt!49282) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) e!64433)))

(declare-fun b!98879 () Bool)

(assert (=> b!98879 (= e!64434 (getValueByKey!149 (t!5574 (toList!791 lt!49282)) (_1!1186 (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98877 () Bool)

(assert (=> b!98877 (= e!64433 (Some!154 (_2!1186 (h!2202 (toList!791 lt!49282)))))))

(assert (= (and d!26587 c!16856) b!98877))

(assert (= (and d!26587 (not c!16856)) b!98878))

(assert (= (and b!98878 c!16857) b!98879))

(assert (= (and b!98878 (not c!16857)) b!98880))

(declare-fun m!108825 () Bool)

(assert (=> b!98879 m!108825))

(assert (=> b!98150 d!26587))

(declare-fun d!26589 () Bool)

(assert (=> d!26589 (= (apply!92 lt!49073 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1300 (getValueByKey!149 (toList!791 lt!49073) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4089 () Bool)

(assert (= bs!4089 d!26589))

(assert (=> bs!4089 m!108459))

(assert (=> bs!4089 m!108459))

(declare-fun m!108827 () Bool)

(assert (=> bs!4089 m!108827))

(assert (=> b!97905 d!26589))

(assert (=> d!26103 d!26115))

(assert (=> d!26103 d!26101))

(declare-fun d!26591 () Bool)

(declare-fun e!64436 () Bool)

(assert (=> d!26591 e!64436))

(declare-fun res!49716 () Bool)

(assert (=> d!26591 (=> res!49716 e!64436)))

(declare-fun lt!49754 () Bool)

(assert (=> d!26591 (= res!49716 (not lt!49754))))

(declare-fun lt!49755 () Bool)

(assert (=> d!26591 (= lt!49754 lt!49755)))

(declare-fun lt!49752 () Unit!2965)

(declare-fun e!64435 () Unit!2965)

(assert (=> d!26591 (= lt!49752 e!64435)))

(declare-fun c!16858 () Bool)

(assert (=> d!26591 (= c!16858 lt!49755)))

(assert (=> d!26591 (= lt!49755 (containsKey!153 (toList!791 lt!48889) lt!48873))))

(assert (=> d!26591 (= (contains!805 lt!48889 lt!48873) lt!49754)))

(declare-fun b!98881 () Bool)

(declare-fun lt!49753 () Unit!2965)

(assert (=> b!98881 (= e!64435 lt!49753)))

(assert (=> b!98881 (= lt!49753 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48889) lt!48873))))

(assert (=> b!98881 (isDefined!103 (getValueByKey!149 (toList!791 lt!48889) lt!48873))))

(declare-fun b!98882 () Bool)

(declare-fun Unit!3022 () Unit!2965)

(assert (=> b!98882 (= e!64435 Unit!3022)))

(declare-fun b!98883 () Bool)

(assert (=> b!98883 (= e!64436 (isDefined!103 (getValueByKey!149 (toList!791 lt!48889) lt!48873)))))

(assert (= (and d!26591 c!16858) b!98881))

(assert (= (and d!26591 (not c!16858)) b!98882))

(assert (= (and d!26591 (not res!49716)) b!98883))

(declare-fun m!108829 () Bool)

(assert (=> d!26591 m!108829))

(declare-fun m!108831 () Bool)

(assert (=> b!98881 m!108831))

(assert (=> b!98881 m!107215))

(assert (=> b!98881 m!107215))

(declare-fun m!108833 () Bool)

(assert (=> b!98881 m!108833))

(assert (=> b!98883 m!107215))

(assert (=> b!98883 m!107215))

(assert (=> b!98883 m!108833))

(assert (=> d!26103 d!26591))

(declare-fun d!26593 () Bool)

(assert (=> d!26593 (= (apply!92 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!48873) (apply!92 lt!48889 lt!48873))))

(assert (=> d!26593 true))

(declare-fun _$34!868 () Unit!2965)

(assert (=> d!26593 (= (choose!601 lt!48889 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))) lt!48873) _$34!868)))

(declare-fun bs!4090 () Bool)

(assert (= bs!4090 d!26593))

(assert (=> bs!4090 m!106699))

(assert (=> bs!4090 m!106699))

(assert (=> bs!4090 m!106701))

(assert (=> bs!4090 m!106717))

(assert (=> d!26103 d!26593))

(assert (=> d!26103 d!26111))

(declare-fun d!26595 () Bool)

(declare-fun lt!49756 () Bool)

(assert (=> d!26595 (= lt!49756 (select (content!100 Nil!1608) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!64437 () Bool)

(assert (=> d!26595 (= lt!49756 e!64437)))

(declare-fun res!49717 () Bool)

(assert (=> d!26595 (=> (not res!49717) (not e!64437))))

(assert (=> d!26595 (= res!49717 ((_ is Cons!1607) Nil!1608))))

(assert (=> d!26595 (= (contains!807 Nil!1608 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) lt!49756)))

(declare-fun b!98884 () Bool)

(declare-fun e!64438 () Bool)

(assert (=> b!98884 (= e!64437 e!64438)))

(declare-fun res!49718 () Bool)

(assert (=> b!98884 (=> res!49718 e!64438)))

(assert (=> b!98884 (= res!49718 (= (h!2201 Nil!1608) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98885 () Bool)

(assert (=> b!98885 (= e!64438 (contains!807 (t!5573 Nil!1608) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!26595 res!49717) b!98884))

(assert (= (and b!98884 (not res!49718)) b!98885))

(assert (=> d!26595 m!106845))

(assert (=> d!26595 m!106867))

(declare-fun m!108835 () Bool)

(assert (=> d!26595 m!108835))

(assert (=> b!98885 m!106867))

(declare-fun m!108837 () Bool)

(assert (=> b!98885 m!108837))

(assert (=> b!97931 d!26595))

(declare-fun d!26597 () Bool)

(declare-fun e!64440 () Bool)

(assert (=> d!26597 e!64440))

(declare-fun res!49719 () Bool)

(assert (=> d!26597 (=> res!49719 e!64440)))

(declare-fun lt!49759 () Bool)

(assert (=> d!26597 (= res!49719 (not lt!49759))))

(declare-fun lt!49760 () Bool)

(assert (=> d!26597 (= lt!49759 lt!49760)))

(declare-fun lt!49757 () Unit!2965)

(declare-fun e!64439 () Unit!2965)

(assert (=> d!26597 (= lt!49757 e!64439)))

(declare-fun c!16859 () Bool)

(assert (=> d!26597 (= c!16859 lt!49760)))

(assert (=> d!26597 (= lt!49760 (containsKey!153 (toList!791 lt!49280) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26597 (= (contains!805 lt!49280 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49759)))

(declare-fun b!98886 () Bool)

(declare-fun lt!49758 () Unit!2965)

(assert (=> b!98886 (= e!64439 lt!49758)))

(assert (=> b!98886 (= lt!49758 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49280) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98886 (isDefined!103 (getValueByKey!149 (toList!791 lt!49280) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98887 () Bool)

(declare-fun Unit!3023 () Unit!2965)

(assert (=> b!98887 (= e!64439 Unit!3023)))

(declare-fun b!98888 () Bool)

(assert (=> b!98888 (= e!64440 (isDefined!103 (getValueByKey!149 (toList!791 lt!49280) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26597 c!16859) b!98886))

(assert (= (and d!26597 (not c!16859)) b!98887))

(assert (= (and d!26597 (not res!49719)) b!98888))

(declare-fun m!108839 () Bool)

(assert (=> d!26597 m!108839))

(declare-fun m!108841 () Bool)

(assert (=> b!98886 m!108841))

(declare-fun m!108843 () Bool)

(assert (=> b!98886 m!108843))

(assert (=> b!98886 m!108843))

(declare-fun m!108845 () Bool)

(assert (=> b!98886 m!108845))

(assert (=> b!98888 m!108843))

(assert (=> b!98888 m!108843))

(assert (=> b!98888 m!108845))

(assert (=> bm!10009 d!26597))

(assert (=> bm!9979 d!26359))

(assert (=> b!97929 d!26165))

(declare-fun b!98907 () Bool)

(declare-fun lt!49766 () SeekEntryResult!263)

(assert (=> b!98907 (and (bvsge (index!3197 lt!49766) #b00000000000000000000000000000000) (bvslt (index!3197 lt!49766) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun res!49727 () Bool)

(assert (=> b!98907 (= res!49727 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3197 lt!49766)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64454 () Bool)

(assert (=> b!98907 (=> res!49727 e!64454)))

(declare-fun b!98908 () Bool)

(declare-fun e!64453 () Bool)

(assert (=> b!98908 (= e!64453 (bvsge (x!12969 lt!49766) #b01111111111111111111111111111110))))

(declare-fun b!98909 () Bool)

(assert (=> b!98909 (and (bvsge (index!3197 lt!49766) #b00000000000000000000000000000000) (bvslt (index!3197 lt!49766) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun res!49728 () Bool)

(assert (=> b!98909 (= res!49728 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3197 lt!49766)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> b!98909 (=> res!49728 e!64454)))

(declare-fun e!64451 () Bool)

(assert (=> b!98909 (= e!64451 e!64454)))

(declare-fun b!98910 () Bool)

(assert (=> b!98910 (and (bvsge (index!3197 lt!49766) #b00000000000000000000000000000000) (bvslt (index!3197 lt!49766) (size!2264 (_keys!4171 newMap!16))))))

(assert (=> b!98910 (= e!64454 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3197 lt!49766)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64452 () SeekEntryResult!263)

(declare-fun b!98911 () Bool)

(assert (=> b!98911 (= e!64452 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (mask!6578 newMap!16)) #b00000000000000000000000000000000 (mask!6578 newMap!16)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(declare-fun b!98912 () Bool)

(assert (=> b!98912 (= e!64452 (Intermediate!263 false (toIndex!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (mask!6578 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!98913 () Bool)

(assert (=> b!98913 (= e!64453 e!64451)))

(declare-fun res!49726 () Bool)

(assert (=> b!98913 (= res!49726 (and ((_ is Intermediate!263) lt!49766) (not (undefined!1075 lt!49766)) (bvslt (x!12969 lt!49766) #b01111111111111111111111111111110) (bvsge (x!12969 lt!49766) #b00000000000000000000000000000000) (bvsge (x!12969 lt!49766) #b00000000000000000000000000000000)))))

(assert (=> b!98913 (=> (not res!49726) (not e!64451))))

(declare-fun d!26599 () Bool)

(assert (=> d!26599 e!64453))

(declare-fun c!16866 () Bool)

(assert (=> d!26599 (= c!16866 (and ((_ is Intermediate!263) lt!49766) (undefined!1075 lt!49766)))))

(declare-fun e!64455 () SeekEntryResult!263)

(assert (=> d!26599 (= lt!49766 e!64455)))

(declare-fun c!16867 () Bool)

(assert (=> d!26599 (= c!16867 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!49765 () (_ BitVec 64))

(assert (=> d!26599 (= lt!49765 (select (arr!2014 (_keys!4171 newMap!16)) (toIndex!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (mask!6578 newMap!16))))))

(assert (=> d!26599 (validMask!0 (mask!6578 newMap!16))))

(assert (=> d!26599 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (mask!6578 newMap!16)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)) lt!49766)))

(declare-fun b!98914 () Bool)

(assert (=> b!98914 (= e!64455 (Intermediate!263 true (toIndex!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (mask!6578 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!98915 () Bool)

(assert (=> b!98915 (= e!64455 e!64452)))

(declare-fun c!16868 () Bool)

(assert (=> b!98915 (= c!16868 (or (= lt!49765 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) (= (bvadd lt!49765 lt!49765) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26599 c!16867) b!98914))

(assert (= (and d!26599 (not c!16867)) b!98915))

(assert (= (and b!98915 c!16868) b!98912))

(assert (= (and b!98915 (not c!16868)) b!98911))

(assert (= (and d!26599 c!16866) b!98908))

(assert (= (and d!26599 (not c!16866)) b!98913))

(assert (= (and b!98913 res!49726) b!98909))

(assert (= (and b!98909 (not res!49728)) b!98907))

(assert (= (and b!98907 (not res!49727)) b!98910))

(declare-fun m!108847 () Bool)

(assert (=> b!98910 m!108847))

(assert (=> d!26599 m!107127))

(declare-fun m!108849 () Bool)

(assert (=> d!26599 m!108849))

(assert (=> d!26599 m!106929))

(assert (=> b!98909 m!108847))

(assert (=> b!98911 m!107127))

(declare-fun m!108851 () Bool)

(assert (=> b!98911 m!108851))

(assert (=> b!98911 m!108851))

(assert (=> b!98911 m!106609))

(declare-fun m!108853 () Bool)

(assert (=> b!98911 m!108853))

(assert (=> b!98907 m!108847))

(assert (=> d!26089 d!26599))

(declare-fun d!26601 () Bool)

(declare-fun lt!49772 () (_ BitVec 32))

(declare-fun lt!49771 () (_ BitVec 32))

(assert (=> d!26601 (= lt!49772 (bvmul (bvxor lt!49771 (bvlshr lt!49771 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!26601 (= lt!49771 ((_ extract 31 0) (bvand (bvxor (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvlshr (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!26601 (and (bvsge (mask!6578 newMap!16) #b00000000000000000000000000000000) (let ((res!49729 (let ((h!2204 ((_ extract 31 0) (bvand (bvxor (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvlshr (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!13073 (bvmul (bvxor h!2204 (bvlshr h!2204 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!13073 (bvlshr x!13073 #b00000000000000000000000000001101)) (mask!6578 newMap!16)))))) (and (bvslt res!49729 (bvadd (mask!6578 newMap!16) #b00000000000000000000000000000001)) (bvsge res!49729 #b00000000000000000000000000000000))))))

(assert (=> d!26601 (= (toIndex!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (mask!6578 newMap!16)) (bvand (bvxor lt!49772 (bvlshr lt!49772 #b00000000000000000000000000001101)) (mask!6578 newMap!16)))))

(assert (=> d!26089 d!26601))

(assert (=> d!26089 d!26185))

(declare-fun b!98917 () Bool)

(declare-fun e!64456 () Option!155)

(declare-fun e!64457 () Option!155)

(assert (=> b!98917 (= e!64456 e!64457)))

(declare-fun c!16870 () Bool)

(assert (=> b!98917 (= c!16870 (and ((_ is Cons!1608) (t!5574 (toList!791 lt!48799))) (not (= (_1!1186 (h!2202 (t!5574 (toList!791 lt!48799)))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))))

(declare-fun b!98919 () Bool)

(assert (=> b!98919 (= e!64457 None!153)))

(declare-fun c!16869 () Bool)

(declare-fun d!26603 () Bool)

(assert (=> d!26603 (= c!16869 (and ((_ is Cons!1608) (t!5574 (toList!791 lt!48799))) (= (_1!1186 (h!2202 (t!5574 (toList!791 lt!48799)))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355))))))

(assert (=> d!26603 (= (getValueByKey!149 (t!5574 (toList!791 lt!48799)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) e!64456)))

(declare-fun b!98918 () Bool)

(assert (=> b!98918 (= e!64457 (getValueByKey!149 (t!5574 (t!5574 (toList!791 lt!48799))) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun b!98916 () Bool)

(assert (=> b!98916 (= e!64456 (Some!154 (_2!1186 (h!2202 (t!5574 (toList!791 lt!48799))))))))

(assert (= (and d!26603 c!16869) b!98916))

(assert (= (and d!26603 (not c!16869)) b!98917))

(assert (= (and b!98917 c!16870) b!98918))

(assert (= (and b!98917 (not c!16870)) b!98919))

(assert (=> b!98918 m!106609))

(declare-fun m!108855 () Bool)

(assert (=> b!98918 m!108855))

(assert (=> b!97854 d!26603))

(assert (=> b!98073 d!26477))

(declare-fun d!26605 () Bool)

(declare-fun e!64459 () Bool)

(assert (=> d!26605 e!64459))

(declare-fun res!49730 () Bool)

(assert (=> d!26605 (=> res!49730 e!64459)))

(declare-fun lt!49775 () Bool)

(assert (=> d!26605 (= res!49730 (not lt!49775))))

(declare-fun lt!49776 () Bool)

(assert (=> d!26605 (= lt!49775 lt!49776)))

(declare-fun lt!49773 () Unit!2965)

(declare-fun e!64458 () Unit!2965)

(assert (=> d!26605 (= lt!49773 e!64458)))

(declare-fun c!16871 () Bool)

(assert (=> d!26605 (= c!16871 lt!49776)))

(assert (=> d!26605 (= lt!49776 (containsKey!153 (toList!791 lt!49003) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> d!26605 (= (contains!805 lt!49003 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49775)))

(declare-fun b!98920 () Bool)

(declare-fun lt!49774 () Unit!2965)

(assert (=> b!98920 (= e!64458 lt!49774)))

(assert (=> b!98920 (= lt!49774 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49003) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (=> b!98920 (isDefined!103 (getValueByKey!149 (toList!791 lt!49003) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98921 () Bool)

(declare-fun Unit!3024 () Unit!2965)

(assert (=> b!98921 (= e!64458 Unit!3024)))

(declare-fun b!98922 () Bool)

(assert (=> b!98922 (= e!64459 (isDefined!103 (getValueByKey!149 (toList!791 lt!49003) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (= (and d!26605 c!16871) b!98920))

(assert (= (and d!26605 (not c!16871)) b!98921))

(assert (= (and d!26605 (not res!49730)) b!98922))

(declare-fun m!108857 () Bool)

(assert (=> d!26605 m!108857))

(declare-fun m!108859 () Bool)

(assert (=> b!98920 m!108859))

(assert (=> b!98920 m!106837))

(assert (=> b!98920 m!106837))

(declare-fun m!108861 () Bool)

(assert (=> b!98920 m!108861))

(assert (=> b!98922 m!106837))

(assert (=> b!98922 m!106837))

(assert (=> b!98922 m!108861))

(assert (=> d!26023 d!26605))

(declare-fun b!98924 () Bool)

(declare-fun e!64460 () Option!155)

(declare-fun e!64461 () Option!155)

(assert (=> b!98924 (= e!64460 e!64461)))

(declare-fun c!16873 () Bool)

(assert (=> b!98924 (= c!16873 (and ((_ is Cons!1608) lt!49005) (not (= (_1!1186 (h!2202 lt!49005)) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun b!98926 () Bool)

(assert (=> b!98926 (= e!64461 None!153)))

(declare-fun d!26607 () Bool)

(declare-fun c!16872 () Bool)

(assert (=> d!26607 (= c!16872 (and ((_ is Cons!1608) lt!49005) (= (_1!1186 (h!2202 lt!49005)) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26607 (= (getValueByKey!149 lt!49005 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) e!64460)))

(declare-fun b!98925 () Bool)

(assert (=> b!98925 (= e!64461 (getValueByKey!149 (t!5574 lt!49005) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98923 () Bool)

(assert (=> b!98923 (= e!64460 (Some!154 (_2!1186 (h!2202 lt!49005))))))

(assert (= (and d!26607 c!16872) b!98923))

(assert (= (and d!26607 (not c!16872)) b!98924))

(assert (= (and b!98924 c!16873) b!98925))

(assert (= (and b!98924 (not c!16873)) b!98926))

(declare-fun m!108863 () Bool)

(assert (=> b!98925 m!108863))

(assert (=> d!26023 d!26607))

(declare-fun d!26609 () Bool)

(assert (=> d!26609 (= (getValueByKey!149 lt!49005 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) (Some!154 (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun lt!49777 () Unit!2965)

(assert (=> d!26609 (= lt!49777 (choose!605 lt!49005 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun e!64462 () Bool)

(assert (=> d!26609 e!64462))

(declare-fun res!49731 () Bool)

(assert (=> d!26609 (=> (not res!49731) (not e!64462))))

(assert (=> d!26609 (= res!49731 (isStrictlySorted!299 lt!49005))))

(assert (=> d!26609 (= (lemmaContainsTupThenGetReturnValue!67 lt!49005 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49777)))

(declare-fun b!98927 () Bool)

(declare-fun res!49732 () Bool)

(assert (=> b!98927 (=> (not res!49732) (not e!64462))))

(assert (=> b!98927 (= res!49732 (containsKey!153 lt!49005 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98928 () Bool)

(assert (=> b!98928 (= e!64462 (contains!808 lt!49005 (tuple2!2353 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (= (and d!26609 res!49731) b!98927))

(assert (= (and b!98927 res!49732) b!98928))

(assert (=> d!26609 m!106831))

(declare-fun m!108865 () Bool)

(assert (=> d!26609 m!108865))

(declare-fun m!108867 () Bool)

(assert (=> d!26609 m!108867))

(declare-fun m!108869 () Bool)

(assert (=> b!98927 m!108869))

(declare-fun m!108871 () Bool)

(assert (=> b!98928 m!108871))

(assert (=> d!26023 d!26609))

(declare-fun d!26611 () Bool)

(declare-fun e!64464 () Bool)

(assert (=> d!26611 e!64464))

(declare-fun res!49733 () Bool)

(assert (=> d!26611 (=> (not res!49733) (not e!64464))))

(declare-fun lt!49778 () List!1612)

(assert (=> d!26611 (= res!49733 (isStrictlySorted!299 lt!49778))))

(declare-fun e!64463 () List!1612)

(assert (=> d!26611 (= lt!49778 e!64463)))

(declare-fun c!16877 () Bool)

(assert (=> d!26611 (= c!16877 (and ((_ is Cons!1608) (toList!791 call!9892)) (bvslt (_1!1186 (h!2202 (toList!791 call!9892))) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(assert (=> d!26611 (isStrictlySorted!299 (toList!791 call!9892))))

(assert (=> d!26611 (= (insertStrictlySorted!69 (toList!791 call!9892) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49778)))

(declare-fun b!98929 () Bool)

(assert (=> b!98929 (= e!64464 (contains!808 lt!49778 (tuple2!2353 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98930 () Bool)

(declare-fun res!49734 () Bool)

(assert (=> b!98930 (=> (not res!49734) (not e!64464))))

(assert (=> b!98930 (= res!49734 (containsKey!153 lt!49778 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98931 () Bool)

(declare-fun e!64467 () List!1612)

(declare-fun call!10112 () List!1612)

(assert (=> b!98931 (= e!64467 call!10112)))

(declare-fun bm!10107 () Bool)

(declare-fun e!64465 () List!1612)

(declare-fun call!10111 () List!1612)

(assert (=> bm!10107 (= call!10111 ($colon$colon!77 e!64465 (ite c!16877 (h!2202 (toList!791 call!9892)) (tuple2!2353 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))))

(declare-fun c!16875 () Bool)

(assert (=> bm!10107 (= c!16875 c!16877)))

(declare-fun b!98932 () Bool)

(assert (=> b!98932 (= e!64465 (insertStrictlySorted!69 (t!5574 (toList!791 call!9892)) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!98933 () Bool)

(declare-fun c!16876 () Bool)

(declare-fun c!16874 () Bool)

(assert (=> b!98933 (= e!64465 (ite c!16874 (t!5574 (toList!791 call!9892)) (ite c!16876 (Cons!1608 (h!2202 (toList!791 call!9892)) (t!5574 (toList!791 call!9892))) Nil!1609)))))

(declare-fun b!98934 () Bool)

(assert (=> b!98934 (= c!16876 (and ((_ is Cons!1608) (toList!791 call!9892)) (bvsgt (_1!1186 (h!2202 (toList!791 call!9892))) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun e!64466 () List!1612)

(assert (=> b!98934 (= e!64467 e!64466)))

(declare-fun bm!10108 () Bool)

(declare-fun call!10110 () List!1612)

(assert (=> bm!10108 (= call!10110 call!10112)))

(declare-fun b!98935 () Bool)

(assert (=> b!98935 (= e!64463 e!64467)))

(assert (=> b!98935 (= c!16874 (and ((_ is Cons!1608) (toList!791 call!9892)) (= (_1!1186 (h!2202 (toList!791 call!9892))) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))

(declare-fun b!98936 () Bool)

(assert (=> b!98936 (= e!64463 call!10111)))

(declare-fun b!98937 () Bool)

(assert (=> b!98937 (= e!64466 call!10110)))

(declare-fun bm!10109 () Bool)

(assert (=> bm!10109 (= call!10112 call!10111)))

(declare-fun b!98938 () Bool)

(assert (=> b!98938 (= e!64466 call!10110)))

(assert (= (and d!26611 c!16877) b!98936))

(assert (= (and d!26611 (not c!16877)) b!98935))

(assert (= (and b!98935 c!16874) b!98931))

(assert (= (and b!98935 (not c!16874)) b!98934))

(assert (= (and b!98934 c!16876) b!98937))

(assert (= (and b!98934 (not c!16876)) b!98938))

(assert (= (or b!98937 b!98938) bm!10108))

(assert (= (or b!98931 bm!10108) bm!10109))

(assert (= (or b!98936 bm!10109) bm!10107))

(assert (= (and bm!10107 c!16875) b!98932))

(assert (= (and bm!10107 (not c!16875)) b!98933))

(assert (= (and d!26611 res!49733) b!98930))

(assert (= (and b!98930 res!49734) b!98929))

(declare-fun m!108873 () Bool)

(assert (=> bm!10107 m!108873))

(declare-fun m!108875 () Bool)

(assert (=> b!98929 m!108875))

(declare-fun m!108877 () Bool)

(assert (=> d!26611 m!108877))

(declare-fun m!108879 () Bool)

(assert (=> d!26611 m!108879))

(declare-fun m!108881 () Bool)

(assert (=> b!98930 m!108881))

(declare-fun m!108883 () Bool)

(assert (=> b!98932 m!108883))

(assert (=> d!26023 d!26611))

(declare-fun d!26613 () Bool)

(declare-fun e!64469 () Bool)

(assert (=> d!26613 e!64469))

(declare-fun res!49735 () Bool)

(assert (=> d!26613 (=> res!49735 e!64469)))

(declare-fun lt!49781 () Bool)

(assert (=> d!26613 (= res!49735 (not lt!49781))))

(declare-fun lt!49782 () Bool)

(assert (=> d!26613 (= lt!49781 lt!49782)))

(declare-fun lt!49779 () Unit!2965)

(declare-fun e!64468 () Unit!2965)

(assert (=> d!26613 (= lt!49779 e!64468)))

(declare-fun c!16878 () Bool)

(assert (=> d!26613 (= c!16878 lt!49782)))

(assert (=> d!26613 (= lt!49782 (containsKey!153 (toList!791 lt!49041) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26613 (= (contains!805 lt!49041 #b1000000000000000000000000000000000000000000000000000000000000000) lt!49781)))

(declare-fun b!98939 () Bool)

(declare-fun lt!49780 () Unit!2965)

(assert (=> b!98939 (= e!64468 lt!49780)))

(assert (=> b!98939 (= lt!49780 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49041) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!98939 (isDefined!103 (getValueByKey!149 (toList!791 lt!49041) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98940 () Bool)

(declare-fun Unit!3025 () Unit!2965)

(assert (=> b!98940 (= e!64468 Unit!3025)))

(declare-fun b!98941 () Bool)

(assert (=> b!98941 (= e!64469 (isDefined!103 (getValueByKey!149 (toList!791 lt!49041) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26613 c!16878) b!98939))

(assert (= (and d!26613 (not c!16878)) b!98940))

(assert (= (and d!26613 (not res!49735)) b!98941))

(declare-fun m!108885 () Bool)

(assert (=> d!26613 m!108885))

(declare-fun m!108887 () Bool)

(assert (=> b!98939 m!108887))

(assert (=> b!98939 m!107449))

(assert (=> b!98939 m!107449))

(declare-fun m!108889 () Bool)

(assert (=> b!98939 m!108889))

(assert (=> b!98941 m!107449))

(assert (=> b!98941 m!107449))

(assert (=> b!98941 m!108889))

(assert (=> bm!9969 d!26613))

(assert (=> d!26055 d!26089))

(declare-fun d!26615 () Bool)

(declare-fun e!64472 () Bool)

(assert (=> d!26615 e!64472))

(declare-fun res!49741 () Bool)

(assert (=> d!26615 (=> (not res!49741) (not e!64472))))

(declare-fun lt!49785 () SeekEntryResult!263)

(assert (=> d!26615 (= res!49741 ((_ is Found!263) lt!49785))))

(assert (=> d!26615 (= lt!49785 (seekEntryOrOpen!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (_keys!4171 newMap!16) (mask!6578 newMap!16)))))

(assert (=> d!26615 true))

(declare-fun _$33!81 () Unit!2965)

(assert (=> d!26615 (= (choose!597 (_keys!4171 newMap!16) (_values!2464 newMap!16) (mask!6578 newMap!16) (extraKeys!2302 newMap!16) (zeroValue!2364 newMap!16) (minValue!2364 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (defaultEntry!2481 newMap!16)) _$33!81)))

(declare-fun b!98946 () Bool)

(declare-fun res!49740 () Bool)

(assert (=> b!98946 (=> (not res!49740) (not e!64472))))

(assert (=> b!98946 (= res!49740 (inRange!0 (index!3196 lt!49785) (mask!6578 newMap!16)))))

(declare-fun b!98947 () Bool)

(assert (=> b!98947 (= e!64472 (= (select (arr!2014 (_keys!4171 newMap!16)) (index!3196 lt!49785)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (= (and d!26615 res!49741) b!98946))

(assert (= (and b!98946 res!49740) b!98947))

(assert (=> d!26615 m!106609))

(assert (=> d!26615 m!106785))

(declare-fun m!108891 () Bool)

(assert (=> b!98946 m!108891))

(declare-fun m!108893 () Bool)

(assert (=> b!98947 m!108893))

(assert (=> d!26055 d!26615))

(assert (=> d!26055 d!26185))

(declare-fun b!98948 () Bool)

(declare-fun e!64473 () Bool)

(declare-fun call!10113 () Bool)

(assert (=> b!98948 (= e!64473 call!10113)))

(declare-fun b!98949 () Bool)

(assert (=> b!98949 (= e!64473 call!10113)))

(declare-fun d!26617 () Bool)

(declare-fun res!49743 () Bool)

(declare-fun e!64476 () Bool)

(assert (=> d!26617 (=> res!49743 e!64476)))

(assert (=> d!26617 (= res!49743 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))))))

(assert (=> d!26617 (= (arrayNoDuplicates!0 (_keys!4171 (_2!1187 lt!48968)) #b00000000000000000000000000000000 Nil!1608) e!64476)))

(declare-fun b!98950 () Bool)

(declare-fun e!64474 () Bool)

(assert (=> b!98950 (= e!64476 e!64474)))

(declare-fun res!49744 () Bool)

(assert (=> b!98950 (=> (not res!49744) (not e!64474))))

(declare-fun e!64475 () Bool)

(assert (=> b!98950 (= res!49744 (not e!64475))))

(declare-fun res!49742 () Bool)

(assert (=> b!98950 (=> (not res!49742) (not e!64475))))

(assert (=> b!98950 (= res!49742 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000)))))

(declare-fun b!98951 () Bool)

(assert (=> b!98951 (= e!64474 e!64473)))

(declare-fun c!16879 () Bool)

(assert (=> b!98951 (= c!16879 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000)))))

(declare-fun bm!10110 () Bool)

(assert (=> bm!10110 (= call!10113 (arrayNoDuplicates!0 (_keys!4171 (_2!1187 lt!48968)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16879 (Cons!1607 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000) Nil!1608) Nil!1608)))))

(declare-fun b!98952 () Bool)

(assert (=> b!98952 (= e!64475 (contains!807 Nil!1608 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000)))))

(assert (= (and d!26617 (not res!49743)) b!98950))

(assert (= (and b!98950 res!49742) b!98952))

(assert (= (and b!98950 res!49744) b!98951))

(assert (= (and b!98951 c!16879) b!98948))

(assert (= (and b!98951 (not c!16879)) b!98949))

(assert (= (or b!98948 b!98949) bm!10110))

(assert (=> b!98950 m!108295))

(assert (=> b!98950 m!108295))

(assert (=> b!98950 m!108297))

(assert (=> b!98951 m!108295))

(assert (=> b!98951 m!108295))

(assert (=> b!98951 m!108297))

(assert (=> bm!10110 m!108295))

(declare-fun m!108895 () Bool)

(assert (=> bm!10110 m!108895))

(assert (=> b!98952 m!108295))

(assert (=> b!98952 m!108295))

(declare-fun m!108897 () Bool)

(assert (=> b!98952 m!108897))

(assert (=> b!97899 d!26617))

(declare-fun d!26619 () Bool)

(assert (=> d!26619 (= (apply!92 lt!49280 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1300 (getValueByKey!149 (toList!791 lt!49280) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4091 () Bool)

(assert (= bs!4091 d!26619))

(assert (=> bs!4091 m!108579))

(assert (=> bs!4091 m!108579))

(declare-fun m!108899 () Bool)

(assert (=> bs!4091 m!108899))

(assert (=> b!98134 d!26619))

(declare-fun d!26621 () Bool)

(assert (=> d!26621 (= (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48873)) (v!2805 (getValueByKey!149 (toList!791 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48873)))))

(assert (=> d!26101 d!26621))

(declare-fun b!98954 () Bool)

(declare-fun e!64477 () Option!155)

(declare-fun e!64478 () Option!155)

(assert (=> b!98954 (= e!64477 e!64478)))

(declare-fun c!16881 () Bool)

(assert (=> b!98954 (= c!16881 (and ((_ is Cons!1608) (toList!791 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))) (not (= (_1!1186 (h!2202 (toList!791 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))) lt!48873))))))

(declare-fun b!98956 () Bool)

(assert (=> b!98956 (= e!64478 None!153)))

(declare-fun c!16880 () Bool)

(declare-fun d!26623 () Bool)

(assert (=> d!26623 (= c!16880 (and ((_ is Cons!1608) (toList!791 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))) (= (_1!1186 (h!2202 (toList!791 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))))) lt!48873)))))

(assert (=> d!26623 (= (getValueByKey!149 (toList!791 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48873) e!64477)))

(declare-fun b!98955 () Bool)

(assert (=> b!98955 (= e!64478 (getValueByKey!149 (t!5574 (toList!791 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))) lt!48873))))

(declare-fun b!98953 () Bool)

(assert (=> b!98953 (= e!64477 (Some!154 (_2!1186 (h!2202 (toList!791 (+!138 lt!48889 (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))))))

(assert (= (and d!26623 c!16880) b!98953))

(assert (= (and d!26623 (not c!16880)) b!98954))

(assert (= (and b!98954 c!16881) b!98955))

(assert (= (and b!98954 (not c!16881)) b!98956))

(declare-fun m!108901 () Bool)

(assert (=> b!98955 m!108901))

(assert (=> d!26101 d!26623))

(assert (=> b!98067 d!26505))

(assert (=> b!97872 d!26165))

(declare-fun d!26625 () Bool)

(declare-fun res!49745 () Bool)

(declare-fun e!64479 () Bool)

(assert (=> d!26625 (=> res!49745 e!64479)))

(assert (=> d!26625 (= res!49745 (= (select (arr!2014 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (=> d!26625 (= (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!64479)))

(declare-fun b!98957 () Bool)

(declare-fun e!64480 () Bool)

(assert (=> b!98957 (= e!64479 e!64480)))

(declare-fun res!49746 () Bool)

(assert (=> b!98957 (=> (not res!49746) (not e!64480))))

(assert (=> b!98957 (= res!49746 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98958 () Bool)

(assert (=> b!98958 (= e!64480 (arrayContainsKey!0 (_keys!4171 newMap!16) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26625 (not res!49745)) b!98957))

(assert (= (and b!98957 res!49746) b!98958))

(assert (=> d!26625 m!108059))

(assert (=> b!98958 m!106609))

(declare-fun m!108903 () Bool)

(assert (=> b!98958 m!108903))

(assert (=> b!97859 d!26625))

(declare-fun b!98960 () Bool)

(declare-fun e!64481 () Option!155)

(declare-fun e!64482 () Option!155)

(assert (=> b!98960 (= e!64481 e!64482)))

(declare-fun c!16883 () Bool)

(assert (=> b!98960 (= c!16883 (and ((_ is Cons!1608) (toList!791 lt!49010)) (not (= (_1!1186 (h!2202 (toList!791 lt!49010))) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!98962 () Bool)

(assert (=> b!98962 (= e!64482 None!153)))

(declare-fun c!16882 () Bool)

(declare-fun d!26627 () Bool)

(assert (=> d!26627 (= c!16882 (and ((_ is Cons!1608) (toList!791 lt!49010)) (= (_1!1186 (h!2202 (toList!791 lt!49010))) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26627 (= (getValueByKey!149 (toList!791 lt!49010) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!64481)))

(declare-fun b!98961 () Bool)

(assert (=> b!98961 (= e!64482 (getValueByKey!149 (t!5574 (toList!791 lt!49010)) (_1!1186 (tuple2!2353 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!98959 () Bool)

(assert (=> b!98959 (= e!64481 (Some!154 (_2!1186 (h!2202 (toList!791 lt!49010)))))))

(assert (= (and d!26627 c!16882) b!98959))

(assert (= (and d!26627 (not c!16882)) b!98960))

(assert (= (and b!98960 c!16883) b!98961))

(assert (= (and b!98960 (not c!16883)) b!98962))

(declare-fun m!108905 () Bool)

(assert (=> b!98961 m!108905))

(assert (=> b!97856 d!26627))

(declare-fun b!98963 () Bool)

(declare-fun e!64489 () Bool)

(declare-fun call!10120 () Bool)

(assert (=> b!98963 (= e!64489 (not call!10120))))

(declare-fun b!98964 () Bool)

(declare-fun e!64491 () Unit!2965)

(declare-fun lt!49805 () Unit!2965)

(assert (=> b!98964 (= e!64491 lt!49805)))

(declare-fun lt!49796 () ListLongMap!1551)

(assert (=> b!98964 (= lt!49796 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (_2!1187 lt!48968)) (_values!2464 (_2!1187 lt!48968)) (mask!6578 (_2!1187 lt!48968)) (extraKeys!2302 (_2!1187 lt!48968)) (zeroValue!2364 (_2!1187 lt!48968)) (minValue!2364 (_2!1187 lt!48968)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1187 lt!48968))))))

(declare-fun lt!49792 () (_ BitVec 64))

(assert (=> b!98964 (= lt!49792 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49789 () (_ BitVec 64))

(assert (=> b!98964 (= lt!49789 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000))))

(declare-fun lt!49794 () Unit!2965)

(assert (=> b!98964 (= lt!49794 (addStillContains!68 lt!49796 lt!49792 (zeroValue!2364 (_2!1187 lt!48968)) lt!49789))))

(assert (=> b!98964 (contains!805 (+!138 lt!49796 (tuple2!2353 lt!49792 (zeroValue!2364 (_2!1187 lt!48968)))) lt!49789)))

(declare-fun lt!49800 () Unit!2965)

(assert (=> b!98964 (= lt!49800 lt!49794)))

(declare-fun lt!49798 () ListLongMap!1551)

(assert (=> b!98964 (= lt!49798 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (_2!1187 lt!48968)) (_values!2464 (_2!1187 lt!48968)) (mask!6578 (_2!1187 lt!48968)) (extraKeys!2302 (_2!1187 lt!48968)) (zeroValue!2364 (_2!1187 lt!48968)) (minValue!2364 (_2!1187 lt!48968)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1187 lt!48968))))))

(declare-fun lt!49802 () (_ BitVec 64))

(assert (=> b!98964 (= lt!49802 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49807 () (_ BitVec 64))

(assert (=> b!98964 (= lt!49807 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000))))

(declare-fun lt!49787 () Unit!2965)

(assert (=> b!98964 (= lt!49787 (addApplyDifferent!68 lt!49798 lt!49802 (minValue!2364 (_2!1187 lt!48968)) lt!49807))))

(assert (=> b!98964 (= (apply!92 (+!138 lt!49798 (tuple2!2353 lt!49802 (minValue!2364 (_2!1187 lt!48968)))) lt!49807) (apply!92 lt!49798 lt!49807))))

(declare-fun lt!49799 () Unit!2965)

(assert (=> b!98964 (= lt!49799 lt!49787)))

(declare-fun lt!49804 () ListLongMap!1551)

(assert (=> b!98964 (= lt!49804 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (_2!1187 lt!48968)) (_values!2464 (_2!1187 lt!48968)) (mask!6578 (_2!1187 lt!48968)) (extraKeys!2302 (_2!1187 lt!48968)) (zeroValue!2364 (_2!1187 lt!48968)) (minValue!2364 (_2!1187 lt!48968)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1187 lt!48968))))))

(declare-fun lt!49801 () (_ BitVec 64))

(assert (=> b!98964 (= lt!49801 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49788 () (_ BitVec 64))

(assert (=> b!98964 (= lt!49788 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000))))

(declare-fun lt!49791 () Unit!2965)

(assert (=> b!98964 (= lt!49791 (addApplyDifferent!68 lt!49804 lt!49801 (zeroValue!2364 (_2!1187 lt!48968)) lt!49788))))

(assert (=> b!98964 (= (apply!92 (+!138 lt!49804 (tuple2!2353 lt!49801 (zeroValue!2364 (_2!1187 lt!48968)))) lt!49788) (apply!92 lt!49804 lt!49788))))

(declare-fun lt!49786 () Unit!2965)

(assert (=> b!98964 (= lt!49786 lt!49791)))

(declare-fun lt!49803 () ListLongMap!1551)

(assert (=> b!98964 (= lt!49803 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (_2!1187 lt!48968)) (_values!2464 (_2!1187 lt!48968)) (mask!6578 (_2!1187 lt!48968)) (extraKeys!2302 (_2!1187 lt!48968)) (zeroValue!2364 (_2!1187 lt!48968)) (minValue!2364 (_2!1187 lt!48968)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1187 lt!48968))))))

(declare-fun lt!49797 () (_ BitVec 64))

(assert (=> b!98964 (= lt!49797 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49790 () (_ BitVec 64))

(assert (=> b!98964 (= lt!49790 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000))))

(assert (=> b!98964 (= lt!49805 (addApplyDifferent!68 lt!49803 lt!49797 (minValue!2364 (_2!1187 lt!48968)) lt!49790))))

(assert (=> b!98964 (= (apply!92 (+!138 lt!49803 (tuple2!2353 lt!49797 (minValue!2364 (_2!1187 lt!48968)))) lt!49790) (apply!92 lt!49803 lt!49790))))

(declare-fun b!98965 () Bool)

(declare-fun e!64490 () ListLongMap!1551)

(declare-fun call!10115 () ListLongMap!1551)

(assert (=> b!98965 (= e!64490 call!10115)))

(declare-fun bm!10111 () Bool)

(declare-fun call!10118 () ListLongMap!1551)

(assert (=> bm!10111 (= call!10115 call!10118)))

(declare-fun b!98966 () Bool)

(declare-fun e!64485 () Bool)

(declare-fun e!64486 () Bool)

(assert (=> b!98966 (= e!64485 e!64486)))

(declare-fun res!49754 () Bool)

(declare-fun call!10117 () Bool)

(assert (=> b!98966 (= res!49754 call!10117)))

(assert (=> b!98966 (=> (not res!49754) (not e!64486))))

(declare-fun b!98967 () Bool)

(declare-fun res!49750 () Bool)

(declare-fun e!64488 () Bool)

(assert (=> b!98967 (=> (not res!49750) (not e!64488))))

(assert (=> b!98967 (= res!49750 e!64485)))

(declare-fun c!16887 () Bool)

(assert (=> b!98967 (= c!16887 (not (= (bvand (extraKeys!2302 (_2!1187 lt!48968)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!26629 () Bool)

(assert (=> d!26629 e!64488))

(declare-fun res!49747 () Bool)

(assert (=> d!26629 (=> (not res!49747) (not e!64488))))

(assert (=> d!26629 (= res!49747 (or (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))))))))

(declare-fun lt!49806 () ListLongMap!1551)

(declare-fun lt!49795 () ListLongMap!1551)

(assert (=> d!26629 (= lt!49806 lt!49795)))

(declare-fun lt!49793 () Unit!2965)

(assert (=> d!26629 (= lt!49793 e!64491)))

(declare-fun c!16885 () Bool)

(declare-fun e!64487 () Bool)

(assert (=> d!26629 (= c!16885 e!64487)))

(declare-fun res!49748 () Bool)

(assert (=> d!26629 (=> (not res!49748) (not e!64487))))

(assert (=> d!26629 (= res!49748 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))))))

(declare-fun e!64494 () ListLongMap!1551)

(assert (=> d!26629 (= lt!49795 e!64494)))

(declare-fun c!16884 () Bool)

(assert (=> d!26629 (= c!16884 (and (not (= (bvand (extraKeys!2302 (_2!1187 lt!48968)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2302 (_2!1187 lt!48968)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26629 (validMask!0 (mask!6578 (_2!1187 lt!48968)))))

(assert (=> d!26629 (= (getCurrentListMap!472 (_keys!4171 (_2!1187 lt!48968)) (_values!2464 (_2!1187 lt!48968)) (mask!6578 (_2!1187 lt!48968)) (extraKeys!2302 (_2!1187 lt!48968)) (zeroValue!2364 (_2!1187 lt!48968)) (minValue!2364 (_2!1187 lt!48968)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1187 lt!48968))) lt!49806)))

(declare-fun b!98968 () Bool)

(assert (=> b!98968 (= e!64486 (= (apply!92 lt!49806 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2364 (_2!1187 lt!48968))))))

(declare-fun c!16889 () Bool)

(declare-fun call!10114 () ListLongMap!1551)

(declare-fun call!10116 () ListLongMap!1551)

(declare-fun call!10119 () ListLongMap!1551)

(declare-fun bm!10112 () Bool)

(assert (=> bm!10112 (= call!10118 (+!138 (ite c!16884 call!10116 (ite c!16889 call!10119 call!10114)) (ite (or c!16884 c!16889) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (_2!1187 lt!48968))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (_2!1187 lt!48968))))))))

(declare-fun b!98969 () Bool)

(assert (=> b!98969 (= e!64487 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000)))))

(declare-fun b!98970 () Bool)

(declare-fun e!64495 () Bool)

(assert (=> b!98970 (= e!64495 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000)))))

(declare-fun b!98971 () Bool)

(assert (=> b!98971 (= e!64485 (not call!10117))))

(declare-fun b!98972 () Bool)

(declare-fun e!64483 () ListLongMap!1551)

(assert (=> b!98972 (= e!64483 call!10115)))

(declare-fun b!98973 () Bool)

(assert (=> b!98973 (= e!64494 e!64490)))

(assert (=> b!98973 (= c!16889 (and (not (= (bvand (extraKeys!2302 (_2!1187 lt!48968)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 (_2!1187 lt!48968)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!10113 () Bool)

(assert (=> bm!10113 (= call!10120 (contains!805 lt!49806 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98974 () Bool)

(declare-fun e!64484 () Bool)

(assert (=> b!98974 (= e!64484 (= (apply!92 lt!49806 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2364 (_2!1187 lt!48968))))))

(declare-fun b!98975 () Bool)

(declare-fun e!64493 () Bool)

(assert (=> b!98975 (= e!64493 (= (apply!92 lt!49806 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000)) (get!1296 (select (arr!2015 (_values!2464 (_2!1187 lt!48968))) #b00000000000000000000000000000000) (dynLambda!378 (defaultEntry!2481 (_2!1187 lt!48968)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!98975 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2265 (_values!2464 (_2!1187 lt!48968)))))))

(assert (=> b!98975 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))))))

(declare-fun b!98976 () Bool)

(declare-fun res!49749 () Bool)

(assert (=> b!98976 (=> (not res!49749) (not e!64488))))

(declare-fun e!64492 () Bool)

(assert (=> b!98976 (= res!49749 e!64492)))

(declare-fun res!49753 () Bool)

(assert (=> b!98976 (=> res!49753 e!64492)))

(assert (=> b!98976 (= res!49753 (not e!64495))))

(declare-fun res!49755 () Bool)

(assert (=> b!98976 (=> (not res!49755) (not e!64495))))

(assert (=> b!98976 (= res!49755 (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))))))

(declare-fun b!98977 () Bool)

(assert (=> b!98977 (= e!64483 call!10114)))

(declare-fun b!98978 () Bool)

(assert (=> b!98978 (= e!64492 e!64493)))

(declare-fun res!49752 () Bool)

(assert (=> b!98978 (=> (not res!49752) (not e!64493))))

(assert (=> b!98978 (= res!49752 (contains!805 lt!49806 (select (arr!2014 (_keys!4171 (_2!1187 lt!48968))) #b00000000000000000000000000000000)))))

(assert (=> b!98978 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!48968)))))))

(declare-fun bm!10114 () Bool)

(assert (=> bm!10114 (= call!10119 call!10116)))

(declare-fun b!98979 () Bool)

(assert (=> b!98979 (= e!64489 e!64484)))

(declare-fun res!49751 () Bool)

(assert (=> b!98979 (= res!49751 call!10120)))

(assert (=> b!98979 (=> (not res!49751) (not e!64484))))

(declare-fun bm!10115 () Bool)

(assert (=> bm!10115 (= call!10114 call!10119)))

(declare-fun b!98980 () Bool)

(declare-fun Unit!3026 () Unit!2965)

(assert (=> b!98980 (= e!64491 Unit!3026)))

(declare-fun b!98981 () Bool)

(declare-fun c!16886 () Bool)

(assert (=> b!98981 (= c!16886 (and (not (= (bvand (extraKeys!2302 (_2!1187 lt!48968)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2302 (_2!1187 lt!48968)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!98981 (= e!64490 e!64483)))

(declare-fun bm!10116 () Bool)

(assert (=> bm!10116 (= call!10116 (getCurrentListMapNoExtraKeys!102 (_keys!4171 (_2!1187 lt!48968)) (_values!2464 (_2!1187 lt!48968)) (mask!6578 (_2!1187 lt!48968)) (extraKeys!2302 (_2!1187 lt!48968)) (zeroValue!2364 (_2!1187 lt!48968)) (minValue!2364 (_2!1187 lt!48968)) #b00000000000000000000000000000000 (defaultEntry!2481 (_2!1187 lt!48968))))))

(declare-fun b!98982 () Bool)

(assert (=> b!98982 (= e!64494 (+!138 call!10118 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (_2!1187 lt!48968)))))))

(declare-fun bm!10117 () Bool)

(assert (=> bm!10117 (= call!10117 (contains!805 lt!49806 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!98983 () Bool)

(assert (=> b!98983 (= e!64488 e!64489)))

(declare-fun c!16888 () Bool)

(assert (=> b!98983 (= c!16888 (not (= (bvand (extraKeys!2302 (_2!1187 lt!48968)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!26629 c!16884) b!98982))

(assert (= (and d!26629 (not c!16884)) b!98973))

(assert (= (and b!98973 c!16889) b!98965))

(assert (= (and b!98973 (not c!16889)) b!98981))

(assert (= (and b!98981 c!16886) b!98972))

(assert (= (and b!98981 (not c!16886)) b!98977))

(assert (= (or b!98972 b!98977) bm!10115))

(assert (= (or b!98965 bm!10115) bm!10114))

(assert (= (or b!98965 b!98972) bm!10111))

(assert (= (or b!98982 bm!10114) bm!10116))

(assert (= (or b!98982 bm!10111) bm!10112))

(assert (= (and d!26629 res!49748) b!98969))

(assert (= (and d!26629 c!16885) b!98964))

(assert (= (and d!26629 (not c!16885)) b!98980))

(assert (= (and d!26629 res!49747) b!98976))

(assert (= (and b!98976 res!49755) b!98970))

(assert (= (and b!98976 (not res!49753)) b!98978))

(assert (= (and b!98978 res!49752) b!98975))

(assert (= (and b!98976 res!49749) b!98967))

(assert (= (and b!98967 c!16887) b!98966))

(assert (= (and b!98967 (not c!16887)) b!98971))

(assert (= (and b!98966 res!49754) b!98968))

(assert (= (or b!98966 b!98971) bm!10117))

(assert (= (and b!98967 res!49750) b!98983))

(assert (= (and b!98983 c!16888) b!98979))

(assert (= (and b!98983 (not c!16888)) b!98963))

(assert (= (and b!98979 res!49751) b!98974))

(assert (= (or b!98979 b!98963) bm!10113))

(declare-fun b_lambda!4411 () Bool)

(assert (=> (not b_lambda!4411) (not b!98975)))

(declare-fun tb!1941 () Bool)

(declare-fun t!5585 () Bool)

(assert (=> (and b!97514 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 (_2!1187 lt!48968))) t!5585) tb!1941))

(declare-fun result!3287 () Bool)

(assert (=> tb!1941 (= result!3287 tp_is_empty!2631)))

(assert (=> b!98975 t!5585))

(declare-fun b_and!6089 () Bool)

(assert (= b_and!6085 (and (=> t!5585 result!3287) b_and!6089)))

(declare-fun t!5587 () Bool)

(declare-fun tb!1943 () Bool)

(assert (=> (and b!97516 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (_2!1187 lt!48968))) t!5587) tb!1943))

(declare-fun result!3289 () Bool)

(assert (= result!3289 result!3287))

(assert (=> b!98975 t!5587))

(declare-fun b_and!6091 () Bool)

(assert (= b_and!6087 (and (=> t!5587 result!3289) b_and!6091)))

(assert (=> b!98970 m!108295))

(assert (=> b!98970 m!108295))

(assert (=> b!98970 m!108297))

(declare-fun m!108907 () Bool)

(assert (=> bm!10112 m!108907))

(declare-fun m!108909 () Bool)

(assert (=> b!98968 m!108909))

(assert (=> b!98969 m!108295))

(assert (=> b!98969 m!108295))

(assert (=> b!98969 m!108297))

(declare-fun m!108911 () Bool)

(assert (=> b!98964 m!108911))

(declare-fun m!108913 () Bool)

(assert (=> b!98964 m!108913))

(declare-fun m!108915 () Bool)

(assert (=> b!98964 m!108915))

(declare-fun m!108917 () Bool)

(assert (=> b!98964 m!108917))

(declare-fun m!108919 () Bool)

(assert (=> b!98964 m!108919))

(assert (=> b!98964 m!108917))

(declare-fun m!108921 () Bool)

(assert (=> b!98964 m!108921))

(declare-fun m!108923 () Bool)

(assert (=> b!98964 m!108923))

(declare-fun m!108925 () Bool)

(assert (=> b!98964 m!108925))

(assert (=> b!98964 m!108913))

(declare-fun m!108927 () Bool)

(assert (=> b!98964 m!108927))

(declare-fun m!108929 () Bool)

(assert (=> b!98964 m!108929))

(declare-fun m!108931 () Bool)

(assert (=> b!98964 m!108931))

(declare-fun m!108933 () Bool)

(assert (=> b!98964 m!108933))

(declare-fun m!108935 () Bool)

(assert (=> b!98964 m!108935))

(declare-fun m!108937 () Bool)

(assert (=> b!98964 m!108937))

(assert (=> b!98964 m!108927))

(assert (=> b!98964 m!108295))

(declare-fun m!108939 () Bool)

(assert (=> b!98964 m!108939))

(assert (=> b!98964 m!108923))

(declare-fun m!108941 () Bool)

(assert (=> b!98964 m!108941))

(declare-fun m!108943 () Bool)

(assert (=> b!98974 m!108943))

(declare-fun m!108945 () Bool)

(assert (=> bm!10113 m!108945))

(assert (=> bm!10116 m!108921))

(assert (=> d!26629 m!108329))

(assert (=> b!98978 m!108295))

(assert (=> b!98978 m!108295))

(declare-fun m!108947 () Bool)

(assert (=> b!98978 m!108947))

(declare-fun m!108949 () Bool)

(assert (=> bm!10117 m!108949))

(declare-fun m!108951 () Bool)

(assert (=> b!98982 m!108951))

(declare-fun m!108953 () Bool)

(assert (=> b!98975 m!108953))

(declare-fun m!108955 () Bool)

(assert (=> b!98975 m!108955))

(declare-fun m!108957 () Bool)

(assert (=> b!98975 m!108957))

(assert (=> b!98975 m!108955))

(assert (=> b!98975 m!108295))

(assert (=> b!98975 m!108295))

(declare-fun m!108959 () Bool)

(assert (=> b!98975 m!108959))

(assert (=> b!98975 m!108953))

(assert (=> d!26125 d!26629))

(declare-fun d!26631 () Bool)

(assert (=> d!26631 (= (get!1300 (getValueByKey!149 (toList!791 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48875)) (v!2805 (getValueByKey!149 (toList!791 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48875)))))

(assert (=> d!26095 d!26631))

(declare-fun b!98985 () Bool)

(declare-fun e!64496 () Option!155)

(declare-fun e!64497 () Option!155)

(assert (=> b!98985 (= e!64496 e!64497)))

(declare-fun c!16891 () Bool)

(assert (=> b!98985 (= c!16891 (and ((_ is Cons!1608) (toList!791 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) (not (= (_1!1186 (h!2202 (toList!791 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))) lt!48875))))))

(declare-fun b!98987 () Bool)

(assert (=> b!98987 (= e!64497 None!153)))

(declare-fun d!26633 () Bool)

(declare-fun c!16890 () Bool)

(assert (=> d!26633 (= c!16890 (and ((_ is Cons!1608) (toList!791 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) (= (_1!1186 (h!2202 (toList!791 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))) lt!48875)))))

(assert (=> d!26633 (= (getValueByKey!149 (toList!791 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!48875) e!64496)))

(declare-fun b!98986 () Bool)

(assert (=> b!98986 (= e!64497 (getValueByKey!149 (t!5574 (toList!791 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))) lt!48875))))

(declare-fun b!98984 () Bool)

(assert (=> b!98984 (= e!64496 (Some!154 (_2!1186 (h!2202 (toList!791 (+!138 lt!48888 (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))))))

(assert (= (and d!26633 c!16890) b!98984))

(assert (= (and d!26633 (not c!16890)) b!98985))

(assert (= (and b!98985 c!16891) b!98986))

(assert (= (and b!98985 (not c!16891)) b!98987))

(declare-fun m!108961 () Bool)

(assert (=> b!98986 m!108961))

(assert (=> d!26095 d!26633))

(declare-fun b!98988 () Bool)

(declare-fun e!64498 () Bool)

(declare-fun call!10121 () Bool)

(assert (=> b!98988 (= e!64498 call!10121)))

(declare-fun b!98989 () Bool)

(assert (=> b!98989 (= e!64498 call!10121)))

(declare-fun d!26635 () Bool)

(declare-fun res!49757 () Bool)

(declare-fun e!64501 () Bool)

(assert (=> d!26635 (=> res!49757 e!64501)))

(assert (=> d!26635 (= res!49757 (bvsge #b00000000000000000000000000000000 (size!2264 (_keys!4171 (v!2801 (underlying!339 thiss!992))))))))

(assert (=> d!26635 (= (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) #b00000000000000000000000000000000 Nil!1608) e!64501)))

(declare-fun b!98990 () Bool)

(declare-fun e!64499 () Bool)

(assert (=> b!98990 (= e!64501 e!64499)))

(declare-fun res!49758 () Bool)

(assert (=> b!98990 (=> (not res!49758) (not e!64499))))

(declare-fun e!64500 () Bool)

(assert (=> b!98990 (= res!49758 (not e!64500))))

(declare-fun res!49756 () Bool)

(assert (=> b!98990 (=> (not res!49756) (not e!64500))))

(assert (=> b!98990 (= res!49756 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!98991 () Bool)

(assert (=> b!98991 (= e!64499 e!64498)))

(declare-fun c!16892 () Bool)

(assert (=> b!98991 (= c!16892 (validKeyInArray!0 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10118 () Bool)

(assert (=> bm!10118 (= call!10121 (arrayNoDuplicates!0 (_keys!4171 (v!2801 (underlying!339 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16892 (Cons!1607 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b00000000000000000000000000000000) Nil!1608) Nil!1608)))))

(declare-fun b!98992 () Bool)

(assert (=> b!98992 (= e!64500 (contains!807 Nil!1608 (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!26635 (not res!49757)) b!98990))

(assert (= (and b!98990 res!49756) b!98992))

(assert (= (and b!98990 res!49758) b!98991))

(assert (= (and b!98991 c!16892) b!98988))

(assert (= (and b!98991 (not c!16892)) b!98989))

(assert (= (or b!98988 b!98989) bm!10118))

(assert (=> b!98990 m!108325))

(assert (=> b!98990 m!108325))

(assert (=> b!98990 m!108327))

(assert (=> b!98991 m!108325))

(assert (=> b!98991 m!108325))

(assert (=> b!98991 m!108327))

(assert (=> bm!10118 m!108325))

(declare-fun m!108963 () Bool)

(assert (=> bm!10118 m!108963))

(assert (=> b!98992 m!108325))

(assert (=> b!98992 m!108325))

(declare-fun m!108965 () Bool)

(assert (=> b!98992 m!108965))

(assert (=> b!98122 d!26635))

(assert (=> b!98125 d!26425))

(assert (=> b!98125 d!26427))

(declare-fun d!26637 () Bool)

(declare-fun e!64503 () Bool)

(assert (=> d!26637 e!64503))

(declare-fun res!49759 () Bool)

(assert (=> d!26637 (=> res!49759 e!64503)))

(declare-fun lt!49810 () Bool)

(assert (=> d!26637 (= res!49759 (not lt!49810))))

(declare-fun lt!49811 () Bool)

(assert (=> d!26637 (= lt!49810 lt!49811)))

(declare-fun lt!49808 () Unit!2965)

(declare-fun e!64502 () Unit!2965)

(assert (=> d!26637 (= lt!49808 e!64502)))

(declare-fun c!16893 () Bool)

(assert (=> d!26637 (= c!16893 lt!49811)))

(assert (=> d!26637 (= lt!49811 (containsKey!153 (toList!791 lt!49280) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26637 (= (contains!805 lt!49280 (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)) lt!49810)))

(declare-fun b!98993 () Bool)

(declare-fun lt!49809 () Unit!2965)

(assert (=> b!98993 (= e!64502 lt!49809)))

(assert (=> b!98993 (= lt!49809 (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!49280) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!98993 (isDefined!103 (getValueByKey!149 (toList!791 lt!49280) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!98994 () Bool)

(declare-fun Unit!3027 () Unit!2965)

(assert (=> b!98994 (= e!64502 Unit!3027)))

(declare-fun b!98995 () Bool)

(assert (=> b!98995 (= e!64503 (isDefined!103 (getValueByKey!149 (toList!791 lt!49280) (select (arr!2014 (_keys!4171 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26637 c!16893) b!98993))

(assert (= (and d!26637 (not c!16893)) b!98994))

(assert (= (and d!26637 (not res!49759)) b!98995))

(assert (=> d!26637 m!106867))

(declare-fun m!108967 () Bool)

(assert (=> d!26637 m!108967))

(assert (=> b!98993 m!106867))

(declare-fun m!108969 () Bool)

(assert (=> b!98993 m!108969))

(assert (=> b!98993 m!106867))

(assert (=> b!98993 m!107873))

(assert (=> b!98993 m!107873))

(declare-fun m!108971 () Bool)

(assert (=> b!98993 m!108971))

(assert (=> b!98995 m!106867))

(assert (=> b!98995 m!107873))

(assert (=> b!98995 m!107873))

(assert (=> b!98995 m!108971))

(assert (=> b!98144 d!26637))

(declare-fun b!98996 () Bool)

(declare-fun e!64505 () (_ BitVec 32))

(declare-fun call!10122 () (_ BitVec 32))

(assert (=> b!98996 (= e!64505 (bvadd #b00000000000000000000000000000001 call!10122))))

(declare-fun b!98997 () Bool)

(assert (=> b!98997 (= e!64505 call!10122)))

(declare-fun d!26639 () Bool)

(declare-fun lt!49812 () (_ BitVec 32))

(assert (=> d!26639 (and (bvsge lt!49812 #b00000000000000000000000000000000) (bvsle lt!49812 (bvsub (size!2264 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun e!64504 () (_ BitVec 32))

(assert (=> d!26639 (= lt!49812 e!64504)))

(declare-fun c!16895 () Bool)

(assert (=> d!26639 (= c!16895 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26639 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 (_keys!4171 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2264 (_keys!4171 newMap!16)) (size!2264 (_keys!4171 newMap!16))))))

(assert (=> d!26639 (= (arrayCountValidKeys!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2264 (_keys!4171 newMap!16))) lt!49812)))

(declare-fun bm!10119 () Bool)

(assert (=> bm!10119 (= call!10122 (arrayCountValidKeys!0 (_keys!4171 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2264 (_keys!4171 newMap!16))))))

(declare-fun b!98998 () Bool)

(assert (=> b!98998 (= e!64504 #b00000000000000000000000000000000)))

(declare-fun b!98999 () Bool)

(assert (=> b!98999 (= e!64504 e!64505)))

(declare-fun c!16894 () Bool)

(assert (=> b!98999 (= c!16894 (validKeyInArray!0 (select (arr!2014 (_keys!4171 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!26639 c!16895) b!98998))

(assert (= (and d!26639 (not c!16895)) b!98999))

(assert (= (and b!98999 c!16894) b!98996))

(assert (= (and b!98999 (not c!16894)) b!98997))

(assert (= (or b!98996 b!98997) bm!10119))

(declare-fun m!108973 () Bool)

(assert (=> bm!10119 m!108973))

(assert (=> b!98999 m!108059))

(assert (=> b!98999 m!108059))

(assert (=> b!98999 m!108061))

(assert (=> bm!9984 d!26639))

(declare-fun d!26641 () Bool)

(declare-fun e!64506 () Bool)

(assert (=> d!26641 e!64506))

(declare-fun res!49761 () Bool)

(assert (=> d!26641 (=> (not res!49761) (not e!64506))))

(declare-fun lt!49813 () ListLongMap!1551)

(assert (=> d!26641 (= res!49761 (contains!805 lt!49813 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(declare-fun lt!49815 () List!1612)

(assert (=> d!26641 (= lt!49813 (ListLongMap!1552 lt!49815))))

(declare-fun lt!49816 () Unit!2965)

(declare-fun lt!49814 () Unit!2965)

(assert (=> d!26641 (= lt!49816 lt!49814)))

(assert (=> d!26641 (= (getValueByKey!149 lt!49815 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!154 (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26641 (= lt!49814 (lemmaContainsTupThenGetReturnValue!67 lt!49815 (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26641 (= lt!49815 (insertStrictlySorted!69 (toList!791 call!9974) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))))))

(assert (=> d!26641 (= (+!138 call!9974 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))) lt!49813)))

(declare-fun b!99000 () Bool)

(declare-fun res!49760 () Bool)

(assert (=> b!99000 (=> (not res!49760) (not e!64506))))

(assert (=> b!99000 (= res!49760 (= (getValueByKey!149 (toList!791 lt!49813) (_1!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16))))) (Some!154 (_2!1186 (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))))

(declare-fun b!99001 () Bool)

(assert (=> b!99001 (= e!64506 (contains!808 (toList!791 lt!49813) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16562 (ite c!16560 (minValue!2364 newMap!16) (get!1296 (select (arr!2015 (_values!2464 (v!2801 (underlying!339 thiss!992)))) from!355) (dynLambda!378 (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2364 newMap!16)))))))

(assert (= (and d!26641 res!49761) b!99000))

(assert (= (and b!99000 res!49760) b!99001))

(declare-fun m!108975 () Bool)

(assert (=> d!26641 m!108975))

(declare-fun m!108977 () Bool)

(assert (=> d!26641 m!108977))

(declare-fun m!108979 () Bool)

(assert (=> d!26641 m!108979))

(declare-fun m!108981 () Bool)

(assert (=> d!26641 m!108981))

(declare-fun m!108983 () Bool)

(assert (=> b!99000 m!108983))

(declare-fun m!108985 () Bool)

(assert (=> b!99001 m!108985))

(assert (=> b!97884 d!26641))

(declare-fun d!26643 () Bool)

(declare-fun res!49762 () Bool)

(declare-fun e!64507 () Bool)

(assert (=> d!26643 (=> (not res!49762) (not e!64507))))

(assert (=> d!26643 (= res!49762 (simpleValid!67 (_2!1187 lt!49155)))))

(assert (=> d!26643 (= (valid!385 (_2!1187 lt!49155)) e!64507)))

(declare-fun b!99002 () Bool)

(declare-fun res!49763 () Bool)

(assert (=> b!99002 (=> (not res!49763) (not e!64507))))

(assert (=> b!99002 (= res!49763 (= (arrayCountValidKeys!0 (_keys!4171 (_2!1187 lt!49155)) #b00000000000000000000000000000000 (size!2264 (_keys!4171 (_2!1187 lt!49155)))) (_size!475 (_2!1187 lt!49155))))))

(declare-fun b!99003 () Bool)

(declare-fun res!49764 () Bool)

(assert (=> b!99003 (=> (not res!49764) (not e!64507))))

(assert (=> b!99003 (= res!49764 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4171 (_2!1187 lt!49155)) (mask!6578 (_2!1187 lt!49155))))))

(declare-fun b!99004 () Bool)

(assert (=> b!99004 (= e!64507 (arrayNoDuplicates!0 (_keys!4171 (_2!1187 lt!49155)) #b00000000000000000000000000000000 Nil!1608))))

(assert (= (and d!26643 res!49762) b!99002))

(assert (= (and b!99002 res!49763) b!99003))

(assert (= (and b!99003 res!49764) b!99004))

(declare-fun m!108987 () Bool)

(assert (=> d!26643 m!108987))

(declare-fun m!108989 () Bool)

(assert (=> b!99002 m!108989))

(declare-fun m!108991 () Bool)

(assert (=> b!99003 m!108991))

(declare-fun m!108993 () Bool)

(assert (=> b!99004 m!108993))

(assert (=> b!97998 d!26643))

(assert (=> b!98128 d!26433))

(assert (=> b!98128 d!26405))

(declare-fun d!26645 () Bool)

(assert (=> d!26645 (isDefined!103 (getValueByKey!149 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!49817 () Unit!2965)

(assert (=> d!26645 (= lt!49817 (choose!596 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64508 () Bool)

(assert (=> d!26645 e!64508))

(declare-fun res!49765 () Bool)

(assert (=> d!26645 (=> (not res!49765) (not e!64508))))

(assert (=> d!26645 (= res!49765 (isStrictlySorted!299 (toList!791 lt!48891)))))

(assert (=> d!26645 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000) lt!49817)))

(declare-fun b!99005 () Bool)

(assert (=> b!99005 (= e!64508 (containsKey!153 (toList!791 lt!48891) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26645 res!49765) b!99005))

(assert (=> d!26645 m!107041))

(assert (=> d!26645 m!107041))

(assert (=> d!26645 m!107385))

(declare-fun m!108995 () Bool)

(assert (=> d!26645 m!108995))

(assert (=> d!26645 m!108359))

(assert (=> b!99005 m!107381))

(assert (=> b!98170 d!26645))

(assert (=> b!98170 d!26409))

(assert (=> b!98170 d!26411))

(assert (=> d!26087 d!26185))

(declare-fun d!26647 () Bool)

(assert (=> d!26647 (isDefined!103 (getValueByKey!149 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun lt!49818 () Unit!2965)

(assert (=> d!26647 (= lt!49818 (choose!596 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(declare-fun e!64509 () Bool)

(assert (=> d!26647 e!64509))

(declare-fun res!49766 () Bool)

(assert (=> d!26647 (=> (not res!49766) (not e!64509))))

(assert (=> d!26647 (= res!49766 (isStrictlySorted!299 (toList!791 call!9950)))))

(assert (=> d!26647 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!102 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)) lt!49818)))

(declare-fun b!99006 () Bool)

(assert (=> b!99006 (= e!64509 (containsKey!153 (toList!791 call!9950) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) from!355)))))

(assert (= (and d!26647 res!49766) b!99006))

(assert (=> d!26647 m!106609))

(assert (=> d!26647 m!106967))

(assert (=> d!26647 m!106967))

(assert (=> d!26647 m!106969))

(assert (=> d!26647 m!106609))

(declare-fun m!108997 () Bool)

(assert (=> d!26647 m!108997))

(declare-fun m!108999 () Bool)

(assert (=> d!26647 m!108999))

(assert (=> b!99006 m!106609))

(assert (=> b!99006 m!106963))

(assert (=> b!97894 d!26647))

(assert (=> b!97894 d!26413))

(assert (=> b!97894 d!26415))

(declare-fun lt!49819 () Bool)

(declare-fun d!26649 () Bool)

(assert (=> d!26649 (= lt!49819 (select (content!101 (toList!791 lt!49218)) (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun e!64510 () Bool)

(assert (=> d!26649 (= lt!49819 e!64510)))

(declare-fun res!49767 () Bool)

(assert (=> d!26649 (=> (not res!49767) (not e!64510))))

(assert (=> d!26649 (= res!49767 ((_ is Cons!1608) (toList!791 lt!49218)))))

(assert (=> d!26649 (= (contains!808 (toList!791 lt!49218) (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!49819)))

(declare-fun b!99007 () Bool)

(declare-fun e!64511 () Bool)

(assert (=> b!99007 (= e!64510 e!64511)))

(declare-fun res!49768 () Bool)

(assert (=> b!99007 (=> res!49768 e!64511)))

(assert (=> b!99007 (= res!49768 (= (h!2202 (toList!791 lt!49218)) (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!99008 () Bool)

(assert (=> b!99008 (= e!64511 (contains!808 (t!5574 (toList!791 lt!49218)) (tuple2!2353 lt!48882 (minValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(assert (= (and d!26649 res!49767) b!99007))

(assert (= (and b!99007 (not res!49768)) b!99008))

(declare-fun m!109001 () Bool)

(assert (=> d!26649 m!109001))

(declare-fun m!109003 () Bool)

(assert (=> d!26649 m!109003))

(declare-fun m!109005 () Bool)

(assert (=> b!99008 m!109005))

(assert (=> b!98082 d!26649))

(assert (=> b!97934 d!26449))

(assert (=> b!97934 d!26451))

(declare-fun lt!49820 () Bool)

(declare-fun d!26651 () Bool)

(assert (=> d!26651 (= lt!49820 (select (content!101 (toList!791 lt!49282)) (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun e!64512 () Bool)

(assert (=> d!26651 (= lt!49820 e!64512)))

(declare-fun res!49769 () Bool)

(assert (=> d!26651 (=> (not res!49769) (not e!64512))))

(assert (=> d!26651 (= res!49769 ((_ is Cons!1608) (toList!791 lt!49282)))))

(assert (=> d!26651 (= (contains!808 (toList!791 lt!49282) (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))) lt!49820)))

(declare-fun b!99009 () Bool)

(declare-fun e!64513 () Bool)

(assert (=> b!99009 (= e!64512 e!64513)))

(declare-fun res!49770 () Bool)

(assert (=> b!99009 (=> res!49770 e!64513)))

(assert (=> b!99009 (= res!49770 (= (h!2202 (toList!791 lt!49282)) (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(declare-fun b!99010 () Bool)

(assert (=> b!99010 (= e!64513 (contains!808 (t!5574 (toList!791 lt!49282)) (ite (or c!16514 c!16519) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 (v!2801 (underlying!339 thiss!992)))) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 (v!2801 (underlying!339 thiss!992)))))))))

(assert (= (and d!26651 res!49769) b!99009))

(assert (= (and b!99009 (not res!49770)) b!99010))

(declare-fun m!109007 () Bool)

(assert (=> d!26651 m!109007))

(declare-fun m!109009 () Bool)

(assert (=> d!26651 m!109009))

(declare-fun m!109011 () Bool)

(assert (=> b!99010 m!109011))

(assert (=> b!98151 d!26651))

(declare-fun d!26653 () Bool)

(declare-fun isEmpty!363 (List!1612) Bool)

(assert (=> d!26653 (= (isEmpty!362 lt!49205) (isEmpty!363 (toList!791 lt!49205)))))

(declare-fun bs!4092 () Bool)

(assert (= bs!4092 d!26653))

(declare-fun m!109013 () Bool)

(assert (=> bs!4092 m!109013))

(assert (=> b!98058 d!26653))

(declare-fun d!26655 () Bool)

(assert (=> d!26655 (= (get!1300 (getValueByKey!149 (toList!791 lt!48883) lt!48892)) (v!2805 (getValueByKey!149 (toList!791 lt!48883) lt!48892)))))

(assert (=> d!26119 d!26655))

(declare-fun b!99012 () Bool)

(declare-fun e!64514 () Option!155)

(declare-fun e!64515 () Option!155)

(assert (=> b!99012 (= e!64514 e!64515)))

(declare-fun c!16897 () Bool)

(assert (=> b!99012 (= c!16897 (and ((_ is Cons!1608) (toList!791 lt!48883)) (not (= (_1!1186 (h!2202 (toList!791 lt!48883))) lt!48892))))))

(declare-fun b!99014 () Bool)

(assert (=> b!99014 (= e!64515 None!153)))

(declare-fun d!26657 () Bool)

(declare-fun c!16896 () Bool)

(assert (=> d!26657 (= c!16896 (and ((_ is Cons!1608) (toList!791 lt!48883)) (= (_1!1186 (h!2202 (toList!791 lt!48883))) lt!48892)))))

(assert (=> d!26657 (= (getValueByKey!149 (toList!791 lt!48883) lt!48892) e!64514)))

(declare-fun b!99013 () Bool)

(assert (=> b!99013 (= e!64515 (getValueByKey!149 (t!5574 (toList!791 lt!48883)) lt!48892))))

(declare-fun b!99011 () Bool)

(assert (=> b!99011 (= e!64514 (Some!154 (_2!1186 (h!2202 (toList!791 lt!48883)))))))

(assert (= (and d!26657 c!16896) b!99011))

(assert (= (and d!26657 (not c!16896)) b!99012))

(assert (= (and b!99012 c!16897) b!99013))

(assert (= (and b!99012 (not c!16897)) b!99014))

(declare-fun m!109015 () Bool)

(assert (=> b!99013 m!109015))

(assert (=> d!26119 d!26657))

(assert (=> b!97994 d!26129))

(declare-fun d!26659 () Bool)

(declare-fun e!64516 () Bool)

(assert (=> d!26659 e!64516))

(declare-fun res!49772 () Bool)

(assert (=> d!26659 (=> (not res!49772) (not e!64516))))

(declare-fun lt!49821 () ListLongMap!1551)

(assert (=> d!26659 (= res!49772 (contains!805 lt!49821 (_1!1186 (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(declare-fun lt!49823 () List!1612)

(assert (=> d!26659 (= lt!49821 (ListLongMap!1552 lt!49823))))

(declare-fun lt!49824 () Unit!2965)

(declare-fun lt!49822 () Unit!2965)

(assert (=> d!26659 (= lt!49824 lt!49822)))

(assert (=> d!26659 (= (getValueByKey!149 lt!49823 (_1!1186 (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))) (Some!154 (_2!1186 (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26659 (= lt!49822 (lemmaContainsTupThenGetReturnValue!67 lt!49823 (_1!1186 (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (_2!1186 (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26659 (= lt!49823 (insertStrictlySorted!69 (toList!791 (ite c!16588 call!9979 (ite c!16593 call!9982 call!9977))) (_1!1186 (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) (_2!1186 (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))))))

(assert (=> d!26659 (= (+!138 (ite c!16588 call!9979 (ite c!16593 call!9982 call!9977)) (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))) lt!49821)))

(declare-fun b!99015 () Bool)

(declare-fun res!49771 () Bool)

(assert (=> b!99015 (=> (not res!49771) (not e!64516))))

(assert (=> b!99015 (= res!49771 (= (getValueByKey!149 (toList!791 lt!49821) (_1!1186 (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16))))) (Some!154 (_2!1186 (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))))

(declare-fun b!99016 () Bool)

(assert (=> b!99016 (= e!64516 (contains!808 (toList!791 lt!49821) (ite (or c!16588 c!16593) (tuple2!2353 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2364 newMap!16)) (tuple2!2353 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2364 newMap!16)))))))

(assert (= (and d!26659 res!49772) b!99015))

(assert (= (and b!99015 res!49771) b!99016))

(declare-fun m!109017 () Bool)

(assert (=> d!26659 m!109017))

(declare-fun m!109019 () Bool)

(assert (=> d!26659 m!109019))

(declare-fun m!109021 () Bool)

(assert (=> d!26659 m!109021))

(declare-fun m!109023 () Bool)

(assert (=> d!26659 m!109023))

(declare-fun m!109025 () Bool)

(assert (=> b!99015 m!109025))

(declare-fun m!109027 () Bool)

(assert (=> b!99016 m!109027))

(assert (=> bm!9975 d!26659))

(declare-fun lt!49825 () Bool)

(declare-fun d!26661 () Bool)

(assert (=> d!26661 (= lt!49825 (select (content!101 (toList!791 lt!49227)) (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun e!64517 () Bool)

(assert (=> d!26661 (= lt!49825 e!64517)))

(declare-fun res!49773 () Bool)

(assert (=> d!26661 (=> (not res!49773) (not e!64517))))

(assert (=> d!26661 (= res!49773 ((_ is Cons!1608) (toList!791 lt!49227)))))

(assert (=> d!26661 (= (contains!808 (toList!791 lt!49227) (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))) lt!49825)))

(declare-fun b!99017 () Bool)

(declare-fun e!64518 () Bool)

(assert (=> b!99017 (= e!64517 e!64518)))

(declare-fun res!49774 () Bool)

(assert (=> b!99017 (=> res!49774 e!64518)))

(assert (=> b!99017 (= res!49774 (= (h!2202 (toList!791 lt!49227)) (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(declare-fun b!99018 () Bool)

(assert (=> b!99018 (= e!64518 (contains!808 (t!5574 (toList!791 lt!49227)) (tuple2!2353 lt!48886 (zeroValue!2364 (v!2801 (underlying!339 thiss!992))))))))

(assert (= (and d!26661 res!49773) b!99017))

(assert (= (and b!99017 (not res!49774)) b!99018))

(declare-fun m!109029 () Bool)

(assert (=> d!26661 m!109029))

(declare-fun m!109031 () Bool)

(assert (=> d!26661 m!109031))

(declare-fun m!109033 () Bool)

(assert (=> b!99018 m!109033))

(assert (=> b!98087 d!26661))

(declare-fun d!26663 () Bool)

(assert (=> d!26663 (= (get!1300 (getValueByKey!149 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2805 (getValueByKey!149 (toList!791 lt!48891) (select (arr!2014 (_keys!4171 (v!2801 (underlying!339 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26047 d!26663))

(assert (=> d!26047 d!26195))

(declare-fun d!26665 () Bool)

(assert (=> d!26665 (= (apply!92 lt!49280 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1300 (getValueByKey!149 (toList!791 lt!49280) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4093 () Bool)

(assert (= bs!4093 d!26665))

(assert (=> bs!4093 m!108843))

(assert (=> bs!4093 m!108843))

(declare-fun m!109035 () Bool)

(assert (=> bs!4093 m!109035))

(assert (=> b!98140 d!26665))

(declare-fun mapIsEmpty!3759 () Bool)

(declare-fun mapRes!3759 () Bool)

(assert (=> mapIsEmpty!3759 mapRes!3759))

(declare-fun condMapEmpty!3759 () Bool)

(declare-fun mapDefault!3759 () ValueCell!972)

(assert (=> mapNonEmpty!3757 (= condMapEmpty!3759 (= mapRest!3757 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3759)))))

(declare-fun e!64519 () Bool)

(assert (=> mapNonEmpty!3757 (= tp!9589 (and e!64519 mapRes!3759))))

(declare-fun b!99019 () Bool)

(declare-fun e!64520 () Bool)

(assert (=> b!99019 (= e!64520 tp_is_empty!2631)))

(declare-fun b!99020 () Bool)

(assert (=> b!99020 (= e!64519 tp_is_empty!2631)))

(declare-fun mapNonEmpty!3759 () Bool)

(declare-fun tp!9591 () Bool)

(assert (=> mapNonEmpty!3759 (= mapRes!3759 (and tp!9591 e!64520))))

(declare-fun mapRest!3759 () (Array (_ BitVec 32) ValueCell!972))

(declare-fun mapValue!3759 () ValueCell!972)

(declare-fun mapKey!3759 () (_ BitVec 32))

(assert (=> mapNonEmpty!3759 (= mapRest!3757 (store mapRest!3759 mapKey!3759 mapValue!3759))))

(assert (= (and mapNonEmpty!3757 condMapEmpty!3759) mapIsEmpty!3759))

(assert (= (and mapNonEmpty!3757 (not condMapEmpty!3759)) mapNonEmpty!3759))

(assert (= (and mapNonEmpty!3759 ((_ is ValueCellFull!972) mapValue!3759)) b!99019))

(assert (= (and mapNonEmpty!3757 ((_ is ValueCellFull!972) mapDefault!3759)) b!99020))

(declare-fun m!109037 () Bool)

(assert (=> mapNonEmpty!3759 m!109037))

(declare-fun mapIsEmpty!3760 () Bool)

(declare-fun mapRes!3760 () Bool)

(assert (=> mapIsEmpty!3760 mapRes!3760))

(declare-fun condMapEmpty!3760 () Bool)

(declare-fun mapDefault!3760 () ValueCell!972)

(assert (=> mapNonEmpty!3758 (= condMapEmpty!3760 (= mapRest!3758 ((as const (Array (_ BitVec 32) ValueCell!972)) mapDefault!3760)))))

(declare-fun e!64521 () Bool)

(assert (=> mapNonEmpty!3758 (= tp!9590 (and e!64521 mapRes!3760))))

(declare-fun b!99021 () Bool)

(declare-fun e!64522 () Bool)

(assert (=> b!99021 (= e!64522 tp_is_empty!2631)))

(declare-fun b!99022 () Bool)

(assert (=> b!99022 (= e!64521 tp_is_empty!2631)))

(declare-fun mapNonEmpty!3760 () Bool)

(declare-fun tp!9592 () Bool)

(assert (=> mapNonEmpty!3760 (= mapRes!3760 (and tp!9592 e!64522))))

(declare-fun mapValue!3760 () ValueCell!972)

(declare-fun mapRest!3760 () (Array (_ BitVec 32) ValueCell!972))

(declare-fun mapKey!3760 () (_ BitVec 32))

(assert (=> mapNonEmpty!3760 (= mapRest!3758 (store mapRest!3760 mapKey!3760 mapValue!3760))))

(assert (= (and mapNonEmpty!3758 condMapEmpty!3760) mapIsEmpty!3760))

(assert (= (and mapNonEmpty!3758 (not condMapEmpty!3760)) mapNonEmpty!3760))

(assert (= (and mapNonEmpty!3760 ((_ is ValueCellFull!972) mapValue!3760)) b!99021))

(assert (= (and mapNonEmpty!3758 ((_ is ValueCellFull!972) mapDefault!3760)) b!99022))

(declare-fun m!109039 () Bool)

(assert (=> mapNonEmpty!3760 m!109039))

(declare-fun b_lambda!4413 () Bool)

(assert (= b_lambda!4397 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4413)))

(declare-fun b_lambda!4415 () Bool)

(assert (= b_lambda!4383 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4415)))

(declare-fun b_lambda!4417 () Bool)

(assert (= b_lambda!4401 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4417)))

(declare-fun b_lambda!4419 () Bool)

(assert (= b_lambda!4407 (or (and b!97514 b_free!2429) (and b!97516 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))))) b_lambda!4419)))

(declare-fun b_lambda!4421 () Bool)

(assert (= b_lambda!4403 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4421)))

(declare-fun b_lambda!4423 () Bool)

(assert (= b_lambda!4393 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4423)))

(declare-fun b_lambda!4425 () Bool)

(assert (= b_lambda!4395 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4425)))

(declare-fun b_lambda!4427 () Bool)

(assert (= b_lambda!4387 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4427)))

(declare-fun b_lambda!4429 () Bool)

(assert (= b_lambda!4391 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4429)))

(declare-fun b_lambda!4431 () Bool)

(assert (= b_lambda!4385 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4431)))

(declare-fun b_lambda!4433 () Bool)

(assert (= b_lambda!4389 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4433)))

(declare-fun b_lambda!4435 () Bool)

(assert (= b_lambda!4405 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4435)))

(declare-fun b_lambda!4437 () Bool)

(assert (= b_lambda!4409 (or (and b!97514 b_free!2429) (and b!97516 b_free!2431 (= (defaultEntry!2481 newMap!16) (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))))) b_lambda!4437)))

(declare-fun b_lambda!4439 () Bool)

(assert (= b_lambda!4399 (or (and b!97514 b_free!2429 (= (defaultEntry!2481 (v!2801 (underlying!339 thiss!992))) (defaultEntry!2481 newMap!16))) (and b!97516 b_free!2431) b_lambda!4439)))

(check-sat (not b!98182) (not b!98692) (not bm!10017) (not d!26385) (not b!98498) (not b!98769) (not d!26231) (not d!26629) (not d!26245) (not b!98295) (not b!98379) (not b!98556) (not b!98194) (not d!26517) (not b!98180) (not d!26539) (not d!26619) (not d!26235) (not b!98531) (not d!26433) (not d!26189) (not b!98818) (not b!98413) (not d!26287) (not b!98344) (not d!26661) (not b!98426) b_and!6089 (not b!98583) (not b_lambda!4437) (not b!98349) (not b_lambda!4415) (not b!98502) (not b!98593) (not b!98324) (not b!98951) (not b!98751) (not b!98457) (not bm!10113) (not b!98922) (not b!98469) (not b!98453) (not b!98521) (not bm!10112) (not b!98582) (not d!26575) (not b!98367) (not b!98927) (not b!98810) (not b!98538) (not b!98448) (not b!98848) (not b!98828) (not d!26297) (not bm!10036) (not b!98838) (not b!98510) (not b!98473) (not b!98588) (not d!26277) (not b!98820) (not b!98918) (not d!26263) (not bm!10089) (not d!26381) (not bm!10044) (not b!98518) (not b!98645) (not b!98968) (not b!98794) (not b!98946) (not b!98438) (not b_next!2429) (not b!98731) (not b!99000) (not b!98397) (not b!98637) (not d!26557) (not b!98483) (not d!26221) (not b!98494) (not b!98427) (not b_lambda!4417) (not b!98300) (not b!98275) (not d!26375) (not bm!10100) (not b!98263) (not b!98932) (not b!98567) (not d!26353) (not d!26337) (not b!98656) (not b!98885) (not d!26203) (not b!98727) (not b!98416) (not d!26533) (not d!26435) (not b!98568) (not d!26247) (not d!26183) (not b_lambda!4435) (not bm!10068) (not b!98760) (not b!98395) (not b_lambda!4421) (not b!98554) (not b!98368) (not d!26425) (not d!26407) (not b!98325) (not b!98475) (not d!26453) (not b!98248) (not b!98527) (not b!98862) (not d!26457) (not b!98790) (not d!26449) (not b!98797) (not b!98843) (not d!26423) (not b!98277) (not b!98930) (not d!26567) (not b!98374) (not d!26349) (not b!98961) (not b!98291) (not d!26637) (not b!98546) (not d!26377) (not d!26479) (not b!98509) (not bm!10035) (not d!26319) (not bm!10032) (not b!99013) (not b!98655) (not d!26531) (not b!98580) (not b!98288) (not b!98886) (not bm!10092) (not b!98672) (not d!26445) (not b!98823) (not b!98724) (not d!26579) (not bm!10029) (not d!26361) (not b!98799) (not b!98247) (not bm!10051) (not b!98978) (not b!98326) (not b!98482) (not b!98686) (not b!98513) (not d!26493) (not b_lambda!4381) (not d!26295) (not bm!10047) (not d!26239) (not bm!10095) (not bm!10099) (not bm!10041) (not b!98826) (not b!98233) (not b_next!2431) (not b!98846) (not b!98566) (not b!98442) (not d!26339) (not d!26205) (not d!26647) (not b!98941) (not b_lambda!4373) (not d!26173) (not d!26483) (not d!26599) (not b!98783) (not d!26491) (not d!26283) (not d!26249) (not d!26291) (not d!26229) (not d!26273) (not b!98421) (not b!98303) (not d!26473) (not d!26187) (not d!26561) (not b!98260) (not b!98393) (not bm!10073) (not b!98242) (not b_lambda!4439) (not b!98402) (not b!98542) (not bm!10059) (not d!26391) (not b!98689) (not bm!10054) (not b_lambda!4377) (not d!26475) (not b!99006) (not b!98669) (not bm!10061) (not b_lambda!4433) (not d!26311) (not b!98406) (not b!98779) (not d!26595) (not b!98228) (not b!98330) (not bm!10074) (not b!98928) (not b!98770) (not b!99002) (not b!98350) (not d!26315) (not bm!10072) (not b!98675) (not b!98318) (not bm!10110) (not b!98405) (not b_lambda!4419) (not d!26299) (not b!98534) (not d!26285) (not b!98587) tp_is_empty!2631 (not d!26515) (not d!26333) (not b!98184) (not bm!10088) (not b!98253) (not d!26495) (not b!98576) (not b!98297) (not d!26605) (not b!98674) (not b!98553) (not bm!10118) (not d!26535) (not b!98520) (not d!26193) (not b!98236) (not d!26507) (not d!26401) (not b!98808) (not b!98312) (not b!98441) (not d!26439) (not b!98465) (not b_lambda!4361) (not b!98840) (not b!98816) (not b!98239) (not b!98215) (not d!26157) (not d!26523) (not b!98381) (not b!98282) (not b!99001) (not b!98515) (not bm!10082) (not b!98478) (not bm!10060) (not d!26223) (not b!98337) (not b!98503) (not bm!10052) (not bm!10042) (not b!98650) (not d!26251) (not b!98864) (not b!98950) (not b!98772) (not b!98187) (not b!98681) (not b!98611) (not b!98851) (not d!26641) (not b!98860) (not bm!10106) (not b!99015) (not b!98875) (not b!98403) (not b!98697) (not d!26645) (not d!26305) (not b!98792) (not d!26227) (not b!98871) (not d!26597) (not b!98519) (not b!98380) (not b!98454) (not d!26351) (not d!26259) (not bm!10067) (not d!26447) (not b!98460) (not b!98992) (not bm!10033) (not b!98240) (not b!98671) (not d!26501) (not b!98274) (not b!98722) (not bm!10024) (not d!26513) (not d!26213) (not b!98785) (not b!99003) (not bm!10043) (not b!98287) (not d!26541) (not b!98420) (not b!99005) (not b!98455) (not d!26519) (not b!98560) (not d!26329) (not b!98389) (not d!26485) (not d!26399) (not d!26281) (not b!98514) (not b!98536) (not b!98497) (not b!98472) (not b!98888) (not d!26543) (not b!98307) (not b!98975) (not b!98781) (not b!98602) (not d!26509) (not b!98749) (not b_lambda!4423) (not d!26549) (not bm!10055) (not b!98813) (not d!26181) (not d!26271) (not d!26537) (not b!98234) (not b!98925) (not d!26611) (not d!26443) (not b!98801) (not b!98782) (not d!26233) (not b!98990) (not b!98480) (not b!98693) (not b!98825) (not b!98841) (not b!98353) (not d!26593) (not d!26409) (not b!98345) (not d!26359) (not b!98663) (not b!98665) (not b!98384) (not b!98562) (not b!98970) (not b!98868) (not b!98811) (not b!98651) (not d!26589) (not b!98788) (not d!26345) (not b!98920) (not b!98446) (not b!98748) (not d!26371) (not b!98641) (not b!98436) (not d!26499) (not b!98974) (not b!98939) (not b!98659) (not b!98335) (not b!98216) (not b_lambda!4413) (not d!26431) (not b!98524) (not b!98958) (not d!26643) (not d!26413) (not b!99016) (not d!26545) (not d!26207) (not b!98969) (not b_lambda!4425) (not b!98500) (not b!98606) (not d!26309) (not b!98598) (not d!26343) (not b!98849) (not b!98458) (not b!98414) (not b!98815) (not d!26649) (not d!26455) b_and!6091 (not b!98461) (not b!98430) (not b!98995) (not d!26153) (not b!99008) (not b!98803) (not b!98372) (not b!98883) (not b!98526) (not b!98684) (not b!99004) (not d!26379) (not b!98246) (not b!98750) (not b!99010) (not d!26209) (not b!98695) (not d!26275) (not b!98678) (not b!98320) (not d!26289) (not bm!10081) (not bm!10046) (not b_lambda!4427) (not b!98830) (not b!98370) (not b!98805) (not b_lambda!4357) (not b!98746) (not d!26555) (not d!26269) (not bm!10078) (not b!98462) (not d!26437) (not b!98445) (not b!98485) (not d!26467) (not b!98817) (not b!98339) (not b!98481) (not b_lambda!4375) (not d!26279) (not b!98357) (not d!26505) (not b!98422) (not b!98729) (not d!26665) (not b!98881) (not b!98768) (not b!98595) (not bm!10087) (not d!26323) (not bm!10077) (not b!98332) (not d!26383) (not d!26257) (not d!26161) (not b!98911) (not b_lambda!4431) (not bm!10075) (not bm!10103) (not b!98193) (not b!98614) (not d!26293) (not d!26569) (not b!98643) (not b!98343) (not b!98879) (not b!98730) (not b!98281) (not b!98226) (not b!98765) (not b!98991) (not b!98613) (not b!98266) (not bm!10065) (not bm!10064) (not bm!10028) (not d!26487) (not b!98535) (not b!98802) (not b_lambda!4379) (not b!99018) (not b_lambda!4411) (not b!98218) (not b!98791) (not b!98440) (not b!98506) (not b!98827) (not bm!10039) (not d!26659) (not mapNonEmpty!3759) (not b!98371) (not d!26527) (not d!26261) (not b!98753) (not b!98649) (not b!98181) (not b!98929) (not b!98404) (not b!98512) (not bm!10050) (not b!98734) (not d!26653) (not b!98334) (not b!98986) (not b!98634) (not b!98464) (not b!98529) (not b!98682) (not b!98522) (not bm!10107) (not d!26347) (not d!26441) (not b!98376) (not b!98496) (not d!26163) (not b!98586) (not b!98743) (not b!98558) (not d!26355) (not d!26591) (not bm!10119) (not d!26651) (not b!98787) (not d!26503) (not b!98450) (not d!26613) (not b!98179) (not b!98439) (not d!26609) (not b!98732) (not b!98329) (not b!98741) (not b!98853) (not b!98982) (not bm!10071) (not b!98539) (not b!98667) (not b!98572) (not d!26201) (not d!26171) (not d!26197) (not d!26363) (not d!26525) (not b!98814) (not d!26341) (not d!26551) (not b!98377) (not bm!10040) (not d!26419) (not d!26465) (not d!26321) (not b_lambda!4429) (not b!98451) (not b!98252) (not d!26265) (not b!98584) (not b!98256) (not b!98762) (not b!98408) (not mapNonEmpty!3760) (not b!98317) (not d!26421) (not b!98807) (not b!98273) (not b!98632) (not b!98532) (not b!98955) (not d!26357) (not b!98839) (not b!98231) (not bm!10098) (not bm!10058) (not d!26521) (not b!98993) (not b!98639) (not b!98283) (not b!98767) (not bm!10116) (not d!26335) (not b!98952) (not b!98573) (not b!98411) (not b!98238) (not b!98796) (not d!26615) (not b!98999) (not b!98466) (not b!98434) (not d!26159) (not d!26199) (not b!98850) (not b!98964) (not b!98592) (not b!98866) (not bm!10117) (not d!26253) (not d!26529) (not d!26563) (not b!98511))
(check-sat b_and!6089 b_and!6091 (not b_next!2429) (not b_next!2431))
