; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!11812 () Bool)

(assert start!11812)

(declare-fun b!99123 () Bool)

(declare-fun b_free!2441 () Bool)

(declare-fun b_next!2441 () Bool)

(assert (=> b!99123 (= b_free!2441 (not b_next!2441))))

(declare-fun tp!9614 () Bool)

(declare-fun b_and!6101 () Bool)

(assert (=> b!99123 (= tp!9614 b_and!6101)))

(declare-fun b!99136 () Bool)

(declare-fun b_free!2443 () Bool)

(declare-fun b_next!2443 () Bool)

(assert (=> b!99136 (= b_free!2443 (not b_next!2443))))

(declare-fun tp!9616 () Bool)

(declare-fun b_and!6103 () Bool)

(assert (=> b!99136 (= tp!9616 b_and!6103)))

(declare-fun b!99120 () Bool)

(declare-fun e!64605 () Bool)

(declare-datatypes ((V!3163 0))(
  ( (V!3164 (val!1363 Int)) )
))
(declare-datatypes ((array!4254 0))(
  ( (array!4255 (arr!2020 (Array (_ BitVec 32) (_ BitVec 64))) (size!2271 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!975 0))(
  ( (ValueCellFull!975 (v!2816 V!3163)) (EmptyCell!975) )
))
(declare-datatypes ((array!4256 0))(
  ( (array!4257 (arr!2021 (Array (_ BitVec 32) ValueCell!975)) (size!2272 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!858 0))(
  ( (LongMapFixedSize!859 (defaultEntry!2502 Int) (mask!6609 (_ BitVec 32)) (extraKeys!2319 (_ BitVec 32)) (zeroValue!2383 V!3163) (minValue!2383 V!3163) (_size!478 (_ BitVec 32)) (_keys!4196 array!4254) (_values!2485 array!4256) (_vacant!478 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!662 0))(
  ( (Cell!663 (v!2817 LongMapFixedSize!858)) )
))
(declare-datatypes ((LongMap!662 0))(
  ( (LongMap!663 (underlying!342 Cell!662)) )
))
(declare-fun thiss!992 () LongMap!662)

(assert (=> b!99120 (= e!64605 (and (= (size!2272 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!6609 (v!2817 (underlying!342 thiss!992))))) (= (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (size!2272 (_values!2485 (v!2817 (underlying!342 thiss!992))))) (bvsge (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000) (bvsge (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000) (bvsgt (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000011)))))

(declare-fun mapIsEmpty!3771 () Bool)

(declare-fun mapRes!3772 () Bool)

(assert (=> mapIsEmpty!3771 mapRes!3772))

(declare-fun b!99121 () Bool)

(declare-fun e!64614 () Bool)

(declare-fun e!64606 () Bool)

(assert (=> b!99121 (= e!64614 e!64606)))

(declare-fun b!99122 () Bool)

(declare-fun e!64609 () Bool)

(assert (=> b!99122 (= e!64609 e!64605)))

(declare-fun res!49810 () Bool)

(assert (=> b!99122 (=> (not res!49810) (not e!64605))))

(declare-datatypes ((tuple2!2364 0))(
  ( (tuple2!2365 (_1!1192 Bool) (_2!1192 LongMapFixedSize!858)) )
))
(declare-fun lt!49863 () tuple2!2364)

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!99122 (= res!49810 (and (_1!1192 lt!49863) (bvsle from!355 #b00000000000000000000000000000000)))))

(declare-datatypes ((Unit!3031 0))(
  ( (Unit!3032) )
))
(declare-fun lt!49864 () Unit!3031)

(declare-fun e!64613 () Unit!3031)

(assert (=> b!99122 (= lt!49864 e!64613)))

(declare-fun c!16903 () Bool)

(declare-datatypes ((tuple2!2366 0))(
  ( (tuple2!2367 (_1!1193 (_ BitVec 64)) (_2!1193 V!3163)) )
))
(declare-datatypes ((List!1615 0))(
  ( (Nil!1612) (Cons!1611 (h!2206 tuple2!2366) (t!5597 List!1615)) )
))
(declare-datatypes ((ListLongMap!1557 0))(
  ( (ListLongMap!1558 (toList!794 List!1615)) )
))
(declare-fun lt!49862 () ListLongMap!1557)

(declare-fun contains!810 (ListLongMap!1557 (_ BitVec 64)) Bool)

(assert (=> b!99122 (= c!16903 (contains!810 lt!49862 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun newMap!16 () LongMapFixedSize!858)

(declare-fun update!149 (LongMapFixedSize!858 (_ BitVec 64) V!3163) tuple2!2364)

(declare-fun get!1304 (ValueCell!975 V!3163) V!3163)

(declare-fun dynLambda!381 (Int (_ BitVec 64)) V!3163)

(assert (=> b!99122 (= lt!49863 (update!149 newMap!16 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun e!64616 () Bool)

(declare-fun e!64604 () Bool)

(declare-fun tp_is_empty!2637 () Bool)

(declare-fun array_inv!1217 (array!4254) Bool)

(declare-fun array_inv!1218 (array!4256) Bool)

(assert (=> b!99123 (= e!64616 (and tp!9614 tp_is_empty!2637 (array_inv!1217 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (array_inv!1218 (_values!2485 (v!2817 (underlying!342 thiss!992)))) e!64604))))

(declare-fun b!99124 () Bool)

(assert (=> b!99124 (= e!64606 e!64616)))

(declare-fun b!99125 () Bool)

(declare-fun res!49815 () Bool)

(declare-fun e!64608 () Bool)

(assert (=> b!99125 (=> (not res!49815) (not e!64608))))

(assert (=> b!99125 (= res!49815 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!99126 () Bool)

(declare-fun e!64615 () Bool)

(assert (=> b!99126 (= e!64604 (and e!64615 mapRes!3772))))

(declare-fun condMapEmpty!3771 () Bool)

(declare-fun mapDefault!3771 () ValueCell!975)

(assert (=> b!99126 (= condMapEmpty!3771 (= (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3771)))))

(declare-fun res!49816 () Bool)

(assert (=> start!11812 (=> (not res!49816) (not e!64608))))

(declare-fun valid!387 (LongMap!662) Bool)

(assert (=> start!11812 (= res!49816 (valid!387 thiss!992))))

(assert (=> start!11812 e!64608))

(assert (=> start!11812 e!64614))

(assert (=> start!11812 true))

(declare-fun e!64607 () Bool)

(assert (=> start!11812 e!64607))

(declare-fun b!99127 () Bool)

(declare-fun res!49814 () Bool)

(assert (=> b!99127 (=> (not res!49814) (not e!64608))))

(declare-fun valid!388 (LongMapFixedSize!858) Bool)

(assert (=> b!99127 (= res!49814 (valid!388 newMap!16))))

(declare-fun mapNonEmpty!3771 () Bool)

(declare-fun tp!9615 () Bool)

(declare-fun e!64617 () Bool)

(assert (=> mapNonEmpty!3771 (= mapRes!3772 (and tp!9615 e!64617))))

(declare-fun mapKey!3772 () (_ BitVec 32))

(declare-fun mapRest!3771 () (Array (_ BitVec 32) ValueCell!975))

(declare-fun mapValue!3772 () ValueCell!975)

(assert (=> mapNonEmpty!3771 (= (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (store mapRest!3771 mapKey!3772 mapValue!3772))))

(declare-fun b!99128 () Bool)

(declare-fun e!64618 () Bool)

(assert (=> b!99128 (= e!64618 tp_is_empty!2637)))

(declare-fun b!99129 () Bool)

(assert (=> b!99129 (= e!64615 tp_is_empty!2637)))

(declare-fun b!99130 () Bool)

(declare-fun Unit!3033 () Unit!3031)

(assert (=> b!99130 (= e!64613 Unit!3033)))

(declare-fun lt!49861 () Unit!3031)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!99 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) (_ BitVec 32) Int) Unit!3031)

(assert (=> b!99130 (= lt!49861 (lemmaListMapContainsThenArrayContainsFrom!99 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!4254 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!99130 (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!49867 () Unit!3031)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!4254 (_ BitVec 32) (_ BitVec 32)) Unit!3031)

(assert (=> b!99130 (= lt!49867 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1616 0))(
  ( (Nil!1613) (Cons!1612 (h!2207 (_ BitVec 64)) (t!5598 List!1616)) )
))
(declare-fun arrayNoDuplicates!0 (array!4254 (_ BitVec 32) List!1616) Bool)

(assert (=> b!99130 (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) from!355 Nil!1613)))

(declare-fun lt!49865 () Unit!3031)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!4254 (_ BitVec 32) (_ BitVec 64) List!1616) Unit!3031)

(assert (=> b!99130 (= lt!49865 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613)))))

(assert (=> b!99130 false))

(declare-fun b!99131 () Bool)

(declare-fun res!49811 () Bool)

(assert (=> b!99131 (=> (not res!49811) (not e!64605))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!99131 (= res!49811 (validMask!0 (mask!6609 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun b!99132 () Bool)

(assert (=> b!99132 (= e!64608 e!64609)))

(declare-fun res!49812 () Bool)

(assert (=> b!99132 (=> (not res!49812) (not e!64609))))

(declare-fun lt!49866 () ListLongMap!1557)

(assert (=> b!99132 (= res!49812 (and (= lt!49866 lt!49862) (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1259 (LongMapFixedSize!858) ListLongMap!1557)

(assert (=> b!99132 (= lt!49862 (map!1259 newMap!16))))

(declare-fun getCurrentListMap!474 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) Int) ListLongMap!1557)

(assert (=> b!99132 (= lt!49866 (getCurrentListMap!474 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun mapIsEmpty!3772 () Bool)

(declare-fun mapRes!3771 () Bool)

(assert (=> mapIsEmpty!3772 mapRes!3771))

(declare-fun b!99133 () Bool)

(assert (=> b!99133 (= e!64617 tp_is_empty!2637)))

(declare-fun b!99134 () Bool)

(declare-fun Unit!3034 () Unit!3031)

(assert (=> b!99134 (= e!64613 Unit!3034)))

(declare-fun b!99135 () Bool)

(declare-fun e!64603 () Bool)

(assert (=> b!99135 (= e!64603 tp_is_empty!2637)))

(declare-fun e!64611 () Bool)

(assert (=> b!99136 (= e!64607 (and tp!9616 tp_is_empty!2637 (array_inv!1217 (_keys!4196 newMap!16)) (array_inv!1218 (_values!2485 newMap!16)) e!64611))))

(declare-fun b!99137 () Bool)

(assert (=> b!99137 (= e!64611 (and e!64618 mapRes!3771))))

(declare-fun condMapEmpty!3772 () Bool)

(declare-fun mapDefault!3772 () ValueCell!975)

(assert (=> b!99137 (= condMapEmpty!3772 (= (arr!2021 (_values!2485 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3772)))))

(declare-fun b!99138 () Bool)

(declare-fun res!49813 () Bool)

(assert (=> b!99138 (=> (not res!49813) (not e!64608))))

(assert (=> b!99138 (= res!49813 (bvsge (bvadd #b00000000000000000000000000000001 (mask!6609 newMap!16)) (_size!478 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun mapNonEmpty!3772 () Bool)

(declare-fun tp!9613 () Bool)

(assert (=> mapNonEmpty!3772 (= mapRes!3771 (and tp!9613 e!64603))))

(declare-fun mapRest!3772 () (Array (_ BitVec 32) ValueCell!975))

(declare-fun mapKey!3771 () (_ BitVec 32))

(declare-fun mapValue!3771 () ValueCell!975)

(assert (=> mapNonEmpty!3772 (= (arr!2021 (_values!2485 newMap!16)) (store mapRest!3772 mapKey!3771 mapValue!3771))))

(assert (= (and start!11812 res!49816) b!99125))

(assert (= (and b!99125 res!49815) b!99127))

(assert (= (and b!99127 res!49814) b!99138))

(assert (= (and b!99138 res!49813) b!99132))

(assert (= (and b!99132 res!49812) b!99122))

(assert (= (and b!99122 c!16903) b!99130))

(assert (= (and b!99122 (not c!16903)) b!99134))

(assert (= (and b!99122 res!49810) b!99131))

(assert (= (and b!99131 res!49811) b!99120))

(assert (= (and b!99126 condMapEmpty!3771) mapIsEmpty!3771))

(assert (= (and b!99126 (not condMapEmpty!3771)) mapNonEmpty!3771))

(get-info :version)

(assert (= (and mapNonEmpty!3771 ((_ is ValueCellFull!975) mapValue!3772)) b!99133))

(assert (= (and b!99126 ((_ is ValueCellFull!975) mapDefault!3771)) b!99129))

(assert (= b!99123 b!99126))

(assert (= b!99124 b!99123))

(assert (= b!99121 b!99124))

(assert (= start!11812 b!99121))

(assert (= (and b!99137 condMapEmpty!3772) mapIsEmpty!3772))

(assert (= (and b!99137 (not condMapEmpty!3772)) mapNonEmpty!3772))

(assert (= (and mapNonEmpty!3772 ((_ is ValueCellFull!975) mapValue!3771)) b!99135))

(assert (= (and b!99137 ((_ is ValueCellFull!975) mapDefault!3772)) b!99128))

(assert (= b!99136 b!99137))

(assert (= start!11812 b!99136))

(declare-fun b_lambda!4443 () Bool)

(assert (=> (not b_lambda!4443) (not b!99122)))

(declare-fun t!5594 () Bool)

(declare-fun tb!1949 () Bool)

(assert (=> (and b!99123 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))) t!5594) tb!1949))

(declare-fun result!3297 () Bool)

(assert (=> tb!1949 (= result!3297 tp_is_empty!2637)))

(assert (=> b!99122 t!5594))

(declare-fun b_and!6105 () Bool)

(assert (= b_and!6101 (and (=> t!5594 result!3297) b_and!6105)))

(declare-fun tb!1951 () Bool)

(declare-fun t!5596 () Bool)

(assert (=> (and b!99136 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))) t!5596) tb!1951))

(declare-fun result!3301 () Bool)

(assert (= result!3301 result!3297))

(assert (=> b!99122 t!5596))

(declare-fun b_and!6107 () Bool)

(assert (= b_and!6103 (and (=> t!5596 result!3301) b_and!6107)))

(declare-fun m!109085 () Bool)

(assert (=> b!99130 m!109085))

(declare-fun m!109087 () Bool)

(assert (=> b!99130 m!109087))

(declare-fun m!109089 () Bool)

(assert (=> b!99130 m!109089))

(declare-fun m!109091 () Bool)

(assert (=> b!99130 m!109091))

(assert (=> b!99130 m!109089))

(assert (=> b!99130 m!109089))

(declare-fun m!109093 () Bool)

(assert (=> b!99130 m!109093))

(assert (=> b!99130 m!109089))

(declare-fun m!109095 () Bool)

(assert (=> b!99130 m!109095))

(declare-fun m!109097 () Bool)

(assert (=> b!99123 m!109097))

(declare-fun m!109099 () Bool)

(assert (=> b!99123 m!109099))

(declare-fun m!109101 () Bool)

(assert (=> mapNonEmpty!3771 m!109101))

(declare-fun m!109103 () Bool)

(assert (=> mapNonEmpty!3772 m!109103))

(declare-fun m!109105 () Bool)

(assert (=> b!99127 m!109105))

(declare-fun m!109107 () Bool)

(assert (=> start!11812 m!109107))

(declare-fun m!109109 () Bool)

(assert (=> b!99131 m!109109))

(assert (=> b!99132 m!109089))

(declare-fun m!109111 () Bool)

(assert (=> b!99132 m!109111))

(declare-fun m!109113 () Bool)

(assert (=> b!99132 m!109113))

(declare-fun m!109115 () Bool)

(assert (=> b!99136 m!109115))

(declare-fun m!109117 () Bool)

(assert (=> b!99136 m!109117))

(declare-fun m!109119 () Bool)

(assert (=> b!99122 m!109119))

(declare-fun m!109121 () Bool)

(assert (=> b!99122 m!109121))

(declare-fun m!109123 () Bool)

(assert (=> b!99122 m!109123))

(assert (=> b!99122 m!109089))

(assert (=> b!99122 m!109089))

(declare-fun m!109125 () Bool)

(assert (=> b!99122 m!109125))

(assert (=> b!99122 m!109121))

(assert (=> b!99122 m!109089))

(assert (=> b!99122 m!109123))

(declare-fun m!109127 () Bool)

(assert (=> b!99122 m!109127))

(assert (=> b!99122 m!109119))

(check-sat (not mapNonEmpty!3771) (not b!99127) (not mapNonEmpty!3772) (not b!99132) (not b!99122) b_and!6107 (not b_next!2441) b_and!6105 (not start!11812) (not b!99136) (not b_next!2443) tp_is_empty!2637 (not b!99131) (not b!99130) (not b_lambda!4443) (not b!99123))
(check-sat b_and!6105 b_and!6107 (not b_next!2441) (not b_next!2443))
(get-model)

(declare-fun b_lambda!4447 () Bool)

(assert (= b_lambda!4443 (or (and b!99123 b_free!2441) (and b!99136 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))))) b_lambda!4447)))

(check-sat (not mapNonEmpty!3771) (not b!99127) (not mapNonEmpty!3772) (not b!99132) (not b!99122) b_and!6107 (not b_next!2441) (not b_lambda!4447) (not b!99123) b_and!6105 (not start!11812) (not b!99136) (not b_next!2443) tp_is_empty!2637 (not b!99131) (not b!99130))
(check-sat b_and!6105 b_and!6107 (not b_next!2441) (not b_next!2443))
(get-model)

(declare-fun d!26669 () Bool)

(declare-fun res!49844 () Bool)

(declare-fun e!64669 () Bool)

(assert (=> d!26669 (=> (not res!49844) (not e!64669))))

(declare-fun simpleValid!68 (LongMapFixedSize!858) Bool)

(assert (=> d!26669 (= res!49844 (simpleValid!68 newMap!16))))

(assert (=> d!26669 (= (valid!388 newMap!16) e!64669)))

(declare-fun b!99206 () Bool)

(declare-fun res!49845 () Bool)

(assert (=> b!99206 (=> (not res!49845) (not e!64669))))

(declare-fun arrayCountValidKeys!0 (array!4254 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!99206 (= res!49845 (= (arrayCountValidKeys!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (_size!478 newMap!16)))))

(declare-fun b!99207 () Bool)

(declare-fun res!49846 () Bool)

(assert (=> b!99207 (=> (not res!49846) (not e!64669))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4254 (_ BitVec 32)) Bool)

(assert (=> b!99207 (= res!49846 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!99208 () Bool)

(assert (=> b!99208 (= e!64669 (arrayNoDuplicates!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 Nil!1613))))

(assert (= (and d!26669 res!49844) b!99206))

(assert (= (and b!99206 res!49845) b!99207))

(assert (= (and b!99207 res!49846) b!99208))

(declare-fun m!109173 () Bool)

(assert (=> d!26669 m!109173))

(declare-fun m!109175 () Bool)

(assert (=> b!99206 m!109175))

(declare-fun m!109177 () Bool)

(assert (=> b!99207 m!109177))

(declare-fun m!109179 () Bool)

(assert (=> b!99208 m!109179))

(assert (=> b!99127 d!26669))

(declare-fun d!26671 () Bool)

(assert (=> d!26671 (= (valid!387 thiss!992) (valid!388 (v!2817 (underlying!342 thiss!992))))))

(declare-fun bs!4097 () Bool)

(assert (= bs!4097 d!26671))

(declare-fun m!109181 () Bool)

(assert (=> bs!4097 m!109181))

(assert (=> start!11812 d!26671))

(declare-fun d!26673 () Bool)

(assert (=> d!26673 (= (validMask!0 (mask!6609 (v!2817 (underlying!342 thiss!992)))) (and (or (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000001111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000011111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000001111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000011111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000001111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000011111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000001111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000011111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000001111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000011111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000001111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000011111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000111111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000001111111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000011111111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000111111111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000001111111111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000011111111111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000111111111111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00001111111111111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00011111111111111111111111111111) (= (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!99131 d!26673))

(declare-fun d!26675 () Bool)

(assert (=> d!26675 (not (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49891 () Unit!3031)

(declare-fun choose!68 (array!4254 (_ BitVec 32) (_ BitVec 64) List!1616) Unit!3031)

(assert (=> d!26675 (= lt!49891 (choose!68 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613)))))

(assert (=> d!26675 (bvslt (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!26675 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613)) lt!49891)))

(declare-fun bs!4098 () Bool)

(assert (= bs!4098 d!26675))

(assert (=> bs!4098 m!109089))

(assert (=> bs!4098 m!109093))

(assert (=> bs!4098 m!109089))

(declare-fun m!109183 () Bool)

(assert (=> bs!4098 m!109183))

(assert (=> b!99130 d!26675))

(declare-fun d!26677 () Bool)

(assert (=> d!26677 (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) from!355 Nil!1613)))

(declare-fun lt!49894 () Unit!3031)

(declare-fun choose!39 (array!4254 (_ BitVec 32) (_ BitVec 32)) Unit!3031)

(assert (=> d!26677 (= lt!49894 (choose!39 (_keys!4196 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!26677 (bvslt (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!26677 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000 from!355) lt!49894)))

(declare-fun bs!4099 () Bool)

(assert (= bs!4099 d!26677))

(assert (=> bs!4099 m!109087))

(declare-fun m!109185 () Bool)

(assert (=> bs!4099 m!109185))

(assert (=> b!99130 d!26677))

(declare-fun d!26679 () Bool)

(declare-fun res!49851 () Bool)

(declare-fun e!64674 () Bool)

(assert (=> d!26679 (=> res!49851 e!64674)))

(assert (=> d!26679 (= res!49851 (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!26679 (= (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!64674)))

(declare-fun b!99213 () Bool)

(declare-fun e!64675 () Bool)

(assert (=> b!99213 (= e!64674 e!64675)))

(declare-fun res!49852 () Bool)

(assert (=> b!99213 (=> (not res!49852) (not e!64675))))

(assert (=> b!99213 (= res!49852 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun b!99214 () Bool)

(assert (=> b!99214 (= e!64675 (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!26679 (not res!49851)) b!99213))

(assert (= (and b!99213 res!49852) b!99214))

(declare-fun m!109187 () Bool)

(assert (=> d!26679 m!109187))

(assert (=> b!99214 m!109089))

(declare-fun m!109189 () Bool)

(assert (=> b!99214 m!109189))

(assert (=> b!99130 d!26679))

(declare-fun d!26681 () Bool)

(declare-fun e!64678 () Bool)

(assert (=> d!26681 e!64678))

(declare-fun c!16909 () Bool)

(assert (=> d!26681 (= c!16909 (and (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!49897 () Unit!3031)

(declare-fun choose!609 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) (_ BitVec 32) Int) Unit!3031)

(assert (=> d!26681 (= lt!49897 (choose!609 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))))))

(assert (=> d!26681 (validMask!0 (mask!6609 (v!2817 (underlying!342 thiss!992))))))

(assert (=> d!26681 (= (lemmaListMapContainsThenArrayContainsFrom!99 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))) lt!49897)))

(declare-fun b!99219 () Bool)

(assert (=> b!99219 (= e!64678 (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!99220 () Bool)

(assert (=> b!99220 (= e!64678 (ite (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26681 c!16909) b!99219))

(assert (= (and d!26681 (not c!16909)) b!99220))

(assert (=> d!26681 m!109089))

(declare-fun m!109191 () Bool)

(assert (=> d!26681 m!109191))

(assert (=> d!26681 m!109109))

(assert (=> b!99219 m!109089))

(assert (=> b!99219 m!109093))

(assert (=> b!99130 d!26681))

(declare-fun b!99231 () Bool)

(declare-fun e!64690 () Bool)

(declare-fun e!64687 () Bool)

(assert (=> b!99231 (= e!64690 e!64687)))

(declare-fun c!16912 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!99231 (= c!16912 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun b!99232 () Bool)

(declare-fun e!64688 () Bool)

(declare-fun contains!811 (List!1616 (_ BitVec 64)) Bool)

(assert (=> b!99232 (= e!64688 (contains!811 Nil!1613 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun call!10125 () Bool)

(declare-fun bm!10122 () Bool)

(assert (=> bm!10122 (= call!10125 (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)))))

(declare-fun b!99233 () Bool)

(declare-fun e!64689 () Bool)

(assert (=> b!99233 (= e!64689 e!64690)))

(declare-fun res!49860 () Bool)

(assert (=> b!99233 (=> (not res!49860) (not e!64690))))

(assert (=> b!99233 (= res!49860 (not e!64688))))

(declare-fun res!49859 () Bool)

(assert (=> b!99233 (=> (not res!49859) (not e!64688))))

(assert (=> b!99233 (= res!49859 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun b!99234 () Bool)

(assert (=> b!99234 (= e!64687 call!10125)))

(declare-fun d!26683 () Bool)

(declare-fun res!49861 () Bool)

(assert (=> d!26683 (=> res!49861 e!64689)))

(assert (=> d!26683 (= res!49861 (bvsge from!355 (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> d!26683 (= (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) from!355 Nil!1613) e!64689)))

(declare-fun b!99235 () Bool)

(assert (=> b!99235 (= e!64687 call!10125)))

(assert (= (and d!26683 (not res!49861)) b!99233))

(assert (= (and b!99233 res!49859) b!99232))

(assert (= (and b!99233 res!49860) b!99231))

(assert (= (and b!99231 c!16912) b!99235))

(assert (= (and b!99231 (not c!16912)) b!99234))

(assert (= (or b!99235 b!99234) bm!10122))

(assert (=> b!99231 m!109089))

(assert (=> b!99231 m!109089))

(declare-fun m!109193 () Bool)

(assert (=> b!99231 m!109193))

(assert (=> b!99232 m!109089))

(assert (=> b!99232 m!109089))

(declare-fun m!109195 () Bool)

(assert (=> b!99232 m!109195))

(assert (=> bm!10122 m!109089))

(declare-fun m!109197 () Bool)

(assert (=> bm!10122 m!109197))

(assert (=> b!99233 m!109089))

(assert (=> b!99233 m!109089))

(assert (=> b!99233 m!109193))

(assert (=> b!99130 d!26683))

(declare-fun d!26685 () Bool)

(assert (=> d!26685 (= (map!1259 newMap!16) (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun bs!4100 () Bool)

(assert (= bs!4100 d!26685))

(declare-fun m!109199 () Bool)

(assert (=> bs!4100 m!109199))

(assert (=> b!99132 d!26685))

(declare-fun b!99278 () Bool)

(declare-fun e!64727 () Bool)

(declare-fun call!10144 () Bool)

(assert (=> b!99278 (= e!64727 (not call!10144))))

(declare-fun b!99279 () Bool)

(declare-fun e!64728 () Bool)

(declare-fun e!64729 () Bool)

(assert (=> b!99279 (= e!64728 e!64729)))

(declare-fun res!49884 () Bool)

(assert (=> b!99279 (=> (not res!49884) (not e!64729))))

(declare-fun lt!49947 () ListLongMap!1557)

(assert (=> b!99279 (= res!49884 (contains!810 lt!49947 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99279 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun bm!10137 () Bool)

(declare-fun call!10141 () ListLongMap!1557)

(declare-fun call!10140 () ListLongMap!1557)

(assert (=> bm!10137 (= call!10141 call!10140)))

(declare-fun bm!10138 () Bool)

(declare-fun call!10142 () ListLongMap!1557)

(assert (=> bm!10138 (= call!10140 call!10142)))

(declare-fun b!99280 () Bool)

(declare-fun e!64718 () Bool)

(assert (=> b!99280 (= e!64727 e!64718)))

(declare-fun res!49880 () Bool)

(assert (=> b!99280 (= res!49880 call!10144)))

(assert (=> b!99280 (=> (not res!49880) (not e!64718))))

(declare-fun b!99281 () Bool)

(declare-fun e!64717 () Bool)

(declare-fun call!10143 () Bool)

(assert (=> b!99281 (= e!64717 (not call!10143))))

(declare-fun b!99282 () Bool)

(declare-fun e!64719 () Bool)

(declare-fun apply!93 (ListLongMap!1557 (_ BitVec 64)) V!3163)

(assert (=> b!99282 (= e!64719 (= (apply!93 lt!49947 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun b!99283 () Bool)

(declare-fun c!16929 () Bool)

(assert (=> b!99283 (= c!16929 (and (not (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64721 () ListLongMap!1557)

(declare-fun e!64726 () ListLongMap!1557)

(assert (=> b!99283 (= e!64721 e!64726)))

(declare-fun bm!10139 () Bool)

(declare-fun c!16927 () Bool)

(declare-fun c!16930 () Bool)

(declare-fun call!10146 () ListLongMap!1557)

(declare-fun +!139 (ListLongMap!1557 tuple2!2366) ListLongMap!1557)

(assert (=> bm!10139 (= call!10146 (+!139 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141)) (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!99284 () Bool)

(declare-fun e!64722 () Bool)

(assert (=> b!99284 (= e!64722 e!64717)))

(declare-fun c!16926 () Bool)

(assert (=> b!99284 (= c!16926 (not (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99285 () Bool)

(declare-fun e!64725 () Unit!3031)

(declare-fun lt!49944 () Unit!3031)

(assert (=> b!99285 (= e!64725 lt!49944)))

(declare-fun lt!49959 () ListLongMap!1557)

(declare-fun getCurrentListMapNoExtraKeys!103 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) Int) ListLongMap!1557)

(assert (=> b!99285 (= lt!49959 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun lt!49956 () (_ BitVec 64))

(assert (=> b!99285 (= lt!49956 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49943 () (_ BitVec 64))

(assert (=> b!99285 (= lt!49943 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49945 () Unit!3031)

(declare-fun addStillContains!69 (ListLongMap!1557 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!3031)

(assert (=> b!99285 (= lt!49945 (addStillContains!69 lt!49959 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49943))))

(assert (=> b!99285 (contains!810 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49943)))

(declare-fun lt!49954 () Unit!3031)

(assert (=> b!99285 (= lt!49954 lt!49945)))

(declare-fun lt!49953 () ListLongMap!1557)

(assert (=> b!99285 (= lt!49953 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun lt!49955 () (_ BitVec 64))

(assert (=> b!99285 (= lt!49955 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49952 () (_ BitVec 64))

(assert (=> b!99285 (= lt!49952 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49951 () Unit!3031)

(declare-fun addApplyDifferent!69 (ListLongMap!1557 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!3031)

(assert (=> b!99285 (= lt!49951 (addApplyDifferent!69 lt!49953 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49952))))

(assert (=> b!99285 (= (apply!93 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49952) (apply!93 lt!49953 lt!49952))))

(declare-fun lt!49950 () Unit!3031)

(assert (=> b!99285 (= lt!49950 lt!49951)))

(declare-fun lt!49960 () ListLongMap!1557)

(assert (=> b!99285 (= lt!49960 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun lt!49948 () (_ BitVec 64))

(assert (=> b!99285 (= lt!49948 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49961 () (_ BitVec 64))

(assert (=> b!99285 (= lt!49961 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!49946 () Unit!3031)

(assert (=> b!99285 (= lt!49946 (addApplyDifferent!69 lt!49960 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49961))))

(assert (=> b!99285 (= (apply!93 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49961) (apply!93 lt!49960 lt!49961))))

(declare-fun lt!49958 () Unit!3031)

(assert (=> b!99285 (= lt!49958 lt!49946)))

(declare-fun lt!49949 () ListLongMap!1557)

(assert (=> b!99285 (= lt!49949 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun lt!49957 () (_ BitVec 64))

(assert (=> b!99285 (= lt!49957 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!49963 () (_ BitVec 64))

(assert (=> b!99285 (= lt!49963 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!99285 (= lt!49944 (addApplyDifferent!69 lt!49949 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49963))))

(assert (=> b!99285 (= (apply!93 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49963) (apply!93 lt!49949 lt!49963))))

(declare-fun b!99286 () Bool)

(declare-fun call!10145 () ListLongMap!1557)

(assert (=> b!99286 (= e!64726 call!10145)))

(declare-fun b!99287 () Bool)

(declare-fun res!49887 () Bool)

(assert (=> b!99287 (=> (not res!49887) (not e!64722))))

(assert (=> b!99287 (= res!49887 e!64727)))

(declare-fun c!16928 () Bool)

(assert (=> b!99287 (= c!16928 (not (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99288 () Bool)

(declare-fun e!64723 () Bool)

(assert (=> b!99288 (= e!64723 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99289 () Bool)

(assert (=> b!99289 (= e!64729 (= (apply!93 lt!49947 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99289 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_values!2485 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> b!99289 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun b!99290 () Bool)

(declare-fun Unit!3035 () Unit!3031)

(assert (=> b!99290 (= e!64725 Unit!3035)))

(declare-fun b!99291 () Bool)

(assert (=> b!99291 (= e!64721 call!10145)))

(declare-fun bm!10140 () Bool)

(assert (=> bm!10140 (= call!10143 (contains!810 lt!49947 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10141 () Bool)

(assert (=> bm!10141 (= call!10145 call!10146)))

(declare-fun b!99292 () Bool)

(declare-fun res!49888 () Bool)

(assert (=> b!99292 (=> (not res!49888) (not e!64722))))

(assert (=> b!99292 (= res!49888 e!64728)))

(declare-fun res!49886 () Bool)

(assert (=> b!99292 (=> res!49886 e!64728)))

(assert (=> b!99292 (= res!49886 (not e!64723))))

(declare-fun res!49885 () Bool)

(assert (=> b!99292 (=> (not res!49885) (not e!64723))))

(assert (=> b!99292 (= res!49885 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun d!26687 () Bool)

(assert (=> d!26687 e!64722))

(declare-fun res!49883 () Bool)

(assert (=> d!26687 (=> (not res!49883) (not e!64722))))

(assert (=> d!26687 (= res!49883 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun lt!49962 () ListLongMap!1557)

(assert (=> d!26687 (= lt!49947 lt!49962)))

(declare-fun lt!49942 () Unit!3031)

(assert (=> d!26687 (= lt!49942 e!64725)))

(declare-fun c!16925 () Bool)

(declare-fun e!64720 () Bool)

(assert (=> d!26687 (= c!16925 e!64720)))

(declare-fun res!49881 () Bool)

(assert (=> d!26687 (=> (not res!49881) (not e!64720))))

(assert (=> d!26687 (= res!49881 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun e!64724 () ListLongMap!1557)

(assert (=> d!26687 (= lt!49962 e!64724)))

(assert (=> d!26687 (= c!16927 (and (not (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26687 (validMask!0 (mask!6609 (v!2817 (underlying!342 thiss!992))))))

(assert (=> d!26687 (= (getCurrentListMap!474 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))) lt!49947)))

(declare-fun bm!10142 () Bool)

(assert (=> bm!10142 (= call!10144 (contains!810 lt!49947 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10143 () Bool)

(assert (=> bm!10143 (= call!10142 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun b!99293 () Bool)

(assert (=> b!99293 (= e!64718 (= (apply!93 lt!49947 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun b!99294 () Bool)

(assert (=> b!99294 (= e!64726 call!10141)))

(declare-fun b!99295 () Bool)

(assert (=> b!99295 (= e!64717 e!64719)))

(declare-fun res!49882 () Bool)

(assert (=> b!99295 (= res!49882 call!10143)))

(assert (=> b!99295 (=> (not res!49882) (not e!64719))))

(declare-fun b!99296 () Bool)

(assert (=> b!99296 (= e!64724 e!64721)))

(assert (=> b!99296 (= c!16930 (and (not (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99297 () Bool)

(assert (=> b!99297 (= e!64720 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99298 () Bool)

(assert (=> b!99298 (= e!64724 (+!139 call!10146 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!26687 c!16927) b!99298))

(assert (= (and d!26687 (not c!16927)) b!99296))

(assert (= (and b!99296 c!16930) b!99291))

(assert (= (and b!99296 (not c!16930)) b!99283))

(assert (= (and b!99283 c!16929) b!99286))

(assert (= (and b!99283 (not c!16929)) b!99294))

(assert (= (or b!99286 b!99294) bm!10137))

(assert (= (or b!99291 bm!10137) bm!10138))

(assert (= (or b!99291 b!99286) bm!10141))

(assert (= (or b!99298 bm!10138) bm!10143))

(assert (= (or b!99298 bm!10141) bm!10139))

(assert (= (and d!26687 res!49881) b!99297))

(assert (= (and d!26687 c!16925) b!99285))

(assert (= (and d!26687 (not c!16925)) b!99290))

(assert (= (and d!26687 res!49883) b!99292))

(assert (= (and b!99292 res!49885) b!99288))

(assert (= (and b!99292 (not res!49886)) b!99279))

(assert (= (and b!99279 res!49884) b!99289))

(assert (= (and b!99292 res!49888) b!99287))

(assert (= (and b!99287 c!16928) b!99280))

(assert (= (and b!99287 (not c!16928)) b!99278))

(assert (= (and b!99280 res!49880) b!99293))

(assert (= (or b!99280 b!99278) bm!10142))

(assert (= (and b!99287 res!49887) b!99284))

(assert (= (and b!99284 c!16926) b!99295))

(assert (= (and b!99284 (not c!16926)) b!99281))

(assert (= (and b!99295 res!49882) b!99282))

(assert (= (or b!99295 b!99281) bm!10140))

(declare-fun b_lambda!4449 () Bool)

(assert (=> (not b_lambda!4449) (not b!99289)))

(assert (=> b!99289 t!5594))

(declare-fun b_and!6117 () Bool)

(assert (= b_and!6105 (and (=> t!5594 result!3297) b_and!6117)))

(assert (=> b!99289 t!5596))

(declare-fun b_and!6119 () Bool)

(assert (= b_and!6107 (and (=> t!5596 result!3301) b_and!6119)))

(assert (=> b!99289 m!109187))

(declare-fun m!109201 () Bool)

(assert (=> b!99289 m!109201))

(declare-fun m!109203 () Bool)

(assert (=> b!99289 m!109203))

(assert (=> b!99289 m!109203))

(assert (=> b!99289 m!109121))

(declare-fun m!109205 () Bool)

(assert (=> b!99289 m!109205))

(assert (=> b!99289 m!109187))

(assert (=> b!99289 m!109121))

(declare-fun m!109207 () Bool)

(assert (=> b!99282 m!109207))

(declare-fun m!109209 () Bool)

(assert (=> bm!10143 m!109209))

(assert (=> b!99279 m!109187))

(assert (=> b!99279 m!109187))

(declare-fun m!109211 () Bool)

(assert (=> b!99279 m!109211))

(declare-fun m!109213 () Bool)

(assert (=> bm!10140 m!109213))

(assert (=> d!26687 m!109109))

(assert (=> b!99288 m!109187))

(assert (=> b!99288 m!109187))

(declare-fun m!109215 () Bool)

(assert (=> b!99288 m!109215))

(declare-fun m!109217 () Bool)

(assert (=> b!99293 m!109217))

(declare-fun m!109219 () Bool)

(assert (=> b!99298 m!109219))

(declare-fun m!109221 () Bool)

(assert (=> bm!10142 m!109221))

(assert (=> b!99297 m!109187))

(assert (=> b!99297 m!109187))

(assert (=> b!99297 m!109215))

(declare-fun m!109223 () Bool)

(assert (=> b!99285 m!109223))

(declare-fun m!109225 () Bool)

(assert (=> b!99285 m!109225))

(declare-fun m!109227 () Bool)

(assert (=> b!99285 m!109227))

(declare-fun m!109229 () Bool)

(assert (=> b!99285 m!109229))

(declare-fun m!109231 () Bool)

(assert (=> b!99285 m!109231))

(assert (=> b!99285 m!109229))

(declare-fun m!109233 () Bool)

(assert (=> b!99285 m!109233))

(declare-fun m!109235 () Bool)

(assert (=> b!99285 m!109235))

(declare-fun m!109237 () Bool)

(assert (=> b!99285 m!109237))

(assert (=> b!99285 m!109187))

(declare-fun m!109239 () Bool)

(assert (=> b!99285 m!109239))

(declare-fun m!109241 () Bool)

(assert (=> b!99285 m!109241))

(assert (=> b!99285 m!109231))

(declare-fun m!109243 () Bool)

(assert (=> b!99285 m!109243))

(assert (=> b!99285 m!109223))

(declare-fun m!109245 () Bool)

(assert (=> b!99285 m!109245))

(declare-fun m!109247 () Bool)

(assert (=> b!99285 m!109247))

(assert (=> b!99285 m!109245))

(declare-fun m!109249 () Bool)

(assert (=> b!99285 m!109249))

(assert (=> b!99285 m!109209))

(declare-fun m!109251 () Bool)

(assert (=> b!99285 m!109251))

(declare-fun m!109253 () Bool)

(assert (=> bm!10139 m!109253))

(assert (=> b!99132 d!26687))

(declare-fun d!26689 () Bool)

(assert (=> d!26689 (= (array_inv!1217 (_keys!4196 newMap!16)) (bvsge (size!2271 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99136 d!26689))

(declare-fun d!26691 () Bool)

(assert (=> d!26691 (= (array_inv!1218 (_values!2485 newMap!16)) (bvsge (size!2272 (_values!2485 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99136 d!26691))

(declare-fun d!26693 () Bool)

(declare-fun e!64734 () Bool)

(assert (=> d!26693 e!64734))

(declare-fun res!49891 () Bool)

(assert (=> d!26693 (=> res!49891 e!64734)))

(declare-fun lt!49973 () Bool)

(assert (=> d!26693 (= res!49891 (not lt!49973))))

(declare-fun lt!49975 () Bool)

(assert (=> d!26693 (= lt!49973 lt!49975)))

(declare-fun lt!49972 () Unit!3031)

(declare-fun e!64735 () Unit!3031)

(assert (=> d!26693 (= lt!49972 e!64735)))

(declare-fun c!16933 () Bool)

(assert (=> d!26693 (= c!16933 lt!49975)))

(declare-fun containsKey!154 (List!1615 (_ BitVec 64)) Bool)

(assert (=> d!26693 (= lt!49975 (containsKey!154 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!26693 (= (contains!810 lt!49862 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) lt!49973)))

(declare-fun b!99305 () Bool)

(declare-fun lt!49974 () Unit!3031)

(assert (=> b!99305 (= e!64735 lt!49974)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!103 (List!1615 (_ BitVec 64)) Unit!3031)

(assert (=> b!99305 (= lt!49974 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-datatypes ((Option!156 0))(
  ( (Some!155 (v!2821 V!3163)) (None!154) )
))
(declare-fun isDefined!104 (Option!156) Bool)

(declare-fun getValueByKey!150 (List!1615 (_ BitVec 64)) Option!156)

(assert (=> b!99305 (isDefined!104 (getValueByKey!150 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun b!99306 () Bool)

(declare-fun Unit!3036 () Unit!3031)

(assert (=> b!99306 (= e!64735 Unit!3036)))

(declare-fun b!99307 () Bool)

(assert (=> b!99307 (= e!64734 (isDefined!104 (getValueByKey!150 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (= (and d!26693 c!16933) b!99305))

(assert (= (and d!26693 (not c!16933)) b!99306))

(assert (= (and d!26693 (not res!49891)) b!99307))

(assert (=> d!26693 m!109089))

(declare-fun m!109255 () Bool)

(assert (=> d!26693 m!109255))

(assert (=> b!99305 m!109089))

(declare-fun m!109257 () Bool)

(assert (=> b!99305 m!109257))

(assert (=> b!99305 m!109089))

(declare-fun m!109259 () Bool)

(assert (=> b!99305 m!109259))

(assert (=> b!99305 m!109259))

(declare-fun m!109261 () Bool)

(assert (=> b!99305 m!109261))

(assert (=> b!99307 m!109089))

(assert (=> b!99307 m!109259))

(assert (=> b!99307 m!109259))

(assert (=> b!99307 m!109261))

(assert (=> b!99122 d!26693))

(declare-fun bm!10192 () Bool)

(declare-datatypes ((SeekEntryResult!264 0))(
  ( (MissingZero!264 (index!3200 (_ BitVec 32))) (Found!264 (index!3201 (_ BitVec 32))) (Intermediate!264 (undefined!1076 Bool) (index!3202 (_ BitVec 32)) (x!13114 (_ BitVec 32))) (Undefined!264) (MissingVacant!264 (index!3203 (_ BitVec 32))) )
))
(declare-fun call!10218 () SeekEntryResult!264)

(declare-fun call!10201 () SeekEntryResult!264)

(assert (=> bm!10192 (= call!10218 call!10201)))

(declare-fun lt!50037 () SeekEntryResult!264)

(declare-fun e!64794 () Bool)

(declare-fun b!99392 () Bool)

(assert (=> b!99392 (= e!64794 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50037)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun b!99393 () Bool)

(declare-fun e!64801 () Bool)

(declare-fun e!64796 () Bool)

(assert (=> b!99393 (= e!64801 e!64796)))

(declare-fun res!49930 () Bool)

(declare-fun call!10208 () ListLongMap!1557)

(assert (=> b!99393 (= res!49930 (contains!810 call!10208 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> b!99393 (=> (not res!49930) (not e!64796))))

(declare-fun call!10206 () Unit!3031)

(declare-fun bm!10193 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) Int) Unit!3031)

(assert (=> bm!10193 (= call!10206 (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(declare-fun bm!10194 () Bool)

(declare-fun call!10212 () SeekEntryResult!264)

(assert (=> bm!10194 (= call!10212 call!10201)))

(declare-fun c!16971 () Bool)

(declare-fun c!16970 () Bool)

(declare-fun lt!50055 () SeekEntryResult!264)

(declare-fun lt!50035 () SeekEntryResult!264)

(declare-fun c!16974 () Bool)

(declare-fun lt!50046 () SeekEntryResult!264)

(declare-fun call!10215 () Bool)

(declare-fun bm!10195 () Bool)

(declare-fun c!16969 () Bool)

(declare-fun c!16963 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!10195 (= call!10215 (inRange!0 (ite c!16969 (ite c!16963 (index!3201 lt!50046) (ite c!16974 (index!3200 lt!50055) (index!3203 lt!50055))) (ite c!16970 (index!3201 lt!50037) (ite c!16971 (index!3200 lt!50035) (index!3203 lt!50035)))) (mask!6609 newMap!16)))))

(declare-fun c!16973 () Bool)

(declare-fun lt!50045 () (_ BitVec 32))

(declare-fun bm!10196 () Bool)

(declare-fun c!16967 () Bool)

(declare-fun lt!50042 () array!4256)

(declare-fun call!10203 () ListLongMap!1557)

(assert (=> bm!10196 (= call!10203 (getCurrentListMap!474 (_keys!4196 newMap!16) (ite c!16967 (_values!2485 newMap!16) lt!50042) (mask!6609 newMap!16) (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) (zeroValue!2383 newMap!16) (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!99394 () Bool)

(declare-fun e!64795 () Bool)

(declare-fun call!10209 () Bool)

(assert (=> b!99394 (= e!64795 (not call!10209))))

(declare-fun b!99395 () Bool)

(declare-fun e!64800 () Bool)

(assert (=> b!99395 (= e!64800 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50046)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun b!99396 () Bool)

(declare-fun e!64782 () ListLongMap!1557)

(assert (=> b!99396 (= e!64782 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!99397 () Bool)

(declare-fun e!64780 () tuple2!2364)

(declare-fun e!64781 () tuple2!2364)

(assert (=> b!99397 (= e!64780 e!64781)))

(declare-fun c!16975 () Bool)

(declare-fun lt!50043 () SeekEntryResult!264)

(assert (=> b!99397 (= c!16975 ((_ is MissingZero!264) lt!50043))))

(declare-fun bm!10198 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4254 (_ BitVec 32)) SeekEntryResult!264)

(assert (=> bm!10198 (= call!10201 (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!99398 () Bool)

(declare-fun call!10217 () ListLongMap!1557)

(assert (=> b!99398 (= e!64801 (= call!10217 call!10208))))

(declare-fun bm!10199 () Bool)

(declare-fun c!16964 () Bool)

(assert (=> bm!10199 (= c!16964 c!16969)))

(declare-fun call!10198 () Bool)

(declare-fun e!64798 () ListLongMap!1557)

(assert (=> bm!10199 (= call!10198 (contains!810 e!64798 (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))

(declare-fun b!99399 () Bool)

(declare-fun e!64790 () Bool)

(assert (=> b!99399 (= e!64790 (not call!10209))))

(declare-fun bm!10200 () Bool)

(declare-fun call!10202 () Bool)

(assert (=> bm!10200 (= call!10202 call!10215)))

(declare-fun bm!10201 () Bool)

(declare-fun call!10211 () ListLongMap!1557)

(declare-fun call!10199 () ListLongMap!1557)

(assert (=> bm!10201 (= call!10211 call!10199)))

(declare-fun call!10216 () tuple2!2364)

(declare-fun c!16962 () Bool)

(declare-fun bm!10202 () Bool)

(declare-fun updateHelperNewKey!42 (LongMapFixedSize!858 (_ BitVec 64) V!3163 (_ BitVec 32)) tuple2!2364)

(assert (=> bm!10202 (= call!10216 (updateHelperNewKey!42 newMap!16 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043))))))

(declare-fun b!99400 () Bool)

(declare-fun call!10204 () ListLongMap!1557)

(assert (=> b!99400 (= e!64798 call!10204)))

(declare-fun bm!10203 () Bool)

(declare-fun call!10214 () ListLongMap!1557)

(assert (=> bm!10203 (= call!10214 call!10203)))

(declare-fun b!99401 () Bool)

(declare-fun res!49929 () Bool)

(assert (=> b!99401 (= res!49929 call!10202)))

(assert (=> b!99401 (=> (not res!49929) (not e!64800))))

(declare-fun b!99402 () Bool)

(assert (=> b!99402 (= e!64796 (= call!10208 (+!139 call!10217 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99403 () Bool)

(declare-fun lt!50052 () tuple2!2364)

(assert (=> b!99403 (= lt!50052 call!10216)))

(assert (=> b!99403 (= e!64781 (tuple2!2365 (_1!1192 lt!50052) (_2!1192 lt!50052)))))

(declare-fun b!99404 () Bool)

(declare-fun e!64792 () Bool)

(declare-fun call!10195 () Bool)

(assert (=> b!99404 (= e!64792 (not call!10195))))

(declare-fun b!99405 () Bool)

(declare-fun e!64789 () Bool)

(assert (=> b!99405 (= e!64789 e!64801)))

(declare-fun c!16972 () Bool)

(declare-fun lt!50030 () tuple2!2364)

(assert (=> b!99405 (= c!16972 (_1!1192 lt!50030))))

(declare-fun b!99406 () Bool)

(declare-fun lt!50039 () tuple2!2364)

(assert (=> b!99406 (= e!64780 (tuple2!2365 (_1!1192 lt!50039) (_2!1192 lt!50039)))))

(assert (=> b!99406 (= lt!50039 call!10216)))

(declare-fun bm!10204 () Bool)

(declare-fun call!10210 () Bool)

(assert (=> bm!10204 (= call!10210 call!10202)))

(declare-fun b!99407 () Bool)

(declare-fun res!49927 () Bool)

(declare-fun e!64787 () Bool)

(assert (=> b!99407 (=> (not res!49927) (not e!64787))))

(assert (=> b!99407 (= res!49927 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3200 lt!50035)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10205 () Bool)

(assert (=> bm!10205 (= call!10208 (map!1259 (ite c!16972 (_2!1192 lt!50030) newMap!16)))))

(declare-fun b!99408 () Bool)

(assert (=> b!99408 (= e!64782 (ite c!16973 call!10214 call!10211))))

(declare-fun bm!10206 () Bool)

(assert (=> bm!10206 (= call!10204 call!10199)))

(declare-fun bm!10207 () Bool)

(declare-fun call!10200 () Bool)

(assert (=> bm!10207 (= call!10200 call!10215)))

(declare-fun b!99409 () Bool)

(declare-fun res!49926 () Bool)

(assert (=> b!99409 (=> (not res!49926) (not e!64790))))

(assert (=> b!99409 (= res!49926 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3200 lt!50055)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99410 () Bool)

(declare-fun e!64786 () Bool)

(assert (=> b!99410 (= e!64786 e!64792)))

(declare-fun res!49933 () Bool)

(declare-fun call!10196 () Bool)

(assert (=> b!99410 (= res!49933 call!10196)))

(assert (=> b!99410 (=> (not res!49933) (not e!64792))))

(declare-fun b!99411 () Bool)

(declare-fun e!64793 () tuple2!2364)

(declare-fun e!64791 () tuple2!2364)

(assert (=> b!99411 (= e!64793 e!64791)))

(assert (=> b!99411 (= c!16973 (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99412 () Bool)

(declare-fun e!64784 () tuple2!2364)

(assert (=> b!99412 (= e!64793 e!64784)))

(assert (=> b!99412 (= lt!50043 (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(assert (=> b!99412 (= c!16969 ((_ is Undefined!264) lt!50043))))

(declare-fun b!99413 () Bool)

(declare-fun res!49932 () Bool)

(assert (=> b!99413 (=> (not res!49932) (not e!64787))))

(assert (=> b!99413 (= res!49932 call!10196)))

(declare-fun e!64788 () Bool)

(assert (=> b!99413 (= e!64788 e!64787)))

(declare-fun b!99414 () Bool)

(declare-fun e!64783 () Bool)

(assert (=> b!99414 (= e!64783 e!64795)))

(declare-fun res!49923 () Bool)

(assert (=> b!99414 (= res!49923 call!10210)))

(assert (=> b!99414 (=> (not res!49923) (not e!64795))))

(declare-fun call!10205 () ListLongMap!1557)

(declare-fun bm!10208 () Bool)

(assert (=> bm!10208 (= call!10205 (+!139 e!64782 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!16968 () Bool)

(assert (=> bm!10208 (= c!16968 c!16967)))

(declare-fun bm!10209 () Bool)

(assert (=> bm!10209 (= call!10217 (map!1259 (ite c!16972 newMap!16 (_2!1192 lt!50030))))))

(declare-fun bm!10210 () Bool)

(declare-fun call!10213 () Bool)

(assert (=> bm!10210 (= call!10195 call!10213)))

(declare-fun b!99415 () Bool)

(declare-fun res!49925 () Bool)

(assert (=> b!99415 (= res!49925 call!10200)))

(assert (=> b!99415 (=> (not res!49925) (not e!64794))))

(declare-fun bm!10211 () Bool)

(declare-fun call!10197 () Unit!3031)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) Int) Unit!3031)

(assert (=> bm!10211 (= call!10197 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50056 () (_ BitVec 32))

(declare-fun bm!10212 () Bool)

(assert (=> bm!10212 (= call!10199 (getCurrentListMap!474 (_keys!4196 newMap!16) (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!99416 () Bool)

(assert (=> b!99416 (= e!64798 call!10203)))

(declare-fun bm!10213 () Bool)

(assert (=> bm!10213 (= call!10196 call!10200)))

(declare-fun b!99417 () Bool)

(declare-fun c!16965 () Bool)

(assert (=> b!99417 (= c!16965 ((_ is MissingVacant!264) lt!50055))))

(declare-fun e!64785 () Bool)

(assert (=> b!99417 (= e!64785 e!64783)))

(declare-fun b!99418 () Bool)

(assert (=> b!99418 (= e!64783 ((_ is Undefined!264) lt!50055))))

(declare-fun b!99419 () Bool)

(declare-fun res!49928 () Bool)

(assert (=> b!99419 (= res!49928 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3203 lt!50035)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99419 (=> (not res!49928) (not e!64792))))

(declare-fun b!99420 () Bool)

(declare-fun e!64799 () Unit!3031)

(declare-fun Unit!3037 () Unit!3031)

(assert (=> b!99420 (= e!64799 Unit!3037)))

(declare-fun lt!50054 () Unit!3031)

(assert (=> b!99420 (= lt!50054 call!10197)))

(assert (=> b!99420 (= lt!50035 call!10218)))

(assert (=> b!99420 (= c!16971 ((_ is MissingZero!264) lt!50035))))

(assert (=> b!99420 e!64788))

(declare-fun lt!50053 () Unit!3031)

(assert (=> b!99420 (= lt!50053 lt!50054)))

(assert (=> b!99420 false))

(declare-fun b!99421 () Bool)

(declare-fun res!49931 () Bool)

(assert (=> b!99421 (=> (not res!49931) (not e!64790))))

(assert (=> b!99421 (= res!49931 call!10210)))

(assert (=> b!99421 (= e!64785 e!64790)))

(declare-fun b!99422 () Bool)

(assert (=> b!99422 (= c!16962 ((_ is MissingVacant!264) lt!50043))))

(assert (=> b!99422 (= e!64784 e!64780)))

(declare-fun b!99423 () Bool)

(assert (=> b!99423 (= e!64787 (not call!10195))))

(declare-fun b!99424 () Bool)

(declare-fun c!16966 () Bool)

(assert (=> b!99424 (= c!16966 ((_ is MissingVacant!264) lt!50035))))

(assert (=> b!99424 (= e!64788 e!64786)))

(declare-fun b!99425 () Bool)

(declare-fun res!49924 () Bool)

(assert (=> b!99425 (= res!49924 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3203 lt!50055)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99425 (=> (not res!49924) (not e!64795))))

(declare-fun bm!10214 () Bool)

(assert (=> bm!10214 (= call!10209 call!10213)))

(declare-fun b!99426 () Bool)

(declare-fun e!64797 () Unit!3031)

(declare-fun lt!50049 () Unit!3031)

(assert (=> b!99426 (= e!64797 lt!50049)))

(assert (=> b!99426 (= lt!50049 call!10197)))

(assert (=> b!99426 (= lt!50055 call!10212)))

(assert (=> b!99426 (= c!16974 ((_ is MissingZero!264) lt!50055))))

(assert (=> b!99426 e!64785))

(declare-fun b!99427 () Bool)

(declare-fun lt!50044 () Unit!3031)

(declare-fun lt!50034 () Unit!3031)

(assert (=> b!99427 (= lt!50044 lt!50034)))

(declare-fun call!10207 () ListLongMap!1557)

(assert (=> b!99427 (= call!10207 call!10211)))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!42 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 V!3163 Int) Unit!3031)

(assert (=> b!99427 (= lt!50034 (lemmaChangeZeroKeyThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50056 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) (defaultEntry!2502 newMap!16)))))

(assert (=> b!99427 (= lt!50056 (bvor (extraKeys!2319 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!99427 (= e!64791 (tuple2!2365 true (LongMapFixedSize!859 (defaultEntry!2502 newMap!16) (mask!6609 newMap!16) (bvor (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) (_size!478 newMap!16) (_keys!4196 newMap!16) (_values!2485 newMap!16) (_vacant!478 newMap!16))))))

(declare-fun bm!10215 () Bool)

(assert (=> bm!10215 (= call!10207 call!10205)))

(declare-fun b!99428 () Bool)

(declare-fun lt!50038 () Unit!3031)

(declare-fun lt!50033 () Unit!3031)

(assert (=> b!99428 (= lt!50038 lt!50033)))

(assert (=> b!99428 (= call!10207 call!10214)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 V!3163 Int) Unit!3031)

(assert (=> b!99428 (= lt!50033 (lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(assert (=> b!99428 (= lt!50045 (bvor (extraKeys!2319 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!99428 (= e!64791 (tuple2!2365 true (LongMapFixedSize!859 (defaultEntry!2502 newMap!16) (mask!6609 newMap!16) (bvor (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!478 newMap!16) (_keys!4196 newMap!16) (_values!2485 newMap!16) (_vacant!478 newMap!16))))))

(declare-fun b!99429 () Bool)

(declare-fun Unit!3038 () Unit!3031)

(assert (=> b!99429 (= e!64797 Unit!3038)))

(declare-fun lt!50050 () Unit!3031)

(assert (=> b!99429 (= lt!50050 call!10206)))

(assert (=> b!99429 (= lt!50046 call!10212)))

(declare-fun res!49920 () Bool)

(assert (=> b!99429 (= res!49920 ((_ is Found!264) lt!50046))))

(assert (=> b!99429 (=> (not res!49920) (not e!64800))))

(assert (=> b!99429 e!64800))

(declare-fun lt!50031 () Unit!3031)

(assert (=> b!99429 (= lt!50031 lt!50050)))

(assert (=> b!99429 false))

(declare-fun b!99430 () Bool)

(declare-fun lt!50048 () Unit!3031)

(declare-fun lt!50051 () Unit!3031)

(assert (=> b!99430 (= lt!50048 lt!50051)))

(assert (=> b!99430 call!10198))

(declare-fun lemmaValidKeyInArrayIsInListMap!100 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) Int) Unit!3031)

(assert (=> b!99430 (= lt!50051 (lemmaValidKeyInArrayIsInListMap!100 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3201 lt!50043) (defaultEntry!2502 newMap!16)))))

(assert (=> b!99430 (= lt!50042 (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))))

(declare-fun lt!50040 () Unit!3031)

(declare-fun lt!50047 () Unit!3031)

(assert (=> b!99430 (= lt!50040 lt!50047)))

(assert (=> b!99430 (= call!10205 call!10204)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) (_ BitVec 64) V!3163 Int) Unit!3031)

(assert (=> b!99430 (= lt!50047 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3201 lt!50043) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50041 () Unit!3031)

(assert (=> b!99430 (= lt!50041 e!64799)))

(assert (=> b!99430 (= c!16970 (contains!810 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> b!99430 (= e!64781 (tuple2!2365 true (LongMapFixedSize!859 (defaultEntry!2502 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (_size!478 newMap!16) (_keys!4196 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (_vacant!478 newMap!16))))))

(declare-fun b!99431 () Bool)

(assert (=> b!99431 (= e!64786 ((_ is Undefined!264) lt!50035))))

(declare-fun b!99432 () Bool)

(declare-fun lt!50032 () Unit!3031)

(assert (=> b!99432 (= lt!50032 e!64797)))

(assert (=> b!99432 (= c!16963 call!10198)))

(assert (=> b!99432 (= e!64784 (tuple2!2365 false newMap!16))))

(declare-fun b!99433 () Bool)

(declare-fun lt!50036 () Unit!3031)

(assert (=> b!99433 (= e!64799 lt!50036)))

(assert (=> b!99433 (= lt!50036 call!10206)))

(assert (=> b!99433 (= lt!50037 call!10218)))

(declare-fun res!49921 () Bool)

(assert (=> b!99433 (= res!49921 ((_ is Found!264) lt!50037))))

(assert (=> b!99433 (=> (not res!49921) (not e!64794))))

(assert (=> b!99433 e!64794))

(declare-fun d!26695 () Bool)

(assert (=> d!26695 e!64789))

(declare-fun res!49922 () Bool)

(assert (=> d!26695 (=> (not res!49922) (not e!64789))))

(assert (=> d!26695 (= res!49922 (valid!388 (_2!1192 lt!50030)))))

(assert (=> d!26695 (= lt!50030 e!64793)))

(assert (=> d!26695 (= c!16967 (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvneg (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (=> d!26695 (valid!388 newMap!16)))

(assert (=> d!26695 (= (update!149 newMap!16 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!50030)))

(declare-fun bm!10197 () Bool)

(assert (=> bm!10197 (= call!10213 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(assert (= (and d!26695 c!16967) b!99411))

(assert (= (and d!26695 (not c!16967)) b!99412))

(assert (= (and b!99411 c!16973) b!99427))

(assert (= (and b!99411 (not c!16973)) b!99428))

(assert (= (or b!99427 b!99428) bm!10201))

(assert (= (or b!99427 b!99428) bm!10203))

(assert (= (or b!99427 b!99428) bm!10215))

(assert (= (and b!99412 c!16969) b!99432))

(assert (= (and b!99412 (not c!16969)) b!99422))

(assert (= (and b!99432 c!16963) b!99429))

(assert (= (and b!99432 (not c!16963)) b!99426))

(assert (= (and b!99429 res!49920) b!99401))

(assert (= (and b!99401 res!49929) b!99395))

(assert (= (and b!99426 c!16974) b!99421))

(assert (= (and b!99426 (not c!16974)) b!99417))

(assert (= (and b!99421 res!49931) b!99409))

(assert (= (and b!99409 res!49926) b!99399))

(assert (= (and b!99417 c!16965) b!99414))

(assert (= (and b!99417 (not c!16965)) b!99418))

(assert (= (and b!99414 res!49923) b!99425))

(assert (= (and b!99425 res!49924) b!99394))

(assert (= (or b!99421 b!99414) bm!10204))

(assert (= (or b!99399 b!99394) bm!10214))

(assert (= (or b!99401 bm!10204) bm!10200))

(assert (= (or b!99429 b!99426) bm!10194))

(assert (= (and b!99422 c!16962) b!99406))

(assert (= (and b!99422 (not c!16962)) b!99397))

(assert (= (and b!99397 c!16975) b!99403))

(assert (= (and b!99397 (not c!16975)) b!99430))

(assert (= (and b!99430 c!16970) b!99433))

(assert (= (and b!99430 (not c!16970)) b!99420))

(assert (= (and b!99433 res!49921) b!99415))

(assert (= (and b!99415 res!49925) b!99392))

(assert (= (and b!99420 c!16971) b!99413))

(assert (= (and b!99420 (not c!16971)) b!99424))

(assert (= (and b!99413 res!49932) b!99407))

(assert (= (and b!99407 res!49927) b!99423))

(assert (= (and b!99424 c!16966) b!99410))

(assert (= (and b!99424 (not c!16966)) b!99431))

(assert (= (and b!99410 res!49933) b!99419))

(assert (= (and b!99419 res!49928) b!99404))

(assert (= (or b!99413 b!99410) bm!10213))

(assert (= (or b!99423 b!99404) bm!10210))

(assert (= (or b!99415 bm!10213) bm!10207))

(assert (= (or b!99433 b!99420) bm!10192))

(assert (= (or b!99406 b!99403) bm!10202))

(assert (= (or bm!10194 bm!10192) bm!10198))

(assert (= (or bm!10200 bm!10207) bm!10195))

(assert (= (or b!99429 b!99433) bm!10193))

(assert (= (or b!99432 b!99430) bm!10206))

(assert (= (or b!99426 b!99420) bm!10211))

(assert (= (or bm!10214 bm!10210) bm!10197))

(assert (= (or b!99432 b!99430) bm!10199))

(assert (= (and bm!10199 c!16964) b!99400))

(assert (= (and bm!10199 (not c!16964)) b!99416))

(assert (= (or bm!10203 b!99416) bm!10196))

(assert (= (or bm!10201 bm!10206) bm!10212))

(assert (= (or bm!10215 b!99430) bm!10208))

(assert (= (and bm!10208 c!16968) b!99408))

(assert (= (and bm!10208 (not c!16968)) b!99396))

(assert (= (and d!26695 res!49922) b!99405))

(assert (= (and b!99405 c!16972) b!99393))

(assert (= (and b!99405 (not c!16972)) b!99398))

(assert (= (and b!99393 res!49930) b!99402))

(assert (= (or b!99402 b!99398) bm!10209))

(assert (= (or b!99393 b!99402 b!99398) bm!10205))

(declare-fun m!109263 () Bool)

(assert (=> bm!10195 m!109263))

(declare-fun m!109265 () Bool)

(assert (=> b!99407 m!109265))

(declare-fun m!109267 () Bool)

(assert (=> bm!10196 m!109267))

(declare-fun m!109269 () Bool)

(assert (=> d!26695 m!109269))

(assert (=> d!26695 m!109105))

(assert (=> b!99428 m!109123))

(declare-fun m!109271 () Bool)

(assert (=> b!99428 m!109271))

(assert (=> bm!10211 m!109089))

(declare-fun m!109273 () Bool)

(assert (=> bm!10211 m!109273))

(declare-fun m!109275 () Bool)

(assert (=> b!99409 m!109275))

(assert (=> b!99427 m!109123))

(declare-fun m!109277 () Bool)

(assert (=> b!99427 m!109277))

(declare-fun m!109279 () Bool)

(assert (=> b!99425 m!109279))

(declare-fun m!109281 () Bool)

(assert (=> b!99402 m!109281))

(assert (=> bm!10202 m!109089))

(assert (=> bm!10202 m!109123))

(declare-fun m!109283 () Bool)

(assert (=> bm!10202 m!109283))

(declare-fun m!109285 () Bool)

(assert (=> bm!10205 m!109285))

(declare-fun m!109287 () Bool)

(assert (=> b!99419 m!109287))

(assert (=> b!99396 m!109199))

(declare-fun m!109289 () Bool)

(assert (=> bm!10208 m!109289))

(declare-fun m!109291 () Bool)

(assert (=> bm!10199 m!109291))

(declare-fun m!109293 () Bool)

(assert (=> bm!10199 m!109293))

(declare-fun m!109295 () Bool)

(assert (=> b!99392 m!109295))

(assert (=> b!99430 m!109199))

(declare-fun m!109297 () Bool)

(assert (=> b!99430 m!109297))

(assert (=> b!99430 m!109089))

(assert (=> b!99430 m!109123))

(declare-fun m!109299 () Bool)

(assert (=> b!99430 m!109299))

(declare-fun m!109301 () Bool)

(assert (=> b!99430 m!109301))

(assert (=> b!99430 m!109199))

(assert (=> b!99430 m!109089))

(declare-fun m!109303 () Bool)

(assert (=> b!99430 m!109303))

(assert (=> bm!10198 m!109089))

(declare-fun m!109305 () Bool)

(assert (=> bm!10198 m!109305))

(declare-fun m!109307 () Bool)

(assert (=> bm!10209 m!109307))

(assert (=> bm!10197 m!109089))

(declare-fun m!109309 () Bool)

(assert (=> bm!10197 m!109309))

(assert (=> bm!10193 m!109089))

(declare-fun m!109311 () Bool)

(assert (=> bm!10193 m!109311))

(declare-fun m!109313 () Bool)

(assert (=> b!99395 m!109313))

(assert (=> b!99393 m!109089))

(declare-fun m!109315 () Bool)

(assert (=> b!99393 m!109315))

(assert (=> bm!10212 m!109297))

(declare-fun m!109317 () Bool)

(assert (=> bm!10212 m!109317))

(assert (=> b!99412 m!109089))

(assert (=> b!99412 m!109305))

(assert (=> b!99122 d!26695))

(declare-fun d!26697 () Bool)

(declare-fun c!16978 () Bool)

(assert (=> d!26697 (= c!16978 ((_ is ValueCellFull!975) (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun e!64804 () V!3163)

(assert (=> d!26697 (= (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64804)))

(declare-fun b!99438 () Bool)

(declare-fun get!1305 (ValueCell!975 V!3163) V!3163)

(assert (=> b!99438 (= e!64804 (get!1305 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99439 () Bool)

(declare-fun get!1306 (ValueCell!975 V!3163) V!3163)

(assert (=> b!99439 (= e!64804 (get!1306 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26697 c!16978) b!99438))

(assert (= (and d!26697 (not c!16978)) b!99439))

(assert (=> b!99438 m!109119))

(assert (=> b!99438 m!109121))

(declare-fun m!109319 () Bool)

(assert (=> b!99438 m!109319))

(assert (=> b!99439 m!109119))

(assert (=> b!99439 m!109121))

(declare-fun m!109321 () Bool)

(assert (=> b!99439 m!109321))

(assert (=> b!99122 d!26697))

(declare-fun d!26699 () Bool)

(assert (=> d!26699 (= (array_inv!1217 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvsge (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!99123 d!26699))

(declare-fun d!26701 () Bool)

(assert (=> d!26701 (= (array_inv!1218 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvsge (size!2272 (_values!2485 (v!2817 (underlying!342 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!99123 d!26701))

(declare-fun condMapEmpty!3781 () Bool)

(declare-fun mapDefault!3781 () ValueCell!975)

(assert (=> mapNonEmpty!3772 (= condMapEmpty!3781 (= mapRest!3772 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3781)))))

(declare-fun e!64810 () Bool)

(declare-fun mapRes!3781 () Bool)

(assert (=> mapNonEmpty!3772 (= tp!9613 (and e!64810 mapRes!3781))))

(declare-fun b!99447 () Bool)

(assert (=> b!99447 (= e!64810 tp_is_empty!2637)))

(declare-fun b!99446 () Bool)

(declare-fun e!64809 () Bool)

(assert (=> b!99446 (= e!64809 tp_is_empty!2637)))

(declare-fun mapIsEmpty!3781 () Bool)

(assert (=> mapIsEmpty!3781 mapRes!3781))

(declare-fun mapNonEmpty!3781 () Bool)

(declare-fun tp!9631 () Bool)

(assert (=> mapNonEmpty!3781 (= mapRes!3781 (and tp!9631 e!64809))))

(declare-fun mapKey!3781 () (_ BitVec 32))

(declare-fun mapValue!3781 () ValueCell!975)

(declare-fun mapRest!3781 () (Array (_ BitVec 32) ValueCell!975))

(assert (=> mapNonEmpty!3781 (= mapRest!3772 (store mapRest!3781 mapKey!3781 mapValue!3781))))

(assert (= (and mapNonEmpty!3772 condMapEmpty!3781) mapIsEmpty!3781))

(assert (= (and mapNonEmpty!3772 (not condMapEmpty!3781)) mapNonEmpty!3781))

(assert (= (and mapNonEmpty!3781 ((_ is ValueCellFull!975) mapValue!3781)) b!99446))

(assert (= (and mapNonEmpty!3772 ((_ is ValueCellFull!975) mapDefault!3781)) b!99447))

(declare-fun m!109323 () Bool)

(assert (=> mapNonEmpty!3781 m!109323))

(declare-fun condMapEmpty!3782 () Bool)

(declare-fun mapDefault!3782 () ValueCell!975)

(assert (=> mapNonEmpty!3771 (= condMapEmpty!3782 (= mapRest!3771 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3782)))))

(declare-fun e!64812 () Bool)

(declare-fun mapRes!3782 () Bool)

(assert (=> mapNonEmpty!3771 (= tp!9615 (and e!64812 mapRes!3782))))

(declare-fun b!99449 () Bool)

(assert (=> b!99449 (= e!64812 tp_is_empty!2637)))

(declare-fun b!99448 () Bool)

(declare-fun e!64811 () Bool)

(assert (=> b!99448 (= e!64811 tp_is_empty!2637)))

(declare-fun mapIsEmpty!3782 () Bool)

(assert (=> mapIsEmpty!3782 mapRes!3782))

(declare-fun mapNonEmpty!3782 () Bool)

(declare-fun tp!9632 () Bool)

(assert (=> mapNonEmpty!3782 (= mapRes!3782 (and tp!9632 e!64811))))

(declare-fun mapKey!3782 () (_ BitVec 32))

(declare-fun mapValue!3782 () ValueCell!975)

(declare-fun mapRest!3782 () (Array (_ BitVec 32) ValueCell!975))

(assert (=> mapNonEmpty!3782 (= mapRest!3771 (store mapRest!3782 mapKey!3782 mapValue!3782))))

(assert (= (and mapNonEmpty!3771 condMapEmpty!3782) mapIsEmpty!3782))

(assert (= (and mapNonEmpty!3771 (not condMapEmpty!3782)) mapNonEmpty!3782))

(assert (= (and mapNonEmpty!3782 ((_ is ValueCellFull!975) mapValue!3782)) b!99448))

(assert (= (and mapNonEmpty!3771 ((_ is ValueCellFull!975) mapDefault!3782)) b!99449))

(declare-fun m!109325 () Bool)

(assert (=> mapNonEmpty!3782 m!109325))

(declare-fun b_lambda!4451 () Bool)

(assert (= b_lambda!4449 (or (and b!99123 b_free!2441) (and b!99136 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))))) b_lambda!4451)))

(check-sat (not b!99233) (not b!99307) (not b!99208) (not d!26693) b_and!6117 (not b!99207) (not b!99293) (not d!26695) (not mapNonEmpty!3781) (not bm!10197) (not b!99214) (not b!99285) (not bm!10139) (not b!99219) (not mapNonEmpty!3782) (not bm!10212) (not bm!10196) (not d!26681) (not b!99402) (not bm!10211) (not b!99297) (not bm!10205) (not d!26677) (not b!99282) (not bm!10199) (not b!99412) (not b!99438) (not b!99279) (not bm!10208) (not b!99393) (not d!26675) (not b!99430) (not bm!10143) (not b!99427) (not b!99298) (not b!99439) (not b_next!2441) (not b!99396) (not bm!10198) (not b_next!2443) (not bm!10140) tp_is_empty!2637 (not b!99232) (not d!26685) (not b_lambda!4447) (not d!26687) (not bm!10122) (not b!99305) (not bm!10193) (not b!99206) (not bm!10195) (not d!26671) (not b!99231) b_and!6119 (not b!99288) (not d!26669) (not bm!10209) (not b!99428) (not b_lambda!4451) (not bm!10202) (not b!99289) (not bm!10142))
(check-sat b_and!6117 b_and!6119 (not b_next!2441) (not b_next!2443))
(get-model)

(declare-fun d!26703 () Bool)

(declare-fun e!64815 () Bool)

(assert (=> d!26703 e!64815))

(declare-fun res!49936 () Bool)

(assert (=> d!26703 (=> (not res!49936) (not e!64815))))

(assert (=> d!26703 (= res!49936 (and (bvsge (index!3201 lt!50043) #b00000000000000000000000000000000) (bvslt (index!3201 lt!50043) (size!2271 (_keys!4196 newMap!16)))))))

(declare-fun lt!50059 () Unit!3031)

(declare-fun choose!610 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) Int) Unit!3031)

(assert (=> d!26703 (= lt!50059 (choose!610 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3201 lt!50043) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26703 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26703 (= (lemmaValidKeyInArrayIsInListMap!100 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3201 lt!50043) (defaultEntry!2502 newMap!16)) lt!50059)))

(declare-fun b!99452 () Bool)

(assert (=> b!99452 (= e!64815 (contains!810 (getCurrentListMap!474 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043))))))

(assert (= (and d!26703 res!49936) b!99452))

(declare-fun m!109327 () Bool)

(assert (=> d!26703 m!109327))

(declare-fun m!109329 () Bool)

(assert (=> d!26703 m!109329))

(declare-fun m!109331 () Bool)

(assert (=> b!99452 m!109331))

(assert (=> b!99452 m!109291))

(assert (=> b!99452 m!109331))

(assert (=> b!99452 m!109291))

(declare-fun m!109333 () Bool)

(assert (=> b!99452 m!109333))

(assert (=> b!99430 d!26703))

(declare-fun d!26705 () Bool)

(declare-fun e!64818 () Bool)

(assert (=> d!26705 e!64818))

(declare-fun res!49939 () Bool)

(assert (=> d!26705 (=> (not res!49939) (not e!64818))))

(assert (=> d!26705 (= res!49939 (and (bvsge (index!3201 lt!50043) #b00000000000000000000000000000000) (bvslt (index!3201 lt!50043) (size!2272 (_values!2485 newMap!16)))))))

(declare-fun lt!50062 () Unit!3031)

(declare-fun choose!611 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) (_ BitVec 64) V!3163 Int) Unit!3031)

(assert (=> d!26705 (= lt!50062 (choose!611 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3201 lt!50043) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26705 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26705 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3201 lt!50043) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)) lt!50062)))

(declare-fun b!99455 () Bool)

(assert (=> b!99455 (= e!64818 (= (+!139 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4196 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))))

(assert (= (and d!26705 res!49939) b!99455))

(assert (=> d!26705 m!109089))

(assert (=> d!26705 m!109123))

(declare-fun m!109335 () Bool)

(assert (=> d!26705 m!109335))

(assert (=> d!26705 m!109329))

(assert (=> b!99455 m!109199))

(assert (=> b!99455 m!109199))

(declare-fun m!109337 () Bool)

(assert (=> b!99455 m!109337))

(assert (=> b!99455 m!109297))

(declare-fun m!109339 () Bool)

(assert (=> b!99455 m!109339))

(assert (=> b!99430 d!26705))

(declare-fun d!26707 () Bool)

(declare-fun e!64819 () Bool)

(assert (=> d!26707 e!64819))

(declare-fun res!49940 () Bool)

(assert (=> d!26707 (=> res!49940 e!64819)))

(declare-fun lt!50064 () Bool)

(assert (=> d!26707 (= res!49940 (not lt!50064))))

(declare-fun lt!50066 () Bool)

(assert (=> d!26707 (= lt!50064 lt!50066)))

(declare-fun lt!50063 () Unit!3031)

(declare-fun e!64820 () Unit!3031)

(assert (=> d!26707 (= lt!50063 e!64820)))

(declare-fun c!16979 () Bool)

(assert (=> d!26707 (= c!16979 lt!50066)))

(assert (=> d!26707 (= lt!50066 (containsKey!154 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!26707 (= (contains!810 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) lt!50064)))

(declare-fun b!99456 () Bool)

(declare-fun lt!50065 () Unit!3031)

(assert (=> b!99456 (= e!64820 lt!50065)))

(assert (=> b!99456 (= lt!50065 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> b!99456 (isDefined!104 (getValueByKey!150 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun b!99457 () Bool)

(declare-fun Unit!3039 () Unit!3031)

(assert (=> b!99457 (= e!64820 Unit!3039)))

(declare-fun b!99458 () Bool)

(assert (=> b!99458 (= e!64819 (isDefined!104 (getValueByKey!150 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (= (and d!26707 c!16979) b!99456))

(assert (= (and d!26707 (not c!16979)) b!99457))

(assert (= (and d!26707 (not res!49940)) b!99458))

(assert (=> d!26707 m!109089))

(declare-fun m!109341 () Bool)

(assert (=> d!26707 m!109341))

(assert (=> b!99456 m!109089))

(declare-fun m!109343 () Bool)

(assert (=> b!99456 m!109343))

(assert (=> b!99456 m!109089))

(declare-fun m!109345 () Bool)

(assert (=> b!99456 m!109345))

(assert (=> b!99456 m!109345))

(declare-fun m!109347 () Bool)

(assert (=> b!99456 m!109347))

(assert (=> b!99458 m!109089))

(assert (=> b!99458 m!109345))

(assert (=> b!99458 m!109345))

(assert (=> b!99458 m!109347))

(assert (=> b!99430 d!26707))

(declare-fun b!99459 () Bool)

(declare-fun e!64831 () Bool)

(declare-fun call!10223 () Bool)

(assert (=> b!99459 (= e!64831 (not call!10223))))

(declare-fun b!99460 () Bool)

(declare-fun e!64832 () Bool)

(declare-fun e!64833 () Bool)

(assert (=> b!99460 (= e!64832 e!64833)))

(declare-fun res!49945 () Bool)

(assert (=> b!99460 (=> (not res!49945) (not e!64833))))

(declare-fun lt!50072 () ListLongMap!1557)

(assert (=> b!99460 (= res!49945 (contains!810 lt!50072 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99460 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun bm!10216 () Bool)

(declare-fun call!10220 () ListLongMap!1557)

(declare-fun call!10219 () ListLongMap!1557)

(assert (=> bm!10216 (= call!10220 call!10219)))

(declare-fun bm!10217 () Bool)

(declare-fun call!10221 () ListLongMap!1557)

(assert (=> bm!10217 (= call!10219 call!10221)))

(declare-fun b!99461 () Bool)

(declare-fun e!64822 () Bool)

(assert (=> b!99461 (= e!64831 e!64822)))

(declare-fun res!49941 () Bool)

(assert (=> b!99461 (= res!49941 call!10223)))

(assert (=> b!99461 (=> (not res!49941) (not e!64822))))

(declare-fun b!99462 () Bool)

(declare-fun e!64821 () Bool)

(declare-fun call!10222 () Bool)

(assert (=> b!99462 (= e!64821 (not call!10222))))

(declare-fun b!99463 () Bool)

(declare-fun e!64823 () Bool)

(assert (=> b!99463 (= e!64823 (= (apply!93 lt!50072 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!99464 () Bool)

(declare-fun c!16984 () Bool)

(assert (=> b!99464 (= c!16984 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64825 () ListLongMap!1557)

(declare-fun e!64830 () ListLongMap!1557)

(assert (=> b!99464 (= e!64825 e!64830)))

(declare-fun call!10225 () ListLongMap!1557)

(declare-fun bm!10218 () Bool)

(declare-fun c!16985 () Bool)

(declare-fun c!16982 () Bool)

(assert (=> bm!10218 (= call!10225 (+!139 (ite c!16982 call!10221 (ite c!16985 call!10219 call!10220)) (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!99465 () Bool)

(declare-fun e!64826 () Bool)

(assert (=> b!99465 (= e!64826 e!64821)))

(declare-fun c!16981 () Bool)

(assert (=> b!99465 (= c!16981 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99466 () Bool)

(declare-fun e!64829 () Unit!3031)

(declare-fun lt!50069 () Unit!3031)

(assert (=> b!99466 (= e!64829 lt!50069)))

(declare-fun lt!50084 () ListLongMap!1557)

(assert (=> b!99466 (= lt!50084 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50081 () (_ BitVec 64))

(assert (=> b!99466 (= lt!50081 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50068 () (_ BitVec 64))

(assert (=> b!99466 (= lt!50068 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50070 () Unit!3031)

(assert (=> b!99466 (= lt!50070 (addStillContains!69 lt!50084 lt!50081 (zeroValue!2383 newMap!16) lt!50068))))

(assert (=> b!99466 (contains!810 (+!139 lt!50084 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16))) lt!50068)))

(declare-fun lt!50079 () Unit!3031)

(assert (=> b!99466 (= lt!50079 lt!50070)))

(declare-fun lt!50078 () ListLongMap!1557)

(assert (=> b!99466 (= lt!50078 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50080 () (_ BitVec 64))

(assert (=> b!99466 (= lt!50080 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50077 () (_ BitVec 64))

(assert (=> b!99466 (= lt!50077 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50076 () Unit!3031)

(assert (=> b!99466 (= lt!50076 (addApplyDifferent!69 lt!50078 lt!50080 (minValue!2383 newMap!16) lt!50077))))

(assert (=> b!99466 (= (apply!93 (+!139 lt!50078 (tuple2!2367 lt!50080 (minValue!2383 newMap!16))) lt!50077) (apply!93 lt!50078 lt!50077))))

(declare-fun lt!50075 () Unit!3031)

(assert (=> b!99466 (= lt!50075 lt!50076)))

(declare-fun lt!50085 () ListLongMap!1557)

(assert (=> b!99466 (= lt!50085 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50073 () (_ BitVec 64))

(assert (=> b!99466 (= lt!50073 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50086 () (_ BitVec 64))

(assert (=> b!99466 (= lt!50086 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50071 () Unit!3031)

(assert (=> b!99466 (= lt!50071 (addApplyDifferent!69 lt!50085 lt!50073 (zeroValue!2383 newMap!16) lt!50086))))

(assert (=> b!99466 (= (apply!93 (+!139 lt!50085 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16))) lt!50086) (apply!93 lt!50085 lt!50086))))

(declare-fun lt!50083 () Unit!3031)

(assert (=> b!99466 (= lt!50083 lt!50071)))

(declare-fun lt!50074 () ListLongMap!1557)

(assert (=> b!99466 (= lt!50074 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50082 () (_ BitVec 64))

(assert (=> b!99466 (= lt!50082 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50088 () (_ BitVec 64))

(assert (=> b!99466 (= lt!50088 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99466 (= lt!50069 (addApplyDifferent!69 lt!50074 lt!50082 (minValue!2383 newMap!16) lt!50088))))

(assert (=> b!99466 (= (apply!93 (+!139 lt!50074 (tuple2!2367 lt!50082 (minValue!2383 newMap!16))) lt!50088) (apply!93 lt!50074 lt!50088))))

(declare-fun b!99467 () Bool)

(declare-fun call!10224 () ListLongMap!1557)

(assert (=> b!99467 (= e!64830 call!10224)))

(declare-fun b!99468 () Bool)

(declare-fun res!49948 () Bool)

(assert (=> b!99468 (=> (not res!49948) (not e!64826))))

(assert (=> b!99468 (= res!49948 e!64831)))

(declare-fun c!16983 () Bool)

(assert (=> b!99468 (= c!16983 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99469 () Bool)

(declare-fun e!64827 () Bool)

(assert (=> b!99469 (= e!64827 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99470 () Bool)

(assert (=> b!99470 (= e!64833 (= (apply!93 lt!50072 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99470 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_values!2485 newMap!16))))))

(assert (=> b!99470 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun b!99471 () Bool)

(declare-fun Unit!3040 () Unit!3031)

(assert (=> b!99471 (= e!64829 Unit!3040)))

(declare-fun b!99472 () Bool)

(assert (=> b!99472 (= e!64825 call!10224)))

(declare-fun bm!10219 () Bool)

(assert (=> bm!10219 (= call!10222 (contains!810 lt!50072 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10220 () Bool)

(assert (=> bm!10220 (= call!10224 call!10225)))

(declare-fun b!99473 () Bool)

(declare-fun res!49949 () Bool)

(assert (=> b!99473 (=> (not res!49949) (not e!64826))))

(assert (=> b!99473 (= res!49949 e!64832)))

(declare-fun res!49947 () Bool)

(assert (=> b!99473 (=> res!49947 e!64832)))

(assert (=> b!99473 (= res!49947 (not e!64827))))

(declare-fun res!49946 () Bool)

(assert (=> b!99473 (=> (not res!49946) (not e!64827))))

(assert (=> b!99473 (= res!49946 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun d!26709 () Bool)

(assert (=> d!26709 e!64826))

(declare-fun res!49944 () Bool)

(assert (=> d!26709 (=> (not res!49944) (not e!64826))))

(assert (=> d!26709 (= res!49944 (or (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))))

(declare-fun lt!50087 () ListLongMap!1557)

(assert (=> d!26709 (= lt!50072 lt!50087)))

(declare-fun lt!50067 () Unit!3031)

(assert (=> d!26709 (= lt!50067 e!64829)))

(declare-fun c!16980 () Bool)

(declare-fun e!64824 () Bool)

(assert (=> d!26709 (= c!16980 e!64824)))

(declare-fun res!49942 () Bool)

(assert (=> d!26709 (=> (not res!49942) (not e!64824))))

(assert (=> d!26709 (= res!49942 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun e!64828 () ListLongMap!1557)

(assert (=> d!26709 (= lt!50087 e!64828)))

(assert (=> d!26709 (= c!16982 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26709 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26709 (= (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50072)))

(declare-fun bm!10221 () Bool)

(assert (=> bm!10221 (= call!10223 (contains!810 lt!50072 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10222 () Bool)

(assert (=> bm!10222 (= call!10221 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!99474 () Bool)

(assert (=> b!99474 (= e!64822 (= (apply!93 lt!50072 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun b!99475 () Bool)

(assert (=> b!99475 (= e!64830 call!10220)))

(declare-fun b!99476 () Bool)

(assert (=> b!99476 (= e!64821 e!64823)))

(declare-fun res!49943 () Bool)

(assert (=> b!99476 (= res!49943 call!10222)))

(assert (=> b!99476 (=> (not res!49943) (not e!64823))))

(declare-fun b!99477 () Bool)

(assert (=> b!99477 (= e!64828 e!64825)))

(assert (=> b!99477 (= c!16985 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99478 () Bool)

(assert (=> b!99478 (= e!64824 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99479 () Bool)

(assert (=> b!99479 (= e!64828 (+!139 call!10225 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(assert (= (and d!26709 c!16982) b!99479))

(assert (= (and d!26709 (not c!16982)) b!99477))

(assert (= (and b!99477 c!16985) b!99472))

(assert (= (and b!99477 (not c!16985)) b!99464))

(assert (= (and b!99464 c!16984) b!99467))

(assert (= (and b!99464 (not c!16984)) b!99475))

(assert (= (or b!99467 b!99475) bm!10216))

(assert (= (or b!99472 bm!10216) bm!10217))

(assert (= (or b!99472 b!99467) bm!10220))

(assert (= (or b!99479 bm!10217) bm!10222))

(assert (= (or b!99479 bm!10220) bm!10218))

(assert (= (and d!26709 res!49942) b!99478))

(assert (= (and d!26709 c!16980) b!99466))

(assert (= (and d!26709 (not c!16980)) b!99471))

(assert (= (and d!26709 res!49944) b!99473))

(assert (= (and b!99473 res!49946) b!99469))

(assert (= (and b!99473 (not res!49947)) b!99460))

(assert (= (and b!99460 res!49945) b!99470))

(assert (= (and b!99473 res!49949) b!99468))

(assert (= (and b!99468 c!16983) b!99461))

(assert (= (and b!99468 (not c!16983)) b!99459))

(assert (= (and b!99461 res!49941) b!99474))

(assert (= (or b!99461 b!99459) bm!10221))

(assert (= (and b!99468 res!49948) b!99465))

(assert (= (and b!99465 c!16981) b!99476))

(assert (= (and b!99465 (not c!16981)) b!99462))

(assert (= (and b!99476 res!49943) b!99463))

(assert (= (or b!99476 b!99462) bm!10219))

(declare-fun b_lambda!4453 () Bool)

(assert (=> (not b_lambda!4453) (not b!99470)))

(declare-fun t!5605 () Bool)

(declare-fun tb!1957 () Bool)

(assert (=> (and b!99123 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16)) t!5605) tb!1957))

(declare-fun result!3311 () Bool)

(assert (=> tb!1957 (= result!3311 tp_is_empty!2637)))

(assert (=> b!99470 t!5605))

(declare-fun b_and!6121 () Bool)

(assert (= b_and!6117 (and (=> t!5605 result!3311) b_and!6121)))

(declare-fun t!5607 () Bool)

(declare-fun tb!1959 () Bool)

(assert (=> (and b!99136 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 newMap!16)) t!5607) tb!1959))

(declare-fun result!3313 () Bool)

(assert (= result!3313 result!3311))

(assert (=> b!99470 t!5607))

(declare-fun b_and!6123 () Bool)

(assert (= b_and!6119 (and (=> t!5607 result!3313) b_and!6123)))

(declare-fun m!109349 () Bool)

(assert (=> b!99470 m!109349))

(declare-fun m!109351 () Bool)

(assert (=> b!99470 m!109351))

(declare-fun m!109353 () Bool)

(assert (=> b!99470 m!109353))

(assert (=> b!99470 m!109353))

(declare-fun m!109355 () Bool)

(assert (=> b!99470 m!109355))

(declare-fun m!109357 () Bool)

(assert (=> b!99470 m!109357))

(assert (=> b!99470 m!109349))

(assert (=> b!99470 m!109355))

(declare-fun m!109359 () Bool)

(assert (=> b!99463 m!109359))

(declare-fun m!109361 () Bool)

(assert (=> bm!10222 m!109361))

(assert (=> b!99460 m!109349))

(assert (=> b!99460 m!109349))

(declare-fun m!109363 () Bool)

(assert (=> b!99460 m!109363))

(declare-fun m!109365 () Bool)

(assert (=> bm!10219 m!109365))

(assert (=> d!26709 m!109329))

(assert (=> b!99469 m!109349))

(assert (=> b!99469 m!109349))

(declare-fun m!109367 () Bool)

(assert (=> b!99469 m!109367))

(declare-fun m!109369 () Bool)

(assert (=> b!99474 m!109369))

(declare-fun m!109371 () Bool)

(assert (=> b!99479 m!109371))

(declare-fun m!109373 () Bool)

(assert (=> bm!10221 m!109373))

(assert (=> b!99478 m!109349))

(assert (=> b!99478 m!109349))

(assert (=> b!99478 m!109367))

(declare-fun m!109375 () Bool)

(assert (=> b!99466 m!109375))

(declare-fun m!109377 () Bool)

(assert (=> b!99466 m!109377))

(declare-fun m!109379 () Bool)

(assert (=> b!99466 m!109379))

(declare-fun m!109381 () Bool)

(assert (=> b!99466 m!109381))

(declare-fun m!109383 () Bool)

(assert (=> b!99466 m!109383))

(assert (=> b!99466 m!109381))

(declare-fun m!109385 () Bool)

(assert (=> b!99466 m!109385))

(declare-fun m!109387 () Bool)

(assert (=> b!99466 m!109387))

(declare-fun m!109389 () Bool)

(assert (=> b!99466 m!109389))

(assert (=> b!99466 m!109349))

(declare-fun m!109391 () Bool)

(assert (=> b!99466 m!109391))

(declare-fun m!109393 () Bool)

(assert (=> b!99466 m!109393))

(assert (=> b!99466 m!109383))

(declare-fun m!109395 () Bool)

(assert (=> b!99466 m!109395))

(assert (=> b!99466 m!109375))

(declare-fun m!109397 () Bool)

(assert (=> b!99466 m!109397))

(declare-fun m!109399 () Bool)

(assert (=> b!99466 m!109399))

(assert (=> b!99466 m!109397))

(declare-fun m!109401 () Bool)

(assert (=> b!99466 m!109401))

(assert (=> b!99466 m!109361))

(declare-fun m!109403 () Bool)

(assert (=> b!99466 m!109403))

(declare-fun m!109405 () Bool)

(assert (=> bm!10218 m!109405))

(assert (=> b!99430 d!26709))

(declare-fun b!99514 () Bool)

(declare-fun e!64854 () Unit!3031)

(declare-fun Unit!3041 () Unit!3031)

(assert (=> b!99514 (= e!64854 Unit!3041)))

(declare-fun b!99515 () Bool)

(declare-fun res!49973 () Bool)

(declare-fun e!64851 () Bool)

(assert (=> b!99515 (=> (not res!49973) (not e!64851))))

(declare-fun lt!50169 () SeekEntryResult!264)

(assert (=> b!99515 (= res!49973 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3200 lt!50169)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64853 () Bool)

(declare-fun b!99516 () Bool)

(declare-fun lt!50164 () SeekEntryResult!264)

(assert (=> b!99516 (= e!64853 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50164)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun bm!10231 () Bool)

(declare-fun call!10236 () Bool)

(declare-fun call!10237 () Bool)

(assert (=> bm!10231 (= call!10236 call!10237)))

(declare-fun b!99517 () Bool)

(declare-fun res!49970 () Bool)

(declare-fun e!64852 () Bool)

(assert (=> b!99517 (=> (not res!49970) (not e!64852))))

(declare-fun lt!50153 () tuple2!2364)

(assert (=> b!99517 (= res!49970 (valid!388 (_2!1192 lt!50153)))))

(declare-fun b!99519 () Bool)

(declare-fun res!49971 () Bool)

(assert (=> b!99519 (= res!49971 call!10237)))

(assert (=> b!99519 (=> (not res!49971) (not e!64853))))

(declare-fun bm!10232 () Bool)

(declare-fun call!10234 () Bool)

(assert (=> bm!10232 (= call!10234 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!99520 () Bool)

(declare-fun res!49968 () Bool)

(assert (=> b!99520 (=> (not res!49968) (not e!64851))))

(assert (=> b!99520 (= res!49968 call!10236)))

(declare-fun e!64850 () Bool)

(assert (=> b!99520 (= e!64850 e!64851)))

(declare-fun b!99521 () Bool)

(declare-fun e!64856 () Bool)

(declare-fun e!64855 () Bool)

(assert (=> b!99521 (= e!64856 e!64855)))

(declare-fun res!49972 () Bool)

(assert (=> b!99521 (= res!49972 call!10236)))

(assert (=> b!99521 (=> (not res!49972) (not e!64855))))

(declare-fun c!16995 () Bool)

(declare-fun c!16997 () Bool)

(declare-fun bm!10233 () Bool)

(assert (=> bm!10233 (= call!10237 (inRange!0 (ite c!16997 (index!3201 lt!50164) (ite c!16995 (index!3200 lt!50169) (index!3203 lt!50169))) (mask!6609 newMap!16)))))

(declare-fun b!99522 () Bool)

(declare-fun res!49976 () Bool)

(assert (=> b!99522 (= res!49976 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3203 lt!50169)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99522 (=> (not res!49976) (not e!64855))))

(declare-fun b!99523 () Bool)

(assert (=> b!99523 (= e!64852 (= (map!1259 (_2!1192 lt!50153)) (+!139 (map!1259 newMap!16) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99524 () Bool)

(assert (=> b!99524 (= e!64855 (not call!10234))))

(declare-fun d!26711 () Bool)

(assert (=> d!26711 e!64852))

(declare-fun res!49974 () Bool)

(assert (=> d!26711 (=> (not res!49974) (not e!64852))))

(assert (=> d!26711 (= res!49974 (_1!1192 lt!50153))))

(assert (=> d!26711 (= lt!50153 (tuple2!2365 true (LongMapFixedSize!859 (defaultEntry!2502 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (bvadd (_size!478 newMap!16) #b00000000000000000000000000000001) (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (_vacant!478 newMap!16))))))

(declare-fun lt!50178 () Unit!3031)

(declare-fun lt!50175 () Unit!3031)

(assert (=> d!26711 (= lt!50178 lt!50175)))

(declare-fun lt!50177 () array!4256)

(declare-fun lt!50151 () array!4254)

(assert (=> d!26711 (contains!810 (getCurrentListMap!474 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043))))))

(assert (=> d!26711 (= lt!50175 (lemmaValidKeyInArrayIsInListMap!100 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26711 (= lt!50177 (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))))

(assert (=> d!26711 (= lt!50151 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))))

(declare-fun lt!50159 () Unit!3031)

(declare-fun lt!50170 () Unit!3031)

(assert (=> d!26711 (= lt!50159 lt!50170)))

(declare-fun lt!50171 () array!4254)

(assert (=> d!26711 (= (arrayCountValidKeys!0 lt!50171 (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (bvadd (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4254 (_ BitVec 32)) Unit!3031)

(assert (=> d!26711 (= lt!50170 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!50171 (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043))))))

(assert (=> d!26711 (= lt!50171 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))))

(declare-fun lt!50157 () Unit!3031)

(declare-fun lt!50161 () Unit!3031)

(assert (=> d!26711 (= lt!50157 lt!50161)))

(declare-fun lt!50152 () array!4254)

(assert (=> d!26711 (arrayContainsKey!0 lt!50152 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4254 (_ BitVec 64) (_ BitVec 32)) Unit!3031)

(assert (=> d!26711 (= lt!50161 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!50152 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043))))))

(assert (=> d!26711 (= lt!50152 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))))

(declare-fun lt!50176 () Unit!3031)

(declare-fun lt!50168 () Unit!3031)

(assert (=> d!26711 (= lt!50176 lt!50168)))

(assert (=> d!26711 (= (+!139 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!26 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) (_ BitVec 64) V!3163 Int) Unit!3031)

(assert (=> d!26711 (= lt!50168 (lemmaAddValidKeyToArrayThenAddPairToListMap!26 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50160 () Unit!3031)

(declare-fun lt!50166 () Unit!3031)

(assert (=> d!26711 (= lt!50160 lt!50166)))

(assert (=> d!26711 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (mask!6609 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4254 (_ BitVec 32) (_ BitVec 32)) Unit!3031)

(assert (=> d!26711 (= lt!50166 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (mask!6609 newMap!16)))))

(declare-fun lt!50165 () Unit!3031)

(declare-fun lt!50154 () Unit!3031)

(assert (=> d!26711 (= lt!50165 lt!50154)))

(assert (=> d!26711 (= (arrayCountValidKeys!0 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4254 (_ BitVec 32) (_ BitVec 64)) Unit!3031)

(assert (=> d!26711 (= lt!50154 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4196 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun lt!50167 () Unit!3031)

(declare-fun lt!50162 () Unit!3031)

(assert (=> d!26711 (= lt!50167 lt!50162)))

(declare-fun lt!50173 () List!1616)

(declare-fun lt!50150 () (_ BitVec 32))

(assert (=> d!26711 (arrayNoDuplicates!0 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) lt!50150 lt!50173)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4254 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1616) Unit!3031)

(assert (=> d!26711 (= lt!50162 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) lt!50150 lt!50173))))

(assert (=> d!26711 (= lt!50173 Nil!1613)))

(assert (=> d!26711 (= lt!50150 #b00000000000000000000000000000000)))

(declare-fun lt!50155 () Unit!3031)

(assert (=> d!26711 (= lt!50155 e!64854)))

(declare-fun c!16994 () Bool)

(assert (=> d!26711 (= c!16994 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!50156 () Unit!3031)

(declare-fun e!64857 () Unit!3031)

(assert (=> d!26711 (= lt!50156 e!64857)))

(assert (=> d!26711 (= c!16997 (contains!810 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!26711 (valid!388 newMap!16)))

(assert (=> d!26711 (= (updateHelperNewKey!42 newMap!16 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043))) lt!50153)))

(declare-fun b!99518 () Bool)

(declare-fun c!16996 () Bool)

(assert (=> b!99518 (= c!16996 ((_ is MissingVacant!264) lt!50169))))

(assert (=> b!99518 (= e!64850 e!64856)))

(declare-fun b!99525 () Bool)

(declare-fun Unit!3042 () Unit!3031)

(assert (=> b!99525 (= e!64854 Unit!3042)))

(declare-fun lt!50172 () Unit!3031)

(declare-fun lemmaArrayContainsKeyThenInListMap!26 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) (_ BitVec 32) Int) Unit!3031)

(assert (=> b!99525 (= lt!50172 (lemmaArrayContainsKeyThenInListMap!26 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(assert (=> b!99525 (contains!810 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))

(declare-fun lt!50149 () Unit!3031)

(assert (=> b!99525 (= lt!50149 lt!50172)))

(assert (=> b!99525 false))

(declare-fun call!10235 () SeekEntryResult!264)

(declare-fun bm!10234 () Bool)

(assert (=> bm!10234 (= call!10235 (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!99526 () Bool)

(declare-fun lt!50163 () Unit!3031)

(assert (=> b!99526 (= e!64857 lt!50163)))

(assert (=> b!99526 (= lt!50163 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(assert (=> b!99526 (= lt!50169 call!10235)))

(assert (=> b!99526 (= c!16995 ((_ is MissingZero!264) lt!50169))))

(assert (=> b!99526 e!64850))

(declare-fun b!99527 () Bool)

(assert (=> b!99527 (= e!64856 ((_ is Undefined!264) lt!50169))))

(declare-fun b!99528 () Bool)

(declare-fun Unit!3043 () Unit!3031)

(assert (=> b!99528 (= e!64857 Unit!3043)))

(declare-fun lt!50158 () Unit!3031)

(assert (=> b!99528 (= lt!50158 (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(assert (=> b!99528 (= lt!50164 call!10235)))

(declare-fun res!49975 () Bool)

(assert (=> b!99528 (= res!49975 ((_ is Found!264) lt!50164))))

(assert (=> b!99528 (=> (not res!49975) (not e!64853))))

(assert (=> b!99528 e!64853))

(declare-fun lt!50174 () Unit!3031)

(assert (=> b!99528 (= lt!50174 lt!50158)))

(assert (=> b!99528 false))

(declare-fun b!99529 () Bool)

(assert (=> b!99529 (= e!64851 (not call!10234))))

(declare-fun b!99530 () Bool)

(declare-fun res!49969 () Bool)

(assert (=> b!99530 (=> (not res!49969) (not e!64852))))

(assert (=> b!99530 (= res!49969 (contains!810 (map!1259 (_2!1192 lt!50153)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!26711 c!16997) b!99528))

(assert (= (and d!26711 (not c!16997)) b!99526))

(assert (= (and b!99528 res!49975) b!99519))

(assert (= (and b!99519 res!49971) b!99516))

(assert (= (and b!99526 c!16995) b!99520))

(assert (= (and b!99526 (not c!16995)) b!99518))

(assert (= (and b!99520 res!49968) b!99515))

(assert (= (and b!99515 res!49973) b!99529))

(assert (= (and b!99518 c!16996) b!99521))

(assert (= (and b!99518 (not c!16996)) b!99527))

(assert (= (and b!99521 res!49972) b!99522))

(assert (= (and b!99522 res!49976) b!99524))

(assert (= (or b!99520 b!99521) bm!10231))

(assert (= (or b!99529 b!99524) bm!10232))

(assert (= (or b!99519 bm!10231) bm!10233))

(assert (= (or b!99528 b!99526) bm!10234))

(assert (= (and d!26711 c!16994) b!99525))

(assert (= (and d!26711 (not c!16994)) b!99514))

(assert (= (and d!26711 res!49974) b!99517))

(assert (= (and b!99517 res!49970) b!99530))

(assert (= (and b!99530 res!49969) b!99523))

(declare-fun m!109407 () Bool)

(assert (=> b!99517 m!109407))

(declare-fun m!109409 () Bool)

(assert (=> b!99523 m!109409))

(assert (=> b!99523 m!109111))

(assert (=> b!99523 m!109111))

(declare-fun m!109411 () Bool)

(assert (=> b!99523 m!109411))

(assert (=> b!99525 m!109089))

(declare-fun m!109413 () Bool)

(assert (=> b!99525 m!109413))

(assert (=> b!99525 m!109199))

(assert (=> b!99525 m!109199))

(assert (=> b!99525 m!109089))

(assert (=> b!99525 m!109303))

(declare-fun m!109415 () Bool)

(assert (=> d!26711 m!109415))

(assert (=> d!26711 m!109089))

(assert (=> d!26711 m!109309))

(assert (=> d!26711 m!109199))

(assert (=> d!26711 m!109089))

(assert (=> d!26711 m!109303))

(declare-fun m!109417 () Bool)

(assert (=> d!26711 m!109417))

(declare-fun m!109419 () Bool)

(assert (=> d!26711 m!109419))

(assert (=> d!26711 m!109175))

(assert (=> d!26711 m!109199))

(declare-fun m!109421 () Bool)

(assert (=> d!26711 m!109421))

(declare-fun m!109423 () Bool)

(assert (=> d!26711 m!109423))

(assert (=> d!26711 m!109105))

(assert (=> d!26711 m!109089))

(declare-fun m!109425 () Bool)

(assert (=> d!26711 m!109425))

(declare-fun m!109427 () Bool)

(assert (=> d!26711 m!109427))

(assert (=> d!26711 m!109089))

(declare-fun m!109429 () Bool)

(assert (=> d!26711 m!109429))

(declare-fun m!109431 () Bool)

(assert (=> d!26711 m!109431))

(assert (=> d!26711 m!109089))

(declare-fun m!109433 () Bool)

(assert (=> d!26711 m!109433))

(assert (=> d!26711 m!109089))

(assert (=> d!26711 m!109123))

(declare-fun m!109435 () Bool)

(assert (=> d!26711 m!109435))

(declare-fun m!109437 () Bool)

(assert (=> d!26711 m!109437))

(assert (=> d!26711 m!109199))

(assert (=> d!26711 m!109337))

(assert (=> d!26711 m!109437))

(assert (=> d!26711 m!109419))

(declare-fun m!109439 () Bool)

(assert (=> d!26711 m!109439))

(declare-fun m!109441 () Bool)

(assert (=> d!26711 m!109441))

(assert (=> d!26711 m!109089))

(declare-fun m!109443 () Bool)

(assert (=> d!26711 m!109443))

(declare-fun m!109445 () Bool)

(assert (=> d!26711 m!109445))

(declare-fun m!109447 () Bool)

(assert (=> d!26711 m!109447))

(assert (=> d!26711 m!109089))

(declare-fun m!109449 () Bool)

(assert (=> d!26711 m!109449))

(assert (=> bm!10232 m!109089))

(assert (=> bm!10232 m!109309))

(declare-fun m!109451 () Bool)

(assert (=> b!99522 m!109451))

(assert (=> bm!10234 m!109089))

(assert (=> bm!10234 m!109305))

(assert (=> b!99526 m!109089))

(assert (=> b!99526 m!109273))

(declare-fun m!109453 () Bool)

(assert (=> b!99515 m!109453))

(declare-fun m!109455 () Bool)

(assert (=> b!99516 m!109455))

(assert (=> b!99530 m!109409))

(assert (=> b!99530 m!109409))

(assert (=> b!99530 m!109089))

(declare-fun m!109457 () Bool)

(assert (=> b!99530 m!109457))

(declare-fun m!109459 () Bool)

(assert (=> bm!10233 m!109459))

(assert (=> b!99528 m!109089))

(assert (=> b!99528 m!109311))

(assert (=> bm!10202 d!26711))

(declare-fun d!26713 () Bool)

(declare-fun e!64860 () Bool)

(assert (=> d!26713 e!64860))

(declare-fun res!49981 () Bool)

(assert (=> d!26713 (=> (not res!49981) (not e!64860))))

(declare-fun lt!50188 () ListLongMap!1557)

(assert (=> d!26713 (= res!49981 (contains!810 lt!50188 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50190 () List!1615)

(assert (=> d!26713 (= lt!50188 (ListLongMap!1558 lt!50190))))

(declare-fun lt!50189 () Unit!3031)

(declare-fun lt!50187 () Unit!3031)

(assert (=> d!26713 (= lt!50189 lt!50187)))

(assert (=> d!26713 (= (getValueByKey!150 lt!50190 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!68 (List!1615 (_ BitVec 64) V!3163) Unit!3031)

(assert (=> d!26713 (= lt!50187 (lemmaContainsTupThenGetReturnValue!68 lt!50190 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun insertStrictlySorted!70 (List!1615 (_ BitVec 64) V!3163) List!1615)

(assert (=> d!26713 (= lt!50190 (insertStrictlySorted!70 (toList!794 call!10217) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26713 (= (+!139 call!10217 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50188)))

(declare-fun b!99535 () Bool)

(declare-fun res!49982 () Bool)

(assert (=> b!99535 (=> (not res!49982) (not e!64860))))

(assert (=> b!99535 (= res!49982 (= (getValueByKey!150 (toList!794 lt!50188) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99536 () Bool)

(declare-fun contains!812 (List!1615 tuple2!2366) Bool)

(assert (=> b!99536 (= e!64860 (contains!812 (toList!794 lt!50188) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26713 res!49981) b!99535))

(assert (= (and b!99535 res!49982) b!99536))

(declare-fun m!109461 () Bool)

(assert (=> d!26713 m!109461))

(declare-fun m!109463 () Bool)

(assert (=> d!26713 m!109463))

(declare-fun m!109465 () Bool)

(assert (=> d!26713 m!109465))

(declare-fun m!109467 () Bool)

(assert (=> d!26713 m!109467))

(declare-fun m!109469 () Bool)

(assert (=> b!99535 m!109469))

(declare-fun m!109471 () Bool)

(assert (=> b!99536 m!109471))

(assert (=> b!99402 d!26713))

(declare-fun b!99545 () Bool)

(declare-fun e!64866 () (_ BitVec 32))

(declare-fun e!64865 () (_ BitVec 32))

(assert (=> b!99545 (= e!64866 e!64865)))

(declare-fun c!17002 () Bool)

(assert (=> b!99545 (= c!17002 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99546 () Bool)

(assert (=> b!99546 (= e!64866 #b00000000000000000000000000000000)))

(declare-fun d!26715 () Bool)

(declare-fun lt!50193 () (_ BitVec 32))

(assert (=> d!26715 (and (bvsge lt!50193 #b00000000000000000000000000000000) (bvsle lt!50193 (bvsub (size!2271 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26715 (= lt!50193 e!64866)))

(declare-fun c!17003 () Bool)

(assert (=> d!26715 (= c!17003 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!26715 (and (bvsle #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2271 (_keys!4196 newMap!16)) (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!26715 (= (arrayCountValidKeys!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) lt!50193)))

(declare-fun b!99547 () Bool)

(declare-fun call!10240 () (_ BitVec 32))

(assert (=> b!99547 (= e!64865 call!10240)))

(declare-fun b!99548 () Bool)

(assert (=> b!99548 (= e!64865 (bvadd #b00000000000000000000000000000001 call!10240))))

(declare-fun bm!10237 () Bool)

(assert (=> bm!10237 (= call!10240 (arrayCountValidKeys!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 (_keys!4196 newMap!16))))))

(assert (= (and d!26715 c!17003) b!99546))

(assert (= (and d!26715 (not c!17003)) b!99545))

(assert (= (and b!99545 c!17002) b!99548))

(assert (= (and b!99545 (not c!17002)) b!99547))

(assert (= (or b!99548 b!99547) bm!10237))

(assert (=> b!99545 m!109349))

(assert (=> b!99545 m!109349))

(assert (=> b!99545 m!109367))

(declare-fun m!109473 () Bool)

(assert (=> bm!10237 m!109473))

(assert (=> b!99206 d!26715))

(declare-fun d!26717 () Bool)

(declare-fun e!64877 () Bool)

(assert (=> d!26717 e!64877))

(declare-fun c!17008 () Bool)

(declare-fun lt!50198 () SeekEntryResult!264)

(assert (=> d!26717 (= c!17008 ((_ is MissingZero!264) lt!50198))))

(assert (=> d!26717 (= lt!50198 (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun lt!50199 () Unit!3031)

(declare-fun choose!612 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) Int) Unit!3031)

(assert (=> d!26717 (= lt!50199 (choose!612 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26717 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26717 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)) lt!50199)))

(declare-fun b!99565 () Bool)

(assert (=> b!99565 (and (bvsge (index!3200 lt!50198) #b00000000000000000000000000000000) (bvslt (index!3200 lt!50198) (size!2271 (_keys!4196 newMap!16))))))

(declare-fun res!49993 () Bool)

(assert (=> b!99565 (= res!49993 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3200 lt!50198)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64875 () Bool)

(assert (=> b!99565 (=> (not res!49993) (not e!64875))))

(declare-fun b!99566 () Bool)

(declare-fun e!64878 () Bool)

(assert (=> b!99566 (= e!64878 ((_ is Undefined!264) lt!50198))))

(declare-fun bm!10242 () Bool)

(declare-fun call!10245 () Bool)

(assert (=> bm!10242 (= call!10245 (inRange!0 (ite c!17008 (index!3200 lt!50198) (index!3203 lt!50198)) (mask!6609 newMap!16)))))

(declare-fun b!99567 () Bool)

(declare-fun res!49992 () Bool)

(declare-fun e!64876 () Bool)

(assert (=> b!99567 (=> (not res!49992) (not e!64876))))

(assert (=> b!99567 (= res!49992 call!10245)))

(assert (=> b!99567 (= e!64878 e!64876)))

(declare-fun b!99568 () Bool)

(declare-fun res!49994 () Bool)

(assert (=> b!99568 (=> (not res!49994) (not e!64876))))

(assert (=> b!99568 (= res!49994 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3203 lt!50198)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99568 (and (bvsge (index!3203 lt!50198) #b00000000000000000000000000000000) (bvslt (index!3203 lt!50198) (size!2271 (_keys!4196 newMap!16))))))

(declare-fun call!10246 () Bool)

(declare-fun bm!10243 () Bool)

(assert (=> bm!10243 (= call!10246 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!99569 () Bool)

(assert (=> b!99569 (= e!64875 (not call!10246))))

(declare-fun b!99570 () Bool)

(assert (=> b!99570 (= e!64877 e!64878)))

(declare-fun c!17009 () Bool)

(assert (=> b!99570 (= c!17009 ((_ is MissingVacant!264) lt!50198))))

(declare-fun b!99571 () Bool)

(assert (=> b!99571 (= e!64877 e!64875)))

(declare-fun res!49991 () Bool)

(assert (=> b!99571 (= res!49991 call!10245)))

(assert (=> b!99571 (=> (not res!49991) (not e!64875))))

(declare-fun b!99572 () Bool)

(assert (=> b!99572 (= e!64876 (not call!10246))))

(assert (= (and d!26717 c!17008) b!99571))

(assert (= (and d!26717 (not c!17008)) b!99570))

(assert (= (and b!99571 res!49991) b!99565))

(assert (= (and b!99565 res!49993) b!99569))

(assert (= (and b!99570 c!17009) b!99567))

(assert (= (and b!99570 (not c!17009)) b!99566))

(assert (= (and b!99567 res!49992) b!99568))

(assert (= (and b!99568 res!49994) b!99572))

(assert (= (or b!99571 b!99567) bm!10242))

(assert (= (or b!99569 b!99572) bm!10243))

(declare-fun m!109475 () Bool)

(assert (=> b!99565 m!109475))

(assert (=> d!26717 m!109089))

(assert (=> d!26717 m!109305))

(assert (=> d!26717 m!109089))

(declare-fun m!109477 () Bool)

(assert (=> d!26717 m!109477))

(assert (=> d!26717 m!109329))

(declare-fun m!109479 () Bool)

(assert (=> b!99568 m!109479))

(declare-fun m!109481 () Bool)

(assert (=> bm!10242 m!109481))

(assert (=> bm!10243 m!109089))

(assert (=> bm!10243 m!109309))

(assert (=> bm!10211 d!26717))

(declare-fun d!26719 () Bool)

(declare-fun e!64879 () Bool)

(assert (=> d!26719 e!64879))

(declare-fun res!49995 () Bool)

(assert (=> d!26719 (=> res!49995 e!64879)))

(declare-fun lt!50201 () Bool)

(assert (=> d!26719 (= res!49995 (not lt!50201))))

(declare-fun lt!50203 () Bool)

(assert (=> d!26719 (= lt!50201 lt!50203)))

(declare-fun lt!50200 () Unit!3031)

(declare-fun e!64880 () Unit!3031)

(assert (=> d!26719 (= lt!50200 e!64880)))

(declare-fun c!17010 () Bool)

(assert (=> d!26719 (= c!17010 lt!50203)))

(assert (=> d!26719 (= lt!50203 (containsKey!154 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))

(assert (=> d!26719 (= (contains!810 e!64798 (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))) lt!50201)))

(declare-fun b!99573 () Bool)

(declare-fun lt!50202 () Unit!3031)

(assert (=> b!99573 (= e!64880 lt!50202)))

(assert (=> b!99573 (= lt!50202 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))

(assert (=> b!99573 (isDefined!104 (getValueByKey!150 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))

(declare-fun b!99574 () Bool)

(declare-fun Unit!3044 () Unit!3031)

(assert (=> b!99574 (= e!64880 Unit!3044)))

(declare-fun b!99575 () Bool)

(assert (=> b!99575 (= e!64879 (isDefined!104 (getValueByKey!150 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043))))))))

(assert (= (and d!26719 c!17010) b!99573))

(assert (= (and d!26719 (not c!17010)) b!99574))

(assert (= (and d!26719 (not res!49995)) b!99575))

(declare-fun m!109483 () Bool)

(assert (=> d!26719 m!109483))

(declare-fun m!109485 () Bool)

(assert (=> b!99573 m!109485))

(declare-fun m!109487 () Bool)

(assert (=> b!99573 m!109487))

(assert (=> b!99573 m!109487))

(declare-fun m!109489 () Bool)

(assert (=> b!99573 m!109489))

(assert (=> b!99575 m!109487))

(assert (=> b!99575 m!109487))

(assert (=> b!99575 m!109489))

(assert (=> bm!10199 d!26719))

(declare-fun d!26721 () Bool)

(assert (=> d!26721 (= (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99297 d!26721))

(declare-fun d!26723 () Bool)

(assert (=> d!26723 (= (+!139 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50206 () Unit!3031)

(declare-fun choose!613 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 V!3163 Int) Unit!3031)

(assert (=> d!26723 (= lt!50206 (choose!613 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26723 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26723 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)) lt!50206)))

(declare-fun bs!4101 () Bool)

(assert (= bs!4101 d!26723))

(assert (=> bs!4101 m!109123))

(declare-fun m!109491 () Bool)

(assert (=> bs!4101 m!109491))

(assert (=> bs!4101 m!109199))

(assert (=> bs!4101 m!109329))

(assert (=> bs!4101 m!109123))

(declare-fun m!109493 () Bool)

(assert (=> bs!4101 m!109493))

(assert (=> bs!4101 m!109199))

(declare-fun m!109495 () Bool)

(assert (=> bs!4101 m!109495))

(assert (=> b!99428 d!26723))

(declare-fun d!26725 () Bool)

(declare-fun e!64881 () Bool)

(assert (=> d!26725 e!64881))

(declare-fun res!49996 () Bool)

(assert (=> d!26725 (=> (not res!49996) (not e!64881))))

(declare-fun lt!50208 () ListLongMap!1557)

(assert (=> d!26725 (= res!49996 (contains!810 lt!50208 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!50210 () List!1615)

(assert (=> d!26725 (= lt!50208 (ListLongMap!1558 lt!50210))))

(declare-fun lt!50209 () Unit!3031)

(declare-fun lt!50207 () Unit!3031)

(assert (=> d!26725 (= lt!50209 lt!50207)))

(assert (=> d!26725 (= (getValueByKey!150 lt!50210 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!155 (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26725 (= lt!50207 (lemmaContainsTupThenGetReturnValue!68 lt!50210 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26725 (= lt!50210 (insertStrictlySorted!70 (toList!794 e!64782) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26725 (= (+!139 e!64782 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50208)))

(declare-fun b!99576 () Bool)

(declare-fun res!49997 () Bool)

(assert (=> b!99576 (=> (not res!49997) (not e!64881))))

(assert (=> b!99576 (= res!49997 (= (getValueByKey!150 (toList!794 lt!50208) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!155 (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!99577 () Bool)

(assert (=> b!99577 (= e!64881 (contains!812 (toList!794 lt!50208) (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26725 res!49996) b!99576))

(assert (= (and b!99576 res!49997) b!99577))

(declare-fun m!109497 () Bool)

(assert (=> d!26725 m!109497))

(declare-fun m!109499 () Bool)

(assert (=> d!26725 m!109499))

(declare-fun m!109501 () Bool)

(assert (=> d!26725 m!109501))

(declare-fun m!109503 () Bool)

(assert (=> d!26725 m!109503))

(declare-fun m!109505 () Bool)

(assert (=> b!99576 m!109505))

(declare-fun m!109507 () Bool)

(assert (=> b!99577 m!109507))

(assert (=> bm!10208 d!26725))

(declare-fun d!26727 () Bool)

(assert (=> d!26727 (= (+!139 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50056 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50213 () Unit!3031)

(declare-fun choose!614 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 V!3163 Int) Unit!3031)

(assert (=> d!26727 (= lt!50213 (choose!614 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50056 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26727 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26727 (= (lemmaChangeZeroKeyThenAddPairToListMap!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50056 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) (defaultEntry!2502 newMap!16)) lt!50213)))

(declare-fun bs!4102 () Bool)

(assert (= bs!4102 d!26727))

(assert (=> bs!4102 m!109329))

(assert (=> bs!4102 m!109199))

(declare-fun m!109509 () Bool)

(assert (=> bs!4102 m!109509))

(assert (=> bs!4102 m!109123))

(declare-fun m!109511 () Bool)

(assert (=> bs!4102 m!109511))

(assert (=> bs!4102 m!109199))

(assert (=> bs!4102 m!109123))

(declare-fun m!109513 () Bool)

(assert (=> bs!4102 m!109513))

(assert (=> b!99427 d!26727))

(declare-fun d!26729 () Bool)

(declare-fun res!49998 () Bool)

(declare-fun e!64882 () Bool)

(assert (=> d!26729 (=> res!49998 e!64882)))

(assert (=> d!26729 (= res!49998 (= (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!26729 (= (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000) e!64882)))

(declare-fun b!99578 () Bool)

(declare-fun e!64883 () Bool)

(assert (=> b!99578 (= e!64882 e!64883)))

(declare-fun res!49999 () Bool)

(assert (=> b!99578 (=> (not res!49999) (not e!64883))))

(assert (=> b!99578 (= res!49999 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 (_keys!4196 newMap!16))))))

(declare-fun b!99579 () Bool)

(assert (=> b!99579 (= e!64883 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26729 (not res!49998)) b!99578))

(assert (= (and b!99578 res!49999) b!99579))

(assert (=> d!26729 m!109349))

(assert (=> b!99579 m!109089))

(declare-fun m!109515 () Bool)

(assert (=> b!99579 m!109515))

(assert (=> bm!10197 d!26729))

(declare-fun d!26731 () Bool)

(declare-fun lt!50216 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!102 (List!1616) (InoxSet (_ BitVec 64)))

(assert (=> d!26731 (= lt!50216 (select (content!102 Nil!1613) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun e!64889 () Bool)

(assert (=> d!26731 (= lt!50216 e!64889)))

(declare-fun res!50004 () Bool)

(assert (=> d!26731 (=> (not res!50004) (not e!64889))))

(assert (=> d!26731 (= res!50004 ((_ is Cons!1612) Nil!1613))))

(assert (=> d!26731 (= (contains!811 Nil!1613 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) lt!50216)))

(declare-fun b!99584 () Bool)

(declare-fun e!64888 () Bool)

(assert (=> b!99584 (= e!64889 e!64888)))

(declare-fun res!50005 () Bool)

(assert (=> b!99584 (=> res!50005 e!64888)))

(assert (=> b!99584 (= res!50005 (= (h!2207 Nil!1613) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun b!99585 () Bool)

(assert (=> b!99585 (= e!64888 (contains!811 (t!5598 Nil!1613) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!26731 res!50004) b!99584))

(assert (= (and b!99584 (not res!50005)) b!99585))

(declare-fun m!109517 () Bool)

(assert (=> d!26731 m!109517))

(assert (=> d!26731 m!109089))

(declare-fun m!109519 () Bool)

(assert (=> d!26731 m!109519))

(assert (=> b!99585 m!109089))

(declare-fun m!109521 () Bool)

(assert (=> b!99585 m!109521))

(assert (=> b!99232 d!26731))

(declare-fun d!26733 () Bool)

(declare-fun res!50006 () Bool)

(declare-fun e!64890 () Bool)

(assert (=> d!26733 (=> res!50006 e!64890)))

(assert (=> d!26733 (= res!50006 (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!26733 (= (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!64890)))

(declare-fun b!99586 () Bool)

(declare-fun e!64891 () Bool)

(assert (=> b!99586 (= e!64890 e!64891)))

(declare-fun res!50007 () Bool)

(assert (=> b!99586 (=> (not res!50007) (not e!64891))))

(assert (=> b!99586 (= res!50007 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun b!99587 () Bool)

(assert (=> b!99587 (= e!64891 (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26733 (not res!50006)) b!99586))

(assert (= (and b!99586 res!50007) b!99587))

(declare-fun m!109523 () Bool)

(assert (=> d!26733 m!109523))

(assert (=> b!99587 m!109089))

(declare-fun m!109525 () Bool)

(assert (=> b!99587 m!109525))

(assert (=> b!99214 d!26733))

(declare-fun d!26735 () Bool)

(assert (=> d!26735 (= (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (and (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99233 d!26735))

(declare-fun b!99612 () Bool)

(declare-fun e!64908 () Bool)

(assert (=> b!99612 (= e!64908 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99612 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!99613 () Bool)

(assert (=> b!99613 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> b!99613 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2272 (_values!2485 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun e!64909 () Bool)

(declare-fun lt!50232 () ListLongMap!1557)

(assert (=> b!99613 (= e!64909 (= (apply!93 lt!50232 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!99614 () Bool)

(declare-fun lt!50235 () Unit!3031)

(declare-fun lt!50234 () Unit!3031)

(assert (=> b!99614 (= lt!50235 lt!50234)))

(declare-fun lt!50231 () ListLongMap!1557)

(declare-fun lt!50237 () (_ BitVec 64))

(declare-fun lt!50236 () V!3163)

(declare-fun lt!50233 () (_ BitVec 64))

(assert (=> b!99614 (not (contains!810 (+!139 lt!50231 (tuple2!2367 lt!50237 lt!50236)) lt!50233))))

(declare-fun addStillNotContains!43 (ListLongMap!1557 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!3031)

(assert (=> b!99614 (= lt!50234 (addStillNotContains!43 lt!50231 lt!50237 lt!50236 lt!50233))))

(assert (=> b!99614 (= lt!50233 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!99614 (= lt!50236 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!99614 (= lt!50237 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun call!10249 () ListLongMap!1557)

(assert (=> b!99614 (= lt!50231 call!10249)))

(declare-fun e!64907 () ListLongMap!1557)

(assert (=> b!99614 (= e!64907 (+!139 call!10249 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99615 () Bool)

(declare-fun e!64911 () Bool)

(declare-fun isEmpty!364 (ListLongMap!1557) Bool)

(assert (=> b!99615 (= e!64911 (isEmpty!364 lt!50232))))

(declare-fun b!99616 () Bool)

(declare-fun e!64910 () Bool)

(assert (=> b!99616 (= e!64910 e!64909)))

(assert (=> b!99616 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun res!50018 () Bool)

(assert (=> b!99616 (= res!50018 (contains!810 lt!50232 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99616 (=> (not res!50018) (not e!64909))))

(declare-fun b!99617 () Bool)

(declare-fun e!64906 () ListLongMap!1557)

(assert (=> b!99617 (= e!64906 (ListLongMap!1558 Nil!1612))))

(declare-fun b!99618 () Bool)

(assert (=> b!99618 (= e!64906 e!64907)))

(declare-fun c!17020 () Bool)

(assert (=> b!99618 (= c!17020 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun d!26737 () Bool)

(declare-fun e!64912 () Bool)

(assert (=> d!26737 e!64912))

(declare-fun res!50017 () Bool)

(assert (=> d!26737 (=> (not res!50017) (not e!64912))))

(assert (=> d!26737 (= res!50017 (not (contains!810 lt!50232 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26737 (= lt!50232 e!64906)))

(declare-fun c!17019 () Bool)

(assert (=> d!26737 (= c!17019 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> d!26737 (validMask!0 (mask!6609 (v!2817 (underlying!342 thiss!992))))))

(assert (=> d!26737 (= (getCurrentListMapNoExtraKeys!103 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))) lt!50232)))

(declare-fun b!99619 () Bool)

(assert (=> b!99619 (= e!64912 e!64910)))

(declare-fun c!17021 () Bool)

(assert (=> b!99619 (= c!17021 e!64908)))

(declare-fun res!50019 () Bool)

(assert (=> b!99619 (=> (not res!50019) (not e!64908))))

(assert (=> b!99619 (= res!50019 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun bm!10246 () Bool)

(assert (=> bm!10246 (= call!10249 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun b!99620 () Bool)

(declare-fun res!50016 () Bool)

(assert (=> b!99620 (=> (not res!50016) (not e!64912))))

(assert (=> b!99620 (= res!50016 (not (contains!810 lt!50232 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99621 () Bool)

(assert (=> b!99621 (= e!64911 (= lt!50232 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun b!99622 () Bool)

(assert (=> b!99622 (= e!64907 call!10249)))

(declare-fun b!99623 () Bool)

(assert (=> b!99623 (= e!64910 e!64911)))

(declare-fun c!17022 () Bool)

(assert (=> b!99623 (= c!17022 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!26737 c!17019) b!99617))

(assert (= (and d!26737 (not c!17019)) b!99618))

(assert (= (and b!99618 c!17020) b!99614))

(assert (= (and b!99618 (not c!17020)) b!99622))

(assert (= (or b!99614 b!99622) bm!10246))

(assert (= (and d!26737 res!50017) b!99620))

(assert (= (and b!99620 res!50016) b!99619))

(assert (= (and b!99619 res!50019) b!99612))

(assert (= (and b!99619 c!17021) b!99616))

(assert (= (and b!99619 (not c!17021)) b!99623))

(assert (= (and b!99616 res!50018) b!99613))

(assert (= (and b!99623 c!17022) b!99621))

(assert (= (and b!99623 (not c!17022)) b!99615))

(declare-fun b_lambda!4455 () Bool)

(assert (=> (not b_lambda!4455) (not b!99613)))

(assert (=> b!99613 t!5594))

(declare-fun b_and!6125 () Bool)

(assert (= b_and!6121 (and (=> t!5594 result!3297) b_and!6125)))

(assert (=> b!99613 t!5596))

(declare-fun b_and!6127 () Bool)

(assert (= b_and!6123 (and (=> t!5596 result!3301) b_and!6127)))

(declare-fun b_lambda!4457 () Bool)

(assert (=> (not b_lambda!4457) (not b!99614)))

(assert (=> b!99614 t!5594))

(declare-fun b_and!6129 () Bool)

(assert (= b_and!6125 (and (=> t!5594 result!3297) b_and!6129)))

(assert (=> b!99614 t!5596))

(declare-fun b_and!6131 () Bool)

(assert (= b_and!6127 (and (=> t!5596 result!3301) b_and!6131)))

(assert (=> b!99618 m!109187))

(assert (=> b!99618 m!109187))

(assert (=> b!99618 m!109215))

(assert (=> b!99616 m!109187))

(assert (=> b!99616 m!109187))

(declare-fun m!109527 () Bool)

(assert (=> b!99616 m!109527))

(declare-fun m!109529 () Bool)

(assert (=> b!99615 m!109529))

(assert (=> b!99612 m!109187))

(assert (=> b!99612 m!109187))

(assert (=> b!99612 m!109215))

(declare-fun m!109531 () Bool)

(assert (=> bm!10246 m!109531))

(declare-fun m!109533 () Bool)

(assert (=> b!99620 m!109533))

(assert (=> b!99614 m!109121))

(declare-fun m!109535 () Bool)

(assert (=> b!99614 m!109535))

(assert (=> b!99614 m!109203))

(declare-fun m!109537 () Bool)

(assert (=> b!99614 m!109537))

(declare-fun m!109539 () Bool)

(assert (=> b!99614 m!109539))

(declare-fun m!109541 () Bool)

(assert (=> b!99614 m!109541))

(assert (=> b!99614 m!109187))

(assert (=> b!99614 m!109203))

(assert (=> b!99614 m!109121))

(assert (=> b!99614 m!109205))

(assert (=> b!99614 m!109537))

(declare-fun m!109543 () Bool)

(assert (=> d!26737 m!109543))

(assert (=> d!26737 m!109109))

(assert (=> b!99621 m!109531))

(assert (=> b!99613 m!109121))

(assert (=> b!99613 m!109203))

(assert (=> b!99613 m!109121))

(assert (=> b!99613 m!109205))

(assert (=> b!99613 m!109203))

(assert (=> b!99613 m!109187))

(declare-fun m!109545 () Bool)

(assert (=> b!99613 m!109545))

(assert (=> b!99613 m!109187))

(assert (=> bm!10143 d!26737))

(declare-fun d!26739 () Bool)

(assert (=> d!26739 (= (get!1306 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99439 d!26739))

(assert (=> d!26675 d!26679))

(declare-fun d!26741 () Bool)

(assert (=> d!26741 (not (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!26741 true))

(declare-fun _$68!94 () Unit!3031)

(assert (=> d!26741 (= (choose!68 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613)) _$68!94)))

(declare-fun bs!4103 () Bool)

(assert (= bs!4103 d!26741))

(assert (=> bs!4103 m!109089))

(assert (=> bs!4103 m!109093))

(assert (=> d!26675 d!26741))

(assert (=> b!99288 d!26721))

(declare-fun d!26743 () Bool)

(declare-fun res!50024 () Bool)

(declare-fun e!64917 () Bool)

(assert (=> d!26743 (=> res!50024 e!64917)))

(assert (=> d!26743 (= res!50024 (and ((_ is Cons!1611) (toList!794 lt!49862)) (= (_1!1193 (h!2206 (toList!794 lt!49862))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (=> d!26743 (= (containsKey!154 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) e!64917)))

(declare-fun b!99628 () Bool)

(declare-fun e!64918 () Bool)

(assert (=> b!99628 (= e!64917 e!64918)))

(declare-fun res!50025 () Bool)

(assert (=> b!99628 (=> (not res!50025) (not e!64918))))

(assert (=> b!99628 (= res!50025 (and (or (not ((_ is Cons!1611) (toList!794 lt!49862))) (bvsle (_1!1193 (h!2206 (toList!794 lt!49862))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))) ((_ is Cons!1611) (toList!794 lt!49862)) (bvslt (_1!1193 (h!2206 (toList!794 lt!49862))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(declare-fun b!99629 () Bool)

(assert (=> b!99629 (= e!64918 (containsKey!154 (t!5597 (toList!794 lt!49862)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!26743 (not res!50024)) b!99628))

(assert (= (and b!99628 res!50025) b!99629))

(assert (=> b!99629 m!109089))

(declare-fun m!109547 () Bool)

(assert (=> b!99629 m!109547))

(assert (=> d!26693 d!26743))

(declare-fun b!99630 () Bool)

(declare-fun e!64922 () Bool)

(declare-fun e!64919 () Bool)

(assert (=> b!99630 (= e!64922 e!64919)))

(declare-fun c!17023 () Bool)

(assert (=> b!99630 (= c!17023 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99631 () Bool)

(declare-fun e!64920 () Bool)

(assert (=> b!99631 (= e!64920 (contains!811 Nil!1613 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10247 () Bool)

(declare-fun call!10250 () Bool)

(assert (=> bm!10247 (= call!10250 (arrayNoDuplicates!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17023 (Cons!1612 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) Nil!1613) Nil!1613)))))

(declare-fun b!99632 () Bool)

(declare-fun e!64921 () Bool)

(assert (=> b!99632 (= e!64921 e!64922)))

(declare-fun res!50027 () Bool)

(assert (=> b!99632 (=> (not res!50027) (not e!64922))))

(assert (=> b!99632 (= res!50027 (not e!64920))))

(declare-fun res!50026 () Bool)

(assert (=> b!99632 (=> (not res!50026) (not e!64920))))

(assert (=> b!99632 (= res!50026 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99633 () Bool)

(assert (=> b!99633 (= e!64919 call!10250)))

(declare-fun d!26745 () Bool)

(declare-fun res!50028 () Bool)

(assert (=> d!26745 (=> res!50028 e!64921)))

(assert (=> d!26745 (= res!50028 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!26745 (= (arrayNoDuplicates!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 Nil!1613) e!64921)))

(declare-fun b!99634 () Bool)

(assert (=> b!99634 (= e!64919 call!10250)))

(assert (= (and d!26745 (not res!50028)) b!99632))

(assert (= (and b!99632 res!50026) b!99631))

(assert (= (and b!99632 res!50027) b!99630))

(assert (= (and b!99630 c!17023) b!99634))

(assert (= (and b!99630 (not c!17023)) b!99633))

(assert (= (or b!99634 b!99633) bm!10247))

(assert (=> b!99630 m!109349))

(assert (=> b!99630 m!109349))

(assert (=> b!99630 m!109367))

(assert (=> b!99631 m!109349))

(assert (=> b!99631 m!109349))

(declare-fun m!109549 () Bool)

(assert (=> b!99631 m!109549))

(assert (=> bm!10247 m!109349))

(declare-fun m!109551 () Bool)

(assert (=> bm!10247 m!109551))

(assert (=> b!99632 m!109349))

(assert (=> b!99632 m!109349))

(assert (=> b!99632 m!109367))

(assert (=> b!99208 d!26745))

(declare-fun d!26747 () Bool)

(declare-fun e!64925 () Bool)

(assert (=> d!26747 e!64925))

(declare-fun res!50034 () Bool)

(assert (=> d!26747 (=> (not res!50034) (not e!64925))))

(declare-fun lt!50243 () SeekEntryResult!264)

(assert (=> d!26747 (= res!50034 ((_ is Found!264) lt!50243))))

(assert (=> d!26747 (= lt!50243 (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun lt!50242 () Unit!3031)

(declare-fun choose!615 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) Int) Unit!3031)

(assert (=> d!26747 (= lt!50242 (choose!615 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26747 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26747 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!42 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)) lt!50242)))

(declare-fun b!99639 () Bool)

(declare-fun res!50033 () Bool)

(assert (=> b!99639 (=> (not res!50033) (not e!64925))))

(assert (=> b!99639 (= res!50033 (inRange!0 (index!3201 lt!50243) (mask!6609 newMap!16)))))

(declare-fun b!99640 () Bool)

(assert (=> b!99640 (= e!64925 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50243)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> b!99640 (and (bvsge (index!3201 lt!50243) #b00000000000000000000000000000000) (bvslt (index!3201 lt!50243) (size!2271 (_keys!4196 newMap!16))))))

(assert (= (and d!26747 res!50034) b!99639))

(assert (= (and b!99639 res!50033) b!99640))

(assert (=> d!26747 m!109089))

(assert (=> d!26747 m!109305))

(assert (=> d!26747 m!109089))

(declare-fun m!109553 () Bool)

(assert (=> d!26747 m!109553))

(assert (=> d!26747 m!109329))

(declare-fun m!109555 () Bool)

(assert (=> b!99639 m!109555))

(declare-fun m!109557 () Bool)

(assert (=> b!99640 m!109557))

(assert (=> bm!10193 d!26747))

(declare-fun d!26749 () Bool)

(declare-fun e!64926 () Bool)

(assert (=> d!26749 e!64926))

(declare-fun res!50035 () Bool)

(assert (=> d!26749 (=> res!50035 e!64926)))

(declare-fun lt!50245 () Bool)

(assert (=> d!26749 (= res!50035 (not lt!50245))))

(declare-fun lt!50247 () Bool)

(assert (=> d!26749 (= lt!50245 lt!50247)))

(declare-fun lt!50244 () Unit!3031)

(declare-fun e!64927 () Unit!3031)

(assert (=> d!26749 (= lt!50244 e!64927)))

(declare-fun c!17024 () Bool)

(assert (=> d!26749 (= c!17024 lt!50247)))

(assert (=> d!26749 (= lt!50247 (containsKey!154 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26749 (= (contains!810 lt!49947 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50245)))

(declare-fun b!99641 () Bool)

(declare-fun lt!50246 () Unit!3031)

(assert (=> b!99641 (= e!64927 lt!50246)))

(assert (=> b!99641 (= lt!50246 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99641 (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99642 () Bool)

(declare-fun Unit!3045 () Unit!3031)

(assert (=> b!99642 (= e!64927 Unit!3045)))

(declare-fun b!99643 () Bool)

(assert (=> b!99643 (= e!64926 (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26749 c!17024) b!99641))

(assert (= (and d!26749 (not c!17024)) b!99642))

(assert (= (and d!26749 (not res!50035)) b!99643))

(declare-fun m!109559 () Bool)

(assert (=> d!26749 m!109559))

(declare-fun m!109561 () Bool)

(assert (=> b!99641 m!109561))

(declare-fun m!109563 () Bool)

(assert (=> b!99641 m!109563))

(assert (=> b!99641 m!109563))

(declare-fun m!109565 () Bool)

(assert (=> b!99641 m!109565))

(assert (=> b!99643 m!109563))

(assert (=> b!99643 m!109563))

(assert (=> b!99643 m!109565))

(assert (=> bm!10140 d!26749))

(declare-fun d!26751 () Bool)

(assert (=> d!26751 (= (inRange!0 (ite c!16969 (ite c!16963 (index!3201 lt!50046) (ite c!16974 (index!3200 lt!50055) (index!3203 lt!50055))) (ite c!16970 (index!3201 lt!50037) (ite c!16971 (index!3200 lt!50035) (index!3203 lt!50035)))) (mask!6609 newMap!16)) (and (bvsge (ite c!16969 (ite c!16963 (index!3201 lt!50046) (ite c!16974 (index!3200 lt!50055) (index!3203 lt!50055))) (ite c!16970 (index!3201 lt!50037) (ite c!16971 (index!3200 lt!50035) (index!3203 lt!50035)))) #b00000000000000000000000000000000) (bvslt (ite c!16969 (ite c!16963 (index!3201 lt!50046) (ite c!16974 (index!3200 lt!50055) (index!3203 lt!50055))) (ite c!16970 (index!3201 lt!50037) (ite c!16971 (index!3200 lt!50035) (index!3203 lt!50035)))) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10195 d!26751))

(assert (=> d!26685 d!26709))

(declare-fun d!26753 () Bool)

(declare-fun e!64928 () Bool)

(assert (=> d!26753 e!64928))

(declare-fun res!50036 () Bool)

(assert (=> d!26753 (=> (not res!50036) (not e!64928))))

(declare-fun lt!50249 () ListLongMap!1557)

(assert (=> d!26753 (= res!50036 (contains!810 lt!50249 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun lt!50251 () List!1615)

(assert (=> d!26753 (= lt!50249 (ListLongMap!1558 lt!50251))))

(declare-fun lt!50250 () Unit!3031)

(declare-fun lt!50248 () Unit!3031)

(assert (=> d!26753 (= lt!50250 lt!50248)))

(assert (=> d!26753 (= (getValueByKey!150 lt!50251 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26753 (= lt!50248 (lemmaContainsTupThenGetReturnValue!68 lt!50251 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26753 (= lt!50251 (insertStrictlySorted!70 (toList!794 lt!49949) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26753 (= (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!50249)))

(declare-fun b!99644 () Bool)

(declare-fun res!50037 () Bool)

(assert (=> b!99644 (=> (not res!50037) (not e!64928))))

(assert (=> b!99644 (= res!50037 (= (getValueByKey!150 (toList!794 lt!50249) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!99645 () Bool)

(assert (=> b!99645 (= e!64928 (contains!812 (toList!794 lt!50249) (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!26753 res!50036) b!99644))

(assert (= (and b!99644 res!50037) b!99645))

(declare-fun m!109567 () Bool)

(assert (=> d!26753 m!109567))

(declare-fun m!109569 () Bool)

(assert (=> d!26753 m!109569))

(declare-fun m!109571 () Bool)

(assert (=> d!26753 m!109571))

(declare-fun m!109573 () Bool)

(assert (=> d!26753 m!109573))

(declare-fun m!109575 () Bool)

(assert (=> b!99644 m!109575))

(declare-fun m!109577 () Bool)

(assert (=> b!99645 m!109577))

(assert (=> b!99285 d!26753))

(declare-fun d!26755 () Bool)

(declare-fun get!1307 (Option!156) V!3163)

(assert (=> d!26755 (= (apply!93 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49952) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49952)))))

(declare-fun bs!4104 () Bool)

(assert (= bs!4104 d!26755))

(declare-fun m!109579 () Bool)

(assert (=> bs!4104 m!109579))

(assert (=> bs!4104 m!109579))

(declare-fun m!109581 () Bool)

(assert (=> bs!4104 m!109581))

(assert (=> b!99285 d!26755))

(declare-fun d!26757 () Bool)

(assert (=> d!26757 (= (apply!93 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49961) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49961)))))

(declare-fun bs!4105 () Bool)

(assert (= bs!4105 d!26757))

(declare-fun m!109583 () Bool)

(assert (=> bs!4105 m!109583))

(assert (=> bs!4105 m!109583))

(declare-fun m!109585 () Bool)

(assert (=> bs!4105 m!109585))

(assert (=> b!99285 d!26757))

(assert (=> b!99285 d!26737))

(declare-fun d!26759 () Bool)

(declare-fun e!64929 () Bool)

(assert (=> d!26759 e!64929))

(declare-fun res!50038 () Bool)

(assert (=> d!26759 (=> (not res!50038) (not e!64929))))

(declare-fun lt!50253 () ListLongMap!1557)

(assert (=> d!26759 (= res!50038 (contains!810 lt!50253 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun lt!50255 () List!1615)

(assert (=> d!26759 (= lt!50253 (ListLongMap!1558 lt!50255))))

(declare-fun lt!50254 () Unit!3031)

(declare-fun lt!50252 () Unit!3031)

(assert (=> d!26759 (= lt!50254 lt!50252)))

(assert (=> d!26759 (= (getValueByKey!150 lt!50255 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26759 (= lt!50252 (lemmaContainsTupThenGetReturnValue!68 lt!50255 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26759 (= lt!50255 (insertStrictlySorted!70 (toList!794 lt!49959) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26759 (= (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!50253)))

(declare-fun b!99646 () Bool)

(declare-fun res!50039 () Bool)

(assert (=> b!99646 (=> (not res!50039) (not e!64929))))

(assert (=> b!99646 (= res!50039 (= (getValueByKey!150 (toList!794 lt!50253) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!99647 () Bool)

(assert (=> b!99647 (= e!64929 (contains!812 (toList!794 lt!50253) (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!26759 res!50038) b!99646))

(assert (= (and b!99646 res!50039) b!99647))

(declare-fun m!109587 () Bool)

(assert (=> d!26759 m!109587))

(declare-fun m!109589 () Bool)

(assert (=> d!26759 m!109589))

(declare-fun m!109591 () Bool)

(assert (=> d!26759 m!109591))

(declare-fun m!109593 () Bool)

(assert (=> d!26759 m!109593))

(declare-fun m!109595 () Bool)

(assert (=> b!99646 m!109595))

(declare-fun m!109597 () Bool)

(assert (=> b!99647 m!109597))

(assert (=> b!99285 d!26759))

(declare-fun d!26761 () Bool)

(assert (=> d!26761 (contains!810 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49943)))

(declare-fun lt!50258 () Unit!3031)

(declare-fun choose!616 (ListLongMap!1557 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!3031)

(assert (=> d!26761 (= lt!50258 (choose!616 lt!49959 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49943))))

(assert (=> d!26761 (contains!810 lt!49959 lt!49943)))

(assert (=> d!26761 (= (addStillContains!69 lt!49959 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49943) lt!50258)))

(declare-fun bs!4106 () Bool)

(assert (= bs!4106 d!26761))

(assert (=> bs!4106 m!109229))

(assert (=> bs!4106 m!109229))

(assert (=> bs!4106 m!109233))

(declare-fun m!109599 () Bool)

(assert (=> bs!4106 m!109599))

(declare-fun m!109601 () Bool)

(assert (=> bs!4106 m!109601))

(assert (=> b!99285 d!26761))

(declare-fun d!26763 () Bool)

(assert (=> d!26763 (= (apply!93 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49952) (apply!93 lt!49953 lt!49952))))

(declare-fun lt!50261 () Unit!3031)

(declare-fun choose!617 (ListLongMap!1557 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!3031)

(assert (=> d!26763 (= lt!50261 (choose!617 lt!49953 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49952))))

(declare-fun e!64932 () Bool)

(assert (=> d!26763 e!64932))

(declare-fun res!50042 () Bool)

(assert (=> d!26763 (=> (not res!50042) (not e!64932))))

(assert (=> d!26763 (= res!50042 (contains!810 lt!49953 lt!49952))))

(assert (=> d!26763 (= (addApplyDifferent!69 lt!49953 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49952) lt!50261)))

(declare-fun b!99652 () Bool)

(assert (=> b!99652 (= e!64932 (not (= lt!49952 lt!49955)))))

(assert (= (and d!26763 res!50042) b!99652))

(assert (=> d!26763 m!109245))

(assert (=> d!26763 m!109249))

(declare-fun m!109603 () Bool)

(assert (=> d!26763 m!109603))

(declare-fun m!109605 () Bool)

(assert (=> d!26763 m!109605))

(assert (=> d!26763 m!109245))

(assert (=> d!26763 m!109227))

(assert (=> b!99285 d!26763))

(declare-fun d!26765 () Bool)

(assert (=> d!26765 (= (apply!93 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49963) (apply!93 lt!49949 lt!49963))))

(declare-fun lt!50262 () Unit!3031)

(assert (=> d!26765 (= lt!50262 (choose!617 lt!49949 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49963))))

(declare-fun e!64933 () Bool)

(assert (=> d!26765 e!64933))

(declare-fun res!50043 () Bool)

(assert (=> d!26765 (=> (not res!50043) (not e!64933))))

(assert (=> d!26765 (= res!50043 (contains!810 lt!49949 lt!49963))))

(assert (=> d!26765 (= (addApplyDifferent!69 lt!49949 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49963) lt!50262)))

(declare-fun b!99653 () Bool)

(assert (=> b!99653 (= e!64933 (not (= lt!49963 lt!49957)))))

(assert (= (and d!26765 res!50043) b!99653))

(assert (=> d!26765 m!109223))

(assert (=> d!26765 m!109225))

(declare-fun m!109607 () Bool)

(assert (=> d!26765 m!109607))

(declare-fun m!109609 () Bool)

(assert (=> d!26765 m!109609))

(assert (=> d!26765 m!109223))

(assert (=> d!26765 m!109251))

(assert (=> b!99285 d!26765))

(declare-fun d!26767 () Bool)

(assert (=> d!26767 (= (apply!93 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49961) (apply!93 lt!49960 lt!49961))))

(declare-fun lt!50263 () Unit!3031)

(assert (=> d!26767 (= lt!50263 (choose!617 lt!49960 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49961))))

(declare-fun e!64934 () Bool)

(assert (=> d!26767 e!64934))

(declare-fun res!50044 () Bool)

(assert (=> d!26767 (=> (not res!50044) (not e!64934))))

(assert (=> d!26767 (= res!50044 (contains!810 lt!49960 lt!49961))))

(assert (=> d!26767 (= (addApplyDifferent!69 lt!49960 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49961) lt!50263)))

(declare-fun b!99654 () Bool)

(assert (=> b!99654 (= e!64934 (not (= lt!49961 lt!49948)))))

(assert (= (and d!26767 res!50044) b!99654))

(assert (=> d!26767 m!109231))

(assert (=> d!26767 m!109243))

(declare-fun m!109611 () Bool)

(assert (=> d!26767 m!109611))

(declare-fun m!109613 () Bool)

(assert (=> d!26767 m!109613))

(assert (=> d!26767 m!109231))

(assert (=> d!26767 m!109239))

(assert (=> b!99285 d!26767))

(declare-fun d!26769 () Bool)

(declare-fun e!64935 () Bool)

(assert (=> d!26769 e!64935))

(declare-fun res!50045 () Bool)

(assert (=> d!26769 (=> (not res!50045) (not e!64935))))

(declare-fun lt!50265 () ListLongMap!1557)

(assert (=> d!26769 (= res!50045 (contains!810 lt!50265 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun lt!50267 () List!1615)

(assert (=> d!26769 (= lt!50265 (ListLongMap!1558 lt!50267))))

(declare-fun lt!50266 () Unit!3031)

(declare-fun lt!50264 () Unit!3031)

(assert (=> d!26769 (= lt!50266 lt!50264)))

(assert (=> d!26769 (= (getValueByKey!150 lt!50267 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26769 (= lt!50264 (lemmaContainsTupThenGetReturnValue!68 lt!50267 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26769 (= lt!50267 (insertStrictlySorted!70 (toList!794 lt!49953) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26769 (= (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!50265)))

(declare-fun b!99655 () Bool)

(declare-fun res!50046 () Bool)

(assert (=> b!99655 (=> (not res!50046) (not e!64935))))

(assert (=> b!99655 (= res!50046 (= (getValueByKey!150 (toList!794 lt!50265) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!99656 () Bool)

(assert (=> b!99656 (= e!64935 (contains!812 (toList!794 lt!50265) (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!26769 res!50045) b!99655))

(assert (= (and b!99655 res!50046) b!99656))

(declare-fun m!109615 () Bool)

(assert (=> d!26769 m!109615))

(declare-fun m!109617 () Bool)

(assert (=> d!26769 m!109617))

(declare-fun m!109619 () Bool)

(assert (=> d!26769 m!109619))

(declare-fun m!109621 () Bool)

(assert (=> d!26769 m!109621))

(declare-fun m!109623 () Bool)

(assert (=> b!99655 m!109623))

(declare-fun m!109625 () Bool)

(assert (=> b!99656 m!109625))

(assert (=> b!99285 d!26769))

(declare-fun d!26771 () Bool)

(assert (=> d!26771 (= (apply!93 lt!49960 lt!49961) (get!1307 (getValueByKey!150 (toList!794 lt!49960) lt!49961)))))

(declare-fun bs!4107 () Bool)

(assert (= bs!4107 d!26771))

(declare-fun m!109627 () Bool)

(assert (=> bs!4107 m!109627))

(assert (=> bs!4107 m!109627))

(declare-fun m!109629 () Bool)

(assert (=> bs!4107 m!109629))

(assert (=> b!99285 d!26771))

(declare-fun d!26773 () Bool)

(assert (=> d!26773 (= (apply!93 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49963) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49963)))))

(declare-fun bs!4108 () Bool)

(assert (= bs!4108 d!26773))

(declare-fun m!109631 () Bool)

(assert (=> bs!4108 m!109631))

(assert (=> bs!4108 m!109631))

(declare-fun m!109633 () Bool)

(assert (=> bs!4108 m!109633))

(assert (=> b!99285 d!26773))

(declare-fun d!26775 () Bool)

(assert (=> d!26775 (= (apply!93 lt!49953 lt!49952) (get!1307 (getValueByKey!150 (toList!794 lt!49953) lt!49952)))))

(declare-fun bs!4109 () Bool)

(assert (= bs!4109 d!26775))

(declare-fun m!109635 () Bool)

(assert (=> bs!4109 m!109635))

(assert (=> bs!4109 m!109635))

(declare-fun m!109637 () Bool)

(assert (=> bs!4109 m!109637))

(assert (=> b!99285 d!26775))

(declare-fun d!26777 () Bool)

(assert (=> d!26777 (= (apply!93 lt!49949 lt!49963) (get!1307 (getValueByKey!150 (toList!794 lt!49949) lt!49963)))))

(declare-fun bs!4110 () Bool)

(assert (= bs!4110 d!26777))

(declare-fun m!109639 () Bool)

(assert (=> bs!4110 m!109639))

(assert (=> bs!4110 m!109639))

(declare-fun m!109641 () Bool)

(assert (=> bs!4110 m!109641))

(assert (=> b!99285 d!26777))

(declare-fun d!26779 () Bool)

(declare-fun e!64936 () Bool)

(assert (=> d!26779 e!64936))

(declare-fun res!50047 () Bool)

(assert (=> d!26779 (=> res!50047 e!64936)))

(declare-fun lt!50269 () Bool)

(assert (=> d!26779 (= res!50047 (not lt!50269))))

(declare-fun lt!50271 () Bool)

(assert (=> d!26779 (= lt!50269 lt!50271)))

(declare-fun lt!50268 () Unit!3031)

(declare-fun e!64937 () Unit!3031)

(assert (=> d!26779 (= lt!50268 e!64937)))

(declare-fun c!17025 () Bool)

(assert (=> d!26779 (= c!17025 lt!50271)))

(assert (=> d!26779 (= lt!50271 (containsKey!154 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943))))

(assert (=> d!26779 (= (contains!810 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49943) lt!50269)))

(declare-fun b!99657 () Bool)

(declare-fun lt!50270 () Unit!3031)

(assert (=> b!99657 (= e!64937 lt!50270)))

(assert (=> b!99657 (= lt!50270 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943))))

(assert (=> b!99657 (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943))))

(declare-fun b!99658 () Bool)

(declare-fun Unit!3046 () Unit!3031)

(assert (=> b!99658 (= e!64937 Unit!3046)))

(declare-fun b!99659 () Bool)

(assert (=> b!99659 (= e!64936 (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943)))))

(assert (= (and d!26779 c!17025) b!99657))

(assert (= (and d!26779 (not c!17025)) b!99658))

(assert (= (and d!26779 (not res!50047)) b!99659))

(declare-fun m!109643 () Bool)

(assert (=> d!26779 m!109643))

(declare-fun m!109645 () Bool)

(assert (=> b!99657 m!109645))

(declare-fun m!109647 () Bool)

(assert (=> b!99657 m!109647))

(assert (=> b!99657 m!109647))

(declare-fun m!109649 () Bool)

(assert (=> b!99657 m!109649))

(assert (=> b!99659 m!109647))

(assert (=> b!99659 m!109647))

(assert (=> b!99659 m!109649))

(assert (=> b!99285 d!26779))

(declare-fun d!26781 () Bool)

(declare-fun e!64938 () Bool)

(assert (=> d!26781 e!64938))

(declare-fun res!50048 () Bool)

(assert (=> d!26781 (=> (not res!50048) (not e!64938))))

(declare-fun lt!50273 () ListLongMap!1557)

(assert (=> d!26781 (= res!50048 (contains!810 lt!50273 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun lt!50275 () List!1615)

(assert (=> d!26781 (= lt!50273 (ListLongMap!1558 lt!50275))))

(declare-fun lt!50274 () Unit!3031)

(declare-fun lt!50272 () Unit!3031)

(assert (=> d!26781 (= lt!50274 lt!50272)))

(assert (=> d!26781 (= (getValueByKey!150 lt!50275 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26781 (= lt!50272 (lemmaContainsTupThenGetReturnValue!68 lt!50275 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26781 (= lt!50275 (insertStrictlySorted!70 (toList!794 lt!49960) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26781 (= (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!50273)))

(declare-fun b!99660 () Bool)

(declare-fun res!50049 () Bool)

(assert (=> b!99660 (=> (not res!50049) (not e!64938))))

(assert (=> b!99660 (= res!50049 (= (getValueByKey!150 (toList!794 lt!50273) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!99661 () Bool)

(assert (=> b!99661 (= e!64938 (contains!812 (toList!794 lt!50273) (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!26781 res!50048) b!99660))

(assert (= (and b!99660 res!50049) b!99661))

(declare-fun m!109651 () Bool)

(assert (=> d!26781 m!109651))

(declare-fun m!109653 () Bool)

(assert (=> d!26781 m!109653))

(declare-fun m!109655 () Bool)

(assert (=> d!26781 m!109655))

(declare-fun m!109657 () Bool)

(assert (=> d!26781 m!109657))

(declare-fun m!109659 () Bool)

(assert (=> b!99660 m!109659))

(declare-fun m!109661 () Bool)

(assert (=> b!99661 m!109661))

(assert (=> b!99285 d!26781))

(assert (=> d!26677 d!26683))

(declare-fun d!26783 () Bool)

(assert (=> d!26783 (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) from!355 Nil!1613)))

(assert (=> d!26783 true))

(declare-fun _$71!135 () Unit!3031)

(assert (=> d!26783 (= (choose!39 (_keys!4196 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!135)))

(declare-fun bs!4111 () Bool)

(assert (= bs!4111 d!26783))

(assert (=> bs!4111 m!109087))

(assert (=> d!26677 d!26783))

(declare-fun d!26785 () Bool)

(declare-fun isEmpty!365 (Option!156) Bool)

(assert (=> d!26785 (= (isDefined!104 (getValueByKey!150 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))) (not (isEmpty!365 (getValueByKey!150 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))))

(declare-fun bs!4112 () Bool)

(assert (= bs!4112 d!26785))

(assert (=> bs!4112 m!109259))

(declare-fun m!109663 () Bool)

(assert (=> bs!4112 m!109663))

(assert (=> b!99307 d!26785))

(declare-fun b!99671 () Bool)

(declare-fun e!64943 () Option!156)

(declare-fun e!64944 () Option!156)

(assert (=> b!99671 (= e!64943 e!64944)))

(declare-fun c!17031 () Bool)

(assert (=> b!99671 (= c!17031 (and ((_ is Cons!1611) (toList!794 lt!49862)) (not (= (_1!1193 (h!2206 (toList!794 lt!49862))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))))

(declare-fun c!17030 () Bool)

(declare-fun d!26787 () Bool)

(assert (=> d!26787 (= c!17030 (and ((_ is Cons!1611) (toList!794 lt!49862)) (= (_1!1193 (h!2206 (toList!794 lt!49862))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (=> d!26787 (= (getValueByKey!150 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) e!64943)))

(declare-fun b!99673 () Bool)

(assert (=> b!99673 (= e!64944 None!154)))

(declare-fun b!99670 () Bool)

(assert (=> b!99670 (= e!64943 (Some!155 (_2!1193 (h!2206 (toList!794 lt!49862)))))))

(declare-fun b!99672 () Bool)

(assert (=> b!99672 (= e!64944 (getValueByKey!150 (t!5597 (toList!794 lt!49862)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!26787 c!17030) b!99670))

(assert (= (and d!26787 (not c!17030)) b!99671))

(assert (= (and b!99671 c!17031) b!99672))

(assert (= (and b!99671 (not c!17031)) b!99673))

(assert (=> b!99672 m!109089))

(declare-fun m!109665 () Bool)

(assert (=> b!99672 m!109665))

(assert (=> b!99307 d!26787))

(declare-fun d!26789 () Bool)

(declare-fun e!64945 () Bool)

(assert (=> d!26789 e!64945))

(declare-fun res!50050 () Bool)

(assert (=> d!26789 (=> (not res!50050) (not e!64945))))

(declare-fun lt!50277 () ListLongMap!1557)

(assert (=> d!26789 (= res!50050 (contains!810 lt!50277 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun lt!50279 () List!1615)

(assert (=> d!26789 (= lt!50277 (ListLongMap!1558 lt!50279))))

(declare-fun lt!50278 () Unit!3031)

(declare-fun lt!50276 () Unit!3031)

(assert (=> d!26789 (= lt!50278 lt!50276)))

(assert (=> d!26789 (= (getValueByKey!150 lt!50279 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) (Some!155 (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!26789 (= lt!50276 (lemmaContainsTupThenGetReturnValue!68 lt!50279 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!26789 (= lt!50279 (insertStrictlySorted!70 (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141))) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!26789 (= (+!139 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141)) (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50277)))

(declare-fun b!99674 () Bool)

(declare-fun res!50051 () Bool)

(assert (=> b!99674 (=> (not res!50051) (not e!64945))))

(assert (=> b!99674 (= res!50051 (= (getValueByKey!150 (toList!794 lt!50277) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) (Some!155 (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun b!99675 () Bool)

(assert (=> b!99675 (= e!64945 (contains!812 (toList!794 lt!50277) (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!26789 res!50050) b!99674))

(assert (= (and b!99674 res!50051) b!99675))

(declare-fun m!109667 () Bool)

(assert (=> d!26789 m!109667))

(declare-fun m!109669 () Bool)

(assert (=> d!26789 m!109669))

(declare-fun m!109671 () Bool)

(assert (=> d!26789 m!109671))

(declare-fun m!109673 () Bool)

(assert (=> d!26789 m!109673))

(declare-fun m!109675 () Bool)

(assert (=> b!99674 m!109675))

(declare-fun m!109677 () Bool)

(assert (=> b!99675 m!109677))

(assert (=> bm!10139 d!26789))

(declare-fun d!26791 () Bool)

(assert (=> d!26791 (= (map!1259 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (getCurrentListMap!474 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (_values!2485 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (mask!6609 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 newMap!16 (_2!1192 lt!50030)))))))

(declare-fun bs!4113 () Bool)

(assert (= bs!4113 d!26791))

(declare-fun m!109679 () Bool)

(assert (=> bs!4113 m!109679))

(assert (=> bm!10209 d!26791))

(declare-fun b!99684 () Bool)

(declare-fun e!64952 () Bool)

(declare-fun e!64953 () Bool)

(assert (=> b!99684 (= e!64952 e!64953)))

(declare-fun c!17034 () Bool)

(assert (=> b!99684 (= c!17034 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!10250 () Bool)

(declare-fun call!10253 () Bool)

(assert (=> bm!10250 (= call!10253 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!99685 () Bool)

(declare-fun e!64954 () Bool)

(assert (=> b!99685 (= e!64953 e!64954)))

(declare-fun lt!50288 () (_ BitVec 64))

(assert (=> b!99685 (= lt!50288 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50287 () Unit!3031)

(assert (=> b!99685 (= lt!50287 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4196 newMap!16) lt!50288 #b00000000000000000000000000000000))))

(assert (=> b!99685 (arrayContainsKey!0 (_keys!4196 newMap!16) lt!50288 #b00000000000000000000000000000000)))

(declare-fun lt!50286 () Unit!3031)

(assert (=> b!99685 (= lt!50286 lt!50287)))

(declare-fun res!50056 () Bool)

(assert (=> b!99685 (= res!50056 (= (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (_keys!4196 newMap!16) (mask!6609 newMap!16)) (Found!264 #b00000000000000000000000000000000)))))

(assert (=> b!99685 (=> (not res!50056) (not e!64954))))

(declare-fun d!26793 () Bool)

(declare-fun res!50057 () Bool)

(assert (=> d!26793 (=> res!50057 e!64952)))

(assert (=> d!26793 (= res!50057 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!26793 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 newMap!16) (mask!6609 newMap!16)) e!64952)))

(declare-fun b!99686 () Bool)

(assert (=> b!99686 (= e!64954 call!10253)))

(declare-fun b!99687 () Bool)

(assert (=> b!99687 (= e!64953 call!10253)))

(assert (= (and d!26793 (not res!50057)) b!99684))

(assert (= (and b!99684 c!17034) b!99685))

(assert (= (and b!99684 (not c!17034)) b!99687))

(assert (= (and b!99685 res!50056) b!99686))

(assert (= (or b!99686 b!99687) bm!10250))

(assert (=> b!99684 m!109349))

(assert (=> b!99684 m!109349))

(assert (=> b!99684 m!109367))

(declare-fun m!109681 () Bool)

(assert (=> bm!10250 m!109681))

(assert (=> b!99685 m!109349))

(declare-fun m!109683 () Bool)

(assert (=> b!99685 m!109683))

(declare-fun m!109685 () Bool)

(assert (=> b!99685 m!109685))

(assert (=> b!99685 m!109349))

(declare-fun m!109687 () Bool)

(assert (=> b!99685 m!109687))

(assert (=> b!99207 d!26793))

(declare-fun b!99688 () Bool)

(declare-fun e!64965 () Bool)

(declare-fun call!10258 () Bool)

(assert (=> b!99688 (= e!64965 (not call!10258))))

(declare-fun b!99689 () Bool)

(declare-fun e!64966 () Bool)

(declare-fun e!64967 () Bool)

(assert (=> b!99689 (= e!64966 e!64967)))

(declare-fun res!50062 () Bool)

(assert (=> b!99689 (=> (not res!50062) (not e!64967))))

(declare-fun lt!50294 () ListLongMap!1557)

(assert (=> b!99689 (= res!50062 (contains!810 lt!50294 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99689 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun bm!10251 () Bool)

(declare-fun call!10255 () ListLongMap!1557)

(declare-fun call!10254 () ListLongMap!1557)

(assert (=> bm!10251 (= call!10255 call!10254)))

(declare-fun bm!10252 () Bool)

(declare-fun call!10256 () ListLongMap!1557)

(assert (=> bm!10252 (= call!10254 call!10256)))

(declare-fun b!99690 () Bool)

(declare-fun e!64956 () Bool)

(assert (=> b!99690 (= e!64965 e!64956)))

(declare-fun res!50058 () Bool)

(assert (=> b!99690 (= res!50058 call!10258)))

(assert (=> b!99690 (=> (not res!50058) (not e!64956))))

(declare-fun b!99691 () Bool)

(declare-fun e!64955 () Bool)

(declare-fun call!10257 () Bool)

(assert (=> b!99691 (= e!64955 (not call!10257))))

(declare-fun b!99692 () Bool)

(declare-fun e!64957 () Bool)

(assert (=> b!99692 (= e!64957 (= (apply!93 lt!50294 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!99693 () Bool)

(declare-fun c!17039 () Bool)

(assert (=> b!99693 (= c!17039 (and (not (= (bvand (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!64959 () ListLongMap!1557)

(declare-fun e!64964 () ListLongMap!1557)

(assert (=> b!99693 (= e!64959 e!64964)))

(declare-fun c!17040 () Bool)

(declare-fun call!10260 () ListLongMap!1557)

(declare-fun c!17037 () Bool)

(declare-fun bm!10253 () Bool)

(assert (=> bm!10253 (= call!10260 (+!139 (ite c!17037 call!10256 (ite c!17040 call!10254 call!10255)) (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!99694 () Bool)

(declare-fun e!64960 () Bool)

(assert (=> b!99694 (= e!64960 e!64955)))

(declare-fun c!17036 () Bool)

(assert (=> b!99694 (= c!17036 (not (= (bvand (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99695 () Bool)

(declare-fun e!64963 () Unit!3031)

(declare-fun lt!50291 () Unit!3031)

(assert (=> b!99695 (= e!64963 lt!50291)))

(declare-fun lt!50306 () ListLongMap!1557)

(assert (=> b!99695 (= lt!50306 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50303 () (_ BitVec 64))

(assert (=> b!99695 (= lt!50303 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50290 () (_ BitVec 64))

(assert (=> b!99695 (= lt!50290 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50292 () Unit!3031)

(assert (=> b!99695 (= lt!50292 (addStillContains!69 lt!50306 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50290))))

(assert (=> b!99695 (contains!810 (+!139 lt!50306 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50290)))

(declare-fun lt!50301 () Unit!3031)

(assert (=> b!99695 (= lt!50301 lt!50292)))

(declare-fun lt!50300 () ListLongMap!1557)

(assert (=> b!99695 (= lt!50300 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50302 () (_ BitVec 64))

(assert (=> b!99695 (= lt!50302 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50299 () (_ BitVec 64))

(assert (=> b!99695 (= lt!50299 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50298 () Unit!3031)

(assert (=> b!99695 (= lt!50298 (addApplyDifferent!69 lt!50300 lt!50302 (minValue!2383 newMap!16) lt!50299))))

(assert (=> b!99695 (= (apply!93 (+!139 lt!50300 (tuple2!2367 lt!50302 (minValue!2383 newMap!16))) lt!50299) (apply!93 lt!50300 lt!50299))))

(declare-fun lt!50297 () Unit!3031)

(assert (=> b!99695 (= lt!50297 lt!50298)))

(declare-fun lt!50307 () ListLongMap!1557)

(assert (=> b!99695 (= lt!50307 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50295 () (_ BitVec 64))

(assert (=> b!99695 (= lt!50295 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50308 () (_ BitVec 64))

(assert (=> b!99695 (= lt!50308 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50293 () Unit!3031)

(assert (=> b!99695 (= lt!50293 (addApplyDifferent!69 lt!50307 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50308))))

(assert (=> b!99695 (= (apply!93 (+!139 lt!50307 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50308) (apply!93 lt!50307 lt!50308))))

(declare-fun lt!50305 () Unit!3031)

(assert (=> b!99695 (= lt!50305 lt!50293)))

(declare-fun lt!50296 () ListLongMap!1557)

(assert (=> b!99695 (= lt!50296 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50304 () (_ BitVec 64))

(assert (=> b!99695 (= lt!50304 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50310 () (_ BitVec 64))

(assert (=> b!99695 (= lt!50310 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99695 (= lt!50291 (addApplyDifferent!69 lt!50296 lt!50304 (minValue!2383 newMap!16) lt!50310))))

(assert (=> b!99695 (= (apply!93 (+!139 lt!50296 (tuple2!2367 lt!50304 (minValue!2383 newMap!16))) lt!50310) (apply!93 lt!50296 lt!50310))))

(declare-fun b!99696 () Bool)

(declare-fun call!10259 () ListLongMap!1557)

(assert (=> b!99696 (= e!64964 call!10259)))

(declare-fun b!99697 () Bool)

(declare-fun res!50065 () Bool)

(assert (=> b!99697 (=> (not res!50065) (not e!64960))))

(assert (=> b!99697 (= res!50065 e!64965)))

(declare-fun c!17038 () Bool)

(assert (=> b!99697 (= c!17038 (not (= (bvand (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99698 () Bool)

(declare-fun e!64961 () Bool)

(assert (=> b!99698 (= e!64961 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99699 () Bool)

(assert (=> b!99699 (= e!64967 (= (apply!93 lt!50294 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99699 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))))))))

(assert (=> b!99699 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun b!99700 () Bool)

(declare-fun Unit!3047 () Unit!3031)

(assert (=> b!99700 (= e!64963 Unit!3047)))

(declare-fun b!99701 () Bool)

(assert (=> b!99701 (= e!64959 call!10259)))

(declare-fun bm!10254 () Bool)

(assert (=> bm!10254 (= call!10257 (contains!810 lt!50294 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10255 () Bool)

(assert (=> bm!10255 (= call!10259 call!10260)))

(declare-fun b!99702 () Bool)

(declare-fun res!50066 () Bool)

(assert (=> b!99702 (=> (not res!50066) (not e!64960))))

(assert (=> b!99702 (= res!50066 e!64966)))

(declare-fun res!50064 () Bool)

(assert (=> b!99702 (=> res!50064 e!64966)))

(assert (=> b!99702 (= res!50064 (not e!64961))))

(declare-fun res!50063 () Bool)

(assert (=> b!99702 (=> (not res!50063) (not e!64961))))

(assert (=> b!99702 (= res!50063 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun d!26795 () Bool)

(assert (=> d!26795 e!64960))

(declare-fun res!50061 () Bool)

(assert (=> d!26795 (=> (not res!50061) (not e!64960))))

(assert (=> d!26795 (= res!50061 (or (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))))

(declare-fun lt!50309 () ListLongMap!1557)

(assert (=> d!26795 (= lt!50294 lt!50309)))

(declare-fun lt!50289 () Unit!3031)

(assert (=> d!26795 (= lt!50289 e!64963)))

(declare-fun c!17035 () Bool)

(declare-fun e!64958 () Bool)

(assert (=> d!26795 (= c!17035 e!64958)))

(declare-fun res!50059 () Bool)

(assert (=> d!26795 (=> (not res!50059) (not e!64958))))

(assert (=> d!26795 (= res!50059 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun e!64962 () ListLongMap!1557)

(assert (=> d!26795 (= lt!50309 e!64962)))

(assert (=> d!26795 (= c!17037 (and (not (= (bvand (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26795 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26795 (= (getCurrentListMap!474 (_keys!4196 newMap!16) (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50294)))

(declare-fun bm!10256 () Bool)

(assert (=> bm!10256 (= call!10258 (contains!810 lt!50294 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10257 () Bool)

(assert (=> bm!10257 (= call!10256 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!99703 () Bool)

(assert (=> b!99703 (= e!64956 (= (apply!93 lt!50294 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))

(declare-fun b!99704 () Bool)

(assert (=> b!99704 (= e!64964 call!10255)))

(declare-fun b!99705 () Bool)

(assert (=> b!99705 (= e!64955 e!64957)))

(declare-fun res!50060 () Bool)

(assert (=> b!99705 (= res!50060 call!10257)))

(assert (=> b!99705 (=> (not res!50060) (not e!64957))))

(declare-fun b!99706 () Bool)

(assert (=> b!99706 (= e!64962 e!64959)))

(assert (=> b!99706 (= c!17040 (and (not (= (bvand (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99707 () Bool)

(assert (=> b!99707 (= e!64958 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99708 () Bool)

(assert (=> b!99708 (= e!64962 (+!139 call!10260 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(assert (= (and d!26795 c!17037) b!99708))

(assert (= (and d!26795 (not c!17037)) b!99706))

(assert (= (and b!99706 c!17040) b!99701))

(assert (= (and b!99706 (not c!17040)) b!99693))

(assert (= (and b!99693 c!17039) b!99696))

(assert (= (and b!99693 (not c!17039)) b!99704))

(assert (= (or b!99696 b!99704) bm!10251))

(assert (= (or b!99701 bm!10251) bm!10252))

(assert (= (or b!99701 b!99696) bm!10255))

(assert (= (or b!99708 bm!10252) bm!10257))

(assert (= (or b!99708 bm!10255) bm!10253))

(assert (= (and d!26795 res!50059) b!99707))

(assert (= (and d!26795 c!17035) b!99695))

(assert (= (and d!26795 (not c!17035)) b!99700))

(assert (= (and d!26795 res!50061) b!99702))

(assert (= (and b!99702 res!50063) b!99698))

(assert (= (and b!99702 (not res!50064)) b!99689))

(assert (= (and b!99689 res!50062) b!99699))

(assert (= (and b!99702 res!50066) b!99697))

(assert (= (and b!99697 c!17038) b!99690))

(assert (= (and b!99697 (not c!17038)) b!99688))

(assert (= (and b!99690 res!50058) b!99703))

(assert (= (or b!99690 b!99688) bm!10256))

(assert (= (and b!99697 res!50065) b!99694))

(assert (= (and b!99694 c!17036) b!99705))

(assert (= (and b!99694 (not c!17036)) b!99691))

(assert (= (and b!99705 res!50060) b!99692))

(assert (= (or b!99705 b!99691) bm!10254))

(declare-fun b_lambda!4459 () Bool)

(assert (=> (not b_lambda!4459) (not b!99699)))

(assert (=> b!99699 t!5605))

(declare-fun b_and!6133 () Bool)

(assert (= b_and!6129 (and (=> t!5605 result!3311) b_and!6133)))

(assert (=> b!99699 t!5607))

(declare-fun b_and!6135 () Bool)

(assert (= b_and!6131 (and (=> t!5607 result!3313) b_and!6135)))

(assert (=> b!99699 m!109349))

(declare-fun m!109689 () Bool)

(assert (=> b!99699 m!109689))

(declare-fun m!109691 () Bool)

(assert (=> b!99699 m!109691))

(assert (=> b!99699 m!109691))

(assert (=> b!99699 m!109355))

(declare-fun m!109693 () Bool)

(assert (=> b!99699 m!109693))

(assert (=> b!99699 m!109349))

(assert (=> b!99699 m!109355))

(declare-fun m!109695 () Bool)

(assert (=> b!99692 m!109695))

(declare-fun m!109697 () Bool)

(assert (=> bm!10257 m!109697))

(assert (=> b!99689 m!109349))

(assert (=> b!99689 m!109349))

(declare-fun m!109699 () Bool)

(assert (=> b!99689 m!109699))

(declare-fun m!109701 () Bool)

(assert (=> bm!10254 m!109701))

(assert (=> d!26795 m!109329))

(assert (=> b!99698 m!109349))

(assert (=> b!99698 m!109349))

(assert (=> b!99698 m!109367))

(declare-fun m!109703 () Bool)

(assert (=> b!99703 m!109703))

(declare-fun m!109705 () Bool)

(assert (=> b!99708 m!109705))

(declare-fun m!109707 () Bool)

(assert (=> bm!10256 m!109707))

(assert (=> b!99707 m!109349))

(assert (=> b!99707 m!109349))

(assert (=> b!99707 m!109367))

(declare-fun m!109709 () Bool)

(assert (=> b!99695 m!109709))

(declare-fun m!109711 () Bool)

(assert (=> b!99695 m!109711))

(declare-fun m!109713 () Bool)

(assert (=> b!99695 m!109713))

(declare-fun m!109715 () Bool)

(assert (=> b!99695 m!109715))

(declare-fun m!109717 () Bool)

(assert (=> b!99695 m!109717))

(assert (=> b!99695 m!109715))

(declare-fun m!109719 () Bool)

(assert (=> b!99695 m!109719))

(declare-fun m!109721 () Bool)

(assert (=> b!99695 m!109721))

(declare-fun m!109723 () Bool)

(assert (=> b!99695 m!109723))

(assert (=> b!99695 m!109349))

(declare-fun m!109725 () Bool)

(assert (=> b!99695 m!109725))

(declare-fun m!109727 () Bool)

(assert (=> b!99695 m!109727))

(assert (=> b!99695 m!109717))

(declare-fun m!109729 () Bool)

(assert (=> b!99695 m!109729))

(assert (=> b!99695 m!109709))

(declare-fun m!109731 () Bool)

(assert (=> b!99695 m!109731))

(declare-fun m!109733 () Bool)

(assert (=> b!99695 m!109733))

(assert (=> b!99695 m!109731))

(declare-fun m!109735 () Bool)

(assert (=> b!99695 m!109735))

(assert (=> b!99695 m!109697))

(declare-fun m!109737 () Bool)

(assert (=> b!99695 m!109737))

(declare-fun m!109739 () Bool)

(assert (=> bm!10253 m!109739))

(assert (=> bm!10212 d!26795))

(assert (=> b!99219 d!26679))

(declare-fun b!99720 () Bool)

(declare-fun e!64970 () Bool)

(assert (=> b!99720 (= e!64970 (and (bvsge (extraKeys!2319 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2319 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!478 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun d!26797 () Bool)

(declare-fun res!50078 () Bool)

(assert (=> d!26797 (=> (not res!50078) (not e!64970))))

(assert (=> d!26797 (= res!50078 (validMask!0 (mask!6609 newMap!16)))))

(assert (=> d!26797 (= (simpleValid!68 newMap!16) e!64970)))

(declare-fun b!99717 () Bool)

(declare-fun res!50075 () Bool)

(assert (=> b!99717 (=> (not res!50075) (not e!64970))))

(assert (=> b!99717 (= res!50075 (and (= (size!2272 (_values!2485 newMap!16)) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001)) (= (size!2271 (_keys!4196 newMap!16)) (size!2272 (_values!2485 newMap!16))) (bvsge (_size!478 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!478 newMap!16) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!99718 () Bool)

(declare-fun res!50076 () Bool)

(assert (=> b!99718 (=> (not res!50076) (not e!64970))))

(declare-fun size!2275 (LongMapFixedSize!858) (_ BitVec 32))

(assert (=> b!99718 (= res!50076 (bvsge (size!2275 newMap!16) (_size!478 newMap!16)))))

(declare-fun b!99719 () Bool)

(declare-fun res!50077 () Bool)

(assert (=> b!99719 (=> (not res!50077) (not e!64970))))

(assert (=> b!99719 (= res!50077 (= (size!2275 newMap!16) (bvadd (_size!478 newMap!16) (bvsdiv (bvadd (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!26797 res!50078) b!99717))

(assert (= (and b!99717 res!50075) b!99718))

(assert (= (and b!99718 res!50076) b!99719))

(assert (= (and b!99719 res!50077) b!99720))

(assert (=> d!26797 m!109329))

(declare-fun m!109741 () Bool)

(assert (=> b!99718 m!109741))

(assert (=> b!99719 m!109741))

(assert (=> d!26669 d!26797))

(declare-fun b!99733 () Bool)

(declare-fun c!17047 () Bool)

(declare-fun lt!50317 () (_ BitVec 64))

(assert (=> b!99733 (= c!17047 (= lt!50317 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!64979 () SeekEntryResult!264)

(declare-fun e!64978 () SeekEntryResult!264)

(assert (=> b!99733 (= e!64979 e!64978)))

(declare-fun b!99734 () Bool)

(declare-fun lt!50318 () SeekEntryResult!264)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4254 (_ BitVec 32)) SeekEntryResult!264)

(assert (=> b!99734 (= e!64978 (seekKeyOrZeroReturnVacant!0 (x!13114 lt!50318) (index!3202 lt!50318) (index!3202 lt!50318) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!99735 () Bool)

(assert (=> b!99735 (= e!64978 (MissingZero!264 (index!3202 lt!50318)))))

(declare-fun lt!50319 () SeekEntryResult!264)

(declare-fun d!26799 () Bool)

(assert (=> d!26799 (and (or ((_ is Undefined!264) lt!50319) (not ((_ is Found!264) lt!50319)) (and (bvsge (index!3201 lt!50319) #b00000000000000000000000000000000) (bvslt (index!3201 lt!50319) (size!2271 (_keys!4196 newMap!16))))) (or ((_ is Undefined!264) lt!50319) ((_ is Found!264) lt!50319) (not ((_ is MissingZero!264) lt!50319)) (and (bvsge (index!3200 lt!50319) #b00000000000000000000000000000000) (bvslt (index!3200 lt!50319) (size!2271 (_keys!4196 newMap!16))))) (or ((_ is Undefined!264) lt!50319) ((_ is Found!264) lt!50319) ((_ is MissingZero!264) lt!50319) (not ((_ is MissingVacant!264) lt!50319)) (and (bvsge (index!3203 lt!50319) #b00000000000000000000000000000000) (bvslt (index!3203 lt!50319) (size!2271 (_keys!4196 newMap!16))))) (or ((_ is Undefined!264) lt!50319) (ite ((_ is Found!264) lt!50319) (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50319)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (ite ((_ is MissingZero!264) lt!50319) (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3200 lt!50319)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!264) lt!50319) (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3203 lt!50319)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!64977 () SeekEntryResult!264)

(assert (=> d!26799 (= lt!50319 e!64977)))

(declare-fun c!17049 () Bool)

(assert (=> d!26799 (= c!17049 (and ((_ is Intermediate!264) lt!50318) (undefined!1076 lt!50318)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4254 (_ BitVec 32)) SeekEntryResult!264)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!26799 (= lt!50318 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (mask!6609 newMap!16)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(assert (=> d!26799 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26799 (= (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)) lt!50319)))

(declare-fun b!99736 () Bool)

(assert (=> b!99736 (= e!64977 Undefined!264)))

(declare-fun b!99737 () Bool)

(assert (=> b!99737 (= e!64977 e!64979)))

(assert (=> b!99737 (= lt!50317 (select (arr!2020 (_keys!4196 newMap!16)) (index!3202 lt!50318)))))

(declare-fun c!17048 () Bool)

(assert (=> b!99737 (= c!17048 (= lt!50317 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun b!99738 () Bool)

(assert (=> b!99738 (= e!64979 (Found!264 (index!3202 lt!50318)))))

(assert (= (and d!26799 c!17049) b!99736))

(assert (= (and d!26799 (not c!17049)) b!99737))

(assert (= (and b!99737 c!17048) b!99738))

(assert (= (and b!99737 (not c!17048)) b!99733))

(assert (= (and b!99733 c!17047) b!99735))

(assert (= (and b!99733 (not c!17047)) b!99734))

(assert (=> b!99734 m!109089))

(declare-fun m!109743 () Bool)

(assert (=> b!99734 m!109743))

(assert (=> d!26799 m!109089))

(declare-fun m!109745 () Bool)

(assert (=> d!26799 m!109745))

(assert (=> d!26799 m!109329))

(assert (=> d!26799 m!109745))

(assert (=> d!26799 m!109089))

(declare-fun m!109747 () Bool)

(assert (=> d!26799 m!109747))

(declare-fun m!109749 () Bool)

(assert (=> d!26799 m!109749))

(declare-fun m!109751 () Bool)

(assert (=> d!26799 m!109751))

(declare-fun m!109753 () Bool)

(assert (=> d!26799 m!109753))

(declare-fun m!109755 () Bool)

(assert (=> b!99737 m!109755))

(assert (=> b!99412 d!26799))

(declare-fun d!26801 () Bool)

(declare-fun res!50079 () Bool)

(declare-fun e!64980 () Bool)

(assert (=> d!26801 (=> (not res!50079) (not e!64980))))

(assert (=> d!26801 (= res!50079 (simpleValid!68 (v!2817 (underlying!342 thiss!992))))))

(assert (=> d!26801 (= (valid!388 (v!2817 (underlying!342 thiss!992))) e!64980)))

(declare-fun b!99739 () Bool)

(declare-fun res!50080 () Bool)

(assert (=> b!99739 (=> (not res!50080) (not e!64980))))

(assert (=> b!99739 (= res!50080 (= (arrayCountValidKeys!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000 (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))) (_size!478 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun b!99740 () Bool)

(declare-fun res!50081 () Bool)

(assert (=> b!99740 (=> (not res!50081) (not e!64980))))

(assert (=> b!99740 (= res!50081 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun b!99741 () Bool)

(assert (=> b!99741 (= e!64980 (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000 Nil!1613))))

(assert (= (and d!26801 res!50079) b!99739))

(assert (= (and b!99739 res!50080) b!99740))

(assert (= (and b!99740 res!50081) b!99741))

(declare-fun m!109757 () Bool)

(assert (=> d!26801 m!109757))

(declare-fun m!109759 () Bool)

(assert (=> b!99739 m!109759))

(declare-fun m!109761 () Bool)

(assert (=> b!99740 m!109761))

(declare-fun m!109763 () Bool)

(assert (=> b!99741 m!109763))

(assert (=> d!26671 d!26801))

(declare-fun d!26803 () Bool)

(declare-fun e!64983 () Bool)

(assert (=> d!26803 e!64983))

(declare-fun c!17052 () Bool)

(assert (=> d!26803 (= c!17052 (and (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!26803 true))

(declare-fun _$29!129 () Unit!3031)

(assert (=> d!26803 (= (choose!609 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))) _$29!129)))

(declare-fun b!99746 () Bool)

(assert (=> b!99746 (= e!64983 (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!99747 () Bool)

(assert (=> b!99747 (= e!64983 (ite (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!26803 c!17052) b!99746))

(assert (= (and d!26803 (not c!17052)) b!99747))

(assert (=> b!99746 m!109089))

(assert (=> b!99746 m!109093))

(assert (=> d!26681 d!26803))

(assert (=> d!26681 d!26673))

(declare-fun d!26805 () Bool)

(declare-fun e!64984 () Bool)

(assert (=> d!26805 e!64984))

(declare-fun res!50082 () Bool)

(assert (=> d!26805 (=> (not res!50082) (not e!64984))))

(declare-fun lt!50321 () ListLongMap!1557)

(assert (=> d!26805 (= res!50082 (contains!810 lt!50321 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun lt!50323 () List!1615)

(assert (=> d!26805 (= lt!50321 (ListLongMap!1558 lt!50323))))

(declare-fun lt!50322 () Unit!3031)

(declare-fun lt!50320 () Unit!3031)

(assert (=> d!26805 (= lt!50322 lt!50320)))

(assert (=> d!26805 (= (getValueByKey!150 lt!50323 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26805 (= lt!50320 (lemmaContainsTupThenGetReturnValue!68 lt!50323 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26805 (= lt!50323 (insertStrictlySorted!70 (toList!794 call!10146) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!26805 (= (+!139 call!10146 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!50321)))

(declare-fun b!99748 () Bool)

(declare-fun res!50083 () Bool)

(assert (=> b!99748 (=> (not res!50083) (not e!64984))))

(assert (=> b!99748 (= res!50083 (= (getValueByKey!150 (toList!794 lt!50321) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!99749 () Bool)

(assert (=> b!99749 (= e!64984 (contains!812 (toList!794 lt!50321) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!26805 res!50082) b!99748))

(assert (= (and b!99748 res!50083) b!99749))

(declare-fun m!109765 () Bool)

(assert (=> d!26805 m!109765))

(declare-fun m!109767 () Bool)

(assert (=> d!26805 m!109767))

(declare-fun m!109769 () Bool)

(assert (=> d!26805 m!109769))

(declare-fun m!109771 () Bool)

(assert (=> d!26805 m!109771))

(declare-fun m!109773 () Bool)

(assert (=> b!99748 m!109773))

(declare-fun m!109775 () Bool)

(assert (=> b!99749 m!109775))

(assert (=> b!99298 d!26805))

(declare-fun d!26807 () Bool)

(assert (=> d!26807 (isDefined!104 (getValueByKey!150 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun lt!50326 () Unit!3031)

(declare-fun choose!618 (List!1615 (_ BitVec 64)) Unit!3031)

(assert (=> d!26807 (= lt!50326 (choose!618 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun e!64987 () Bool)

(assert (=> d!26807 e!64987))

(declare-fun res!50086 () Bool)

(assert (=> d!26807 (=> (not res!50086) (not e!64987))))

(declare-fun isStrictlySorted!300 (List!1615) Bool)

(assert (=> d!26807 (= res!50086 (isStrictlySorted!300 (toList!794 lt!49862)))))

(assert (=> d!26807 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) lt!50326)))

(declare-fun b!99752 () Bool)

(assert (=> b!99752 (= e!64987 (containsKey!154 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!26807 res!50086) b!99752))

(assert (=> d!26807 m!109089))

(assert (=> d!26807 m!109259))

(assert (=> d!26807 m!109259))

(assert (=> d!26807 m!109261))

(assert (=> d!26807 m!109089))

(declare-fun m!109777 () Bool)

(assert (=> d!26807 m!109777))

(declare-fun m!109779 () Bool)

(assert (=> d!26807 m!109779))

(assert (=> b!99752 m!109089))

(assert (=> b!99752 m!109255))

(assert (=> b!99305 d!26807))

(assert (=> b!99305 d!26785))

(assert (=> b!99305 d!26787))

(declare-fun d!26809 () Bool)

(assert (=> d!26809 (= (apply!93 lt!49947 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1307 (getValueByKey!150 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4114 () Bool)

(assert (= bs!4114 d!26809))

(assert (=> bs!4114 m!109563))

(assert (=> bs!4114 m!109563))

(declare-fun m!109781 () Bool)

(assert (=> bs!4114 m!109781))

(assert (=> b!99282 d!26809))

(declare-fun d!26811 () Bool)

(declare-fun e!64988 () Bool)

(assert (=> d!26811 e!64988))

(declare-fun res!50087 () Bool)

(assert (=> d!26811 (=> res!50087 e!64988)))

(declare-fun lt!50328 () Bool)

(assert (=> d!26811 (= res!50087 (not lt!50328))))

(declare-fun lt!50330 () Bool)

(assert (=> d!26811 (= lt!50328 lt!50330)))

(declare-fun lt!50327 () Unit!3031)

(declare-fun e!64989 () Unit!3031)

(assert (=> d!26811 (= lt!50327 e!64989)))

(declare-fun c!17053 () Bool)

(assert (=> d!26811 (= c!17053 lt!50330)))

(assert (=> d!26811 (= lt!50330 (containsKey!154 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26811 (= (contains!810 lt!49947 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50328)))

(declare-fun b!99753 () Bool)

(declare-fun lt!50329 () Unit!3031)

(assert (=> b!99753 (= e!64989 lt!50329)))

(assert (=> b!99753 (= lt!50329 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99753 (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99754 () Bool)

(declare-fun Unit!3048 () Unit!3031)

(assert (=> b!99754 (= e!64989 Unit!3048)))

(declare-fun b!99755 () Bool)

(assert (=> b!99755 (= e!64988 (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26811 c!17053) b!99753))

(assert (= (and d!26811 (not c!17053)) b!99754))

(assert (= (and d!26811 (not res!50087)) b!99755))

(declare-fun m!109783 () Bool)

(assert (=> d!26811 m!109783))

(declare-fun m!109785 () Bool)

(assert (=> b!99753 m!109785))

(declare-fun m!109787 () Bool)

(assert (=> b!99753 m!109787))

(assert (=> b!99753 m!109787))

(declare-fun m!109789 () Bool)

(assert (=> b!99753 m!109789))

(assert (=> b!99755 m!109787))

(assert (=> b!99755 m!109787))

(assert (=> b!99755 m!109789))

(assert (=> bm!10142 d!26811))

(declare-fun b!99756 () Bool)

(declare-fun e!64993 () Bool)

(declare-fun e!64990 () Bool)

(assert (=> b!99756 (= e!64993 e!64990)))

(declare-fun c!17054 () Bool)

(assert (=> b!99756 (= c!17054 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!99757 () Bool)

(declare-fun e!64991 () Bool)

(assert (=> b!99757 (= e!64991 (contains!811 (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun call!10261 () Bool)

(declare-fun bm!10258 () Bool)

(assert (=> bm!10258 (= call!10261 (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17054 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613))))))

(declare-fun b!99758 () Bool)

(declare-fun e!64992 () Bool)

(assert (=> b!99758 (= e!64992 e!64993)))

(declare-fun res!50089 () Bool)

(assert (=> b!99758 (=> (not res!50089) (not e!64993))))

(assert (=> b!99758 (= res!50089 (not e!64991))))

(declare-fun res!50088 () Bool)

(assert (=> b!99758 (=> (not res!50088) (not e!64991))))

(assert (=> b!99758 (= res!50088 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!99759 () Bool)

(assert (=> b!99759 (= e!64990 call!10261)))

(declare-fun d!26813 () Bool)

(declare-fun res!50090 () Bool)

(assert (=> d!26813 (=> res!50090 e!64992)))

(assert (=> d!26813 (= res!50090 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> d!26813 (= (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)) e!64992)))

(declare-fun b!99760 () Bool)

(assert (=> b!99760 (= e!64990 call!10261)))

(assert (= (and d!26813 (not res!50090)) b!99758))

(assert (= (and b!99758 res!50088) b!99757))

(assert (= (and b!99758 res!50089) b!99756))

(assert (= (and b!99756 c!17054) b!99760))

(assert (= (and b!99756 (not c!17054)) b!99759))

(assert (= (or b!99760 b!99759) bm!10258))

(declare-fun m!109791 () Bool)

(assert (=> b!99756 m!109791))

(assert (=> b!99756 m!109791))

(declare-fun m!109793 () Bool)

(assert (=> b!99756 m!109793))

(assert (=> b!99757 m!109791))

(assert (=> b!99757 m!109791))

(declare-fun m!109795 () Bool)

(assert (=> b!99757 m!109795))

(assert (=> bm!10258 m!109791))

(declare-fun m!109797 () Bool)

(assert (=> bm!10258 m!109797))

(assert (=> b!99758 m!109791))

(assert (=> b!99758 m!109791))

(assert (=> b!99758 m!109793))

(assert (=> bm!10122 d!26813))

(assert (=> b!99231 d!26735))

(declare-fun d!26815 () Bool)

(assert (=> d!26815 (= (map!1259 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (getCurrentListMap!474 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (_values!2485 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (mask!6609 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 (_2!1192 lt!50030) newMap!16))))))

(declare-fun bs!4115 () Bool)

(assert (= bs!4115 d!26815))

(declare-fun m!109799 () Bool)

(assert (=> bs!4115 m!109799))

(assert (=> bm!10205 d!26815))

(declare-fun d!26817 () Bool)

(declare-fun e!64994 () Bool)

(assert (=> d!26817 e!64994))

(declare-fun res!50091 () Bool)

(assert (=> d!26817 (=> res!50091 e!64994)))

(declare-fun lt!50332 () Bool)

(assert (=> d!26817 (= res!50091 (not lt!50332))))

(declare-fun lt!50334 () Bool)

(assert (=> d!26817 (= lt!50332 lt!50334)))

(declare-fun lt!50331 () Unit!3031)

(declare-fun e!64995 () Unit!3031)

(assert (=> d!26817 (= lt!50331 e!64995)))

(declare-fun c!17055 () Bool)

(assert (=> d!26817 (= c!17055 lt!50334)))

(assert (=> d!26817 (= lt!50334 (containsKey!154 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!26817 (= (contains!810 lt!49947 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!50332)))

(declare-fun b!99761 () Bool)

(declare-fun lt!50333 () Unit!3031)

(assert (=> b!99761 (= e!64995 lt!50333)))

(assert (=> b!99761 (= lt!50333 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99761 (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!99762 () Bool)

(declare-fun Unit!3049 () Unit!3031)

(assert (=> b!99762 (= e!64995 Unit!3049)))

(declare-fun b!99763 () Bool)

(assert (=> b!99763 (= e!64994 (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!26817 c!17055) b!99761))

(assert (= (and d!26817 (not c!17055)) b!99762))

(assert (= (and d!26817 (not res!50091)) b!99763))

(assert (=> d!26817 m!109187))

(declare-fun m!109801 () Bool)

(assert (=> d!26817 m!109801))

(assert (=> b!99761 m!109187))

(declare-fun m!109803 () Bool)

(assert (=> b!99761 m!109803))

(assert (=> b!99761 m!109187))

(declare-fun m!109805 () Bool)

(assert (=> b!99761 m!109805))

(assert (=> b!99761 m!109805))

(declare-fun m!109807 () Bool)

(assert (=> b!99761 m!109807))

(assert (=> b!99763 m!109187))

(assert (=> b!99763 m!109805))

(assert (=> b!99763 m!109805))

(assert (=> b!99763 m!109807))

(assert (=> b!99279 d!26817))

(assert (=> bm!10198 d!26799))

(declare-fun d!26819 () Bool)

(assert (=> d!26819 (= (get!1305 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2816 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> b!99438 d!26819))

(assert (=> b!99396 d!26709))

(declare-fun d!26821 () Bool)

(assert (=> d!26821 (= (apply!93 lt!49947 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1307 (getValueByKey!150 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4116 () Bool)

(assert (= bs!4116 d!26821))

(assert (=> bs!4116 m!109787))

(assert (=> bs!4116 m!109787))

(declare-fun m!109809 () Bool)

(assert (=> bs!4116 m!109809))

(assert (=> b!99293 d!26821))

(declare-fun d!26823 () Bool)

(declare-fun e!64996 () Bool)

(assert (=> d!26823 e!64996))

(declare-fun res!50092 () Bool)

(assert (=> d!26823 (=> res!50092 e!64996)))

(declare-fun lt!50336 () Bool)

(assert (=> d!26823 (= res!50092 (not lt!50336))))

(declare-fun lt!50338 () Bool)

(assert (=> d!26823 (= lt!50336 lt!50338)))

(declare-fun lt!50335 () Unit!3031)

(declare-fun e!64997 () Unit!3031)

(assert (=> d!26823 (= lt!50335 e!64997)))

(declare-fun c!17056 () Bool)

(assert (=> d!26823 (= c!17056 lt!50338)))

(assert (=> d!26823 (= lt!50338 (containsKey!154 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!26823 (= (contains!810 call!10208 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) lt!50336)))

(declare-fun b!99764 () Bool)

(declare-fun lt!50337 () Unit!3031)

(assert (=> b!99764 (= e!64997 lt!50337)))

(assert (=> b!99764 (= lt!50337 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> b!99764 (isDefined!104 (getValueByKey!150 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun b!99765 () Bool)

(declare-fun Unit!3050 () Unit!3031)

(assert (=> b!99765 (= e!64997 Unit!3050)))

(declare-fun b!99766 () Bool)

(assert (=> b!99766 (= e!64996 (isDefined!104 (getValueByKey!150 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (= (and d!26823 c!17056) b!99764))

(assert (= (and d!26823 (not c!17056)) b!99765))

(assert (= (and d!26823 (not res!50092)) b!99766))

(assert (=> d!26823 m!109089))

(declare-fun m!109811 () Bool)

(assert (=> d!26823 m!109811))

(assert (=> b!99764 m!109089))

(declare-fun m!109813 () Bool)

(assert (=> b!99764 m!109813))

(assert (=> b!99764 m!109089))

(declare-fun m!109815 () Bool)

(assert (=> b!99764 m!109815))

(assert (=> b!99764 m!109815))

(declare-fun m!109817 () Bool)

(assert (=> b!99764 m!109817))

(assert (=> b!99766 m!109089))

(assert (=> b!99766 m!109815))

(assert (=> b!99766 m!109815))

(assert (=> b!99766 m!109817))

(assert (=> b!99393 d!26823))

(declare-fun d!26825 () Bool)

(assert (=> d!26825 (= (apply!93 lt!49947 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1307 (getValueByKey!150 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4117 () Bool)

(assert (= bs!4117 d!26825))

(assert (=> bs!4117 m!109187))

(assert (=> bs!4117 m!109805))

(assert (=> bs!4117 m!109805))

(declare-fun m!109819 () Bool)

(assert (=> bs!4117 m!109819))

(assert (=> b!99289 d!26825))

(declare-fun d!26827 () Bool)

(declare-fun c!17057 () Bool)

(assert (=> d!26827 (= c!17057 ((_ is ValueCellFull!975) (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!64998 () V!3163)

(assert (=> d!26827 (= (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!64998)))

(declare-fun b!99767 () Bool)

(assert (=> b!99767 (= e!64998 (get!1305 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99768 () Bool)

(assert (=> b!99768 (= e!64998 (get!1306 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26827 c!17057) b!99767))

(assert (= (and d!26827 (not c!17057)) b!99768))

(assert (=> b!99767 m!109203))

(assert (=> b!99767 m!109121))

(declare-fun m!109821 () Bool)

(assert (=> b!99767 m!109821))

(assert (=> b!99768 m!109203))

(assert (=> b!99768 m!109121))

(declare-fun m!109823 () Bool)

(assert (=> b!99768 m!109823))

(assert (=> b!99289 d!26827))

(declare-fun b!99769 () Bool)

(declare-fun e!65009 () Bool)

(declare-fun call!10266 () Bool)

(assert (=> b!99769 (= e!65009 (not call!10266))))

(declare-fun b!99770 () Bool)

(declare-fun e!65010 () Bool)

(declare-fun e!65011 () Bool)

(assert (=> b!99770 (= e!65010 e!65011)))

(declare-fun res!50097 () Bool)

(assert (=> b!99770 (=> (not res!50097) (not e!65011))))

(declare-fun lt!50344 () ListLongMap!1557)

(assert (=> b!99770 (= res!50097 (contains!810 lt!50344 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99770 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun bm!10259 () Bool)

(declare-fun call!10263 () ListLongMap!1557)

(declare-fun call!10262 () ListLongMap!1557)

(assert (=> bm!10259 (= call!10263 call!10262)))

(declare-fun bm!10260 () Bool)

(declare-fun call!10264 () ListLongMap!1557)

(assert (=> bm!10260 (= call!10262 call!10264)))

(declare-fun b!99771 () Bool)

(declare-fun e!65000 () Bool)

(assert (=> b!99771 (= e!65009 e!65000)))

(declare-fun res!50093 () Bool)

(assert (=> b!99771 (= res!50093 call!10266)))

(assert (=> b!99771 (=> (not res!50093) (not e!65000))))

(declare-fun b!99772 () Bool)

(declare-fun e!64999 () Bool)

(declare-fun call!10265 () Bool)

(assert (=> b!99772 (= e!64999 (not call!10265))))

(declare-fun b!99773 () Bool)

(declare-fun e!65001 () Bool)

(assert (=> b!99773 (= e!65001 (= (apply!93 lt!50344 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))

(declare-fun b!99774 () Bool)

(declare-fun c!17062 () Bool)

(assert (=> b!99774 (= c!17062 (and (not (= (bvand (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65003 () ListLongMap!1557)

(declare-fun e!65008 () ListLongMap!1557)

(assert (=> b!99774 (= e!65003 e!65008)))

(declare-fun call!10268 () ListLongMap!1557)

(declare-fun bm!10261 () Bool)

(declare-fun c!17060 () Bool)

(declare-fun c!17063 () Bool)

(assert (=> bm!10261 (= call!10268 (+!139 (ite c!17060 call!10264 (ite c!17063 call!10262 call!10263)) (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(declare-fun b!99775 () Bool)

(declare-fun e!65004 () Bool)

(assert (=> b!99775 (= e!65004 e!64999)))

(declare-fun c!17059 () Bool)

(assert (=> b!99775 (= c!17059 (not (= (bvand (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99776 () Bool)

(declare-fun e!65007 () Unit!3031)

(declare-fun lt!50341 () Unit!3031)

(assert (=> b!99776 (= e!65007 lt!50341)))

(declare-fun lt!50356 () ListLongMap!1557)

(assert (=> b!99776 (= lt!50356 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite c!16967 (_values!2485 newMap!16) lt!50042) (mask!6609 newMap!16) (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) (zeroValue!2383 newMap!16) (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50353 () (_ BitVec 64))

(assert (=> b!99776 (= lt!50353 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50340 () (_ BitVec 64))

(assert (=> b!99776 (= lt!50340 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50342 () Unit!3031)

(assert (=> b!99776 (= lt!50342 (addStillContains!69 lt!50356 lt!50353 (zeroValue!2383 newMap!16) lt!50340))))

(assert (=> b!99776 (contains!810 (+!139 lt!50356 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16))) lt!50340)))

(declare-fun lt!50351 () Unit!3031)

(assert (=> b!99776 (= lt!50351 lt!50342)))

(declare-fun lt!50350 () ListLongMap!1557)

(assert (=> b!99776 (= lt!50350 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite c!16967 (_values!2485 newMap!16) lt!50042) (mask!6609 newMap!16) (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) (zeroValue!2383 newMap!16) (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50352 () (_ BitVec 64))

(assert (=> b!99776 (= lt!50352 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50349 () (_ BitVec 64))

(assert (=> b!99776 (= lt!50349 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50348 () Unit!3031)

(assert (=> b!99776 (= lt!50348 (addApplyDifferent!69 lt!50350 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50349))))

(assert (=> b!99776 (= (apply!93 (+!139 lt!50350 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50349) (apply!93 lt!50350 lt!50349))))

(declare-fun lt!50347 () Unit!3031)

(assert (=> b!99776 (= lt!50347 lt!50348)))

(declare-fun lt!50357 () ListLongMap!1557)

(assert (=> b!99776 (= lt!50357 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite c!16967 (_values!2485 newMap!16) lt!50042) (mask!6609 newMap!16) (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) (zeroValue!2383 newMap!16) (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50345 () (_ BitVec 64))

(assert (=> b!99776 (= lt!50345 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50358 () (_ BitVec 64))

(assert (=> b!99776 (= lt!50358 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50343 () Unit!3031)

(assert (=> b!99776 (= lt!50343 (addApplyDifferent!69 lt!50357 lt!50345 (zeroValue!2383 newMap!16) lt!50358))))

(assert (=> b!99776 (= (apply!93 (+!139 lt!50357 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16))) lt!50358) (apply!93 lt!50357 lt!50358))))

(declare-fun lt!50355 () Unit!3031)

(assert (=> b!99776 (= lt!50355 lt!50343)))

(declare-fun lt!50346 () ListLongMap!1557)

(assert (=> b!99776 (= lt!50346 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite c!16967 (_values!2485 newMap!16) lt!50042) (mask!6609 newMap!16) (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) (zeroValue!2383 newMap!16) (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50354 () (_ BitVec 64))

(assert (=> b!99776 (= lt!50354 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50360 () (_ BitVec 64))

(assert (=> b!99776 (= lt!50360 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!99776 (= lt!50341 (addApplyDifferent!69 lt!50346 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50360))))

(assert (=> b!99776 (= (apply!93 (+!139 lt!50346 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50360) (apply!93 lt!50346 lt!50360))))

(declare-fun b!99777 () Bool)

(declare-fun call!10267 () ListLongMap!1557)

(assert (=> b!99777 (= e!65008 call!10267)))

(declare-fun b!99778 () Bool)

(declare-fun res!50100 () Bool)

(assert (=> b!99778 (=> (not res!50100) (not e!65004))))

(assert (=> b!99778 (= res!50100 e!65009)))

(declare-fun c!17061 () Bool)

(assert (=> b!99778 (= c!17061 (not (= (bvand (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99779 () Bool)

(declare-fun e!65005 () Bool)

(assert (=> b!99779 (= e!65005 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99780 () Bool)

(assert (=> b!99780 (= e!65011 (= (apply!93 lt!50344 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (ite c!16967 (_values!2485 newMap!16) lt!50042)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99780 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (ite c!16967 (_values!2485 newMap!16) lt!50042))))))

(assert (=> b!99780 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun b!99781 () Bool)

(declare-fun Unit!3051 () Unit!3031)

(assert (=> b!99781 (= e!65007 Unit!3051)))

(declare-fun b!99782 () Bool)

(assert (=> b!99782 (= e!65003 call!10267)))

(declare-fun bm!10262 () Bool)

(assert (=> bm!10262 (= call!10265 (contains!810 lt!50344 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10263 () Bool)

(assert (=> bm!10263 (= call!10267 call!10268)))

(declare-fun b!99783 () Bool)

(declare-fun res!50101 () Bool)

(assert (=> b!99783 (=> (not res!50101) (not e!65004))))

(assert (=> b!99783 (= res!50101 e!65010)))

(declare-fun res!50099 () Bool)

(assert (=> b!99783 (=> res!50099 e!65010)))

(assert (=> b!99783 (= res!50099 (not e!65005))))

(declare-fun res!50098 () Bool)

(assert (=> b!99783 (=> (not res!50098) (not e!65005))))

(assert (=> b!99783 (= res!50098 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun d!26829 () Bool)

(assert (=> d!26829 e!65004))

(declare-fun res!50096 () Bool)

(assert (=> d!26829 (=> (not res!50096) (not e!65004))))

(assert (=> d!26829 (= res!50096 (or (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))))

(declare-fun lt!50359 () ListLongMap!1557)

(assert (=> d!26829 (= lt!50344 lt!50359)))

(declare-fun lt!50339 () Unit!3031)

(assert (=> d!26829 (= lt!50339 e!65007)))

(declare-fun c!17058 () Bool)

(declare-fun e!65002 () Bool)

(assert (=> d!26829 (= c!17058 e!65002)))

(declare-fun res!50094 () Bool)

(assert (=> d!26829 (=> (not res!50094) (not e!65002))))

(assert (=> d!26829 (= res!50094 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun e!65006 () ListLongMap!1557)

(assert (=> d!26829 (= lt!50359 e!65006)))

(assert (=> d!26829 (= c!17060 (and (not (= (bvand (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26829 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26829 (= (getCurrentListMap!474 (_keys!4196 newMap!16) (ite c!16967 (_values!2485 newMap!16) lt!50042) (mask!6609 newMap!16) (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) (zeroValue!2383 newMap!16) (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50344)))

(declare-fun bm!10264 () Bool)

(assert (=> bm!10264 (= call!10266 (contains!810 lt!50344 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10265 () Bool)

(assert (=> bm!10265 (= call!10264 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite c!16967 (_values!2485 newMap!16) lt!50042) (mask!6609 newMap!16) (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) (zeroValue!2383 newMap!16) (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!99784 () Bool)

(assert (=> b!99784 (= e!65000 (= (apply!93 lt!50344 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun b!99785 () Bool)

(assert (=> b!99785 (= e!65008 call!10263)))

(declare-fun b!99786 () Bool)

(assert (=> b!99786 (= e!64999 e!65001)))

(declare-fun res!50095 () Bool)

(assert (=> b!99786 (= res!50095 call!10265)))

(assert (=> b!99786 (=> (not res!50095) (not e!65001))))

(declare-fun b!99787 () Bool)

(assert (=> b!99787 (= e!65006 e!65003)))

(assert (=> b!99787 (= c!17063 (and (not (= (bvand (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99788 () Bool)

(assert (=> b!99788 (= e!65002 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99789 () Bool)

(assert (=> b!99789 (= e!65006 (+!139 call!10268 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))

(assert (= (and d!26829 c!17060) b!99789))

(assert (= (and d!26829 (not c!17060)) b!99787))

(assert (= (and b!99787 c!17063) b!99782))

(assert (= (and b!99787 (not c!17063)) b!99774))

(assert (= (and b!99774 c!17062) b!99777))

(assert (= (and b!99774 (not c!17062)) b!99785))

(assert (= (or b!99777 b!99785) bm!10259))

(assert (= (or b!99782 bm!10259) bm!10260))

(assert (= (or b!99782 b!99777) bm!10263))

(assert (= (or b!99789 bm!10260) bm!10265))

(assert (= (or b!99789 bm!10263) bm!10261))

(assert (= (and d!26829 res!50094) b!99788))

(assert (= (and d!26829 c!17058) b!99776))

(assert (= (and d!26829 (not c!17058)) b!99781))

(assert (= (and d!26829 res!50096) b!99783))

(assert (= (and b!99783 res!50098) b!99779))

(assert (= (and b!99783 (not res!50099)) b!99770))

(assert (= (and b!99770 res!50097) b!99780))

(assert (= (and b!99783 res!50101) b!99778))

(assert (= (and b!99778 c!17061) b!99771))

(assert (= (and b!99778 (not c!17061)) b!99769))

(assert (= (and b!99771 res!50093) b!99784))

(assert (= (or b!99771 b!99769) bm!10264))

(assert (= (and b!99778 res!50100) b!99775))

(assert (= (and b!99775 c!17059) b!99786))

(assert (= (and b!99775 (not c!17059)) b!99772))

(assert (= (and b!99786 res!50095) b!99773))

(assert (= (or b!99786 b!99772) bm!10262))

(declare-fun b_lambda!4461 () Bool)

(assert (=> (not b_lambda!4461) (not b!99780)))

(assert (=> b!99780 t!5605))

(declare-fun b_and!6137 () Bool)

(assert (= b_and!6133 (and (=> t!5605 result!3311) b_and!6137)))

(assert (=> b!99780 t!5607))

(declare-fun b_and!6139 () Bool)

(assert (= b_and!6135 (and (=> t!5607 result!3313) b_and!6139)))

(assert (=> b!99780 m!109349))

(declare-fun m!109825 () Bool)

(assert (=> b!99780 m!109825))

(declare-fun m!109827 () Bool)

(assert (=> b!99780 m!109827))

(assert (=> b!99780 m!109827))

(assert (=> b!99780 m!109355))

(declare-fun m!109829 () Bool)

(assert (=> b!99780 m!109829))

(assert (=> b!99780 m!109349))

(assert (=> b!99780 m!109355))

(declare-fun m!109831 () Bool)

(assert (=> b!99773 m!109831))

(declare-fun m!109833 () Bool)

(assert (=> bm!10265 m!109833))

(assert (=> b!99770 m!109349))

(assert (=> b!99770 m!109349))

(declare-fun m!109835 () Bool)

(assert (=> b!99770 m!109835))

(declare-fun m!109837 () Bool)

(assert (=> bm!10262 m!109837))

(assert (=> d!26829 m!109329))

(assert (=> b!99779 m!109349))

(assert (=> b!99779 m!109349))

(assert (=> b!99779 m!109367))

(declare-fun m!109839 () Bool)

(assert (=> b!99784 m!109839))

(declare-fun m!109841 () Bool)

(assert (=> b!99789 m!109841))

(declare-fun m!109843 () Bool)

(assert (=> bm!10264 m!109843))

(assert (=> b!99788 m!109349))

(assert (=> b!99788 m!109349))

(assert (=> b!99788 m!109367))

(declare-fun m!109845 () Bool)

(assert (=> b!99776 m!109845))

(declare-fun m!109847 () Bool)

(assert (=> b!99776 m!109847))

(declare-fun m!109849 () Bool)

(assert (=> b!99776 m!109849))

(declare-fun m!109851 () Bool)

(assert (=> b!99776 m!109851))

(declare-fun m!109853 () Bool)

(assert (=> b!99776 m!109853))

(assert (=> b!99776 m!109851))

(declare-fun m!109855 () Bool)

(assert (=> b!99776 m!109855))

(declare-fun m!109857 () Bool)

(assert (=> b!99776 m!109857))

(declare-fun m!109859 () Bool)

(assert (=> b!99776 m!109859))

(assert (=> b!99776 m!109349))

(declare-fun m!109861 () Bool)

(assert (=> b!99776 m!109861))

(declare-fun m!109863 () Bool)

(assert (=> b!99776 m!109863))

(assert (=> b!99776 m!109853))

(declare-fun m!109865 () Bool)

(assert (=> b!99776 m!109865))

(assert (=> b!99776 m!109845))

(declare-fun m!109867 () Bool)

(assert (=> b!99776 m!109867))

(declare-fun m!109869 () Bool)

(assert (=> b!99776 m!109869))

(assert (=> b!99776 m!109867))

(declare-fun m!109871 () Bool)

(assert (=> b!99776 m!109871))

(assert (=> b!99776 m!109833))

(declare-fun m!109873 () Bool)

(assert (=> b!99776 m!109873))

(declare-fun m!109875 () Bool)

(assert (=> bm!10261 m!109875))

(assert (=> bm!10196 d!26829))

(assert (=> d!26687 d!26673))

(declare-fun d!26831 () Bool)

(declare-fun res!50102 () Bool)

(declare-fun e!65012 () Bool)

(assert (=> d!26831 (=> (not res!50102) (not e!65012))))

(assert (=> d!26831 (= res!50102 (simpleValid!68 (_2!1192 lt!50030)))))

(assert (=> d!26831 (= (valid!388 (_2!1192 lt!50030)) e!65012)))

(declare-fun b!99790 () Bool)

(declare-fun res!50103 () Bool)

(assert (=> b!99790 (=> (not res!50103) (not e!65012))))

(assert (=> b!99790 (= res!50103 (= (arrayCountValidKeys!0 (_keys!4196 (_2!1192 lt!50030)) #b00000000000000000000000000000000 (size!2271 (_keys!4196 (_2!1192 lt!50030)))) (_size!478 (_2!1192 lt!50030))))))

(declare-fun b!99791 () Bool)

(declare-fun res!50104 () Bool)

(assert (=> b!99791 (=> (not res!50104) (not e!65012))))

(assert (=> b!99791 (= res!50104 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 (_2!1192 lt!50030)) (mask!6609 (_2!1192 lt!50030))))))

(declare-fun b!99792 () Bool)

(assert (=> b!99792 (= e!65012 (arrayNoDuplicates!0 (_keys!4196 (_2!1192 lt!50030)) #b00000000000000000000000000000000 Nil!1613))))

(assert (= (and d!26831 res!50102) b!99790))

(assert (= (and b!99790 res!50103) b!99791))

(assert (= (and b!99791 res!50104) b!99792))

(declare-fun m!109877 () Bool)

(assert (=> d!26831 m!109877))

(declare-fun m!109879 () Bool)

(assert (=> b!99790 m!109879))

(declare-fun m!109881 () Bool)

(assert (=> b!99791 m!109881))

(declare-fun m!109883 () Bool)

(assert (=> b!99792 m!109883))

(assert (=> d!26695 d!26831))

(assert (=> d!26695 d!26669))

(declare-fun condMapEmpty!3783 () Bool)

(declare-fun mapDefault!3783 () ValueCell!975)

(assert (=> mapNonEmpty!3781 (= condMapEmpty!3783 (= mapRest!3781 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3783)))))

(declare-fun e!65014 () Bool)

(declare-fun mapRes!3783 () Bool)

(assert (=> mapNonEmpty!3781 (= tp!9631 (and e!65014 mapRes!3783))))

(declare-fun b!99794 () Bool)

(assert (=> b!99794 (= e!65014 tp_is_empty!2637)))

(declare-fun b!99793 () Bool)

(declare-fun e!65013 () Bool)

(assert (=> b!99793 (= e!65013 tp_is_empty!2637)))

(declare-fun mapIsEmpty!3783 () Bool)

(assert (=> mapIsEmpty!3783 mapRes!3783))

(declare-fun mapNonEmpty!3783 () Bool)

(declare-fun tp!9633 () Bool)

(assert (=> mapNonEmpty!3783 (= mapRes!3783 (and tp!9633 e!65013))))

(declare-fun mapRest!3783 () (Array (_ BitVec 32) ValueCell!975))

(declare-fun mapValue!3783 () ValueCell!975)

(declare-fun mapKey!3783 () (_ BitVec 32))

(assert (=> mapNonEmpty!3783 (= mapRest!3781 (store mapRest!3783 mapKey!3783 mapValue!3783))))

(assert (= (and mapNonEmpty!3781 condMapEmpty!3783) mapIsEmpty!3783))

(assert (= (and mapNonEmpty!3781 (not condMapEmpty!3783)) mapNonEmpty!3783))

(assert (= (and mapNonEmpty!3783 ((_ is ValueCellFull!975) mapValue!3783)) b!99793))

(assert (= (and mapNonEmpty!3781 ((_ is ValueCellFull!975) mapDefault!3783)) b!99794))

(declare-fun m!109885 () Bool)

(assert (=> mapNonEmpty!3783 m!109885))

(declare-fun condMapEmpty!3784 () Bool)

(declare-fun mapDefault!3784 () ValueCell!975)

(assert (=> mapNonEmpty!3782 (= condMapEmpty!3784 (= mapRest!3782 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3784)))))

(declare-fun e!65016 () Bool)

(declare-fun mapRes!3784 () Bool)

(assert (=> mapNonEmpty!3782 (= tp!9632 (and e!65016 mapRes!3784))))

(declare-fun b!99796 () Bool)

(assert (=> b!99796 (= e!65016 tp_is_empty!2637)))

(declare-fun b!99795 () Bool)

(declare-fun e!65015 () Bool)

(assert (=> b!99795 (= e!65015 tp_is_empty!2637)))

(declare-fun mapIsEmpty!3784 () Bool)

(assert (=> mapIsEmpty!3784 mapRes!3784))

(declare-fun mapNonEmpty!3784 () Bool)

(declare-fun tp!9634 () Bool)

(assert (=> mapNonEmpty!3784 (= mapRes!3784 (and tp!9634 e!65015))))

(declare-fun mapValue!3784 () ValueCell!975)

(declare-fun mapRest!3784 () (Array (_ BitVec 32) ValueCell!975))

(declare-fun mapKey!3784 () (_ BitVec 32))

(assert (=> mapNonEmpty!3784 (= mapRest!3782 (store mapRest!3784 mapKey!3784 mapValue!3784))))

(assert (= (and mapNonEmpty!3782 condMapEmpty!3784) mapIsEmpty!3784))

(assert (= (and mapNonEmpty!3782 (not condMapEmpty!3784)) mapNonEmpty!3784))

(assert (= (and mapNonEmpty!3784 ((_ is ValueCellFull!975) mapValue!3784)) b!99795))

(assert (= (and mapNonEmpty!3782 ((_ is ValueCellFull!975) mapDefault!3784)) b!99796))

(declare-fun m!109887 () Bool)

(assert (=> mapNonEmpty!3784 m!109887))

(declare-fun b_lambda!4463 () Bool)

(assert (= b_lambda!4459 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4463)))

(declare-fun b_lambda!4465 () Bool)

(assert (= b_lambda!4453 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4465)))

(declare-fun b_lambda!4467 () Bool)

(assert (= b_lambda!4455 (or (and b!99123 b_free!2441) (and b!99136 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))))) b_lambda!4467)))

(declare-fun b_lambda!4469 () Bool)

(assert (= b_lambda!4461 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4469)))

(declare-fun b_lambda!4471 () Bool)

(assert (= b_lambda!4457 (or (and b!99123 b_free!2441) (and b!99136 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))))) b_lambda!4471)))

(check-sat (not bm!10250) (not b!99698) (not b!99535) (not b!99577) (not b_lambda!4471) (not d!26777) (not bm!10264) (not b!99644) (not bm!10222) (not b!99761) (not bm!10242) (not b!99530) (not b!99753) (not b!99573) (not b!99455) (not d!26775) (not b!99719) (not d!26703) (not b!99517) (not d!26705) (not b!99646) (not b!99789) (not d!26799) (not d!26811) (not bm!10261) (not b!99788) (not b_lambda!4469) (not b!99587) (not b!99655) (not d!26769) (not d!26741) (not d!26829) (not b!99478) (not bm!10262) (not d!26709) (not b!99463) (not b!99621) (not b!99647) (not b!99739) (not mapNonEmpty!3784) (not b!99684) (not b!99749) (not b!99620) (not b!99579) (not b!99766) (not d!26783) (not b!99613) (not d!26747) (not d!26725) (not bm!10243) (not b!99659) (not b!99645) (not b!99528) (not b_lambda!4465) (not b!99792) (not d!26759) (not b!99692) (not d!26817) (not b!99536) (not bm!10253) (not b!99756) (not b!99466) (not b!99779) (not b!99545) (not bm!10237) (not b!99456) (not b!99474) (not b!99780) (not bm!10265) b_and!6139 (not bm!10246) (not b!99479) (not bm!10247) (not b!99660) (not d!26771) (not b!99695) (not b!99689) (not b_lambda!4467) (not d!26755) (not d!26805) (not b!99734) (not b!99784) (not b!99791) (not d!26815) (not b!99614) (not b!99615) b_and!6137 (not b!99752) (not b!99526) (not d!26809) (not d!26761) (not bm!10232) (not b!99790) (not d!26767) (not b!99674) (not d!26773) (not d!26795) (not d!26707) (not d!26719) (not bm!10219) (not b!99641) (not b!99631) (not bm!10254) (not b!99675) (not b!99741) (not b!99699) (not d!26825) (not b!99523) (not bm!10256) (not d!26781) (not b!99773) (not b_lambda!4463) (not b!99758) (not b!99764) (not b!99525) (not bm!10258) (not d!26717) (not d!26785) (not b!99708) (not b!99630) (not b!99740) (not d!26723) (not b_next!2441) (not b!99656) (not b!99661) (not b!99616) (not d!26823) (not b!99575) (not d!26779) (not b!99460) (not d!26801) (not d!26727) (not bm!10218) (not b!99639) (not b!99757) (not b!99585) (not b_next!2443) (not d!26765) (not b!99718) (not bm!10233) tp_is_empty!2637 (not d!26831) (not d!26821) (not b!99576) (not b!99458) (not b!99685) (not b!99703) (not b_lambda!4447) (not b!99767) (not b!99612) (not b!99776) (not b!99618) (not d!26731) (not d!26763) (not d!26713) (not b!99672) (not b!99657) (not d!26757) (not d!26711) (not b!99770) (not b!99755) (not d!26749) (not b!99470) (not d!26753) (not b!99763) (not b!99452) (not b!99469) (not bm!10221) (not d!26797) (not bm!10234) (not b!99707) (not d!26789) (not b!99643) (not b_lambda!4451) (not b!99629) (not d!26737) (not b!99632) (not b!99748) (not b!99768) (not bm!10257) (not b!99746) (not mapNonEmpty!3783) (not d!26807) (not d!26791))
(check-sat b_and!6137 b_and!6139 (not b_next!2441) (not b_next!2443))
(get-model)

(declare-fun d!26833 () Bool)

(declare-fun e!65017 () Bool)

(assert (=> d!26833 e!65017))

(declare-fun res!50105 () Bool)

(assert (=> d!26833 (=> res!50105 e!65017)))

(declare-fun lt!50362 () Bool)

(assert (=> d!26833 (= res!50105 (not lt!50362))))

(declare-fun lt!50364 () Bool)

(assert (=> d!26833 (= lt!50362 lt!50364)))

(declare-fun lt!50361 () Unit!3031)

(declare-fun e!65018 () Unit!3031)

(assert (=> d!26833 (= lt!50361 e!65018)))

(declare-fun c!17064 () Bool)

(assert (=> d!26833 (= c!17064 lt!50364)))

(assert (=> d!26833 (= lt!50364 (containsKey!154 (toList!794 lt!50072) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26833 (= (contains!810 lt!50072 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50362)))

(declare-fun b!99797 () Bool)

(declare-fun lt!50363 () Unit!3031)

(assert (=> b!99797 (= e!65018 lt!50363)))

(assert (=> b!99797 (= lt!50363 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50072) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99797 (isDefined!104 (getValueByKey!150 (toList!794 lt!50072) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!99798 () Bool)

(declare-fun Unit!3052 () Unit!3031)

(assert (=> b!99798 (= e!65018 Unit!3052)))

(declare-fun b!99799 () Bool)

(assert (=> b!99799 (= e!65017 (isDefined!104 (getValueByKey!150 (toList!794 lt!50072) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26833 c!17064) b!99797))

(assert (= (and d!26833 (not c!17064)) b!99798))

(assert (= (and d!26833 (not res!50105)) b!99799))

(declare-fun m!109889 () Bool)

(assert (=> d!26833 m!109889))

(declare-fun m!109891 () Bool)

(assert (=> b!99797 m!109891))

(declare-fun m!109893 () Bool)

(assert (=> b!99797 m!109893))

(assert (=> b!99797 m!109893))

(declare-fun m!109895 () Bool)

(assert (=> b!99797 m!109895))

(assert (=> b!99799 m!109893))

(assert (=> b!99799 m!109893))

(assert (=> b!99799 m!109895))

(assert (=> bm!10219 d!26833))

(declare-fun d!26835 () Bool)

(assert (=> d!26835 (= (validMask!0 (mask!6609 newMap!16)) (and (or (= (mask!6609 newMap!16) #b00000000000000000000000000000111) (= (mask!6609 newMap!16) #b00000000000000000000000000001111) (= (mask!6609 newMap!16) #b00000000000000000000000000011111) (= (mask!6609 newMap!16) #b00000000000000000000000000111111) (= (mask!6609 newMap!16) #b00000000000000000000000001111111) (= (mask!6609 newMap!16) #b00000000000000000000000011111111) (= (mask!6609 newMap!16) #b00000000000000000000000111111111) (= (mask!6609 newMap!16) #b00000000000000000000001111111111) (= (mask!6609 newMap!16) #b00000000000000000000011111111111) (= (mask!6609 newMap!16) #b00000000000000000000111111111111) (= (mask!6609 newMap!16) #b00000000000000000001111111111111) (= (mask!6609 newMap!16) #b00000000000000000011111111111111) (= (mask!6609 newMap!16) #b00000000000000000111111111111111) (= (mask!6609 newMap!16) #b00000000000000001111111111111111) (= (mask!6609 newMap!16) #b00000000000000011111111111111111) (= (mask!6609 newMap!16) #b00000000000000111111111111111111) (= (mask!6609 newMap!16) #b00000000000001111111111111111111) (= (mask!6609 newMap!16) #b00000000000011111111111111111111) (= (mask!6609 newMap!16) #b00000000000111111111111111111111) (= (mask!6609 newMap!16) #b00000000001111111111111111111111) (= (mask!6609 newMap!16) #b00000000011111111111111111111111) (= (mask!6609 newMap!16) #b00000000111111111111111111111111) (= (mask!6609 newMap!16) #b00000001111111111111111111111111) (= (mask!6609 newMap!16) #b00000011111111111111111111111111) (= (mask!6609 newMap!16) #b00000111111111111111111111111111) (= (mask!6609 newMap!16) #b00001111111111111111111111111111) (= (mask!6609 newMap!16) #b00011111111111111111111111111111) (= (mask!6609 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!6609 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!26829 d!26835))

(declare-fun d!26837 () Bool)

(assert (=> d!26837 (= (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99632 d!26837))

(declare-fun b!99800 () Bool)

(declare-fun e!65019 () Bool)

(declare-fun e!65020 () Bool)

(assert (=> b!99800 (= e!65019 e!65020)))

(declare-fun c!17065 () Bool)

(assert (=> b!99800 (= c!17065 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (_2!1192 lt!50030))) #b00000000000000000000000000000000)))))

(declare-fun bm!10266 () Bool)

(declare-fun call!10269 () Bool)

(assert (=> bm!10266 (= call!10269 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4196 (_2!1192 lt!50030)) (mask!6609 (_2!1192 lt!50030))))))

(declare-fun b!99801 () Bool)

(declare-fun e!65021 () Bool)

(assert (=> b!99801 (= e!65020 e!65021)))

(declare-fun lt!50367 () (_ BitVec 64))

(assert (=> b!99801 (= lt!50367 (select (arr!2020 (_keys!4196 (_2!1192 lt!50030))) #b00000000000000000000000000000000))))

(declare-fun lt!50366 () Unit!3031)

(assert (=> b!99801 (= lt!50366 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4196 (_2!1192 lt!50030)) lt!50367 #b00000000000000000000000000000000))))

(assert (=> b!99801 (arrayContainsKey!0 (_keys!4196 (_2!1192 lt!50030)) lt!50367 #b00000000000000000000000000000000)))

(declare-fun lt!50365 () Unit!3031)

(assert (=> b!99801 (= lt!50365 lt!50366)))

(declare-fun res!50106 () Bool)

(assert (=> b!99801 (= res!50106 (= (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (_2!1192 lt!50030))) #b00000000000000000000000000000000) (_keys!4196 (_2!1192 lt!50030)) (mask!6609 (_2!1192 lt!50030))) (Found!264 #b00000000000000000000000000000000)))))

(assert (=> b!99801 (=> (not res!50106) (not e!65021))))

(declare-fun d!26839 () Bool)

(declare-fun res!50107 () Bool)

(assert (=> d!26839 (=> res!50107 e!65019)))

(assert (=> d!26839 (= res!50107 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 (_2!1192 lt!50030)))))))

(assert (=> d!26839 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 (_2!1192 lt!50030)) (mask!6609 (_2!1192 lt!50030))) e!65019)))

(declare-fun b!99802 () Bool)

(assert (=> b!99802 (= e!65021 call!10269)))

(declare-fun b!99803 () Bool)

(assert (=> b!99803 (= e!65020 call!10269)))

(assert (= (and d!26839 (not res!50107)) b!99800))

(assert (= (and b!99800 c!17065) b!99801))

(assert (= (and b!99800 (not c!17065)) b!99803))

(assert (= (and b!99801 res!50106) b!99802))

(assert (= (or b!99802 b!99803) bm!10266))

(declare-fun m!109897 () Bool)

(assert (=> b!99800 m!109897))

(assert (=> b!99800 m!109897))

(declare-fun m!109899 () Bool)

(assert (=> b!99800 m!109899))

(declare-fun m!109901 () Bool)

(assert (=> bm!10266 m!109901))

(assert (=> b!99801 m!109897))

(declare-fun m!109903 () Bool)

(assert (=> b!99801 m!109903))

(declare-fun m!109905 () Bool)

(assert (=> b!99801 m!109905))

(assert (=> b!99801 m!109897))

(declare-fun m!109907 () Bool)

(assert (=> b!99801 m!109907))

(assert (=> b!99791 d!26839))

(declare-fun d!26841 () Bool)

(assert (=> d!26841 (= (apply!93 lt!50294 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1307 (getValueByKey!150 (toList!794 lt!50294) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4118 () Bool)

(assert (= bs!4118 d!26841))

(declare-fun m!109909 () Bool)

(assert (=> bs!4118 m!109909))

(assert (=> bs!4118 m!109909))

(declare-fun m!109911 () Bool)

(assert (=> bs!4118 m!109911))

(assert (=> b!99703 d!26841))

(declare-fun b!99804 () Bool)

(declare-fun e!65032 () Bool)

(declare-fun call!10274 () Bool)

(assert (=> b!99804 (= e!65032 (not call!10274))))

(declare-fun b!99805 () Bool)

(declare-fun e!65033 () Bool)

(declare-fun e!65034 () Bool)

(assert (=> b!99805 (= e!65033 e!65034)))

(declare-fun res!50112 () Bool)

(assert (=> b!99805 (=> (not res!50112) (not e!65034))))

(declare-fun lt!50373 () ListLongMap!1557)

(assert (=> b!99805 (= res!50112 (contains!810 lt!50373 (select (arr!2020 lt!50151) #b00000000000000000000000000000000)))))

(assert (=> b!99805 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 lt!50151)))))

(declare-fun bm!10267 () Bool)

(declare-fun call!10271 () ListLongMap!1557)

(declare-fun call!10270 () ListLongMap!1557)

(assert (=> bm!10267 (= call!10271 call!10270)))

(declare-fun bm!10268 () Bool)

(declare-fun call!10272 () ListLongMap!1557)

(assert (=> bm!10268 (= call!10270 call!10272)))

(declare-fun b!99806 () Bool)

(declare-fun e!65023 () Bool)

(assert (=> b!99806 (= e!65032 e!65023)))

(declare-fun res!50108 () Bool)

(assert (=> b!99806 (= res!50108 call!10274)))

(assert (=> b!99806 (=> (not res!50108) (not e!65023))))

(declare-fun b!99807 () Bool)

(declare-fun e!65022 () Bool)

(declare-fun call!10273 () Bool)

(assert (=> b!99807 (= e!65022 (not call!10273))))

(declare-fun b!99808 () Bool)

(declare-fun e!65024 () Bool)

(assert (=> b!99808 (= e!65024 (= (apply!93 lt!50373 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!99809 () Bool)

(declare-fun c!17070 () Bool)

(assert (=> b!99809 (= c!17070 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65026 () ListLongMap!1557)

(declare-fun e!65031 () ListLongMap!1557)

(assert (=> b!99809 (= e!65026 e!65031)))

(declare-fun bm!10269 () Bool)

(declare-fun call!10276 () ListLongMap!1557)

(declare-fun c!17071 () Bool)

(declare-fun c!17068 () Bool)

(assert (=> bm!10269 (= call!10276 (+!139 (ite c!17068 call!10272 (ite c!17071 call!10270 call!10271)) (ite (or c!17068 c!17071) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!99810 () Bool)

(declare-fun e!65027 () Bool)

(assert (=> b!99810 (= e!65027 e!65022)))

(declare-fun c!17067 () Bool)

(assert (=> b!99810 (= c!17067 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99811 () Bool)

(declare-fun e!65030 () Unit!3031)

(declare-fun lt!50370 () Unit!3031)

(assert (=> b!99811 (= e!65030 lt!50370)))

(declare-fun lt!50385 () ListLongMap!1557)

(assert (=> b!99811 (= lt!50385 (getCurrentListMapNoExtraKeys!103 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50382 () (_ BitVec 64))

(assert (=> b!99811 (= lt!50382 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50369 () (_ BitVec 64))

(assert (=> b!99811 (= lt!50369 (select (arr!2020 lt!50151) #b00000000000000000000000000000000))))

(declare-fun lt!50371 () Unit!3031)

(assert (=> b!99811 (= lt!50371 (addStillContains!69 lt!50385 lt!50382 (zeroValue!2383 newMap!16) lt!50369))))

(assert (=> b!99811 (contains!810 (+!139 lt!50385 (tuple2!2367 lt!50382 (zeroValue!2383 newMap!16))) lt!50369)))

(declare-fun lt!50380 () Unit!3031)

(assert (=> b!99811 (= lt!50380 lt!50371)))

(declare-fun lt!50379 () ListLongMap!1557)

(assert (=> b!99811 (= lt!50379 (getCurrentListMapNoExtraKeys!103 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50381 () (_ BitVec 64))

(assert (=> b!99811 (= lt!50381 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50378 () (_ BitVec 64))

(assert (=> b!99811 (= lt!50378 (select (arr!2020 lt!50151) #b00000000000000000000000000000000))))

(declare-fun lt!50377 () Unit!3031)

(assert (=> b!99811 (= lt!50377 (addApplyDifferent!69 lt!50379 lt!50381 (minValue!2383 newMap!16) lt!50378))))

(assert (=> b!99811 (= (apply!93 (+!139 lt!50379 (tuple2!2367 lt!50381 (minValue!2383 newMap!16))) lt!50378) (apply!93 lt!50379 lt!50378))))

(declare-fun lt!50376 () Unit!3031)

(assert (=> b!99811 (= lt!50376 lt!50377)))

(declare-fun lt!50386 () ListLongMap!1557)

(assert (=> b!99811 (= lt!50386 (getCurrentListMapNoExtraKeys!103 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50374 () (_ BitVec 64))

(assert (=> b!99811 (= lt!50374 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50387 () (_ BitVec 64))

(assert (=> b!99811 (= lt!50387 (select (arr!2020 lt!50151) #b00000000000000000000000000000000))))

(declare-fun lt!50372 () Unit!3031)

(assert (=> b!99811 (= lt!50372 (addApplyDifferent!69 lt!50386 lt!50374 (zeroValue!2383 newMap!16) lt!50387))))

(assert (=> b!99811 (= (apply!93 (+!139 lt!50386 (tuple2!2367 lt!50374 (zeroValue!2383 newMap!16))) lt!50387) (apply!93 lt!50386 lt!50387))))

(declare-fun lt!50384 () Unit!3031)

(assert (=> b!99811 (= lt!50384 lt!50372)))

(declare-fun lt!50375 () ListLongMap!1557)

(assert (=> b!99811 (= lt!50375 (getCurrentListMapNoExtraKeys!103 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50383 () (_ BitVec 64))

(assert (=> b!99811 (= lt!50383 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50389 () (_ BitVec 64))

(assert (=> b!99811 (= lt!50389 (select (arr!2020 lt!50151) #b00000000000000000000000000000000))))

(assert (=> b!99811 (= lt!50370 (addApplyDifferent!69 lt!50375 lt!50383 (minValue!2383 newMap!16) lt!50389))))

(assert (=> b!99811 (= (apply!93 (+!139 lt!50375 (tuple2!2367 lt!50383 (minValue!2383 newMap!16))) lt!50389) (apply!93 lt!50375 lt!50389))))

(declare-fun b!99812 () Bool)

(declare-fun call!10275 () ListLongMap!1557)

(assert (=> b!99812 (= e!65031 call!10275)))

(declare-fun b!99813 () Bool)

(declare-fun res!50115 () Bool)

(assert (=> b!99813 (=> (not res!50115) (not e!65027))))

(assert (=> b!99813 (= res!50115 e!65032)))

(declare-fun c!17069 () Bool)

(assert (=> b!99813 (= c!17069 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99814 () Bool)

(declare-fun e!65028 () Bool)

(assert (=> b!99814 (= e!65028 (validKeyInArray!0 (select (arr!2020 lt!50151) #b00000000000000000000000000000000)))))

(declare-fun b!99815 () Bool)

(assert (=> b!99815 (= e!65034 (= (apply!93 lt!50373 (select (arr!2020 lt!50151) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 lt!50177) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99815 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 lt!50177)))))

(assert (=> b!99815 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 lt!50151)))))

(declare-fun b!99816 () Bool)

(declare-fun Unit!3053 () Unit!3031)

(assert (=> b!99816 (= e!65030 Unit!3053)))

(declare-fun b!99817 () Bool)

(assert (=> b!99817 (= e!65026 call!10275)))

(declare-fun bm!10270 () Bool)

(assert (=> bm!10270 (= call!10273 (contains!810 lt!50373 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10271 () Bool)

(assert (=> bm!10271 (= call!10275 call!10276)))

(declare-fun b!99818 () Bool)

(declare-fun res!50116 () Bool)

(assert (=> b!99818 (=> (not res!50116) (not e!65027))))

(assert (=> b!99818 (= res!50116 e!65033)))

(declare-fun res!50114 () Bool)

(assert (=> b!99818 (=> res!50114 e!65033)))

(assert (=> b!99818 (= res!50114 (not e!65028))))

(declare-fun res!50113 () Bool)

(assert (=> b!99818 (=> (not res!50113) (not e!65028))))

(assert (=> b!99818 (= res!50113 (bvslt #b00000000000000000000000000000000 (size!2271 lt!50151)))))

(declare-fun d!26843 () Bool)

(assert (=> d!26843 e!65027))

(declare-fun res!50111 () Bool)

(assert (=> d!26843 (=> (not res!50111) (not e!65027))))

(assert (=> d!26843 (= res!50111 (or (bvsge #b00000000000000000000000000000000 (size!2271 lt!50151)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 lt!50151)))))))

(declare-fun lt!50388 () ListLongMap!1557)

(assert (=> d!26843 (= lt!50373 lt!50388)))

(declare-fun lt!50368 () Unit!3031)

(assert (=> d!26843 (= lt!50368 e!65030)))

(declare-fun c!17066 () Bool)

(declare-fun e!65025 () Bool)

(assert (=> d!26843 (= c!17066 e!65025)))

(declare-fun res!50109 () Bool)

(assert (=> d!26843 (=> (not res!50109) (not e!65025))))

(assert (=> d!26843 (= res!50109 (bvslt #b00000000000000000000000000000000 (size!2271 lt!50151)))))

(declare-fun e!65029 () ListLongMap!1557)

(assert (=> d!26843 (= lt!50388 e!65029)))

(assert (=> d!26843 (= c!17068 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26843 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26843 (= (getCurrentListMap!474 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50373)))

(declare-fun bm!10272 () Bool)

(assert (=> bm!10272 (= call!10274 (contains!810 lt!50373 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10273 () Bool)

(assert (=> bm!10273 (= call!10272 (getCurrentListMapNoExtraKeys!103 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!99819 () Bool)

(assert (=> b!99819 (= e!65023 (= (apply!93 lt!50373 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun b!99820 () Bool)

(assert (=> b!99820 (= e!65031 call!10271)))

(declare-fun b!99821 () Bool)

(assert (=> b!99821 (= e!65022 e!65024)))

(declare-fun res!50110 () Bool)

(assert (=> b!99821 (= res!50110 call!10273)))

(assert (=> b!99821 (=> (not res!50110) (not e!65024))))

(declare-fun b!99822 () Bool)

(assert (=> b!99822 (= e!65029 e!65026)))

(assert (=> b!99822 (= c!17071 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99823 () Bool)

(assert (=> b!99823 (= e!65025 (validKeyInArray!0 (select (arr!2020 lt!50151) #b00000000000000000000000000000000)))))

(declare-fun b!99824 () Bool)

(assert (=> b!99824 (= e!65029 (+!139 call!10276 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(assert (= (and d!26843 c!17068) b!99824))

(assert (= (and d!26843 (not c!17068)) b!99822))

(assert (= (and b!99822 c!17071) b!99817))

(assert (= (and b!99822 (not c!17071)) b!99809))

(assert (= (and b!99809 c!17070) b!99812))

(assert (= (and b!99809 (not c!17070)) b!99820))

(assert (= (or b!99812 b!99820) bm!10267))

(assert (= (or b!99817 bm!10267) bm!10268))

(assert (= (or b!99817 b!99812) bm!10271))

(assert (= (or b!99824 bm!10268) bm!10273))

(assert (= (or b!99824 bm!10271) bm!10269))

(assert (= (and d!26843 res!50109) b!99823))

(assert (= (and d!26843 c!17066) b!99811))

(assert (= (and d!26843 (not c!17066)) b!99816))

(assert (= (and d!26843 res!50111) b!99818))

(assert (= (and b!99818 res!50113) b!99814))

(assert (= (and b!99818 (not res!50114)) b!99805))

(assert (= (and b!99805 res!50112) b!99815))

(assert (= (and b!99818 res!50116) b!99813))

(assert (= (and b!99813 c!17069) b!99806))

(assert (= (and b!99813 (not c!17069)) b!99804))

(assert (= (and b!99806 res!50108) b!99819))

(assert (= (or b!99806 b!99804) bm!10272))

(assert (= (and b!99813 res!50115) b!99810))

(assert (= (and b!99810 c!17067) b!99821))

(assert (= (and b!99810 (not c!17067)) b!99807))

(assert (= (and b!99821 res!50110) b!99808))

(assert (= (or b!99821 b!99807) bm!10270))

(declare-fun b_lambda!4473 () Bool)

(assert (=> (not b_lambda!4473) (not b!99815)))

(assert (=> b!99815 t!5605))

(declare-fun b_and!6141 () Bool)

(assert (= b_and!6137 (and (=> t!5605 result!3311) b_and!6141)))

(assert (=> b!99815 t!5607))

(declare-fun b_and!6143 () Bool)

(assert (= b_and!6139 (and (=> t!5607 result!3313) b_and!6143)))

(declare-fun m!109913 () Bool)

(assert (=> b!99815 m!109913))

(declare-fun m!109915 () Bool)

(assert (=> b!99815 m!109915))

(declare-fun m!109917 () Bool)

(assert (=> b!99815 m!109917))

(assert (=> b!99815 m!109917))

(assert (=> b!99815 m!109355))

(declare-fun m!109919 () Bool)

(assert (=> b!99815 m!109919))

(assert (=> b!99815 m!109913))

(assert (=> b!99815 m!109355))

(declare-fun m!109921 () Bool)

(assert (=> b!99808 m!109921))

(declare-fun m!109923 () Bool)

(assert (=> bm!10273 m!109923))

(assert (=> b!99805 m!109913))

(assert (=> b!99805 m!109913))

(declare-fun m!109925 () Bool)

(assert (=> b!99805 m!109925))

(declare-fun m!109927 () Bool)

(assert (=> bm!10270 m!109927))

(assert (=> d!26843 m!109329))

(assert (=> b!99814 m!109913))

(assert (=> b!99814 m!109913))

(declare-fun m!109929 () Bool)

(assert (=> b!99814 m!109929))

(declare-fun m!109931 () Bool)

(assert (=> b!99819 m!109931))

(declare-fun m!109933 () Bool)

(assert (=> b!99824 m!109933))

(declare-fun m!109935 () Bool)

(assert (=> bm!10272 m!109935))

(assert (=> b!99823 m!109913))

(assert (=> b!99823 m!109913))

(assert (=> b!99823 m!109929))

(declare-fun m!109937 () Bool)

(assert (=> b!99811 m!109937))

(declare-fun m!109939 () Bool)

(assert (=> b!99811 m!109939))

(declare-fun m!109941 () Bool)

(assert (=> b!99811 m!109941))

(declare-fun m!109943 () Bool)

(assert (=> b!99811 m!109943))

(declare-fun m!109945 () Bool)

(assert (=> b!99811 m!109945))

(assert (=> b!99811 m!109943))

(declare-fun m!109947 () Bool)

(assert (=> b!99811 m!109947))

(declare-fun m!109949 () Bool)

(assert (=> b!99811 m!109949))

(declare-fun m!109951 () Bool)

(assert (=> b!99811 m!109951))

(assert (=> b!99811 m!109913))

(declare-fun m!109953 () Bool)

(assert (=> b!99811 m!109953))

(declare-fun m!109955 () Bool)

(assert (=> b!99811 m!109955))

(assert (=> b!99811 m!109945))

(declare-fun m!109957 () Bool)

(assert (=> b!99811 m!109957))

(assert (=> b!99811 m!109937))

(declare-fun m!109959 () Bool)

(assert (=> b!99811 m!109959))

(declare-fun m!109961 () Bool)

(assert (=> b!99811 m!109961))

(assert (=> b!99811 m!109959))

(declare-fun m!109963 () Bool)

(assert (=> b!99811 m!109963))

(assert (=> b!99811 m!109923))

(declare-fun m!109965 () Bool)

(assert (=> b!99811 m!109965))

(declare-fun m!109967 () Bool)

(assert (=> bm!10269 m!109967))

(assert (=> d!26711 d!26843))

(declare-fun d!26845 () Bool)

(assert (=> d!26845 (= (arrayCountValidKeys!0 lt!50171 (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (bvadd (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!50392 () Unit!3031)

(declare-fun choose!2 (array!4254 (_ BitVec 32)) Unit!3031)

(assert (=> d!26845 (= lt!50392 (choose!2 lt!50171 (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043))))))

(declare-fun e!65037 () Bool)

(assert (=> d!26845 e!65037))

(declare-fun res!50121 () Bool)

(assert (=> d!26845 (=> (not res!50121) (not e!65037))))

(assert (=> d!26845 (= res!50121 (and (bvsge (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000000) (bvslt (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (size!2271 lt!50171))))))

(assert (=> d!26845 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!50171 (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043))) lt!50392)))

(declare-fun b!99829 () Bool)

(declare-fun res!50122 () Bool)

(assert (=> b!99829 (=> (not res!50122) (not e!65037))))

(assert (=> b!99829 (= res!50122 (validKeyInArray!0 (select (arr!2020 lt!50171) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)))))))

(declare-fun b!99830 () Bool)

(assert (=> b!99830 (= e!65037 (bvslt (size!2271 lt!50171) #b01111111111111111111111111111111))))

(assert (= (and d!26845 res!50121) b!99829))

(assert (= (and b!99829 res!50122) b!99830))

(assert (=> d!26845 m!109421))

(declare-fun m!109969 () Bool)

(assert (=> d!26845 m!109969))

(declare-fun m!109971 () Bool)

(assert (=> b!99829 m!109971))

(assert (=> b!99829 m!109971))

(declare-fun m!109973 () Bool)

(assert (=> b!99829 m!109973))

(assert (=> d!26711 d!26845))

(declare-fun d!26847 () Bool)

(declare-fun e!65038 () Bool)

(assert (=> d!26847 e!65038))

(declare-fun res!50123 () Bool)

(assert (=> d!26847 (=> res!50123 e!65038)))

(declare-fun lt!50394 () Bool)

(assert (=> d!26847 (= res!50123 (not lt!50394))))

(declare-fun lt!50396 () Bool)

(assert (=> d!26847 (= lt!50394 lt!50396)))

(declare-fun lt!50393 () Unit!3031)

(declare-fun e!65039 () Unit!3031)

(assert (=> d!26847 (= lt!50393 e!65039)))

(declare-fun c!17072 () Bool)

(assert (=> d!26847 (= c!17072 lt!50396)))

(assert (=> d!26847 (= lt!50396 (containsKey!154 (toList!794 (getCurrentListMap!474 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)))))))

(assert (=> d!26847 (= (contains!810 (getCurrentListMap!474 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)))) lt!50394)))

(declare-fun b!99831 () Bool)

(declare-fun lt!50395 () Unit!3031)

(assert (=> b!99831 (= e!65039 lt!50395)))

(assert (=> b!99831 (= lt!50395 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 (getCurrentListMap!474 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)))))))

(assert (=> b!99831 (isDefined!104 (getValueByKey!150 (toList!794 (getCurrentListMap!474 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)))))))

(declare-fun b!99832 () Bool)

(declare-fun Unit!3054 () Unit!3031)

(assert (=> b!99832 (= e!65039 Unit!3054)))

(declare-fun b!99833 () Bool)

(assert (=> b!99833 (= e!65038 (isDefined!104 (getValueByKey!150 (toList!794 (getCurrentListMap!474 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043))))))))

(assert (= (and d!26847 c!17072) b!99831))

(assert (= (and d!26847 (not c!17072)) b!99832))

(assert (= (and d!26847 (not res!50123)) b!99833))

(assert (=> d!26847 m!109419))

(declare-fun m!109975 () Bool)

(assert (=> d!26847 m!109975))

(assert (=> b!99831 m!109419))

(declare-fun m!109977 () Bool)

(assert (=> b!99831 m!109977))

(assert (=> b!99831 m!109419))

(declare-fun m!109979 () Bool)

(assert (=> b!99831 m!109979))

(assert (=> b!99831 m!109979))

(declare-fun m!109981 () Bool)

(assert (=> b!99831 m!109981))

(assert (=> b!99833 m!109419))

(assert (=> b!99833 m!109979))

(assert (=> b!99833 m!109979))

(assert (=> b!99833 m!109981))

(assert (=> d!26711 d!26847))

(declare-fun b!99834 () Bool)

(declare-fun e!65050 () Bool)

(declare-fun call!10281 () Bool)

(assert (=> b!99834 (= e!65050 (not call!10281))))

(declare-fun b!99835 () Bool)

(declare-fun e!65051 () Bool)

(declare-fun e!65052 () Bool)

(assert (=> b!99835 (= e!65051 e!65052)))

(declare-fun res!50128 () Bool)

(assert (=> b!99835 (=> (not res!50128) (not e!65052))))

(declare-fun lt!50402 () ListLongMap!1557)

(assert (=> b!99835 (= res!50128 (contains!810 lt!50402 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!99835 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))))))

(declare-fun bm!10274 () Bool)

(declare-fun call!10278 () ListLongMap!1557)

(declare-fun call!10277 () ListLongMap!1557)

(assert (=> bm!10274 (= call!10278 call!10277)))

(declare-fun bm!10275 () Bool)

(declare-fun call!10279 () ListLongMap!1557)

(assert (=> bm!10275 (= call!10277 call!10279)))

(declare-fun b!99836 () Bool)

(declare-fun e!65041 () Bool)

(assert (=> b!99836 (= e!65050 e!65041)))

(declare-fun res!50124 () Bool)

(assert (=> b!99836 (= res!50124 call!10281)))

(assert (=> b!99836 (=> (not res!50124) (not e!65041))))

(declare-fun b!99837 () Bool)

(declare-fun e!65040 () Bool)

(declare-fun call!10280 () Bool)

(assert (=> b!99837 (= e!65040 (not call!10280))))

(declare-fun b!99838 () Bool)

(declare-fun e!65042 () Bool)

(assert (=> b!99838 (= e!65042 (= (apply!93 lt!50402 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!99839 () Bool)

(declare-fun c!17077 () Bool)

(assert (=> b!99839 (= c!17077 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65044 () ListLongMap!1557)

(declare-fun e!65049 () ListLongMap!1557)

(assert (=> b!99839 (= e!65044 e!65049)))

(declare-fun c!17078 () Bool)

(declare-fun bm!10276 () Bool)

(declare-fun call!10283 () ListLongMap!1557)

(declare-fun c!17075 () Bool)

(assert (=> bm!10276 (= call!10283 (+!139 (ite c!17075 call!10279 (ite c!17078 call!10277 call!10278)) (ite (or c!17075 c!17078) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!99840 () Bool)

(declare-fun e!65045 () Bool)

(assert (=> b!99840 (= e!65045 e!65040)))

(declare-fun c!17074 () Bool)

(assert (=> b!99840 (= c!17074 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99841 () Bool)

(declare-fun e!65048 () Unit!3031)

(declare-fun lt!50399 () Unit!3031)

(assert (=> b!99841 (= e!65048 lt!50399)))

(declare-fun lt!50414 () ListLongMap!1557)

(assert (=> b!99841 (= lt!50414 (getCurrentListMapNoExtraKeys!103 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50411 () (_ BitVec 64))

(assert (=> b!99841 (= lt!50411 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50398 () (_ BitVec 64))

(assert (=> b!99841 (= lt!50398 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50400 () Unit!3031)

(assert (=> b!99841 (= lt!50400 (addStillContains!69 lt!50414 lt!50411 (zeroValue!2383 newMap!16) lt!50398))))

(assert (=> b!99841 (contains!810 (+!139 lt!50414 (tuple2!2367 lt!50411 (zeroValue!2383 newMap!16))) lt!50398)))

(declare-fun lt!50409 () Unit!3031)

(assert (=> b!99841 (= lt!50409 lt!50400)))

(declare-fun lt!50408 () ListLongMap!1557)

(assert (=> b!99841 (= lt!50408 (getCurrentListMapNoExtraKeys!103 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50410 () (_ BitVec 64))

(assert (=> b!99841 (= lt!50410 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50407 () (_ BitVec 64))

(assert (=> b!99841 (= lt!50407 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50406 () Unit!3031)

(assert (=> b!99841 (= lt!50406 (addApplyDifferent!69 lt!50408 lt!50410 (minValue!2383 newMap!16) lt!50407))))

(assert (=> b!99841 (= (apply!93 (+!139 lt!50408 (tuple2!2367 lt!50410 (minValue!2383 newMap!16))) lt!50407) (apply!93 lt!50408 lt!50407))))

(declare-fun lt!50405 () Unit!3031)

(assert (=> b!99841 (= lt!50405 lt!50406)))

(declare-fun lt!50415 () ListLongMap!1557)

(assert (=> b!99841 (= lt!50415 (getCurrentListMapNoExtraKeys!103 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50403 () (_ BitVec 64))

(assert (=> b!99841 (= lt!50403 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50416 () (_ BitVec 64))

(assert (=> b!99841 (= lt!50416 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50401 () Unit!3031)

(assert (=> b!99841 (= lt!50401 (addApplyDifferent!69 lt!50415 lt!50403 (zeroValue!2383 newMap!16) lt!50416))))

(assert (=> b!99841 (= (apply!93 (+!139 lt!50415 (tuple2!2367 lt!50403 (zeroValue!2383 newMap!16))) lt!50416) (apply!93 lt!50415 lt!50416))))

(declare-fun lt!50413 () Unit!3031)

(assert (=> b!99841 (= lt!50413 lt!50401)))

(declare-fun lt!50404 () ListLongMap!1557)

(assert (=> b!99841 (= lt!50404 (getCurrentListMapNoExtraKeys!103 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50412 () (_ BitVec 64))

(assert (=> b!99841 (= lt!50412 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50418 () (_ BitVec 64))

(assert (=> b!99841 (= lt!50418 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!99841 (= lt!50399 (addApplyDifferent!69 lt!50404 lt!50412 (minValue!2383 newMap!16) lt!50418))))

(assert (=> b!99841 (= (apply!93 (+!139 lt!50404 (tuple2!2367 lt!50412 (minValue!2383 newMap!16))) lt!50418) (apply!93 lt!50404 lt!50418))))

(declare-fun b!99842 () Bool)

(declare-fun call!10282 () ListLongMap!1557)

(assert (=> b!99842 (= e!65049 call!10282)))

(declare-fun b!99843 () Bool)

(declare-fun res!50131 () Bool)

(assert (=> b!99843 (=> (not res!50131) (not e!65045))))

(assert (=> b!99843 (= res!50131 e!65050)))

(declare-fun c!17076 () Bool)

(assert (=> b!99843 (= c!17076 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!99844 () Bool)

(declare-fun e!65046 () Bool)

(assert (=> b!99844 (= e!65046 (validKeyInArray!0 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!99845 () Bool)

(assert (=> b!99845 (= e!65052 (= (apply!93 lt!50402 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99845 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))))))

(assert (=> b!99845 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))))))

(declare-fun b!99846 () Bool)

(declare-fun Unit!3055 () Unit!3031)

(assert (=> b!99846 (= e!65048 Unit!3055)))

(declare-fun b!99847 () Bool)

(assert (=> b!99847 (= e!65044 call!10282)))

(declare-fun bm!10277 () Bool)

(assert (=> bm!10277 (= call!10280 (contains!810 lt!50402 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10278 () Bool)

(assert (=> bm!10278 (= call!10282 call!10283)))

(declare-fun b!99848 () Bool)

(declare-fun res!50132 () Bool)

(assert (=> b!99848 (=> (not res!50132) (not e!65045))))

(assert (=> b!99848 (= res!50132 e!65051)))

(declare-fun res!50130 () Bool)

(assert (=> b!99848 (=> res!50130 e!65051)))

(assert (=> b!99848 (= res!50130 (not e!65046))))

(declare-fun res!50129 () Bool)

(assert (=> b!99848 (=> (not res!50129) (not e!65046))))

(assert (=> b!99848 (= res!50129 (bvslt #b00000000000000000000000000000000 (size!2271 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))))))

(declare-fun d!26849 () Bool)

(assert (=> d!26849 e!65045))

(declare-fun res!50127 () Bool)

(assert (=> d!26849 (=> (not res!50127) (not e!65045))))

(assert (=> d!26849 (= res!50127 (or (bvsge #b00000000000000000000000000000000 (size!2271 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))))))))

(declare-fun lt!50417 () ListLongMap!1557)

(assert (=> d!26849 (= lt!50402 lt!50417)))

(declare-fun lt!50397 () Unit!3031)

(assert (=> d!26849 (= lt!50397 e!65048)))

(declare-fun c!17073 () Bool)

(declare-fun e!65043 () Bool)

(assert (=> d!26849 (= c!17073 e!65043)))

(declare-fun res!50125 () Bool)

(assert (=> d!26849 (=> (not res!50125) (not e!65043))))

(assert (=> d!26849 (= res!50125 (bvslt #b00000000000000000000000000000000 (size!2271 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))))))

(declare-fun e!65047 () ListLongMap!1557)

(assert (=> d!26849 (= lt!50417 e!65047)))

(assert (=> d!26849 (= c!17075 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26849 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26849 (= (getCurrentListMap!474 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50402)))

(declare-fun bm!10279 () Bool)

(assert (=> bm!10279 (= call!10281 (contains!810 lt!50402 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10280 () Bool)

(assert (=> bm!10280 (= call!10279 (getCurrentListMapNoExtraKeys!103 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!99849 () Bool)

(assert (=> b!99849 (= e!65041 (= (apply!93 lt!50402 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun b!99850 () Bool)

(assert (=> b!99850 (= e!65049 call!10278)))

(declare-fun b!99851 () Bool)

(assert (=> b!99851 (= e!65040 e!65042)))

(declare-fun res!50126 () Bool)

(assert (=> b!99851 (= res!50126 call!10280)))

(assert (=> b!99851 (=> (not res!50126) (not e!65042))))

(declare-fun b!99852 () Bool)

(assert (=> b!99852 (= e!65047 e!65044)))

(assert (=> b!99852 (= c!17078 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!99853 () Bool)

(assert (=> b!99853 (= e!65043 (validKeyInArray!0 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!99854 () Bool)

(assert (=> b!99854 (= e!65047 (+!139 call!10283 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(assert (= (and d!26849 c!17075) b!99854))

(assert (= (and d!26849 (not c!17075)) b!99852))

(assert (= (and b!99852 c!17078) b!99847))

(assert (= (and b!99852 (not c!17078)) b!99839))

(assert (= (and b!99839 c!17077) b!99842))

(assert (= (and b!99839 (not c!17077)) b!99850))

(assert (= (or b!99842 b!99850) bm!10274))

(assert (= (or b!99847 bm!10274) bm!10275))

(assert (= (or b!99847 b!99842) bm!10278))

(assert (= (or b!99854 bm!10275) bm!10280))

(assert (= (or b!99854 bm!10278) bm!10276))

(assert (= (and d!26849 res!50125) b!99853))

(assert (= (and d!26849 c!17073) b!99841))

(assert (= (and d!26849 (not c!17073)) b!99846))

(assert (= (and d!26849 res!50127) b!99848))

(assert (= (and b!99848 res!50129) b!99844))

(assert (= (and b!99848 (not res!50130)) b!99835))

(assert (= (and b!99835 res!50128) b!99845))

(assert (= (and b!99848 res!50132) b!99843))

(assert (= (and b!99843 c!17076) b!99836))

(assert (= (and b!99843 (not c!17076)) b!99834))

(assert (= (and b!99836 res!50124) b!99849))

(assert (= (or b!99836 b!99834) bm!10279))

(assert (= (and b!99843 res!50131) b!99840))

(assert (= (and b!99840 c!17074) b!99851))

(assert (= (and b!99840 (not c!17074)) b!99837))

(assert (= (and b!99851 res!50126) b!99838))

(assert (= (or b!99851 b!99837) bm!10277))

(declare-fun b_lambda!4475 () Bool)

(assert (=> (not b_lambda!4475) (not b!99845)))

(assert (=> b!99845 t!5605))

(declare-fun b_and!6145 () Bool)

(assert (= b_and!6141 (and (=> t!5605 result!3311) b_and!6145)))

(assert (=> b!99845 t!5607))

(declare-fun b_and!6147 () Bool)

(assert (= b_and!6143 (and (=> t!5607 result!3313) b_and!6147)))

(declare-fun m!109983 () Bool)

(assert (=> b!99845 m!109983))

(declare-fun m!109985 () Bool)

(assert (=> b!99845 m!109985))

(declare-fun m!109987 () Bool)

(assert (=> b!99845 m!109987))

(assert (=> b!99845 m!109987))

(assert (=> b!99845 m!109355))

(declare-fun m!109989 () Bool)

(assert (=> b!99845 m!109989))

(assert (=> b!99845 m!109983))

(assert (=> b!99845 m!109355))

(declare-fun m!109991 () Bool)

(assert (=> b!99838 m!109991))

(declare-fun m!109993 () Bool)

(assert (=> bm!10280 m!109993))

(assert (=> b!99835 m!109983))

(assert (=> b!99835 m!109983))

(declare-fun m!109995 () Bool)

(assert (=> b!99835 m!109995))

(declare-fun m!109997 () Bool)

(assert (=> bm!10277 m!109997))

(assert (=> d!26849 m!109329))

(assert (=> b!99844 m!109983))

(assert (=> b!99844 m!109983))

(declare-fun m!109999 () Bool)

(assert (=> b!99844 m!109999))

(declare-fun m!110001 () Bool)

(assert (=> b!99849 m!110001))

(declare-fun m!110003 () Bool)

(assert (=> b!99854 m!110003))

(declare-fun m!110005 () Bool)

(assert (=> bm!10279 m!110005))

(assert (=> b!99853 m!109983))

(assert (=> b!99853 m!109983))

(assert (=> b!99853 m!109999))

(declare-fun m!110007 () Bool)

(assert (=> b!99841 m!110007))

(declare-fun m!110009 () Bool)

(assert (=> b!99841 m!110009))

(declare-fun m!110011 () Bool)

(assert (=> b!99841 m!110011))

(declare-fun m!110013 () Bool)

(assert (=> b!99841 m!110013))

(declare-fun m!110015 () Bool)

(assert (=> b!99841 m!110015))

(assert (=> b!99841 m!110013))

(declare-fun m!110017 () Bool)

(assert (=> b!99841 m!110017))

(declare-fun m!110019 () Bool)

(assert (=> b!99841 m!110019))

(declare-fun m!110021 () Bool)

(assert (=> b!99841 m!110021))

(assert (=> b!99841 m!109983))

(declare-fun m!110023 () Bool)

(assert (=> b!99841 m!110023))

(declare-fun m!110025 () Bool)

(assert (=> b!99841 m!110025))

(assert (=> b!99841 m!110015))

(declare-fun m!110027 () Bool)

(assert (=> b!99841 m!110027))

(assert (=> b!99841 m!110007))

(declare-fun m!110029 () Bool)

(assert (=> b!99841 m!110029))

(declare-fun m!110031 () Bool)

(assert (=> b!99841 m!110031))

(assert (=> b!99841 m!110029))

(declare-fun m!110033 () Bool)

(assert (=> b!99841 m!110033))

(assert (=> b!99841 m!109993))

(declare-fun m!110035 () Bool)

(assert (=> b!99841 m!110035))

(declare-fun m!110037 () Bool)

(assert (=> bm!10276 m!110037))

(assert (=> d!26711 d!26849))

(assert (=> d!26711 d!26707))

(declare-fun d!26851 () Bool)

(declare-fun res!50133 () Bool)

(declare-fun e!65053 () Bool)

(assert (=> d!26851 (=> res!50133 e!65053)))

(assert (=> d!26851 (= res!50133 (= (select (arr!2020 lt!50152) #b00000000000000000000000000000000) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!26851 (= (arrayContainsKey!0 lt!50152 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000) e!65053)))

(declare-fun b!99855 () Bool)

(declare-fun e!65054 () Bool)

(assert (=> b!99855 (= e!65053 e!65054)))

(declare-fun res!50134 () Bool)

(assert (=> b!99855 (=> (not res!50134) (not e!65054))))

(assert (=> b!99855 (= res!50134 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 lt!50152)))))

(declare-fun b!99856 () Bool)

(assert (=> b!99856 (= e!65054 (arrayContainsKey!0 lt!50152 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26851 (not res!50133)) b!99855))

(assert (= (and b!99855 res!50134) b!99856))

(declare-fun m!110039 () Bool)

(assert (=> d!26851 m!110039))

(assert (=> b!99856 m!109089))

(declare-fun m!110041 () Bool)

(assert (=> b!99856 m!110041))

(assert (=> d!26711 d!26851))

(declare-fun d!26853 () Bool)

(assert (=> d!26853 (arrayContainsKey!0 lt!50152 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!50421 () Unit!3031)

(declare-fun choose!13 (array!4254 (_ BitVec 64) (_ BitVec 32)) Unit!3031)

(assert (=> d!26853 (= lt!50421 (choose!13 lt!50152 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043))))))

(assert (=> d!26853 (bvsge (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000000)))

(assert (=> d!26853 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!50152 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043))) lt!50421)))

(declare-fun bs!4119 () Bool)

(assert (= bs!4119 d!26853))

(assert (=> bs!4119 m!109089))

(assert (=> bs!4119 m!109443))

(assert (=> bs!4119 m!109089))

(declare-fun m!110043 () Bool)

(assert (=> bs!4119 m!110043))

(assert (=> d!26711 d!26853))

(declare-fun d!26855 () Bool)

(declare-fun e!65057 () Bool)

(assert (=> d!26855 e!65057))

(declare-fun res!50137 () Bool)

(assert (=> d!26855 (=> (not res!50137) (not e!65057))))

(assert (=> d!26855 (= res!50137 (and (bvsge (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000000) (bvslt (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (size!2271 (_keys!4196 newMap!16))) (bvslt (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (size!2272 (_values!2485 newMap!16)))))))

(declare-fun lt!50424 () Unit!3031)

(declare-fun choose!619 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 32) (_ BitVec 64) V!3163 Int) Unit!3031)

(assert (=> d!26855 (= lt!50424 (choose!619 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26855 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26855 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!26 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)) lt!50424)))

(declare-fun b!99859 () Bool)

(assert (=> b!99859 (= e!65057 (= (+!139 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))))

(assert (= (and d!26855 res!50137) b!99859))

(assert (=> d!26855 m!109089))

(assert (=> d!26855 m!109123))

(declare-fun m!110045 () Bool)

(assert (=> d!26855 m!110045))

(assert (=> d!26855 m!109329))

(assert (=> b!99859 m!109199))

(assert (=> b!99859 m!109337))

(assert (=> b!99859 m!109427))

(assert (=> b!99859 m!109199))

(assert (=> b!99859 m!109431))

(assert (=> b!99859 m!109423))

(assert (=> d!26711 d!26855))

(declare-fun d!26857 () Bool)

(declare-fun e!65058 () Bool)

(assert (=> d!26857 e!65058))

(declare-fun res!50138 () Bool)

(assert (=> d!26857 (=> (not res!50138) (not e!65058))))

(assert (=> d!26857 (= res!50138 (and (bvsge (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000000) (bvslt (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (size!2271 lt!50151))))))

(declare-fun lt!50425 () Unit!3031)

(assert (=> d!26857 (= lt!50425 (choose!610 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (defaultEntry!2502 newMap!16)))))

(assert (=> d!26857 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26857 (= (lemmaValidKeyInArrayIsInListMap!100 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (defaultEntry!2502 newMap!16)) lt!50425)))

(declare-fun b!99860 () Bool)

(assert (=> b!99860 (= e!65058 (contains!810 (getCurrentListMap!474 lt!50151 lt!50177 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2020 lt!50151) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)))))))

(assert (= (and d!26857 res!50138) b!99860))

(declare-fun m!110047 () Bool)

(assert (=> d!26857 m!110047))

(assert (=> d!26857 m!109329))

(assert (=> b!99860 m!109437))

(declare-fun m!110049 () Bool)

(assert (=> b!99860 m!110049))

(assert (=> b!99860 m!109437))

(assert (=> b!99860 m!110049))

(declare-fun m!110051 () Bool)

(assert (=> b!99860 m!110051))

(assert (=> d!26711 d!26857))

(declare-fun d!26859 () Bool)

(declare-fun e!65061 () Bool)

(assert (=> d!26859 e!65061))

(declare-fun res!50141 () Bool)

(assert (=> d!26859 (=> (not res!50141) (not e!65061))))

(assert (=> d!26859 (= res!50141 (and (bvsge (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000000) (bvslt (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (size!2271 (_keys!4196 newMap!16)))))))

(declare-fun lt!50428 () Unit!3031)

(declare-fun choose!41 (array!4254 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1616) Unit!3031)

(assert (=> d!26859 (= lt!50428 (choose!41 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) lt!50150 lt!50173))))

(assert (=> d!26859 (bvslt (size!2271 (_keys!4196 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!26859 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) lt!50150 lt!50173) lt!50428)))

(declare-fun b!99863 () Bool)

(assert (=> b!99863 (= e!65061 (arrayNoDuplicates!0 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) lt!50150 lt!50173))))

(assert (= (and d!26859 res!50141) b!99863))

(assert (=> d!26859 m!109089))

(declare-fun m!110053 () Bool)

(assert (=> d!26859 m!110053))

(assert (=> b!99863 m!109427))

(assert (=> b!99863 m!109417))

(assert (=> d!26711 d!26859))

(declare-fun d!26861 () Bool)

(declare-fun e!65062 () Bool)

(assert (=> d!26861 e!65062))

(declare-fun res!50142 () Bool)

(assert (=> d!26861 (=> (not res!50142) (not e!65062))))

(declare-fun lt!50430 () ListLongMap!1557)

(assert (=> d!26861 (= res!50142 (contains!810 lt!50430 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50432 () List!1615)

(assert (=> d!26861 (= lt!50430 (ListLongMap!1558 lt!50432))))

(declare-fun lt!50431 () Unit!3031)

(declare-fun lt!50429 () Unit!3031)

(assert (=> d!26861 (= lt!50431 lt!50429)))

(assert (=> d!26861 (= (getValueByKey!150 lt!50432 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26861 (= lt!50429 (lemmaContainsTupThenGetReturnValue!68 lt!50432 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26861 (= lt!50432 (insertStrictlySorted!70 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26861 (= (+!139 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50430)))

(declare-fun b!99864 () Bool)

(declare-fun res!50143 () Bool)

(assert (=> b!99864 (=> (not res!50143) (not e!65062))))

(assert (=> b!99864 (= res!50143 (= (getValueByKey!150 (toList!794 lt!50430) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99865 () Bool)

(assert (=> b!99865 (= e!65062 (contains!812 (toList!794 lt!50430) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26861 res!50142) b!99864))

(assert (= (and b!99864 res!50143) b!99865))

(declare-fun m!110055 () Bool)

(assert (=> d!26861 m!110055))

(declare-fun m!110057 () Bool)

(assert (=> d!26861 m!110057))

(declare-fun m!110059 () Bool)

(assert (=> d!26861 m!110059))

(declare-fun m!110061 () Bool)

(assert (=> d!26861 m!110061))

(declare-fun m!110063 () Bool)

(assert (=> b!99864 m!110063))

(declare-fun m!110065 () Bool)

(assert (=> b!99865 m!110065))

(assert (=> d!26711 d!26861))

(declare-fun b!99866 () Bool)

(declare-fun e!65064 () (_ BitVec 32))

(declare-fun e!65063 () (_ BitVec 32))

(assert (=> b!99866 (= e!65064 e!65063)))

(declare-fun c!17079 () Bool)

(assert (=> b!99866 (= c!17079 (validKeyInArray!0 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!99867 () Bool)

(assert (=> b!99867 (= e!65064 #b00000000000000000000000000000000)))

(declare-fun d!26863 () Bool)

(declare-fun lt!50433 () (_ BitVec 32))

(assert (=> d!26863 (and (bvsge lt!50433 #b00000000000000000000000000000000) (bvsle lt!50433 (bvsub (size!2271 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!26863 (= lt!50433 e!65064)))

(declare-fun c!17080 () Bool)

(assert (=> d!26863 (= c!17080 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!26863 (and (bvsle #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2271 (_keys!4196 newMap!16)) (size!2271 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))))))

(assert (=> d!26863 (= (arrayCountValidKeys!0 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) lt!50433)))

(declare-fun b!99868 () Bool)

(declare-fun call!10284 () (_ BitVec 32))

(assert (=> b!99868 (= e!65063 call!10284)))

(declare-fun b!99869 () Bool)

(assert (=> b!99869 (= e!65063 (bvadd #b00000000000000000000000000000001 call!10284))))

(declare-fun bm!10281 () Bool)

(assert (=> bm!10281 (= call!10284 (arrayCountValidKeys!0 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 (_keys!4196 newMap!16))))))

(assert (= (and d!26863 c!17080) b!99867))

(assert (= (and d!26863 (not c!17080)) b!99866))

(assert (= (and b!99866 c!17079) b!99869))

(assert (= (and b!99866 (not c!17079)) b!99868))

(assert (= (or b!99869 b!99868) bm!10281))

(assert (=> b!99866 m!109983))

(assert (=> b!99866 m!109983))

(assert (=> b!99866 m!109999))

(declare-fun m!110067 () Bool)

(assert (=> bm!10281 m!110067))

(assert (=> d!26711 d!26863))

(assert (=> d!26711 d!26709))

(declare-fun b!99870 () Bool)

(declare-fun e!65065 () Bool)

(declare-fun e!65066 () Bool)

(assert (=> b!99870 (= e!65065 e!65066)))

(declare-fun c!17081 () Bool)

(assert (=> b!99870 (= c!17081 (validKeyInArray!0 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun call!10285 () Bool)

(declare-fun bm!10282 () Bool)

(assert (=> bm!10282 (= call!10285 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (mask!6609 newMap!16)))))

(declare-fun b!99871 () Bool)

(declare-fun e!65067 () Bool)

(assert (=> b!99871 (= e!65066 e!65067)))

(declare-fun lt!50436 () (_ BitVec 64))

(assert (=> b!99871 (= lt!50436 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!50435 () Unit!3031)

(assert (=> b!99871 (= lt!50435 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) lt!50436 #b00000000000000000000000000000000))))

(assert (=> b!99871 (arrayContainsKey!0 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) lt!50436 #b00000000000000000000000000000000)))

(declare-fun lt!50434 () Unit!3031)

(assert (=> b!99871 (= lt!50434 lt!50435)))

(declare-fun res!50144 () Bool)

(assert (=> b!99871 (= res!50144 (= (seekEntryOrOpen!0 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) #b00000000000000000000000000000000) (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (mask!6609 newMap!16)) (Found!264 #b00000000000000000000000000000000)))))

(assert (=> b!99871 (=> (not res!50144) (not e!65067))))

(declare-fun d!26865 () Bool)

(declare-fun res!50145 () Bool)

(assert (=> d!26865 (=> res!50145 e!65065)))

(assert (=> d!26865 (= res!50145 (bvsge #b00000000000000000000000000000000 (size!2271 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))))))

(assert (=> d!26865 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (mask!6609 newMap!16)) e!65065)))

(declare-fun b!99872 () Bool)

(assert (=> b!99872 (= e!65067 call!10285)))

(declare-fun b!99873 () Bool)

(assert (=> b!99873 (= e!65066 call!10285)))

(assert (= (and d!26865 (not res!50145)) b!99870))

(assert (= (and b!99870 c!17081) b!99871))

(assert (= (and b!99870 (not c!17081)) b!99873))

(assert (= (and b!99871 res!50144) b!99872))

(assert (= (or b!99872 b!99873) bm!10282))

(assert (=> b!99870 m!109983))

(assert (=> b!99870 m!109983))

(assert (=> b!99870 m!109999))

(declare-fun m!110069 () Bool)

(assert (=> bm!10282 m!110069))

(assert (=> b!99871 m!109983))

(declare-fun m!110071 () Bool)

(assert (=> b!99871 m!110071))

(declare-fun m!110073 () Bool)

(assert (=> b!99871 m!110073))

(assert (=> b!99871 m!109983))

(declare-fun m!110075 () Bool)

(assert (=> b!99871 m!110075))

(assert (=> d!26711 d!26865))

(declare-fun d!26867 () Bool)

(declare-fun e!65070 () Bool)

(assert (=> d!26867 e!65070))

(declare-fun res!50148 () Bool)

(assert (=> d!26867 (=> (not res!50148) (not e!65070))))

(assert (=> d!26867 (= res!50148 (and (bvsge (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000000) (bvslt (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (size!2271 (_keys!4196 newMap!16)))))))

(declare-fun lt!50439 () Unit!3031)

(declare-fun choose!102 ((_ BitVec 64) array!4254 (_ BitVec 32) (_ BitVec 32)) Unit!3031)

(assert (=> d!26867 (= lt!50439 (choose!102 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (mask!6609 newMap!16)))))

(assert (=> d!26867 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26867 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (mask!6609 newMap!16)) lt!50439)))

(declare-fun b!99876 () Bool)

(assert (=> b!99876 (= e!65070 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (mask!6609 newMap!16)))))

(assert (= (and d!26867 res!50148) b!99876))

(assert (=> d!26867 m!109089))

(declare-fun m!110077 () Bool)

(assert (=> d!26867 m!110077))

(assert (=> d!26867 m!109329))

(assert (=> b!99876 m!109427))

(assert (=> b!99876 m!109447))

(assert (=> d!26711 d!26867))

(assert (=> d!26711 d!26669))

(assert (=> d!26711 d!26729))

(declare-fun b!99877 () Bool)

(declare-fun e!65072 () (_ BitVec 32))

(declare-fun e!65071 () (_ BitVec 32))

(assert (=> b!99877 (= e!65072 e!65071)))

(declare-fun c!17082 () Bool)

(assert (=> b!99877 (= c!17082 (validKeyInArray!0 (select (arr!2020 lt!50171) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)))))))

(declare-fun b!99878 () Bool)

(assert (=> b!99878 (= e!65072 #b00000000000000000000000000000000)))

(declare-fun d!26869 () Bool)

(declare-fun lt!50440 () (_ BitVec 32))

(assert (=> d!26869 (and (bvsge lt!50440 #b00000000000000000000000000000000) (bvsle lt!50440 (bvsub (size!2271 lt!50171) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)))))))

(assert (=> d!26869 (= lt!50440 e!65072)))

(declare-fun c!17083 () Bool)

(assert (=> d!26869 (= c!17083 (bvsge (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (bvadd (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000001)))))

(assert (=> d!26869 (and (bvsle (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (bvadd (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000001)) (bvsge (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000001) (size!2271 lt!50171)))))

(assert (=> d!26869 (= (arrayCountValidKeys!0 lt!50171 (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (bvadd (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000001)) lt!50440)))

(declare-fun b!99879 () Bool)

(declare-fun call!10286 () (_ BitVec 32))

(assert (=> b!99879 (= e!65071 call!10286)))

(declare-fun b!99880 () Bool)

(assert (=> b!99880 (= e!65071 (bvadd #b00000000000000000000000000000001 call!10286))))

(declare-fun bm!10283 () Bool)

(assert (=> bm!10283 (= call!10286 (arrayCountValidKeys!0 lt!50171 (bvadd (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000001) (bvadd (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000001)))))

(assert (= (and d!26869 c!17083) b!99878))

(assert (= (and d!26869 (not c!17083)) b!99877))

(assert (= (and b!99877 c!17082) b!99880))

(assert (= (and b!99877 (not c!17082)) b!99879))

(assert (= (or b!99880 b!99879) bm!10283))

(assert (=> b!99877 m!109971))

(assert (=> b!99877 m!109971))

(assert (=> b!99877 m!109973))

(declare-fun m!110079 () Bool)

(assert (=> bm!10283 m!110079))

(assert (=> d!26711 d!26869))

(declare-fun b!99881 () Bool)

(declare-fun e!65076 () Bool)

(declare-fun e!65073 () Bool)

(assert (=> b!99881 (= e!65076 e!65073)))

(declare-fun c!17084 () Bool)

(assert (=> b!99881 (= c!17084 (validKeyInArray!0 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) lt!50150)))))

(declare-fun b!99882 () Bool)

(declare-fun e!65074 () Bool)

(assert (=> b!99882 (= e!65074 (contains!811 lt!50173 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) lt!50150)))))

(declare-fun bm!10284 () Bool)

(declare-fun call!10287 () Bool)

(assert (=> bm!10284 (= call!10287 (arrayNoDuplicates!0 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) (bvadd lt!50150 #b00000000000000000000000000000001) (ite c!17084 (Cons!1612 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) lt!50150) lt!50173) lt!50173)))))

(declare-fun b!99883 () Bool)

(declare-fun e!65075 () Bool)

(assert (=> b!99883 (= e!65075 e!65076)))

(declare-fun res!50150 () Bool)

(assert (=> b!99883 (=> (not res!50150) (not e!65076))))

(assert (=> b!99883 (= res!50150 (not e!65074))))

(declare-fun res!50149 () Bool)

(assert (=> b!99883 (=> (not res!50149) (not e!65074))))

(assert (=> b!99883 (= res!50149 (validKeyInArray!0 (select (arr!2020 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16)))) lt!50150)))))

(declare-fun b!99884 () Bool)

(assert (=> b!99884 (= e!65073 call!10287)))

(declare-fun d!26871 () Bool)

(declare-fun res!50151 () Bool)

(assert (=> d!26871 (=> res!50151 e!65075)))

(assert (=> d!26871 (= res!50151 (bvsge lt!50150 (size!2271 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))))))))

(assert (=> d!26871 (= (arrayNoDuplicates!0 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) lt!50150 lt!50173) e!65075)))

(declare-fun b!99885 () Bool)

(assert (=> b!99885 (= e!65073 call!10287)))

(assert (= (and d!26871 (not res!50151)) b!99883))

(assert (= (and b!99883 res!50149) b!99882))

(assert (= (and b!99883 res!50150) b!99881))

(assert (= (and b!99881 c!17084) b!99885))

(assert (= (and b!99881 (not c!17084)) b!99884))

(assert (= (or b!99885 b!99884) bm!10284))

(declare-fun m!110081 () Bool)

(assert (=> b!99881 m!110081))

(assert (=> b!99881 m!110081))

(declare-fun m!110083 () Bool)

(assert (=> b!99881 m!110083))

(assert (=> b!99882 m!110081))

(assert (=> b!99882 m!110081))

(declare-fun m!110085 () Bool)

(assert (=> b!99882 m!110085))

(assert (=> bm!10284 m!110081))

(declare-fun m!110087 () Bool)

(assert (=> bm!10284 m!110087))

(assert (=> b!99883 m!110081))

(assert (=> b!99883 m!110081))

(assert (=> b!99883 m!110083))

(assert (=> d!26711 d!26871))

(declare-fun b!99894 () Bool)

(declare-fun res!50161 () Bool)

(declare-fun e!65081 () Bool)

(assert (=> b!99894 (=> (not res!50161) (not e!65081))))

(assert (=> b!99894 (= res!50161 (not (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043))))))))

(declare-fun b!99895 () Bool)

(declare-fun res!50163 () Bool)

(assert (=> b!99895 (=> (not res!50163) (not e!65081))))

(assert (=> b!99895 (= res!50163 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun d!26873 () Bool)

(declare-fun e!65082 () Bool)

(assert (=> d!26873 e!65082))

(declare-fun res!50162 () Bool)

(assert (=> d!26873 (=> (not res!50162) (not e!65082))))

(assert (=> d!26873 (= res!50162 (and (bvsge (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000000) (bvslt (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (size!2271 (_keys!4196 newMap!16)))))))

(declare-fun lt!50443 () Unit!3031)

(declare-fun choose!1 (array!4254 (_ BitVec 32) (_ BitVec 64)) Unit!3031)

(assert (=> d!26873 (= lt!50443 (choose!1 (_keys!4196 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!26873 e!65081))

(declare-fun res!50160 () Bool)

(assert (=> d!26873 (=> (not res!50160) (not e!65081))))

(assert (=> d!26873 (= res!50160 (and (bvsge (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) #b00000000000000000000000000000000) (bvslt (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (size!2271 (_keys!4196 newMap!16)))))))

(assert (=> d!26873 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4196 newMap!16) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) lt!50443)))

(declare-fun b!99896 () Bool)

(assert (=> b!99896 (= e!65081 (bvslt (size!2271 (_keys!4196 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!99897 () Bool)

(assert (=> b!99897 (= e!65082 (= (arrayCountValidKeys!0 (array!4255 (store (arr!2020 (_keys!4196 newMap!16)) (ite c!16962 (index!3203 lt!50043) (index!3200 lt!50043)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (size!2271 (_keys!4196 newMap!16))) #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4196 newMap!16) #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) #b00000000000000000000000000000001)))))

(assert (= (and d!26873 res!50160) b!99894))

(assert (= (and b!99894 res!50161) b!99895))

(assert (= (and b!99895 res!50163) b!99896))

(assert (= (and d!26873 res!50162) b!99897))

(declare-fun m!110089 () Bool)

(assert (=> b!99894 m!110089))

(assert (=> b!99894 m!110089))

(declare-fun m!110091 () Bool)

(assert (=> b!99894 m!110091))

(assert (=> b!99895 m!109089))

(assert (=> b!99895 m!109193))

(assert (=> d!26873 m!109089))

(declare-fun m!110093 () Bool)

(assert (=> d!26873 m!110093))

(assert (=> b!99897 m!109427))

(assert (=> b!99897 m!109415))

(assert (=> b!99897 m!109175))

(assert (=> d!26711 d!26873))

(assert (=> d!26711 d!26715))

(declare-fun d!26875 () Bool)

(declare-fun e!65083 () Bool)

(assert (=> d!26875 e!65083))

(declare-fun res!50164 () Bool)

(assert (=> d!26875 (=> res!50164 e!65083)))

(declare-fun lt!50445 () Bool)

(assert (=> d!26875 (= res!50164 (not lt!50445))))

(declare-fun lt!50447 () Bool)

(assert (=> d!26875 (= lt!50445 lt!50447)))

(declare-fun lt!50444 () Unit!3031)

(declare-fun e!65084 () Unit!3031)

(assert (=> d!26875 (= lt!50444 e!65084)))

(declare-fun c!17085 () Bool)

(assert (=> d!26875 (= c!17085 lt!50447)))

(assert (=> d!26875 (= lt!50447 (containsKey!154 (toList!794 lt!50294) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26875 (= (contains!810 lt!50294 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) lt!50445)))

(declare-fun b!99898 () Bool)

(declare-fun lt!50446 () Unit!3031)

(assert (=> b!99898 (= e!65084 lt!50446)))

(assert (=> b!99898 (= lt!50446 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50294) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99898 (isDefined!104 (getValueByKey!150 (toList!794 lt!50294) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99899 () Bool)

(declare-fun Unit!3056 () Unit!3031)

(assert (=> b!99899 (= e!65084 Unit!3056)))

(declare-fun b!99900 () Bool)

(assert (=> b!99900 (= e!65083 (isDefined!104 (getValueByKey!150 (toList!794 lt!50294) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26875 c!17085) b!99898))

(assert (= (and d!26875 (not c!17085)) b!99899))

(assert (= (and d!26875 (not res!50164)) b!99900))

(assert (=> d!26875 m!109349))

(declare-fun m!110095 () Bool)

(assert (=> d!26875 m!110095))

(assert (=> b!99898 m!109349))

(declare-fun m!110097 () Bool)

(assert (=> b!99898 m!110097))

(assert (=> b!99898 m!109349))

(declare-fun m!110099 () Bool)

(assert (=> b!99898 m!110099))

(assert (=> b!99898 m!110099))

(declare-fun m!110101 () Bool)

(assert (=> b!99898 m!110101))

(assert (=> b!99900 m!109349))

(assert (=> b!99900 m!110099))

(assert (=> b!99900 m!110099))

(assert (=> b!99900 m!110101))

(assert (=> b!99689 d!26875))

(declare-fun d!26877 () Bool)

(assert (=> d!26877 (= (get!1307 (getValueByKey!150 (toList!794 lt!49953) lt!49952)) (v!2821 (getValueByKey!150 (toList!794 lt!49953) lt!49952)))))

(assert (=> d!26775 d!26877))

(declare-fun b!99902 () Bool)

(declare-fun e!65085 () Option!156)

(declare-fun e!65086 () Option!156)

(assert (=> b!99902 (= e!65085 e!65086)))

(declare-fun c!17087 () Bool)

(assert (=> b!99902 (= c!17087 (and ((_ is Cons!1611) (toList!794 lt!49953)) (not (= (_1!1193 (h!2206 (toList!794 lt!49953))) lt!49952))))))

(declare-fun d!26879 () Bool)

(declare-fun c!17086 () Bool)

(assert (=> d!26879 (= c!17086 (and ((_ is Cons!1611) (toList!794 lt!49953)) (= (_1!1193 (h!2206 (toList!794 lt!49953))) lt!49952)))))

(assert (=> d!26879 (= (getValueByKey!150 (toList!794 lt!49953) lt!49952) e!65085)))

(declare-fun b!99904 () Bool)

(assert (=> b!99904 (= e!65086 None!154)))

(declare-fun b!99901 () Bool)

(assert (=> b!99901 (= e!65085 (Some!155 (_2!1193 (h!2206 (toList!794 lt!49953)))))))

(declare-fun b!99903 () Bool)

(assert (=> b!99903 (= e!65086 (getValueByKey!150 (t!5597 (toList!794 lt!49953)) lt!49952))))

(assert (= (and d!26879 c!17086) b!99901))

(assert (= (and d!26879 (not c!17086)) b!99902))

(assert (= (and b!99902 c!17087) b!99903))

(assert (= (and b!99902 (not c!17087)) b!99904))

(declare-fun m!110103 () Bool)

(assert (=> b!99903 m!110103))

(assert (=> d!26775 d!26879))

(declare-fun b!99905 () Bool)

(declare-fun e!65089 () Bool)

(assert (=> b!99905 (= e!65089 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99905 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!99906 () Bool)

(assert (=> b!99906 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (=> b!99906 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_values!2485 newMap!16))))))

(declare-fun e!65090 () Bool)

(declare-fun lt!50449 () ListLongMap!1557)

(assert (=> b!99906 (= e!65090 (= (apply!93 lt!50449 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!99907 () Bool)

(declare-fun lt!50452 () Unit!3031)

(declare-fun lt!50451 () Unit!3031)

(assert (=> b!99907 (= lt!50452 lt!50451)))

(declare-fun lt!50450 () (_ BitVec 64))

(declare-fun lt!50453 () V!3163)

(declare-fun lt!50448 () ListLongMap!1557)

(declare-fun lt!50454 () (_ BitVec 64))

(assert (=> b!99907 (not (contains!810 (+!139 lt!50448 (tuple2!2367 lt!50454 lt!50453)) lt!50450))))

(assert (=> b!99907 (= lt!50451 (addStillNotContains!43 lt!50448 lt!50454 lt!50453 lt!50450))))

(assert (=> b!99907 (= lt!50450 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!99907 (= lt!50453 (get!1304 (select (arr!2021 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!99907 (= lt!50454 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!10288 () ListLongMap!1557)

(assert (=> b!99907 (= lt!50448 call!10288)))

(declare-fun e!65088 () ListLongMap!1557)

(assert (=> b!99907 (= e!65088 (+!139 call!10288 (tuple2!2367 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (get!1304 (select (arr!2021 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!99908 () Bool)

(declare-fun e!65092 () Bool)

(assert (=> b!99908 (= e!65092 (isEmpty!364 lt!50449))))

(declare-fun b!99909 () Bool)

(declare-fun e!65091 () Bool)

(assert (=> b!99909 (= e!65091 e!65090)))

(assert (=> b!99909 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun res!50167 () Bool)

(assert (=> b!99909 (= res!50167 (contains!810 lt!50449 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99909 (=> (not res!50167) (not e!65090))))

(declare-fun b!99910 () Bool)

(declare-fun e!65087 () ListLongMap!1557)

(assert (=> b!99910 (= e!65087 (ListLongMap!1558 Nil!1612))))

(declare-fun b!99911 () Bool)

(assert (=> b!99911 (= e!65087 e!65088)))

(declare-fun c!17089 () Bool)

(assert (=> b!99911 (= c!17089 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!26881 () Bool)

(declare-fun e!65093 () Bool)

(assert (=> d!26881 e!65093))

(declare-fun res!50166 () Bool)

(assert (=> d!26881 (=> (not res!50166) (not e!65093))))

(assert (=> d!26881 (= res!50166 (not (contains!810 lt!50449 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26881 (= lt!50449 e!65087)))

(declare-fun c!17088 () Bool)

(assert (=> d!26881 (= c!17088 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!26881 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26881 (= (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50449)))

(declare-fun b!99912 () Bool)

(assert (=> b!99912 (= e!65093 e!65091)))

(declare-fun c!17090 () Bool)

(assert (=> b!99912 (= c!17090 e!65089)))

(declare-fun res!50168 () Bool)

(assert (=> b!99912 (=> (not res!50168) (not e!65089))))

(assert (=> b!99912 (= res!50168 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun bm!10285 () Bool)

(assert (=> bm!10285 (= call!10288 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16)))))

(declare-fun b!99913 () Bool)

(declare-fun res!50165 () Bool)

(assert (=> b!99913 (=> (not res!50165) (not e!65093))))

(assert (=> b!99913 (= res!50165 (not (contains!810 lt!50449 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!99914 () Bool)

(assert (=> b!99914 (= e!65092 (= lt!50449 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16))))))

(declare-fun b!99915 () Bool)

(assert (=> b!99915 (= e!65088 call!10288)))

(declare-fun b!99916 () Bool)

(assert (=> b!99916 (= e!65091 e!65092)))

(declare-fun c!17091 () Bool)

(assert (=> b!99916 (= c!17091 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (= (and d!26881 c!17088) b!99910))

(assert (= (and d!26881 (not c!17088)) b!99911))

(assert (= (and b!99911 c!17089) b!99907))

(assert (= (and b!99911 (not c!17089)) b!99915))

(assert (= (or b!99907 b!99915) bm!10285))

(assert (= (and d!26881 res!50166) b!99913))

(assert (= (and b!99913 res!50165) b!99912))

(assert (= (and b!99912 res!50168) b!99905))

(assert (= (and b!99912 c!17090) b!99909))

(assert (= (and b!99912 (not c!17090)) b!99916))

(assert (= (and b!99909 res!50167) b!99906))

(assert (= (and b!99916 c!17091) b!99914))

(assert (= (and b!99916 (not c!17091)) b!99908))

(declare-fun b_lambda!4477 () Bool)

(assert (=> (not b_lambda!4477) (not b!99906)))

(assert (=> b!99906 t!5605))

(declare-fun b_and!6149 () Bool)

(assert (= b_and!6145 (and (=> t!5605 result!3311) b_and!6149)))

(assert (=> b!99906 t!5607))

(declare-fun b_and!6151 () Bool)

(assert (= b_and!6147 (and (=> t!5607 result!3313) b_and!6151)))

(declare-fun b_lambda!4479 () Bool)

(assert (=> (not b_lambda!4479) (not b!99907)))

(assert (=> b!99907 t!5605))

(declare-fun b_and!6153 () Bool)

(assert (= b_and!6149 (and (=> t!5605 result!3311) b_and!6153)))

(assert (=> b!99907 t!5607))

(declare-fun b_and!6155 () Bool)

(assert (= b_and!6151 (and (=> t!5607 result!3313) b_and!6155)))

(assert (=> b!99911 m!109349))

(assert (=> b!99911 m!109349))

(assert (=> b!99911 m!109367))

(assert (=> b!99909 m!109349))

(assert (=> b!99909 m!109349))

(declare-fun m!110105 () Bool)

(assert (=> b!99909 m!110105))

(declare-fun m!110107 () Bool)

(assert (=> b!99908 m!110107))

(assert (=> b!99905 m!109349))

(assert (=> b!99905 m!109349))

(assert (=> b!99905 m!109367))

(declare-fun m!110109 () Bool)

(assert (=> bm!10285 m!110109))

(declare-fun m!110111 () Bool)

(assert (=> b!99913 m!110111))

(assert (=> b!99907 m!109355))

(declare-fun m!110113 () Bool)

(assert (=> b!99907 m!110113))

(assert (=> b!99907 m!109353))

(declare-fun m!110115 () Bool)

(assert (=> b!99907 m!110115))

(declare-fun m!110117 () Bool)

(assert (=> b!99907 m!110117))

(declare-fun m!110119 () Bool)

(assert (=> b!99907 m!110119))

(assert (=> b!99907 m!109349))

(assert (=> b!99907 m!109353))

(assert (=> b!99907 m!109355))

(assert (=> b!99907 m!109357))

(assert (=> b!99907 m!110115))

(declare-fun m!110121 () Bool)

(assert (=> d!26881 m!110121))

(assert (=> d!26881 m!109329))

(assert (=> b!99914 m!110109))

(assert (=> b!99906 m!109355))

(assert (=> b!99906 m!109353))

(assert (=> b!99906 m!109355))

(assert (=> b!99906 m!109357))

(assert (=> b!99906 m!109353))

(assert (=> b!99906 m!109349))

(declare-fun m!110123 () Bool)

(assert (=> b!99906 m!110123))

(assert (=> b!99906 m!109349))

(assert (=> bm!10222 d!26881))

(declare-fun d!26883 () Bool)

(declare-fun e!65094 () Bool)

(assert (=> d!26883 e!65094))

(declare-fun res!50169 () Bool)

(assert (=> d!26883 (=> res!50169 e!65094)))

(declare-fun lt!50456 () Bool)

(assert (=> d!26883 (= res!50169 (not lt!50456))))

(declare-fun lt!50458 () Bool)

(assert (=> d!26883 (= lt!50456 lt!50458)))

(declare-fun lt!50455 () Unit!3031)

(declare-fun e!65095 () Unit!3031)

(assert (=> d!26883 (= lt!50455 e!65095)))

(declare-fun c!17092 () Bool)

(assert (=> d!26883 (= c!17092 lt!50458)))

(assert (=> d!26883 (= lt!50458 (containsKey!154 (toList!794 lt!50277) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!26883 (= (contains!810 lt!50277 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) lt!50456)))

(declare-fun b!99917 () Bool)

(declare-fun lt!50457 () Unit!3031)

(assert (=> b!99917 (= e!65095 lt!50457)))

(assert (=> b!99917 (= lt!50457 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50277) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> b!99917 (isDefined!104 (getValueByKey!150 (toList!794 lt!50277) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!99918 () Bool)

(declare-fun Unit!3057 () Unit!3031)

(assert (=> b!99918 (= e!65095 Unit!3057)))

(declare-fun b!99919 () Bool)

(assert (=> b!99919 (= e!65094 (isDefined!104 (getValueByKey!150 (toList!794 lt!50277) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(assert (= (and d!26883 c!17092) b!99917))

(assert (= (and d!26883 (not c!17092)) b!99918))

(assert (= (and d!26883 (not res!50169)) b!99919))

(declare-fun m!110125 () Bool)

(assert (=> d!26883 m!110125))

(declare-fun m!110127 () Bool)

(assert (=> b!99917 m!110127))

(assert (=> b!99917 m!109675))

(assert (=> b!99917 m!109675))

(declare-fun m!110129 () Bool)

(assert (=> b!99917 m!110129))

(assert (=> b!99919 m!109675))

(assert (=> b!99919 m!109675))

(assert (=> b!99919 m!110129))

(assert (=> d!26789 d!26883))

(declare-fun b!99921 () Bool)

(declare-fun e!65096 () Option!156)

(declare-fun e!65097 () Option!156)

(assert (=> b!99921 (= e!65096 e!65097)))

(declare-fun c!17094 () Bool)

(assert (=> b!99921 (= c!17094 (and ((_ is Cons!1611) lt!50279) (not (= (_1!1193 (h!2206 lt!50279)) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))))

(declare-fun d!26885 () Bool)

(declare-fun c!17093 () Bool)

(assert (=> d!26885 (= c!17093 (and ((_ is Cons!1611) lt!50279) (= (_1!1193 (h!2206 lt!50279)) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(assert (=> d!26885 (= (getValueByKey!150 lt!50279 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) e!65096)))

(declare-fun b!99923 () Bool)

(assert (=> b!99923 (= e!65097 None!154)))

(declare-fun b!99920 () Bool)

(assert (=> b!99920 (= e!65096 (Some!155 (_2!1193 (h!2206 lt!50279))))))

(declare-fun b!99922 () Bool)

(assert (=> b!99922 (= e!65097 (getValueByKey!150 (t!5597 lt!50279) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!26885 c!17093) b!99920))

(assert (= (and d!26885 (not c!17093)) b!99921))

(assert (= (and b!99921 c!17094) b!99922))

(assert (= (and b!99921 (not c!17094)) b!99923))

(declare-fun m!110131 () Bool)

(assert (=> b!99922 m!110131))

(assert (=> d!26789 d!26885))

(declare-fun d!26887 () Bool)

(assert (=> d!26887 (= (getValueByKey!150 lt!50279 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) (Some!155 (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun lt!50461 () Unit!3031)

(declare-fun choose!620 (List!1615 (_ BitVec 64) V!3163) Unit!3031)

(assert (=> d!26887 (= lt!50461 (choose!620 lt!50279 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun e!65100 () Bool)

(assert (=> d!26887 e!65100))

(declare-fun res!50174 () Bool)

(assert (=> d!26887 (=> (not res!50174) (not e!65100))))

(assert (=> d!26887 (= res!50174 (isStrictlySorted!300 lt!50279))))

(assert (=> d!26887 (= (lemmaContainsTupThenGetReturnValue!68 lt!50279 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) lt!50461)))

(declare-fun b!99928 () Bool)

(declare-fun res!50175 () Bool)

(assert (=> b!99928 (=> (not res!50175) (not e!65100))))

(assert (=> b!99928 (= res!50175 (containsKey!154 lt!50279 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!99929 () Bool)

(assert (=> b!99929 (= e!65100 (contains!812 lt!50279 (tuple2!2367 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(assert (= (and d!26887 res!50174) b!99928))

(assert (= (and b!99928 res!50175) b!99929))

(assert (=> d!26887 m!109669))

(declare-fun m!110133 () Bool)

(assert (=> d!26887 m!110133))

(declare-fun m!110135 () Bool)

(assert (=> d!26887 m!110135))

(declare-fun m!110137 () Bool)

(assert (=> b!99928 m!110137))

(declare-fun m!110139 () Bool)

(assert (=> b!99929 m!110139))

(assert (=> d!26789 d!26887))

(declare-fun b!99950 () Bool)

(declare-fun e!65112 () List!1615)

(declare-fun e!65114 () List!1615)

(assert (=> b!99950 (= e!65112 e!65114)))

(declare-fun c!17106 () Bool)

(assert (=> b!99950 (= c!17106 (and ((_ is Cons!1611) (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141)))) (= (_1!1193 (h!2206 (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141))))) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun b!99951 () Bool)

(declare-fun e!65113 () List!1615)

(assert (=> b!99951 (= e!65113 (insertStrictlySorted!70 (t!5597 (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141)))) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!99952 () Bool)

(declare-fun call!10295 () List!1615)

(assert (=> b!99952 (= e!65114 call!10295)))

(declare-fun call!10297 () List!1615)

(declare-fun bm!10293 () Bool)

(declare-fun c!17105 () Bool)

(declare-fun $colon$colon!78 (List!1615 tuple2!2366) List!1615)

(assert (=> bm!10293 (= call!10297 ($colon$colon!78 e!65113 (ite c!17105 (h!2206 (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141)))) (tuple2!2367 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))))

(declare-fun c!17103 () Bool)

(assert (=> bm!10293 (= c!17103 c!17105)))

(declare-fun b!99953 () Bool)

(declare-fun e!65111 () List!1615)

(declare-fun call!10296 () List!1615)

(assert (=> b!99953 (= e!65111 call!10296)))

(declare-fun lt!50464 () List!1615)

(declare-fun b!99954 () Bool)

(declare-fun e!65115 () Bool)

(assert (=> b!99954 (= e!65115 (contains!812 lt!50464 (tuple2!2367 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun b!99955 () Bool)

(declare-fun res!50181 () Bool)

(assert (=> b!99955 (=> (not res!50181) (not e!65115))))

(assert (=> b!99955 (= res!50181 (containsKey!154 lt!50464 (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!99956 () Bool)

(declare-fun c!17104 () Bool)

(assert (=> b!99956 (= c!17104 (and ((_ is Cons!1611) (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141)))) (bvsgt (_1!1193 (h!2206 (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141))))) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(assert (=> b!99956 (= e!65114 e!65111)))

(declare-fun b!99957 () Bool)

(assert (=> b!99957 (= e!65111 call!10296)))

(declare-fun b!99958 () Bool)

(assert (=> b!99958 (= e!65112 call!10297)))

(declare-fun b!99959 () Bool)

(assert (=> b!99959 (= e!65113 (ite c!17106 (t!5597 (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141)))) (ite c!17104 (Cons!1611 (h!2206 (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141)))) (t!5597 (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141))))) Nil!1612)))))

(declare-fun bm!10294 () Bool)

(assert (=> bm!10294 (= call!10295 call!10297)))

(declare-fun d!26889 () Bool)

(assert (=> d!26889 e!65115))

(declare-fun res!50180 () Bool)

(assert (=> d!26889 (=> (not res!50180) (not e!65115))))

(assert (=> d!26889 (= res!50180 (isStrictlySorted!300 lt!50464))))

(assert (=> d!26889 (= lt!50464 e!65112)))

(assert (=> d!26889 (= c!17105 (and ((_ is Cons!1611) (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141)))) (bvslt (_1!1193 (h!2206 (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141))))) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(assert (=> d!26889 (isStrictlySorted!300 (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141))))))

(assert (=> d!26889 (= (insertStrictlySorted!70 (toList!794 (ite c!16927 call!10142 (ite c!16930 call!10140 call!10141))) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (_2!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) lt!50464)))

(declare-fun bm!10292 () Bool)

(assert (=> bm!10292 (= call!10296 call!10295)))

(assert (= (and d!26889 c!17105) b!99958))

(assert (= (and d!26889 (not c!17105)) b!99950))

(assert (= (and b!99950 c!17106) b!99952))

(assert (= (and b!99950 (not c!17106)) b!99956))

(assert (= (and b!99956 c!17104) b!99953))

(assert (= (and b!99956 (not c!17104)) b!99957))

(assert (= (or b!99953 b!99957) bm!10292))

(assert (= (or b!99952 bm!10292) bm!10294))

(assert (= (or b!99958 bm!10294) bm!10293))

(assert (= (and bm!10293 c!17103) b!99951))

(assert (= (and bm!10293 (not c!17103)) b!99959))

(assert (= (and d!26889 res!50180) b!99955))

(assert (= (and b!99955 res!50181) b!99954))

(declare-fun m!110141 () Bool)

(assert (=> b!99955 m!110141))

(declare-fun m!110143 () Bool)

(assert (=> bm!10293 m!110143))

(declare-fun m!110145 () Bool)

(assert (=> b!99954 m!110145))

(declare-fun m!110147 () Bool)

(assert (=> b!99951 m!110147))

(declare-fun m!110149 () Bool)

(assert (=> d!26889 m!110149))

(declare-fun m!110151 () Bool)

(assert (=> d!26889 m!110151))

(assert (=> d!26789 d!26889))

(declare-fun d!26891 () Bool)

(declare-fun e!65116 () Bool)

(assert (=> d!26891 e!65116))

(declare-fun res!50182 () Bool)

(assert (=> d!26891 (=> res!50182 e!65116)))

(declare-fun lt!50466 () Bool)

(assert (=> d!26891 (= res!50182 (not lt!50466))))

(declare-fun lt!50468 () Bool)

(assert (=> d!26891 (= lt!50466 lt!50468)))

(declare-fun lt!50465 () Unit!3031)

(declare-fun e!65117 () Unit!3031)

(assert (=> d!26891 (= lt!50465 e!65117)))

(declare-fun c!17107 () Bool)

(assert (=> d!26891 (= c!17107 lt!50468)))

(assert (=> d!26891 (= lt!50468 (containsKey!154 (toList!794 lt!50344) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!26891 (= (contains!810 lt!50344 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) lt!50466)))

(declare-fun b!99960 () Bool)

(declare-fun lt!50467 () Unit!3031)

(assert (=> b!99960 (= e!65117 lt!50467)))

(assert (=> b!99960 (= lt!50467 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50344) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!99960 (isDefined!104 (getValueByKey!150 (toList!794 lt!50344) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99961 () Bool)

(declare-fun Unit!3058 () Unit!3031)

(assert (=> b!99961 (= e!65117 Unit!3058)))

(declare-fun b!99962 () Bool)

(assert (=> b!99962 (= e!65116 (isDefined!104 (getValueByKey!150 (toList!794 lt!50344) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!26891 c!17107) b!99960))

(assert (= (and d!26891 (not c!17107)) b!99961))

(assert (= (and d!26891 (not res!50182)) b!99962))

(assert (=> d!26891 m!109349))

(declare-fun m!110153 () Bool)

(assert (=> d!26891 m!110153))

(assert (=> b!99960 m!109349))

(declare-fun m!110155 () Bool)

(assert (=> b!99960 m!110155))

(assert (=> b!99960 m!109349))

(declare-fun m!110157 () Bool)

(assert (=> b!99960 m!110157))

(assert (=> b!99960 m!110157))

(declare-fun m!110159 () Bool)

(assert (=> b!99960 m!110159))

(assert (=> b!99962 m!109349))

(assert (=> b!99962 m!110157))

(assert (=> b!99962 m!110157))

(assert (=> b!99962 m!110159))

(assert (=> b!99770 d!26891))

(declare-fun d!26893 () Bool)

(assert (=> d!26893 (arrayContainsKey!0 (_keys!4196 newMap!16) lt!50288 #b00000000000000000000000000000000)))

(declare-fun lt!50469 () Unit!3031)

(assert (=> d!26893 (= lt!50469 (choose!13 (_keys!4196 newMap!16) lt!50288 #b00000000000000000000000000000000))))

(assert (=> d!26893 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!26893 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4196 newMap!16) lt!50288 #b00000000000000000000000000000000) lt!50469)))

(declare-fun bs!4120 () Bool)

(assert (= bs!4120 d!26893))

(assert (=> bs!4120 m!109685))

(declare-fun m!110161 () Bool)

(assert (=> bs!4120 m!110161))

(assert (=> b!99685 d!26893))

(declare-fun d!26895 () Bool)

(declare-fun res!50183 () Bool)

(declare-fun e!65118 () Bool)

(assert (=> d!26895 (=> res!50183 e!65118)))

(assert (=> d!26895 (= res!50183 (= (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) lt!50288))))

(assert (=> d!26895 (= (arrayContainsKey!0 (_keys!4196 newMap!16) lt!50288 #b00000000000000000000000000000000) e!65118)))

(declare-fun b!99963 () Bool)

(declare-fun e!65119 () Bool)

(assert (=> b!99963 (= e!65118 e!65119)))

(declare-fun res!50184 () Bool)

(assert (=> b!99963 (=> (not res!50184) (not e!65119))))

(assert (=> b!99963 (= res!50184 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 (_keys!4196 newMap!16))))))

(declare-fun b!99964 () Bool)

(assert (=> b!99964 (= e!65119 (arrayContainsKey!0 (_keys!4196 newMap!16) lt!50288 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!26895 (not res!50183)) b!99963))

(assert (= (and b!99963 res!50184) b!99964))

(assert (=> d!26895 m!109349))

(declare-fun m!110163 () Bool)

(assert (=> b!99964 m!110163))

(assert (=> b!99685 d!26895))

(declare-fun b!99965 () Bool)

(declare-fun c!17108 () Bool)

(declare-fun lt!50470 () (_ BitVec 64))

(assert (=> b!99965 (= c!17108 (= lt!50470 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!65122 () SeekEntryResult!264)

(declare-fun e!65121 () SeekEntryResult!264)

(assert (=> b!99965 (= e!65122 e!65121)))

(declare-fun b!99966 () Bool)

(declare-fun lt!50471 () SeekEntryResult!264)

(assert (=> b!99966 (= e!65121 (seekKeyOrZeroReturnVacant!0 (x!13114 lt!50471) (index!3202 lt!50471) (index!3202 lt!50471) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!99967 () Bool)

(assert (=> b!99967 (= e!65121 (MissingZero!264 (index!3202 lt!50471)))))

(declare-fun d!26897 () Bool)

(declare-fun lt!50472 () SeekEntryResult!264)

(assert (=> d!26897 (and (or ((_ is Undefined!264) lt!50472) (not ((_ is Found!264) lt!50472)) (and (bvsge (index!3201 lt!50472) #b00000000000000000000000000000000) (bvslt (index!3201 lt!50472) (size!2271 (_keys!4196 newMap!16))))) (or ((_ is Undefined!264) lt!50472) ((_ is Found!264) lt!50472) (not ((_ is MissingZero!264) lt!50472)) (and (bvsge (index!3200 lt!50472) #b00000000000000000000000000000000) (bvslt (index!3200 lt!50472) (size!2271 (_keys!4196 newMap!16))))) (or ((_ is Undefined!264) lt!50472) ((_ is Found!264) lt!50472) ((_ is MissingZero!264) lt!50472) (not ((_ is MissingVacant!264) lt!50472)) (and (bvsge (index!3203 lt!50472) #b00000000000000000000000000000000) (bvslt (index!3203 lt!50472) (size!2271 (_keys!4196 newMap!16))))) (or ((_ is Undefined!264) lt!50472) (ite ((_ is Found!264) lt!50472) (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50472)) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!264) lt!50472) (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3200 lt!50472)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!264) lt!50472) (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3203 lt!50472)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!65120 () SeekEntryResult!264)

(assert (=> d!26897 (= lt!50472 e!65120)))

(declare-fun c!17110 () Bool)

(assert (=> d!26897 (= c!17110 (and ((_ is Intermediate!264) lt!50471) (undefined!1076 lt!50471)))))

(assert (=> d!26897 (= lt!50471 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (mask!6609 newMap!16)) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(assert (=> d!26897 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26897 (= (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (_keys!4196 newMap!16) (mask!6609 newMap!16)) lt!50472)))

(declare-fun b!99968 () Bool)

(assert (=> b!99968 (= e!65120 Undefined!264)))

(declare-fun b!99969 () Bool)

(assert (=> b!99969 (= e!65120 e!65122)))

(assert (=> b!99969 (= lt!50470 (select (arr!2020 (_keys!4196 newMap!16)) (index!3202 lt!50471)))))

(declare-fun c!17109 () Bool)

(assert (=> b!99969 (= c!17109 (= lt!50470 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!99970 () Bool)

(assert (=> b!99970 (= e!65122 (Found!264 (index!3202 lt!50471)))))

(assert (= (and d!26897 c!17110) b!99968))

(assert (= (and d!26897 (not c!17110)) b!99969))

(assert (= (and b!99969 c!17109) b!99970))

(assert (= (and b!99969 (not c!17109)) b!99965))

(assert (= (and b!99965 c!17108) b!99967))

(assert (= (and b!99965 (not c!17108)) b!99966))

(assert (=> b!99966 m!109349))

(declare-fun m!110165 () Bool)

(assert (=> b!99966 m!110165))

(assert (=> d!26897 m!109349))

(declare-fun m!110167 () Bool)

(assert (=> d!26897 m!110167))

(assert (=> d!26897 m!109329))

(assert (=> d!26897 m!110167))

(assert (=> d!26897 m!109349))

(declare-fun m!110169 () Bool)

(assert (=> d!26897 m!110169))

(declare-fun m!110171 () Bool)

(assert (=> d!26897 m!110171))

(declare-fun m!110173 () Bool)

(assert (=> d!26897 m!110173))

(declare-fun m!110175 () Bool)

(assert (=> d!26897 m!110175))

(declare-fun m!110177 () Bool)

(assert (=> b!99969 m!110177))

(assert (=> b!99685 d!26897))

(declare-fun d!26899 () Bool)

(declare-fun e!65123 () Bool)

(assert (=> d!26899 e!65123))

(declare-fun res!50185 () Bool)

(assert (=> d!26899 (=> res!50185 e!65123)))

(declare-fun lt!50474 () Bool)

(assert (=> d!26899 (= res!50185 (not lt!50474))))

(declare-fun lt!50476 () Bool)

(assert (=> d!26899 (= lt!50474 lt!50476)))

(declare-fun lt!50473 () Unit!3031)

(declare-fun e!65124 () Unit!3031)

(assert (=> d!26899 (= lt!50473 e!65124)))

(declare-fun c!17111 () Bool)

(assert (=> d!26899 (= c!17111 lt!50476)))

(assert (=> d!26899 (= lt!50476 (containsKey!154 (toList!794 lt!50188) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26899 (= (contains!810 lt!50188 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50474)))

(declare-fun b!99971 () Bool)

(declare-fun lt!50475 () Unit!3031)

(assert (=> b!99971 (= e!65124 lt!50475)))

(assert (=> b!99971 (= lt!50475 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50188) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!99971 (isDefined!104 (getValueByKey!150 (toList!794 lt!50188) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99972 () Bool)

(declare-fun Unit!3059 () Unit!3031)

(assert (=> b!99972 (= e!65124 Unit!3059)))

(declare-fun b!99973 () Bool)

(assert (=> b!99973 (= e!65123 (isDefined!104 (getValueByKey!150 (toList!794 lt!50188) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26899 c!17111) b!99971))

(assert (= (and d!26899 (not c!17111)) b!99972))

(assert (= (and d!26899 (not res!50185)) b!99973))

(declare-fun m!110179 () Bool)

(assert (=> d!26899 m!110179))

(declare-fun m!110181 () Bool)

(assert (=> b!99971 m!110181))

(assert (=> b!99971 m!109469))

(assert (=> b!99971 m!109469))

(declare-fun m!110183 () Bool)

(assert (=> b!99971 m!110183))

(assert (=> b!99973 m!109469))

(assert (=> b!99973 m!109469))

(assert (=> b!99973 m!110183))

(assert (=> d!26713 d!26899))

(declare-fun b!99975 () Bool)

(declare-fun e!65125 () Option!156)

(declare-fun e!65126 () Option!156)

(assert (=> b!99975 (= e!65125 e!65126)))

(declare-fun c!17113 () Bool)

(assert (=> b!99975 (= c!17113 (and ((_ is Cons!1611) lt!50190) (not (= (_1!1193 (h!2206 lt!50190)) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!17112 () Bool)

(declare-fun d!26901 () Bool)

(assert (=> d!26901 (= c!17112 (and ((_ is Cons!1611) lt!50190) (= (_1!1193 (h!2206 lt!50190)) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26901 (= (getValueByKey!150 lt!50190 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!65125)))

(declare-fun b!99977 () Bool)

(assert (=> b!99977 (= e!65126 None!154)))

(declare-fun b!99974 () Bool)

(assert (=> b!99974 (= e!65125 (Some!155 (_2!1193 (h!2206 lt!50190))))))

(declare-fun b!99976 () Bool)

(assert (=> b!99976 (= e!65126 (getValueByKey!150 (t!5597 lt!50190) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26901 c!17112) b!99974))

(assert (= (and d!26901 (not c!17112)) b!99975))

(assert (= (and b!99975 c!17113) b!99976))

(assert (= (and b!99975 (not c!17113)) b!99977))

(declare-fun m!110185 () Bool)

(assert (=> b!99976 m!110185))

(assert (=> d!26713 d!26901))

(declare-fun d!26903 () Bool)

(assert (=> d!26903 (= (getValueByKey!150 lt!50190 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50477 () Unit!3031)

(assert (=> d!26903 (= lt!50477 (choose!620 lt!50190 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!65127 () Bool)

(assert (=> d!26903 e!65127))

(declare-fun res!50186 () Bool)

(assert (=> d!26903 (=> (not res!50186) (not e!65127))))

(assert (=> d!26903 (= res!50186 (isStrictlySorted!300 lt!50190))))

(assert (=> d!26903 (= (lemmaContainsTupThenGetReturnValue!68 lt!50190 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50477)))

(declare-fun b!99978 () Bool)

(declare-fun res!50187 () Bool)

(assert (=> b!99978 (=> (not res!50187) (not e!65127))))

(assert (=> b!99978 (= res!50187 (containsKey!154 lt!50190 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99979 () Bool)

(assert (=> b!99979 (= e!65127 (contains!812 lt!50190 (tuple2!2367 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!26903 res!50186) b!99978))

(assert (= (and b!99978 res!50187) b!99979))

(assert (=> d!26903 m!109463))

(declare-fun m!110187 () Bool)

(assert (=> d!26903 m!110187))

(declare-fun m!110189 () Bool)

(assert (=> d!26903 m!110189))

(declare-fun m!110191 () Bool)

(assert (=> b!99978 m!110191))

(declare-fun m!110193 () Bool)

(assert (=> b!99979 m!110193))

(assert (=> d!26713 d!26903))

(declare-fun b!99980 () Bool)

(declare-fun e!65129 () List!1615)

(declare-fun e!65131 () List!1615)

(assert (=> b!99980 (= e!65129 e!65131)))

(declare-fun c!17117 () Bool)

(assert (=> b!99980 (= c!17117 (and ((_ is Cons!1611) (toList!794 call!10217)) (= (_1!1193 (h!2206 (toList!794 call!10217))) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!65130 () List!1615)

(declare-fun b!99981 () Bool)

(assert (=> b!99981 (= e!65130 (insertStrictlySorted!70 (t!5597 (toList!794 call!10217)) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99982 () Bool)

(declare-fun call!10298 () List!1615)

(assert (=> b!99982 (= e!65131 call!10298)))

(declare-fun bm!10296 () Bool)

(declare-fun c!17116 () Bool)

(declare-fun call!10300 () List!1615)

(assert (=> bm!10296 (= call!10300 ($colon$colon!78 e!65130 (ite c!17116 (h!2206 (toList!794 call!10217)) (tuple2!2367 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!17114 () Bool)

(assert (=> bm!10296 (= c!17114 c!17116)))

(declare-fun b!99983 () Bool)

(declare-fun e!65128 () List!1615)

(declare-fun call!10299 () List!1615)

(assert (=> b!99983 (= e!65128 call!10299)))

(declare-fun e!65132 () Bool)

(declare-fun b!99984 () Bool)

(declare-fun lt!50478 () List!1615)

(assert (=> b!99984 (= e!65132 (contains!812 lt!50478 (tuple2!2367 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!99985 () Bool)

(declare-fun res!50189 () Bool)

(assert (=> b!99985 (=> (not res!50189) (not e!65132))))

(assert (=> b!99985 (= res!50189 (containsKey!154 lt!50478 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!99986 () Bool)

(declare-fun c!17115 () Bool)

(assert (=> b!99986 (= c!17115 (and ((_ is Cons!1611) (toList!794 call!10217)) (bvsgt (_1!1193 (h!2206 (toList!794 call!10217))) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!99986 (= e!65131 e!65128)))

(declare-fun b!99987 () Bool)

(assert (=> b!99987 (= e!65128 call!10299)))

(declare-fun b!99988 () Bool)

(assert (=> b!99988 (= e!65129 call!10300)))

(declare-fun b!99989 () Bool)

(assert (=> b!99989 (= e!65130 (ite c!17117 (t!5597 (toList!794 call!10217)) (ite c!17115 (Cons!1611 (h!2206 (toList!794 call!10217)) (t!5597 (toList!794 call!10217))) Nil!1612)))))

(declare-fun bm!10297 () Bool)

(assert (=> bm!10297 (= call!10298 call!10300)))

(declare-fun d!26905 () Bool)

(assert (=> d!26905 e!65132))

(declare-fun res!50188 () Bool)

(assert (=> d!26905 (=> (not res!50188) (not e!65132))))

(assert (=> d!26905 (= res!50188 (isStrictlySorted!300 lt!50478))))

(assert (=> d!26905 (= lt!50478 e!65129)))

(assert (=> d!26905 (= c!17116 (and ((_ is Cons!1611) (toList!794 call!10217)) (bvslt (_1!1193 (h!2206 (toList!794 call!10217))) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26905 (isStrictlySorted!300 (toList!794 call!10217))))

(assert (=> d!26905 (= (insertStrictlySorted!70 (toList!794 call!10217) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50478)))

(declare-fun bm!10295 () Bool)

(assert (=> bm!10295 (= call!10299 call!10298)))

(assert (= (and d!26905 c!17116) b!99988))

(assert (= (and d!26905 (not c!17116)) b!99980))

(assert (= (and b!99980 c!17117) b!99982))

(assert (= (and b!99980 (not c!17117)) b!99986))

(assert (= (and b!99986 c!17115) b!99983))

(assert (= (and b!99986 (not c!17115)) b!99987))

(assert (= (or b!99983 b!99987) bm!10295))

(assert (= (or b!99982 bm!10295) bm!10297))

(assert (= (or b!99988 bm!10297) bm!10296))

(assert (= (and bm!10296 c!17114) b!99981))

(assert (= (and bm!10296 (not c!17114)) b!99989))

(assert (= (and d!26905 res!50188) b!99985))

(assert (= (and b!99985 res!50189) b!99984))

(declare-fun m!110195 () Bool)

(assert (=> b!99985 m!110195))

(declare-fun m!110197 () Bool)

(assert (=> bm!10296 m!110197))

(declare-fun m!110199 () Bool)

(assert (=> b!99984 m!110199))

(declare-fun m!110201 () Bool)

(assert (=> b!99981 m!110201))

(declare-fun m!110203 () Bool)

(assert (=> d!26905 m!110203))

(declare-fun m!110205 () Bool)

(assert (=> d!26905 m!110205))

(assert (=> d!26713 d!26905))

(declare-fun d!26907 () Bool)

(assert (=> d!26907 (= (apply!93 lt!50344 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1307 (getValueByKey!150 (toList!794 lt!50344) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4121 () Bool)

(assert (= bs!4121 d!26907))

(declare-fun m!110207 () Bool)

(assert (=> bs!4121 m!110207))

(assert (=> bs!4121 m!110207))

(declare-fun m!110209 () Bool)

(assert (=> bs!4121 m!110209))

(assert (=> b!99784 d!26907))

(declare-fun b!99991 () Bool)

(declare-fun e!65133 () Option!156)

(declare-fun e!65134 () Option!156)

(assert (=> b!99991 (= e!65133 e!65134)))

(declare-fun c!17119 () Bool)

(assert (=> b!99991 (= c!17119 (and ((_ is Cons!1611) (toList!794 lt!50265)) (not (= (_1!1193 (h!2206 (toList!794 lt!50265))) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun c!17118 () Bool)

(declare-fun d!26909 () Bool)

(assert (=> d!26909 (= c!17118 (and ((_ is Cons!1611) (toList!794 lt!50265)) (= (_1!1193 (h!2206 (toList!794 lt!50265))) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!26909 (= (getValueByKey!150 (toList!794 lt!50265) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) e!65133)))

(declare-fun b!99993 () Bool)

(assert (=> b!99993 (= e!65134 None!154)))

(declare-fun b!99990 () Bool)

(assert (=> b!99990 (= e!65133 (Some!155 (_2!1193 (h!2206 (toList!794 lt!50265)))))))

(declare-fun b!99992 () Bool)

(assert (=> b!99992 (= e!65134 (getValueByKey!150 (t!5597 (toList!794 lt!50265)) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!26909 c!17118) b!99990))

(assert (= (and d!26909 (not c!17118)) b!99991))

(assert (= (and b!99991 c!17119) b!99992))

(assert (= (and b!99991 (not c!17119)) b!99993))

(declare-fun m!110211 () Bool)

(assert (=> b!99992 m!110211))

(assert (=> b!99655 d!26909))

(declare-fun d!26911 () Bool)

(assert (=> d!26911 (= (isDefined!104 (getValueByKey!150 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))) (not (isEmpty!365 (getValueByKey!150 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))))

(declare-fun bs!4122 () Bool)

(assert (= bs!4122 d!26911))

(assert (=> bs!4122 m!109815))

(declare-fun m!110213 () Bool)

(assert (=> bs!4122 m!110213))

(assert (=> b!99766 d!26911))

(declare-fun b!99995 () Bool)

(declare-fun e!65135 () Option!156)

(declare-fun e!65136 () Option!156)

(assert (=> b!99995 (= e!65135 e!65136)))

(declare-fun c!17121 () Bool)

(assert (=> b!99995 (= c!17121 (and ((_ is Cons!1611) (toList!794 call!10208)) (not (= (_1!1193 (h!2206 (toList!794 call!10208))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))))

(declare-fun c!17120 () Bool)

(declare-fun d!26913 () Bool)

(assert (=> d!26913 (= c!17120 (and ((_ is Cons!1611) (toList!794 call!10208)) (= (_1!1193 (h!2206 (toList!794 call!10208))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (=> d!26913 (= (getValueByKey!150 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) e!65135)))

(declare-fun b!99997 () Bool)

(assert (=> b!99997 (= e!65136 None!154)))

(declare-fun b!99994 () Bool)

(assert (=> b!99994 (= e!65135 (Some!155 (_2!1193 (h!2206 (toList!794 call!10208)))))))

(declare-fun b!99996 () Bool)

(assert (=> b!99996 (= e!65136 (getValueByKey!150 (t!5597 (toList!794 call!10208)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!26913 c!17120) b!99994))

(assert (= (and d!26913 (not c!17120)) b!99995))

(assert (= (and b!99995 c!17121) b!99996))

(assert (= (and b!99995 (not c!17121)) b!99997))

(assert (=> b!99996 m!109089))

(declare-fun m!110215 () Bool)

(assert (=> b!99996 m!110215))

(assert (=> b!99766 d!26913))

(assert (=> b!99469 d!26837))

(assert (=> b!99752 d!26743))

(declare-fun d!26915 () Bool)

(assert (=> d!26915 (= (inRange!0 (index!3201 lt!50243) (mask!6609 newMap!16)) (and (bvsge (index!3201 lt!50243) #b00000000000000000000000000000000) (bvslt (index!3201 lt!50243) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!99639 d!26915))

(declare-fun d!26917 () Bool)

(declare-fun res!50190 () Bool)

(declare-fun e!65137 () Bool)

(assert (=> d!26917 (=> res!50190 e!65137)))

(assert (=> d!26917 (= res!50190 (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!26917 (= (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!65137)))

(declare-fun b!99998 () Bool)

(declare-fun e!65138 () Bool)

(assert (=> b!99998 (= e!65137 e!65138)))

(declare-fun res!50191 () Bool)

(assert (=> b!99998 (=> (not res!50191) (not e!65138))))

(assert (=> b!99998 (= res!50191 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun b!99999 () Bool)

(assert (=> b!99999 (= e!65138 (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!26917 (not res!50190)) b!99998))

(assert (= (and b!99998 res!50191) b!99999))

(declare-fun m!110217 () Bool)

(assert (=> d!26917 m!110217))

(assert (=> b!99999 m!109089))

(declare-fun m!110219 () Bool)

(assert (=> b!99999 m!110219))

(assert (=> b!99587 d!26917))

(declare-fun d!26919 () Bool)

(assert (=> d!26919 (= (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!99756 d!26919))

(declare-fun b!100003 () Bool)

(declare-fun e!65139 () Bool)

(assert (=> b!100003 (= e!65139 (and (bvsge (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!478 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun d!26921 () Bool)

(declare-fun res!50195 () Bool)

(assert (=> d!26921 (=> (not res!50195) (not e!65139))))

(assert (=> d!26921 (= res!50195 (validMask!0 (mask!6609 (v!2817 (underlying!342 thiss!992)))))))

(assert (=> d!26921 (= (simpleValid!68 (v!2817 (underlying!342 thiss!992))) e!65139)))

(declare-fun b!100000 () Bool)

(declare-fun res!50192 () Bool)

(assert (=> b!100000 (=> (not res!50192) (not e!65139))))

(assert (=> b!100000 (= res!50192 (and (= (size!2272 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000001)) (= (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (size!2272 (_values!2485 (v!2817 (underlying!342 thiss!992))))) (bvsge (_size!478 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!478 (v!2817 (underlying!342 thiss!992))) (bvadd (mask!6609 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!100001 () Bool)

(declare-fun res!50193 () Bool)

(assert (=> b!100001 (=> (not res!50193) (not e!65139))))

(assert (=> b!100001 (= res!50193 (bvsge (size!2275 (v!2817 (underlying!342 thiss!992))) (_size!478 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun b!100002 () Bool)

(declare-fun res!50194 () Bool)

(assert (=> b!100002 (=> (not res!50194) (not e!65139))))

(assert (=> b!100002 (= res!50194 (= (size!2275 (v!2817 (underlying!342 thiss!992))) (bvadd (_size!478 (v!2817 (underlying!342 thiss!992))) (bvsdiv (bvadd (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!26921 res!50195) b!100000))

(assert (= (and b!100000 res!50192) b!100001))

(assert (= (and b!100001 res!50193) b!100002))

(assert (= (and b!100002 res!50194) b!100003))

(assert (=> d!26921 m!109109))

(declare-fun m!110221 () Bool)

(assert (=> b!100001 m!110221))

(assert (=> b!100002 m!110221))

(assert (=> d!26801 d!26921))

(assert (=> b!99788 d!26837))

(assert (=> b!99746 d!26679))

(declare-fun d!26923 () Bool)

(declare-fun e!65140 () Bool)

(assert (=> d!26923 e!65140))

(declare-fun res!50196 () Bool)

(assert (=> d!26923 (=> res!50196 e!65140)))

(declare-fun lt!50480 () Bool)

(assert (=> d!26923 (= res!50196 (not lt!50480))))

(declare-fun lt!50482 () Bool)

(assert (=> d!26923 (= lt!50480 lt!50482)))

(declare-fun lt!50479 () Unit!3031)

(declare-fun e!65141 () Unit!3031)

(assert (=> d!26923 (= lt!50479 e!65141)))

(declare-fun c!17122 () Bool)

(assert (=> d!26923 (= c!17122 lt!50482)))

(assert (=> d!26923 (= lt!50482 (containsKey!154 (toList!794 lt!50344) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26923 (= (contains!810 lt!50344 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50480)))

(declare-fun b!100004 () Bool)

(declare-fun lt!50481 () Unit!3031)

(assert (=> b!100004 (= e!65141 lt!50481)))

(assert (=> b!100004 (= lt!50481 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50344) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100004 (isDefined!104 (getValueByKey!150 (toList!794 lt!50344) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100005 () Bool)

(declare-fun Unit!3060 () Unit!3031)

(assert (=> b!100005 (= e!65141 Unit!3060)))

(declare-fun b!100006 () Bool)

(assert (=> b!100006 (= e!65140 (isDefined!104 (getValueByKey!150 (toList!794 lt!50344) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26923 c!17122) b!100004))

(assert (= (and d!26923 (not c!17122)) b!100005))

(assert (= (and d!26923 (not res!50196)) b!100006))

(declare-fun m!110223 () Bool)

(assert (=> d!26923 m!110223))

(declare-fun m!110225 () Bool)

(assert (=> b!100004 m!110225))

(declare-fun m!110227 () Bool)

(assert (=> b!100004 m!110227))

(assert (=> b!100004 m!110227))

(declare-fun m!110229 () Bool)

(assert (=> b!100004 m!110229))

(assert (=> b!100006 m!110227))

(assert (=> b!100006 m!110227))

(assert (=> b!100006 m!110229))

(assert (=> bm!10262 d!26923))

(declare-fun d!26925 () Bool)

(declare-fun e!65142 () Bool)

(assert (=> d!26925 e!65142))

(declare-fun res!50197 () Bool)

(assert (=> d!26925 (=> (not res!50197) (not e!65142))))

(declare-fun lt!50484 () ListLongMap!1557)

(assert (=> d!26925 (= res!50197 (contains!810 lt!50484 (_1!1193 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50486 () List!1615)

(assert (=> d!26925 (= lt!50484 (ListLongMap!1558 lt!50486))))

(declare-fun lt!50485 () Unit!3031)

(declare-fun lt!50483 () Unit!3031)

(assert (=> d!26925 (= lt!50485 lt!50483)))

(assert (=> d!26925 (= (getValueByKey!150 lt!50486 (_1!1193 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26925 (= lt!50483 (lemmaContainsTupThenGetReturnValue!68 lt!50486 (_1!1193 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26925 (= lt!50486 (insertStrictlySorted!70 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (_1!1193 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26925 (= (+!139 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50484)))

(declare-fun b!100007 () Bool)

(declare-fun res!50198 () Bool)

(assert (=> b!100007 (=> (not res!50198) (not e!65142))))

(assert (=> b!100007 (= res!50198 (= (getValueByKey!150 (toList!794 lt!50484) (_1!1193 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100008 () Bool)

(assert (=> b!100008 (= e!65142 (contains!812 (toList!794 lt!50484) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26925 res!50197) b!100007))

(assert (= (and b!100007 res!50198) b!100008))

(declare-fun m!110231 () Bool)

(assert (=> d!26925 m!110231))

(declare-fun m!110233 () Bool)

(assert (=> d!26925 m!110233))

(declare-fun m!110235 () Bool)

(assert (=> d!26925 m!110235))

(declare-fun m!110237 () Bool)

(assert (=> d!26925 m!110237))

(declare-fun m!110239 () Bool)

(assert (=> b!100007 m!110239))

(declare-fun m!110241 () Bool)

(assert (=> b!100008 m!110241))

(assert (=> d!26727 d!26925))

(assert (=> d!26727 d!26709))

(assert (=> d!26727 d!26835))

(declare-fun b!100009 () Bool)

(declare-fun e!65153 () Bool)

(declare-fun call!10305 () Bool)

(assert (=> b!100009 (= e!65153 (not call!10305))))

(declare-fun b!100010 () Bool)

(declare-fun e!65154 () Bool)

(declare-fun e!65155 () Bool)

(assert (=> b!100010 (= e!65154 e!65155)))

(declare-fun res!50203 () Bool)

(assert (=> b!100010 (=> (not res!50203) (not e!65155))))

(declare-fun lt!50492 () ListLongMap!1557)

(assert (=> b!100010 (= res!50203 (contains!810 lt!50492 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100010 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun bm!10298 () Bool)

(declare-fun call!10302 () ListLongMap!1557)

(declare-fun call!10301 () ListLongMap!1557)

(assert (=> bm!10298 (= call!10302 call!10301)))

(declare-fun bm!10299 () Bool)

(declare-fun call!10303 () ListLongMap!1557)

(assert (=> bm!10299 (= call!10301 call!10303)))

(declare-fun b!100011 () Bool)

(declare-fun e!65144 () Bool)

(assert (=> b!100011 (= e!65153 e!65144)))

(declare-fun res!50199 () Bool)

(assert (=> b!100011 (= res!50199 call!10305)))

(assert (=> b!100011 (=> (not res!50199) (not e!65144))))

(declare-fun b!100012 () Bool)

(declare-fun e!65143 () Bool)

(declare-fun call!10304 () Bool)

(assert (=> b!100012 (= e!65143 (not call!10304))))

(declare-fun b!100013 () Bool)

(declare-fun e!65145 () Bool)

(assert (=> b!100013 (= e!65145 (= (apply!93 lt!50492 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!100014 () Bool)

(declare-fun c!17127 () Bool)

(assert (=> b!100014 (= c!17127 (and (not (= (bvand lt!50056 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!50056 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65147 () ListLongMap!1557)

(declare-fun e!65152 () ListLongMap!1557)

(assert (=> b!100014 (= e!65147 e!65152)))

(declare-fun c!17128 () Bool)

(declare-fun c!17125 () Bool)

(declare-fun bm!10300 () Bool)

(declare-fun call!10307 () ListLongMap!1557)

(assert (=> bm!10300 (= call!10307 (+!139 (ite c!17125 call!10303 (ite c!17128 call!10301 call!10302)) (ite (or c!17125 c!17128) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!100015 () Bool)

(declare-fun e!65148 () Bool)

(assert (=> b!100015 (= e!65148 e!65143)))

(declare-fun c!17124 () Bool)

(assert (=> b!100015 (= c!17124 (not (= (bvand lt!50056 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100016 () Bool)

(declare-fun e!65151 () Unit!3031)

(declare-fun lt!50489 () Unit!3031)

(assert (=> b!100016 (= e!65151 lt!50489)))

(declare-fun lt!50504 () ListLongMap!1557)

(assert (=> b!100016 (= lt!50504 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50056 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50501 () (_ BitVec 64))

(assert (=> b!100016 (= lt!50501 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50488 () (_ BitVec 64))

(assert (=> b!100016 (= lt!50488 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50490 () Unit!3031)

(assert (=> b!100016 (= lt!50490 (addStillContains!69 lt!50504 lt!50501 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50488))))

(assert (=> b!100016 (contains!810 (+!139 lt!50504 (tuple2!2367 lt!50501 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50488)))

(declare-fun lt!50499 () Unit!3031)

(assert (=> b!100016 (= lt!50499 lt!50490)))

(declare-fun lt!50498 () ListLongMap!1557)

(assert (=> b!100016 (= lt!50498 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50056 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50500 () (_ BitVec 64))

(assert (=> b!100016 (= lt!50500 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50497 () (_ BitVec 64))

(assert (=> b!100016 (= lt!50497 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50496 () Unit!3031)

(assert (=> b!100016 (= lt!50496 (addApplyDifferent!69 lt!50498 lt!50500 (minValue!2383 newMap!16) lt!50497))))

(assert (=> b!100016 (= (apply!93 (+!139 lt!50498 (tuple2!2367 lt!50500 (minValue!2383 newMap!16))) lt!50497) (apply!93 lt!50498 lt!50497))))

(declare-fun lt!50495 () Unit!3031)

(assert (=> b!100016 (= lt!50495 lt!50496)))

(declare-fun lt!50505 () ListLongMap!1557)

(assert (=> b!100016 (= lt!50505 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50056 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50493 () (_ BitVec 64))

(assert (=> b!100016 (= lt!50493 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50506 () (_ BitVec 64))

(assert (=> b!100016 (= lt!50506 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50491 () Unit!3031)

(assert (=> b!100016 (= lt!50491 (addApplyDifferent!69 lt!50505 lt!50493 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50506))))

(assert (=> b!100016 (= (apply!93 (+!139 lt!50505 (tuple2!2367 lt!50493 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50506) (apply!93 lt!50505 lt!50506))))

(declare-fun lt!50503 () Unit!3031)

(assert (=> b!100016 (= lt!50503 lt!50491)))

(declare-fun lt!50494 () ListLongMap!1557)

(assert (=> b!100016 (= lt!50494 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50056 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50502 () (_ BitVec 64))

(assert (=> b!100016 (= lt!50502 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50508 () (_ BitVec 64))

(assert (=> b!100016 (= lt!50508 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100016 (= lt!50489 (addApplyDifferent!69 lt!50494 lt!50502 (minValue!2383 newMap!16) lt!50508))))

(assert (=> b!100016 (= (apply!93 (+!139 lt!50494 (tuple2!2367 lt!50502 (minValue!2383 newMap!16))) lt!50508) (apply!93 lt!50494 lt!50508))))

(declare-fun b!100017 () Bool)

(declare-fun call!10306 () ListLongMap!1557)

(assert (=> b!100017 (= e!65152 call!10306)))

(declare-fun b!100018 () Bool)

(declare-fun res!50206 () Bool)

(assert (=> b!100018 (=> (not res!50206) (not e!65148))))

(assert (=> b!100018 (= res!50206 e!65153)))

(declare-fun c!17126 () Bool)

(assert (=> b!100018 (= c!17126 (not (= (bvand lt!50056 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!100019 () Bool)

(declare-fun e!65149 () Bool)

(assert (=> b!100019 (= e!65149 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100020 () Bool)

(assert (=> b!100020 (= e!65155 (= (apply!93 lt!50492 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100020 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_values!2485 newMap!16))))))

(assert (=> b!100020 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun b!100021 () Bool)

(declare-fun Unit!3061 () Unit!3031)

(assert (=> b!100021 (= e!65151 Unit!3061)))

(declare-fun b!100022 () Bool)

(assert (=> b!100022 (= e!65147 call!10306)))

(declare-fun bm!10301 () Bool)

(assert (=> bm!10301 (= call!10304 (contains!810 lt!50492 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10302 () Bool)

(assert (=> bm!10302 (= call!10306 call!10307)))

(declare-fun b!100023 () Bool)

(declare-fun res!50207 () Bool)

(assert (=> b!100023 (=> (not res!50207) (not e!65148))))

(assert (=> b!100023 (= res!50207 e!65154)))

(declare-fun res!50205 () Bool)

(assert (=> b!100023 (=> res!50205 e!65154)))

(assert (=> b!100023 (= res!50205 (not e!65149))))

(declare-fun res!50204 () Bool)

(assert (=> b!100023 (=> (not res!50204) (not e!65149))))

(assert (=> b!100023 (= res!50204 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun d!26927 () Bool)

(assert (=> d!26927 e!65148))

(declare-fun res!50202 () Bool)

(assert (=> d!26927 (=> (not res!50202) (not e!65148))))

(assert (=> d!26927 (= res!50202 (or (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))))

(declare-fun lt!50507 () ListLongMap!1557)

(assert (=> d!26927 (= lt!50492 lt!50507)))

(declare-fun lt!50487 () Unit!3031)

(assert (=> d!26927 (= lt!50487 e!65151)))

(declare-fun c!17123 () Bool)

(declare-fun e!65146 () Bool)

(assert (=> d!26927 (= c!17123 e!65146)))

(declare-fun res!50200 () Bool)

(assert (=> d!26927 (=> (not res!50200) (not e!65146))))

(assert (=> d!26927 (= res!50200 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun e!65150 () ListLongMap!1557)

(assert (=> d!26927 (= lt!50507 e!65150)))

(assert (=> d!26927 (= c!17125 (and (not (= (bvand lt!50056 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!50056 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26927 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26927 (= (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50056 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50492)))

(declare-fun bm!10303 () Bool)

(assert (=> bm!10303 (= call!10305 (contains!810 lt!50492 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10304 () Bool)

(assert (=> bm!10304 (= call!10303 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50056 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!100024 () Bool)

(assert (=> b!100024 (= e!65144 (= (apply!93 lt!50492 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100025 () Bool)

(assert (=> b!100025 (= e!65152 call!10302)))

(declare-fun b!100026 () Bool)

(assert (=> b!100026 (= e!65143 e!65145)))

(declare-fun res!50201 () Bool)

(assert (=> b!100026 (= res!50201 call!10304)))

(assert (=> b!100026 (=> (not res!50201) (not e!65145))))

(declare-fun b!100027 () Bool)

(assert (=> b!100027 (= e!65150 e!65147)))

(assert (=> b!100027 (= c!17128 (and (not (= (bvand lt!50056 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!50056 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100028 () Bool)

(assert (=> b!100028 (= e!65146 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100029 () Bool)

(assert (=> b!100029 (= e!65150 (+!139 call!10307 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(assert (= (and d!26927 c!17125) b!100029))

(assert (= (and d!26927 (not c!17125)) b!100027))

(assert (= (and b!100027 c!17128) b!100022))

(assert (= (and b!100027 (not c!17128)) b!100014))

(assert (= (and b!100014 c!17127) b!100017))

(assert (= (and b!100014 (not c!17127)) b!100025))

(assert (= (or b!100017 b!100025) bm!10298))

(assert (= (or b!100022 bm!10298) bm!10299))

(assert (= (or b!100022 b!100017) bm!10302))

(assert (= (or b!100029 bm!10299) bm!10304))

(assert (= (or b!100029 bm!10302) bm!10300))

(assert (= (and d!26927 res!50200) b!100028))

(assert (= (and d!26927 c!17123) b!100016))

(assert (= (and d!26927 (not c!17123)) b!100021))

(assert (= (and d!26927 res!50202) b!100023))

(assert (= (and b!100023 res!50204) b!100019))

(assert (= (and b!100023 (not res!50205)) b!100010))

(assert (= (and b!100010 res!50203) b!100020))

(assert (= (and b!100023 res!50207) b!100018))

(assert (= (and b!100018 c!17126) b!100011))

(assert (= (and b!100018 (not c!17126)) b!100009))

(assert (= (and b!100011 res!50199) b!100024))

(assert (= (or b!100011 b!100009) bm!10303))

(assert (= (and b!100018 res!50206) b!100015))

(assert (= (and b!100015 c!17124) b!100026))

(assert (= (and b!100015 (not c!17124)) b!100012))

(assert (= (and b!100026 res!50201) b!100013))

(assert (= (or b!100026 b!100012) bm!10301))

(declare-fun b_lambda!4481 () Bool)

(assert (=> (not b_lambda!4481) (not b!100020)))

(assert (=> b!100020 t!5605))

(declare-fun b_and!6157 () Bool)

(assert (= b_and!6153 (and (=> t!5605 result!3311) b_and!6157)))

(assert (=> b!100020 t!5607))

(declare-fun b_and!6159 () Bool)

(assert (= b_and!6155 (and (=> t!5607 result!3313) b_and!6159)))

(assert (=> b!100020 m!109349))

(declare-fun m!110243 () Bool)

(assert (=> b!100020 m!110243))

(assert (=> b!100020 m!109353))

(assert (=> b!100020 m!109353))

(assert (=> b!100020 m!109355))

(assert (=> b!100020 m!109357))

(assert (=> b!100020 m!109349))

(assert (=> b!100020 m!109355))

(declare-fun m!110245 () Bool)

(assert (=> b!100013 m!110245))

(assert (=> bm!10304 m!109123))

(declare-fun m!110247 () Bool)

(assert (=> bm!10304 m!110247))

(assert (=> b!100010 m!109349))

(assert (=> b!100010 m!109349))

(declare-fun m!110249 () Bool)

(assert (=> b!100010 m!110249))

(declare-fun m!110251 () Bool)

(assert (=> bm!10301 m!110251))

(assert (=> d!26927 m!109329))

(assert (=> b!100019 m!109349))

(assert (=> b!100019 m!109349))

(assert (=> b!100019 m!109367))

(declare-fun m!110253 () Bool)

(assert (=> b!100024 m!110253))

(declare-fun m!110255 () Bool)

(assert (=> b!100029 m!110255))

(declare-fun m!110257 () Bool)

(assert (=> bm!10303 m!110257))

(assert (=> b!100028 m!109349))

(assert (=> b!100028 m!109349))

(assert (=> b!100028 m!109367))

(declare-fun m!110259 () Bool)

(assert (=> b!100016 m!110259))

(declare-fun m!110261 () Bool)

(assert (=> b!100016 m!110261))

(declare-fun m!110263 () Bool)

(assert (=> b!100016 m!110263))

(declare-fun m!110265 () Bool)

(assert (=> b!100016 m!110265))

(declare-fun m!110267 () Bool)

(assert (=> b!100016 m!110267))

(assert (=> b!100016 m!110265))

(declare-fun m!110269 () Bool)

(assert (=> b!100016 m!110269))

(assert (=> b!100016 m!109123))

(declare-fun m!110271 () Bool)

(assert (=> b!100016 m!110271))

(assert (=> b!100016 m!109123))

(declare-fun m!110273 () Bool)

(assert (=> b!100016 m!110273))

(assert (=> b!100016 m!109349))

(declare-fun m!110275 () Bool)

(assert (=> b!100016 m!110275))

(declare-fun m!110277 () Bool)

(assert (=> b!100016 m!110277))

(assert (=> b!100016 m!110267))

(declare-fun m!110279 () Bool)

(assert (=> b!100016 m!110279))

(assert (=> b!100016 m!110259))

(declare-fun m!110281 () Bool)

(assert (=> b!100016 m!110281))

(declare-fun m!110283 () Bool)

(assert (=> b!100016 m!110283))

(assert (=> b!100016 m!110281))

(declare-fun m!110285 () Bool)

(assert (=> b!100016 m!110285))

(assert (=> b!100016 m!109123))

(assert (=> b!100016 m!110247))

(declare-fun m!110287 () Bool)

(assert (=> b!100016 m!110287))

(declare-fun m!110289 () Bool)

(assert (=> bm!10300 m!110289))

(assert (=> d!26727 d!26927))

(declare-fun d!26929 () Bool)

(assert (=> d!26929 (= (+!139 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50056 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(assert (=> d!26929 true))

(declare-fun _$7!86 () Unit!3031)

(assert (=> d!26929 (= (choose!614 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50056 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2383 newMap!16) (defaultEntry!2502 newMap!16)) _$7!86)))

(declare-fun bs!4123 () Bool)

(assert (= bs!4123 d!26929))

(assert (=> bs!4123 m!109199))

(assert (=> bs!4123 m!109199))

(assert (=> bs!4123 m!109509))

(assert (=> bs!4123 m!109123))

(assert (=> bs!4123 m!109511))

(assert (=> d!26727 d!26929))

(declare-fun d!26931 () Bool)

(declare-fun lt!50511 () Bool)

(declare-fun content!103 (List!1615) (InoxSet tuple2!2366))

(assert (=> d!26931 (= lt!50511 (select (content!103 (toList!794 lt!50321)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun e!65160 () Bool)

(assert (=> d!26931 (= lt!50511 e!65160)))

(declare-fun res!50212 () Bool)

(assert (=> d!26931 (=> (not res!50212) (not e!65160))))

(assert (=> d!26931 (= res!50212 ((_ is Cons!1611) (toList!794 lt!50321)))))

(assert (=> d!26931 (= (contains!812 (toList!794 lt!50321) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!50511)))

(declare-fun b!100034 () Bool)

(declare-fun e!65161 () Bool)

(assert (=> b!100034 (= e!65160 e!65161)))

(declare-fun res!50213 () Bool)

(assert (=> b!100034 (=> res!50213 e!65161)))

(assert (=> b!100034 (= res!50213 (= (h!2206 (toList!794 lt!50321)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun b!100035 () Bool)

(assert (=> b!100035 (= e!65161 (contains!812 (t!5597 (toList!794 lt!50321)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!26931 res!50212) b!100034))

(assert (= (and b!100034 (not res!50213)) b!100035))

(declare-fun m!110291 () Bool)

(assert (=> d!26931 m!110291))

(declare-fun m!110293 () Bool)

(assert (=> d!26931 m!110293))

(declare-fun m!110295 () Bool)

(assert (=> b!100035 m!110295))

(assert (=> b!99749 d!26931))

(declare-fun d!26933 () Bool)

(declare-fun e!65162 () Bool)

(assert (=> d!26933 e!65162))

(declare-fun res!50214 () Bool)

(assert (=> d!26933 (=> (not res!50214) (not e!65162))))

(declare-fun lt!50513 () ListLongMap!1557)

(assert (=> d!26933 (= res!50214 (contains!810 lt!50513 (_1!1193 (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(declare-fun lt!50515 () List!1615)

(assert (=> d!26933 (= lt!50513 (ListLongMap!1558 lt!50515))))

(declare-fun lt!50514 () Unit!3031)

(declare-fun lt!50512 () Unit!3031)

(assert (=> d!26933 (= lt!50514 lt!50512)))

(assert (=> d!26933 (= (getValueByKey!150 lt!50515 (_1!1193 (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))) (Some!155 (_2!1193 (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!26933 (= lt!50512 (lemmaContainsTupThenGetReturnValue!68 lt!50515 (_1!1193 (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (_2!1193 (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!26933 (= lt!50515 (insertStrictlySorted!70 (toList!794 (ite c!16982 call!10221 (ite c!16985 call!10219 call!10220))) (_1!1193 (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (_2!1193 (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!26933 (= (+!139 (ite c!16982 call!10221 (ite c!16985 call!10219 call!10220)) (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) lt!50513)))

(declare-fun b!100036 () Bool)

(declare-fun res!50215 () Bool)

(assert (=> b!100036 (=> (not res!50215) (not e!65162))))

(assert (=> b!100036 (= res!50215 (= (getValueByKey!150 (toList!794 lt!50513) (_1!1193 (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))) (Some!155 (_2!1193 (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))))

(declare-fun b!100037 () Bool)

(assert (=> b!100037 (= e!65162 (contains!812 (toList!794 lt!50513) (ite (or c!16982 c!16985) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (= (and d!26933 res!50214) b!100036))

(assert (= (and b!100036 res!50215) b!100037))

(declare-fun m!110297 () Bool)

(assert (=> d!26933 m!110297))

(declare-fun m!110299 () Bool)

(assert (=> d!26933 m!110299))

(declare-fun m!110301 () Bool)

(assert (=> d!26933 m!110301))

(declare-fun m!110303 () Bool)

(assert (=> d!26933 m!110303))

(declare-fun m!110305 () Bool)

(assert (=> b!100036 m!110305))

(declare-fun m!110307 () Bool)

(assert (=> b!100037 m!110307))

(assert (=> bm!10218 d!26933))

(declare-fun d!26935 () Bool)

(declare-fun e!65163 () Bool)

(assert (=> d!26935 e!65163))

(declare-fun res!50216 () Bool)

(assert (=> d!26935 (=> res!50216 e!65163)))

(declare-fun lt!50517 () Bool)

(assert (=> d!26935 (= res!50216 (not lt!50517))))

(declare-fun lt!50519 () Bool)

(assert (=> d!26935 (= lt!50517 lt!50519)))

(declare-fun lt!50516 () Unit!3031)

(declare-fun e!65164 () Unit!3031)

(assert (=> d!26935 (= lt!50516 e!65164)))

(declare-fun c!17129 () Bool)

(assert (=> d!26935 (= c!17129 lt!50519)))

(assert (=> d!26935 (= lt!50519 (containsKey!154 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043))))))

(assert (=> d!26935 (= (contains!810 (getCurrentListMap!474 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043))) lt!50517)))

(declare-fun b!100038 () Bool)

(declare-fun lt!50518 () Unit!3031)

(assert (=> b!100038 (= e!65164 lt!50518)))

(assert (=> b!100038 (= lt!50518 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043))))))

(assert (=> b!100038 (isDefined!104 (getValueByKey!150 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043))))))

(declare-fun b!100039 () Bool)

(declare-fun Unit!3062 () Unit!3031)

(assert (=> b!100039 (= e!65164 Unit!3062)))

(declare-fun b!100040 () Bool)

(assert (=> b!100040 (= e!65163 (isDefined!104 (getValueByKey!150 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))

(assert (= (and d!26935 c!17129) b!100038))

(assert (= (and d!26935 (not c!17129)) b!100039))

(assert (= (and d!26935 (not res!50216)) b!100040))

(assert (=> d!26935 m!109291))

(declare-fun m!110309 () Bool)

(assert (=> d!26935 m!110309))

(assert (=> b!100038 m!109291))

(declare-fun m!110311 () Bool)

(assert (=> b!100038 m!110311))

(assert (=> b!100038 m!109291))

(declare-fun m!110313 () Bool)

(assert (=> b!100038 m!110313))

(assert (=> b!100038 m!110313))

(declare-fun m!110315 () Bool)

(assert (=> b!100038 m!110315))

(assert (=> b!100040 m!109291))

(assert (=> b!100040 m!110313))

(assert (=> b!100040 m!110313))

(assert (=> b!100040 m!110315))

(assert (=> b!99452 d!26935))

(declare-fun b!100041 () Bool)

(declare-fun e!65175 () Bool)

(declare-fun call!10312 () Bool)

(assert (=> b!100041 (= e!65175 (not call!10312))))

(declare-fun b!100042 () Bool)

(declare-fun e!65176 () Bool)

(declare-fun e!65177 () Bool)

(assert (=> b!100042 (= e!65176 e!65177)))

(declare-fun res!50221 () Bool)

(assert (=> b!100042 (=> (not res!50221) (not e!65177))))

(declare-fun lt!50525 () ListLongMap!1557)

(assert (=> b!100042 (= res!50221 (contains!810 lt!50525 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100042 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun bm!10305 () Bool)

(declare-fun call!10309 () ListLongMap!1557)

(declare-fun call!10308 () ListLongMap!1557)

(assert (=> bm!10305 (= call!10309 call!10308)))

(declare-fun bm!10306 () Bool)

(declare-fun call!10310 () ListLongMap!1557)

(assert (=> bm!10306 (= call!10308 call!10310)))

(declare-fun b!100043 () Bool)

(declare-fun e!65166 () Bool)

(assert (=> b!100043 (= e!65175 e!65166)))

(declare-fun res!50217 () Bool)

(assert (=> b!100043 (= res!50217 call!10312)))

(assert (=> b!100043 (=> (not res!50217) (not e!65166))))

(declare-fun b!100044 () Bool)

(declare-fun e!65165 () Bool)

(declare-fun call!10311 () Bool)

(assert (=> b!100044 (= e!65165 (not call!10311))))

(declare-fun b!100045 () Bool)

(declare-fun e!65167 () Bool)

(assert (=> b!100045 (= e!65167 (= (apply!93 lt!50525 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!100046 () Bool)

(declare-fun c!17134 () Bool)

(assert (=> b!100046 (= c!17134 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65169 () ListLongMap!1557)

(declare-fun e!65174 () ListLongMap!1557)

(assert (=> b!100046 (= e!65169 e!65174)))

(declare-fun bm!10307 () Bool)

(declare-fun c!17135 () Bool)

(declare-fun c!17132 () Bool)

(declare-fun call!10314 () ListLongMap!1557)

(assert (=> bm!10307 (= call!10314 (+!139 (ite c!17132 call!10310 (ite c!17135 call!10308 call!10309)) (ite (or c!17132 c!17135) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!100047 () Bool)

(declare-fun e!65170 () Bool)

(assert (=> b!100047 (= e!65170 e!65165)))

(declare-fun c!17131 () Bool)

(assert (=> b!100047 (= c!17131 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100048 () Bool)

(declare-fun e!65173 () Unit!3031)

(declare-fun lt!50522 () Unit!3031)

(assert (=> b!100048 (= e!65173 lt!50522)))

(declare-fun lt!50537 () ListLongMap!1557)

(assert (=> b!100048 (= lt!50537 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50534 () (_ BitVec 64))

(assert (=> b!100048 (= lt!50534 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50521 () (_ BitVec 64))

(assert (=> b!100048 (= lt!50521 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50523 () Unit!3031)

(assert (=> b!100048 (= lt!50523 (addStillContains!69 lt!50537 lt!50534 (zeroValue!2383 newMap!16) lt!50521))))

(assert (=> b!100048 (contains!810 (+!139 lt!50537 (tuple2!2367 lt!50534 (zeroValue!2383 newMap!16))) lt!50521)))

(declare-fun lt!50532 () Unit!3031)

(assert (=> b!100048 (= lt!50532 lt!50523)))

(declare-fun lt!50531 () ListLongMap!1557)

(assert (=> b!100048 (= lt!50531 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50533 () (_ BitVec 64))

(assert (=> b!100048 (= lt!50533 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50530 () (_ BitVec 64))

(assert (=> b!100048 (= lt!50530 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50529 () Unit!3031)

(assert (=> b!100048 (= lt!50529 (addApplyDifferent!69 lt!50531 lt!50533 (minValue!2383 newMap!16) lt!50530))))

(assert (=> b!100048 (= (apply!93 (+!139 lt!50531 (tuple2!2367 lt!50533 (minValue!2383 newMap!16))) lt!50530) (apply!93 lt!50531 lt!50530))))

(declare-fun lt!50528 () Unit!3031)

(assert (=> b!100048 (= lt!50528 lt!50529)))

(declare-fun lt!50538 () ListLongMap!1557)

(assert (=> b!100048 (= lt!50538 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50526 () (_ BitVec 64))

(assert (=> b!100048 (= lt!50526 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50539 () (_ BitVec 64))

(assert (=> b!100048 (= lt!50539 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50524 () Unit!3031)

(assert (=> b!100048 (= lt!50524 (addApplyDifferent!69 lt!50538 lt!50526 (zeroValue!2383 newMap!16) lt!50539))))

(assert (=> b!100048 (= (apply!93 (+!139 lt!50538 (tuple2!2367 lt!50526 (zeroValue!2383 newMap!16))) lt!50539) (apply!93 lt!50538 lt!50539))))

(declare-fun lt!50536 () Unit!3031)

(assert (=> b!100048 (= lt!50536 lt!50524)))

(declare-fun lt!50527 () ListLongMap!1557)

(assert (=> b!100048 (= lt!50527 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50535 () (_ BitVec 64))

(assert (=> b!100048 (= lt!50535 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50541 () (_ BitVec 64))

(assert (=> b!100048 (= lt!50541 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100048 (= lt!50522 (addApplyDifferent!69 lt!50527 lt!50535 (minValue!2383 newMap!16) lt!50541))))

(assert (=> b!100048 (= (apply!93 (+!139 lt!50527 (tuple2!2367 lt!50535 (minValue!2383 newMap!16))) lt!50541) (apply!93 lt!50527 lt!50541))))

(declare-fun b!100049 () Bool)

(declare-fun call!10313 () ListLongMap!1557)

(assert (=> b!100049 (= e!65174 call!10313)))

(declare-fun b!100050 () Bool)

(declare-fun res!50224 () Bool)

(assert (=> b!100050 (=> (not res!50224) (not e!65170))))

(assert (=> b!100050 (= res!50224 e!65175)))

(declare-fun c!17133 () Bool)

(assert (=> b!100050 (= c!17133 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!100051 () Bool)

(declare-fun e!65171 () Bool)

(assert (=> b!100051 (= e!65171 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100052 () Bool)

(assert (=> b!100052 (= e!65177 (= (apply!93 lt!50525 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 lt!50042) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100052 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 lt!50042)))))

(assert (=> b!100052 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun b!100053 () Bool)

(declare-fun Unit!3063 () Unit!3031)

(assert (=> b!100053 (= e!65173 Unit!3063)))

(declare-fun b!100054 () Bool)

(assert (=> b!100054 (= e!65169 call!10313)))

(declare-fun bm!10308 () Bool)

(assert (=> bm!10308 (= call!10311 (contains!810 lt!50525 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10309 () Bool)

(assert (=> bm!10309 (= call!10313 call!10314)))

(declare-fun b!100055 () Bool)

(declare-fun res!50225 () Bool)

(assert (=> b!100055 (=> (not res!50225) (not e!65170))))

(assert (=> b!100055 (= res!50225 e!65176)))

(declare-fun res!50223 () Bool)

(assert (=> b!100055 (=> res!50223 e!65176)))

(assert (=> b!100055 (= res!50223 (not e!65171))))

(declare-fun res!50222 () Bool)

(assert (=> b!100055 (=> (not res!50222) (not e!65171))))

(assert (=> b!100055 (= res!50222 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun d!26937 () Bool)

(assert (=> d!26937 e!65170))

(declare-fun res!50220 () Bool)

(assert (=> d!26937 (=> (not res!50220) (not e!65170))))

(assert (=> d!26937 (= res!50220 (or (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))))

(declare-fun lt!50540 () ListLongMap!1557)

(assert (=> d!26937 (= lt!50525 lt!50540)))

(declare-fun lt!50520 () Unit!3031)

(assert (=> d!26937 (= lt!50520 e!65173)))

(declare-fun c!17130 () Bool)

(declare-fun e!65168 () Bool)

(assert (=> d!26937 (= c!17130 e!65168)))

(declare-fun res!50218 () Bool)

(assert (=> d!26937 (=> (not res!50218) (not e!65168))))

(assert (=> d!26937 (= res!50218 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun e!65172 () ListLongMap!1557)

(assert (=> d!26937 (= lt!50540 e!65172)))

(assert (=> d!26937 (= c!17132 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26937 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26937 (= (getCurrentListMap!474 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50525)))

(declare-fun bm!10310 () Bool)

(assert (=> bm!10310 (= call!10312 (contains!810 lt!50525 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10311 () Bool)

(assert (=> bm!10311 (= call!10310 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!100056 () Bool)

(assert (=> b!100056 (= e!65166 (= (apply!93 lt!50525 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun b!100057 () Bool)

(assert (=> b!100057 (= e!65174 call!10309)))

(declare-fun b!100058 () Bool)

(assert (=> b!100058 (= e!65165 e!65167)))

(declare-fun res!50219 () Bool)

(assert (=> b!100058 (= res!50219 call!10311)))

(assert (=> b!100058 (=> (not res!50219) (not e!65167))))

(declare-fun b!100059 () Bool)

(assert (=> b!100059 (= e!65172 e!65169)))

(assert (=> b!100059 (= c!17135 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100060 () Bool)

(assert (=> b!100060 (= e!65168 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100061 () Bool)

(assert (=> b!100061 (= e!65172 (+!139 call!10314 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(assert (= (and d!26937 c!17132) b!100061))

(assert (= (and d!26937 (not c!17132)) b!100059))

(assert (= (and b!100059 c!17135) b!100054))

(assert (= (and b!100059 (not c!17135)) b!100046))

(assert (= (and b!100046 c!17134) b!100049))

(assert (= (and b!100046 (not c!17134)) b!100057))

(assert (= (or b!100049 b!100057) bm!10305))

(assert (= (or b!100054 bm!10305) bm!10306))

(assert (= (or b!100054 b!100049) bm!10309))

(assert (= (or b!100061 bm!10306) bm!10311))

(assert (= (or b!100061 bm!10309) bm!10307))

(assert (= (and d!26937 res!50218) b!100060))

(assert (= (and d!26937 c!17130) b!100048))

(assert (= (and d!26937 (not c!17130)) b!100053))

(assert (= (and d!26937 res!50220) b!100055))

(assert (= (and b!100055 res!50222) b!100051))

(assert (= (and b!100055 (not res!50223)) b!100042))

(assert (= (and b!100042 res!50221) b!100052))

(assert (= (and b!100055 res!50225) b!100050))

(assert (= (and b!100050 c!17133) b!100043))

(assert (= (and b!100050 (not c!17133)) b!100041))

(assert (= (and b!100043 res!50217) b!100056))

(assert (= (or b!100043 b!100041) bm!10310))

(assert (= (and b!100050 res!50224) b!100047))

(assert (= (and b!100047 c!17131) b!100058))

(assert (= (and b!100047 (not c!17131)) b!100044))

(assert (= (and b!100058 res!50219) b!100045))

(assert (= (or b!100058 b!100044) bm!10308))

(declare-fun b_lambda!4483 () Bool)

(assert (=> (not b_lambda!4483) (not b!100052)))

(assert (=> b!100052 t!5605))

(declare-fun b_and!6161 () Bool)

(assert (= b_and!6157 (and (=> t!5605 result!3311) b_and!6161)))

(assert (=> b!100052 t!5607))

(declare-fun b_and!6163 () Bool)

(assert (= b_and!6159 (and (=> t!5607 result!3313) b_and!6163)))

(assert (=> b!100052 m!109349))

(declare-fun m!110317 () Bool)

(assert (=> b!100052 m!110317))

(declare-fun m!110319 () Bool)

(assert (=> b!100052 m!110319))

(assert (=> b!100052 m!110319))

(assert (=> b!100052 m!109355))

(declare-fun m!110321 () Bool)

(assert (=> b!100052 m!110321))

(assert (=> b!100052 m!109349))

(assert (=> b!100052 m!109355))

(declare-fun m!110323 () Bool)

(assert (=> b!100045 m!110323))

(declare-fun m!110325 () Bool)

(assert (=> bm!10311 m!110325))

(assert (=> b!100042 m!109349))

(assert (=> b!100042 m!109349))

(declare-fun m!110327 () Bool)

(assert (=> b!100042 m!110327))

(declare-fun m!110329 () Bool)

(assert (=> bm!10308 m!110329))

(assert (=> d!26937 m!109329))

(assert (=> b!100051 m!109349))

(assert (=> b!100051 m!109349))

(assert (=> b!100051 m!109367))

(declare-fun m!110331 () Bool)

(assert (=> b!100056 m!110331))

(declare-fun m!110333 () Bool)

(assert (=> b!100061 m!110333))

(declare-fun m!110335 () Bool)

(assert (=> bm!10310 m!110335))

(assert (=> b!100060 m!109349))

(assert (=> b!100060 m!109349))

(assert (=> b!100060 m!109367))

(declare-fun m!110337 () Bool)

(assert (=> b!100048 m!110337))

(declare-fun m!110339 () Bool)

(assert (=> b!100048 m!110339))

(declare-fun m!110341 () Bool)

(assert (=> b!100048 m!110341))

(declare-fun m!110343 () Bool)

(assert (=> b!100048 m!110343))

(declare-fun m!110345 () Bool)

(assert (=> b!100048 m!110345))

(assert (=> b!100048 m!110343))

(declare-fun m!110347 () Bool)

(assert (=> b!100048 m!110347))

(declare-fun m!110349 () Bool)

(assert (=> b!100048 m!110349))

(declare-fun m!110351 () Bool)

(assert (=> b!100048 m!110351))

(assert (=> b!100048 m!109349))

(declare-fun m!110353 () Bool)

(assert (=> b!100048 m!110353))

(declare-fun m!110355 () Bool)

(assert (=> b!100048 m!110355))

(assert (=> b!100048 m!110345))

(declare-fun m!110357 () Bool)

(assert (=> b!100048 m!110357))

(assert (=> b!100048 m!110337))

(declare-fun m!110359 () Bool)

(assert (=> b!100048 m!110359))

(declare-fun m!110361 () Bool)

(assert (=> b!100048 m!110361))

(assert (=> b!100048 m!110359))

(declare-fun m!110363 () Bool)

(assert (=> b!100048 m!110363))

(assert (=> b!100048 m!110325))

(declare-fun m!110365 () Bool)

(assert (=> b!100048 m!110365))

(declare-fun m!110367 () Bool)

(assert (=> bm!10307 m!110367))

(assert (=> b!99452 d!26937))

(declare-fun b!100063 () Bool)

(declare-fun e!65178 () Option!156)

(declare-fun e!65179 () Option!156)

(assert (=> b!100063 (= e!65178 e!65179)))

(declare-fun c!17137 () Bool)

(assert (=> b!100063 (= c!17137 (and ((_ is Cons!1611) (toList!794 lt!50277)) (not (= (_1!1193 (h!2206 (toList!794 lt!50277))) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))))

(declare-fun c!17136 () Bool)

(declare-fun d!26939 () Bool)

(assert (=> d!26939 (= c!17136 (and ((_ is Cons!1611) (toList!794 lt!50277)) (= (_1!1193 (h!2206 (toList!794 lt!50277))) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(assert (=> d!26939 (= (getValueByKey!150 (toList!794 lt!50277) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) e!65178)))

(declare-fun b!100065 () Bool)

(assert (=> b!100065 (= e!65179 None!154)))

(declare-fun b!100062 () Bool)

(assert (=> b!100062 (= e!65178 (Some!155 (_2!1193 (h!2206 (toList!794 lt!50277)))))))

(declare-fun b!100064 () Bool)

(assert (=> b!100064 (= e!65179 (getValueByKey!150 (t!5597 (toList!794 lt!50277)) (_1!1193 (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!26939 c!17136) b!100062))

(assert (= (and d!26939 (not c!17136)) b!100063))

(assert (= (and b!100063 c!17137) b!100064))

(assert (= (and b!100063 (not c!17137)) b!100065))

(declare-fun m!110369 () Bool)

(assert (=> b!100064 m!110369))

(assert (=> b!99674 d!26939))

(assert (=> b!99618 d!26721))

(declare-fun d!26941 () Bool)

(assert (=> d!26941 (isDefined!104 (getValueByKey!150 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))

(declare-fun lt!50542 () Unit!3031)

(assert (=> d!26941 (= lt!50542 (choose!618 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))

(declare-fun e!65180 () Bool)

(assert (=> d!26941 e!65180))

(declare-fun res!50226 () Bool)

(assert (=> d!26941 (=> (not res!50226) (not e!65180))))

(assert (=> d!26941 (= res!50226 (isStrictlySorted!300 (toList!794 e!64798)))))

(assert (=> d!26941 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))) lt!50542)))

(declare-fun b!100066 () Bool)

(assert (=> b!100066 (= e!65180 (containsKey!154 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))

(assert (= (and d!26941 res!50226) b!100066))

(assert (=> d!26941 m!109487))

(assert (=> d!26941 m!109487))

(assert (=> d!26941 m!109489))

(declare-fun m!110371 () Bool)

(assert (=> d!26941 m!110371))

(declare-fun m!110373 () Bool)

(assert (=> d!26941 m!110373))

(assert (=> b!100066 m!109483))

(assert (=> b!99573 d!26941))

(declare-fun d!26943 () Bool)

(assert (=> d!26943 (= (isDefined!104 (getValueByKey!150 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043))))) (not (isEmpty!365 (getValueByKey!150 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))))

(declare-fun bs!4124 () Bool)

(assert (= bs!4124 d!26943))

(assert (=> bs!4124 m!109487))

(declare-fun m!110375 () Bool)

(assert (=> bs!4124 m!110375))

(assert (=> b!99573 d!26943))

(declare-fun b!100068 () Bool)

(declare-fun e!65181 () Option!156)

(declare-fun e!65182 () Option!156)

(assert (=> b!100068 (= e!65181 e!65182)))

(declare-fun c!17139 () Bool)

(assert (=> b!100068 (= c!17139 (and ((_ is Cons!1611) (toList!794 e!64798)) (not (= (_1!1193 (h!2206 (toList!794 e!64798))) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))))

(declare-fun d!26945 () Bool)

(declare-fun c!17138 () Bool)

(assert (=> d!26945 (= c!17138 (and ((_ is Cons!1611) (toList!794 e!64798)) (= (_1!1193 (h!2206 (toList!794 e!64798))) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043))))))))

(assert (=> d!26945 (= (getValueByKey!150 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))) e!65181)))

(declare-fun b!100070 () Bool)

(assert (=> b!100070 (= e!65182 None!154)))

(declare-fun b!100067 () Bool)

(assert (=> b!100067 (= e!65181 (Some!155 (_2!1193 (h!2206 (toList!794 e!64798)))))))

(declare-fun b!100069 () Bool)

(assert (=> b!100069 (= e!65182 (getValueByKey!150 (t!5597 (toList!794 e!64798)) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))

(assert (= (and d!26945 c!17138) b!100067))

(assert (= (and d!26945 (not c!17138)) b!100068))

(assert (= (and b!100068 c!17139) b!100069))

(assert (= (and b!100068 (not c!17139)) b!100070))

(declare-fun m!110377 () Bool)

(assert (=> b!100069 m!110377))

(assert (=> b!99573 d!26945))

(assert (=> d!26761 d!26779))

(assert (=> d!26761 d!26759))

(declare-fun d!26947 () Bool)

(assert (=> d!26947 (contains!810 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49943)))

(assert (=> d!26947 true))

(declare-fun _$35!342 () Unit!3031)

(assert (=> d!26947 (= (choose!616 lt!49959 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49943) _$35!342)))

(declare-fun bs!4125 () Bool)

(assert (= bs!4125 d!26947))

(assert (=> bs!4125 m!109229))

(assert (=> bs!4125 m!109229))

(assert (=> bs!4125 m!109233))

(assert (=> d!26761 d!26947))

(declare-fun d!26949 () Bool)

(declare-fun e!65183 () Bool)

(assert (=> d!26949 e!65183))

(declare-fun res!50227 () Bool)

(assert (=> d!26949 (=> res!50227 e!65183)))

(declare-fun lt!50544 () Bool)

(assert (=> d!26949 (= res!50227 (not lt!50544))))

(declare-fun lt!50546 () Bool)

(assert (=> d!26949 (= lt!50544 lt!50546)))

(declare-fun lt!50543 () Unit!3031)

(declare-fun e!65184 () Unit!3031)

(assert (=> d!26949 (= lt!50543 e!65184)))

(declare-fun c!17140 () Bool)

(assert (=> d!26949 (= c!17140 lt!50546)))

(assert (=> d!26949 (= lt!50546 (containsKey!154 (toList!794 lt!49959) lt!49943))))

(assert (=> d!26949 (= (contains!810 lt!49959 lt!49943) lt!50544)))

(declare-fun b!100072 () Bool)

(declare-fun lt!50545 () Unit!3031)

(assert (=> b!100072 (= e!65184 lt!50545)))

(assert (=> b!100072 (= lt!50545 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49959) lt!49943))))

(assert (=> b!100072 (isDefined!104 (getValueByKey!150 (toList!794 lt!49959) lt!49943))))

(declare-fun b!100073 () Bool)

(declare-fun Unit!3064 () Unit!3031)

(assert (=> b!100073 (= e!65184 Unit!3064)))

(declare-fun b!100074 () Bool)

(assert (=> b!100074 (= e!65183 (isDefined!104 (getValueByKey!150 (toList!794 lt!49959) lt!49943)))))

(assert (= (and d!26949 c!17140) b!100072))

(assert (= (and d!26949 (not c!17140)) b!100073))

(assert (= (and d!26949 (not res!50227)) b!100074))

(declare-fun m!110379 () Bool)

(assert (=> d!26949 m!110379))

(declare-fun m!110381 () Bool)

(assert (=> b!100072 m!110381))

(declare-fun m!110383 () Bool)

(assert (=> b!100072 m!110383))

(assert (=> b!100072 m!110383))

(declare-fun m!110385 () Bool)

(assert (=> b!100072 m!110385))

(assert (=> b!100074 m!110383))

(assert (=> b!100074 m!110383))

(assert (=> b!100074 m!110385))

(assert (=> d!26761 d!26949))

(declare-fun b!100075 () Bool)

(declare-fun e!65186 () (_ BitVec 32))

(declare-fun e!65185 () (_ BitVec 32))

(assert (=> b!100075 (= e!65186 e!65185)))

(declare-fun c!17141 () Bool)

(assert (=> b!100075 (= c!17141 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!100076 () Bool)

(assert (=> b!100076 (= e!65186 #b00000000000000000000000000000000)))

(declare-fun d!26951 () Bool)

(declare-fun lt!50547 () (_ BitVec 32))

(assert (=> d!26951 (and (bvsge lt!50547 #b00000000000000000000000000000000) (bvsle lt!50547 (bvsub (size!2271 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!26951 (= lt!50547 e!65186)))

(declare-fun c!17142 () Bool)

(assert (=> d!26951 (= c!17142 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!26951 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 (_keys!4196 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2271 (_keys!4196 newMap!16)) (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!26951 (= (arrayCountValidKeys!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 (_keys!4196 newMap!16))) lt!50547)))

(declare-fun b!100077 () Bool)

(declare-fun call!10315 () (_ BitVec 32))

(assert (=> b!100077 (= e!65185 call!10315)))

(declare-fun b!100078 () Bool)

(assert (=> b!100078 (= e!65185 (bvadd #b00000000000000000000000000000001 call!10315))))

(declare-fun bm!10312 () Bool)

(assert (=> bm!10312 (= call!10315 (arrayCountValidKeys!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2271 (_keys!4196 newMap!16))))))

(assert (= (and d!26951 c!17142) b!100076))

(assert (= (and d!26951 (not c!17142)) b!100075))

(assert (= (and b!100075 c!17141) b!100078))

(assert (= (and b!100075 (not c!17141)) b!100077))

(assert (= (or b!100078 b!100077) bm!10312))

(declare-fun m!110387 () Bool)

(assert (=> b!100075 m!110387))

(assert (=> b!100075 m!110387))

(declare-fun m!110389 () Bool)

(assert (=> b!100075 m!110389))

(declare-fun m!110391 () Bool)

(assert (=> bm!10312 m!110391))

(assert (=> bm!10237 d!26951))

(declare-fun b!100079 () Bool)

(declare-fun e!65189 () Bool)

(assert (=> b!100079 (= e!65189 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100079 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!100080 () Bool)

(assert (=> b!100080 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (=> b!100080 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (ite c!16967 (_values!2485 newMap!16) lt!50042))))))

(declare-fun lt!50549 () ListLongMap!1557)

(declare-fun e!65190 () Bool)

(assert (=> b!100080 (= e!65190 (= (apply!93 lt!50549 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (ite c!16967 (_values!2485 newMap!16) lt!50042)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100081 () Bool)

(declare-fun lt!50552 () Unit!3031)

(declare-fun lt!50551 () Unit!3031)

(assert (=> b!100081 (= lt!50552 lt!50551)))

(declare-fun lt!50554 () (_ BitVec 64))

(declare-fun lt!50553 () V!3163)

(declare-fun lt!50550 () (_ BitVec 64))

(declare-fun lt!50548 () ListLongMap!1557)

(assert (=> b!100081 (not (contains!810 (+!139 lt!50548 (tuple2!2367 lt!50554 lt!50553)) lt!50550))))

(assert (=> b!100081 (= lt!50551 (addStillNotContains!43 lt!50548 lt!50554 lt!50553 lt!50550))))

(assert (=> b!100081 (= lt!50550 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!100081 (= lt!50553 (get!1304 (select (arr!2021 (ite c!16967 (_values!2485 newMap!16) lt!50042)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!100081 (= lt!50554 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!10316 () ListLongMap!1557)

(assert (=> b!100081 (= lt!50548 call!10316)))

(declare-fun e!65188 () ListLongMap!1557)

(assert (=> b!100081 (= e!65188 (+!139 call!10316 (tuple2!2367 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (get!1304 (select (arr!2021 (ite c!16967 (_values!2485 newMap!16) lt!50042)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100082 () Bool)

(declare-fun e!65192 () Bool)

(assert (=> b!100082 (= e!65192 (isEmpty!364 lt!50549))))

(declare-fun b!100083 () Bool)

(declare-fun e!65191 () Bool)

(assert (=> b!100083 (= e!65191 e!65190)))

(assert (=> b!100083 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun res!50230 () Bool)

(assert (=> b!100083 (= res!50230 (contains!810 lt!50549 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100083 (=> (not res!50230) (not e!65190))))

(declare-fun b!100084 () Bool)

(declare-fun e!65187 () ListLongMap!1557)

(assert (=> b!100084 (= e!65187 (ListLongMap!1558 Nil!1612))))

(declare-fun b!100085 () Bool)

(assert (=> b!100085 (= e!65187 e!65188)))

(declare-fun c!17144 () Bool)

(assert (=> b!100085 (= c!17144 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!26953 () Bool)

(declare-fun e!65193 () Bool)

(assert (=> d!26953 e!65193))

(declare-fun res!50229 () Bool)

(assert (=> d!26953 (=> (not res!50229) (not e!65193))))

(assert (=> d!26953 (= res!50229 (not (contains!810 lt!50549 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26953 (= lt!50549 e!65187)))

(declare-fun c!17143 () Bool)

(assert (=> d!26953 (= c!17143 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!26953 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26953 (= (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite c!16967 (_values!2485 newMap!16) lt!50042) (mask!6609 newMap!16) (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) (zeroValue!2383 newMap!16) (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50549)))

(declare-fun b!100086 () Bool)

(assert (=> b!100086 (= e!65193 e!65191)))

(declare-fun c!17145 () Bool)

(assert (=> b!100086 (= c!17145 e!65189)))

(declare-fun res!50231 () Bool)

(assert (=> b!100086 (=> (not res!50231) (not e!65189))))

(assert (=> b!100086 (= res!50231 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun bm!10313 () Bool)

(assert (=> bm!10313 (= call!10316 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite c!16967 (_values!2485 newMap!16) lt!50042) (mask!6609 newMap!16) (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) (zeroValue!2383 newMap!16) (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16)))))

(declare-fun b!100087 () Bool)

(declare-fun res!50228 () Bool)

(assert (=> b!100087 (=> (not res!50228) (not e!65193))))

(assert (=> b!100087 (= res!50228 (not (contains!810 lt!50549 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100088 () Bool)

(assert (=> b!100088 (= e!65192 (= lt!50549 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite c!16967 (_values!2485 newMap!16) lt!50042) (mask!6609 newMap!16) (ite c!16967 (ite c!16973 (extraKeys!2319 newMap!16) lt!50045) (extraKeys!2319 newMap!16)) (zeroValue!2383 newMap!16) (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16))))))

(declare-fun b!100089 () Bool)

(assert (=> b!100089 (= e!65188 call!10316)))

(declare-fun b!100090 () Bool)

(assert (=> b!100090 (= e!65191 e!65192)))

(declare-fun c!17146 () Bool)

(assert (=> b!100090 (= c!17146 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (= (and d!26953 c!17143) b!100084))

(assert (= (and d!26953 (not c!17143)) b!100085))

(assert (= (and b!100085 c!17144) b!100081))

(assert (= (and b!100085 (not c!17144)) b!100089))

(assert (= (or b!100081 b!100089) bm!10313))

(assert (= (and d!26953 res!50229) b!100087))

(assert (= (and b!100087 res!50228) b!100086))

(assert (= (and b!100086 res!50231) b!100079))

(assert (= (and b!100086 c!17145) b!100083))

(assert (= (and b!100086 (not c!17145)) b!100090))

(assert (= (and b!100083 res!50230) b!100080))

(assert (= (and b!100090 c!17146) b!100088))

(assert (= (and b!100090 (not c!17146)) b!100082))

(declare-fun b_lambda!4485 () Bool)

(assert (=> (not b_lambda!4485) (not b!100080)))

(assert (=> b!100080 t!5605))

(declare-fun b_and!6165 () Bool)

(assert (= b_and!6161 (and (=> t!5605 result!3311) b_and!6165)))

(assert (=> b!100080 t!5607))

(declare-fun b_and!6167 () Bool)

(assert (= b_and!6163 (and (=> t!5607 result!3313) b_and!6167)))

(declare-fun b_lambda!4487 () Bool)

(assert (=> (not b_lambda!4487) (not b!100081)))

(assert (=> b!100081 t!5605))

(declare-fun b_and!6169 () Bool)

(assert (= b_and!6165 (and (=> t!5605 result!3311) b_and!6169)))

(assert (=> b!100081 t!5607))

(declare-fun b_and!6171 () Bool)

(assert (= b_and!6167 (and (=> t!5607 result!3313) b_and!6171)))

(assert (=> b!100085 m!109349))

(assert (=> b!100085 m!109349))

(assert (=> b!100085 m!109367))

(assert (=> b!100083 m!109349))

(assert (=> b!100083 m!109349))

(declare-fun m!110393 () Bool)

(assert (=> b!100083 m!110393))

(declare-fun m!110395 () Bool)

(assert (=> b!100082 m!110395))

(assert (=> b!100079 m!109349))

(assert (=> b!100079 m!109349))

(assert (=> b!100079 m!109367))

(declare-fun m!110397 () Bool)

(assert (=> bm!10313 m!110397))

(declare-fun m!110399 () Bool)

(assert (=> b!100087 m!110399))

(assert (=> b!100081 m!109355))

(declare-fun m!110401 () Bool)

(assert (=> b!100081 m!110401))

(assert (=> b!100081 m!109827))

(declare-fun m!110403 () Bool)

(assert (=> b!100081 m!110403))

(declare-fun m!110405 () Bool)

(assert (=> b!100081 m!110405))

(declare-fun m!110407 () Bool)

(assert (=> b!100081 m!110407))

(assert (=> b!100081 m!109349))

(assert (=> b!100081 m!109827))

(assert (=> b!100081 m!109355))

(assert (=> b!100081 m!109829))

(assert (=> b!100081 m!110403))

(declare-fun m!110409 () Bool)

(assert (=> d!26953 m!110409))

(assert (=> d!26953 m!109329))

(assert (=> b!100088 m!110397))

(assert (=> b!100080 m!109355))

(assert (=> b!100080 m!109827))

(assert (=> b!100080 m!109355))

(assert (=> b!100080 m!109829))

(assert (=> b!100080 m!109827))

(assert (=> b!100080 m!109349))

(declare-fun m!110411 () Bool)

(assert (=> b!100080 m!110411))

(assert (=> b!100080 m!109349))

(assert (=> bm!10265 d!26953))

(assert (=> d!26741 d!26679))

(assert (=> b!99698 d!26837))

(assert (=> b!99707 d!26837))

(declare-fun d!26955 () Bool)

(assert (=> d!26955 (= (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943)) (not (isEmpty!365 (getValueByKey!150 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943))))))

(declare-fun bs!4126 () Bool)

(assert (= bs!4126 d!26955))

(assert (=> bs!4126 m!109647))

(declare-fun m!110413 () Bool)

(assert (=> bs!4126 m!110413))

(assert (=> b!99659 d!26955))

(declare-fun b!100092 () Bool)

(declare-fun e!65194 () Option!156)

(declare-fun e!65195 () Option!156)

(assert (=> b!100092 (= e!65194 e!65195)))

(declare-fun c!17148 () Bool)

(assert (=> b!100092 (= c!17148 (and ((_ is Cons!1611) (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))) (not (= (_1!1193 (h!2206 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))) lt!49943))))))

(declare-fun d!26957 () Bool)

(declare-fun c!17147 () Bool)

(assert (=> d!26957 (= c!17147 (and ((_ is Cons!1611) (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))) (= (_1!1193 (h!2206 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))) lt!49943)))))

(assert (=> d!26957 (= (getValueByKey!150 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943) e!65194)))

(declare-fun b!100094 () Bool)

(assert (=> b!100094 (= e!65195 None!154)))

(declare-fun b!100091 () Bool)

(assert (=> b!100091 (= e!65194 (Some!155 (_2!1193 (h!2206 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))))

(declare-fun b!100093 () Bool)

(assert (=> b!100093 (= e!65195 (getValueByKey!150 (t!5597 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))) lt!49943))))

(assert (= (and d!26957 c!17147) b!100091))

(assert (= (and d!26957 (not c!17147)) b!100092))

(assert (= (and b!100092 c!17148) b!100093))

(assert (= (and b!100092 (not c!17148)) b!100094))

(declare-fun m!110415 () Bool)

(assert (=> b!100093 m!110415))

(assert (=> b!99659 d!26957))

(declare-fun d!26959 () Bool)

(declare-fun e!65196 () Bool)

(assert (=> d!26959 e!65196))

(declare-fun res!50232 () Bool)

(assert (=> d!26959 (=> res!50232 e!65196)))

(declare-fun lt!50556 () Bool)

(assert (=> d!26959 (= res!50232 (not lt!50556))))

(declare-fun lt!50558 () Bool)

(assert (=> d!26959 (= lt!50556 lt!50558)))

(declare-fun lt!50555 () Unit!3031)

(declare-fun e!65197 () Unit!3031)

(assert (=> d!26959 (= lt!50555 e!65197)))

(declare-fun c!17149 () Bool)

(assert (=> d!26959 (= c!17149 lt!50558)))

(assert (=> d!26959 (= lt!50558 (containsKey!154 (toList!794 lt!50232) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!26959 (= (contains!810 lt!50232 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50556)))

(declare-fun b!100095 () Bool)

(declare-fun lt!50557 () Unit!3031)

(assert (=> b!100095 (= e!65197 lt!50557)))

(assert (=> b!100095 (= lt!50557 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50232) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100095 (isDefined!104 (getValueByKey!150 (toList!794 lt!50232) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100096 () Bool)

(declare-fun Unit!3065 () Unit!3031)

(assert (=> b!100096 (= e!65197 Unit!3065)))

(declare-fun b!100097 () Bool)

(assert (=> b!100097 (= e!65196 (isDefined!104 (getValueByKey!150 (toList!794 lt!50232) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!26959 c!17149) b!100095))

(assert (= (and d!26959 (not c!17149)) b!100096))

(assert (= (and d!26959 (not res!50232)) b!100097))

(declare-fun m!110417 () Bool)

(assert (=> d!26959 m!110417))

(declare-fun m!110419 () Bool)

(assert (=> b!100095 m!110419))

(declare-fun m!110421 () Bool)

(assert (=> b!100095 m!110421))

(assert (=> b!100095 m!110421))

(declare-fun m!110423 () Bool)

(assert (=> b!100095 m!110423))

(assert (=> b!100097 m!110421))

(assert (=> b!100097 m!110421))

(assert (=> b!100097 m!110423))

(assert (=> d!26737 d!26959))

(assert (=> d!26737 d!26673))

(declare-fun d!26961 () Bool)

(assert (=> d!26961 (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!50559 () Unit!3031)

(assert (=> d!26961 (= lt!50559 (choose!618 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!65198 () Bool)

(assert (=> d!26961 e!65198))

(declare-fun res!50233 () Bool)

(assert (=> d!26961 (=> (not res!50233) (not e!65198))))

(assert (=> d!26961 (= res!50233 (isStrictlySorted!300 (toList!794 lt!49947)))))

(assert (=> d!26961 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!50559)))

(declare-fun b!100098 () Bool)

(assert (=> b!100098 (= e!65198 (containsKey!154 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26961 res!50233) b!100098))

(assert (=> d!26961 m!109187))

(assert (=> d!26961 m!109805))

(assert (=> d!26961 m!109805))

(assert (=> d!26961 m!109807))

(assert (=> d!26961 m!109187))

(declare-fun m!110425 () Bool)

(assert (=> d!26961 m!110425))

(declare-fun m!110427 () Bool)

(assert (=> d!26961 m!110427))

(assert (=> b!100098 m!109187))

(assert (=> b!100098 m!109801))

(assert (=> b!99761 d!26961))

(declare-fun d!26963 () Bool)

(assert (=> d!26963 (= (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!365 (getValueByKey!150 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!4127 () Bool)

(assert (= bs!4127 d!26963))

(assert (=> bs!4127 m!109805))

(declare-fun m!110429 () Bool)

(assert (=> bs!4127 m!110429))

(assert (=> b!99761 d!26963))

(declare-fun b!100100 () Bool)

(declare-fun e!65199 () Option!156)

(declare-fun e!65200 () Option!156)

(assert (=> b!100100 (= e!65199 e!65200)))

(declare-fun c!17151 () Bool)

(assert (=> b!100100 (= c!17151 (and ((_ is Cons!1611) (toList!794 lt!49947)) (not (= (_1!1193 (h!2206 (toList!794 lt!49947))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun d!26965 () Bool)

(declare-fun c!17150 () Bool)

(assert (=> d!26965 (= c!17150 (and ((_ is Cons!1611) (toList!794 lt!49947)) (= (_1!1193 (h!2206 (toList!794 lt!49947))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26965 (= (getValueByKey!150 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!65199)))

(declare-fun b!100102 () Bool)

(assert (=> b!100102 (= e!65200 None!154)))

(declare-fun b!100099 () Bool)

(assert (=> b!100099 (= e!65199 (Some!155 (_2!1193 (h!2206 (toList!794 lt!49947)))))))

(declare-fun b!100101 () Bool)

(assert (=> b!100101 (= e!65200 (getValueByKey!150 (t!5597 (toList!794 lt!49947)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!26965 c!17150) b!100099))

(assert (= (and d!26965 (not c!17150)) b!100100))

(assert (= (and b!100100 c!17151) b!100101))

(assert (= (and b!100100 (not c!17151)) b!100102))

(assert (=> b!100101 m!109187))

(declare-fun m!110431 () Bool)

(assert (=> b!100101 m!110431))

(assert (=> b!99761 d!26965))

(declare-fun d!26967 () Bool)

(declare-fun e!65201 () Bool)

(assert (=> d!26967 e!65201))

(declare-fun res!50234 () Bool)

(assert (=> d!26967 (=> (not res!50234) (not e!65201))))

(declare-fun lt!50561 () ListLongMap!1557)

(assert (=> d!26967 (= res!50234 (contains!810 lt!50561 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50563 () List!1615)

(assert (=> d!26967 (= lt!50561 (ListLongMap!1558 lt!50563))))

(declare-fun lt!50562 () Unit!3031)

(declare-fun lt!50560 () Unit!3031)

(assert (=> d!26967 (= lt!50562 lt!50560)))

(assert (=> d!26967 (= (getValueByKey!150 lt!50563 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26967 (= lt!50560 (lemmaContainsTupThenGetReturnValue!68 lt!50563 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26967 (= lt!50563 (insertStrictlySorted!70 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26967 (= (+!139 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50561)))

(declare-fun b!100103 () Bool)

(declare-fun res!50235 () Bool)

(assert (=> b!100103 (=> (not res!50235) (not e!65201))))

(assert (=> b!100103 (= res!50235 (= (getValueByKey!150 (toList!794 lt!50561) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100104 () Bool)

(assert (=> b!100104 (= e!65201 (contains!812 (toList!794 lt!50561) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26967 res!50234) b!100103))

(assert (= (and b!100103 res!50235) b!100104))

(declare-fun m!110433 () Bool)

(assert (=> d!26967 m!110433))

(declare-fun m!110435 () Bool)

(assert (=> d!26967 m!110435))

(declare-fun m!110437 () Bool)

(assert (=> d!26967 m!110437))

(declare-fun m!110439 () Bool)

(assert (=> d!26967 m!110439))

(declare-fun m!110441 () Bool)

(assert (=> b!100103 m!110441))

(declare-fun m!110443 () Bool)

(assert (=> b!100104 m!110443))

(assert (=> d!26723 d!26967))

(declare-fun d!26969 () Bool)

(assert (=> d!26969 (= (+!139 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(assert (=> d!26969 true))

(declare-fun _$8!88 () Unit!3031)

(assert (=> d!26969 (= (choose!613 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)) _$8!88)))

(declare-fun bs!4128 () Bool)

(assert (= bs!4128 d!26969))

(assert (=> bs!4128 m!109199))

(assert (=> bs!4128 m!109199))

(assert (=> bs!4128 m!109495))

(assert (=> bs!4128 m!109123))

(assert (=> bs!4128 m!109493))

(assert (=> d!26723 d!26969))

(assert (=> d!26723 d!26709))

(declare-fun b!100105 () Bool)

(declare-fun e!65212 () Bool)

(declare-fun call!10321 () Bool)

(assert (=> b!100105 (= e!65212 (not call!10321))))

(declare-fun b!100106 () Bool)

(declare-fun e!65213 () Bool)

(declare-fun e!65214 () Bool)

(assert (=> b!100106 (= e!65213 e!65214)))

(declare-fun res!50240 () Bool)

(assert (=> b!100106 (=> (not res!50240) (not e!65214))))

(declare-fun lt!50569 () ListLongMap!1557)

(assert (=> b!100106 (= res!50240 (contains!810 lt!50569 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100106 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun bm!10314 () Bool)

(declare-fun call!10318 () ListLongMap!1557)

(declare-fun call!10317 () ListLongMap!1557)

(assert (=> bm!10314 (= call!10318 call!10317)))

(declare-fun bm!10315 () Bool)

(declare-fun call!10319 () ListLongMap!1557)

(assert (=> bm!10315 (= call!10317 call!10319)))

(declare-fun b!100107 () Bool)

(declare-fun e!65203 () Bool)

(assert (=> b!100107 (= e!65212 e!65203)))

(declare-fun res!50236 () Bool)

(assert (=> b!100107 (= res!50236 call!10321)))

(assert (=> b!100107 (=> (not res!50236) (not e!65203))))

(declare-fun b!100108 () Bool)

(declare-fun e!65202 () Bool)

(declare-fun call!10320 () Bool)

(assert (=> b!100108 (= e!65202 (not call!10320))))

(declare-fun e!65204 () Bool)

(declare-fun b!100109 () Bool)

(assert (=> b!100109 (= e!65204 (= (apply!93 lt!50569 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100110 () Bool)

(declare-fun c!17156 () Bool)

(assert (=> b!100110 (= c!17156 (and (not (= (bvand lt!50045 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!50045 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65206 () ListLongMap!1557)

(declare-fun e!65211 () ListLongMap!1557)

(assert (=> b!100110 (= e!65206 e!65211)))

(declare-fun call!10323 () ListLongMap!1557)

(declare-fun c!17157 () Bool)

(declare-fun bm!10316 () Bool)

(declare-fun c!17154 () Bool)

(assert (=> bm!10316 (= call!10323 (+!139 (ite c!17154 call!10319 (ite c!17157 call!10317 call!10318)) (ite (or c!17154 c!17157) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100111 () Bool)

(declare-fun e!65207 () Bool)

(assert (=> b!100111 (= e!65207 e!65202)))

(declare-fun c!17153 () Bool)

(assert (=> b!100111 (= c!17153 (not (= (bvand lt!50045 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100112 () Bool)

(declare-fun e!65210 () Unit!3031)

(declare-fun lt!50566 () Unit!3031)

(assert (=> b!100112 (= e!65210 lt!50566)))

(declare-fun lt!50581 () ListLongMap!1557)

(assert (=> b!100112 (= lt!50581 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50578 () (_ BitVec 64))

(assert (=> b!100112 (= lt!50578 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50565 () (_ BitVec 64))

(assert (=> b!100112 (= lt!50565 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50567 () Unit!3031)

(assert (=> b!100112 (= lt!50567 (addStillContains!69 lt!50581 lt!50578 (zeroValue!2383 newMap!16) lt!50565))))

(assert (=> b!100112 (contains!810 (+!139 lt!50581 (tuple2!2367 lt!50578 (zeroValue!2383 newMap!16))) lt!50565)))

(declare-fun lt!50576 () Unit!3031)

(assert (=> b!100112 (= lt!50576 lt!50567)))

(declare-fun lt!50575 () ListLongMap!1557)

(assert (=> b!100112 (= lt!50575 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50577 () (_ BitVec 64))

(assert (=> b!100112 (= lt!50577 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50574 () (_ BitVec 64))

(assert (=> b!100112 (= lt!50574 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50573 () Unit!3031)

(assert (=> b!100112 (= lt!50573 (addApplyDifferent!69 lt!50575 lt!50577 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50574))))

(assert (=> b!100112 (= (apply!93 (+!139 lt!50575 (tuple2!2367 lt!50577 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50574) (apply!93 lt!50575 lt!50574))))

(declare-fun lt!50572 () Unit!3031)

(assert (=> b!100112 (= lt!50572 lt!50573)))

(declare-fun lt!50582 () ListLongMap!1557)

(assert (=> b!100112 (= lt!50582 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50570 () (_ BitVec 64))

(assert (=> b!100112 (= lt!50570 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50583 () (_ BitVec 64))

(assert (=> b!100112 (= lt!50583 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50568 () Unit!3031)

(assert (=> b!100112 (= lt!50568 (addApplyDifferent!69 lt!50582 lt!50570 (zeroValue!2383 newMap!16) lt!50583))))

(assert (=> b!100112 (= (apply!93 (+!139 lt!50582 (tuple2!2367 lt!50570 (zeroValue!2383 newMap!16))) lt!50583) (apply!93 lt!50582 lt!50583))))

(declare-fun lt!50580 () Unit!3031)

(assert (=> b!100112 (= lt!50580 lt!50568)))

(declare-fun lt!50571 () ListLongMap!1557)

(assert (=> b!100112 (= lt!50571 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50579 () (_ BitVec 64))

(assert (=> b!100112 (= lt!50579 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50585 () (_ BitVec 64))

(assert (=> b!100112 (= lt!50585 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100112 (= lt!50566 (addApplyDifferent!69 lt!50571 lt!50579 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!50585))))

(assert (=> b!100112 (= (apply!93 (+!139 lt!50571 (tuple2!2367 lt!50579 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50585) (apply!93 lt!50571 lt!50585))))

(declare-fun b!100113 () Bool)

(declare-fun call!10322 () ListLongMap!1557)

(assert (=> b!100113 (= e!65211 call!10322)))

(declare-fun b!100114 () Bool)

(declare-fun res!50243 () Bool)

(assert (=> b!100114 (=> (not res!50243) (not e!65207))))

(assert (=> b!100114 (= res!50243 e!65212)))

(declare-fun c!17155 () Bool)

(assert (=> b!100114 (= c!17155 (not (= (bvand lt!50045 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!100115 () Bool)

(declare-fun e!65208 () Bool)

(assert (=> b!100115 (= e!65208 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100116 () Bool)

(assert (=> b!100116 (= e!65214 (= (apply!93 lt!50569 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100116 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_values!2485 newMap!16))))))

(assert (=> b!100116 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun b!100117 () Bool)

(declare-fun Unit!3066 () Unit!3031)

(assert (=> b!100117 (= e!65210 Unit!3066)))

(declare-fun b!100118 () Bool)

(assert (=> b!100118 (= e!65206 call!10322)))

(declare-fun bm!10317 () Bool)

(assert (=> bm!10317 (= call!10320 (contains!810 lt!50569 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10318 () Bool)

(assert (=> bm!10318 (= call!10322 call!10323)))

(declare-fun b!100119 () Bool)

(declare-fun res!50244 () Bool)

(assert (=> b!100119 (=> (not res!50244) (not e!65207))))

(assert (=> b!100119 (= res!50244 e!65213)))

(declare-fun res!50242 () Bool)

(assert (=> b!100119 (=> res!50242 e!65213)))

(assert (=> b!100119 (= res!50242 (not e!65208))))

(declare-fun res!50241 () Bool)

(assert (=> b!100119 (=> (not res!50241) (not e!65208))))

(assert (=> b!100119 (= res!50241 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun d!26971 () Bool)

(assert (=> d!26971 e!65207))

(declare-fun res!50239 () Bool)

(assert (=> d!26971 (=> (not res!50239) (not e!65207))))

(assert (=> d!26971 (= res!50239 (or (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))))

(declare-fun lt!50584 () ListLongMap!1557)

(assert (=> d!26971 (= lt!50569 lt!50584)))

(declare-fun lt!50564 () Unit!3031)

(assert (=> d!26971 (= lt!50564 e!65210)))

(declare-fun c!17152 () Bool)

(declare-fun e!65205 () Bool)

(assert (=> d!26971 (= c!17152 e!65205)))

(declare-fun res!50237 () Bool)

(assert (=> d!26971 (=> (not res!50237) (not e!65205))))

(assert (=> d!26971 (= res!50237 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun e!65209 () ListLongMap!1557)

(assert (=> d!26971 (= lt!50584 e!65209)))

(assert (=> d!26971 (= c!17154 (and (not (= (bvand lt!50045 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!50045 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!26971 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26971 (= (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50569)))

(declare-fun bm!10319 () Bool)

(assert (=> bm!10319 (= call!10321 (contains!810 lt!50569 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10320 () Bool)

(assert (=> bm!10320 (= call!10319 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) lt!50045 (zeroValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!100120 () Bool)

(assert (=> b!100120 (= e!65203 (= (apply!93 lt!50569 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun b!100121 () Bool)

(assert (=> b!100121 (= e!65211 call!10318)))

(declare-fun b!100122 () Bool)

(assert (=> b!100122 (= e!65202 e!65204)))

(declare-fun res!50238 () Bool)

(assert (=> b!100122 (= res!50238 call!10320)))

(assert (=> b!100122 (=> (not res!50238) (not e!65204))))

(declare-fun b!100123 () Bool)

(assert (=> b!100123 (= e!65209 e!65206)))

(assert (=> b!100123 (= c!17157 (and (not (= (bvand lt!50045 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!50045 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100124 () Bool)

(assert (=> b!100124 (= e!65205 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100125 () Bool)

(assert (=> b!100125 (= e!65209 (+!139 call!10323 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26971 c!17154) b!100125))

(assert (= (and d!26971 (not c!17154)) b!100123))

(assert (= (and b!100123 c!17157) b!100118))

(assert (= (and b!100123 (not c!17157)) b!100110))

(assert (= (and b!100110 c!17156) b!100113))

(assert (= (and b!100110 (not c!17156)) b!100121))

(assert (= (or b!100113 b!100121) bm!10314))

(assert (= (or b!100118 bm!10314) bm!10315))

(assert (= (or b!100118 b!100113) bm!10318))

(assert (= (or b!100125 bm!10315) bm!10320))

(assert (= (or b!100125 bm!10318) bm!10316))

(assert (= (and d!26971 res!50237) b!100124))

(assert (= (and d!26971 c!17152) b!100112))

(assert (= (and d!26971 (not c!17152)) b!100117))

(assert (= (and d!26971 res!50239) b!100119))

(assert (= (and b!100119 res!50241) b!100115))

(assert (= (and b!100119 (not res!50242)) b!100106))

(assert (= (and b!100106 res!50240) b!100116))

(assert (= (and b!100119 res!50244) b!100114))

(assert (= (and b!100114 c!17155) b!100107))

(assert (= (and b!100114 (not c!17155)) b!100105))

(assert (= (and b!100107 res!50236) b!100120))

(assert (= (or b!100107 b!100105) bm!10319))

(assert (= (and b!100114 res!50243) b!100111))

(assert (= (and b!100111 c!17153) b!100122))

(assert (= (and b!100111 (not c!17153)) b!100108))

(assert (= (and b!100122 res!50238) b!100109))

(assert (= (or b!100122 b!100108) bm!10317))

(declare-fun b_lambda!4489 () Bool)

(assert (=> (not b_lambda!4489) (not b!100116)))

(assert (=> b!100116 t!5605))

(declare-fun b_and!6173 () Bool)

(assert (= b_and!6169 (and (=> t!5605 result!3311) b_and!6173)))

(assert (=> b!100116 t!5607))

(declare-fun b_and!6175 () Bool)

(assert (= b_and!6171 (and (=> t!5607 result!3313) b_and!6175)))

(assert (=> b!100116 m!109349))

(declare-fun m!110445 () Bool)

(assert (=> b!100116 m!110445))

(assert (=> b!100116 m!109353))

(assert (=> b!100116 m!109353))

(assert (=> b!100116 m!109355))

(assert (=> b!100116 m!109357))

(assert (=> b!100116 m!109349))

(assert (=> b!100116 m!109355))

(declare-fun m!110447 () Bool)

(assert (=> b!100109 m!110447))

(assert (=> bm!10320 m!109123))

(declare-fun m!110449 () Bool)

(assert (=> bm!10320 m!110449))

(assert (=> b!100106 m!109349))

(assert (=> b!100106 m!109349))

(declare-fun m!110451 () Bool)

(assert (=> b!100106 m!110451))

(declare-fun m!110453 () Bool)

(assert (=> bm!10317 m!110453))

(assert (=> d!26971 m!109329))

(assert (=> b!100115 m!109349))

(assert (=> b!100115 m!109349))

(assert (=> b!100115 m!109367))

(declare-fun m!110455 () Bool)

(assert (=> b!100120 m!110455))

(declare-fun m!110457 () Bool)

(assert (=> b!100125 m!110457))

(declare-fun m!110459 () Bool)

(assert (=> bm!10319 m!110459))

(assert (=> b!100124 m!109349))

(assert (=> b!100124 m!109349))

(assert (=> b!100124 m!109367))

(declare-fun m!110461 () Bool)

(assert (=> b!100112 m!110461))

(declare-fun m!110463 () Bool)

(assert (=> b!100112 m!110463))

(declare-fun m!110465 () Bool)

(assert (=> b!100112 m!110465))

(declare-fun m!110467 () Bool)

(assert (=> b!100112 m!110467))

(declare-fun m!110469 () Bool)

(assert (=> b!100112 m!110469))

(assert (=> b!100112 m!110467))

(declare-fun m!110471 () Bool)

(assert (=> b!100112 m!110471))

(declare-fun m!110473 () Bool)

(assert (=> b!100112 m!110473))

(declare-fun m!110475 () Bool)

(assert (=> b!100112 m!110475))

(assert (=> b!100112 m!109349))

(declare-fun m!110477 () Bool)

(assert (=> b!100112 m!110477))

(assert (=> b!100112 m!109123))

(declare-fun m!110479 () Bool)

(assert (=> b!100112 m!110479))

(assert (=> b!100112 m!110469))

(declare-fun m!110481 () Bool)

(assert (=> b!100112 m!110481))

(assert (=> b!100112 m!110461))

(declare-fun m!110483 () Bool)

(assert (=> b!100112 m!110483))

(assert (=> b!100112 m!109123))

(declare-fun m!110485 () Bool)

(assert (=> b!100112 m!110485))

(assert (=> b!100112 m!110483))

(declare-fun m!110487 () Bool)

(assert (=> b!100112 m!110487))

(assert (=> b!100112 m!109123))

(assert (=> b!100112 m!110449))

(declare-fun m!110489 () Bool)

(assert (=> b!100112 m!110489))

(declare-fun m!110491 () Bool)

(assert (=> bm!10316 m!110491))

(assert (=> d!26723 d!26971))

(assert (=> d!26723 d!26835))

(assert (=> b!99779 d!26837))

(assert (=> d!26795 d!26835))

(declare-fun d!26973 () Bool)

(declare-fun res!50245 () Bool)

(declare-fun e!65215 () Bool)

(assert (=> d!26973 (=> res!50245 e!65215)))

(assert (=> d!26973 (= res!50245 (and ((_ is Cons!1611) (t!5597 (toList!794 lt!49862))) (= (_1!1193 (h!2206 (t!5597 (toList!794 lt!49862)))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (=> d!26973 (= (containsKey!154 (t!5597 (toList!794 lt!49862)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) e!65215)))

(declare-fun b!100126 () Bool)

(declare-fun e!65216 () Bool)

(assert (=> b!100126 (= e!65215 e!65216)))

(declare-fun res!50246 () Bool)

(assert (=> b!100126 (=> (not res!50246) (not e!65216))))

(assert (=> b!100126 (= res!50246 (and (or (not ((_ is Cons!1611) (t!5597 (toList!794 lt!49862)))) (bvsle (_1!1193 (h!2206 (t!5597 (toList!794 lt!49862)))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))) ((_ is Cons!1611) (t!5597 (toList!794 lt!49862))) (bvslt (_1!1193 (h!2206 (t!5597 (toList!794 lt!49862)))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(declare-fun b!100127 () Bool)

(assert (=> b!100127 (= e!65216 (containsKey!154 (t!5597 (t!5597 (toList!794 lt!49862))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!26973 (not res!50245)) b!100126))

(assert (= (and b!100126 res!50246) b!100127))

(assert (=> b!100127 m!109089))

(declare-fun m!110493 () Bool)

(assert (=> b!100127 m!110493))

(assert (=> b!99629 d!26973))

(declare-fun d!26975 () Bool)

(declare-fun e!65217 () Bool)

(assert (=> d!26975 e!65217))

(declare-fun res!50247 () Bool)

(assert (=> d!26975 (=> (not res!50247) (not e!65217))))

(declare-fun lt!50587 () ListLongMap!1557)

(assert (=> d!26975 (= res!50247 (contains!810 lt!50587 (_1!1193 (tuple2!2367 lt!50237 lt!50236))))))

(declare-fun lt!50589 () List!1615)

(assert (=> d!26975 (= lt!50587 (ListLongMap!1558 lt!50589))))

(declare-fun lt!50588 () Unit!3031)

(declare-fun lt!50586 () Unit!3031)

(assert (=> d!26975 (= lt!50588 lt!50586)))

(assert (=> d!26975 (= (getValueByKey!150 lt!50589 (_1!1193 (tuple2!2367 lt!50237 lt!50236))) (Some!155 (_2!1193 (tuple2!2367 lt!50237 lt!50236))))))

(assert (=> d!26975 (= lt!50586 (lemmaContainsTupThenGetReturnValue!68 lt!50589 (_1!1193 (tuple2!2367 lt!50237 lt!50236)) (_2!1193 (tuple2!2367 lt!50237 lt!50236))))))

(assert (=> d!26975 (= lt!50589 (insertStrictlySorted!70 (toList!794 lt!50231) (_1!1193 (tuple2!2367 lt!50237 lt!50236)) (_2!1193 (tuple2!2367 lt!50237 lt!50236))))))

(assert (=> d!26975 (= (+!139 lt!50231 (tuple2!2367 lt!50237 lt!50236)) lt!50587)))

(declare-fun b!100128 () Bool)

(declare-fun res!50248 () Bool)

(assert (=> b!100128 (=> (not res!50248) (not e!65217))))

(assert (=> b!100128 (= res!50248 (= (getValueByKey!150 (toList!794 lt!50587) (_1!1193 (tuple2!2367 lt!50237 lt!50236))) (Some!155 (_2!1193 (tuple2!2367 lt!50237 lt!50236)))))))

(declare-fun b!100129 () Bool)

(assert (=> b!100129 (= e!65217 (contains!812 (toList!794 lt!50587) (tuple2!2367 lt!50237 lt!50236)))))

(assert (= (and d!26975 res!50247) b!100128))

(assert (= (and b!100128 res!50248) b!100129))

(declare-fun m!110495 () Bool)

(assert (=> d!26975 m!110495))

(declare-fun m!110497 () Bool)

(assert (=> d!26975 m!110497))

(declare-fun m!110499 () Bool)

(assert (=> d!26975 m!110499))

(declare-fun m!110501 () Bool)

(assert (=> d!26975 m!110501))

(declare-fun m!110503 () Bool)

(assert (=> b!100128 m!110503))

(declare-fun m!110505 () Bool)

(assert (=> b!100129 m!110505))

(assert (=> b!99614 d!26975))

(declare-fun d!26977 () Bool)

(declare-fun e!65218 () Bool)

(assert (=> d!26977 e!65218))

(declare-fun res!50249 () Bool)

(assert (=> d!26977 (=> res!50249 e!65218)))

(declare-fun lt!50591 () Bool)

(assert (=> d!26977 (= res!50249 (not lt!50591))))

(declare-fun lt!50593 () Bool)

(assert (=> d!26977 (= lt!50591 lt!50593)))

(declare-fun lt!50590 () Unit!3031)

(declare-fun e!65219 () Unit!3031)

(assert (=> d!26977 (= lt!50590 e!65219)))

(declare-fun c!17158 () Bool)

(assert (=> d!26977 (= c!17158 lt!50593)))

(assert (=> d!26977 (= lt!50593 (containsKey!154 (toList!794 (+!139 lt!50231 (tuple2!2367 lt!50237 lt!50236))) lt!50233))))

(assert (=> d!26977 (= (contains!810 (+!139 lt!50231 (tuple2!2367 lt!50237 lt!50236)) lt!50233) lt!50591)))

(declare-fun b!100130 () Bool)

(declare-fun lt!50592 () Unit!3031)

(assert (=> b!100130 (= e!65219 lt!50592)))

(assert (=> b!100130 (= lt!50592 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 (+!139 lt!50231 (tuple2!2367 lt!50237 lt!50236))) lt!50233))))

(assert (=> b!100130 (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!50231 (tuple2!2367 lt!50237 lt!50236))) lt!50233))))

(declare-fun b!100131 () Bool)

(declare-fun Unit!3067 () Unit!3031)

(assert (=> b!100131 (= e!65219 Unit!3067)))

(declare-fun b!100132 () Bool)

(assert (=> b!100132 (= e!65218 (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!50231 (tuple2!2367 lt!50237 lt!50236))) lt!50233)))))

(assert (= (and d!26977 c!17158) b!100130))

(assert (= (and d!26977 (not c!17158)) b!100131))

(assert (= (and d!26977 (not res!50249)) b!100132))

(declare-fun m!110507 () Bool)

(assert (=> d!26977 m!110507))

(declare-fun m!110509 () Bool)

(assert (=> b!100130 m!110509))

(declare-fun m!110511 () Bool)

(assert (=> b!100130 m!110511))

(assert (=> b!100130 m!110511))

(declare-fun m!110513 () Bool)

(assert (=> b!100130 m!110513))

(assert (=> b!100132 m!110511))

(assert (=> b!100132 m!110511))

(assert (=> b!100132 m!110513))

(assert (=> b!99614 d!26977))

(declare-fun d!26979 () Bool)

(assert (=> d!26979 (not (contains!810 (+!139 lt!50231 (tuple2!2367 lt!50237 lt!50236)) lt!50233))))

(declare-fun lt!50596 () Unit!3031)

(declare-fun choose!621 (ListLongMap!1557 (_ BitVec 64) V!3163 (_ BitVec 64)) Unit!3031)

(assert (=> d!26979 (= lt!50596 (choose!621 lt!50231 lt!50237 lt!50236 lt!50233))))

(declare-fun e!65222 () Bool)

(assert (=> d!26979 e!65222))

(declare-fun res!50252 () Bool)

(assert (=> d!26979 (=> (not res!50252) (not e!65222))))

(assert (=> d!26979 (= res!50252 (not (contains!810 lt!50231 lt!50233)))))

(assert (=> d!26979 (= (addStillNotContains!43 lt!50231 lt!50237 lt!50236 lt!50233) lt!50596)))

(declare-fun b!100136 () Bool)

(assert (=> b!100136 (= e!65222 (not (= lt!50237 lt!50233)))))

(assert (= (and d!26979 res!50252) b!100136))

(assert (=> d!26979 m!109537))

(assert (=> d!26979 m!109537))

(assert (=> d!26979 m!109539))

(declare-fun m!110515 () Bool)

(assert (=> d!26979 m!110515))

(declare-fun m!110517 () Bool)

(assert (=> d!26979 m!110517))

(assert (=> b!99614 d!26979))

(declare-fun d!26981 () Bool)

(declare-fun e!65223 () Bool)

(assert (=> d!26981 e!65223))

(declare-fun res!50253 () Bool)

(assert (=> d!26981 (=> (not res!50253) (not e!65223))))

(declare-fun lt!50598 () ListLongMap!1557)

(assert (=> d!26981 (= res!50253 (contains!810 lt!50598 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50600 () List!1615)

(assert (=> d!26981 (= lt!50598 (ListLongMap!1558 lt!50600))))

(declare-fun lt!50599 () Unit!3031)

(declare-fun lt!50597 () Unit!3031)

(assert (=> d!26981 (= lt!50599 lt!50597)))

(assert (=> d!26981 (= (getValueByKey!150 lt!50600 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26981 (= lt!50597 (lemmaContainsTupThenGetReturnValue!68 lt!50600 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26981 (= lt!50600 (insertStrictlySorted!70 (toList!794 call!10249) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!26981 (= (+!139 call!10249 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50598)))

(declare-fun b!100137 () Bool)

(declare-fun res!50254 () Bool)

(assert (=> b!100137 (=> (not res!50254) (not e!65223))))

(assert (=> b!100137 (= res!50254 (= (getValueByKey!150 (toList!794 lt!50598) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100138 () Bool)

(assert (=> b!100138 (= e!65223 (contains!812 (toList!794 lt!50598) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!26981 res!50253) b!100137))

(assert (= (and b!100137 res!50254) b!100138))

(declare-fun m!110519 () Bool)

(assert (=> d!26981 m!110519))

(declare-fun m!110521 () Bool)

(assert (=> d!26981 m!110521))

(declare-fun m!110523 () Bool)

(assert (=> d!26981 m!110523))

(declare-fun m!110525 () Bool)

(assert (=> d!26981 m!110525))

(declare-fun m!110527 () Bool)

(assert (=> b!100137 m!110527))

(declare-fun m!110529 () Bool)

(assert (=> b!100138 m!110529))

(assert (=> b!99614 d!26981))

(assert (=> b!99614 d!26827))

(declare-fun d!26983 () Bool)

(declare-fun res!50255 () Bool)

(declare-fun e!65224 () Bool)

(assert (=> d!26983 (=> (not res!50255) (not e!65224))))

(assert (=> d!26983 (= res!50255 (simpleValid!68 (_2!1192 lt!50153)))))

(assert (=> d!26983 (= (valid!388 (_2!1192 lt!50153)) e!65224)))

(declare-fun b!100139 () Bool)

(declare-fun res!50256 () Bool)

(assert (=> b!100139 (=> (not res!50256) (not e!65224))))

(assert (=> b!100139 (= res!50256 (= (arrayCountValidKeys!0 (_keys!4196 (_2!1192 lt!50153)) #b00000000000000000000000000000000 (size!2271 (_keys!4196 (_2!1192 lt!50153)))) (_size!478 (_2!1192 lt!50153))))))

(declare-fun b!100140 () Bool)

(declare-fun res!50257 () Bool)

(assert (=> b!100140 (=> (not res!50257) (not e!65224))))

(assert (=> b!100140 (= res!50257 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 (_2!1192 lt!50153)) (mask!6609 (_2!1192 lt!50153))))))

(declare-fun b!100141 () Bool)

(assert (=> b!100141 (= e!65224 (arrayNoDuplicates!0 (_keys!4196 (_2!1192 lt!50153)) #b00000000000000000000000000000000 Nil!1613))))

(assert (= (and d!26983 res!50255) b!100139))

(assert (= (and b!100139 res!50256) b!100140))

(assert (= (and b!100140 res!50257) b!100141))

(declare-fun m!110531 () Bool)

(assert (=> d!26983 m!110531))

(declare-fun m!110533 () Bool)

(assert (=> b!100139 m!110533))

(declare-fun m!110535 () Bool)

(assert (=> b!100140 m!110535))

(declare-fun m!110537 () Bool)

(assert (=> b!100141 m!110537))

(assert (=> b!99517 d!26983))

(assert (=> d!26747 d!26799))

(declare-fun d!26985 () Bool)

(declare-fun e!65227 () Bool)

(assert (=> d!26985 e!65227))

(declare-fun res!50263 () Bool)

(assert (=> d!26985 (=> (not res!50263) (not e!65227))))

(declare-fun lt!50603 () SeekEntryResult!264)

(assert (=> d!26985 (= res!50263 ((_ is Found!264) lt!50603))))

(assert (=> d!26985 (= lt!50603 (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(assert (=> d!26985 true))

(declare-fun _$33!84 () Unit!3031)

(assert (=> d!26985 (= (choose!615 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)) _$33!84)))

(declare-fun b!100146 () Bool)

(declare-fun res!50262 () Bool)

(assert (=> b!100146 (=> (not res!50262) (not e!65227))))

(assert (=> b!100146 (= res!50262 (inRange!0 (index!3201 lt!50603) (mask!6609 newMap!16)))))

(declare-fun b!100147 () Bool)

(assert (=> b!100147 (= e!65227 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50603)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!26985 res!50263) b!100146))

(assert (= (and b!100146 res!50262) b!100147))

(assert (=> d!26985 m!109089))

(assert (=> d!26985 m!109305))

(declare-fun m!110539 () Bool)

(assert (=> b!100146 m!110539))

(declare-fun m!110541 () Bool)

(assert (=> b!100147 m!110541))

(assert (=> d!26747 d!26985))

(assert (=> d!26747 d!26835))

(assert (=> b!99545 d!26837))

(assert (=> b!99528 d!26747))

(declare-fun b!100160 () Bool)

(declare-fun e!65236 () SeekEntryResult!264)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!100160 (= e!65236 (seekKeyOrZeroReturnVacant!0 (bvadd (x!13114 lt!50318) #b00000000000000000000000000000001) (nextIndex!0 (index!3202 lt!50318) (x!13114 lt!50318) (mask!6609 newMap!16)) (index!3202 lt!50318) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!100161 () Bool)

(declare-fun e!65235 () SeekEntryResult!264)

(declare-fun e!65234 () SeekEntryResult!264)

(assert (=> b!100161 (= e!65235 e!65234)))

(declare-fun c!17165 () Bool)

(declare-fun lt!50608 () (_ BitVec 64))

(assert (=> b!100161 (= c!17165 (= lt!50608 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun b!100162 () Bool)

(assert (=> b!100162 (= e!65234 (Found!264 (index!3202 lt!50318)))))

(declare-fun b!100163 () Bool)

(assert (=> b!100163 (= e!65235 Undefined!264)))

(declare-fun d!26987 () Bool)

(declare-fun lt!50609 () SeekEntryResult!264)

(assert (=> d!26987 (and (or ((_ is Undefined!264) lt!50609) (not ((_ is Found!264) lt!50609)) (and (bvsge (index!3201 lt!50609) #b00000000000000000000000000000000) (bvslt (index!3201 lt!50609) (size!2271 (_keys!4196 newMap!16))))) (or ((_ is Undefined!264) lt!50609) ((_ is Found!264) lt!50609) (not ((_ is MissingVacant!264) lt!50609)) (not (= (index!3203 lt!50609) (index!3202 lt!50318))) (and (bvsge (index!3203 lt!50609) #b00000000000000000000000000000000) (bvslt (index!3203 lt!50609) (size!2271 (_keys!4196 newMap!16))))) (or ((_ is Undefined!264) lt!50609) (ite ((_ is Found!264) lt!50609) (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50609)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (and ((_ is MissingVacant!264) lt!50609) (= (index!3203 lt!50609) (index!3202 lt!50318)) (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3203 lt!50609)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!26987 (= lt!50609 e!65235)))

(declare-fun c!17167 () Bool)

(assert (=> d!26987 (= c!17167 (bvsge (x!13114 lt!50318) #b01111111111111111111111111111110))))

(assert (=> d!26987 (= lt!50608 (select (arr!2020 (_keys!4196 newMap!16)) (index!3202 lt!50318)))))

(assert (=> d!26987 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!26987 (= (seekKeyOrZeroReturnVacant!0 (x!13114 lt!50318) (index!3202 lt!50318) (index!3202 lt!50318) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)) lt!50609)))

(declare-fun b!100164 () Bool)

(declare-fun c!17166 () Bool)

(assert (=> b!100164 (= c!17166 (= lt!50608 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100164 (= e!65234 e!65236)))

(declare-fun b!100165 () Bool)

(assert (=> b!100165 (= e!65236 (MissingVacant!264 (index!3202 lt!50318)))))

(assert (= (and d!26987 c!17167) b!100163))

(assert (= (and d!26987 (not c!17167)) b!100161))

(assert (= (and b!100161 c!17165) b!100162))

(assert (= (and b!100161 (not c!17165)) b!100164))

(assert (= (and b!100164 c!17166) b!100165))

(assert (= (and b!100164 (not c!17166)) b!100160))

(declare-fun m!110543 () Bool)

(assert (=> b!100160 m!110543))

(assert (=> b!100160 m!110543))

(assert (=> b!100160 m!109089))

(declare-fun m!110545 () Bool)

(assert (=> b!100160 m!110545))

(declare-fun m!110547 () Bool)

(assert (=> d!26987 m!110547))

(declare-fun m!110549 () Bool)

(assert (=> d!26987 m!110549))

(assert (=> d!26987 m!109755))

(assert (=> d!26987 m!109329))

(assert (=> b!99734 d!26987))

(declare-fun d!26989 () Bool)

(declare-fun e!65237 () Bool)

(assert (=> d!26989 e!65237))

(declare-fun res!50264 () Bool)

(assert (=> d!26989 (=> (not res!50264) (not e!65237))))

(declare-fun lt!50611 () ListLongMap!1557)

(assert (=> d!26989 (= res!50264 (contains!810 lt!50611 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(declare-fun lt!50613 () List!1615)

(assert (=> d!26989 (= lt!50611 (ListLongMap!1558 lt!50613))))

(declare-fun lt!50612 () Unit!3031)

(declare-fun lt!50610 () Unit!3031)

(assert (=> d!26989 (= lt!50612 lt!50610)))

(assert (=> d!26989 (= (getValueByKey!150 lt!50613 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!155 (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!26989 (= lt!50610 (lemmaContainsTupThenGetReturnValue!68 lt!50613 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!26989 (= lt!50613 (insertStrictlySorted!70 (toList!794 call!10268) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!26989 (= (+!139 call!10268 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50611)))

(declare-fun b!100166 () Bool)

(declare-fun res!50265 () Bool)

(assert (=> b!100166 (=> (not res!50265) (not e!65237))))

(assert (=> b!100166 (= res!50265 (= (getValueByKey!150 (toList!794 lt!50611) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!155 (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(declare-fun b!100167 () Bool)

(assert (=> b!100167 (= e!65237 (contains!812 (toList!794 lt!50611) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))

(assert (= (and d!26989 res!50264) b!100166))

(assert (= (and b!100166 res!50265) b!100167))

(declare-fun m!110551 () Bool)

(assert (=> d!26989 m!110551))

(declare-fun m!110553 () Bool)

(assert (=> d!26989 m!110553))

(declare-fun m!110555 () Bool)

(assert (=> d!26989 m!110555))

(declare-fun m!110557 () Bool)

(assert (=> d!26989 m!110557))

(declare-fun m!110559 () Bool)

(assert (=> b!100166 m!110559))

(declare-fun m!110561 () Bool)

(assert (=> b!100167 m!110561))

(assert (=> b!99789 d!26989))

(declare-fun d!26991 () Bool)

(assert (=> d!26991 (= (apply!93 lt!50344 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1307 (getValueByKey!150 (toList!794 lt!50344) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4129 () Bool)

(assert (= bs!4129 d!26991))

(assert (=> bs!4129 m!110227))

(assert (=> bs!4129 m!110227))

(declare-fun m!110563 () Bool)

(assert (=> bs!4129 m!110563))

(assert (=> b!99773 d!26991))

(declare-fun d!26993 () Bool)

(assert (=> d!26993 (= (get!1307 (getValueByKey!150 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2821 (getValueByKey!150 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26821 d!26993))

(declare-fun b!100169 () Bool)

(declare-fun e!65238 () Option!156)

(declare-fun e!65239 () Option!156)

(assert (=> b!100169 (= e!65238 e!65239)))

(declare-fun c!17169 () Bool)

(assert (=> b!100169 (= c!17169 (and ((_ is Cons!1611) (toList!794 lt!49947)) (not (= (_1!1193 (h!2206 (toList!794 lt!49947))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!26995 () Bool)

(declare-fun c!17168 () Bool)

(assert (=> d!26995 (= c!17168 (and ((_ is Cons!1611) (toList!794 lt!49947)) (= (_1!1193 (h!2206 (toList!794 lt!49947))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26995 (= (getValueByKey!150 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000) e!65238)))

(declare-fun b!100171 () Bool)

(assert (=> b!100171 (= e!65239 None!154)))

(declare-fun b!100168 () Bool)

(assert (=> b!100168 (= e!65238 (Some!155 (_2!1193 (h!2206 (toList!794 lt!49947)))))))

(declare-fun b!100170 () Bool)

(assert (=> b!100170 (= e!65239 (getValueByKey!150 (t!5597 (toList!794 lt!49947)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!26995 c!17168) b!100168))

(assert (= (and d!26995 (not c!17168)) b!100169))

(assert (= (and b!100169 c!17169) b!100170))

(assert (= (and b!100169 (not c!17169)) b!100171))

(declare-fun m!110565 () Bool)

(assert (=> b!100170 m!110565))

(assert (=> d!26821 d!26995))

(declare-fun b!100173 () Bool)

(declare-fun e!65240 () Option!156)

(declare-fun e!65241 () Option!156)

(assert (=> b!100173 (= e!65240 e!65241)))

(declare-fun c!17171 () Bool)

(assert (=> b!100173 (= c!17171 (and ((_ is Cons!1611) (toList!794 lt!50188)) (not (= (_1!1193 (h!2206 (toList!794 lt!50188))) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!17170 () Bool)

(declare-fun d!26997 () Bool)

(assert (=> d!26997 (= c!17170 (and ((_ is Cons!1611) (toList!794 lt!50188)) (= (_1!1193 (h!2206 (toList!794 lt!50188))) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!26997 (= (getValueByKey!150 (toList!794 lt!50188) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!65240)))

(declare-fun b!100175 () Bool)

(assert (=> b!100175 (= e!65241 None!154)))

(declare-fun b!100172 () Bool)

(assert (=> b!100172 (= e!65240 (Some!155 (_2!1193 (h!2206 (toList!794 lt!50188)))))))

(declare-fun b!100174 () Bool)

(assert (=> b!100174 (= e!65241 (getValueByKey!150 (t!5597 (toList!794 lt!50188)) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!26997 c!17170) b!100172))

(assert (= (and d!26997 (not c!17170)) b!100173))

(assert (= (and b!100173 c!17171) b!100174))

(assert (= (and b!100173 (not c!17171)) b!100175))

(declare-fun m!110567 () Bool)

(assert (=> b!100174 m!110567))

(assert (=> b!99535 d!26997))

(assert (=> d!26807 d!26785))

(assert (=> d!26807 d!26787))

(declare-fun d!26999 () Bool)

(assert (=> d!26999 (isDefined!104 (getValueByKey!150 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!26999 true))

(declare-fun _$12!347 () Unit!3031)

(assert (=> d!26999 (= (choose!618 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) _$12!347)))

(declare-fun bs!4130 () Bool)

(assert (= bs!4130 d!26999))

(assert (=> bs!4130 m!109089))

(assert (=> bs!4130 m!109259))

(assert (=> bs!4130 m!109259))

(assert (=> bs!4130 m!109261))

(assert (=> d!26807 d!26999))

(declare-fun d!27001 () Bool)

(declare-fun res!50270 () Bool)

(declare-fun e!65246 () Bool)

(assert (=> d!27001 (=> res!50270 e!65246)))

(assert (=> d!27001 (= res!50270 (or ((_ is Nil!1612) (toList!794 lt!49862)) ((_ is Nil!1612) (t!5597 (toList!794 lt!49862)))))))

(assert (=> d!27001 (= (isStrictlySorted!300 (toList!794 lt!49862)) e!65246)))

(declare-fun b!100180 () Bool)

(declare-fun e!65247 () Bool)

(assert (=> b!100180 (= e!65246 e!65247)))

(declare-fun res!50271 () Bool)

(assert (=> b!100180 (=> (not res!50271) (not e!65247))))

(assert (=> b!100180 (= res!50271 (bvslt (_1!1193 (h!2206 (toList!794 lt!49862))) (_1!1193 (h!2206 (t!5597 (toList!794 lt!49862))))))))

(declare-fun b!100181 () Bool)

(assert (=> b!100181 (= e!65247 (isStrictlySorted!300 (t!5597 (toList!794 lt!49862))))))

(assert (= (and d!27001 (not res!50270)) b!100180))

(assert (= (and b!100180 res!50271) b!100181))

(declare-fun m!110569 () Bool)

(assert (=> b!100181 m!110569))

(assert (=> d!26807 d!27001))

(declare-fun b!100182 () Bool)

(declare-fun e!65251 () Bool)

(declare-fun e!65248 () Bool)

(assert (=> b!100182 (= e!65251 e!65248)))

(declare-fun c!17172 () Bool)

(assert (=> b!100182 (= c!17172 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (_2!1192 lt!50030))) #b00000000000000000000000000000000)))))

(declare-fun b!100183 () Bool)

(declare-fun e!65249 () Bool)

(assert (=> b!100183 (= e!65249 (contains!811 Nil!1613 (select (arr!2020 (_keys!4196 (_2!1192 lt!50030))) #b00000000000000000000000000000000)))))

(declare-fun bm!10321 () Bool)

(declare-fun call!10324 () Bool)

(assert (=> bm!10321 (= call!10324 (arrayNoDuplicates!0 (_keys!4196 (_2!1192 lt!50030)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17172 (Cons!1612 (select (arr!2020 (_keys!4196 (_2!1192 lt!50030))) #b00000000000000000000000000000000) Nil!1613) Nil!1613)))))

(declare-fun b!100184 () Bool)

(declare-fun e!65250 () Bool)

(assert (=> b!100184 (= e!65250 e!65251)))

(declare-fun res!50273 () Bool)

(assert (=> b!100184 (=> (not res!50273) (not e!65251))))

(assert (=> b!100184 (= res!50273 (not e!65249))))

(declare-fun res!50272 () Bool)

(assert (=> b!100184 (=> (not res!50272) (not e!65249))))

(assert (=> b!100184 (= res!50272 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (_2!1192 lt!50030))) #b00000000000000000000000000000000)))))

(declare-fun b!100185 () Bool)

(assert (=> b!100185 (= e!65248 call!10324)))

(declare-fun d!27003 () Bool)

(declare-fun res!50274 () Bool)

(assert (=> d!27003 (=> res!50274 e!65250)))

(assert (=> d!27003 (= res!50274 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 (_2!1192 lt!50030)))))))

(assert (=> d!27003 (= (arrayNoDuplicates!0 (_keys!4196 (_2!1192 lt!50030)) #b00000000000000000000000000000000 Nil!1613) e!65250)))

(declare-fun b!100186 () Bool)

(assert (=> b!100186 (= e!65248 call!10324)))

(assert (= (and d!27003 (not res!50274)) b!100184))

(assert (= (and b!100184 res!50272) b!100183))

(assert (= (and b!100184 res!50273) b!100182))

(assert (= (and b!100182 c!17172) b!100186))

(assert (= (and b!100182 (not c!17172)) b!100185))

(assert (= (or b!100186 b!100185) bm!10321))

(assert (=> b!100182 m!109897))

(assert (=> b!100182 m!109897))

(assert (=> b!100182 m!109899))

(assert (=> b!100183 m!109897))

(assert (=> b!100183 m!109897))

(declare-fun m!110571 () Bool)

(assert (=> b!100183 m!110571))

(assert (=> bm!10321 m!109897))

(declare-fun m!110573 () Bool)

(assert (=> bm!10321 m!110573))

(assert (=> b!100184 m!109897))

(assert (=> b!100184 m!109897))

(assert (=> b!100184 m!109899))

(assert (=> b!99792 d!27003))

(declare-fun b!100188 () Bool)

(declare-fun e!65252 () Option!156)

(declare-fun e!65253 () Option!156)

(assert (=> b!100188 (= e!65252 e!65253)))

(declare-fun c!17174 () Bool)

(assert (=> b!100188 (= c!17174 (and ((_ is Cons!1611) (toList!794 lt!50273)) (not (= (_1!1193 (h!2206 (toList!794 lt!50273))) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun d!27005 () Bool)

(declare-fun c!17173 () Bool)

(assert (=> d!27005 (= c!17173 (and ((_ is Cons!1611) (toList!794 lt!50273)) (= (_1!1193 (h!2206 (toList!794 lt!50273))) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27005 (= (getValueByKey!150 (toList!794 lt!50273) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) e!65252)))

(declare-fun b!100190 () Bool)

(assert (=> b!100190 (= e!65253 None!154)))

(declare-fun b!100187 () Bool)

(assert (=> b!100187 (= e!65252 (Some!155 (_2!1193 (h!2206 (toList!794 lt!50273)))))))

(declare-fun b!100189 () Bool)

(assert (=> b!100189 (= e!65253 (getValueByKey!150 (t!5597 (toList!794 lt!50273)) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!27005 c!17173) b!100187))

(assert (= (and d!27005 (not c!17173)) b!100188))

(assert (= (and b!100188 c!17174) b!100189))

(assert (= (and b!100188 (not c!17174)) b!100190))

(declare-fun m!110575 () Bool)

(assert (=> b!100189 m!110575))

(assert (=> b!99660 d!27005))

(declare-fun b!100191 () Bool)

(declare-fun e!65255 () (_ BitVec 32))

(declare-fun e!65254 () (_ BitVec 32))

(assert (=> b!100191 (= e!65255 e!65254)))

(declare-fun c!17175 () Bool)

(assert (=> b!100191 (= c!17175 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!100192 () Bool)

(assert (=> b!100192 (= e!65255 #b00000000000000000000000000000000)))

(declare-fun d!27007 () Bool)

(declare-fun lt!50614 () (_ BitVec 32))

(assert (=> d!27007 (and (bvsge lt!50614 #b00000000000000000000000000000000) (bvsle lt!50614 (bvsub (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!27007 (= lt!50614 e!65255)))

(declare-fun c!17176 () Bool)

(assert (=> d!27007 (= c!17176 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> d!27007 (and (bvsle #b00000000000000000000000000000000 (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> d!27007 (= (arrayCountValidKeys!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000 (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))) lt!50614)))

(declare-fun b!100193 () Bool)

(declare-fun call!10325 () (_ BitVec 32))

(assert (=> b!100193 (= e!65254 call!10325)))

(declare-fun b!100194 () Bool)

(assert (=> b!100194 (= e!65254 (bvadd #b00000000000000000000000000000001 call!10325))))

(declare-fun bm!10322 () Bool)

(assert (=> bm!10322 (= call!10325 (arrayCountValidKeys!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!27007 c!17176) b!100192))

(assert (= (and d!27007 (not c!17176)) b!100191))

(assert (= (and b!100191 c!17175) b!100194))

(assert (= (and b!100191 (not c!17175)) b!100193))

(assert (= (or b!100194 b!100193) bm!10322))

(declare-fun m!110577 () Bool)

(assert (=> b!100191 m!110577))

(assert (=> b!100191 m!110577))

(declare-fun m!110579 () Bool)

(assert (=> b!100191 m!110579))

(declare-fun m!110581 () Bool)

(assert (=> bm!10322 m!110581))

(assert (=> b!99739 d!27007))

(assert (=> b!99455 d!26861))

(assert (=> b!99455 d!26709))

(declare-fun b!100195 () Bool)

(declare-fun e!65266 () Bool)

(declare-fun call!10330 () Bool)

(assert (=> b!100195 (= e!65266 (not call!10330))))

(declare-fun b!100196 () Bool)

(declare-fun e!65267 () Bool)

(declare-fun e!65268 () Bool)

(assert (=> b!100196 (= e!65267 e!65268)))

(declare-fun res!50279 () Bool)

(assert (=> b!100196 (=> (not res!50279) (not e!65268))))

(declare-fun lt!50620 () ListLongMap!1557)

(assert (=> b!100196 (= res!50279 (contains!810 lt!50620 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100196 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun bm!10323 () Bool)

(declare-fun call!10327 () ListLongMap!1557)

(declare-fun call!10326 () ListLongMap!1557)

(assert (=> bm!10323 (= call!10327 call!10326)))

(declare-fun bm!10324 () Bool)

(declare-fun call!10328 () ListLongMap!1557)

(assert (=> bm!10324 (= call!10326 call!10328)))

(declare-fun b!100197 () Bool)

(declare-fun e!65257 () Bool)

(assert (=> b!100197 (= e!65266 e!65257)))

(declare-fun res!50275 () Bool)

(assert (=> b!100197 (= res!50275 call!10330)))

(assert (=> b!100197 (=> (not res!50275) (not e!65257))))

(declare-fun b!100198 () Bool)

(declare-fun e!65256 () Bool)

(declare-fun call!10329 () Bool)

(assert (=> b!100198 (= e!65256 (not call!10329))))

(declare-fun b!100199 () Bool)

(declare-fun e!65258 () Bool)

(assert (=> b!100199 (= e!65258 (= (apply!93 lt!50620 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 newMap!16)))))

(declare-fun b!100200 () Bool)

(declare-fun c!17181 () Bool)

(assert (=> b!100200 (= c!17181 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65260 () ListLongMap!1557)

(declare-fun e!65265 () ListLongMap!1557)

(assert (=> b!100200 (= e!65260 e!65265)))

(declare-fun bm!10325 () Bool)

(declare-fun call!10332 () ListLongMap!1557)

(declare-fun c!17179 () Bool)

(declare-fun c!17182 () Bool)

(assert (=> bm!10325 (= call!10332 (+!139 (ite c!17179 call!10328 (ite c!17182 call!10326 call!10327)) (ite (or c!17179 c!17182) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun b!100201 () Bool)

(declare-fun e!65261 () Bool)

(assert (=> b!100201 (= e!65261 e!65256)))

(declare-fun c!17178 () Bool)

(assert (=> b!100201 (= c!17178 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100202 () Bool)

(declare-fun e!65264 () Unit!3031)

(declare-fun lt!50617 () Unit!3031)

(assert (=> b!100202 (= e!65264 lt!50617)))

(declare-fun lt!50632 () ListLongMap!1557)

(assert (=> b!100202 (= lt!50632 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50629 () (_ BitVec 64))

(assert (=> b!100202 (= lt!50629 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50616 () (_ BitVec 64))

(assert (=> b!100202 (= lt!50616 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50618 () Unit!3031)

(assert (=> b!100202 (= lt!50618 (addStillContains!69 lt!50632 lt!50629 (zeroValue!2383 newMap!16) lt!50616))))

(assert (=> b!100202 (contains!810 (+!139 lt!50632 (tuple2!2367 lt!50629 (zeroValue!2383 newMap!16))) lt!50616)))

(declare-fun lt!50627 () Unit!3031)

(assert (=> b!100202 (= lt!50627 lt!50618)))

(declare-fun lt!50626 () ListLongMap!1557)

(assert (=> b!100202 (= lt!50626 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50628 () (_ BitVec 64))

(assert (=> b!100202 (= lt!50628 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50625 () (_ BitVec 64))

(assert (=> b!100202 (= lt!50625 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50624 () Unit!3031)

(assert (=> b!100202 (= lt!50624 (addApplyDifferent!69 lt!50626 lt!50628 (minValue!2383 newMap!16) lt!50625))))

(assert (=> b!100202 (= (apply!93 (+!139 lt!50626 (tuple2!2367 lt!50628 (minValue!2383 newMap!16))) lt!50625) (apply!93 lt!50626 lt!50625))))

(declare-fun lt!50623 () Unit!3031)

(assert (=> b!100202 (= lt!50623 lt!50624)))

(declare-fun lt!50633 () ListLongMap!1557)

(assert (=> b!100202 (= lt!50633 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50621 () (_ BitVec 64))

(assert (=> b!100202 (= lt!50621 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50634 () (_ BitVec 64))

(assert (=> b!100202 (= lt!50634 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!50619 () Unit!3031)

(assert (=> b!100202 (= lt!50619 (addApplyDifferent!69 lt!50633 lt!50621 (zeroValue!2383 newMap!16) lt!50634))))

(assert (=> b!100202 (= (apply!93 (+!139 lt!50633 (tuple2!2367 lt!50621 (zeroValue!2383 newMap!16))) lt!50634) (apply!93 lt!50633 lt!50634))))

(declare-fun lt!50631 () Unit!3031)

(assert (=> b!100202 (= lt!50631 lt!50619)))

(declare-fun lt!50622 () ListLongMap!1557)

(assert (=> b!100202 (= lt!50622 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun lt!50630 () (_ BitVec 64))

(assert (=> b!100202 (= lt!50630 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50636 () (_ BitVec 64))

(assert (=> b!100202 (= lt!50636 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!100202 (= lt!50617 (addApplyDifferent!69 lt!50622 lt!50630 (minValue!2383 newMap!16) lt!50636))))

(assert (=> b!100202 (= (apply!93 (+!139 lt!50622 (tuple2!2367 lt!50630 (minValue!2383 newMap!16))) lt!50636) (apply!93 lt!50622 lt!50636))))

(declare-fun b!100203 () Bool)

(declare-fun call!10331 () ListLongMap!1557)

(assert (=> b!100203 (= e!65265 call!10331)))

(declare-fun b!100204 () Bool)

(declare-fun res!50282 () Bool)

(assert (=> b!100204 (=> (not res!50282) (not e!65261))))

(assert (=> b!100204 (= res!50282 e!65266)))

(declare-fun c!17180 () Bool)

(assert (=> b!100204 (= c!17180 (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!100205 () Bool)

(declare-fun e!65262 () Bool)

(assert (=> b!100205 (= e!65262 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100206 () Bool)

(assert (=> b!100206 (= e!65268 (= (apply!93 lt!50620 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100206 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))))))

(assert (=> b!100206 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun b!100207 () Bool)

(declare-fun Unit!3068 () Unit!3031)

(assert (=> b!100207 (= e!65264 Unit!3068)))

(declare-fun b!100208 () Bool)

(assert (=> b!100208 (= e!65260 call!10331)))

(declare-fun bm!10326 () Bool)

(assert (=> bm!10326 (= call!10329 (contains!810 lt!50620 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10327 () Bool)

(assert (=> bm!10327 (= call!10331 call!10332)))

(declare-fun b!100209 () Bool)

(declare-fun res!50283 () Bool)

(assert (=> b!100209 (=> (not res!50283) (not e!65261))))

(assert (=> b!100209 (= res!50283 e!65267)))

(declare-fun res!50281 () Bool)

(assert (=> b!100209 (=> res!50281 e!65267)))

(assert (=> b!100209 (= res!50281 (not e!65262))))

(declare-fun res!50280 () Bool)

(assert (=> b!100209 (=> (not res!50280) (not e!65262))))

(assert (=> b!100209 (= res!50280 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun d!27009 () Bool)

(assert (=> d!27009 e!65261))

(declare-fun res!50278 () Bool)

(assert (=> d!27009 (=> (not res!50278) (not e!65261))))

(assert (=> d!27009 (= res!50278 (or (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))))

(declare-fun lt!50635 () ListLongMap!1557)

(assert (=> d!27009 (= lt!50620 lt!50635)))

(declare-fun lt!50615 () Unit!3031)

(assert (=> d!27009 (= lt!50615 e!65264)))

(declare-fun c!17177 () Bool)

(declare-fun e!65259 () Bool)

(assert (=> d!27009 (= c!17177 e!65259)))

(declare-fun res!50276 () Bool)

(assert (=> d!27009 (=> (not res!50276) (not e!65259))))

(assert (=> d!27009 (= res!50276 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun e!65263 () ListLongMap!1557)

(assert (=> d!27009 (= lt!50635 e!65263)))

(assert (=> d!27009 (= c!17179 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!27009 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!27009 (= (getCurrentListMap!474 (_keys!4196 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50620)))

(declare-fun bm!10328 () Bool)

(assert (=> bm!10328 (= call!10330 (contains!810 lt!50620 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10329 () Bool)

(assert (=> bm!10329 (= call!10328 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(declare-fun b!100210 () Bool)

(assert (=> b!100210 (= e!65257 (= (apply!93 lt!50620 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 newMap!16)))))

(declare-fun b!100211 () Bool)

(assert (=> b!100211 (= e!65265 call!10327)))

(declare-fun b!100212 () Bool)

(assert (=> b!100212 (= e!65256 e!65258)))

(declare-fun res!50277 () Bool)

(assert (=> b!100212 (= res!50277 call!10329)))

(assert (=> b!100212 (=> (not res!50277) (not e!65258))))

(declare-fun b!100213 () Bool)

(assert (=> b!100213 (= e!65263 e!65260)))

(assert (=> b!100213 (= c!17182 (and (not (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100214 () Bool)

(assert (=> b!100214 (= e!65259 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100215 () Bool)

(assert (=> b!100215 (= e!65263 (+!139 call!10332 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(assert (= (and d!27009 c!17179) b!100215))

(assert (= (and d!27009 (not c!17179)) b!100213))

(assert (= (and b!100213 c!17182) b!100208))

(assert (= (and b!100213 (not c!17182)) b!100200))

(assert (= (and b!100200 c!17181) b!100203))

(assert (= (and b!100200 (not c!17181)) b!100211))

(assert (= (or b!100203 b!100211) bm!10323))

(assert (= (or b!100208 bm!10323) bm!10324))

(assert (= (or b!100208 b!100203) bm!10327))

(assert (= (or b!100215 bm!10324) bm!10329))

(assert (= (or b!100215 bm!10327) bm!10325))

(assert (= (and d!27009 res!50276) b!100214))

(assert (= (and d!27009 c!17177) b!100202))

(assert (= (and d!27009 (not c!17177)) b!100207))

(assert (= (and d!27009 res!50278) b!100209))

(assert (= (and b!100209 res!50280) b!100205))

(assert (= (and b!100209 (not res!50281)) b!100196))

(assert (= (and b!100196 res!50279) b!100206))

(assert (= (and b!100209 res!50283) b!100204))

(assert (= (and b!100204 c!17180) b!100197))

(assert (= (and b!100204 (not c!17180)) b!100195))

(assert (= (and b!100197 res!50275) b!100210))

(assert (= (or b!100197 b!100195) bm!10328))

(assert (= (and b!100204 res!50282) b!100201))

(assert (= (and b!100201 c!17178) b!100212))

(assert (= (and b!100201 (not c!17178)) b!100198))

(assert (= (and b!100212 res!50277) b!100199))

(assert (= (or b!100212 b!100198) bm!10326))

(declare-fun b_lambda!4491 () Bool)

(assert (=> (not b_lambda!4491) (not b!100206)))

(assert (=> b!100206 t!5605))

(declare-fun b_and!6177 () Bool)

(assert (= b_and!6173 (and (=> t!5605 result!3311) b_and!6177)))

(assert (=> b!100206 t!5607))

(declare-fun b_and!6179 () Bool)

(assert (= b_and!6175 (and (=> t!5607 result!3313) b_and!6179)))

(assert (=> b!100206 m!109349))

(declare-fun m!110583 () Bool)

(assert (=> b!100206 m!110583))

(declare-fun m!110585 () Bool)

(assert (=> b!100206 m!110585))

(assert (=> b!100206 m!110585))

(assert (=> b!100206 m!109355))

(declare-fun m!110587 () Bool)

(assert (=> b!100206 m!110587))

(assert (=> b!100206 m!109349))

(assert (=> b!100206 m!109355))

(declare-fun m!110589 () Bool)

(assert (=> b!100199 m!110589))

(declare-fun m!110591 () Bool)

(assert (=> bm!10329 m!110591))

(assert (=> b!100196 m!109349))

(assert (=> b!100196 m!109349))

(declare-fun m!110593 () Bool)

(assert (=> b!100196 m!110593))

(declare-fun m!110595 () Bool)

(assert (=> bm!10326 m!110595))

(assert (=> d!27009 m!109329))

(assert (=> b!100205 m!109349))

(assert (=> b!100205 m!109349))

(assert (=> b!100205 m!109367))

(declare-fun m!110597 () Bool)

(assert (=> b!100210 m!110597))

(declare-fun m!110599 () Bool)

(assert (=> b!100215 m!110599))

(declare-fun m!110601 () Bool)

(assert (=> bm!10328 m!110601))

(assert (=> b!100214 m!109349))

(assert (=> b!100214 m!109349))

(assert (=> b!100214 m!109367))

(declare-fun m!110603 () Bool)

(assert (=> b!100202 m!110603))

(declare-fun m!110605 () Bool)

(assert (=> b!100202 m!110605))

(declare-fun m!110607 () Bool)

(assert (=> b!100202 m!110607))

(declare-fun m!110609 () Bool)

(assert (=> b!100202 m!110609))

(declare-fun m!110611 () Bool)

(assert (=> b!100202 m!110611))

(assert (=> b!100202 m!110609))

(declare-fun m!110613 () Bool)

(assert (=> b!100202 m!110613))

(declare-fun m!110615 () Bool)

(assert (=> b!100202 m!110615))

(declare-fun m!110617 () Bool)

(assert (=> b!100202 m!110617))

(assert (=> b!100202 m!109349))

(declare-fun m!110619 () Bool)

(assert (=> b!100202 m!110619))

(declare-fun m!110621 () Bool)

(assert (=> b!100202 m!110621))

(assert (=> b!100202 m!110611))

(declare-fun m!110623 () Bool)

(assert (=> b!100202 m!110623))

(assert (=> b!100202 m!110603))

(declare-fun m!110625 () Bool)

(assert (=> b!100202 m!110625))

(declare-fun m!110627 () Bool)

(assert (=> b!100202 m!110627))

(assert (=> b!100202 m!110625))

(declare-fun m!110629 () Bool)

(assert (=> b!100202 m!110629))

(assert (=> b!100202 m!110591))

(declare-fun m!110631 () Bool)

(assert (=> b!100202 m!110631))

(declare-fun m!110633 () Bool)

(assert (=> bm!10325 m!110633))

(assert (=> b!99455 d!27009))

(declare-fun d!27011 () Bool)

(assert (=> d!27011 (= (apply!93 (+!139 lt!50346 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50360) (apply!93 lt!50346 lt!50360))))

(declare-fun lt!50637 () Unit!3031)

(assert (=> d!27011 (= lt!50637 (choose!617 lt!50346 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50360))))

(declare-fun e!65269 () Bool)

(assert (=> d!27011 e!65269))

(declare-fun res!50284 () Bool)

(assert (=> d!27011 (=> (not res!50284) (not e!65269))))

(assert (=> d!27011 (= res!50284 (contains!810 lt!50346 lt!50360))))

(assert (=> d!27011 (= (addApplyDifferent!69 lt!50346 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50360) lt!50637)))

(declare-fun b!100216 () Bool)

(assert (=> b!100216 (= e!65269 (not (= lt!50360 lt!50354)))))

(assert (= (and d!27011 res!50284) b!100216))

(assert (=> d!27011 m!109845))

(assert (=> d!27011 m!109847))

(declare-fun m!110635 () Bool)

(assert (=> d!27011 m!110635))

(declare-fun m!110637 () Bool)

(assert (=> d!27011 m!110637))

(assert (=> d!27011 m!109845))

(assert (=> d!27011 m!109873))

(assert (=> b!99776 d!27011))

(declare-fun d!27013 () Bool)

(declare-fun e!65270 () Bool)

(assert (=> d!27013 e!65270))

(declare-fun res!50285 () Bool)

(assert (=> d!27013 (=> (not res!50285) (not e!65270))))

(declare-fun lt!50639 () ListLongMap!1557)

(assert (=> d!27013 (= res!50285 (contains!810 lt!50639 (_1!1193 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(declare-fun lt!50641 () List!1615)

(assert (=> d!27013 (= lt!50639 (ListLongMap!1558 lt!50641))))

(declare-fun lt!50640 () Unit!3031)

(declare-fun lt!50638 () Unit!3031)

(assert (=> d!27013 (= lt!50640 lt!50638)))

(assert (=> d!27013 (= (getValueByKey!150 lt!50641 (_1!1193 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!155 (_2!1193 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27013 (= lt!50638 (lemmaContainsTupThenGetReturnValue!68 lt!50641 (_1!1193 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1193 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27013 (= lt!50641 (insertStrictlySorted!70 (toList!794 lt!50346) (_1!1193 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1193 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27013 (= (+!139 lt!50346 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50639)))

(declare-fun b!100217 () Bool)

(declare-fun res!50286 () Bool)

(assert (=> b!100217 (=> (not res!50286) (not e!65270))))

(assert (=> b!100217 (= res!50286 (= (getValueByKey!150 (toList!794 lt!50639) (_1!1193 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!155 (_2!1193 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(declare-fun b!100218 () Bool)

(assert (=> b!100218 (= e!65270 (contains!812 (toList!794 lt!50639) (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))

(assert (= (and d!27013 res!50285) b!100217))

(assert (= (and b!100217 res!50286) b!100218))

(declare-fun m!110639 () Bool)

(assert (=> d!27013 m!110639))

(declare-fun m!110641 () Bool)

(assert (=> d!27013 m!110641))

(declare-fun m!110643 () Bool)

(assert (=> d!27013 m!110643))

(declare-fun m!110645 () Bool)

(assert (=> d!27013 m!110645))

(declare-fun m!110647 () Bool)

(assert (=> b!100217 m!110647))

(declare-fun m!110649 () Bool)

(assert (=> b!100218 m!110649))

(assert (=> b!99776 d!27013))

(declare-fun d!27015 () Bool)

(declare-fun e!65271 () Bool)

(assert (=> d!27015 e!65271))

(declare-fun res!50287 () Bool)

(assert (=> d!27015 (=> (not res!50287) (not e!65271))))

(declare-fun lt!50643 () ListLongMap!1557)

(assert (=> d!27015 (= res!50287 (contains!810 lt!50643 (_1!1193 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16)))))))

(declare-fun lt!50645 () List!1615)

(assert (=> d!27015 (= lt!50643 (ListLongMap!1558 lt!50645))))

(declare-fun lt!50644 () Unit!3031)

(declare-fun lt!50642 () Unit!3031)

(assert (=> d!27015 (= lt!50644 lt!50642)))

(assert (=> d!27015 (= (getValueByKey!150 lt!50645 (_1!1193 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27015 (= lt!50642 (lemmaContainsTupThenGetReturnValue!68 lt!50645 (_1!1193 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27015 (= lt!50645 (insertStrictlySorted!70 (toList!794 lt!50356) (_1!1193 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27015 (= (+!139 lt!50356 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16))) lt!50643)))

(declare-fun b!100219 () Bool)

(declare-fun res!50288 () Bool)

(assert (=> b!100219 (=> (not res!50288) (not e!65271))))

(assert (=> b!100219 (= res!50288 (= (getValueByKey!150 (toList!794 lt!50643) (_1!1193 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16))))))))

(declare-fun b!100220 () Bool)

(assert (=> b!100220 (= e!65271 (contains!812 (toList!794 lt!50643) (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16))))))

(assert (= (and d!27015 res!50287) b!100219))

(assert (= (and b!100219 res!50288) b!100220))

(declare-fun m!110651 () Bool)

(assert (=> d!27015 m!110651))

(declare-fun m!110653 () Bool)

(assert (=> d!27015 m!110653))

(declare-fun m!110655 () Bool)

(assert (=> d!27015 m!110655))

(declare-fun m!110657 () Bool)

(assert (=> d!27015 m!110657))

(declare-fun m!110659 () Bool)

(assert (=> b!100219 m!110659))

(declare-fun m!110661 () Bool)

(assert (=> b!100220 m!110661))

(assert (=> b!99776 d!27015))

(declare-fun d!27017 () Bool)

(assert (=> d!27017 (= (apply!93 lt!50346 lt!50360) (get!1307 (getValueByKey!150 (toList!794 lt!50346) lt!50360)))))

(declare-fun bs!4131 () Bool)

(assert (= bs!4131 d!27017))

(declare-fun m!110663 () Bool)

(assert (=> bs!4131 m!110663))

(assert (=> bs!4131 m!110663))

(declare-fun m!110665 () Bool)

(assert (=> bs!4131 m!110665))

(assert (=> b!99776 d!27017))

(declare-fun d!27019 () Bool)

(assert (=> d!27019 (= (apply!93 lt!50350 lt!50349) (get!1307 (getValueByKey!150 (toList!794 lt!50350) lt!50349)))))

(declare-fun bs!4132 () Bool)

(assert (= bs!4132 d!27019))

(declare-fun m!110667 () Bool)

(assert (=> bs!4132 m!110667))

(assert (=> bs!4132 m!110667))

(declare-fun m!110669 () Bool)

(assert (=> bs!4132 m!110669))

(assert (=> b!99776 d!27019))

(declare-fun d!27021 () Bool)

(assert (=> d!27021 (= (apply!93 lt!50357 lt!50358) (get!1307 (getValueByKey!150 (toList!794 lt!50357) lt!50358)))))

(declare-fun bs!4133 () Bool)

(assert (= bs!4133 d!27021))

(declare-fun m!110671 () Bool)

(assert (=> bs!4133 m!110671))

(assert (=> bs!4133 m!110671))

(declare-fun m!110673 () Bool)

(assert (=> bs!4133 m!110673))

(assert (=> b!99776 d!27021))

(declare-fun d!27023 () Bool)

(declare-fun e!65272 () Bool)

(assert (=> d!27023 e!65272))

(declare-fun res!50289 () Bool)

(assert (=> d!27023 (=> res!50289 e!65272)))

(declare-fun lt!50647 () Bool)

(assert (=> d!27023 (= res!50289 (not lt!50647))))

(declare-fun lt!50649 () Bool)

(assert (=> d!27023 (= lt!50647 lt!50649)))

(declare-fun lt!50646 () Unit!3031)

(declare-fun e!65273 () Unit!3031)

(assert (=> d!27023 (= lt!50646 e!65273)))

(declare-fun c!17183 () Bool)

(assert (=> d!27023 (= c!17183 lt!50649)))

(assert (=> d!27023 (= lt!50649 (containsKey!154 (toList!794 (+!139 lt!50356 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16)))) lt!50340))))

(assert (=> d!27023 (= (contains!810 (+!139 lt!50356 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16))) lt!50340) lt!50647)))

(declare-fun b!100221 () Bool)

(declare-fun lt!50648 () Unit!3031)

(assert (=> b!100221 (= e!65273 lt!50648)))

(assert (=> b!100221 (= lt!50648 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 (+!139 lt!50356 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16)))) lt!50340))))

(assert (=> b!100221 (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!50356 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16)))) lt!50340))))

(declare-fun b!100222 () Bool)

(declare-fun Unit!3069 () Unit!3031)

(assert (=> b!100222 (= e!65273 Unit!3069)))

(declare-fun b!100223 () Bool)

(assert (=> b!100223 (= e!65272 (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!50356 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16)))) lt!50340)))))

(assert (= (and d!27023 c!17183) b!100221))

(assert (= (and d!27023 (not c!17183)) b!100222))

(assert (= (and d!27023 (not res!50289)) b!100223))

(declare-fun m!110675 () Bool)

(assert (=> d!27023 m!110675))

(declare-fun m!110677 () Bool)

(assert (=> b!100221 m!110677))

(declare-fun m!110679 () Bool)

(assert (=> b!100221 m!110679))

(assert (=> b!100221 m!110679))

(declare-fun m!110681 () Bool)

(assert (=> b!100221 m!110681))

(assert (=> b!100223 m!110679))

(assert (=> b!100223 m!110679))

(assert (=> b!100223 m!110681))

(assert (=> b!99776 d!27023))

(declare-fun d!27025 () Bool)

(declare-fun e!65274 () Bool)

(assert (=> d!27025 e!65274))

(declare-fun res!50290 () Bool)

(assert (=> d!27025 (=> (not res!50290) (not e!65274))))

(declare-fun lt!50651 () ListLongMap!1557)

(assert (=> d!27025 (= res!50290 (contains!810 lt!50651 (_1!1193 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16)))))))

(declare-fun lt!50653 () List!1615)

(assert (=> d!27025 (= lt!50651 (ListLongMap!1558 lt!50653))))

(declare-fun lt!50652 () Unit!3031)

(declare-fun lt!50650 () Unit!3031)

(assert (=> d!27025 (= lt!50652 lt!50650)))

(assert (=> d!27025 (= (getValueByKey!150 lt!50653 (_1!1193 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27025 (= lt!50650 (lemmaContainsTupThenGetReturnValue!68 lt!50653 (_1!1193 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27025 (= lt!50653 (insertStrictlySorted!70 (toList!794 lt!50357) (_1!1193 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27025 (= (+!139 lt!50357 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16))) lt!50651)))

(declare-fun b!100224 () Bool)

(declare-fun res!50291 () Bool)

(assert (=> b!100224 (=> (not res!50291) (not e!65274))))

(assert (=> b!100224 (= res!50291 (= (getValueByKey!150 (toList!794 lt!50651) (_1!1193 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16))))))))

(declare-fun b!100225 () Bool)

(assert (=> b!100225 (= e!65274 (contains!812 (toList!794 lt!50651) (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16))))))

(assert (= (and d!27025 res!50290) b!100224))

(assert (= (and b!100224 res!50291) b!100225))

(declare-fun m!110683 () Bool)

(assert (=> d!27025 m!110683))

(declare-fun m!110685 () Bool)

(assert (=> d!27025 m!110685))

(declare-fun m!110687 () Bool)

(assert (=> d!27025 m!110687))

(declare-fun m!110689 () Bool)

(assert (=> d!27025 m!110689))

(declare-fun m!110691 () Bool)

(assert (=> b!100224 m!110691))

(declare-fun m!110693 () Bool)

(assert (=> b!100225 m!110693))

(assert (=> b!99776 d!27025))

(declare-fun d!27027 () Bool)

(assert (=> d!27027 (= (apply!93 (+!139 lt!50357 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16))) lt!50358) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!50357 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16)))) lt!50358)))))

(declare-fun bs!4134 () Bool)

(assert (= bs!4134 d!27027))

(declare-fun m!110695 () Bool)

(assert (=> bs!4134 m!110695))

(assert (=> bs!4134 m!110695))

(declare-fun m!110697 () Bool)

(assert (=> bs!4134 m!110697))

(assert (=> b!99776 d!27027))

(declare-fun d!27029 () Bool)

(declare-fun e!65275 () Bool)

(assert (=> d!27029 e!65275))

(declare-fun res!50292 () Bool)

(assert (=> d!27029 (=> (not res!50292) (not e!65275))))

(declare-fun lt!50655 () ListLongMap!1557)

(assert (=> d!27029 (= res!50292 (contains!810 lt!50655 (_1!1193 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(declare-fun lt!50657 () List!1615)

(assert (=> d!27029 (= lt!50655 (ListLongMap!1558 lt!50657))))

(declare-fun lt!50656 () Unit!3031)

(declare-fun lt!50654 () Unit!3031)

(assert (=> d!27029 (= lt!50656 lt!50654)))

(assert (=> d!27029 (= (getValueByKey!150 lt!50657 (_1!1193 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!155 (_2!1193 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27029 (= lt!50654 (lemmaContainsTupThenGetReturnValue!68 lt!50657 (_1!1193 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1193 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27029 (= lt!50657 (insertStrictlySorted!70 (toList!794 lt!50350) (_1!1193 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) (_2!1193 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (=> d!27029 (= (+!139 lt!50350 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50655)))

(declare-fun b!100226 () Bool)

(declare-fun res!50293 () Bool)

(assert (=> b!100226 (=> (not res!50293) (not e!65275))))

(assert (=> b!100226 (= res!50293 (= (getValueByKey!150 (toList!794 lt!50655) (_1!1193 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (Some!155 (_2!1193 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(declare-fun b!100227 () Bool)

(assert (=> b!100227 (= e!65275 (contains!812 (toList!794 lt!50655) (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))

(assert (= (and d!27029 res!50292) b!100226))

(assert (= (and b!100226 res!50293) b!100227))

(declare-fun m!110699 () Bool)

(assert (=> d!27029 m!110699))

(declare-fun m!110701 () Bool)

(assert (=> d!27029 m!110701))

(declare-fun m!110703 () Bool)

(assert (=> d!27029 m!110703))

(declare-fun m!110705 () Bool)

(assert (=> d!27029 m!110705))

(declare-fun m!110707 () Bool)

(assert (=> b!100226 m!110707))

(declare-fun m!110709 () Bool)

(assert (=> b!100227 m!110709))

(assert (=> b!99776 d!27029))

(declare-fun d!27031 () Bool)

(assert (=> d!27031 (= (apply!93 (+!139 lt!50357 (tuple2!2367 lt!50345 (zeroValue!2383 newMap!16))) lt!50358) (apply!93 lt!50357 lt!50358))))

(declare-fun lt!50658 () Unit!3031)

(assert (=> d!27031 (= lt!50658 (choose!617 lt!50357 lt!50345 (zeroValue!2383 newMap!16) lt!50358))))

(declare-fun e!65276 () Bool)

(assert (=> d!27031 e!65276))

(declare-fun res!50294 () Bool)

(assert (=> d!27031 (=> (not res!50294) (not e!65276))))

(assert (=> d!27031 (= res!50294 (contains!810 lt!50357 lt!50358))))

(assert (=> d!27031 (= (addApplyDifferent!69 lt!50357 lt!50345 (zeroValue!2383 newMap!16) lt!50358) lt!50658)))

(declare-fun b!100228 () Bool)

(assert (=> b!100228 (= e!65276 (not (= lt!50358 lt!50345)))))

(assert (= (and d!27031 res!50294) b!100228))

(assert (=> d!27031 m!109853))

(assert (=> d!27031 m!109865))

(declare-fun m!110711 () Bool)

(assert (=> d!27031 m!110711))

(declare-fun m!110713 () Bool)

(assert (=> d!27031 m!110713))

(assert (=> d!27031 m!109853))

(assert (=> d!27031 m!109861))

(assert (=> b!99776 d!27031))

(declare-fun d!27033 () Bool)

(assert (=> d!27033 (contains!810 (+!139 lt!50356 (tuple2!2367 lt!50353 (zeroValue!2383 newMap!16))) lt!50340)))

(declare-fun lt!50659 () Unit!3031)

(assert (=> d!27033 (= lt!50659 (choose!616 lt!50356 lt!50353 (zeroValue!2383 newMap!16) lt!50340))))

(assert (=> d!27033 (contains!810 lt!50356 lt!50340)))

(assert (=> d!27033 (= (addStillContains!69 lt!50356 lt!50353 (zeroValue!2383 newMap!16) lt!50340) lt!50659)))

(declare-fun bs!4135 () Bool)

(assert (= bs!4135 d!27033))

(assert (=> bs!4135 m!109851))

(assert (=> bs!4135 m!109851))

(assert (=> bs!4135 m!109855))

(declare-fun m!110715 () Bool)

(assert (=> bs!4135 m!110715))

(declare-fun m!110717 () Bool)

(assert (=> bs!4135 m!110717))

(assert (=> b!99776 d!27033))

(declare-fun d!27035 () Bool)

(assert (=> d!27035 (= (apply!93 (+!139 lt!50350 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50349) (apply!93 lt!50350 lt!50349))))

(declare-fun lt!50660 () Unit!3031)

(assert (=> d!27035 (= lt!50660 (choose!617 lt!50350 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50349))))

(declare-fun e!65277 () Bool)

(assert (=> d!27035 e!65277))

(declare-fun res!50295 () Bool)

(assert (=> d!27035 (=> (not res!50295) (not e!65277))))

(assert (=> d!27035 (= res!50295 (contains!810 lt!50350 lt!50349))))

(assert (=> d!27035 (= (addApplyDifferent!69 lt!50350 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)) lt!50349) lt!50660)))

(declare-fun b!100229 () Bool)

(assert (=> b!100229 (= e!65277 (not (= lt!50349 lt!50352)))))

(assert (= (and d!27035 res!50295) b!100229))

(assert (=> d!27035 m!109867))

(assert (=> d!27035 m!109871))

(declare-fun m!110719 () Bool)

(assert (=> d!27035 m!110719))

(declare-fun m!110721 () Bool)

(assert (=> d!27035 m!110721))

(assert (=> d!27035 m!109867))

(assert (=> d!27035 m!109849))

(assert (=> b!99776 d!27035))

(declare-fun d!27037 () Bool)

(assert (=> d!27037 (= (apply!93 (+!139 lt!50346 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50360) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!50346 (tuple2!2367 lt!50354 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) lt!50360)))))

(declare-fun bs!4136 () Bool)

(assert (= bs!4136 d!27037))

(declare-fun m!110723 () Bool)

(assert (=> bs!4136 m!110723))

(assert (=> bs!4136 m!110723))

(declare-fun m!110725 () Bool)

(assert (=> bs!4136 m!110725))

(assert (=> b!99776 d!27037))

(assert (=> b!99776 d!26953))

(declare-fun d!27039 () Bool)

(assert (=> d!27039 (= (apply!93 (+!139 lt!50350 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))) lt!50349) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!50350 (tuple2!2367 lt!50352 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) lt!50349)))))

(declare-fun bs!4137 () Bool)

(assert (= bs!4137 d!27039))

(declare-fun m!110727 () Bool)

(assert (=> bs!4137 m!110727))

(assert (=> bs!4137 m!110727))

(declare-fun m!110729 () Bool)

(assert (=> bs!4137 m!110729))

(assert (=> b!99776 d!27039))

(declare-fun d!27041 () Bool)

(declare-fun res!50296 () Bool)

(declare-fun e!65278 () Bool)

(assert (=> d!27041 (=> res!50296 e!65278)))

(assert (=> d!27041 (= res!50296 (and ((_ is Cons!1611) (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))) (= (_1!1193 (h!2206 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))) lt!49943)))))

(assert (=> d!27041 (= (containsKey!154 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943) e!65278)))

(declare-fun b!100230 () Bool)

(declare-fun e!65279 () Bool)

(assert (=> b!100230 (= e!65278 e!65279)))

(declare-fun res!50297 () Bool)

(assert (=> b!100230 (=> (not res!50297) (not e!65279))))

(assert (=> b!100230 (= res!50297 (and (or (not ((_ is Cons!1611) (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))) (bvsle (_1!1193 (h!2206 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))) lt!49943)) ((_ is Cons!1611) (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))) (bvslt (_1!1193 (h!2206 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))) lt!49943)))))

(declare-fun b!100231 () Bool)

(assert (=> b!100231 (= e!65279 (containsKey!154 (t!5597 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))) lt!49943))))

(assert (= (and d!27041 (not res!50296)) b!100230))

(assert (= (and b!100230 res!50297) b!100231))

(declare-fun m!110731 () Bool)

(assert (=> b!100231 m!110731))

(assert (=> d!26779 d!27041))

(declare-fun d!27043 () Bool)

(assert (=> d!27043 (= (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49963)) (v!2821 (getValueByKey!150 (toList!794 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49963)))))

(assert (=> d!26773 d!27043))

(declare-fun b!100233 () Bool)

(declare-fun e!65280 () Option!156)

(declare-fun e!65281 () Option!156)

(assert (=> b!100233 (= e!65280 e!65281)))

(declare-fun c!17185 () Bool)

(assert (=> b!100233 (= c!17185 (and ((_ is Cons!1611) (toList!794 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) (not (= (_1!1193 (h!2206 (toList!794 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))) lt!49963))))))

(declare-fun c!17184 () Bool)

(declare-fun d!27045 () Bool)

(assert (=> d!27045 (= c!17184 (and ((_ is Cons!1611) (toList!794 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) (= (_1!1193 (h!2206 (toList!794 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))) lt!49963)))))

(assert (=> d!27045 (= (getValueByKey!150 (toList!794 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49963) e!65280)))

(declare-fun b!100235 () Bool)

(assert (=> b!100235 (= e!65281 None!154)))

(declare-fun b!100232 () Bool)

(assert (=> b!100232 (= e!65280 (Some!155 (_2!1193 (h!2206 (toList!794 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))))

(declare-fun b!100234 () Bool)

(assert (=> b!100234 (= e!65281 (getValueByKey!150 (t!5597 (toList!794 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) lt!49963))))

(assert (= (and d!27045 c!17184) b!100232))

(assert (= (and d!27045 (not c!17184)) b!100233))

(assert (= (and b!100233 c!17185) b!100234))

(assert (= (and b!100233 (not c!17185)) b!100235))

(declare-fun m!110733 () Bool)

(assert (=> b!100234 m!110733))

(assert (=> d!26773 d!27045))

(declare-fun d!27047 () Bool)

(declare-fun e!65282 () Bool)

(assert (=> d!27047 e!65282))

(declare-fun res!50298 () Bool)

(assert (=> d!27047 (=> res!50298 e!65282)))

(declare-fun lt!50662 () Bool)

(assert (=> d!27047 (= res!50298 (not lt!50662))))

(declare-fun lt!50664 () Bool)

(assert (=> d!27047 (= lt!50662 lt!50664)))

(declare-fun lt!50661 () Unit!3031)

(declare-fun e!65283 () Unit!3031)

(assert (=> d!27047 (= lt!50661 e!65283)))

(declare-fun c!17186 () Bool)

(assert (=> d!27047 (= c!17186 lt!50664)))

(assert (=> d!27047 (= lt!50664 (containsKey!154 (toList!794 lt!50273) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!27047 (= (contains!810 lt!50273 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50662)))

(declare-fun b!100236 () Bool)

(declare-fun lt!50663 () Unit!3031)

(assert (=> b!100236 (= e!65283 lt!50663)))

(assert (=> b!100236 (= lt!50663 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50273) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> b!100236 (isDefined!104 (getValueByKey!150 (toList!794 lt!50273) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100237 () Bool)

(declare-fun Unit!3070 () Unit!3031)

(assert (=> b!100237 (= e!65283 Unit!3070)))

(declare-fun b!100238 () Bool)

(assert (=> b!100238 (= e!65282 (isDefined!104 (getValueByKey!150 (toList!794 lt!50273) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!27047 c!17186) b!100236))

(assert (= (and d!27047 (not c!17186)) b!100237))

(assert (= (and d!27047 (not res!50298)) b!100238))

(declare-fun m!110735 () Bool)

(assert (=> d!27047 m!110735))

(declare-fun m!110737 () Bool)

(assert (=> b!100236 m!110737))

(assert (=> b!100236 m!109659))

(assert (=> b!100236 m!109659))

(declare-fun m!110739 () Bool)

(assert (=> b!100236 m!110739))

(assert (=> b!100238 m!109659))

(assert (=> b!100238 m!109659))

(assert (=> b!100238 m!110739))

(assert (=> d!26781 d!27047))

(declare-fun b!100240 () Bool)

(declare-fun e!65284 () Option!156)

(declare-fun e!65285 () Option!156)

(assert (=> b!100240 (= e!65284 e!65285)))

(declare-fun c!17188 () Bool)

(assert (=> b!100240 (= c!17188 (and ((_ is Cons!1611) lt!50275) (not (= (_1!1193 (h!2206 lt!50275)) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun c!17187 () Bool)

(declare-fun d!27049 () Bool)

(assert (=> d!27049 (= c!17187 (and ((_ is Cons!1611) lt!50275) (= (_1!1193 (h!2206 lt!50275)) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27049 (= (getValueByKey!150 lt!50275 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) e!65284)))

(declare-fun b!100242 () Bool)

(assert (=> b!100242 (= e!65285 None!154)))

(declare-fun b!100239 () Bool)

(assert (=> b!100239 (= e!65284 (Some!155 (_2!1193 (h!2206 lt!50275))))))

(declare-fun b!100241 () Bool)

(assert (=> b!100241 (= e!65285 (getValueByKey!150 (t!5597 lt!50275) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!27049 c!17187) b!100239))

(assert (= (and d!27049 (not c!17187)) b!100240))

(assert (= (and b!100240 c!17188) b!100241))

(assert (= (and b!100240 (not c!17188)) b!100242))

(declare-fun m!110741 () Bool)

(assert (=> b!100241 m!110741))

(assert (=> d!26781 d!27049))

(declare-fun d!27051 () Bool)

(assert (=> d!27051 (= (getValueByKey!150 lt!50275 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun lt!50665 () Unit!3031)

(assert (=> d!27051 (= lt!50665 (choose!620 lt!50275 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun e!65286 () Bool)

(assert (=> d!27051 e!65286))

(declare-fun res!50299 () Bool)

(assert (=> d!27051 (=> (not res!50299) (not e!65286))))

(assert (=> d!27051 (= res!50299 (isStrictlySorted!300 lt!50275))))

(assert (=> d!27051 (= (lemmaContainsTupThenGetReturnValue!68 lt!50275 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50665)))

(declare-fun b!100243 () Bool)

(declare-fun res!50300 () Bool)

(assert (=> b!100243 (=> (not res!50300) (not e!65286))))

(assert (=> b!100243 (= res!50300 (containsKey!154 lt!50275 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100244 () Bool)

(assert (=> b!100244 (= e!65286 (contains!812 lt!50275 (tuple2!2367 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!27051 res!50299) b!100243))

(assert (= (and b!100243 res!50300) b!100244))

(assert (=> d!27051 m!109653))

(declare-fun m!110743 () Bool)

(assert (=> d!27051 m!110743))

(declare-fun m!110745 () Bool)

(assert (=> d!27051 m!110745))

(declare-fun m!110747 () Bool)

(assert (=> b!100243 m!110747))

(declare-fun m!110749 () Bool)

(assert (=> b!100244 m!110749))

(assert (=> d!26781 d!27051))

(declare-fun b!100245 () Bool)

(declare-fun e!65288 () List!1615)

(declare-fun e!65290 () List!1615)

(assert (=> b!100245 (= e!65288 e!65290)))

(declare-fun c!17192 () Bool)

(assert (=> b!100245 (= c!17192 (and ((_ is Cons!1611) (toList!794 lt!49960)) (= (_1!1193 (h!2206 (toList!794 lt!49960))) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun e!65289 () List!1615)

(declare-fun b!100246 () Bool)

(assert (=> b!100246 (= e!65289 (insertStrictlySorted!70 (t!5597 (toList!794 lt!49960)) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100247 () Bool)

(declare-fun call!10333 () List!1615)

(assert (=> b!100247 (= e!65290 call!10333)))

(declare-fun c!17191 () Bool)

(declare-fun bm!10331 () Bool)

(declare-fun call!10335 () List!1615)

(assert (=> bm!10331 (= call!10335 ($colon$colon!78 e!65289 (ite c!17191 (h!2206 (toList!794 lt!49960)) (tuple2!2367 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun c!17189 () Bool)

(assert (=> bm!10331 (= c!17189 c!17191)))

(declare-fun b!100248 () Bool)

(declare-fun e!65287 () List!1615)

(declare-fun call!10334 () List!1615)

(assert (=> b!100248 (= e!65287 call!10334)))

(declare-fun b!100249 () Bool)

(declare-fun e!65291 () Bool)

(declare-fun lt!50666 () List!1615)

(assert (=> b!100249 (= e!65291 (contains!812 lt!50666 (tuple2!2367 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!100250 () Bool)

(declare-fun res!50302 () Bool)

(assert (=> b!100250 (=> (not res!50302) (not e!65291))))

(assert (=> b!100250 (= res!50302 (containsKey!154 lt!50666 (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun c!17190 () Bool)

(declare-fun b!100251 () Bool)

(assert (=> b!100251 (= c!17190 (and ((_ is Cons!1611) (toList!794 lt!49960)) (bvsgt (_1!1193 (h!2206 (toList!794 lt!49960))) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> b!100251 (= e!65290 e!65287)))

(declare-fun b!100252 () Bool)

(assert (=> b!100252 (= e!65287 call!10334)))

(declare-fun b!100253 () Bool)

(assert (=> b!100253 (= e!65288 call!10335)))

(declare-fun b!100254 () Bool)

(assert (=> b!100254 (= e!65289 (ite c!17192 (t!5597 (toList!794 lt!49960)) (ite c!17190 (Cons!1611 (h!2206 (toList!794 lt!49960)) (t!5597 (toList!794 lt!49960))) Nil!1612)))))

(declare-fun bm!10332 () Bool)

(assert (=> bm!10332 (= call!10333 call!10335)))

(declare-fun d!27053 () Bool)

(assert (=> d!27053 e!65291))

(declare-fun res!50301 () Bool)

(assert (=> d!27053 (=> (not res!50301) (not e!65291))))

(assert (=> d!27053 (= res!50301 (isStrictlySorted!300 lt!50666))))

(assert (=> d!27053 (= lt!50666 e!65288)))

(assert (=> d!27053 (= c!17191 (and ((_ is Cons!1611) (toList!794 lt!49960)) (bvslt (_1!1193 (h!2206 (toList!794 lt!49960))) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27053 (isStrictlySorted!300 (toList!794 lt!49960))))

(assert (=> d!27053 (= (insertStrictlySorted!70 (toList!794 lt!49960) (_1!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50666)))

(declare-fun bm!10330 () Bool)

(assert (=> bm!10330 (= call!10334 call!10333)))

(assert (= (and d!27053 c!17191) b!100253))

(assert (= (and d!27053 (not c!17191)) b!100245))

(assert (= (and b!100245 c!17192) b!100247))

(assert (= (and b!100245 (not c!17192)) b!100251))

(assert (= (and b!100251 c!17190) b!100248))

(assert (= (and b!100251 (not c!17190)) b!100252))

(assert (= (or b!100248 b!100252) bm!10330))

(assert (= (or b!100247 bm!10330) bm!10332))

(assert (= (or b!100253 bm!10332) bm!10331))

(assert (= (and bm!10331 c!17189) b!100246))

(assert (= (and bm!10331 (not c!17189)) b!100254))

(assert (= (and d!27053 res!50301) b!100250))

(assert (= (and b!100250 res!50302) b!100249))

(declare-fun m!110751 () Bool)

(assert (=> b!100250 m!110751))

(declare-fun m!110753 () Bool)

(assert (=> bm!10331 m!110753))

(declare-fun m!110755 () Bool)

(assert (=> b!100249 m!110755))

(declare-fun m!110757 () Bool)

(assert (=> b!100246 m!110757))

(declare-fun m!110759 () Bool)

(assert (=> d!27053 m!110759))

(declare-fun m!110761 () Bool)

(assert (=> d!27053 m!110761))

(assert (=> d!26781 d!27053))

(declare-fun d!27055 () Bool)

(assert (=> d!27055 (contains!810 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))

(declare-fun lt!50669 () Unit!3031)

(declare-fun choose!622 (array!4254 array!4256 (_ BitVec 32) (_ BitVec 32) V!3163 V!3163 (_ BitVec 64) (_ BitVec 32) Int) Unit!3031)

(assert (=> d!27055 (= lt!50669 (choose!622 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(assert (=> d!27055 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!27055 (= (lemmaArrayContainsKeyThenInListMap!26 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50669)))

(declare-fun bs!4138 () Bool)

(assert (= bs!4138 d!27055))

(assert (=> bs!4138 m!109199))

(assert (=> bs!4138 m!109199))

(assert (=> bs!4138 m!109089))

(assert (=> bs!4138 m!109303))

(assert (=> bs!4138 m!109089))

(declare-fun m!110763 () Bool)

(assert (=> bs!4138 m!110763))

(assert (=> bs!4138 m!109329))

(assert (=> b!99525 d!27055))

(assert (=> b!99525 d!26707))

(assert (=> b!99525 d!26709))

(declare-fun lt!50670 () Bool)

(declare-fun d!27057 () Bool)

(assert (=> d!27057 (= lt!50670 (select (content!103 (toList!794 lt!50265)) (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun e!65292 () Bool)

(assert (=> d!27057 (= lt!50670 e!65292)))

(declare-fun res!50303 () Bool)

(assert (=> d!27057 (=> (not res!50303) (not e!65292))))

(assert (=> d!27057 (= res!50303 ((_ is Cons!1611) (toList!794 lt!50265)))))

(assert (=> d!27057 (= (contains!812 (toList!794 lt!50265) (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!50670)))

(declare-fun b!100255 () Bool)

(declare-fun e!65293 () Bool)

(assert (=> b!100255 (= e!65292 e!65293)))

(declare-fun res!50304 () Bool)

(assert (=> b!100255 (=> res!50304 e!65293)))

(assert (=> b!100255 (= res!50304 (= (h!2206 (toList!794 lt!50265)) (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun b!100256 () Bool)

(assert (=> b!100256 (= e!65293 (contains!812 (t!5597 (toList!794 lt!50265)) (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!27057 res!50303) b!100255))

(assert (= (and b!100255 (not res!50304)) b!100256))

(declare-fun m!110765 () Bool)

(assert (=> d!27057 m!110765))

(declare-fun m!110767 () Bool)

(assert (=> d!27057 m!110767))

(declare-fun m!110769 () Bool)

(assert (=> b!100256 m!110769))

(assert (=> b!99656 d!27057))

(declare-fun b!100258 () Bool)

(declare-fun e!65294 () Option!156)

(declare-fun e!65295 () Option!156)

(assert (=> b!100258 (= e!65294 e!65295)))

(declare-fun c!17194 () Bool)

(assert (=> b!100258 (= c!17194 (and ((_ is Cons!1611) (toList!794 lt!50208)) (not (= (_1!1193 (h!2206 (toList!794 lt!50208))) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun d!27059 () Bool)

(declare-fun c!17193 () Bool)

(assert (=> d!27059 (= c!17193 (and ((_ is Cons!1611) (toList!794 lt!50208)) (= (_1!1193 (h!2206 (toList!794 lt!50208))) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!27059 (= (getValueByKey!150 (toList!794 lt!50208) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!65294)))

(declare-fun b!100260 () Bool)

(assert (=> b!100260 (= e!65295 None!154)))

(declare-fun b!100257 () Bool)

(assert (=> b!100257 (= e!65294 (Some!155 (_2!1193 (h!2206 (toList!794 lt!50208)))))))

(declare-fun b!100259 () Bool)

(assert (=> b!100259 (= e!65295 (getValueByKey!150 (t!5597 (toList!794 lt!50208)) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!27059 c!17193) b!100257))

(assert (= (and d!27059 (not c!17193)) b!100258))

(assert (= (and b!100258 c!17194) b!100259))

(assert (= (and b!100258 (not c!17194)) b!100260))

(declare-fun m!110771 () Bool)

(assert (=> b!100259 m!110771))

(assert (=> b!99576 d!27059))

(declare-fun d!27061 () Bool)

(assert (=> d!27061 (isDefined!104 (getValueByKey!150 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun lt!50671 () Unit!3031)

(assert (=> d!27061 (= lt!50671 (choose!618 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun e!65296 () Bool)

(assert (=> d!27061 e!65296))

(declare-fun res!50305 () Bool)

(assert (=> d!27061 (=> (not res!50305) (not e!65296))))

(assert (=> d!27061 (= res!50305 (isStrictlySorted!300 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))))

(assert (=> d!27061 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) lt!50671)))

(declare-fun b!100261 () Bool)

(assert (=> b!100261 (= e!65296 (containsKey!154 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!27061 res!50305) b!100261))

(assert (=> d!27061 m!109089))

(assert (=> d!27061 m!109345))

(assert (=> d!27061 m!109345))

(assert (=> d!27061 m!109347))

(assert (=> d!27061 m!109089))

(declare-fun m!110773 () Bool)

(assert (=> d!27061 m!110773))

(declare-fun m!110775 () Bool)

(assert (=> d!27061 m!110775))

(assert (=> b!100261 m!109089))

(assert (=> b!100261 m!109341))

(assert (=> b!99456 d!27061))

(declare-fun d!27063 () Bool)

(assert (=> d!27063 (= (isDefined!104 (getValueByKey!150 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))) (not (isEmpty!365 (getValueByKey!150 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))))

(declare-fun bs!4139 () Bool)

(assert (= bs!4139 d!27063))

(assert (=> bs!4139 m!109345))

(declare-fun m!110777 () Bool)

(assert (=> bs!4139 m!110777))

(assert (=> b!99456 d!27063))

(declare-fun b!100263 () Bool)

(declare-fun e!65297 () Option!156)

(declare-fun e!65298 () Option!156)

(assert (=> b!100263 (= e!65297 e!65298)))

(declare-fun c!17196 () Bool)

(assert (=> b!100263 (= c!17196 (and ((_ is Cons!1611) (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (not (= (_1!1193 (h!2206 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))))

(declare-fun d!27065 () Bool)

(declare-fun c!17195 () Bool)

(assert (=> d!27065 (= c!17195 (and ((_ is Cons!1611) (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (= (_1!1193 (h!2206 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (=> d!27065 (= (getValueByKey!150 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) e!65297)))

(declare-fun b!100265 () Bool)

(assert (=> b!100265 (= e!65298 None!154)))

(declare-fun b!100262 () Bool)

(assert (=> b!100262 (= e!65297 (Some!155 (_2!1193 (h!2206 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))))))

(declare-fun b!100264 () Bool)

(assert (=> b!100264 (= e!65298 (getValueByKey!150 (t!5597 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!27065 c!17195) b!100262))

(assert (= (and d!27065 (not c!17195)) b!100263))

(assert (= (and b!100263 c!17196) b!100264))

(assert (= (and b!100263 (not c!17196)) b!100265))

(assert (=> b!100264 m!109089))

(declare-fun m!110779 () Bool)

(assert (=> b!100264 m!110779))

(assert (=> b!99456 d!27065))

(declare-fun d!27067 () Bool)

(assert (=> d!27067 (= (apply!93 lt!50072 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1307 (getValueByKey!150 (toList!794 lt!50072) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4140 () Bool)

(assert (= bs!4140 d!27067))

(assert (=> bs!4140 m!109349))

(declare-fun m!110781 () Bool)

(assert (=> bs!4140 m!110781))

(assert (=> bs!4140 m!110781))

(declare-fun m!110783 () Bool)

(assert (=> bs!4140 m!110783))

(assert (=> b!99470 d!27067))

(declare-fun d!27069 () Bool)

(declare-fun c!17197 () Bool)

(assert (=> d!27069 (= c!17197 ((_ is ValueCellFull!975) (select (arr!2021 (_values!2485 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!65299 () V!3163)

(assert (=> d!27069 (= (get!1304 (select (arr!2021 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!65299)))

(declare-fun b!100266 () Bool)

(assert (=> b!100266 (= e!65299 (get!1305 (select (arr!2021 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100267 () Bool)

(assert (=> b!100267 (= e!65299 (get!1306 (select (arr!2021 (_values!2485 newMap!16)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27069 c!17197) b!100266))

(assert (= (and d!27069 (not c!17197)) b!100267))

(assert (=> b!100266 m!109353))

(assert (=> b!100266 m!109355))

(declare-fun m!110785 () Bool)

(assert (=> b!100266 m!110785))

(assert (=> b!100267 m!109353))

(assert (=> b!100267 m!109355))

(declare-fun m!110787 () Bool)

(assert (=> b!100267 m!110787))

(assert (=> b!99470 d!27069))

(declare-fun d!27071 () Bool)

(assert (=> d!27071 (= (+!139 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!474 (_keys!4196 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))))

(assert (=> d!27071 true))

(declare-fun _$5!104 () Unit!3031)

(assert (=> d!27071 (= (choose!611 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3201 lt!50043) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2502 newMap!16)) _$5!104)))

(declare-fun bs!4141 () Bool)

(assert (= bs!4141 d!27071))

(assert (=> bs!4141 m!109199))

(assert (=> bs!4141 m!109199))

(assert (=> bs!4141 m!109337))

(assert (=> bs!4141 m!109297))

(assert (=> bs!4141 m!109339))

(assert (=> d!26705 d!27071))

(assert (=> d!26705 d!26835))

(declare-fun b!100269 () Bool)

(declare-fun e!65300 () Option!156)

(declare-fun e!65301 () Option!156)

(assert (=> b!100269 (= e!65300 e!65301)))

(declare-fun c!17199 () Bool)

(assert (=> b!100269 (= c!17199 (and ((_ is Cons!1611) (toList!794 lt!50253)) (not (= (_1!1193 (h!2206 (toList!794 lt!50253))) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun d!27073 () Bool)

(declare-fun c!17198 () Bool)

(assert (=> d!27073 (= c!17198 (and ((_ is Cons!1611) (toList!794 lt!50253)) (= (_1!1193 (h!2206 (toList!794 lt!50253))) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27073 (= (getValueByKey!150 (toList!794 lt!50253) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) e!65300)))

(declare-fun b!100271 () Bool)

(assert (=> b!100271 (= e!65301 None!154)))

(declare-fun b!100268 () Bool)

(assert (=> b!100268 (= e!65300 (Some!155 (_2!1193 (h!2206 (toList!794 lt!50253)))))))

(declare-fun b!100270 () Bool)

(assert (=> b!100270 (= e!65301 (getValueByKey!150 (t!5597 (toList!794 lt!50253)) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!27073 c!17198) b!100268))

(assert (= (and d!27073 (not c!17198)) b!100269))

(assert (= (and b!100269 c!17199) b!100270))

(assert (= (and b!100269 (not c!17199)) b!100271))

(declare-fun m!110789 () Bool)

(assert (=> b!100270 m!110789))

(assert (=> b!99646 d!27073))

(assert (=> b!99630 d!26837))

(declare-fun d!27075 () Bool)

(declare-fun lt!50672 () Bool)

(assert (=> d!27075 (= lt!50672 (select (content!102 (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!65303 () Bool)

(assert (=> d!27075 (= lt!50672 e!65303)))

(declare-fun res!50306 () Bool)

(assert (=> d!27075 (=> (not res!50306) (not e!65303))))

(assert (=> d!27075 (= res!50306 ((_ is Cons!1612) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)))))

(assert (=> d!27075 (= (contains!811 (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!50672)))

(declare-fun b!100272 () Bool)

(declare-fun e!65302 () Bool)

(assert (=> b!100272 (= e!65303 e!65302)))

(declare-fun res!50307 () Bool)

(assert (=> b!100272 (=> res!50307 e!65302)))

(assert (=> b!100272 (= res!50307 (= (h!2207 (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!100273 () Bool)

(assert (=> b!100273 (= e!65302 (contains!811 (t!5598 (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!27075 res!50306) b!100272))

(assert (= (and b!100272 (not res!50307)) b!100273))

(declare-fun m!110791 () Bool)

(assert (=> d!27075 m!110791))

(assert (=> d!27075 m!109791))

(declare-fun m!110793 () Bool)

(assert (=> d!27075 m!110793))

(assert (=> b!100273 m!109791))

(declare-fun m!110795 () Bool)

(assert (=> b!100273 m!110795))

(assert (=> b!99757 d!27075))

(declare-fun d!27077 () Bool)

(assert (=> d!27077 (= (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!365 (getValueByKey!150 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4142 () Bool)

(assert (= bs!4142 d!27077))

(assert (=> bs!4142 m!109787))

(declare-fun m!110797 () Bool)

(assert (=> bs!4142 m!110797))

(assert (=> b!99755 d!27077))

(assert (=> b!99755 d!26995))

(declare-fun d!27079 () Bool)

(declare-fun e!65304 () Bool)

(assert (=> d!27079 e!65304))

(declare-fun res!50308 () Bool)

(assert (=> d!27079 (=> res!50308 e!65304)))

(declare-fun lt!50674 () Bool)

(assert (=> d!27079 (= res!50308 (not lt!50674))))

(declare-fun lt!50676 () Bool)

(assert (=> d!27079 (= lt!50674 lt!50676)))

(declare-fun lt!50673 () Unit!3031)

(declare-fun e!65305 () Unit!3031)

(assert (=> d!27079 (= lt!50673 e!65305)))

(declare-fun c!17200 () Bool)

(assert (=> d!27079 (= c!17200 lt!50676)))

(assert (=> d!27079 (= lt!50676 (containsKey!154 (toList!794 (+!139 lt!50306 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) lt!50290))))

(assert (=> d!27079 (= (contains!810 (+!139 lt!50306 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50290) lt!50674)))

(declare-fun b!100274 () Bool)

(declare-fun lt!50675 () Unit!3031)

(assert (=> b!100274 (= e!65305 lt!50675)))

(assert (=> b!100274 (= lt!50675 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 (+!139 lt!50306 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) lt!50290))))

(assert (=> b!100274 (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!50306 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) lt!50290))))

(declare-fun b!100275 () Bool)

(declare-fun Unit!3071 () Unit!3031)

(assert (=> b!100275 (= e!65305 Unit!3071)))

(declare-fun b!100276 () Bool)

(assert (=> b!100276 (= e!65304 (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!50306 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) lt!50290)))))

(assert (= (and d!27079 c!17200) b!100274))

(assert (= (and d!27079 (not c!17200)) b!100275))

(assert (= (and d!27079 (not res!50308)) b!100276))

(declare-fun m!110799 () Bool)

(assert (=> d!27079 m!110799))

(declare-fun m!110801 () Bool)

(assert (=> b!100274 m!110801))

(declare-fun m!110803 () Bool)

(assert (=> b!100274 m!110803))

(assert (=> b!100274 m!110803))

(declare-fun m!110805 () Bool)

(assert (=> b!100274 m!110805))

(assert (=> b!100276 m!110803))

(assert (=> b!100276 m!110803))

(assert (=> b!100276 m!110805))

(assert (=> b!99695 d!27079))

(declare-fun d!27081 () Bool)

(declare-fun e!65306 () Bool)

(assert (=> d!27081 e!65306))

(declare-fun res!50309 () Bool)

(assert (=> d!27081 (=> (not res!50309) (not e!65306))))

(declare-fun lt!50678 () ListLongMap!1557)

(assert (=> d!27081 (= res!50309 (contains!810 lt!50678 (_1!1193 (tuple2!2367 lt!50302 (minValue!2383 newMap!16)))))))

(declare-fun lt!50680 () List!1615)

(assert (=> d!27081 (= lt!50678 (ListLongMap!1558 lt!50680))))

(declare-fun lt!50679 () Unit!3031)

(declare-fun lt!50677 () Unit!3031)

(assert (=> d!27081 (= lt!50679 lt!50677)))

(assert (=> d!27081 (= (getValueByKey!150 lt!50680 (_1!1193 (tuple2!2367 lt!50302 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50302 (minValue!2383 newMap!16)))))))

(assert (=> d!27081 (= lt!50677 (lemmaContainsTupThenGetReturnValue!68 lt!50680 (_1!1193 (tuple2!2367 lt!50302 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50302 (minValue!2383 newMap!16)))))))

(assert (=> d!27081 (= lt!50680 (insertStrictlySorted!70 (toList!794 lt!50300) (_1!1193 (tuple2!2367 lt!50302 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50302 (minValue!2383 newMap!16)))))))

(assert (=> d!27081 (= (+!139 lt!50300 (tuple2!2367 lt!50302 (minValue!2383 newMap!16))) lt!50678)))

(declare-fun b!100277 () Bool)

(declare-fun res!50310 () Bool)

(assert (=> b!100277 (=> (not res!50310) (not e!65306))))

(assert (=> b!100277 (= res!50310 (= (getValueByKey!150 (toList!794 lt!50678) (_1!1193 (tuple2!2367 lt!50302 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50302 (minValue!2383 newMap!16))))))))

(declare-fun b!100278 () Bool)

(assert (=> b!100278 (= e!65306 (contains!812 (toList!794 lt!50678) (tuple2!2367 lt!50302 (minValue!2383 newMap!16))))))

(assert (= (and d!27081 res!50309) b!100277))

(assert (= (and b!100277 res!50310) b!100278))

(declare-fun m!110807 () Bool)

(assert (=> d!27081 m!110807))

(declare-fun m!110809 () Bool)

(assert (=> d!27081 m!110809))

(declare-fun m!110811 () Bool)

(assert (=> d!27081 m!110811))

(declare-fun m!110813 () Bool)

(assert (=> d!27081 m!110813))

(declare-fun m!110815 () Bool)

(assert (=> b!100277 m!110815))

(declare-fun m!110817 () Bool)

(assert (=> b!100278 m!110817))

(assert (=> b!99695 d!27081))

(declare-fun d!27083 () Bool)

(assert (=> d!27083 (= (apply!93 lt!50296 lt!50310) (get!1307 (getValueByKey!150 (toList!794 lt!50296) lt!50310)))))

(declare-fun bs!4143 () Bool)

(assert (= bs!4143 d!27083))

(declare-fun m!110819 () Bool)

(assert (=> bs!4143 m!110819))

(assert (=> bs!4143 m!110819))

(declare-fun m!110821 () Bool)

(assert (=> bs!4143 m!110821))

(assert (=> b!99695 d!27083))

(declare-fun d!27085 () Bool)

(declare-fun e!65307 () Bool)

(assert (=> d!27085 e!65307))

(declare-fun res!50311 () Bool)

(assert (=> d!27085 (=> (not res!50311) (not e!65307))))

(declare-fun lt!50682 () ListLongMap!1557)

(assert (=> d!27085 (= res!50311 (contains!810 lt!50682 (_1!1193 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(declare-fun lt!50684 () List!1615)

(assert (=> d!27085 (= lt!50682 (ListLongMap!1558 lt!50684))))

(declare-fun lt!50683 () Unit!3031)

(declare-fun lt!50681 () Unit!3031)

(assert (=> d!27085 (= lt!50683 lt!50681)))

(assert (=> d!27085 (= (getValueByKey!150 lt!50684 (_1!1193 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) (Some!155 (_2!1193 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27085 (= lt!50681 (lemmaContainsTupThenGetReturnValue!68 lt!50684 (_1!1193 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) (_2!1193 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27085 (= lt!50684 (insertStrictlySorted!70 (toList!794 lt!50306) (_1!1193 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) (_2!1193 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27085 (= (+!139 lt!50306 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50682)))

(declare-fun b!100279 () Bool)

(declare-fun res!50312 () Bool)

(assert (=> b!100279 (=> (not res!50312) (not e!65307))))

(assert (=> b!100279 (= res!50312 (= (getValueByKey!150 (toList!794 lt!50682) (_1!1193 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) (Some!155 (_2!1193 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))))))))

(declare-fun b!100280 () Bool)

(assert (=> b!100280 (= e!65307 (contains!812 (toList!794 lt!50682) (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))))))

(assert (= (and d!27085 res!50311) b!100279))

(assert (= (and b!100279 res!50312) b!100280))

(declare-fun m!110823 () Bool)

(assert (=> d!27085 m!110823))

(declare-fun m!110825 () Bool)

(assert (=> d!27085 m!110825))

(declare-fun m!110827 () Bool)

(assert (=> d!27085 m!110827))

(declare-fun m!110829 () Bool)

(assert (=> d!27085 m!110829))

(declare-fun m!110831 () Bool)

(assert (=> b!100279 m!110831))

(declare-fun m!110833 () Bool)

(assert (=> b!100280 m!110833))

(assert (=> b!99695 d!27085))

(declare-fun d!27087 () Bool)

(declare-fun e!65308 () Bool)

(assert (=> d!27087 e!65308))

(declare-fun res!50313 () Bool)

(assert (=> d!27087 (=> (not res!50313) (not e!65308))))

(declare-fun lt!50686 () ListLongMap!1557)

(assert (=> d!27087 (= res!50313 (contains!810 lt!50686 (_1!1193 (tuple2!2367 lt!50304 (minValue!2383 newMap!16)))))))

(declare-fun lt!50688 () List!1615)

(assert (=> d!27087 (= lt!50686 (ListLongMap!1558 lt!50688))))

(declare-fun lt!50687 () Unit!3031)

(declare-fun lt!50685 () Unit!3031)

(assert (=> d!27087 (= lt!50687 lt!50685)))

(assert (=> d!27087 (= (getValueByKey!150 lt!50688 (_1!1193 (tuple2!2367 lt!50304 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50304 (minValue!2383 newMap!16)))))))

(assert (=> d!27087 (= lt!50685 (lemmaContainsTupThenGetReturnValue!68 lt!50688 (_1!1193 (tuple2!2367 lt!50304 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50304 (minValue!2383 newMap!16)))))))

(assert (=> d!27087 (= lt!50688 (insertStrictlySorted!70 (toList!794 lt!50296) (_1!1193 (tuple2!2367 lt!50304 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50304 (minValue!2383 newMap!16)))))))

(assert (=> d!27087 (= (+!139 lt!50296 (tuple2!2367 lt!50304 (minValue!2383 newMap!16))) lt!50686)))

(declare-fun b!100281 () Bool)

(declare-fun res!50314 () Bool)

(assert (=> b!100281 (=> (not res!50314) (not e!65308))))

(assert (=> b!100281 (= res!50314 (= (getValueByKey!150 (toList!794 lt!50686) (_1!1193 (tuple2!2367 lt!50304 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50304 (minValue!2383 newMap!16))))))))

(declare-fun b!100282 () Bool)

(assert (=> b!100282 (= e!65308 (contains!812 (toList!794 lt!50686) (tuple2!2367 lt!50304 (minValue!2383 newMap!16))))))

(assert (= (and d!27087 res!50313) b!100281))

(assert (= (and b!100281 res!50314) b!100282))

(declare-fun m!110835 () Bool)

(assert (=> d!27087 m!110835))

(declare-fun m!110837 () Bool)

(assert (=> d!27087 m!110837))

(declare-fun m!110839 () Bool)

(assert (=> d!27087 m!110839))

(declare-fun m!110841 () Bool)

(assert (=> d!27087 m!110841))

(declare-fun m!110843 () Bool)

(assert (=> b!100281 m!110843))

(declare-fun m!110845 () Bool)

(assert (=> b!100282 m!110845))

(assert (=> b!99695 d!27087))

(declare-fun d!27089 () Bool)

(assert (=> d!27089 (= (apply!93 (+!139 lt!50296 (tuple2!2367 lt!50304 (minValue!2383 newMap!16))) lt!50310) (apply!93 lt!50296 lt!50310))))

(declare-fun lt!50689 () Unit!3031)

(assert (=> d!27089 (= lt!50689 (choose!617 lt!50296 lt!50304 (minValue!2383 newMap!16) lt!50310))))

(declare-fun e!65309 () Bool)

(assert (=> d!27089 e!65309))

(declare-fun res!50315 () Bool)

(assert (=> d!27089 (=> (not res!50315) (not e!65309))))

(assert (=> d!27089 (= res!50315 (contains!810 lt!50296 lt!50310))))

(assert (=> d!27089 (= (addApplyDifferent!69 lt!50296 lt!50304 (minValue!2383 newMap!16) lt!50310) lt!50689)))

(declare-fun b!100283 () Bool)

(assert (=> b!100283 (= e!65309 (not (= lt!50310 lt!50304)))))

(assert (= (and d!27089 res!50315) b!100283))

(assert (=> d!27089 m!109709))

(assert (=> d!27089 m!109711))

(declare-fun m!110847 () Bool)

(assert (=> d!27089 m!110847))

(declare-fun m!110849 () Bool)

(assert (=> d!27089 m!110849))

(assert (=> d!27089 m!109709))

(assert (=> d!27089 m!109737))

(assert (=> b!99695 d!27089))

(declare-fun d!27091 () Bool)

(assert (=> d!27091 (= (apply!93 (+!139 lt!50307 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50308) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!50307 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) lt!50308)))))

(declare-fun bs!4144 () Bool)

(assert (= bs!4144 d!27091))

(declare-fun m!110851 () Bool)

(assert (=> bs!4144 m!110851))

(assert (=> bs!4144 m!110851))

(declare-fun m!110853 () Bool)

(assert (=> bs!4144 m!110853))

(assert (=> b!99695 d!27091))

(declare-fun d!27093 () Bool)

(assert (=> d!27093 (= (apply!93 (+!139 lt!50307 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50308) (apply!93 lt!50307 lt!50308))))

(declare-fun lt!50690 () Unit!3031)

(assert (=> d!27093 (= lt!50690 (choose!617 lt!50307 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50308))))

(declare-fun e!65310 () Bool)

(assert (=> d!27093 e!65310))

(declare-fun res!50316 () Bool)

(assert (=> d!27093 (=> (not res!50316) (not e!65310))))

(assert (=> d!27093 (= res!50316 (contains!810 lt!50307 lt!50308))))

(assert (=> d!27093 (= (addApplyDifferent!69 lt!50307 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50308) lt!50690)))

(declare-fun b!100284 () Bool)

(assert (=> b!100284 (= e!65310 (not (= lt!50308 lt!50295)))))

(assert (= (and d!27093 res!50316) b!100284))

(assert (=> d!27093 m!109717))

(assert (=> d!27093 m!109729))

(declare-fun m!110855 () Bool)

(assert (=> d!27093 m!110855))

(declare-fun m!110857 () Bool)

(assert (=> d!27093 m!110857))

(assert (=> d!27093 m!109717))

(assert (=> d!27093 m!109725))

(assert (=> b!99695 d!27093))

(declare-fun d!27095 () Bool)

(declare-fun e!65311 () Bool)

(assert (=> d!27095 e!65311))

(declare-fun res!50317 () Bool)

(assert (=> d!27095 (=> (not res!50317) (not e!65311))))

(declare-fun lt!50692 () ListLongMap!1557)

(assert (=> d!27095 (= res!50317 (contains!810 lt!50692 (_1!1193 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(declare-fun lt!50694 () List!1615)

(assert (=> d!27095 (= lt!50692 (ListLongMap!1558 lt!50694))))

(declare-fun lt!50693 () Unit!3031)

(declare-fun lt!50691 () Unit!3031)

(assert (=> d!27095 (= lt!50693 lt!50691)))

(assert (=> d!27095 (= (getValueByKey!150 lt!50694 (_1!1193 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) (Some!155 (_2!1193 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27095 (= lt!50691 (lemmaContainsTupThenGetReturnValue!68 lt!50694 (_1!1193 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) (_2!1193 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27095 (= lt!50694 (insertStrictlySorted!70 (toList!794 lt!50307) (_1!1193 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) (_2!1193 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))))))

(assert (=> d!27095 (= (+!139 lt!50307 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50692)))

(declare-fun b!100285 () Bool)

(declare-fun res!50318 () Bool)

(assert (=> b!100285 (=> (not res!50318) (not e!65311))))

(assert (=> b!100285 (= res!50318 (= (getValueByKey!150 (toList!794 lt!50692) (_1!1193 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))))) (Some!155 (_2!1193 (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))))))))

(declare-fun b!100286 () Bool)

(assert (=> b!100286 (= e!65311 (contains!812 (toList!794 lt!50692) (tuple2!2367 lt!50295 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))))))

(assert (= (and d!27095 res!50317) b!100285))

(assert (= (and b!100285 res!50318) b!100286))

(declare-fun m!110859 () Bool)

(assert (=> d!27095 m!110859))

(declare-fun m!110861 () Bool)

(assert (=> d!27095 m!110861))

(declare-fun m!110863 () Bool)

(assert (=> d!27095 m!110863))

(declare-fun m!110865 () Bool)

(assert (=> d!27095 m!110865))

(declare-fun m!110867 () Bool)

(assert (=> b!100285 m!110867))

(declare-fun m!110869 () Bool)

(assert (=> b!100286 m!110869))

(assert (=> b!99695 d!27095))

(declare-fun d!27097 () Bool)

(assert (=> d!27097 (= (apply!93 lt!50300 lt!50299) (get!1307 (getValueByKey!150 (toList!794 lt!50300) lt!50299)))))

(declare-fun bs!4145 () Bool)

(assert (= bs!4145 d!27097))

(declare-fun m!110871 () Bool)

(assert (=> bs!4145 m!110871))

(assert (=> bs!4145 m!110871))

(declare-fun m!110873 () Bool)

(assert (=> bs!4145 m!110873))

(assert (=> b!99695 d!27097))

(declare-fun d!27099 () Bool)

(assert (=> d!27099 (= (apply!93 (+!139 lt!50300 (tuple2!2367 lt!50302 (minValue!2383 newMap!16))) lt!50299) (apply!93 lt!50300 lt!50299))))

(declare-fun lt!50695 () Unit!3031)

(assert (=> d!27099 (= lt!50695 (choose!617 lt!50300 lt!50302 (minValue!2383 newMap!16) lt!50299))))

(declare-fun e!65312 () Bool)

(assert (=> d!27099 e!65312))

(declare-fun res!50319 () Bool)

(assert (=> d!27099 (=> (not res!50319) (not e!65312))))

(assert (=> d!27099 (= res!50319 (contains!810 lt!50300 lt!50299))))

(assert (=> d!27099 (= (addApplyDifferent!69 lt!50300 lt!50302 (minValue!2383 newMap!16) lt!50299) lt!50695)))

(declare-fun b!100287 () Bool)

(assert (=> b!100287 (= e!65312 (not (= lt!50299 lt!50302)))))

(assert (= (and d!27099 res!50319) b!100287))

(assert (=> d!27099 m!109731))

(assert (=> d!27099 m!109735))

(declare-fun m!110875 () Bool)

(assert (=> d!27099 m!110875))

(declare-fun m!110877 () Bool)

(assert (=> d!27099 m!110877))

(assert (=> d!27099 m!109731))

(assert (=> d!27099 m!109713))

(assert (=> b!99695 d!27099))

(declare-fun d!27101 () Bool)

(assert (=> d!27101 (= (apply!93 (+!139 lt!50296 (tuple2!2367 lt!50304 (minValue!2383 newMap!16))) lt!50310) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!50296 (tuple2!2367 lt!50304 (minValue!2383 newMap!16)))) lt!50310)))))

(declare-fun bs!4146 () Bool)

(assert (= bs!4146 d!27101))

(declare-fun m!110879 () Bool)

(assert (=> bs!4146 m!110879))

(assert (=> bs!4146 m!110879))

(declare-fun m!110881 () Bool)

(assert (=> bs!4146 m!110881))

(assert (=> b!99695 d!27101))

(declare-fun b!100288 () Bool)

(declare-fun e!65315 () Bool)

(assert (=> b!100288 (= e!65315 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100288 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!100289 () Bool)

(assert (=> b!100289 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (=> b!100289 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))))))))

(declare-fun e!65316 () Bool)

(declare-fun lt!50697 () ListLongMap!1557)

(assert (=> b!100289 (= e!65316 (= (apply!93 lt!50697 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100290 () Bool)

(declare-fun lt!50700 () Unit!3031)

(declare-fun lt!50699 () Unit!3031)

(assert (=> b!100290 (= lt!50700 lt!50699)))

(declare-fun lt!50698 () (_ BitVec 64))

(declare-fun lt!50702 () (_ BitVec 64))

(declare-fun lt!50701 () V!3163)

(declare-fun lt!50696 () ListLongMap!1557)

(assert (=> b!100290 (not (contains!810 (+!139 lt!50696 (tuple2!2367 lt!50702 lt!50701)) lt!50698))))

(assert (=> b!100290 (= lt!50699 (addStillNotContains!43 lt!50696 lt!50702 lt!50701 lt!50698))))

(assert (=> b!100290 (= lt!50698 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!100290 (= lt!50701 (get!1304 (select (arr!2021 (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!100290 (= lt!50702 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!10336 () ListLongMap!1557)

(assert (=> b!100290 (= lt!50696 call!10336)))

(declare-fun e!65314 () ListLongMap!1557)

(assert (=> b!100290 (= e!65314 (+!139 call!10336 (tuple2!2367 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) (get!1304 (select (arr!2021 (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100291 () Bool)

(declare-fun e!65318 () Bool)

(assert (=> b!100291 (= e!65318 (isEmpty!364 lt!50697))))

(declare-fun b!100292 () Bool)

(declare-fun e!65317 () Bool)

(assert (=> b!100292 (= e!65317 e!65316)))

(assert (=> b!100292 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun res!50322 () Bool)

(assert (=> b!100292 (= res!50322 (contains!810 lt!50697 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100292 (=> (not res!50322) (not e!65316))))

(declare-fun b!100293 () Bool)

(declare-fun e!65313 () ListLongMap!1557)

(assert (=> b!100293 (= e!65313 (ListLongMap!1558 Nil!1612))))

(declare-fun b!100294 () Bool)

(assert (=> b!100294 (= e!65313 e!65314)))

(declare-fun c!17202 () Bool)

(assert (=> b!100294 (= c!17202 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!27103 () Bool)

(declare-fun e!65319 () Bool)

(assert (=> d!27103 e!65319))

(declare-fun res!50321 () Bool)

(assert (=> d!27103 (=> (not res!50321) (not e!65319))))

(assert (=> d!27103 (= res!50321 (not (contains!810 lt!50697 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27103 (= lt!50697 e!65313)))

(declare-fun c!17201 () Bool)

(assert (=> d!27103 (= c!17201 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!27103 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!27103 (= (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) lt!50697)))

(declare-fun b!100295 () Bool)

(assert (=> b!100295 (= e!65319 e!65317)))

(declare-fun c!17203 () Bool)

(assert (=> b!100295 (= c!17203 e!65315)))

(declare-fun res!50323 () Bool)

(assert (=> b!100295 (=> (not res!50323) (not e!65315))))

(assert (=> b!100295 (= res!50323 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(declare-fun bm!10333 () Bool)

(assert (=> bm!10333 (= call!10336 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (minValue!2383 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16)))))

(declare-fun b!100296 () Bool)

(declare-fun res!50320 () Bool)

(assert (=> b!100296 (=> (not res!50320) (not e!65319))))

(assert (=> b!100296 (= res!50320 (not (contains!810 lt!50697 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100297 () Bool)

(assert (=> b!100297 (= e!65318 (= lt!50697 (getCurrentListMapNoExtraKeys!103 (_keys!4196 newMap!16) (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16)))) (mask!6609 newMap!16) (ite (and c!16967 c!16973) lt!50056 (extraKeys!2319 newMap!16)) (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) (minValue!2383 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2502 newMap!16))))))

(declare-fun b!100298 () Bool)

(assert (=> b!100298 (= e!65314 call!10336)))

(declare-fun b!100299 () Bool)

(assert (=> b!100299 (= e!65317 e!65318)))

(declare-fun c!17204 () Bool)

(assert (=> b!100299 (= c!17204 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 newMap!16))))))

(assert (= (and d!27103 c!17201) b!100293))

(assert (= (and d!27103 (not c!17201)) b!100294))

(assert (= (and b!100294 c!17202) b!100290))

(assert (= (and b!100294 (not c!17202)) b!100298))

(assert (= (or b!100290 b!100298) bm!10333))

(assert (= (and d!27103 res!50321) b!100296))

(assert (= (and b!100296 res!50320) b!100295))

(assert (= (and b!100295 res!50323) b!100288))

(assert (= (and b!100295 c!17203) b!100292))

(assert (= (and b!100295 (not c!17203)) b!100299))

(assert (= (and b!100292 res!50322) b!100289))

(assert (= (and b!100299 c!17204) b!100297))

(assert (= (and b!100299 (not c!17204)) b!100291))

(declare-fun b_lambda!4493 () Bool)

(assert (=> (not b_lambda!4493) (not b!100289)))

(assert (=> b!100289 t!5605))

(declare-fun b_and!6181 () Bool)

(assert (= b_and!6177 (and (=> t!5605 result!3311) b_and!6181)))

(assert (=> b!100289 t!5607))

(declare-fun b_and!6183 () Bool)

(assert (= b_and!6179 (and (=> t!5607 result!3313) b_and!6183)))

(declare-fun b_lambda!4495 () Bool)

(assert (=> (not b_lambda!4495) (not b!100290)))

(assert (=> b!100290 t!5605))

(declare-fun b_and!6185 () Bool)

(assert (= b_and!6181 (and (=> t!5605 result!3311) b_and!6185)))

(assert (=> b!100290 t!5607))

(declare-fun b_and!6187 () Bool)

(assert (= b_and!6183 (and (=> t!5607 result!3313) b_and!6187)))

(assert (=> b!100294 m!109349))

(assert (=> b!100294 m!109349))

(assert (=> b!100294 m!109367))

(assert (=> b!100292 m!109349))

(assert (=> b!100292 m!109349))

(declare-fun m!110883 () Bool)

(assert (=> b!100292 m!110883))

(declare-fun m!110885 () Bool)

(assert (=> b!100291 m!110885))

(assert (=> b!100288 m!109349))

(assert (=> b!100288 m!109349))

(assert (=> b!100288 m!109367))

(declare-fun m!110887 () Bool)

(assert (=> bm!10333 m!110887))

(declare-fun m!110889 () Bool)

(assert (=> b!100296 m!110889))

(assert (=> b!100290 m!109355))

(declare-fun m!110891 () Bool)

(assert (=> b!100290 m!110891))

(assert (=> b!100290 m!109691))

(declare-fun m!110893 () Bool)

(assert (=> b!100290 m!110893))

(declare-fun m!110895 () Bool)

(assert (=> b!100290 m!110895))

(declare-fun m!110897 () Bool)

(assert (=> b!100290 m!110897))

(assert (=> b!100290 m!109349))

(assert (=> b!100290 m!109691))

(assert (=> b!100290 m!109355))

(assert (=> b!100290 m!109693))

(assert (=> b!100290 m!110893))

(declare-fun m!110899 () Bool)

(assert (=> d!27103 m!110899))

(assert (=> d!27103 m!109329))

(assert (=> b!100297 m!110887))

(assert (=> b!100289 m!109355))

(assert (=> b!100289 m!109691))

(assert (=> b!100289 m!109355))

(assert (=> b!100289 m!109693))

(assert (=> b!100289 m!109691))

(assert (=> b!100289 m!109349))

(declare-fun m!110901 () Bool)

(assert (=> b!100289 m!110901))

(assert (=> b!100289 m!109349))

(assert (=> b!99695 d!27103))

(declare-fun d!27105 () Bool)

(assert (=> d!27105 (contains!810 (+!139 lt!50306 (tuple2!2367 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)))) lt!50290)))

(declare-fun lt!50703 () Unit!3031)

(assert (=> d!27105 (= lt!50703 (choose!616 lt!50306 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50290))))

(assert (=> d!27105 (contains!810 lt!50306 lt!50290)))

(assert (=> d!27105 (= (addStillContains!69 lt!50306 lt!50303 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16)) lt!50290) lt!50703)))

(declare-fun bs!4147 () Bool)

(assert (= bs!4147 d!27105))

(assert (=> bs!4147 m!109715))

(assert (=> bs!4147 m!109715))

(assert (=> bs!4147 m!109719))

(declare-fun m!110903 () Bool)

(assert (=> bs!4147 m!110903))

(declare-fun m!110905 () Bool)

(assert (=> bs!4147 m!110905))

(assert (=> b!99695 d!27105))

(declare-fun d!27107 () Bool)

(assert (=> d!27107 (= (apply!93 lt!50307 lt!50308) (get!1307 (getValueByKey!150 (toList!794 lt!50307) lt!50308)))))

(declare-fun bs!4148 () Bool)

(assert (= bs!4148 d!27107))

(declare-fun m!110907 () Bool)

(assert (=> bs!4148 m!110907))

(assert (=> bs!4148 m!110907))

(declare-fun m!110909 () Bool)

(assert (=> bs!4148 m!110909))

(assert (=> b!99695 d!27107))

(declare-fun d!27109 () Bool)

(assert (=> d!27109 (= (apply!93 (+!139 lt!50300 (tuple2!2367 lt!50302 (minValue!2383 newMap!16))) lt!50299) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!50300 (tuple2!2367 lt!50302 (minValue!2383 newMap!16)))) lt!50299)))))

(declare-fun bs!4149 () Bool)

(assert (= bs!4149 d!27109))

(declare-fun m!110911 () Bool)

(assert (=> bs!4149 m!110911))

(assert (=> bs!4149 m!110911))

(declare-fun m!110913 () Bool)

(assert (=> bs!4149 m!110913))

(assert (=> b!99695 d!27109))

(assert (=> d!26709 d!26835))

(declare-fun d!27111 () Bool)

(declare-fun res!50324 () Bool)

(declare-fun e!65320 () Bool)

(assert (=> d!27111 (=> res!50324 e!65320)))

(assert (=> d!27111 (= res!50324 (and ((_ is Cons!1611) (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (= (_1!1193 (h!2206 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (=> d!27111 (= (containsKey!154 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) e!65320)))

(declare-fun b!100300 () Bool)

(declare-fun e!65321 () Bool)

(assert (=> b!100300 (= e!65320 e!65321)))

(declare-fun res!50325 () Bool)

(assert (=> b!100300 (=> (not res!50325) (not e!65321))))

(assert (=> b!100300 (= res!50325 (and (or (not ((_ is Cons!1611) (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (bvsle (_1!1193 (h!2206 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))) ((_ is Cons!1611) (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (bvslt (_1!1193 (h!2206 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16))))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(declare-fun b!100301 () Bool)

(assert (=> b!100301 (= e!65321 (containsKey!154 (t!5597 (toList!794 (getCurrentListMap!474 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!27111 (not res!50324)) b!100300))

(assert (= (and b!100300 res!50325) b!100301))

(assert (=> b!100301 m!109089))

(declare-fun m!110915 () Bool)

(assert (=> b!100301 m!110915))

(assert (=> d!26707 d!27111))

(declare-fun lt!50704 () Bool)

(declare-fun d!27113 () Bool)

(assert (=> d!27113 (= lt!50704 (select (content!103 (toList!794 lt!50277)) (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun e!65322 () Bool)

(assert (=> d!27113 (= lt!50704 e!65322)))

(declare-fun res!50326 () Bool)

(assert (=> d!27113 (=> (not res!50326) (not e!65322))))

(assert (=> d!27113 (= res!50326 ((_ is Cons!1611) (toList!794 lt!50277)))))

(assert (=> d!27113 (= (contains!812 (toList!794 lt!50277) (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50704)))

(declare-fun b!100302 () Bool)

(declare-fun e!65323 () Bool)

(assert (=> b!100302 (= e!65322 e!65323)))

(declare-fun res!50327 () Bool)

(assert (=> b!100302 (=> res!50327 e!65323)))

(assert (=> b!100302 (= res!50327 (= (h!2206 (toList!794 lt!50277)) (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100303 () Bool)

(assert (=> b!100303 (= e!65323 (contains!812 (t!5597 (toList!794 lt!50277)) (ite (or c!16927 c!16930) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!27113 res!50326) b!100302))

(assert (= (and b!100302 (not res!50327)) b!100303))

(declare-fun m!110917 () Bool)

(assert (=> d!27113 m!110917))

(declare-fun m!110919 () Bool)

(assert (=> d!27113 m!110919))

(declare-fun m!110921 () Bool)

(assert (=> b!100303 m!110921))

(assert (=> b!99675 d!27113))

(declare-fun d!27115 () Bool)

(assert (=> d!27115 (= (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49952)) (v!2821 (getValueByKey!150 (toList!794 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49952)))))

(assert (=> d!26755 d!27115))

(declare-fun b!100305 () Bool)

(declare-fun e!65324 () Option!156)

(declare-fun e!65325 () Option!156)

(assert (=> b!100305 (= e!65324 e!65325)))

(declare-fun c!17206 () Bool)

(assert (=> b!100305 (= c!17206 (and ((_ is Cons!1611) (toList!794 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) (not (= (_1!1193 (h!2206 (toList!794 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))) lt!49952))))))

(declare-fun c!17205 () Bool)

(declare-fun d!27117 () Bool)

(assert (=> d!27117 (= c!17205 (and ((_ is Cons!1611) (toList!794 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) (= (_1!1193 (h!2206 (toList!794 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))) lt!49952)))))

(assert (=> d!27117 (= (getValueByKey!150 (toList!794 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49952) e!65324)))

(declare-fun b!100307 () Bool)

(assert (=> b!100307 (= e!65325 None!154)))

(declare-fun b!100304 () Bool)

(assert (=> b!100304 (= e!65324 (Some!155 (_2!1193 (h!2206 (toList!794 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))))

(declare-fun b!100306 () Bool)

(assert (=> b!100306 (= e!65325 (getValueByKey!150 (t!5597 (toList!794 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))) lt!49952))))

(assert (= (and d!27117 c!17205) b!100304))

(assert (= (and d!27117 (not c!17205)) b!100305))

(assert (= (and b!100305 c!17206) b!100306))

(assert (= (and b!100305 (not c!17206)) b!100307))

(declare-fun m!110923 () Bool)

(assert (=> b!100306 m!110923))

(assert (=> d!26755 d!27117))

(declare-fun d!27119 () Bool)

(assert (=> d!27119 (= (apply!93 lt!50294 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1307 (getValueByKey!150 (toList!794 lt!50294) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4150 () Bool)

(assert (= bs!4150 d!27119))

(assert (=> bs!4150 m!109349))

(assert (=> bs!4150 m!110099))

(assert (=> bs!4150 m!110099))

(declare-fun m!110925 () Bool)

(assert (=> bs!4150 m!110925))

(assert (=> b!99699 d!27119))

(declare-fun d!27121 () Bool)

(declare-fun c!17207 () Bool)

(assert (=> d!27121 (= c!17207 ((_ is ValueCellFull!975) (select (arr!2021 (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!65326 () V!3163)

(assert (=> d!27121 (= (get!1304 (select (arr!2021 (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!65326)))

(declare-fun b!100308 () Bool)

(assert (=> b!100308 (= e!65326 (get!1305 (select (arr!2021 (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100309 () Bool)

(assert (=> b!100309 (= e!65326 (get!1306 (select (arr!2021 (ite (or c!16967 c!16969) (_values!2485 newMap!16) (array!4257 (store (arr!2021 (_values!2485 newMap!16)) (index!3201 lt!50043) (ValueCellFull!975 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2272 (_values!2485 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27121 c!17207) b!100308))

(assert (= (and d!27121 (not c!17207)) b!100309))

(assert (=> b!100308 m!109691))

(assert (=> b!100308 m!109355))

(declare-fun m!110927 () Bool)

(assert (=> b!100308 m!110927))

(assert (=> b!100309 m!109691))

(assert (=> b!100309 m!109355))

(declare-fun m!110929 () Bool)

(assert (=> b!100309 m!110929))

(assert (=> b!99699 d!27121))

(declare-fun d!27123 () Bool)

(declare-fun e!65327 () Bool)

(assert (=> d!27123 e!65327))

(declare-fun res!50328 () Bool)

(assert (=> d!27123 (=> res!50328 e!65327)))

(declare-fun lt!50706 () Bool)

(assert (=> d!27123 (= res!50328 (not lt!50706))))

(declare-fun lt!50708 () Bool)

(assert (=> d!27123 (= lt!50706 lt!50708)))

(declare-fun lt!50705 () Unit!3031)

(declare-fun e!65328 () Unit!3031)

(assert (=> d!27123 (= lt!50705 e!65328)))

(declare-fun c!17208 () Bool)

(assert (=> d!27123 (= c!17208 lt!50708)))

(assert (=> d!27123 (= lt!50708 (containsKey!154 (toList!794 lt!50072) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!27123 (= (contains!810 lt!50072 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) lt!50706)))

(declare-fun b!100310 () Bool)

(declare-fun lt!50707 () Unit!3031)

(assert (=> b!100310 (= e!65328 lt!50707)))

(assert (=> b!100310 (= lt!50707 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50072) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!100310 (isDefined!104 (getValueByKey!150 (toList!794 lt!50072) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100311 () Bool)

(declare-fun Unit!3072 () Unit!3031)

(assert (=> b!100311 (= e!65328 Unit!3072)))

(declare-fun b!100312 () Bool)

(assert (=> b!100312 (= e!65327 (isDefined!104 (getValueByKey!150 (toList!794 lt!50072) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!27123 c!17208) b!100310))

(assert (= (and d!27123 (not c!17208)) b!100311))

(assert (= (and d!27123 (not res!50328)) b!100312))

(assert (=> d!27123 m!109349))

(declare-fun m!110931 () Bool)

(assert (=> d!27123 m!110931))

(assert (=> b!100310 m!109349))

(declare-fun m!110933 () Bool)

(assert (=> b!100310 m!110933))

(assert (=> b!100310 m!109349))

(assert (=> b!100310 m!110781))

(assert (=> b!100310 m!110781))

(declare-fun m!110935 () Bool)

(assert (=> b!100310 m!110935))

(assert (=> b!100312 m!109349))

(assert (=> b!100312 m!110781))

(assert (=> b!100312 m!110781))

(assert (=> b!100312 m!110935))

(assert (=> b!99460 d!27123))

(declare-fun d!27125 () Bool)

(assert (=> d!27125 (= (apply!93 lt!50072 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1307 (getValueByKey!150 (toList!794 lt!50072) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4151 () Bool)

(assert (= bs!4151 d!27125))

(declare-fun m!110937 () Bool)

(assert (=> bs!4151 m!110937))

(assert (=> bs!4151 m!110937))

(declare-fun m!110939 () Bool)

(assert (=> bs!4151 m!110939))

(assert (=> b!99474 d!27125))

(declare-fun d!27127 () Bool)

(declare-fun e!65329 () Bool)

(assert (=> d!27127 e!65329))

(declare-fun res!50329 () Bool)

(assert (=> d!27127 (=> (not res!50329) (not e!65329))))

(declare-fun lt!50710 () ListLongMap!1557)

(assert (=> d!27127 (= res!50329 (contains!810 lt!50710 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun lt!50712 () List!1615)

(assert (=> d!27127 (= lt!50710 (ListLongMap!1558 lt!50712))))

(declare-fun lt!50711 () Unit!3031)

(declare-fun lt!50709 () Unit!3031)

(assert (=> d!27127 (= lt!50711 lt!50709)))

(assert (=> d!27127 (= (getValueByKey!150 lt!50712 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27127 (= lt!50709 (lemmaContainsTupThenGetReturnValue!68 lt!50712 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27127 (= lt!50712 (insertStrictlySorted!70 (toList!794 call!10260) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27127 (= (+!139 call!10260 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) lt!50710)))

(declare-fun b!100313 () Bool)

(declare-fun res!50330 () Bool)

(assert (=> b!100313 (=> (not res!50330) (not e!65329))))

(assert (=> b!100313 (= res!50330 (= (getValueByKey!150 (toList!794 lt!50710) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(declare-fun b!100314 () Bool)

(assert (=> b!100314 (= e!65329 (contains!812 (toList!794 lt!50710) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(assert (= (and d!27127 res!50329) b!100313))

(assert (= (and b!100313 res!50330) b!100314))

(declare-fun m!110941 () Bool)

(assert (=> d!27127 m!110941))

(declare-fun m!110943 () Bool)

(assert (=> d!27127 m!110943))

(declare-fun m!110945 () Bool)

(assert (=> d!27127 m!110945))

(declare-fun m!110947 () Bool)

(assert (=> d!27127 m!110947))

(declare-fun m!110949 () Bool)

(assert (=> b!100313 m!110949))

(declare-fun m!110951 () Bool)

(assert (=> b!100314 m!110951))

(assert (=> b!99708 d!27127))

(declare-fun d!27129 () Bool)

(assert (=> d!27129 (= (apply!93 lt!50294 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1307 (getValueByKey!150 (toList!794 lt!50294) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4152 () Bool)

(assert (= bs!4152 d!27129))

(declare-fun m!110953 () Bool)

(assert (=> bs!4152 m!110953))

(assert (=> bs!4152 m!110953))

(declare-fun m!110955 () Bool)

(assert (=> bs!4152 m!110955))

(assert (=> b!99692 d!27129))

(declare-fun d!27131 () Bool)

(declare-fun res!50331 () Bool)

(declare-fun e!65330 () Bool)

(assert (=> d!27131 (=> res!50331 e!65330)))

(assert (=> d!27131 (= res!50331 (and ((_ is Cons!1611) (toList!794 lt!49947)) (= (_1!1193 (h!2206 (toList!794 lt!49947))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27131 (= (containsKey!154 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000) e!65330)))

(declare-fun b!100315 () Bool)

(declare-fun e!65331 () Bool)

(assert (=> b!100315 (= e!65330 e!65331)))

(declare-fun res!50332 () Bool)

(assert (=> b!100315 (=> (not res!50332) (not e!65331))))

(assert (=> b!100315 (= res!50332 (and (or (not ((_ is Cons!1611) (toList!794 lt!49947))) (bvsle (_1!1193 (h!2206 (toList!794 lt!49947))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1611) (toList!794 lt!49947)) (bvslt (_1!1193 (h!2206 (toList!794 lt!49947))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100316 () Bool)

(assert (=> b!100316 (= e!65331 (containsKey!154 (t!5597 (toList!794 lt!49947)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27131 (not res!50331)) b!100315))

(assert (= (and b!100315 res!50332) b!100316))

(declare-fun m!110957 () Bool)

(assert (=> b!100316 m!110957))

(assert (=> d!26749 d!27131))

(declare-fun d!27133 () Bool)

(declare-fun isEmpty!366 (List!1615) Bool)

(assert (=> d!27133 (= (isEmpty!364 lt!50232) (isEmpty!366 (toList!794 lt!50232)))))

(declare-fun bs!4153 () Bool)

(assert (= bs!4153 d!27133))

(declare-fun m!110959 () Bool)

(assert (=> bs!4153 m!110959))

(assert (=> b!99615 d!27133))

(declare-fun d!27135 () Bool)

(assert (=> d!27135 (= (apply!93 lt!50344 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) (get!1307 (getValueByKey!150 (toList!794 lt!50344) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4154 () Bool)

(assert (= bs!4154 d!27135))

(assert (=> bs!4154 m!109349))

(assert (=> bs!4154 m!110157))

(assert (=> bs!4154 m!110157))

(declare-fun m!110961 () Bool)

(assert (=> bs!4154 m!110961))

(assert (=> b!99780 d!27135))

(declare-fun d!27137 () Bool)

(declare-fun c!17209 () Bool)

(assert (=> d!27137 (= c!17209 ((_ is ValueCellFull!975) (select (arr!2021 (ite c!16967 (_values!2485 newMap!16) lt!50042)) #b00000000000000000000000000000000)))))

(declare-fun e!65332 () V!3163)

(assert (=> d!27137 (= (get!1304 (select (arr!2021 (ite c!16967 (_values!2485 newMap!16) lt!50042)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!65332)))

(declare-fun b!100317 () Bool)

(assert (=> b!100317 (= e!65332 (get!1305 (select (arr!2021 (ite c!16967 (_values!2485 newMap!16) lt!50042)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100318 () Bool)

(assert (=> b!100318 (= e!65332 (get!1306 (select (arr!2021 (ite c!16967 (_values!2485 newMap!16) lt!50042)) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27137 c!17209) b!100317))

(assert (= (and d!27137 (not c!17209)) b!100318))

(assert (=> b!100317 m!109827))

(assert (=> b!100317 m!109355))

(declare-fun m!110963 () Bool)

(assert (=> b!100317 m!110963))

(assert (=> b!100318 m!109827))

(assert (=> b!100318 m!109355))

(declare-fun m!110965 () Bool)

(assert (=> b!100318 m!110965))

(assert (=> b!99780 d!27137))

(declare-fun d!27139 () Bool)

(declare-fun e!65333 () Bool)

(assert (=> d!27139 e!65333))

(declare-fun res!50333 () Bool)

(assert (=> d!27139 (=> res!50333 e!65333)))

(declare-fun lt!50714 () Bool)

(assert (=> d!27139 (= res!50333 (not lt!50714))))

(declare-fun lt!50716 () Bool)

(assert (=> d!27139 (= lt!50714 lt!50716)))

(declare-fun lt!50713 () Unit!3031)

(declare-fun e!65334 () Unit!3031)

(assert (=> d!27139 (= lt!50713 e!65334)))

(declare-fun c!17210 () Bool)

(assert (=> d!27139 (= c!17210 lt!50716)))

(assert (=> d!27139 (= lt!50716 (containsKey!154 (toList!794 lt!50265) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!27139 (= (contains!810 lt!50265 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50714)))

(declare-fun b!100319 () Bool)

(declare-fun lt!50715 () Unit!3031)

(assert (=> b!100319 (= e!65334 lt!50715)))

(assert (=> b!100319 (= lt!50715 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50265) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> b!100319 (isDefined!104 (getValueByKey!150 (toList!794 lt!50265) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100320 () Bool)

(declare-fun Unit!3073 () Unit!3031)

(assert (=> b!100320 (= e!65334 Unit!3073)))

(declare-fun b!100321 () Bool)

(assert (=> b!100321 (= e!65333 (isDefined!104 (getValueByKey!150 (toList!794 lt!50265) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!27139 c!17210) b!100319))

(assert (= (and d!27139 (not c!17210)) b!100320))

(assert (= (and d!27139 (not res!50333)) b!100321))

(declare-fun m!110967 () Bool)

(assert (=> d!27139 m!110967))

(declare-fun m!110969 () Bool)

(assert (=> b!100319 m!110969))

(assert (=> b!100319 m!109623))

(assert (=> b!100319 m!109623))

(declare-fun m!110971 () Bool)

(assert (=> b!100319 m!110971))

(assert (=> b!100321 m!109623))

(assert (=> b!100321 m!109623))

(assert (=> b!100321 m!110971))

(assert (=> d!26769 d!27139))

(declare-fun b!100323 () Bool)

(declare-fun e!65335 () Option!156)

(declare-fun e!65336 () Option!156)

(assert (=> b!100323 (= e!65335 e!65336)))

(declare-fun c!17212 () Bool)

(assert (=> b!100323 (= c!17212 (and ((_ is Cons!1611) lt!50267) (not (= (_1!1193 (h!2206 lt!50267)) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun c!17211 () Bool)

(declare-fun d!27141 () Bool)

(assert (=> d!27141 (= c!17211 (and ((_ is Cons!1611) lt!50267) (= (_1!1193 (h!2206 lt!50267)) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27141 (= (getValueByKey!150 lt!50267 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) e!65335)))

(declare-fun b!100325 () Bool)

(assert (=> b!100325 (= e!65336 None!154)))

(declare-fun b!100322 () Bool)

(assert (=> b!100322 (= e!65335 (Some!155 (_2!1193 (h!2206 lt!50267))))))

(declare-fun b!100324 () Bool)

(assert (=> b!100324 (= e!65336 (getValueByKey!150 (t!5597 lt!50267) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!27141 c!17211) b!100322))

(assert (= (and d!27141 (not c!17211)) b!100323))

(assert (= (and b!100323 c!17212) b!100324))

(assert (= (and b!100323 (not c!17212)) b!100325))

(declare-fun m!110973 () Bool)

(assert (=> b!100324 m!110973))

(assert (=> d!26769 d!27141))

(declare-fun d!27143 () Bool)

(assert (=> d!27143 (= (getValueByKey!150 lt!50267 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun lt!50717 () Unit!3031)

(assert (=> d!27143 (= lt!50717 (choose!620 lt!50267 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun e!65337 () Bool)

(assert (=> d!27143 e!65337))

(declare-fun res!50334 () Bool)

(assert (=> d!27143 (=> (not res!50334) (not e!65337))))

(assert (=> d!27143 (= res!50334 (isStrictlySorted!300 lt!50267))))

(assert (=> d!27143 (= (lemmaContainsTupThenGetReturnValue!68 lt!50267 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50717)))

(declare-fun b!100326 () Bool)

(declare-fun res!50335 () Bool)

(assert (=> b!100326 (=> (not res!50335) (not e!65337))))

(assert (=> b!100326 (= res!50335 (containsKey!154 lt!50267 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100327 () Bool)

(assert (=> b!100327 (= e!65337 (contains!812 lt!50267 (tuple2!2367 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!27143 res!50334) b!100326))

(assert (= (and b!100326 res!50335) b!100327))

(assert (=> d!27143 m!109617))

(declare-fun m!110975 () Bool)

(assert (=> d!27143 m!110975))

(declare-fun m!110977 () Bool)

(assert (=> d!27143 m!110977))

(declare-fun m!110979 () Bool)

(assert (=> b!100326 m!110979))

(declare-fun m!110981 () Bool)

(assert (=> b!100327 m!110981))

(assert (=> d!26769 d!27143))

(declare-fun b!100328 () Bool)

(declare-fun e!65339 () List!1615)

(declare-fun e!65341 () List!1615)

(assert (=> b!100328 (= e!65339 e!65341)))

(declare-fun c!17216 () Bool)

(assert (=> b!100328 (= c!17216 (and ((_ is Cons!1611) (toList!794 lt!49953)) (= (_1!1193 (h!2206 (toList!794 lt!49953))) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!100329 () Bool)

(declare-fun e!65340 () List!1615)

(assert (=> b!100329 (= e!65340 (insertStrictlySorted!70 (t!5597 (toList!794 lt!49953)) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100330 () Bool)

(declare-fun call!10337 () List!1615)

(assert (=> b!100330 (= e!65341 call!10337)))

(declare-fun c!17215 () Bool)

(declare-fun bm!10335 () Bool)

(declare-fun call!10339 () List!1615)

(assert (=> bm!10335 (= call!10339 ($colon$colon!78 e!65340 (ite c!17215 (h!2206 (toList!794 lt!49953)) (tuple2!2367 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun c!17213 () Bool)

(assert (=> bm!10335 (= c!17213 c!17215)))

(declare-fun b!100331 () Bool)

(declare-fun e!65338 () List!1615)

(declare-fun call!10338 () List!1615)

(assert (=> b!100331 (= e!65338 call!10338)))

(declare-fun e!65342 () Bool)

(declare-fun b!100332 () Bool)

(declare-fun lt!50718 () List!1615)

(assert (=> b!100332 (= e!65342 (contains!812 lt!50718 (tuple2!2367 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!100333 () Bool)

(declare-fun res!50337 () Bool)

(assert (=> b!100333 (=> (not res!50337) (not e!65342))))

(assert (=> b!100333 (= res!50337 (containsKey!154 lt!50718 (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100334 () Bool)

(declare-fun c!17214 () Bool)

(assert (=> b!100334 (= c!17214 (and ((_ is Cons!1611) (toList!794 lt!49953)) (bvsgt (_1!1193 (h!2206 (toList!794 lt!49953))) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> b!100334 (= e!65341 e!65338)))

(declare-fun b!100335 () Bool)

(assert (=> b!100335 (= e!65338 call!10338)))

(declare-fun b!100336 () Bool)

(assert (=> b!100336 (= e!65339 call!10339)))

(declare-fun b!100337 () Bool)

(assert (=> b!100337 (= e!65340 (ite c!17216 (t!5597 (toList!794 lt!49953)) (ite c!17214 (Cons!1611 (h!2206 (toList!794 lt!49953)) (t!5597 (toList!794 lt!49953))) Nil!1612)))))

(declare-fun bm!10336 () Bool)

(assert (=> bm!10336 (= call!10337 call!10339)))

(declare-fun d!27145 () Bool)

(assert (=> d!27145 e!65342))

(declare-fun res!50336 () Bool)

(assert (=> d!27145 (=> (not res!50336) (not e!65342))))

(assert (=> d!27145 (= res!50336 (isStrictlySorted!300 lt!50718))))

(assert (=> d!27145 (= lt!50718 e!65339)))

(assert (=> d!27145 (= c!17215 (and ((_ is Cons!1611) (toList!794 lt!49953)) (bvslt (_1!1193 (h!2206 (toList!794 lt!49953))) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27145 (isStrictlySorted!300 (toList!794 lt!49953))))

(assert (=> d!27145 (= (insertStrictlySorted!70 (toList!794 lt!49953) (_1!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50718)))

(declare-fun bm!10334 () Bool)

(assert (=> bm!10334 (= call!10338 call!10337)))

(assert (= (and d!27145 c!17215) b!100336))

(assert (= (and d!27145 (not c!17215)) b!100328))

(assert (= (and b!100328 c!17216) b!100330))

(assert (= (and b!100328 (not c!17216)) b!100334))

(assert (= (and b!100334 c!17214) b!100331))

(assert (= (and b!100334 (not c!17214)) b!100335))

(assert (= (or b!100331 b!100335) bm!10334))

(assert (= (or b!100330 bm!10334) bm!10336))

(assert (= (or b!100336 bm!10336) bm!10335))

(assert (= (and bm!10335 c!17213) b!100329))

(assert (= (and bm!10335 (not c!17213)) b!100337))

(assert (= (and d!27145 res!50336) b!100333))

(assert (= (and b!100333 res!50337) b!100332))

(declare-fun m!110983 () Bool)

(assert (=> b!100333 m!110983))

(declare-fun m!110985 () Bool)

(assert (=> bm!10335 m!110985))

(declare-fun m!110987 () Bool)

(assert (=> b!100332 m!110987))

(declare-fun m!110989 () Bool)

(assert (=> b!100329 m!110989))

(declare-fun m!110991 () Bool)

(assert (=> d!27145 m!110991))

(declare-fun m!110993 () Bool)

(assert (=> d!27145 m!110993))

(assert (=> d!26769 d!27145))

(declare-fun d!27147 () Bool)

(assert (=> d!27147 (= (size!2275 newMap!16) (bvadd (_size!478 newMap!16) (bvsdiv (bvadd (extraKeys!2319 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!99718 d!27147))

(assert (=> b!99478 d!26837))

(declare-fun d!27149 () Bool)

(declare-fun lt!50719 () Bool)

(assert (=> d!27149 (= lt!50719 (select (content!102 Nil!1613) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!65344 () Bool)

(assert (=> d!27149 (= lt!50719 e!65344)))

(declare-fun res!50338 () Bool)

(assert (=> d!27149 (=> (not res!50338) (not e!65344))))

(assert (=> d!27149 (= res!50338 ((_ is Cons!1612) Nil!1613))))

(assert (=> d!27149 (= (contains!811 Nil!1613 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)) lt!50719)))

(declare-fun b!100338 () Bool)

(declare-fun e!65343 () Bool)

(assert (=> b!100338 (= e!65344 e!65343)))

(declare-fun res!50339 () Bool)

(assert (=> b!100338 (=> res!50339 e!65343)))

(assert (=> b!100338 (= res!50339 (= (h!2207 Nil!1613) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!100339 () Bool)

(assert (=> b!100339 (= e!65343 (contains!811 (t!5598 Nil!1613) (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!27149 res!50338) b!100338))

(assert (= (and b!100338 (not res!50339)) b!100339))

(assert (=> d!27149 m!109517))

(assert (=> d!27149 m!109349))

(declare-fun m!110995 () Bool)

(assert (=> d!27149 m!110995))

(assert (=> b!100339 m!109349))

(declare-fun m!110997 () Bool)

(assert (=> b!100339 m!110997))

(assert (=> b!99631 d!27149))

(declare-fun d!27151 () Bool)

(declare-fun e!65345 () Bool)

(assert (=> d!27151 e!65345))

(declare-fun res!50340 () Bool)

(assert (=> d!27151 (=> res!50340 e!65345)))

(declare-fun lt!50721 () Bool)

(assert (=> d!27151 (= res!50340 (not lt!50721))))

(declare-fun lt!50723 () Bool)

(assert (=> d!27151 (= lt!50721 lt!50723)))

(declare-fun lt!50720 () Unit!3031)

(declare-fun e!65346 () Unit!3031)

(assert (=> d!27151 (= lt!50720 e!65346)))

(declare-fun c!17217 () Bool)

(assert (=> d!27151 (= c!17217 lt!50723)))

(assert (=> d!27151 (= lt!50723 (containsKey!154 (toList!794 lt!50294) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27151 (= (contains!810 lt!50294 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50721)))

(declare-fun b!100340 () Bool)

(declare-fun lt!50722 () Unit!3031)

(assert (=> b!100340 (= e!65346 lt!50722)))

(assert (=> b!100340 (= lt!50722 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50294) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100340 (isDefined!104 (getValueByKey!150 (toList!794 lt!50294) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100341 () Bool)

(declare-fun Unit!3074 () Unit!3031)

(assert (=> b!100341 (= e!65346 Unit!3074)))

(declare-fun b!100342 () Bool)

(assert (=> b!100342 (= e!65345 (isDefined!104 (getValueByKey!150 (toList!794 lt!50294) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27151 c!17217) b!100340))

(assert (= (and d!27151 (not c!17217)) b!100341))

(assert (= (and d!27151 (not res!50340)) b!100342))

(declare-fun m!110999 () Bool)

(assert (=> d!27151 m!110999))

(declare-fun m!111001 () Bool)

(assert (=> b!100340 m!111001))

(assert (=> b!100340 m!109909))

(assert (=> b!100340 m!109909))

(declare-fun m!111003 () Bool)

(assert (=> b!100340 m!111003))

(assert (=> b!100342 m!109909))

(assert (=> b!100342 m!109909))

(assert (=> b!100342 m!111003))

(assert (=> bm!10256 d!27151))

(assert (=> d!26797 d!26835))

(declare-fun d!27153 () Bool)

(declare-fun lt!50724 () Bool)

(assert (=> d!27153 (= lt!50724 (select (content!103 (toList!794 lt!50188)) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!65347 () Bool)

(assert (=> d!27153 (= lt!50724 e!65347)))

(declare-fun res!50341 () Bool)

(assert (=> d!27153 (=> (not res!50341) (not e!65347))))

(assert (=> d!27153 (= res!50341 ((_ is Cons!1611) (toList!794 lt!50188)))))

(assert (=> d!27153 (= (contains!812 (toList!794 lt!50188) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50724)))

(declare-fun b!100343 () Bool)

(declare-fun e!65348 () Bool)

(assert (=> b!100343 (= e!65347 e!65348)))

(declare-fun res!50342 () Bool)

(assert (=> b!100343 (=> res!50342 e!65348)))

(assert (=> b!100343 (= res!50342 (= (h!2206 (toList!794 lt!50188)) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100344 () Bool)

(assert (=> b!100344 (= e!65348 (contains!812 (t!5597 (toList!794 lt!50188)) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!27153 res!50341) b!100343))

(assert (= (and b!100343 (not res!50342)) b!100344))

(declare-fun m!111005 () Bool)

(assert (=> d!27153 m!111005))

(declare-fun m!111007 () Bool)

(assert (=> d!27153 m!111007))

(declare-fun m!111009 () Bool)

(assert (=> b!100344 m!111009))

(assert (=> b!99536 d!27153))

(declare-fun d!27155 () Bool)

(declare-fun lt!50725 () Bool)

(assert (=> d!27155 (= lt!50725 (select (content!103 (toList!794 lt!50273)) (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun e!65349 () Bool)

(assert (=> d!27155 (= lt!50725 e!65349)))

(declare-fun res!50343 () Bool)

(assert (=> d!27155 (=> (not res!50343) (not e!65349))))

(assert (=> d!27155 (= res!50343 ((_ is Cons!1611) (toList!794 lt!50273)))))

(assert (=> d!27155 (= (contains!812 (toList!794 lt!50273) (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!50725)))

(declare-fun b!100345 () Bool)

(declare-fun e!65350 () Bool)

(assert (=> b!100345 (= e!65349 e!65350)))

(declare-fun res!50344 () Bool)

(assert (=> b!100345 (=> res!50344 e!65350)))

(assert (=> b!100345 (= res!50344 (= (h!2206 (toList!794 lt!50273)) (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun b!100346 () Bool)

(assert (=> b!100346 (= e!65350 (contains!812 (t!5597 (toList!794 lt!50273)) (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!27155 res!50343) b!100345))

(assert (= (and b!100345 (not res!50344)) b!100346))

(declare-fun m!111011 () Bool)

(assert (=> d!27155 m!111011))

(declare-fun m!111013 () Bool)

(assert (=> d!27155 m!111013))

(declare-fun m!111015 () Bool)

(assert (=> b!100346 m!111015))

(assert (=> b!99661 d!27155))

(declare-fun d!27157 () Bool)

(assert (=> d!27157 (= (get!1307 (getValueByKey!150 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2821 (getValueByKey!150 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!26809 d!27157))

(declare-fun b!100348 () Bool)

(declare-fun e!65351 () Option!156)

(declare-fun e!65352 () Option!156)

(assert (=> b!100348 (= e!65351 e!65352)))

(declare-fun c!17219 () Bool)

(assert (=> b!100348 (= c!17219 (and ((_ is Cons!1611) (toList!794 lt!49947)) (not (= (_1!1193 (h!2206 (toList!794 lt!49947))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!27159 () Bool)

(declare-fun c!17218 () Bool)

(assert (=> d!27159 (= c!17218 (and ((_ is Cons!1611) (toList!794 lt!49947)) (= (_1!1193 (h!2206 (toList!794 lt!49947))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27159 (= (getValueByKey!150 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000) e!65351)))

(declare-fun b!100350 () Bool)

(assert (=> b!100350 (= e!65352 None!154)))

(declare-fun b!100347 () Bool)

(assert (=> b!100347 (= e!65351 (Some!155 (_2!1193 (h!2206 (toList!794 lt!49947)))))))

(declare-fun b!100349 () Bool)

(assert (=> b!100349 (= e!65352 (getValueByKey!150 (t!5597 (toList!794 lt!49947)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27159 c!17218) b!100347))

(assert (= (and d!27159 (not c!17218)) b!100348))

(assert (= (and b!100348 c!17219) b!100349))

(assert (= (and b!100348 (not c!17219)) b!100350))

(declare-fun m!111017 () Bool)

(assert (=> b!100349 m!111017))

(assert (=> d!26809 d!27159))

(declare-fun d!27161 () Bool)

(assert (=> d!27161 (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943))))

(declare-fun lt!50726 () Unit!3031)

(assert (=> d!27161 (= lt!50726 (choose!618 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943))))

(declare-fun e!65353 () Bool)

(assert (=> d!27161 e!65353))

(declare-fun res!50345 () Bool)

(assert (=> d!27161 (=> (not res!50345) (not e!65353))))

(assert (=> d!27161 (= res!50345 (isStrictlySorted!300 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27161 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943) lt!50726)))

(declare-fun b!100351 () Bool)

(assert (=> b!100351 (= e!65353 (containsKey!154 (toList!794 (+!139 lt!49959 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49943))))

(assert (= (and d!27161 res!50345) b!100351))

(assert (=> d!27161 m!109647))

(assert (=> d!27161 m!109647))

(assert (=> d!27161 m!109649))

(declare-fun m!111019 () Bool)

(assert (=> d!27161 m!111019))

(declare-fun m!111021 () Bool)

(assert (=> d!27161 m!111021))

(assert (=> b!100351 m!109643))

(assert (=> b!99657 d!27161))

(assert (=> b!99657 d!26955))

(assert (=> b!99657 d!26957))

(declare-fun d!27163 () Bool)

(assert (=> d!27163 (isDefined!104 (getValueByKey!150 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun lt!50727 () Unit!3031)

(assert (=> d!27163 (= lt!50727 (choose!618 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun e!65354 () Bool)

(assert (=> d!27163 e!65354))

(declare-fun res!50346 () Bool)

(assert (=> d!27163 (=> (not res!50346) (not e!65354))))

(assert (=> d!27163 (= res!50346 (isStrictlySorted!300 (toList!794 call!10208)))))

(assert (=> d!27163 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) lt!50727)))

(declare-fun b!100352 () Bool)

(assert (=> b!100352 (= e!65354 (containsKey!154 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!27163 res!50346) b!100352))

(assert (=> d!27163 m!109089))

(assert (=> d!27163 m!109815))

(assert (=> d!27163 m!109815))

(assert (=> d!27163 m!109817))

(assert (=> d!27163 m!109089))

(declare-fun m!111023 () Bool)

(assert (=> d!27163 m!111023))

(declare-fun m!111025 () Bool)

(assert (=> d!27163 m!111025))

(assert (=> b!100352 m!109089))

(assert (=> b!100352 m!109811))

(assert (=> b!99764 d!27163))

(assert (=> b!99764 d!26911))

(assert (=> b!99764 d!26913))

(declare-fun b!100371 () Bool)

(declare-fun e!65366 () SeekEntryResult!264)

(declare-fun e!65367 () SeekEntryResult!264)

(assert (=> b!100371 (= e!65366 e!65367)))

(declare-fun c!17227 () Bool)

(declare-fun lt!50733 () (_ BitVec 64))

(assert (=> b!100371 (= c!17227 (or (= lt!50733 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) (= (bvadd lt!50733 lt!50733) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100372 () Bool)

(assert (=> b!100372 (= e!65367 (Intermediate!264 false (toIndex!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (mask!6609 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!100374 () Bool)

(declare-fun lt!50732 () SeekEntryResult!264)

(assert (=> b!100374 (and (bvsge (index!3202 lt!50732) #b00000000000000000000000000000000) (bvslt (index!3202 lt!50732) (size!2271 (_keys!4196 newMap!16))))))

(declare-fun res!50355 () Bool)

(assert (=> b!100374 (= res!50355 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3202 lt!50732)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun e!65369 () Bool)

(assert (=> b!100374 (=> res!50355 e!65369)))

(declare-fun e!65365 () Bool)

(assert (=> b!100374 (= e!65365 e!65369)))

(declare-fun b!100375 () Bool)

(declare-fun e!65368 () Bool)

(assert (=> b!100375 (= e!65368 (bvsge (x!13114 lt!50732) #b01111111111111111111111111111110))))

(declare-fun b!100376 () Bool)

(assert (=> b!100376 (and (bvsge (index!3202 lt!50732) #b00000000000000000000000000000000) (bvslt (index!3202 lt!50732) (size!2271 (_keys!4196 newMap!16))))))

(declare-fun res!50354 () Bool)

(assert (=> b!100376 (= res!50354 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3202 lt!50732)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100376 (=> res!50354 e!65369)))

(declare-fun b!100377 () Bool)

(assert (=> b!100377 (= e!65367 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (mask!6609 newMap!16)) #b00000000000000000000000000000000 (mask!6609 newMap!16)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!100378 () Bool)

(assert (=> b!100378 (and (bvsge (index!3202 lt!50732) #b00000000000000000000000000000000) (bvslt (index!3202 lt!50732) (size!2271 (_keys!4196 newMap!16))))))

(assert (=> b!100378 (= e!65369 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3202 lt!50732)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100379 () Bool)

(assert (=> b!100379 (= e!65366 (Intermediate!264 true (toIndex!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (mask!6609 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun d!27165 () Bool)

(assert (=> d!27165 e!65368))

(declare-fun c!17226 () Bool)

(assert (=> d!27165 (= c!17226 (and ((_ is Intermediate!264) lt!50732) (undefined!1076 lt!50732)))))

(assert (=> d!27165 (= lt!50732 e!65366)))

(declare-fun c!17228 () Bool)

(assert (=> d!27165 (= c!17228 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!27165 (= lt!50733 (select (arr!2020 (_keys!4196 newMap!16)) (toIndex!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (mask!6609 newMap!16))))))

(assert (=> d!27165 (validMask!0 (mask!6609 newMap!16))))

(assert (=> d!27165 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (mask!6609 newMap!16)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)) lt!50732)))

(declare-fun b!100373 () Bool)

(assert (=> b!100373 (= e!65368 e!65365)))

(declare-fun res!50353 () Bool)

(assert (=> b!100373 (= res!50353 (and ((_ is Intermediate!264) lt!50732) (not (undefined!1076 lt!50732)) (bvslt (x!13114 lt!50732) #b01111111111111111111111111111110) (bvsge (x!13114 lt!50732) #b00000000000000000000000000000000) (bvsge (x!13114 lt!50732) #b00000000000000000000000000000000)))))

(assert (=> b!100373 (=> (not res!50353) (not e!65365))))

(assert (= (and d!27165 c!17228) b!100379))

(assert (= (and d!27165 (not c!17228)) b!100371))

(assert (= (and b!100371 c!17227) b!100372))

(assert (= (and b!100371 (not c!17227)) b!100377))

(assert (= (and d!27165 c!17226) b!100375))

(assert (= (and d!27165 (not c!17226)) b!100373))

(assert (= (and b!100373 res!50353) b!100374))

(assert (= (and b!100374 (not res!50355)) b!100376))

(assert (= (and b!100376 (not res!50354)) b!100378))

(declare-fun m!111027 () Bool)

(assert (=> b!100376 m!111027))

(assert (=> d!27165 m!109745))

(declare-fun m!111029 () Bool)

(assert (=> d!27165 m!111029))

(assert (=> d!27165 m!109329))

(assert (=> b!100378 m!111027))

(assert (=> b!100374 m!111027))

(assert (=> b!100377 m!109745))

(declare-fun m!111031 () Bool)

(assert (=> b!100377 m!111031))

(assert (=> b!100377 m!111031))

(assert (=> b!100377 m!109089))

(declare-fun m!111033 () Bool)

(assert (=> b!100377 m!111033))

(assert (=> d!26799 d!27165))

(declare-fun d!27167 () Bool)

(declare-fun lt!50739 () (_ BitVec 32))

(declare-fun lt!50738 () (_ BitVec 32))

(assert (=> d!27167 (= lt!50739 (bvmul (bvxor lt!50738 (bvlshr lt!50738 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!27167 (= lt!50738 ((_ extract 31 0) (bvand (bvxor (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvlshr (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!27167 (and (bvsge (mask!6609 newMap!16) #b00000000000000000000000000000000) (let ((res!50356 (let ((h!2209 ((_ extract 31 0) (bvand (bvxor (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvlshr (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!13218 (bvmul (bvxor h!2209 (bvlshr h!2209 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!13218 (bvlshr x!13218 #b00000000000000000000000000001101)) (mask!6609 newMap!16)))))) (and (bvslt res!50356 (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001)) (bvsge res!50356 #b00000000000000000000000000000000))))))

(assert (=> d!27167 (= (toIndex!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (mask!6609 newMap!16)) (bvand (bvxor lt!50739 (bvlshr lt!50739 #b00000000000000000000000000001101)) (mask!6609 newMap!16)))))

(assert (=> d!26799 d!27167))

(assert (=> d!26799 d!26835))

(declare-fun d!27169 () Bool)

(declare-fun lt!50740 () Bool)

(assert (=> d!27169 (= lt!50740 (select (content!103 (toList!794 lt!50208)) (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!65370 () Bool)

(assert (=> d!27169 (= lt!50740 e!65370)))

(declare-fun res!50357 () Bool)

(assert (=> d!27169 (=> (not res!50357) (not e!65370))))

(assert (=> d!27169 (= res!50357 ((_ is Cons!1611) (toList!794 lt!50208)))))

(assert (=> d!27169 (= (contains!812 (toList!794 lt!50208) (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!50740)))

(declare-fun b!100380 () Bool)

(declare-fun e!65371 () Bool)

(assert (=> b!100380 (= e!65370 e!65371)))

(declare-fun res!50358 () Bool)

(assert (=> b!100380 (=> res!50358 e!65371)))

(assert (=> b!100380 (= res!50358 (= (h!2206 (toList!794 lt!50208)) (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!100381 () Bool)

(assert (=> b!100381 (= e!65371 (contains!812 (t!5597 (toList!794 lt!50208)) (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!27169 res!50357) b!100380))

(assert (= (and b!100380 (not res!50358)) b!100381))

(declare-fun m!111035 () Bool)

(assert (=> d!27169 m!111035))

(declare-fun m!111037 () Bool)

(assert (=> d!27169 m!111037))

(declare-fun m!111039 () Bool)

(assert (=> b!100381 m!111039))

(assert (=> b!99577 d!27169))

(declare-fun b!100385 () Bool)

(declare-fun e!65372 () Bool)

(assert (=> b!100385 (= e!65372 (and (bvsge (extraKeys!2319 (_2!1192 lt!50030)) #b00000000000000000000000000000000) (bvsle (extraKeys!2319 (_2!1192 lt!50030)) #b00000000000000000000000000000011) (bvsge (_vacant!478 (_2!1192 lt!50030)) #b00000000000000000000000000000000)))))

(declare-fun d!27171 () Bool)

(declare-fun res!50362 () Bool)

(assert (=> d!27171 (=> (not res!50362) (not e!65372))))

(assert (=> d!27171 (= res!50362 (validMask!0 (mask!6609 (_2!1192 lt!50030))))))

(assert (=> d!27171 (= (simpleValid!68 (_2!1192 lt!50030)) e!65372)))

(declare-fun b!100382 () Bool)

(declare-fun res!50359 () Bool)

(assert (=> b!100382 (=> (not res!50359) (not e!65372))))

(assert (=> b!100382 (= res!50359 (and (= (size!2272 (_values!2485 (_2!1192 lt!50030))) (bvadd (mask!6609 (_2!1192 lt!50030)) #b00000000000000000000000000000001)) (= (size!2271 (_keys!4196 (_2!1192 lt!50030))) (size!2272 (_values!2485 (_2!1192 lt!50030)))) (bvsge (_size!478 (_2!1192 lt!50030)) #b00000000000000000000000000000000) (bvsle (_size!478 (_2!1192 lt!50030)) (bvadd (mask!6609 (_2!1192 lt!50030)) #b00000000000000000000000000000001))))))

(declare-fun b!100383 () Bool)

(declare-fun res!50360 () Bool)

(assert (=> b!100383 (=> (not res!50360) (not e!65372))))

(assert (=> b!100383 (= res!50360 (bvsge (size!2275 (_2!1192 lt!50030)) (_size!478 (_2!1192 lt!50030))))))

(declare-fun b!100384 () Bool)

(declare-fun res!50361 () Bool)

(assert (=> b!100384 (=> (not res!50361) (not e!65372))))

(assert (=> b!100384 (= res!50361 (= (size!2275 (_2!1192 lt!50030)) (bvadd (_size!478 (_2!1192 lt!50030)) (bvsdiv (bvadd (extraKeys!2319 (_2!1192 lt!50030)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!27171 res!50362) b!100382))

(assert (= (and b!100382 res!50359) b!100383))

(assert (= (and b!100383 res!50360) b!100384))

(assert (= (and b!100384 res!50361) b!100385))

(declare-fun m!111041 () Bool)

(assert (=> d!27171 m!111041))

(declare-fun m!111043 () Bool)

(assert (=> b!100383 m!111043))

(assert (=> b!100384 m!111043))

(assert (=> d!26831 d!27171))

(declare-fun d!27173 () Bool)

(declare-fun lt!50741 () Bool)

(assert (=> d!27173 (= lt!50741 (select (content!103 (toList!794 lt!50253)) (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun e!65373 () Bool)

(assert (=> d!27173 (= lt!50741 e!65373)))

(declare-fun res!50363 () Bool)

(assert (=> d!27173 (=> (not res!50363) (not e!65373))))

(assert (=> d!27173 (= res!50363 ((_ is Cons!1611) (toList!794 lt!50253)))))

(assert (=> d!27173 (= (contains!812 (toList!794 lt!50253) (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!50741)))

(declare-fun b!100386 () Bool)

(declare-fun e!65374 () Bool)

(assert (=> b!100386 (= e!65373 e!65374)))

(declare-fun res!50364 () Bool)

(assert (=> b!100386 (=> res!50364 e!65374)))

(assert (=> b!100386 (= res!50364 (= (h!2206 (toList!794 lt!50253)) (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun b!100387 () Bool)

(assert (=> b!100387 (= e!65374 (contains!812 (t!5597 (toList!794 lt!50253)) (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!27173 res!50363) b!100386))

(assert (= (and b!100386 (not res!50364)) b!100387))

(declare-fun m!111045 () Bool)

(assert (=> d!27173 m!111045))

(declare-fun m!111047 () Bool)

(assert (=> d!27173 m!111047))

(declare-fun m!111049 () Bool)

(assert (=> b!100387 m!111049))

(assert (=> b!99647 d!27173))

(assert (=> bm!10234 d!26799))

(declare-fun b!100388 () Bool)

(declare-fun e!65378 () Bool)

(declare-fun e!65375 () Bool)

(assert (=> b!100388 (= e!65378 e!65375)))

(declare-fun c!17229 () Bool)

(assert (=> b!100388 (= c!17229 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!100389 () Bool)

(declare-fun e!65376 () Bool)

(assert (=> b!100389 (= e!65376 (contains!811 (ite c!17054 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun call!10340 () Bool)

(declare-fun bm!10337 () Bool)

(assert (=> bm!10337 (= call!10340 (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17229 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!17054 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613))) (ite c!17054 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)))))))

(declare-fun b!100390 () Bool)

(declare-fun e!65377 () Bool)

(assert (=> b!100390 (= e!65377 e!65378)))

(declare-fun res!50366 () Bool)

(assert (=> b!100390 (=> (not res!50366) (not e!65378))))

(assert (=> b!100390 (= res!50366 (not e!65376))))

(declare-fun res!50365 () Bool)

(assert (=> b!100390 (=> (not res!50365) (not e!65376))))

(assert (=> b!100390 (= res!50365 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!100391 () Bool)

(assert (=> b!100391 (= e!65375 call!10340)))

(declare-fun d!27175 () Bool)

(declare-fun res!50367 () Bool)

(assert (=> d!27175 (=> res!50367 e!65377)))

(assert (=> d!27175 (= res!50367 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> d!27175 (= (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17054 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613)) (ite c!16912 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) Nil!1613) Nil!1613))) e!65377)))

(declare-fun b!100392 () Bool)

(assert (=> b!100392 (= e!65375 call!10340)))

(assert (= (and d!27175 (not res!50367)) b!100390))

(assert (= (and b!100390 res!50365) b!100389))

(assert (= (and b!100390 res!50366) b!100388))

(assert (= (and b!100388 c!17229) b!100392))

(assert (= (and b!100388 (not c!17229)) b!100391))

(assert (= (or b!100392 b!100391) bm!10337))

(declare-fun m!111051 () Bool)

(assert (=> b!100388 m!111051))

(assert (=> b!100388 m!111051))

(declare-fun m!111053 () Bool)

(assert (=> b!100388 m!111053))

(assert (=> b!100389 m!111051))

(assert (=> b!100389 m!111051))

(declare-fun m!111055 () Bool)

(assert (=> b!100389 m!111055))

(assert (=> bm!10337 m!111051))

(declare-fun m!111057 () Bool)

(assert (=> bm!10337 m!111057))

(assert (=> b!100390 m!111051))

(assert (=> b!100390 m!111051))

(assert (=> b!100390 m!111053))

(assert (=> bm!10258 d!27175))

(declare-fun b!100394 () Bool)

(declare-fun e!65379 () Option!156)

(declare-fun e!65380 () Option!156)

(assert (=> b!100394 (= e!65379 e!65380)))

(declare-fun c!17231 () Bool)

(assert (=> b!100394 (= c!17231 (and ((_ is Cons!1611) (toList!794 lt!50249)) (not (= (_1!1193 (h!2206 (toList!794 lt!50249))) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun d!27177 () Bool)

(declare-fun c!17230 () Bool)

(assert (=> d!27177 (= c!17230 (and ((_ is Cons!1611) (toList!794 lt!50249)) (= (_1!1193 (h!2206 (toList!794 lt!50249))) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27177 (= (getValueByKey!150 (toList!794 lt!50249) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) e!65379)))

(declare-fun b!100396 () Bool)

(assert (=> b!100396 (= e!65380 None!154)))

(declare-fun b!100393 () Bool)

(assert (=> b!100393 (= e!65379 (Some!155 (_2!1193 (h!2206 (toList!794 lt!50249)))))))

(declare-fun b!100395 () Bool)

(assert (=> b!100395 (= e!65380 (getValueByKey!150 (t!5597 (toList!794 lt!50249)) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!27177 c!17230) b!100393))

(assert (= (and d!27177 (not c!17230)) b!100394))

(assert (= (and b!100394 c!17231) b!100395))

(assert (= (and b!100394 (not c!17231)) b!100396))

(declare-fun m!111059 () Bool)

(assert (=> b!100395 m!111059))

(assert (=> b!99644 d!27177))

(declare-fun d!27179 () Bool)

(assert (=> d!27179 (= (apply!93 lt!50072 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1307 (getValueByKey!150 (toList!794 lt!50072) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4155 () Bool)

(assert (= bs!4155 d!27179))

(assert (=> bs!4155 m!109893))

(assert (=> bs!4155 m!109893))

(declare-fun m!111061 () Bool)

(assert (=> bs!4155 m!111061))

(assert (=> b!99463 d!27179))

(declare-fun d!27181 () Bool)

(declare-fun e!65381 () Bool)

(assert (=> d!27181 e!65381))

(declare-fun res!50368 () Bool)

(assert (=> d!27181 (=> res!50368 e!65381)))

(declare-fun lt!50743 () Bool)

(assert (=> d!27181 (= res!50368 (not lt!50743))))

(declare-fun lt!50745 () Bool)

(assert (=> d!27181 (= lt!50743 lt!50745)))

(declare-fun lt!50742 () Unit!3031)

(declare-fun e!65382 () Unit!3031)

(assert (=> d!27181 (= lt!50742 e!65382)))

(declare-fun c!17232 () Bool)

(assert (=> d!27181 (= c!17232 lt!50745)))

(assert (=> d!27181 (= lt!50745 (containsKey!154 (toList!794 lt!50253) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!27181 (= (contains!810 lt!50253 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50743)))

(declare-fun b!100397 () Bool)

(declare-fun lt!50744 () Unit!3031)

(assert (=> b!100397 (= e!65382 lt!50744)))

(assert (=> b!100397 (= lt!50744 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50253) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> b!100397 (isDefined!104 (getValueByKey!150 (toList!794 lt!50253) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100398 () Bool)

(declare-fun Unit!3075 () Unit!3031)

(assert (=> b!100398 (= e!65382 Unit!3075)))

(declare-fun b!100399 () Bool)

(assert (=> b!100399 (= e!65381 (isDefined!104 (getValueByKey!150 (toList!794 lt!50253) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!27181 c!17232) b!100397))

(assert (= (and d!27181 (not c!17232)) b!100398))

(assert (= (and d!27181 (not res!50368)) b!100399))

(declare-fun m!111063 () Bool)

(assert (=> d!27181 m!111063))

(declare-fun m!111065 () Bool)

(assert (=> b!100397 m!111065))

(assert (=> b!100397 m!109595))

(assert (=> b!100397 m!109595))

(declare-fun m!111067 () Bool)

(assert (=> b!100397 m!111067))

(assert (=> b!100399 m!109595))

(assert (=> b!100399 m!109595))

(assert (=> b!100399 m!111067))

(assert (=> d!26759 d!27181))

(declare-fun b!100401 () Bool)

(declare-fun e!65383 () Option!156)

(declare-fun e!65384 () Option!156)

(assert (=> b!100401 (= e!65383 e!65384)))

(declare-fun c!17234 () Bool)

(assert (=> b!100401 (= c!17234 (and ((_ is Cons!1611) lt!50255) (not (= (_1!1193 (h!2206 lt!50255)) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun c!17233 () Bool)

(declare-fun d!27183 () Bool)

(assert (=> d!27183 (= c!17233 (and ((_ is Cons!1611) lt!50255) (= (_1!1193 (h!2206 lt!50255)) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27183 (= (getValueByKey!150 lt!50255 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) e!65383)))

(declare-fun b!100403 () Bool)

(assert (=> b!100403 (= e!65384 None!154)))

(declare-fun b!100400 () Bool)

(assert (=> b!100400 (= e!65383 (Some!155 (_2!1193 (h!2206 lt!50255))))))

(declare-fun b!100402 () Bool)

(assert (=> b!100402 (= e!65384 (getValueByKey!150 (t!5597 lt!50255) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!27183 c!17233) b!100400))

(assert (= (and d!27183 (not c!17233)) b!100401))

(assert (= (and b!100401 c!17234) b!100402))

(assert (= (and b!100401 (not c!17234)) b!100403))

(declare-fun m!111069 () Bool)

(assert (=> b!100402 m!111069))

(assert (=> d!26759 d!27183))

(declare-fun d!27185 () Bool)

(assert (=> d!27185 (= (getValueByKey!150 lt!50255 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun lt!50746 () Unit!3031)

(assert (=> d!27185 (= lt!50746 (choose!620 lt!50255 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun e!65385 () Bool)

(assert (=> d!27185 e!65385))

(declare-fun res!50369 () Bool)

(assert (=> d!27185 (=> (not res!50369) (not e!65385))))

(assert (=> d!27185 (= res!50369 (isStrictlySorted!300 lt!50255))))

(assert (=> d!27185 (= (lemmaContainsTupThenGetReturnValue!68 lt!50255 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50746)))

(declare-fun b!100404 () Bool)

(declare-fun res!50370 () Bool)

(assert (=> b!100404 (=> (not res!50370) (not e!65385))))

(assert (=> b!100404 (= res!50370 (containsKey!154 lt!50255 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100405 () Bool)

(assert (=> b!100405 (= e!65385 (contains!812 lt!50255 (tuple2!2367 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!27185 res!50369) b!100404))

(assert (= (and b!100404 res!50370) b!100405))

(assert (=> d!27185 m!109589))

(declare-fun m!111071 () Bool)

(assert (=> d!27185 m!111071))

(declare-fun m!111073 () Bool)

(assert (=> d!27185 m!111073))

(declare-fun m!111075 () Bool)

(assert (=> b!100404 m!111075))

(declare-fun m!111077 () Bool)

(assert (=> b!100405 m!111077))

(assert (=> d!26759 d!27185))

(declare-fun b!100406 () Bool)

(declare-fun e!65387 () List!1615)

(declare-fun e!65389 () List!1615)

(assert (=> b!100406 (= e!65387 e!65389)))

(declare-fun c!17238 () Bool)

(assert (=> b!100406 (= c!17238 (and ((_ is Cons!1611) (toList!794 lt!49959)) (= (_1!1193 (h!2206 (toList!794 lt!49959))) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!100407 () Bool)

(declare-fun e!65388 () List!1615)

(assert (=> b!100407 (= e!65388 (insertStrictlySorted!70 (t!5597 (toList!794 lt!49959)) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100408 () Bool)

(declare-fun call!10341 () List!1615)

(assert (=> b!100408 (= e!65389 call!10341)))

(declare-fun c!17237 () Bool)

(declare-fun call!10343 () List!1615)

(declare-fun bm!10339 () Bool)

(assert (=> bm!10339 (= call!10343 ($colon$colon!78 e!65388 (ite c!17237 (h!2206 (toList!794 lt!49959)) (tuple2!2367 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun c!17235 () Bool)

(assert (=> bm!10339 (= c!17235 c!17237)))

(declare-fun b!100409 () Bool)

(declare-fun e!65386 () List!1615)

(declare-fun call!10342 () List!1615)

(assert (=> b!100409 (= e!65386 call!10342)))

(declare-fun e!65390 () Bool)

(declare-fun b!100410 () Bool)

(declare-fun lt!50747 () List!1615)

(assert (=> b!100410 (= e!65390 (contains!812 lt!50747 (tuple2!2367 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!100411 () Bool)

(declare-fun res!50372 () Bool)

(assert (=> b!100411 (=> (not res!50372) (not e!65390))))

(assert (=> b!100411 (= res!50372 (containsKey!154 lt!50747 (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100412 () Bool)

(declare-fun c!17236 () Bool)

(assert (=> b!100412 (= c!17236 (and ((_ is Cons!1611) (toList!794 lt!49959)) (bvsgt (_1!1193 (h!2206 (toList!794 lt!49959))) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> b!100412 (= e!65389 e!65386)))

(declare-fun b!100413 () Bool)

(assert (=> b!100413 (= e!65386 call!10342)))

(declare-fun b!100414 () Bool)

(assert (=> b!100414 (= e!65387 call!10343)))

(declare-fun b!100415 () Bool)

(assert (=> b!100415 (= e!65388 (ite c!17238 (t!5597 (toList!794 lt!49959)) (ite c!17236 (Cons!1611 (h!2206 (toList!794 lt!49959)) (t!5597 (toList!794 lt!49959))) Nil!1612)))))

(declare-fun bm!10340 () Bool)

(assert (=> bm!10340 (= call!10341 call!10343)))

(declare-fun d!27187 () Bool)

(assert (=> d!27187 e!65390))

(declare-fun res!50371 () Bool)

(assert (=> d!27187 (=> (not res!50371) (not e!65390))))

(assert (=> d!27187 (= res!50371 (isStrictlySorted!300 lt!50747))))

(assert (=> d!27187 (= lt!50747 e!65387)))

(assert (=> d!27187 (= c!17237 (and ((_ is Cons!1611) (toList!794 lt!49959)) (bvslt (_1!1193 (h!2206 (toList!794 lt!49959))) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27187 (isStrictlySorted!300 (toList!794 lt!49959))))

(assert (=> d!27187 (= (insertStrictlySorted!70 (toList!794 lt!49959) (_1!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49956 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50747)))

(declare-fun bm!10338 () Bool)

(assert (=> bm!10338 (= call!10342 call!10341)))

(assert (= (and d!27187 c!17237) b!100414))

(assert (= (and d!27187 (not c!17237)) b!100406))

(assert (= (and b!100406 c!17238) b!100408))

(assert (= (and b!100406 (not c!17238)) b!100412))

(assert (= (and b!100412 c!17236) b!100409))

(assert (= (and b!100412 (not c!17236)) b!100413))

(assert (= (or b!100409 b!100413) bm!10338))

(assert (= (or b!100408 bm!10338) bm!10340))

(assert (= (or b!100414 bm!10340) bm!10339))

(assert (= (and bm!10339 c!17235) b!100407))

(assert (= (and bm!10339 (not c!17235)) b!100415))

(assert (= (and d!27187 res!50371) b!100411))

(assert (= (and b!100411 res!50372) b!100410))

(declare-fun m!111079 () Bool)

(assert (=> b!100411 m!111079))

(declare-fun m!111081 () Bool)

(assert (=> bm!10339 m!111081))

(declare-fun m!111083 () Bool)

(assert (=> b!100410 m!111083))

(declare-fun m!111085 () Bool)

(assert (=> b!100407 m!111085))

(declare-fun m!111087 () Bool)

(assert (=> d!27187 m!111087))

(declare-fun m!111089 () Bool)

(assert (=> d!27187 m!111089))

(assert (=> d!26759 d!27187))

(declare-fun d!27189 () Bool)

(declare-fun e!65391 () Bool)

(assert (=> d!27189 e!65391))

(declare-fun res!50373 () Bool)

(assert (=> d!27189 (=> (not res!50373) (not e!65391))))

(declare-fun lt!50749 () ListLongMap!1557)

(assert (=> d!27189 (= res!50373 (contains!810 lt!50749 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(declare-fun lt!50751 () List!1615)

(assert (=> d!27189 (= lt!50749 (ListLongMap!1558 lt!50751))))

(declare-fun lt!50750 () Unit!3031)

(declare-fun lt!50748 () Unit!3031)

(assert (=> d!27189 (= lt!50750 lt!50748)))

(assert (=> d!27189 (= (getValueByKey!150 lt!50751 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27189 (= lt!50748 (lemmaContainsTupThenGetReturnValue!68 lt!50751 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27189 (= lt!50751 (insertStrictlySorted!70 (toList!794 call!10225) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (=> d!27189 (= (+!139 call!10225 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))) lt!50749)))

(declare-fun b!100416 () Bool)

(declare-fun res!50374 () Bool)

(assert (=> b!100416 (=> (not res!50374) (not e!65391))))

(assert (=> b!100416 (= res!50374 (= (getValueByKey!150 (toList!794 lt!50749) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(declare-fun b!100417 () Bool)

(assert (=> b!100417 (= e!65391 (contains!812 (toList!794 lt!50749) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))

(assert (= (and d!27189 res!50373) b!100416))

(assert (= (and b!100416 res!50374) b!100417))

(declare-fun m!111091 () Bool)

(assert (=> d!27189 m!111091))

(declare-fun m!111093 () Bool)

(assert (=> d!27189 m!111093))

(declare-fun m!111095 () Bool)

(assert (=> d!27189 m!111095))

(declare-fun m!111097 () Bool)

(assert (=> d!27189 m!111097))

(declare-fun m!111099 () Bool)

(assert (=> b!100416 m!111099))

(declare-fun m!111101 () Bool)

(assert (=> b!100417 m!111101))

(assert (=> b!99479 d!27189))

(assert (=> b!99719 d!27147))

(declare-fun b!100418 () Bool)

(declare-fun e!65394 () Bool)

(assert (=> b!100418 (= e!65394 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!100418 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!100419 () Bool)

(assert (=> b!100419 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> b!100419 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2272 (_values!2485 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun e!65395 () Bool)

(declare-fun lt!50753 () ListLongMap!1557)

(assert (=> b!100419 (= e!65395 (= (apply!93 lt!50753 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!100420 () Bool)

(declare-fun lt!50756 () Unit!3031)

(declare-fun lt!50755 () Unit!3031)

(assert (=> b!100420 (= lt!50756 lt!50755)))

(declare-fun lt!50758 () (_ BitVec 64))

(declare-fun lt!50757 () V!3163)

(declare-fun lt!50752 () ListLongMap!1557)

(declare-fun lt!50754 () (_ BitVec 64))

(assert (=> b!100420 (not (contains!810 (+!139 lt!50752 (tuple2!2367 lt!50758 lt!50757)) lt!50754))))

(assert (=> b!100420 (= lt!50755 (addStillNotContains!43 lt!50752 lt!50758 lt!50757 lt!50754))))

(assert (=> b!100420 (= lt!50754 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!100420 (= lt!50757 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!100420 (= lt!50758 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(declare-fun call!10344 () ListLongMap!1557)

(assert (=> b!100420 (= lt!50752 call!10344)))

(declare-fun e!65393 () ListLongMap!1557)

(assert (=> b!100420 (= e!65393 (+!139 call!10344 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!100421 () Bool)

(declare-fun e!65397 () Bool)

(assert (=> b!100421 (= e!65397 (isEmpty!364 lt!50753))))

(declare-fun b!100422 () Bool)

(declare-fun e!65396 () Bool)

(assert (=> b!100422 (= e!65396 e!65395)))

(assert (=> b!100422 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun res!50377 () Bool)

(assert (=> b!100422 (= res!50377 (contains!810 lt!50753 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!100422 (=> (not res!50377) (not e!65395))))

(declare-fun b!100423 () Bool)

(declare-fun e!65392 () ListLongMap!1557)

(assert (=> b!100423 (= e!65392 (ListLongMap!1558 Nil!1612))))

(declare-fun b!100424 () Bool)

(assert (=> b!100424 (= e!65392 e!65393)))

(declare-fun c!17240 () Bool)

(assert (=> b!100424 (= c!17240 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun d!27191 () Bool)

(declare-fun e!65398 () Bool)

(assert (=> d!27191 e!65398))

(declare-fun res!50376 () Bool)

(assert (=> d!27191 (=> (not res!50376) (not e!65398))))

(assert (=> d!27191 (= res!50376 (not (contains!810 lt!50753 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27191 (= lt!50753 e!65392)))

(declare-fun c!17239 () Bool)

(assert (=> d!27191 (= c!17239 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> d!27191 (validMask!0 (mask!6609 (v!2817 (underlying!342 thiss!992))))))

(assert (=> d!27191 (= (getCurrentListMapNoExtraKeys!103 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))) lt!50753)))

(declare-fun b!100425 () Bool)

(assert (=> b!100425 (= e!65398 e!65396)))

(declare-fun c!17241 () Bool)

(assert (=> b!100425 (= c!17241 e!65394)))

(declare-fun res!50378 () Bool)

(assert (=> b!100425 (=> (not res!50378) (not e!65394))))

(assert (=> b!100425 (= res!50378 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun bm!10341 () Bool)

(assert (=> bm!10341 (= call!10344 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun b!100426 () Bool)

(declare-fun res!50375 () Bool)

(assert (=> b!100426 (=> (not res!50375) (not e!65398))))

(assert (=> b!100426 (= res!50375 (not (contains!810 lt!50753 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100427 () Bool)

(assert (=> b!100427 (= e!65397 (= lt!50753 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (_values!2485 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992))) (extraKeys!2319 (v!2817 (underlying!342 thiss!992))) (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) (minValue!2383 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun b!100428 () Bool)

(assert (=> b!100428 (= e!65393 call!10344)))

(declare-fun b!100429 () Bool)

(assert (=> b!100429 (= e!65396 e!65397)))

(declare-fun c!17242 () Bool)

(assert (=> b!100429 (= c!17242 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!27191 c!17239) b!100423))

(assert (= (and d!27191 (not c!17239)) b!100424))

(assert (= (and b!100424 c!17240) b!100420))

(assert (= (and b!100424 (not c!17240)) b!100428))

(assert (= (or b!100420 b!100428) bm!10341))

(assert (= (and d!27191 res!50376) b!100426))

(assert (= (and b!100426 res!50375) b!100425))

(assert (= (and b!100425 res!50378) b!100418))

(assert (= (and b!100425 c!17241) b!100422))

(assert (= (and b!100425 (not c!17241)) b!100429))

(assert (= (and b!100422 res!50377) b!100419))

(assert (= (and b!100429 c!17242) b!100427))

(assert (= (and b!100429 (not c!17242)) b!100421))

(declare-fun b_lambda!4497 () Bool)

(assert (=> (not b_lambda!4497) (not b!100419)))

(assert (=> b!100419 t!5594))

(declare-fun b_and!6189 () Bool)

(assert (= b_and!6185 (and (=> t!5594 result!3297) b_and!6189)))

(assert (=> b!100419 t!5596))

(declare-fun b_and!6191 () Bool)

(assert (= b_and!6187 (and (=> t!5596 result!3301) b_and!6191)))

(declare-fun b_lambda!4499 () Bool)

(assert (=> (not b_lambda!4499) (not b!100420)))

(assert (=> b!100420 t!5594))

(declare-fun b_and!6193 () Bool)

(assert (= b_and!6189 (and (=> t!5594 result!3297) b_and!6193)))

(assert (=> b!100420 t!5596))

(declare-fun b_and!6195 () Bool)

(assert (= b_and!6191 (and (=> t!5596 result!3301) b_and!6195)))

(assert (=> b!100424 m!109523))

(assert (=> b!100424 m!109523))

(declare-fun m!111103 () Bool)

(assert (=> b!100424 m!111103))

(assert (=> b!100422 m!109523))

(assert (=> b!100422 m!109523))

(declare-fun m!111105 () Bool)

(assert (=> b!100422 m!111105))

(declare-fun m!111107 () Bool)

(assert (=> b!100421 m!111107))

(assert (=> b!100418 m!109523))

(assert (=> b!100418 m!109523))

(assert (=> b!100418 m!111103))

(declare-fun m!111109 () Bool)

(assert (=> bm!10341 m!111109))

(declare-fun m!111111 () Bool)

(assert (=> b!100426 m!111111))

(assert (=> b!100420 m!109121))

(declare-fun m!111113 () Bool)

(assert (=> b!100420 m!111113))

(declare-fun m!111115 () Bool)

(assert (=> b!100420 m!111115))

(declare-fun m!111117 () Bool)

(assert (=> b!100420 m!111117))

(declare-fun m!111119 () Bool)

(assert (=> b!100420 m!111119))

(declare-fun m!111121 () Bool)

(assert (=> b!100420 m!111121))

(assert (=> b!100420 m!109523))

(assert (=> b!100420 m!111115))

(assert (=> b!100420 m!109121))

(declare-fun m!111123 () Bool)

(assert (=> b!100420 m!111123))

(assert (=> b!100420 m!111117))

(declare-fun m!111125 () Bool)

(assert (=> d!27191 m!111125))

(assert (=> d!27191 m!109109))

(assert (=> b!100427 m!111109))

(assert (=> b!100419 m!109121))

(assert (=> b!100419 m!111115))

(assert (=> b!100419 m!109121))

(assert (=> b!100419 m!111123))

(assert (=> b!100419 m!111115))

(assert (=> b!100419 m!109523))

(declare-fun m!111127 () Bool)

(assert (=> b!100419 m!111127))

(assert (=> b!100419 m!109523))

(assert (=> bm!10246 d!27191))

(assert (=> b!99575 d!26943))

(assert (=> b!99575 d!26945))

(declare-fun d!27193 () Bool)

(assert (=> d!27193 (= (inRange!0 (ite c!16997 (index!3201 lt!50164) (ite c!16995 (index!3200 lt!50169) (index!3203 lt!50169))) (mask!6609 newMap!16)) (and (bvsge (ite c!16997 (index!3201 lt!50164) (ite c!16995 (index!3200 lt!50169) (index!3203 lt!50169))) #b00000000000000000000000000000000) (bvslt (ite c!16997 (index!3201 lt!50164) (ite c!16995 (index!3200 lt!50169) (index!3203 lt!50169))) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10233 d!27193))

(declare-fun d!27195 () Bool)

(assert (=> d!27195 (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!50759 () Unit!3031)

(assert (=> d!27195 (= lt!50759 (choose!618 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!65399 () Bool)

(assert (=> d!27195 e!65399))

(declare-fun res!50379 () Bool)

(assert (=> d!27195 (=> (not res!50379) (not e!65399))))

(assert (=> d!27195 (= res!50379 (isStrictlySorted!300 (toList!794 lt!49947)))))

(assert (=> d!27195 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000) lt!50759)))

(declare-fun b!100430 () Bool)

(assert (=> b!100430 (= e!65399 (containsKey!154 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27195 res!50379) b!100430))

(assert (=> d!27195 m!109563))

(assert (=> d!27195 m!109563))

(assert (=> d!27195 m!109565))

(declare-fun m!111129 () Bool)

(assert (=> d!27195 m!111129))

(assert (=> d!27195 m!110427))

(assert (=> b!100430 m!109559))

(assert (=> b!99641 d!27195))

(declare-fun d!27197 () Bool)

(assert (=> d!27197 (= (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!365 (getValueByKey!150 (toList!794 lt!49947) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!4156 () Bool)

(assert (= bs!4156 d!27197))

(assert (=> bs!4156 m!109563))

(declare-fun m!111131 () Bool)

(assert (=> bs!4156 m!111131))

(assert (=> b!99641 d!27197))

(assert (=> b!99641 d!27159))

(declare-fun d!27199 () Bool)

(assert (=> d!27199 (= (apply!93 (+!139 lt!50074 (tuple2!2367 lt!50082 (minValue!2383 newMap!16))) lt!50088) (apply!93 lt!50074 lt!50088))))

(declare-fun lt!50760 () Unit!3031)

(assert (=> d!27199 (= lt!50760 (choose!617 lt!50074 lt!50082 (minValue!2383 newMap!16) lt!50088))))

(declare-fun e!65400 () Bool)

(assert (=> d!27199 e!65400))

(declare-fun res!50380 () Bool)

(assert (=> d!27199 (=> (not res!50380) (not e!65400))))

(assert (=> d!27199 (= res!50380 (contains!810 lt!50074 lt!50088))))

(assert (=> d!27199 (= (addApplyDifferent!69 lt!50074 lt!50082 (minValue!2383 newMap!16) lt!50088) lt!50760)))

(declare-fun b!100431 () Bool)

(assert (=> b!100431 (= e!65400 (not (= lt!50088 lt!50082)))))

(assert (= (and d!27199 res!50380) b!100431))

(assert (=> d!27199 m!109375))

(assert (=> d!27199 m!109377))

(declare-fun m!111133 () Bool)

(assert (=> d!27199 m!111133))

(declare-fun m!111135 () Bool)

(assert (=> d!27199 m!111135))

(assert (=> d!27199 m!109375))

(assert (=> d!27199 m!109403))

(assert (=> b!99466 d!27199))

(declare-fun d!27201 () Bool)

(declare-fun e!65401 () Bool)

(assert (=> d!27201 e!65401))

(declare-fun res!50381 () Bool)

(assert (=> d!27201 (=> (not res!50381) (not e!65401))))

(declare-fun lt!50762 () ListLongMap!1557)

(assert (=> d!27201 (= res!50381 (contains!810 lt!50762 (_1!1193 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16)))))))

(declare-fun lt!50764 () List!1615)

(assert (=> d!27201 (= lt!50762 (ListLongMap!1558 lt!50764))))

(declare-fun lt!50763 () Unit!3031)

(declare-fun lt!50761 () Unit!3031)

(assert (=> d!27201 (= lt!50763 lt!50761)))

(assert (=> d!27201 (= (getValueByKey!150 lt!50764 (_1!1193 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27201 (= lt!50761 (lemmaContainsTupThenGetReturnValue!68 lt!50764 (_1!1193 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27201 (= lt!50764 (insertStrictlySorted!70 (toList!794 lt!50085) (_1!1193 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27201 (= (+!139 lt!50085 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16))) lt!50762)))

(declare-fun b!100432 () Bool)

(declare-fun res!50382 () Bool)

(assert (=> b!100432 (=> (not res!50382) (not e!65401))))

(assert (=> b!100432 (= res!50382 (= (getValueByKey!150 (toList!794 lt!50762) (_1!1193 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16))))))))

(declare-fun b!100433 () Bool)

(assert (=> b!100433 (= e!65401 (contains!812 (toList!794 lt!50762) (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16))))))

(assert (= (and d!27201 res!50381) b!100432))

(assert (= (and b!100432 res!50382) b!100433))

(declare-fun m!111137 () Bool)

(assert (=> d!27201 m!111137))

(declare-fun m!111139 () Bool)

(assert (=> d!27201 m!111139))

(declare-fun m!111141 () Bool)

(assert (=> d!27201 m!111141))

(declare-fun m!111143 () Bool)

(assert (=> d!27201 m!111143))

(declare-fun m!111145 () Bool)

(assert (=> b!100432 m!111145))

(declare-fun m!111147 () Bool)

(assert (=> b!100433 m!111147))

(assert (=> b!99466 d!27201))

(declare-fun d!27203 () Bool)

(assert (=> d!27203 (= (apply!93 (+!139 lt!50085 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16))) lt!50086) (apply!93 lt!50085 lt!50086))))

(declare-fun lt!50765 () Unit!3031)

(assert (=> d!27203 (= lt!50765 (choose!617 lt!50085 lt!50073 (zeroValue!2383 newMap!16) lt!50086))))

(declare-fun e!65402 () Bool)

(assert (=> d!27203 e!65402))

(declare-fun res!50383 () Bool)

(assert (=> d!27203 (=> (not res!50383) (not e!65402))))

(assert (=> d!27203 (= res!50383 (contains!810 lt!50085 lt!50086))))

(assert (=> d!27203 (= (addApplyDifferent!69 lt!50085 lt!50073 (zeroValue!2383 newMap!16) lt!50086) lt!50765)))

(declare-fun b!100434 () Bool)

(assert (=> b!100434 (= e!65402 (not (= lt!50086 lt!50073)))))

(assert (= (and d!27203 res!50383) b!100434))

(assert (=> d!27203 m!109383))

(assert (=> d!27203 m!109395))

(declare-fun m!111149 () Bool)

(assert (=> d!27203 m!111149))

(declare-fun m!111151 () Bool)

(assert (=> d!27203 m!111151))

(assert (=> d!27203 m!109383))

(assert (=> d!27203 m!109391))

(assert (=> b!99466 d!27203))

(declare-fun d!27205 () Bool)

(declare-fun e!65403 () Bool)

(assert (=> d!27205 e!65403))

(declare-fun res!50384 () Bool)

(assert (=> d!27205 (=> res!50384 e!65403)))

(declare-fun lt!50767 () Bool)

(assert (=> d!27205 (= res!50384 (not lt!50767))))

(declare-fun lt!50769 () Bool)

(assert (=> d!27205 (= lt!50767 lt!50769)))

(declare-fun lt!50766 () Unit!3031)

(declare-fun e!65404 () Unit!3031)

(assert (=> d!27205 (= lt!50766 e!65404)))

(declare-fun c!17243 () Bool)

(assert (=> d!27205 (= c!17243 lt!50769)))

(assert (=> d!27205 (= lt!50769 (containsKey!154 (toList!794 (+!139 lt!50084 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16)))) lt!50068))))

(assert (=> d!27205 (= (contains!810 (+!139 lt!50084 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16))) lt!50068) lt!50767)))

(declare-fun b!100435 () Bool)

(declare-fun lt!50768 () Unit!3031)

(assert (=> b!100435 (= e!65404 lt!50768)))

(assert (=> b!100435 (= lt!50768 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 (+!139 lt!50084 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16)))) lt!50068))))

(assert (=> b!100435 (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!50084 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16)))) lt!50068))))

(declare-fun b!100436 () Bool)

(declare-fun Unit!3076 () Unit!3031)

(assert (=> b!100436 (= e!65404 Unit!3076)))

(declare-fun b!100437 () Bool)

(assert (=> b!100437 (= e!65403 (isDefined!104 (getValueByKey!150 (toList!794 (+!139 lt!50084 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16)))) lt!50068)))))

(assert (= (and d!27205 c!17243) b!100435))

(assert (= (and d!27205 (not c!17243)) b!100436))

(assert (= (and d!27205 (not res!50384)) b!100437))

(declare-fun m!111153 () Bool)

(assert (=> d!27205 m!111153))

(declare-fun m!111155 () Bool)

(assert (=> b!100435 m!111155))

(declare-fun m!111157 () Bool)

(assert (=> b!100435 m!111157))

(assert (=> b!100435 m!111157))

(declare-fun m!111159 () Bool)

(assert (=> b!100435 m!111159))

(assert (=> b!100437 m!111157))

(assert (=> b!100437 m!111157))

(assert (=> b!100437 m!111159))

(assert (=> b!99466 d!27205))

(declare-fun d!27207 () Bool)

(assert (=> d!27207 (= (apply!93 lt!50078 lt!50077) (get!1307 (getValueByKey!150 (toList!794 lt!50078) lt!50077)))))

(declare-fun bs!4157 () Bool)

(assert (= bs!4157 d!27207))

(declare-fun m!111161 () Bool)

(assert (=> bs!4157 m!111161))

(assert (=> bs!4157 m!111161))

(declare-fun m!111163 () Bool)

(assert (=> bs!4157 m!111163))

(assert (=> b!99466 d!27207))

(declare-fun d!27209 () Bool)

(assert (=> d!27209 (= (apply!93 lt!50085 lt!50086) (get!1307 (getValueByKey!150 (toList!794 lt!50085) lt!50086)))))

(declare-fun bs!4158 () Bool)

(assert (= bs!4158 d!27209))

(declare-fun m!111165 () Bool)

(assert (=> bs!4158 m!111165))

(assert (=> bs!4158 m!111165))

(declare-fun m!111167 () Bool)

(assert (=> bs!4158 m!111167))

(assert (=> b!99466 d!27209))

(declare-fun d!27211 () Bool)

(assert (=> d!27211 (= (apply!93 (+!139 lt!50078 (tuple2!2367 lt!50080 (minValue!2383 newMap!16))) lt!50077) (apply!93 lt!50078 lt!50077))))

(declare-fun lt!50770 () Unit!3031)

(assert (=> d!27211 (= lt!50770 (choose!617 lt!50078 lt!50080 (minValue!2383 newMap!16) lt!50077))))

(declare-fun e!65405 () Bool)

(assert (=> d!27211 e!65405))

(declare-fun res!50385 () Bool)

(assert (=> d!27211 (=> (not res!50385) (not e!65405))))

(assert (=> d!27211 (= res!50385 (contains!810 lt!50078 lt!50077))))

(assert (=> d!27211 (= (addApplyDifferent!69 lt!50078 lt!50080 (minValue!2383 newMap!16) lt!50077) lt!50770)))

(declare-fun b!100438 () Bool)

(assert (=> b!100438 (= e!65405 (not (= lt!50077 lt!50080)))))

(assert (= (and d!27211 res!50385) b!100438))

(assert (=> d!27211 m!109397))

(assert (=> d!27211 m!109401))

(declare-fun m!111169 () Bool)

(assert (=> d!27211 m!111169))

(declare-fun m!111171 () Bool)

(assert (=> d!27211 m!111171))

(assert (=> d!27211 m!109397))

(assert (=> d!27211 m!109379))

(assert (=> b!99466 d!27211))

(declare-fun d!27213 () Bool)

(assert (=> d!27213 (= (apply!93 (+!139 lt!50074 (tuple2!2367 lt!50082 (minValue!2383 newMap!16))) lt!50088) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!50074 (tuple2!2367 lt!50082 (minValue!2383 newMap!16)))) lt!50088)))))

(declare-fun bs!4159 () Bool)

(assert (= bs!4159 d!27213))

(declare-fun m!111173 () Bool)

(assert (=> bs!4159 m!111173))

(assert (=> bs!4159 m!111173))

(declare-fun m!111175 () Bool)

(assert (=> bs!4159 m!111175))

(assert (=> b!99466 d!27213))

(declare-fun d!27215 () Bool)

(assert (=> d!27215 (= (apply!93 lt!50074 lt!50088) (get!1307 (getValueByKey!150 (toList!794 lt!50074) lt!50088)))))

(declare-fun bs!4160 () Bool)

(assert (= bs!4160 d!27215))

(declare-fun m!111177 () Bool)

(assert (=> bs!4160 m!111177))

(assert (=> bs!4160 m!111177))

(declare-fun m!111179 () Bool)

(assert (=> bs!4160 m!111179))

(assert (=> b!99466 d!27215))

(declare-fun d!27217 () Bool)

(assert (=> d!27217 (= (apply!93 (+!139 lt!50078 (tuple2!2367 lt!50080 (minValue!2383 newMap!16))) lt!50077) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!50078 (tuple2!2367 lt!50080 (minValue!2383 newMap!16)))) lt!50077)))))

(declare-fun bs!4161 () Bool)

(assert (= bs!4161 d!27217))

(declare-fun m!111181 () Bool)

(assert (=> bs!4161 m!111181))

(assert (=> bs!4161 m!111181))

(declare-fun m!111183 () Bool)

(assert (=> bs!4161 m!111183))

(assert (=> b!99466 d!27217))

(declare-fun d!27219 () Bool)

(assert (=> d!27219 (= (apply!93 (+!139 lt!50085 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16))) lt!50086) (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!50085 (tuple2!2367 lt!50073 (zeroValue!2383 newMap!16)))) lt!50086)))))

(declare-fun bs!4162 () Bool)

(assert (= bs!4162 d!27219))

(declare-fun m!111185 () Bool)

(assert (=> bs!4162 m!111185))

(assert (=> bs!4162 m!111185))

(declare-fun m!111187 () Bool)

(assert (=> bs!4162 m!111187))

(assert (=> b!99466 d!27219))

(declare-fun d!27221 () Bool)

(declare-fun e!65406 () Bool)

(assert (=> d!27221 e!65406))

(declare-fun res!50386 () Bool)

(assert (=> d!27221 (=> (not res!50386) (not e!65406))))

(declare-fun lt!50772 () ListLongMap!1557)

(assert (=> d!27221 (= res!50386 (contains!810 lt!50772 (_1!1193 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16)))))))

(declare-fun lt!50774 () List!1615)

(assert (=> d!27221 (= lt!50772 (ListLongMap!1558 lt!50774))))

(declare-fun lt!50773 () Unit!3031)

(declare-fun lt!50771 () Unit!3031)

(assert (=> d!27221 (= lt!50773 lt!50771)))

(assert (=> d!27221 (= (getValueByKey!150 lt!50774 (_1!1193 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27221 (= lt!50771 (lemmaContainsTupThenGetReturnValue!68 lt!50774 (_1!1193 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27221 (= lt!50774 (insertStrictlySorted!70 (toList!794 lt!50084) (_1!1193 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16)))))))

(assert (=> d!27221 (= (+!139 lt!50084 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16))) lt!50772)))

(declare-fun b!100439 () Bool)

(declare-fun res!50387 () Bool)

(assert (=> b!100439 (=> (not res!50387) (not e!65406))))

(assert (=> b!100439 (= res!50387 (= (getValueByKey!150 (toList!794 lt!50772) (_1!1193 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16))))))))

(declare-fun b!100440 () Bool)

(assert (=> b!100440 (= e!65406 (contains!812 (toList!794 lt!50772) (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16))))))

(assert (= (and d!27221 res!50386) b!100439))

(assert (= (and b!100439 res!50387) b!100440))

(declare-fun m!111189 () Bool)

(assert (=> d!27221 m!111189))

(declare-fun m!111191 () Bool)

(assert (=> d!27221 m!111191))

(declare-fun m!111193 () Bool)

(assert (=> d!27221 m!111193))

(declare-fun m!111195 () Bool)

(assert (=> d!27221 m!111195))

(declare-fun m!111197 () Bool)

(assert (=> b!100439 m!111197))

(declare-fun m!111199 () Bool)

(assert (=> b!100440 m!111199))

(assert (=> b!99466 d!27221))

(declare-fun d!27223 () Bool)

(declare-fun e!65407 () Bool)

(assert (=> d!27223 e!65407))

(declare-fun res!50388 () Bool)

(assert (=> d!27223 (=> (not res!50388) (not e!65407))))

(declare-fun lt!50776 () ListLongMap!1557)

(assert (=> d!27223 (= res!50388 (contains!810 lt!50776 (_1!1193 (tuple2!2367 lt!50082 (minValue!2383 newMap!16)))))))

(declare-fun lt!50778 () List!1615)

(assert (=> d!27223 (= lt!50776 (ListLongMap!1558 lt!50778))))

(declare-fun lt!50777 () Unit!3031)

(declare-fun lt!50775 () Unit!3031)

(assert (=> d!27223 (= lt!50777 lt!50775)))

(assert (=> d!27223 (= (getValueByKey!150 lt!50778 (_1!1193 (tuple2!2367 lt!50082 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50082 (minValue!2383 newMap!16)))))))

(assert (=> d!27223 (= lt!50775 (lemmaContainsTupThenGetReturnValue!68 lt!50778 (_1!1193 (tuple2!2367 lt!50082 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50082 (minValue!2383 newMap!16)))))))

(assert (=> d!27223 (= lt!50778 (insertStrictlySorted!70 (toList!794 lt!50074) (_1!1193 (tuple2!2367 lt!50082 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50082 (minValue!2383 newMap!16)))))))

(assert (=> d!27223 (= (+!139 lt!50074 (tuple2!2367 lt!50082 (minValue!2383 newMap!16))) lt!50776)))

(declare-fun b!100441 () Bool)

(declare-fun res!50389 () Bool)

(assert (=> b!100441 (=> (not res!50389) (not e!65407))))

(assert (=> b!100441 (= res!50389 (= (getValueByKey!150 (toList!794 lt!50776) (_1!1193 (tuple2!2367 lt!50082 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50082 (minValue!2383 newMap!16))))))))

(declare-fun b!100442 () Bool)

(assert (=> b!100442 (= e!65407 (contains!812 (toList!794 lt!50776) (tuple2!2367 lt!50082 (minValue!2383 newMap!16))))))

(assert (= (and d!27223 res!50388) b!100441))

(assert (= (and b!100441 res!50389) b!100442))

(declare-fun m!111201 () Bool)

(assert (=> d!27223 m!111201))

(declare-fun m!111203 () Bool)

(assert (=> d!27223 m!111203))

(declare-fun m!111205 () Bool)

(assert (=> d!27223 m!111205))

(declare-fun m!111207 () Bool)

(assert (=> d!27223 m!111207))

(declare-fun m!111209 () Bool)

(assert (=> b!100441 m!111209))

(declare-fun m!111211 () Bool)

(assert (=> b!100442 m!111211))

(assert (=> b!99466 d!27223))

(declare-fun d!27225 () Bool)

(assert (=> d!27225 (contains!810 (+!139 lt!50084 (tuple2!2367 lt!50081 (zeroValue!2383 newMap!16))) lt!50068)))

(declare-fun lt!50779 () Unit!3031)

(assert (=> d!27225 (= lt!50779 (choose!616 lt!50084 lt!50081 (zeroValue!2383 newMap!16) lt!50068))))

(assert (=> d!27225 (contains!810 lt!50084 lt!50068)))

(assert (=> d!27225 (= (addStillContains!69 lt!50084 lt!50081 (zeroValue!2383 newMap!16) lt!50068) lt!50779)))

(declare-fun bs!4163 () Bool)

(assert (= bs!4163 d!27225))

(assert (=> bs!4163 m!109381))

(assert (=> bs!4163 m!109381))

(assert (=> bs!4163 m!109385))

(declare-fun m!111213 () Bool)

(assert (=> bs!4163 m!111213))

(declare-fun m!111215 () Bool)

(assert (=> bs!4163 m!111215))

(assert (=> b!99466 d!27225))

(declare-fun d!27227 () Bool)

(declare-fun e!65408 () Bool)

(assert (=> d!27227 e!65408))

(declare-fun res!50390 () Bool)

(assert (=> d!27227 (=> (not res!50390) (not e!65408))))

(declare-fun lt!50781 () ListLongMap!1557)

(assert (=> d!27227 (= res!50390 (contains!810 lt!50781 (_1!1193 (tuple2!2367 lt!50080 (minValue!2383 newMap!16)))))))

(declare-fun lt!50783 () List!1615)

(assert (=> d!27227 (= lt!50781 (ListLongMap!1558 lt!50783))))

(declare-fun lt!50782 () Unit!3031)

(declare-fun lt!50780 () Unit!3031)

(assert (=> d!27227 (= lt!50782 lt!50780)))

(assert (=> d!27227 (= (getValueByKey!150 lt!50783 (_1!1193 (tuple2!2367 lt!50080 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50080 (minValue!2383 newMap!16)))))))

(assert (=> d!27227 (= lt!50780 (lemmaContainsTupThenGetReturnValue!68 lt!50783 (_1!1193 (tuple2!2367 lt!50080 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50080 (minValue!2383 newMap!16)))))))

(assert (=> d!27227 (= lt!50783 (insertStrictlySorted!70 (toList!794 lt!50078) (_1!1193 (tuple2!2367 lt!50080 (minValue!2383 newMap!16))) (_2!1193 (tuple2!2367 lt!50080 (minValue!2383 newMap!16)))))))

(assert (=> d!27227 (= (+!139 lt!50078 (tuple2!2367 lt!50080 (minValue!2383 newMap!16))) lt!50781)))

(declare-fun b!100443 () Bool)

(declare-fun res!50391 () Bool)

(assert (=> b!100443 (=> (not res!50391) (not e!65408))))

(assert (=> b!100443 (= res!50391 (= (getValueByKey!150 (toList!794 lt!50781) (_1!1193 (tuple2!2367 lt!50080 (minValue!2383 newMap!16)))) (Some!155 (_2!1193 (tuple2!2367 lt!50080 (minValue!2383 newMap!16))))))))

(declare-fun b!100444 () Bool)

(assert (=> b!100444 (= e!65408 (contains!812 (toList!794 lt!50781) (tuple2!2367 lt!50080 (minValue!2383 newMap!16))))))

(assert (= (and d!27227 res!50390) b!100443))

(assert (= (and b!100443 res!50391) b!100444))

(declare-fun m!111217 () Bool)

(assert (=> d!27227 m!111217))

(declare-fun m!111219 () Bool)

(assert (=> d!27227 m!111219))

(declare-fun m!111221 () Bool)

(assert (=> d!27227 m!111221))

(declare-fun m!111223 () Bool)

(assert (=> d!27227 m!111223))

(declare-fun m!111225 () Bool)

(assert (=> b!100443 m!111225))

(declare-fun m!111227 () Bool)

(assert (=> b!100444 m!111227))

(assert (=> b!99466 d!27227))

(assert (=> b!99466 d!26881))

(declare-fun d!27229 () Bool)

(assert (=> d!27229 (= (get!1305 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2816 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!99767 d!27229))

(assert (=> b!99612 d!26721))

(declare-fun b!100445 () Bool)

(declare-fun e!65409 () Bool)

(declare-fun e!65410 () Bool)

(assert (=> b!100445 (= e!65409 e!65410)))

(declare-fun c!17244 () Bool)

(assert (=> b!100445 (= c!17244 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10342 () Bool)

(declare-fun call!10345 () Bool)

(assert (=> bm!10342 (= call!10345 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4196 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992)))))))

(declare-fun b!100446 () Bool)

(declare-fun e!65411 () Bool)

(assert (=> b!100446 (= e!65410 e!65411)))

(declare-fun lt!50786 () (_ BitVec 64))

(assert (=> b!100446 (= lt!50786 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!50785 () Unit!3031)

(assert (=> b!100446 (= lt!50785 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) lt!50786 #b00000000000000000000000000000000))))

(assert (=> b!100446 (arrayContainsKey!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) lt!50786 #b00000000000000000000000000000000)))

(declare-fun lt!50784 () Unit!3031)

(assert (=> b!100446 (= lt!50784 lt!50785)))

(declare-fun res!50392 () Bool)

(assert (=> b!100446 (= res!50392 (= (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b00000000000000000000000000000000) (_keys!4196 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992)))) (Found!264 #b00000000000000000000000000000000)))))

(assert (=> b!100446 (=> (not res!50392) (not e!65411))))

(declare-fun d!27231 () Bool)

(declare-fun res!50393 () Bool)

(assert (=> d!27231 (=> res!50393 e!65409)))

(assert (=> d!27231 (= res!50393 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> d!27231 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (mask!6609 (v!2817 (underlying!342 thiss!992)))) e!65409)))

(declare-fun b!100447 () Bool)

(assert (=> b!100447 (= e!65411 call!10345)))

(declare-fun b!100448 () Bool)

(assert (=> b!100448 (= e!65410 call!10345)))

(assert (= (and d!27231 (not res!50393)) b!100445))

(assert (= (and b!100445 c!17244) b!100446))

(assert (= (and b!100445 (not c!17244)) b!100448))

(assert (= (and b!100446 res!50392) b!100447))

(assert (= (or b!100447 b!100448) bm!10342))

(assert (=> b!100445 m!110577))

(assert (=> b!100445 m!110577))

(assert (=> b!100445 m!110579))

(declare-fun m!111229 () Bool)

(assert (=> bm!10342 m!111229))

(assert (=> b!100446 m!110577))

(declare-fun m!111231 () Bool)

(assert (=> b!100446 m!111231))

(declare-fun m!111233 () Bool)

(assert (=> b!100446 m!111233))

(assert (=> b!100446 m!110577))

(declare-fun m!111235 () Bool)

(assert (=> b!100446 m!111235))

(assert (=> b!99740 d!27231))

(assert (=> b!99763 d!26963))

(assert (=> b!99763 d!26965))

(declare-fun d!27233 () Bool)

(assert (=> d!27233 (= (isEmpty!365 (getValueByKey!150 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))) (not ((_ is Some!155) (getValueByKey!150 (toList!794 lt!49862) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))))

(assert (=> d!26785 d!27233))

(declare-fun d!27235 () Bool)

(assert (=> d!27235 (= (get!1307 (getValueByKey!150 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2821 (getValueByKey!150 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!26825 d!27235))

(assert (=> d!26825 d!26965))

(declare-fun b!100449 () Bool)

(declare-fun e!65422 () Bool)

(declare-fun call!10350 () Bool)

(assert (=> b!100449 (= e!65422 (not call!10350))))

(declare-fun b!100450 () Bool)

(declare-fun e!65423 () Bool)

(declare-fun e!65424 () Bool)

(assert (=> b!100450 (= e!65423 e!65424)))

(declare-fun res!50398 () Bool)

(assert (=> b!100450 (=> (not res!50398) (not e!65424))))

(declare-fun lt!50792 () ListLongMap!1557)

(assert (=> b!100450 (= res!50398 (contains!810 lt!50792 (select (arr!2020 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) #b00000000000000000000000000000000)))))

(assert (=> b!100450 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))))))))

(declare-fun bm!10343 () Bool)

(declare-fun call!10347 () ListLongMap!1557)

(declare-fun call!10346 () ListLongMap!1557)

(assert (=> bm!10343 (= call!10347 call!10346)))

(declare-fun bm!10344 () Bool)

(declare-fun call!10348 () ListLongMap!1557)

(assert (=> bm!10344 (= call!10346 call!10348)))

(declare-fun b!100451 () Bool)

(declare-fun e!65413 () Bool)

(assert (=> b!100451 (= e!65422 e!65413)))

(declare-fun res!50394 () Bool)

(assert (=> b!100451 (= res!50394 call!10350)))

(assert (=> b!100451 (=> (not res!50394) (not e!65413))))

(declare-fun b!100452 () Bool)

(declare-fun e!65412 () Bool)

(declare-fun call!10349 () Bool)

(assert (=> b!100452 (= e!65412 (not call!10349))))

(declare-fun b!100453 () Bool)

(declare-fun e!65414 () Bool)

(assert (=> b!100453 (= e!65414 (= (apply!93 lt!50792 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030)))))))

(declare-fun b!100454 () Bool)

(declare-fun c!17249 () Bool)

(assert (=> b!100454 (= c!17249 (and (not (= (bvand (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65416 () ListLongMap!1557)

(declare-fun e!65421 () ListLongMap!1557)

(assert (=> b!100454 (= e!65416 e!65421)))

(declare-fun call!10352 () ListLongMap!1557)

(declare-fun c!17247 () Bool)

(declare-fun c!17250 () Bool)

(declare-fun bm!10345 () Bool)

(assert (=> bm!10345 (= call!10352 (+!139 (ite c!17247 call!10348 (ite c!17250 call!10346 call!10347)) (ite (or c!17247 c!17250) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030)))))))))

(declare-fun b!100455 () Bool)

(declare-fun e!65417 () Bool)

(assert (=> b!100455 (= e!65417 e!65412)))

(declare-fun c!17246 () Bool)

(assert (=> b!100455 (= c!17246 (not (= (bvand (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100456 () Bool)

(declare-fun e!65420 () Unit!3031)

(declare-fun lt!50789 () Unit!3031)

(assert (=> b!100456 (= e!65420 lt!50789)))

(declare-fun lt!50804 () ListLongMap!1557)

(assert (=> b!100456 (= lt!50804 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (_values!2485 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (mask!6609 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 newMap!16 (_2!1192 lt!50030)))))))

(declare-fun lt!50801 () (_ BitVec 64))

(assert (=> b!100456 (= lt!50801 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50788 () (_ BitVec 64))

(assert (=> b!100456 (= lt!50788 (select (arr!2020 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) #b00000000000000000000000000000000))))

(declare-fun lt!50790 () Unit!3031)

(assert (=> b!100456 (= lt!50790 (addStillContains!69 lt!50804 lt!50801 (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) lt!50788))))

(assert (=> b!100456 (contains!810 (+!139 lt!50804 (tuple2!2367 lt!50801 (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))))) lt!50788)))

(declare-fun lt!50799 () Unit!3031)

(assert (=> b!100456 (= lt!50799 lt!50790)))

(declare-fun lt!50798 () ListLongMap!1557)

(assert (=> b!100456 (= lt!50798 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (_values!2485 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (mask!6609 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 newMap!16 (_2!1192 lt!50030)))))))

(declare-fun lt!50800 () (_ BitVec 64))

(assert (=> b!100456 (= lt!50800 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50797 () (_ BitVec 64))

(assert (=> b!100456 (= lt!50797 (select (arr!2020 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) #b00000000000000000000000000000000))))

(declare-fun lt!50796 () Unit!3031)

(assert (=> b!100456 (= lt!50796 (addApplyDifferent!69 lt!50798 lt!50800 (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) lt!50797))))

(assert (=> b!100456 (= (apply!93 (+!139 lt!50798 (tuple2!2367 lt!50800 (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))))) lt!50797) (apply!93 lt!50798 lt!50797))))

(declare-fun lt!50795 () Unit!3031)

(assert (=> b!100456 (= lt!50795 lt!50796)))

(declare-fun lt!50805 () ListLongMap!1557)

(assert (=> b!100456 (= lt!50805 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (_values!2485 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (mask!6609 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 newMap!16 (_2!1192 lt!50030)))))))

(declare-fun lt!50793 () (_ BitVec 64))

(assert (=> b!100456 (= lt!50793 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50806 () (_ BitVec 64))

(assert (=> b!100456 (= lt!50806 (select (arr!2020 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) #b00000000000000000000000000000000))))

(declare-fun lt!50791 () Unit!3031)

(assert (=> b!100456 (= lt!50791 (addApplyDifferent!69 lt!50805 lt!50793 (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) lt!50806))))

(assert (=> b!100456 (= (apply!93 (+!139 lt!50805 (tuple2!2367 lt!50793 (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))))) lt!50806) (apply!93 lt!50805 lt!50806))))

(declare-fun lt!50803 () Unit!3031)

(assert (=> b!100456 (= lt!50803 lt!50791)))

(declare-fun lt!50794 () ListLongMap!1557)

(assert (=> b!100456 (= lt!50794 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (_values!2485 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (mask!6609 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 newMap!16 (_2!1192 lt!50030)))))))

(declare-fun lt!50802 () (_ BitVec 64))

(assert (=> b!100456 (= lt!50802 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50808 () (_ BitVec 64))

(assert (=> b!100456 (= lt!50808 (select (arr!2020 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) #b00000000000000000000000000000000))))

(assert (=> b!100456 (= lt!50789 (addApplyDifferent!69 lt!50794 lt!50802 (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) lt!50808))))

(assert (=> b!100456 (= (apply!93 (+!139 lt!50794 (tuple2!2367 lt!50802 (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))))) lt!50808) (apply!93 lt!50794 lt!50808))))

(declare-fun b!100457 () Bool)

(declare-fun call!10351 () ListLongMap!1557)

(assert (=> b!100457 (= e!65421 call!10351)))

(declare-fun b!100458 () Bool)

(declare-fun res!50401 () Bool)

(assert (=> b!100458 (=> (not res!50401) (not e!65417))))

(assert (=> b!100458 (= res!50401 e!65422)))

(declare-fun c!17248 () Bool)

(assert (=> b!100458 (= c!17248 (not (= (bvand (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!100459 () Bool)

(declare-fun e!65418 () Bool)

(assert (=> b!100459 (= e!65418 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) #b00000000000000000000000000000000)))))

(declare-fun b!100460 () Bool)

(assert (=> b!100460 (= e!65424 (= (apply!93 lt!50792 (select (arr!2020 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (_values!2485 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100460 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_values!2485 (ite c!16972 newMap!16 (_2!1192 lt!50030))))))))

(assert (=> b!100460 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))))))))

(declare-fun b!100461 () Bool)

(declare-fun Unit!3077 () Unit!3031)

(assert (=> b!100461 (= e!65420 Unit!3077)))

(declare-fun b!100462 () Bool)

(assert (=> b!100462 (= e!65416 call!10351)))

(declare-fun bm!10346 () Bool)

(assert (=> bm!10346 (= call!10349 (contains!810 lt!50792 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10347 () Bool)

(assert (=> bm!10347 (= call!10351 call!10352)))

(declare-fun b!100463 () Bool)

(declare-fun res!50402 () Bool)

(assert (=> b!100463 (=> (not res!50402) (not e!65417))))

(assert (=> b!100463 (= res!50402 e!65423)))

(declare-fun res!50400 () Bool)

(assert (=> b!100463 (=> res!50400 e!65423)))

(assert (=> b!100463 (= res!50400 (not e!65418))))

(declare-fun res!50399 () Bool)

(assert (=> b!100463 (=> (not res!50399) (not e!65418))))

(assert (=> b!100463 (= res!50399 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))))))))

(declare-fun d!27237 () Bool)

(assert (=> d!27237 e!65417))

(declare-fun res!50397 () Bool)

(assert (=> d!27237 (=> (not res!50397) (not e!65417))))

(assert (=> d!27237 (= res!50397 (or (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))))))))))

(declare-fun lt!50807 () ListLongMap!1557)

(assert (=> d!27237 (= lt!50792 lt!50807)))

(declare-fun lt!50787 () Unit!3031)

(assert (=> d!27237 (= lt!50787 e!65420)))

(declare-fun c!17245 () Bool)

(declare-fun e!65415 () Bool)

(assert (=> d!27237 (= c!17245 e!65415)))

(declare-fun res!50395 () Bool)

(assert (=> d!27237 (=> (not res!50395) (not e!65415))))

(assert (=> d!27237 (= res!50395 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))))))))

(declare-fun e!65419 () ListLongMap!1557)

(assert (=> d!27237 (= lt!50807 e!65419)))

(assert (=> d!27237 (= c!17247 (and (not (= (bvand (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!27237 (validMask!0 (mask!6609 (ite c!16972 newMap!16 (_2!1192 lt!50030))))))

(assert (=> d!27237 (= (getCurrentListMap!474 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (_values!2485 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (mask!6609 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) lt!50792)))

(declare-fun bm!10348 () Bool)

(assert (=> bm!10348 (= call!10350 (contains!810 lt!50792 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10349 () Bool)

(assert (=> bm!10349 (= call!10348 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (_values!2485 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (mask!6609 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 newMap!16 (_2!1192 lt!50030)))))))

(declare-fun b!100464 () Bool)

(assert (=> b!100464 (= e!65413 (= (apply!93 lt!50792 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030)))))))

(declare-fun b!100465 () Bool)

(assert (=> b!100465 (= e!65421 call!10347)))

(declare-fun b!100466 () Bool)

(assert (=> b!100466 (= e!65412 e!65414)))

(declare-fun res!50396 () Bool)

(assert (=> b!100466 (= res!50396 call!10349)))

(assert (=> b!100466 (=> (not res!50396) (not e!65414))))

(declare-fun b!100467 () Bool)

(assert (=> b!100467 (= e!65419 e!65416)))

(assert (=> b!100467 (= c!17250 (and (not (= (bvand (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 (ite c!16972 newMap!16 (_2!1192 lt!50030))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100468 () Bool)

(assert (=> b!100468 (= e!65415 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) #b00000000000000000000000000000000)))))

(declare-fun b!100469 () Bool)

(assert (=> b!100469 (= e!65419 (+!139 call!10352 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (ite c!16972 newMap!16 (_2!1192 lt!50030))))))))

(assert (= (and d!27237 c!17247) b!100469))

(assert (= (and d!27237 (not c!17247)) b!100467))

(assert (= (and b!100467 c!17250) b!100462))

(assert (= (and b!100467 (not c!17250)) b!100454))

(assert (= (and b!100454 c!17249) b!100457))

(assert (= (and b!100454 (not c!17249)) b!100465))

(assert (= (or b!100457 b!100465) bm!10343))

(assert (= (or b!100462 bm!10343) bm!10344))

(assert (= (or b!100462 b!100457) bm!10347))

(assert (= (or b!100469 bm!10344) bm!10349))

(assert (= (or b!100469 bm!10347) bm!10345))

(assert (= (and d!27237 res!50395) b!100468))

(assert (= (and d!27237 c!17245) b!100456))

(assert (= (and d!27237 (not c!17245)) b!100461))

(assert (= (and d!27237 res!50397) b!100463))

(assert (= (and b!100463 res!50399) b!100459))

(assert (= (and b!100463 (not res!50400)) b!100450))

(assert (= (and b!100450 res!50398) b!100460))

(assert (= (and b!100463 res!50402) b!100458))

(assert (= (and b!100458 c!17248) b!100451))

(assert (= (and b!100458 (not c!17248)) b!100449))

(assert (= (and b!100451 res!50394) b!100464))

(assert (= (or b!100451 b!100449) bm!10348))

(assert (= (and b!100458 res!50401) b!100455))

(assert (= (and b!100455 c!17246) b!100466))

(assert (= (and b!100455 (not c!17246)) b!100452))

(assert (= (and b!100466 res!50396) b!100453))

(assert (= (or b!100466 b!100452) bm!10346))

(declare-fun b_lambda!4501 () Bool)

(assert (=> (not b_lambda!4501) (not b!100460)))

(declare-fun tb!1961 () Bool)

(declare-fun t!5609 () Bool)

(assert (=> (and b!99123 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) t!5609) tb!1961))

(declare-fun result!3315 () Bool)

(assert (=> tb!1961 (= result!3315 tp_is_empty!2637)))

(assert (=> b!100460 t!5609))

(declare-fun b_and!6197 () Bool)

(assert (= b_and!6193 (and (=> t!5609 result!3315) b_and!6197)))

(declare-fun t!5611 () Bool)

(declare-fun tb!1963 () Bool)

(assert (=> (and b!99136 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (ite c!16972 newMap!16 (_2!1192 lt!50030)))) t!5611) tb!1963))

(declare-fun result!3317 () Bool)

(assert (= result!3317 result!3315))

(assert (=> b!100460 t!5611))

(declare-fun b_and!6199 () Bool)

(assert (= b_and!6195 (and (=> t!5611 result!3317) b_and!6199)))

(declare-fun m!111237 () Bool)

(assert (=> b!100460 m!111237))

(declare-fun m!111239 () Bool)

(assert (=> b!100460 m!111239))

(declare-fun m!111241 () Bool)

(assert (=> b!100460 m!111241))

(assert (=> b!100460 m!111241))

(declare-fun m!111243 () Bool)

(assert (=> b!100460 m!111243))

(declare-fun m!111245 () Bool)

(assert (=> b!100460 m!111245))

(assert (=> b!100460 m!111237))

(assert (=> b!100460 m!111243))

(declare-fun m!111247 () Bool)

(assert (=> b!100453 m!111247))

(declare-fun m!111249 () Bool)

(assert (=> bm!10349 m!111249))

(assert (=> b!100450 m!111237))

(assert (=> b!100450 m!111237))

(declare-fun m!111251 () Bool)

(assert (=> b!100450 m!111251))

(declare-fun m!111253 () Bool)

(assert (=> bm!10346 m!111253))

(declare-fun m!111255 () Bool)

(assert (=> d!27237 m!111255))

(assert (=> b!100459 m!111237))

(assert (=> b!100459 m!111237))

(declare-fun m!111257 () Bool)

(assert (=> b!100459 m!111257))

(declare-fun m!111259 () Bool)

(assert (=> b!100464 m!111259))

(declare-fun m!111261 () Bool)

(assert (=> b!100469 m!111261))

(declare-fun m!111263 () Bool)

(assert (=> bm!10348 m!111263))

(assert (=> b!100468 m!111237))

(assert (=> b!100468 m!111237))

(assert (=> b!100468 m!111257))

(declare-fun m!111265 () Bool)

(assert (=> b!100456 m!111265))

(declare-fun m!111267 () Bool)

(assert (=> b!100456 m!111267))

(declare-fun m!111269 () Bool)

(assert (=> b!100456 m!111269))

(declare-fun m!111271 () Bool)

(assert (=> b!100456 m!111271))

(declare-fun m!111273 () Bool)

(assert (=> b!100456 m!111273))

(assert (=> b!100456 m!111271))

(declare-fun m!111275 () Bool)

(assert (=> b!100456 m!111275))

(declare-fun m!111277 () Bool)

(assert (=> b!100456 m!111277))

(declare-fun m!111279 () Bool)

(assert (=> b!100456 m!111279))

(assert (=> b!100456 m!111237))

(declare-fun m!111281 () Bool)

(assert (=> b!100456 m!111281))

(declare-fun m!111283 () Bool)

(assert (=> b!100456 m!111283))

(assert (=> b!100456 m!111273))

(declare-fun m!111285 () Bool)

(assert (=> b!100456 m!111285))

(assert (=> b!100456 m!111265))

(declare-fun m!111287 () Bool)

(assert (=> b!100456 m!111287))

(declare-fun m!111289 () Bool)

(assert (=> b!100456 m!111289))

(assert (=> b!100456 m!111287))

(declare-fun m!111291 () Bool)

(assert (=> b!100456 m!111291))

(assert (=> b!100456 m!111249))

(declare-fun m!111293 () Bool)

(assert (=> b!100456 m!111293))

(declare-fun m!111295 () Bool)

(assert (=> bm!10345 m!111295))

(assert (=> d!26791 d!27237))

(declare-fun d!27239 () Bool)

(declare-fun res!50403 () Bool)

(declare-fun e!65425 () Bool)

(assert (=> d!27239 (=> res!50403 e!65425)))

(assert (=> d!27239 (= res!50403 (and ((_ is Cons!1611) (toList!794 call!10208)) (= (_1!1193 (h!2206 (toList!794 call!10208))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (=> d!27239 (= (containsKey!154 (toList!794 call!10208) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) e!65425)))

(declare-fun b!100470 () Bool)

(declare-fun e!65426 () Bool)

(assert (=> b!100470 (= e!65425 e!65426)))

(declare-fun res!50404 () Bool)

(assert (=> b!100470 (=> (not res!50404) (not e!65426))))

(assert (=> b!100470 (= res!50404 (and (or (not ((_ is Cons!1611) (toList!794 call!10208))) (bvsle (_1!1193 (h!2206 (toList!794 call!10208))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))) ((_ is Cons!1611) (toList!794 call!10208)) (bvslt (_1!1193 (h!2206 (toList!794 call!10208))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(declare-fun b!100471 () Bool)

(assert (=> b!100471 (= e!65426 (containsKey!154 (t!5597 (toList!794 call!10208)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!27239 (not res!50403)) b!100470))

(assert (= (and b!100470 res!50404) b!100471))

(assert (=> b!100471 m!109089))

(declare-fun m!111297 () Bool)

(assert (=> b!100471 m!111297))

(assert (=> d!26823 d!27239))

(assert (=> bm!10243 d!26729))

(declare-fun d!27241 () Bool)

(declare-fun e!65427 () Bool)

(assert (=> d!27241 e!65427))

(declare-fun res!50405 () Bool)

(assert (=> d!27241 (=> res!50405 e!65427)))

(declare-fun lt!50810 () Bool)

(assert (=> d!27241 (= res!50405 (not lt!50810))))

(declare-fun lt!50812 () Bool)

(assert (=> d!27241 (= lt!50810 lt!50812)))

(declare-fun lt!50809 () Unit!3031)

(declare-fun e!65428 () Unit!3031)

(assert (=> d!27241 (= lt!50809 e!65428)))

(declare-fun c!17251 () Bool)

(assert (=> d!27241 (= c!17251 lt!50812)))

(assert (=> d!27241 (= lt!50812 (containsKey!154 (toList!794 lt!50232) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!27241 (= (contains!810 lt!50232 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!50810)))

(declare-fun b!100472 () Bool)

(declare-fun lt!50811 () Unit!3031)

(assert (=> b!100472 (= e!65428 lt!50811)))

(assert (=> b!100472 (= lt!50811 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50232) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!100472 (isDefined!104 (getValueByKey!150 (toList!794 lt!50232) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!100473 () Bool)

(declare-fun Unit!3078 () Unit!3031)

(assert (=> b!100473 (= e!65428 Unit!3078)))

(declare-fun b!100474 () Bool)

(assert (=> b!100474 (= e!65427 (isDefined!104 (getValueByKey!150 (toList!794 lt!50232) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!27241 c!17251) b!100472))

(assert (= (and d!27241 (not c!17251)) b!100473))

(assert (= (and d!27241 (not res!50405)) b!100474))

(assert (=> d!27241 m!109187))

(declare-fun m!111299 () Bool)

(assert (=> d!27241 m!111299))

(assert (=> b!100472 m!109187))

(declare-fun m!111301 () Bool)

(assert (=> b!100472 m!111301))

(assert (=> b!100472 m!109187))

(declare-fun m!111303 () Bool)

(assert (=> b!100472 m!111303))

(assert (=> b!100472 m!111303))

(declare-fun m!111305 () Bool)

(assert (=> b!100472 m!111305))

(assert (=> b!100474 m!109187))

(assert (=> b!100474 m!111303))

(assert (=> b!100474 m!111303))

(assert (=> b!100474 m!111305))

(assert (=> b!99616 d!27241))

(declare-fun d!27243 () Bool)

(declare-fun e!65429 () Bool)

(assert (=> d!27243 e!65429))

(declare-fun res!50406 () Bool)

(assert (=> d!27243 (=> res!50406 e!65429)))

(declare-fun lt!50814 () Bool)

(assert (=> d!27243 (= res!50406 (not lt!50814))))

(declare-fun lt!50816 () Bool)

(assert (=> d!27243 (= lt!50814 lt!50816)))

(declare-fun lt!50813 () Unit!3031)

(declare-fun e!65430 () Unit!3031)

(assert (=> d!27243 (= lt!50813 e!65430)))

(declare-fun c!17252 () Bool)

(assert (=> d!27243 (= c!17252 lt!50816)))

(assert (=> d!27243 (= lt!50816 (containsKey!154 (toList!794 lt!50208) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!27243 (= (contains!810 lt!50208 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50814)))

(declare-fun b!100475 () Bool)

(declare-fun lt!50815 () Unit!3031)

(assert (=> b!100475 (= e!65430 lt!50815)))

(assert (=> b!100475 (= lt!50815 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50208) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!100475 (isDefined!104 (getValueByKey!150 (toList!794 lt!50208) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100476 () Bool)

(declare-fun Unit!3079 () Unit!3031)

(assert (=> b!100476 (= e!65430 Unit!3079)))

(declare-fun b!100477 () Bool)

(assert (=> b!100477 (= e!65429 (isDefined!104 (getValueByKey!150 (toList!794 lt!50208) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!27243 c!17252) b!100475))

(assert (= (and d!27243 (not c!17252)) b!100476))

(assert (= (and d!27243 (not res!50406)) b!100477))

(declare-fun m!111307 () Bool)

(assert (=> d!27243 m!111307))

(declare-fun m!111309 () Bool)

(assert (=> b!100475 m!111309))

(assert (=> b!100475 m!109505))

(assert (=> b!100475 m!109505))

(declare-fun m!111311 () Bool)

(assert (=> b!100475 m!111311))

(assert (=> b!100477 m!109505))

(assert (=> b!100477 m!109505))

(assert (=> b!100477 m!111311))

(assert (=> d!26725 d!27243))

(declare-fun b!100479 () Bool)

(declare-fun e!65431 () Option!156)

(declare-fun e!65432 () Option!156)

(assert (=> b!100479 (= e!65431 e!65432)))

(declare-fun c!17254 () Bool)

(assert (=> b!100479 (= c!17254 (and ((_ is Cons!1611) lt!50210) (not (= (_1!1193 (h!2206 lt!50210)) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun d!27245 () Bool)

(declare-fun c!17253 () Bool)

(assert (=> d!27245 (= c!17253 (and ((_ is Cons!1611) lt!50210) (= (_1!1193 (h!2206 lt!50210)) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!27245 (= (getValueByKey!150 lt!50210 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!65431)))

(declare-fun b!100481 () Bool)

(assert (=> b!100481 (= e!65432 None!154)))

(declare-fun b!100478 () Bool)

(assert (=> b!100478 (= e!65431 (Some!155 (_2!1193 (h!2206 lt!50210))))))

(declare-fun b!100480 () Bool)

(assert (=> b!100480 (= e!65432 (getValueByKey!150 (t!5597 lt!50210) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!27245 c!17253) b!100478))

(assert (= (and d!27245 (not c!17253)) b!100479))

(assert (= (and b!100479 c!17254) b!100480))

(assert (= (and b!100479 (not c!17254)) b!100481))

(declare-fun m!111313 () Bool)

(assert (=> b!100480 m!111313))

(assert (=> d!26725 d!27245))

(declare-fun d!27247 () Bool)

(assert (=> d!27247 (= (getValueByKey!150 lt!50210 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!155 (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!50817 () Unit!3031)

(assert (=> d!27247 (= lt!50817 (choose!620 lt!50210 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!65433 () Bool)

(assert (=> d!27247 e!65433))

(declare-fun res!50407 () Bool)

(assert (=> d!27247 (=> (not res!50407) (not e!65433))))

(assert (=> d!27247 (= res!50407 (isStrictlySorted!300 lt!50210))))

(assert (=> d!27247 (= (lemmaContainsTupThenGetReturnValue!68 lt!50210 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50817)))

(declare-fun b!100482 () Bool)

(declare-fun res!50408 () Bool)

(assert (=> b!100482 (=> (not res!50408) (not e!65433))))

(assert (=> b!100482 (= res!50408 (containsKey!154 lt!50210 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100483 () Bool)

(assert (=> b!100483 (= e!65433 (contains!812 lt!50210 (tuple2!2367 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!27247 res!50407) b!100482))

(assert (= (and b!100482 res!50408) b!100483))

(assert (=> d!27247 m!109499))

(declare-fun m!111315 () Bool)

(assert (=> d!27247 m!111315))

(declare-fun m!111317 () Bool)

(assert (=> d!27247 m!111317))

(declare-fun m!111319 () Bool)

(assert (=> b!100482 m!111319))

(declare-fun m!111321 () Bool)

(assert (=> b!100483 m!111321))

(assert (=> d!26725 d!27247))

(declare-fun b!100484 () Bool)

(declare-fun e!65435 () List!1615)

(declare-fun e!65437 () List!1615)

(assert (=> b!100484 (= e!65435 e!65437)))

(declare-fun c!17258 () Bool)

(assert (=> b!100484 (= c!17258 (and ((_ is Cons!1611) (toList!794 e!64782)) (= (_1!1193 (h!2206 (toList!794 e!64782))) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!100485 () Bool)

(declare-fun e!65436 () List!1615)

(assert (=> b!100485 (= e!65436 (insertStrictlySorted!70 (t!5597 (toList!794 e!64782)) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100486 () Bool)

(declare-fun call!10353 () List!1615)

(assert (=> b!100486 (= e!65437 call!10353)))

(declare-fun bm!10351 () Bool)

(declare-fun call!10355 () List!1615)

(declare-fun c!17257 () Bool)

(assert (=> bm!10351 (= call!10355 ($colon$colon!78 e!65436 (ite c!17257 (h!2206 (toList!794 e!64782)) (tuple2!2367 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!17255 () Bool)

(assert (=> bm!10351 (= c!17255 c!17257)))

(declare-fun b!100487 () Bool)

(declare-fun e!65434 () List!1615)

(declare-fun call!10354 () List!1615)

(assert (=> b!100487 (= e!65434 call!10354)))

(declare-fun lt!50818 () List!1615)

(declare-fun e!65438 () Bool)

(declare-fun b!100488 () Bool)

(assert (=> b!100488 (= e!65438 (contains!812 lt!50818 (tuple2!2367 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!100489 () Bool)

(declare-fun res!50410 () Bool)

(assert (=> b!100489 (=> (not res!50410) (not e!65438))))

(assert (=> b!100489 (= res!50410 (containsKey!154 lt!50818 (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun c!17256 () Bool)

(declare-fun b!100490 () Bool)

(assert (=> b!100490 (= c!17256 (and ((_ is Cons!1611) (toList!794 e!64782)) (bvsgt (_1!1193 (h!2206 (toList!794 e!64782))) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!100490 (= e!65437 e!65434)))

(declare-fun b!100491 () Bool)

(assert (=> b!100491 (= e!65434 call!10354)))

(declare-fun b!100492 () Bool)

(assert (=> b!100492 (= e!65435 call!10355)))

(declare-fun b!100493 () Bool)

(assert (=> b!100493 (= e!65436 (ite c!17258 (t!5597 (toList!794 e!64782)) (ite c!17256 (Cons!1611 (h!2206 (toList!794 e!64782)) (t!5597 (toList!794 e!64782))) Nil!1612)))))

(declare-fun bm!10352 () Bool)

(assert (=> bm!10352 (= call!10353 call!10355)))

(declare-fun d!27249 () Bool)

(assert (=> d!27249 e!65438))

(declare-fun res!50409 () Bool)

(assert (=> d!27249 (=> (not res!50409) (not e!65438))))

(assert (=> d!27249 (= res!50409 (isStrictlySorted!300 lt!50818))))

(assert (=> d!27249 (= lt!50818 e!65435)))

(assert (=> d!27249 (= c!17257 (and ((_ is Cons!1611) (toList!794 e!64782)) (bvslt (_1!1193 (h!2206 (toList!794 e!64782))) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!27249 (isStrictlySorted!300 (toList!794 e!64782))))

(assert (=> d!27249 (= (insertStrictlySorted!70 (toList!794 e!64782) (_1!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1193 (ite c!16967 (ite c!16973 (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!50818)))

(declare-fun bm!10350 () Bool)

(assert (=> bm!10350 (= call!10354 call!10353)))

(assert (= (and d!27249 c!17257) b!100492))

(assert (= (and d!27249 (not c!17257)) b!100484))

(assert (= (and b!100484 c!17258) b!100486))

(assert (= (and b!100484 (not c!17258)) b!100490))

(assert (= (and b!100490 c!17256) b!100487))

(assert (= (and b!100490 (not c!17256)) b!100491))

(assert (= (or b!100487 b!100491) bm!10350))

(assert (= (or b!100486 bm!10350) bm!10352))

(assert (= (or b!100492 bm!10352) bm!10351))

(assert (= (and bm!10351 c!17255) b!100485))

(assert (= (and bm!10351 (not c!17255)) b!100493))

(assert (= (and d!27249 res!50409) b!100489))

(assert (= (and b!100489 res!50410) b!100488))

(declare-fun m!111323 () Bool)

(assert (=> b!100489 m!111323))

(declare-fun m!111325 () Bool)

(assert (=> bm!10351 m!111325))

(declare-fun m!111327 () Bool)

(assert (=> b!100488 m!111327))

(declare-fun m!111329 () Bool)

(assert (=> b!100485 m!111329))

(declare-fun m!111331 () Bool)

(assert (=> d!27249 m!111331))

(declare-fun m!111333 () Bool)

(assert (=> d!27249 m!111333))

(assert (=> d!26725 d!27249))

(assert (=> d!26765 d!26753))

(assert (=> d!26765 d!26777))

(declare-fun d!27251 () Bool)

(assert (=> d!27251 (= (apply!93 (+!139 lt!49949 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49963) (apply!93 lt!49949 lt!49963))))

(assert (=> d!27251 true))

(declare-fun _$34!871 () Unit!3031)

(assert (=> d!27251 (= (choose!617 lt!49949 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49963) _$34!871)))

(declare-fun bs!4164 () Bool)

(assert (= bs!4164 d!27251))

(assert (=> bs!4164 m!109223))

(assert (=> bs!4164 m!109223))

(assert (=> bs!4164 m!109225))

(assert (=> bs!4164 m!109251))

(assert (=> d!26765 d!27251))

(declare-fun d!27253 () Bool)

(declare-fun e!65439 () Bool)

(assert (=> d!27253 e!65439))

(declare-fun res!50411 () Bool)

(assert (=> d!27253 (=> res!50411 e!65439)))

(declare-fun lt!50820 () Bool)

(assert (=> d!27253 (= res!50411 (not lt!50820))))

(declare-fun lt!50822 () Bool)

(assert (=> d!27253 (= lt!50820 lt!50822)))

(declare-fun lt!50819 () Unit!3031)

(declare-fun e!65440 () Unit!3031)

(assert (=> d!27253 (= lt!50819 e!65440)))

(declare-fun c!17259 () Bool)

(assert (=> d!27253 (= c!17259 lt!50822)))

(assert (=> d!27253 (= lt!50822 (containsKey!154 (toList!794 lt!49949) lt!49963))))

(assert (=> d!27253 (= (contains!810 lt!49949 lt!49963) lt!50820)))

(declare-fun b!100495 () Bool)

(declare-fun lt!50821 () Unit!3031)

(assert (=> b!100495 (= e!65440 lt!50821)))

(assert (=> b!100495 (= lt!50821 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49949) lt!49963))))

(assert (=> b!100495 (isDefined!104 (getValueByKey!150 (toList!794 lt!49949) lt!49963))))

(declare-fun b!100496 () Bool)

(declare-fun Unit!3080 () Unit!3031)

(assert (=> b!100496 (= e!65440 Unit!3080)))

(declare-fun b!100497 () Bool)

(assert (=> b!100497 (= e!65439 (isDefined!104 (getValueByKey!150 (toList!794 lt!49949) lt!49963)))))

(assert (= (and d!27253 c!17259) b!100495))

(assert (= (and d!27253 (not c!17259)) b!100496))

(assert (= (and d!27253 (not res!50411)) b!100497))

(declare-fun m!111335 () Bool)

(assert (=> d!27253 m!111335))

(declare-fun m!111337 () Bool)

(assert (=> b!100495 m!111337))

(assert (=> b!100495 m!109639))

(assert (=> b!100495 m!109639))

(declare-fun m!111339 () Bool)

(assert (=> b!100495 m!111339))

(assert (=> b!100497 m!109639))

(assert (=> b!100497 m!109639))

(assert (=> b!100497 m!111339))

(assert (=> d!26765 d!27253))

(assert (=> d!26765 d!26773))

(assert (=> b!99758 d!26919))

(declare-fun b!100498 () Bool)

(declare-fun e!65442 () (_ BitVec 32))

(declare-fun e!65441 () (_ BitVec 32))

(assert (=> b!100498 (= e!65442 e!65441)))

(declare-fun c!17260 () Bool)

(assert (=> b!100498 (= c!17260 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (_2!1192 lt!50030))) #b00000000000000000000000000000000)))))

(declare-fun b!100499 () Bool)

(assert (=> b!100499 (= e!65442 #b00000000000000000000000000000000)))

(declare-fun d!27255 () Bool)

(declare-fun lt!50823 () (_ BitVec 32))

(assert (=> d!27255 (and (bvsge lt!50823 #b00000000000000000000000000000000) (bvsle lt!50823 (bvsub (size!2271 (_keys!4196 (_2!1192 lt!50030))) #b00000000000000000000000000000000)))))

(assert (=> d!27255 (= lt!50823 e!65442)))

(declare-fun c!17261 () Bool)

(assert (=> d!27255 (= c!17261 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 (_2!1192 lt!50030)))))))

(assert (=> d!27255 (and (bvsle #b00000000000000000000000000000000 (size!2271 (_keys!4196 (_2!1192 lt!50030)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2271 (_keys!4196 (_2!1192 lt!50030))) (size!2271 (_keys!4196 (_2!1192 lt!50030)))))))

(assert (=> d!27255 (= (arrayCountValidKeys!0 (_keys!4196 (_2!1192 lt!50030)) #b00000000000000000000000000000000 (size!2271 (_keys!4196 (_2!1192 lt!50030)))) lt!50823)))

(declare-fun b!100500 () Bool)

(declare-fun call!10356 () (_ BitVec 32))

(assert (=> b!100500 (= e!65441 call!10356)))

(declare-fun b!100501 () Bool)

(assert (=> b!100501 (= e!65441 (bvadd #b00000000000000000000000000000001 call!10356))))

(declare-fun bm!10353 () Bool)

(assert (=> bm!10353 (= call!10356 (arrayCountValidKeys!0 (_keys!4196 (_2!1192 lt!50030)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 (_keys!4196 (_2!1192 lt!50030)))))))

(assert (= (and d!27255 c!17261) b!100499))

(assert (= (and d!27255 (not c!17261)) b!100498))

(assert (= (and b!100498 c!17260) b!100501))

(assert (= (and b!100498 (not c!17260)) b!100500))

(assert (= (or b!100501 b!100500) bm!10353))

(assert (=> b!100498 m!109897))

(assert (=> b!100498 m!109897))

(assert (=> b!100498 m!109899))

(declare-fun m!111341 () Bool)

(assert (=> bm!10353 m!111341))

(assert (=> b!99790 d!27255))

(declare-fun b!100503 () Bool)

(declare-fun e!65443 () Option!156)

(declare-fun e!65444 () Option!156)

(assert (=> b!100503 (= e!65443 e!65444)))

(declare-fun c!17263 () Bool)

(assert (=> b!100503 (= c!17263 (and ((_ is Cons!1611) (t!5597 (toList!794 lt!49862))) (not (= (_1!1193 (h!2206 (t!5597 (toList!794 lt!49862)))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))))

(declare-fun d!27257 () Bool)

(declare-fun c!17262 () Bool)

(assert (=> d!27257 (= c!17262 (and ((_ is Cons!1611) (t!5597 (toList!794 lt!49862))) (= (_1!1193 (h!2206 (t!5597 (toList!794 lt!49862)))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (=> d!27257 (= (getValueByKey!150 (t!5597 (toList!794 lt!49862)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) e!65443)))

(declare-fun b!100505 () Bool)

(assert (=> b!100505 (= e!65444 None!154)))

(declare-fun b!100502 () Bool)

(assert (=> b!100502 (= e!65443 (Some!155 (_2!1193 (h!2206 (t!5597 (toList!794 lt!49862))))))))

(declare-fun b!100504 () Bool)

(assert (=> b!100504 (= e!65444 (getValueByKey!150 (t!5597 (t!5597 (toList!794 lt!49862))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (= (and d!27257 c!17262) b!100502))

(assert (= (and d!27257 (not c!17262)) b!100503))

(assert (= (and b!100503 c!17263) b!100504))

(assert (= (and b!100503 (not c!17263)) b!100505))

(assert (=> b!100504 m!109089))

(declare-fun m!111343 () Bool)

(assert (=> b!100504 m!111343))

(assert (=> b!99672 d!27257))

(declare-fun d!27259 () Bool)

(declare-fun lt!50824 () Bool)

(assert (=> d!27259 (= lt!50824 (select (content!103 (toList!794 lt!50249)) (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun e!65445 () Bool)

(assert (=> d!27259 (= lt!50824 e!65445)))

(declare-fun res!50412 () Bool)

(assert (=> d!27259 (=> (not res!50412) (not e!65445))))

(assert (=> d!27259 (= res!50412 ((_ is Cons!1611) (toList!794 lt!50249)))))

(assert (=> d!27259 (= (contains!812 (toList!794 lt!50249) (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!50824)))

(declare-fun b!100506 () Bool)

(declare-fun e!65446 () Bool)

(assert (=> b!100506 (= e!65445 e!65446)))

(declare-fun res!50413 () Bool)

(assert (=> b!100506 (=> res!50413 e!65446)))

(assert (=> b!100506 (= res!50413 (= (h!2206 (toList!794 lt!50249)) (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(declare-fun b!100507 () Bool)

(assert (=> b!100507 (= e!65446 (contains!812 (t!5597 (toList!794 lt!50249)) (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))

(assert (= (and d!27259 res!50412) b!100506))

(assert (= (and b!100506 (not res!50413)) b!100507))

(declare-fun m!111345 () Bool)

(assert (=> d!27259 m!111345))

(declare-fun m!111347 () Bool)

(assert (=> d!27259 m!111347))

(declare-fun m!111349 () Bool)

(assert (=> b!100507 m!111349))

(assert (=> b!99645 d!27259))

(declare-fun d!27261 () Bool)

(declare-fun e!65447 () Bool)

(assert (=> d!27261 e!65447))

(declare-fun res!50414 () Bool)

(assert (=> d!27261 (=> res!50414 e!65447)))

(declare-fun lt!50826 () Bool)

(assert (=> d!27261 (= res!50414 (not lt!50826))))

(declare-fun lt!50828 () Bool)

(assert (=> d!27261 (= lt!50826 lt!50828)))

(declare-fun lt!50825 () Unit!3031)

(declare-fun e!65448 () Unit!3031)

(assert (=> d!27261 (= lt!50825 e!65448)))

(declare-fun c!17264 () Bool)

(assert (=> d!27261 (= c!17264 lt!50828)))

(assert (=> d!27261 (= lt!50828 (containsKey!154 (toList!794 lt!50321) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!27261 (= (contains!810 lt!50321 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50826)))

(declare-fun b!100508 () Bool)

(declare-fun lt!50827 () Unit!3031)

(assert (=> b!100508 (= e!65448 lt!50827)))

(assert (=> b!100508 (= lt!50827 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50321) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> b!100508 (isDefined!104 (getValueByKey!150 (toList!794 lt!50321) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100509 () Bool)

(declare-fun Unit!3081 () Unit!3031)

(assert (=> b!100509 (= e!65448 Unit!3081)))

(declare-fun b!100510 () Bool)

(assert (=> b!100510 (= e!65447 (isDefined!104 (getValueByKey!150 (toList!794 lt!50321) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!27261 c!17264) b!100508))

(assert (= (and d!27261 (not c!17264)) b!100509))

(assert (= (and d!27261 (not res!50414)) b!100510))

(declare-fun m!111351 () Bool)

(assert (=> d!27261 m!111351))

(declare-fun m!111353 () Bool)

(assert (=> b!100508 m!111353))

(assert (=> b!100508 m!109773))

(assert (=> b!100508 m!109773))

(declare-fun m!111355 () Bool)

(assert (=> b!100508 m!111355))

(assert (=> b!100510 m!109773))

(assert (=> b!100510 m!109773))

(assert (=> b!100510 m!111355))

(assert (=> d!26805 d!27261))

(declare-fun b!100512 () Bool)

(declare-fun e!65449 () Option!156)

(declare-fun e!65450 () Option!156)

(assert (=> b!100512 (= e!65449 e!65450)))

(declare-fun c!17266 () Bool)

(assert (=> b!100512 (= c!17266 (and ((_ is Cons!1611) lt!50323) (not (= (_1!1193 (h!2206 lt!50323)) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun d!27263 () Bool)

(declare-fun c!17265 () Bool)

(assert (=> d!27263 (= c!17265 (and ((_ is Cons!1611) lt!50323) (= (_1!1193 (h!2206 lt!50323)) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27263 (= (getValueByKey!150 lt!50323 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) e!65449)))

(declare-fun b!100514 () Bool)

(assert (=> b!100514 (= e!65450 None!154)))

(declare-fun b!100511 () Bool)

(assert (=> b!100511 (= e!65449 (Some!155 (_2!1193 (h!2206 lt!50323))))))

(declare-fun b!100513 () Bool)

(assert (=> b!100513 (= e!65450 (getValueByKey!150 (t!5597 lt!50323) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!27263 c!17265) b!100511))

(assert (= (and d!27263 (not c!17265)) b!100512))

(assert (= (and b!100512 c!17266) b!100513))

(assert (= (and b!100512 (not c!17266)) b!100514))

(declare-fun m!111357 () Bool)

(assert (=> b!100513 m!111357))

(assert (=> d!26805 d!27263))

(declare-fun d!27265 () Bool)

(assert (=> d!27265 (= (getValueByKey!150 lt!50323 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun lt!50829 () Unit!3031)

(assert (=> d!27265 (= lt!50829 (choose!620 lt!50323 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun e!65451 () Bool)

(assert (=> d!27265 e!65451))

(declare-fun res!50415 () Bool)

(assert (=> d!27265 (=> (not res!50415) (not e!65451))))

(assert (=> d!27265 (= res!50415 (isStrictlySorted!300 lt!50323))))

(assert (=> d!27265 (= (lemmaContainsTupThenGetReturnValue!68 lt!50323 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50829)))

(declare-fun b!100515 () Bool)

(declare-fun res!50416 () Bool)

(assert (=> b!100515 (=> (not res!50416) (not e!65451))))

(assert (=> b!100515 (= res!50416 (containsKey!154 lt!50323 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100516 () Bool)

(assert (=> b!100516 (= e!65451 (contains!812 lt!50323 (tuple2!2367 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!27265 res!50415) b!100515))

(assert (= (and b!100515 res!50416) b!100516))

(assert (=> d!27265 m!109767))

(declare-fun m!111359 () Bool)

(assert (=> d!27265 m!111359))

(declare-fun m!111361 () Bool)

(assert (=> d!27265 m!111361))

(declare-fun m!111363 () Bool)

(assert (=> b!100515 m!111363))

(declare-fun m!111365 () Bool)

(assert (=> b!100516 m!111365))

(assert (=> d!26805 d!27265))

(declare-fun b!100517 () Bool)

(declare-fun e!65453 () List!1615)

(declare-fun e!65455 () List!1615)

(assert (=> b!100517 (= e!65453 e!65455)))

(declare-fun c!17270 () Bool)

(assert (=> b!100517 (= c!17270 (and ((_ is Cons!1611) (toList!794 call!10146)) (= (_1!1193 (h!2206 (toList!794 call!10146))) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!100518 () Bool)

(declare-fun e!65454 () List!1615)

(assert (=> b!100518 (= e!65454 (insertStrictlySorted!70 (t!5597 (toList!794 call!10146)) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100519 () Bool)

(declare-fun call!10357 () List!1615)

(assert (=> b!100519 (= e!65455 call!10357)))

(declare-fun c!17269 () Bool)

(declare-fun call!10359 () List!1615)

(declare-fun bm!10355 () Bool)

(assert (=> bm!10355 (= call!10359 ($colon$colon!78 e!65454 (ite c!17269 (h!2206 (toList!794 call!10146)) (tuple2!2367 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun c!17267 () Bool)

(assert (=> bm!10355 (= c!17267 c!17269)))

(declare-fun b!100520 () Bool)

(declare-fun e!65452 () List!1615)

(declare-fun call!10358 () List!1615)

(assert (=> b!100520 (= e!65452 call!10358)))

(declare-fun b!100521 () Bool)

(declare-fun e!65456 () Bool)

(declare-fun lt!50830 () List!1615)

(assert (=> b!100521 (= e!65456 (contains!812 lt!50830 (tuple2!2367 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!100522 () Bool)

(declare-fun res!50418 () Bool)

(assert (=> b!100522 (=> (not res!50418) (not e!65456))))

(assert (=> b!100522 (= res!50418 (containsKey!154 lt!50830 (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100523 () Bool)

(declare-fun c!17268 () Bool)

(assert (=> b!100523 (= c!17268 (and ((_ is Cons!1611) (toList!794 call!10146)) (bvsgt (_1!1193 (h!2206 (toList!794 call!10146))) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> b!100523 (= e!65455 e!65452)))

(declare-fun b!100524 () Bool)

(assert (=> b!100524 (= e!65452 call!10358)))

(declare-fun b!100525 () Bool)

(assert (=> b!100525 (= e!65453 call!10359)))

(declare-fun b!100526 () Bool)

(assert (=> b!100526 (= e!65454 (ite c!17270 (t!5597 (toList!794 call!10146)) (ite c!17268 (Cons!1611 (h!2206 (toList!794 call!10146)) (t!5597 (toList!794 call!10146))) Nil!1612)))))

(declare-fun bm!10356 () Bool)

(assert (=> bm!10356 (= call!10357 call!10359)))

(declare-fun d!27267 () Bool)

(assert (=> d!27267 e!65456))

(declare-fun res!50417 () Bool)

(assert (=> d!27267 (=> (not res!50417) (not e!65456))))

(assert (=> d!27267 (= res!50417 (isStrictlySorted!300 lt!50830))))

(assert (=> d!27267 (= lt!50830 e!65453)))

(assert (=> d!27267 (= c!17269 (and ((_ is Cons!1611) (toList!794 call!10146)) (bvslt (_1!1193 (h!2206 (toList!794 call!10146))) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27267 (isStrictlySorted!300 (toList!794 call!10146))))

(assert (=> d!27267 (= (insertStrictlySorted!70 (toList!794 call!10146) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50830)))

(declare-fun bm!10354 () Bool)

(assert (=> bm!10354 (= call!10358 call!10357)))

(assert (= (and d!27267 c!17269) b!100525))

(assert (= (and d!27267 (not c!17269)) b!100517))

(assert (= (and b!100517 c!17270) b!100519))

(assert (= (and b!100517 (not c!17270)) b!100523))

(assert (= (and b!100523 c!17268) b!100520))

(assert (= (and b!100523 (not c!17268)) b!100524))

(assert (= (or b!100520 b!100524) bm!10354))

(assert (= (or b!100519 bm!10354) bm!10356))

(assert (= (or b!100525 bm!10356) bm!10355))

(assert (= (and bm!10355 c!17267) b!100518))

(assert (= (and bm!10355 (not c!17267)) b!100526))

(assert (= (and d!27267 res!50417) b!100522))

(assert (= (and b!100522 res!50418) b!100521))

(declare-fun m!111367 () Bool)

(assert (=> b!100522 m!111367))

(declare-fun m!111369 () Bool)

(assert (=> bm!10355 m!111369))

(declare-fun m!111371 () Bool)

(assert (=> b!100521 m!111371))

(declare-fun m!111373 () Bool)

(assert (=> b!100518 m!111373))

(declare-fun m!111375 () Bool)

(assert (=> d!27267 m!111375))

(declare-fun m!111377 () Bool)

(assert (=> d!27267 m!111377))

(assert (=> d!26805 d!27267))

(declare-fun d!27269 () Bool)

(declare-fun e!65457 () Bool)

(assert (=> d!27269 e!65457))

(declare-fun res!50419 () Bool)

(assert (=> d!27269 (=> (not res!50419) (not e!65457))))

(declare-fun lt!50832 () ListLongMap!1557)

(assert (=> d!27269 (= res!50419 (contains!810 lt!50832 (_1!1193 (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(declare-fun lt!50834 () List!1615)

(assert (=> d!27269 (= lt!50832 (ListLongMap!1558 lt!50834))))

(declare-fun lt!50833 () Unit!3031)

(declare-fun lt!50831 () Unit!3031)

(assert (=> d!27269 (= lt!50833 lt!50831)))

(assert (=> d!27269 (= (getValueByKey!150 lt!50834 (_1!1193 (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))) (Some!155 (_2!1193 (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(assert (=> d!27269 (= lt!50831 (lemmaContainsTupThenGetReturnValue!68 lt!50834 (_1!1193 (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (_2!1193 (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(assert (=> d!27269 (= lt!50834 (insertStrictlySorted!70 (toList!794 (ite c!17060 call!10264 (ite c!17063 call!10262 call!10263))) (_1!1193 (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) (_2!1193 (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))))))

(assert (=> d!27269 (= (+!139 (ite c!17060 call!10264 (ite c!17063 call!10262 call!10263)) (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))) lt!50832)))

(declare-fun b!100527 () Bool)

(declare-fun res!50420 () Bool)

(assert (=> b!100527 (=> (not res!50420) (not e!65457))))

(assert (=> b!100527 (= res!50420 (= (getValueByKey!150 (toList!794 lt!50832) (_1!1193 (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16)))))) (Some!155 (_2!1193 (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))))

(declare-fun b!100528 () Bool)

(assert (=> b!100528 (= e!65457 (contains!812 (toList!794 lt!50832) (ite (or c!17060 c!17063) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 newMap!16)) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16967 (ite c!16973 (minValue!2383 newMap!16) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2383 newMap!16))))))))

(assert (= (and d!27269 res!50419) b!100527))

(assert (= (and b!100527 res!50420) b!100528))

(declare-fun m!111379 () Bool)

(assert (=> d!27269 m!111379))

(declare-fun m!111381 () Bool)

(assert (=> d!27269 m!111381))

(declare-fun m!111383 () Bool)

(assert (=> d!27269 m!111383))

(declare-fun m!111385 () Bool)

(assert (=> d!27269 m!111385))

(declare-fun m!111387 () Bool)

(assert (=> b!100527 m!111387))

(declare-fun m!111389 () Bool)

(assert (=> b!100528 m!111389))

(assert (=> bm!10261 d!27269))

(assert (=> bm!10257 d!27103))

(assert (=> b!99458 d!27063))

(assert (=> b!99458 d!27065))

(declare-fun b!100529 () Bool)

(declare-fun e!65461 () Bool)

(declare-fun e!65458 () Bool)

(assert (=> b!100529 (= e!65461 e!65458)))

(declare-fun c!17271 () Bool)

(assert (=> b!100529 (= c!17271 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!100530 () Bool)

(declare-fun e!65459 () Bool)

(assert (=> b!100530 (= e!65459 (contains!811 (ite c!17023 (Cons!1612 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) Nil!1613) Nil!1613) (select (arr!2020 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!10357 () Bool)

(declare-fun call!10360 () Bool)

(assert (=> bm!10357 (= call!10360 (arrayNoDuplicates!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!17271 (Cons!1612 (select (arr!2020 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!17023 (Cons!1612 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) Nil!1613) Nil!1613)) (ite c!17023 (Cons!1612 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) Nil!1613) Nil!1613))))))

(declare-fun b!100531 () Bool)

(declare-fun e!65460 () Bool)

(assert (=> b!100531 (= e!65460 e!65461)))

(declare-fun res!50422 () Bool)

(assert (=> b!100531 (=> (not res!50422) (not e!65461))))

(assert (=> b!100531 (= res!50422 (not e!65459))))

(declare-fun res!50421 () Bool)

(assert (=> b!100531 (=> (not res!50421) (not e!65459))))

(assert (=> b!100531 (= res!50421 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!100532 () Bool)

(assert (=> b!100532 (= e!65458 call!10360)))

(declare-fun d!27271 () Bool)

(declare-fun res!50423 () Bool)

(assert (=> d!27271 (=> res!50423 e!65460)))

(assert (=> d!27271 (= res!50423 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!27271 (= (arrayNoDuplicates!0 (_keys!4196 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17023 (Cons!1612 (select (arr!2020 (_keys!4196 newMap!16)) #b00000000000000000000000000000000) Nil!1613) Nil!1613)) e!65460)))

(declare-fun b!100533 () Bool)

(assert (=> b!100533 (= e!65458 call!10360)))

(assert (= (and d!27271 (not res!50423)) b!100531))

(assert (= (and b!100531 res!50421) b!100530))

(assert (= (and b!100531 res!50422) b!100529))

(assert (= (and b!100529 c!17271) b!100533))

(assert (= (and b!100529 (not c!17271)) b!100532))

(assert (= (or b!100533 b!100532) bm!10357))

(assert (=> b!100529 m!110387))

(assert (=> b!100529 m!110387))

(assert (=> b!100529 m!110389))

(assert (=> b!100530 m!110387))

(assert (=> b!100530 m!110387))

(declare-fun m!111391 () Bool)

(assert (=> b!100530 m!111391))

(assert (=> bm!10357 m!110387))

(declare-fun m!111393 () Bool)

(assert (=> bm!10357 m!111393))

(assert (=> b!100531 m!110387))

(assert (=> b!100531 m!110387))

(assert (=> b!100531 m!110389))

(assert (=> bm!10247 d!27271))

(declare-fun d!27273 () Bool)

(assert (=> d!27273 (= (content!102 Nil!1613) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!26731 d!27273))

(declare-fun d!27275 () Bool)

(assert (=> d!27275 (= (get!1307 (getValueByKey!150 (toList!794 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49961)) (v!2821 (getValueByKey!150 (toList!794 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49961)))))

(assert (=> d!26757 d!27275))

(declare-fun b!100535 () Bool)

(declare-fun e!65462 () Option!156)

(declare-fun e!65463 () Option!156)

(assert (=> b!100535 (= e!65462 e!65463)))

(declare-fun c!17273 () Bool)

(assert (=> b!100535 (= c!17273 (and ((_ is Cons!1611) (toList!794 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))) (not (= (_1!1193 (h!2206 (toList!794 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))) lt!49961))))))

(declare-fun d!27277 () Bool)

(declare-fun c!17272 () Bool)

(assert (=> d!27277 (= c!17272 (and ((_ is Cons!1611) (toList!794 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))) (= (_1!1193 (h!2206 (toList!794 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))))) lt!49961)))))

(assert (=> d!27277 (= (getValueByKey!150 (toList!794 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!49961) e!65462)))

(declare-fun b!100537 () Bool)

(assert (=> b!100537 (= e!65463 None!154)))

(declare-fun b!100534 () Bool)

(assert (=> b!100534 (= e!65462 (Some!155 (_2!1193 (h!2206 (toList!794 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))))))))

(declare-fun b!100536 () Bool)

(assert (=> b!100536 (= e!65463 (getValueByKey!150 (t!5597 (toList!794 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))))) lt!49961))))

(assert (= (and d!27277 c!17272) b!100534))

(assert (= (and d!27277 (not c!17272)) b!100535))

(assert (= (and b!100535 c!17273) b!100536))

(assert (= (and b!100535 (not c!17273)) b!100537))

(declare-fun m!111395 () Bool)

(assert (=> b!100536 m!111395))

(assert (=> d!26757 d!27277))

(declare-fun d!27279 () Bool)

(declare-fun e!65464 () Bool)

(assert (=> d!27279 e!65464))

(declare-fun res!50424 () Bool)

(assert (=> d!27279 (=> res!50424 e!65464)))

(declare-fun lt!50836 () Bool)

(assert (=> d!27279 (= res!50424 (not lt!50836))))

(declare-fun lt!50838 () Bool)

(assert (=> d!27279 (= lt!50836 lt!50838)))

(declare-fun lt!50835 () Unit!3031)

(declare-fun e!65465 () Unit!3031)

(assert (=> d!27279 (= lt!50835 e!65465)))

(declare-fun c!17274 () Bool)

(assert (=> d!27279 (= c!17274 lt!50838)))

(assert (=> d!27279 (= lt!50838 (containsKey!154 (toList!794 lt!50072) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27279 (= (contains!810 lt!50072 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50836)))

(declare-fun b!100538 () Bool)

(declare-fun lt!50837 () Unit!3031)

(assert (=> b!100538 (= e!65465 lt!50837)))

(assert (=> b!100538 (= lt!50837 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50072) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100538 (isDefined!104 (getValueByKey!150 (toList!794 lt!50072) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100539 () Bool)

(declare-fun Unit!3082 () Unit!3031)

(assert (=> b!100539 (= e!65465 Unit!3082)))

(declare-fun b!100540 () Bool)

(assert (=> b!100540 (= e!65464 (isDefined!104 (getValueByKey!150 (toList!794 lt!50072) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27279 c!17274) b!100538))

(assert (= (and d!27279 (not c!17274)) b!100539))

(assert (= (and d!27279 (not res!50424)) b!100540))

(declare-fun m!111397 () Bool)

(assert (=> d!27279 m!111397))

(declare-fun m!111399 () Bool)

(assert (=> b!100538 m!111399))

(assert (=> b!100538 m!110937))

(assert (=> b!100538 m!110937))

(declare-fun m!111401 () Bool)

(assert (=> b!100538 m!111401))

(assert (=> b!100540 m!110937))

(assert (=> b!100540 m!110937))

(assert (=> b!100540 m!111401))

(assert (=> bm!10221 d!27279))

(declare-fun d!27281 () Bool)

(declare-fun res!50425 () Bool)

(declare-fun e!65466 () Bool)

(assert (=> d!27281 (=> res!50425 e!65466)))

(assert (=> d!27281 (= res!50425 (and ((_ is Cons!1611) (toList!794 e!64798)) (= (_1!1193 (h!2206 (toList!794 e!64798))) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043))))))))

(assert (=> d!27281 (= (containsKey!154 (toList!794 e!64798) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))) e!65466)))

(declare-fun b!100541 () Bool)

(declare-fun e!65467 () Bool)

(assert (=> b!100541 (= e!65466 e!65467)))

(declare-fun res!50426 () Bool)

(assert (=> b!100541 (=> (not res!50426) (not e!65467))))

(assert (=> b!100541 (= res!50426 (and (or (not ((_ is Cons!1611) (toList!794 e!64798))) (bvsle (_1!1193 (h!2206 (toList!794 e!64798))) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043))))) ((_ is Cons!1611) (toList!794 e!64798)) (bvslt (_1!1193 (h!2206 (toList!794 e!64798))) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043))))))))

(declare-fun b!100542 () Bool)

(assert (=> b!100542 (= e!65467 (containsKey!154 (t!5597 (toList!794 e!64798)) (ite c!16969 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))))

(assert (= (and d!27281 (not res!50425)) b!100541))

(assert (= (and b!100541 res!50426) b!100542))

(declare-fun m!111403 () Bool)

(assert (=> b!100542 m!111403))

(assert (=> d!26719 d!27281))

(declare-fun d!27283 () Bool)

(declare-fun e!65468 () Bool)

(assert (=> d!27283 e!65468))

(declare-fun res!50427 () Bool)

(assert (=> d!27283 (=> res!50427 e!65468)))

(declare-fun lt!50840 () Bool)

(assert (=> d!27283 (= res!50427 (not lt!50840))))

(declare-fun lt!50842 () Bool)

(assert (=> d!27283 (= lt!50840 lt!50842)))

(declare-fun lt!50839 () Unit!3031)

(declare-fun e!65469 () Unit!3031)

(assert (=> d!27283 (= lt!50839 e!65469)))

(declare-fun c!17275 () Bool)

(assert (=> d!27283 (= c!17275 lt!50842)))

(assert (=> d!27283 (= lt!50842 (containsKey!154 (toList!794 (map!1259 (_2!1192 lt!50153))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!27283 (= (contains!810 (map!1259 (_2!1192 lt!50153)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)) lt!50840)))

(declare-fun b!100543 () Bool)

(declare-fun lt!50841 () Unit!3031)

(assert (=> b!100543 (= e!65469 lt!50841)))

(assert (=> b!100543 (= lt!50841 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 (map!1259 (_2!1192 lt!50153))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> b!100543 (isDefined!104 (getValueByKey!150 (toList!794 (map!1259 (_2!1192 lt!50153))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(declare-fun b!100544 () Bool)

(declare-fun Unit!3083 () Unit!3031)

(assert (=> b!100544 (= e!65469 Unit!3083)))

(declare-fun b!100545 () Bool)

(assert (=> b!100545 (= e!65468 (isDefined!104 (getValueByKey!150 (toList!794 (map!1259 (_2!1192 lt!50153))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355))))))

(assert (= (and d!27283 c!17275) b!100543))

(assert (= (and d!27283 (not c!17275)) b!100544))

(assert (= (and d!27283 (not res!50427)) b!100545))

(assert (=> d!27283 m!109089))

(declare-fun m!111405 () Bool)

(assert (=> d!27283 m!111405))

(assert (=> b!100543 m!109089))

(declare-fun m!111407 () Bool)

(assert (=> b!100543 m!111407))

(assert (=> b!100543 m!109089))

(declare-fun m!111409 () Bool)

(assert (=> b!100543 m!111409))

(assert (=> b!100543 m!111409))

(declare-fun m!111411 () Bool)

(assert (=> b!100543 m!111411))

(assert (=> b!100545 m!109089))

(assert (=> b!100545 m!111409))

(assert (=> b!100545 m!111409))

(assert (=> b!100545 m!111411))

(assert (=> b!99530 d!27283))

(declare-fun d!27285 () Bool)

(assert (=> d!27285 (= (map!1259 (_2!1192 lt!50153)) (getCurrentListMap!474 (_keys!4196 (_2!1192 lt!50153)) (_values!2485 (_2!1192 lt!50153)) (mask!6609 (_2!1192 lt!50153)) (extraKeys!2319 (_2!1192 lt!50153)) (zeroValue!2383 (_2!1192 lt!50153)) (minValue!2383 (_2!1192 lt!50153)) #b00000000000000000000000000000000 (defaultEntry!2502 (_2!1192 lt!50153))))))

(declare-fun bs!4165 () Bool)

(assert (= bs!4165 d!27285))

(declare-fun m!111413 () Bool)

(assert (=> bs!4165 m!111413))

(assert (=> b!99530 d!27285))

(declare-fun d!27287 () Bool)

(assert (not d!27287))

(assert (=> b!99585 d!27287))

(declare-fun b!100546 () Bool)

(declare-fun e!65470 () Bool)

(declare-fun e!65471 () Bool)

(assert (=> b!100546 (= e!65470 e!65471)))

(declare-fun c!17276 () Bool)

(assert (=> b!100546 (= c!17276 (validKeyInArray!0 (select (arr!2020 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!10358 () Bool)

(declare-fun call!10361 () Bool)

(assert (=> bm!10358 (= call!10361 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(declare-fun b!100547 () Bool)

(declare-fun e!65472 () Bool)

(assert (=> b!100547 (= e!65471 e!65472)))

(declare-fun lt!50845 () (_ BitVec 64))

(assert (=> b!100547 (= lt!50845 (select (arr!2020 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!50844 () Unit!3031)

(assert (=> b!100547 (= lt!50844 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4196 newMap!16) lt!50845 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!100547 (arrayContainsKey!0 (_keys!4196 newMap!16) lt!50845 #b00000000000000000000000000000000)))

(declare-fun lt!50843 () Unit!3031)

(assert (=> b!100547 (= lt!50843 lt!50844)))

(declare-fun res!50428 () Bool)

(assert (=> b!100547 (= res!50428 (= (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4196 newMap!16) (mask!6609 newMap!16)) (Found!264 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!100547 (=> (not res!50428) (not e!65472))))

(declare-fun d!27289 () Bool)

(declare-fun res!50429 () Bool)

(assert (=> d!27289 (=> res!50429 e!65470)))

(assert (=> d!27289 (= res!50429 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2271 (_keys!4196 newMap!16))))))

(assert (=> d!27289 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4196 newMap!16) (mask!6609 newMap!16)) e!65470)))

(declare-fun b!100548 () Bool)

(assert (=> b!100548 (= e!65472 call!10361)))

(declare-fun b!100549 () Bool)

(assert (=> b!100549 (= e!65471 call!10361)))

(assert (= (and d!27289 (not res!50429)) b!100546))

(assert (= (and b!100546 c!17276) b!100547))

(assert (= (and b!100546 (not c!17276)) b!100549))

(assert (= (and b!100547 res!50428) b!100548))

(assert (= (or b!100548 b!100549) bm!10358))

(assert (=> b!100546 m!110387))

(assert (=> b!100546 m!110387))

(assert (=> b!100546 m!110389))

(declare-fun m!111415 () Bool)

(assert (=> bm!10358 m!111415))

(assert (=> b!100547 m!110387))

(declare-fun m!111417 () Bool)

(assert (=> b!100547 m!111417))

(declare-fun m!111419 () Bool)

(assert (=> b!100547 m!111419))

(assert (=> b!100547 m!110387))

(declare-fun m!111421 () Bool)

(assert (=> b!100547 m!111421))

(assert (=> bm!10250 d!27289))

(assert (=> b!99621 d!27191))

(assert (=> b!99523 d!27285))

(declare-fun d!27291 () Bool)

(declare-fun e!65473 () Bool)

(assert (=> d!27291 e!65473))

(declare-fun res!50430 () Bool)

(assert (=> d!27291 (=> (not res!50430) (not e!65473))))

(declare-fun lt!50847 () ListLongMap!1557)

(assert (=> d!27291 (= res!50430 (contains!810 lt!50847 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!50849 () List!1615)

(assert (=> d!27291 (= lt!50847 (ListLongMap!1558 lt!50849))))

(declare-fun lt!50848 () Unit!3031)

(declare-fun lt!50846 () Unit!3031)

(assert (=> d!27291 (= lt!50848 lt!50846)))

(assert (=> d!27291 (= (getValueByKey!150 lt!50849 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27291 (= lt!50846 (lemmaContainsTupThenGetReturnValue!68 lt!50849 (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27291 (= lt!50849 (insertStrictlySorted!70 (toList!794 (map!1259 newMap!16)) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!27291 (= (+!139 (map!1259 newMap!16) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!50847)))

(declare-fun b!100550 () Bool)

(declare-fun res!50431 () Bool)

(assert (=> b!100550 (=> (not res!50431) (not e!65473))))

(assert (=> b!100550 (= res!50431 (= (getValueByKey!150 (toList!794 lt!50847) (_1!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!155 (_2!1193 (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!100551 () Bool)

(assert (=> b!100551 (= e!65473 (contains!812 (toList!794 lt!50847) (tuple2!2367 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!27291 res!50430) b!100550))

(assert (= (and b!100550 res!50431) b!100551))

(declare-fun m!111423 () Bool)

(assert (=> d!27291 m!111423))

(declare-fun m!111425 () Bool)

(assert (=> d!27291 m!111425))

(declare-fun m!111427 () Bool)

(assert (=> d!27291 m!111427))

(declare-fun m!111429 () Bool)

(assert (=> d!27291 m!111429))

(declare-fun m!111431 () Bool)

(assert (=> b!100550 m!111431))

(declare-fun m!111433 () Bool)

(assert (=> b!100551 m!111433))

(assert (=> b!99523 d!27291))

(assert (=> b!99523 d!26685))

(assert (=> d!26783 d!26683))

(declare-fun d!27293 () Bool)

(assert (=> d!27293 (isDefined!104 (getValueByKey!150 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!50850 () Unit!3031)

(assert (=> d!27293 (= lt!50850 (choose!618 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!65474 () Bool)

(assert (=> d!27293 e!65474))

(declare-fun res!50432 () Bool)

(assert (=> d!27293 (=> (not res!50432) (not e!65474))))

(assert (=> d!27293 (= res!50432 (isStrictlySorted!300 (toList!794 lt!49947)))))

(assert (=> d!27293 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000) lt!50850)))

(declare-fun b!100552 () Bool)

(assert (=> b!100552 (= e!65474 (containsKey!154 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27293 res!50432) b!100552))

(assert (=> d!27293 m!109787))

(assert (=> d!27293 m!109787))

(assert (=> d!27293 m!109789))

(declare-fun m!111435 () Bool)

(assert (=> d!27293 m!111435))

(assert (=> d!27293 m!110427))

(assert (=> b!100552 m!109783))

(assert (=> b!99753 d!27293))

(assert (=> b!99753 d!27077))

(assert (=> b!99753 d!26995))

(assert (=> b!99643 d!27197))

(assert (=> b!99643 d!27159))

(assert (=> d!26717 d!26799))

(declare-fun bm!10363 () Bool)

(declare-fun call!10366 () Bool)

(assert (=> bm!10363 (= call!10366 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!100569 () Bool)

(declare-fun e!65485 () Bool)

(declare-fun e!65486 () Bool)

(assert (=> b!100569 (= e!65485 e!65486)))

(declare-fun c!17282 () Bool)

(declare-fun lt!50853 () SeekEntryResult!264)

(assert (=> b!100569 (= c!17282 ((_ is MissingVacant!264) lt!50853))))

(declare-fun b!100570 () Bool)

(declare-fun res!50444 () Bool)

(declare-fun e!65484 () Bool)

(assert (=> b!100570 (=> (not res!50444) (not e!65484))))

(assert (=> b!100570 (= res!50444 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3203 lt!50853)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100571 () Bool)

(declare-fun res!50443 () Bool)

(assert (=> b!100571 (=> (not res!50443) (not e!65484))))

(declare-fun call!10367 () Bool)

(assert (=> b!100571 (= res!50443 call!10367)))

(assert (=> b!100571 (= e!65486 e!65484)))

(declare-fun b!100572 () Bool)

(declare-fun e!65483 () Bool)

(assert (=> b!100572 (= e!65483 (not call!10366))))

(declare-fun b!100573 () Bool)

(assert (=> b!100573 (= e!65485 e!65483)))

(declare-fun res!50442 () Bool)

(assert (=> b!100573 (= res!50442 call!10367)))

(assert (=> b!100573 (=> (not res!50442) (not e!65483))))

(declare-fun bm!10364 () Bool)

(declare-fun c!17281 () Bool)

(assert (=> bm!10364 (= call!10367 (inRange!0 (ite c!17281 (index!3200 lt!50853) (index!3203 lt!50853)) (mask!6609 newMap!16)))))

(declare-fun b!100574 () Bool)

(declare-fun res!50441 () Bool)

(assert (=> b!100574 (= res!50441 (= (select (arr!2020 (_keys!4196 newMap!16)) (index!3200 lt!50853)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100574 (=> (not res!50441) (not e!65483))))

(declare-fun b!100575 () Bool)

(assert (=> b!100575 (= e!65486 ((_ is Undefined!264) lt!50853))))

(declare-fun b!100576 () Bool)

(assert (=> b!100576 (= e!65484 (not call!10366))))

(declare-fun d!27295 () Bool)

(assert (=> d!27295 e!65485))

(assert (=> d!27295 (= c!17281 ((_ is MissingZero!264) lt!50853))))

(assert (=> d!27295 (= lt!50853 (seekEntryOrOpen!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (_keys!4196 newMap!16) (mask!6609 newMap!16)))))

(assert (=> d!27295 true))

(declare-fun _$34!874 () Unit!3031)

(assert (=> d!27295 (= (choose!612 (_keys!4196 newMap!16) (_values!2485 newMap!16) (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (defaultEntry!2502 newMap!16)) _$34!874)))

(assert (= (and d!27295 c!17281) b!100573))

(assert (= (and d!27295 (not c!17281)) b!100569))

(assert (= (and b!100573 res!50442) b!100574))

(assert (= (and b!100574 res!50441) b!100572))

(assert (= (and b!100569 c!17282) b!100571))

(assert (= (and b!100569 (not c!17282)) b!100575))

(assert (= (and b!100571 res!50443) b!100570))

(assert (= (and b!100570 res!50444) b!100576))

(assert (= (or b!100573 b!100571) bm!10364))

(assert (= (or b!100572 b!100576) bm!10363))

(assert (=> bm!10363 m!109089))

(assert (=> bm!10363 m!109309))

(declare-fun m!111437 () Bool)

(assert (=> b!100570 m!111437))

(declare-fun m!111439 () Bool)

(assert (=> bm!10364 m!111439))

(declare-fun m!111441 () Bool)

(assert (=> b!100574 m!111441))

(assert (=> d!27295 m!109089))

(assert (=> d!27295 m!109305))

(assert (=> d!26717 d!27295))

(assert (=> d!26717 d!26835))

(declare-fun d!27297 () Bool)

(declare-fun res!50445 () Bool)

(declare-fun e!65487 () Bool)

(assert (=> d!27297 (=> res!50445 e!65487)))

(assert (=> d!27297 (= res!50445 (and ((_ is Cons!1611) (toList!794 lt!49947)) (= (_1!1193 (h!2206 (toList!794 lt!49947))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!27297 (= (containsKey!154 (toList!794 lt!49947) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!65487)))

(declare-fun b!100577 () Bool)

(declare-fun e!65488 () Bool)

(assert (=> b!100577 (= e!65487 e!65488)))

(declare-fun res!50446 () Bool)

(assert (=> b!100577 (=> (not res!50446) (not e!65488))))

(assert (=> b!100577 (= res!50446 (and (or (not ((_ is Cons!1611) (toList!794 lt!49947))) (bvsle (_1!1193 (h!2206 (toList!794 lt!49947))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1611) (toList!794 lt!49947)) (bvslt (_1!1193 (h!2206 (toList!794 lt!49947))) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!100578 () Bool)

(assert (=> b!100578 (= e!65488 (containsKey!154 (t!5597 (toList!794 lt!49947)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!27297 (not res!50445)) b!100577))

(assert (= (and b!100577 res!50446) b!100578))

(assert (=> b!100578 m!109187))

(declare-fun m!111443 () Bool)

(assert (=> b!100578 m!111443))

(assert (=> d!26817 d!27297))

(assert (=> d!26767 d!26757))

(declare-fun d!27299 () Bool)

(declare-fun e!65489 () Bool)

(assert (=> d!27299 e!65489))

(declare-fun res!50447 () Bool)

(assert (=> d!27299 (=> res!50447 e!65489)))

(declare-fun lt!50855 () Bool)

(assert (=> d!27299 (= res!50447 (not lt!50855))))

(declare-fun lt!50857 () Bool)

(assert (=> d!27299 (= lt!50855 lt!50857)))

(declare-fun lt!50854 () Unit!3031)

(declare-fun e!65490 () Unit!3031)

(assert (=> d!27299 (= lt!50854 e!65490)))

(declare-fun c!17283 () Bool)

(assert (=> d!27299 (= c!17283 lt!50857)))

(assert (=> d!27299 (= lt!50857 (containsKey!154 (toList!794 lt!49960) lt!49961))))

(assert (=> d!27299 (= (contains!810 lt!49960 lt!49961) lt!50855)))

(declare-fun b!100579 () Bool)

(declare-fun lt!50856 () Unit!3031)

(assert (=> b!100579 (= e!65490 lt!50856)))

(assert (=> b!100579 (= lt!50856 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49960) lt!49961))))

(assert (=> b!100579 (isDefined!104 (getValueByKey!150 (toList!794 lt!49960) lt!49961))))

(declare-fun b!100580 () Bool)

(declare-fun Unit!3084 () Unit!3031)

(assert (=> b!100580 (= e!65490 Unit!3084)))

(declare-fun b!100581 () Bool)

(assert (=> b!100581 (= e!65489 (isDefined!104 (getValueByKey!150 (toList!794 lt!49960) lt!49961)))))

(assert (= (and d!27299 c!17283) b!100579))

(assert (= (and d!27299 (not c!17283)) b!100580))

(assert (= (and d!27299 (not res!50447)) b!100581))

(declare-fun m!111445 () Bool)

(assert (=> d!27299 m!111445))

(declare-fun m!111447 () Bool)

(assert (=> b!100579 m!111447))

(assert (=> b!100579 m!109627))

(assert (=> b!100579 m!109627))

(declare-fun m!111449 () Bool)

(assert (=> b!100579 m!111449))

(assert (=> b!100581 m!109627))

(assert (=> b!100581 m!109627))

(assert (=> b!100581 m!111449))

(assert (=> d!26767 d!27299))

(declare-fun d!27301 () Bool)

(assert (=> d!27301 (= (apply!93 (+!139 lt!49960 (tuple2!2367 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49961) (apply!93 lt!49960 lt!49961))))

(assert (=> d!27301 true))

(declare-fun _$34!875 () Unit!3031)

(assert (=> d!27301 (= (choose!617 lt!49960 lt!49948 (zeroValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49961) _$34!875)))

(declare-fun bs!4166 () Bool)

(assert (= bs!4166 d!27301))

(assert (=> bs!4166 m!109231))

(assert (=> bs!4166 m!109231))

(assert (=> bs!4166 m!109243))

(assert (=> bs!4166 m!109239))

(assert (=> d!26767 d!27301))

(assert (=> d!26767 d!26781))

(assert (=> d!26767 d!26771))

(declare-fun d!27303 () Bool)

(declare-fun e!65491 () Bool)

(assert (=> d!27303 e!65491))

(declare-fun res!50448 () Bool)

(assert (=> d!27303 (=> res!50448 e!65491)))

(declare-fun lt!50859 () Bool)

(assert (=> d!27303 (= res!50448 (not lt!50859))))

(declare-fun lt!50861 () Bool)

(assert (=> d!27303 (= lt!50859 lt!50861)))

(declare-fun lt!50858 () Unit!3031)

(declare-fun e!65492 () Unit!3031)

(assert (=> d!27303 (= lt!50858 e!65492)))

(declare-fun c!17284 () Bool)

(assert (=> d!27303 (= c!17284 lt!50861)))

(assert (=> d!27303 (= lt!50861 (containsKey!154 (toList!794 lt!50294) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27303 (= (contains!810 lt!50294 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50859)))

(declare-fun b!100582 () Bool)

(declare-fun lt!50860 () Unit!3031)

(assert (=> b!100582 (= e!65492 lt!50860)))

(assert (=> b!100582 (= lt!50860 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50294) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100582 (isDefined!104 (getValueByKey!150 (toList!794 lt!50294) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100583 () Bool)

(declare-fun Unit!3085 () Unit!3031)

(assert (=> b!100583 (= e!65492 Unit!3085)))

(declare-fun b!100584 () Bool)

(assert (=> b!100584 (= e!65491 (isDefined!104 (getValueByKey!150 (toList!794 lt!50294) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27303 c!17284) b!100582))

(assert (= (and d!27303 (not c!17284)) b!100583))

(assert (= (and d!27303 (not res!50448)) b!100584))

(declare-fun m!111451 () Bool)

(assert (=> d!27303 m!111451))

(declare-fun m!111453 () Bool)

(assert (=> b!100582 m!111453))

(assert (=> b!100582 m!110953))

(assert (=> b!100582 m!110953))

(declare-fun m!111455 () Bool)

(assert (=> b!100582 m!111455))

(assert (=> b!100584 m!110953))

(assert (=> b!100584 m!110953))

(assert (=> b!100584 m!111455))

(assert (=> bm!10254 d!27303))

(declare-fun d!27305 () Bool)

(declare-fun res!50449 () Bool)

(declare-fun e!65493 () Bool)

(assert (=> d!27305 (=> res!50449 e!65493)))

(assert (=> d!27305 (= res!50449 (= (select (arr!2020 (_keys!4196 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355)))))

(assert (=> d!27305 (= (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!65493)))

(declare-fun b!100585 () Bool)

(declare-fun e!65494 () Bool)

(assert (=> b!100585 (= e!65493 e!65494)))

(declare-fun res!50450 () Bool)

(assert (=> b!100585 (=> (not res!50450) (not e!65494))))

(assert (=> b!100585 (= res!50450 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2271 (_keys!4196 newMap!16))))))

(declare-fun b!100586 () Bool)

(assert (=> b!100586 (= e!65494 (arrayContainsKey!0 (_keys!4196 newMap!16) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!27305 (not res!50449)) b!100585))

(assert (= (and b!100585 res!50450) b!100586))

(assert (=> d!27305 m!110387))

(assert (=> b!100586 m!109089))

(declare-fun m!111457 () Bool)

(assert (=> b!100586 m!111457))

(assert (=> b!99579 d!27305))

(assert (=> b!99526 d!26717))

(assert (=> bm!10232 d!26729))

(declare-fun b!100587 () Bool)

(declare-fun e!65505 () Bool)

(declare-fun call!10372 () Bool)

(assert (=> b!100587 (= e!65505 (not call!10372))))

(declare-fun b!100588 () Bool)

(declare-fun e!65506 () Bool)

(declare-fun e!65507 () Bool)

(assert (=> b!100588 (= e!65506 e!65507)))

(declare-fun res!50455 () Bool)

(assert (=> b!100588 (=> (not res!50455) (not e!65507))))

(declare-fun lt!50867 () ListLongMap!1557)

(assert (=> b!100588 (= res!50455 (contains!810 lt!50867 (select (arr!2020 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16))) #b00000000000000000000000000000000)))))

(assert (=> b!100588 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)))))))

(declare-fun bm!10365 () Bool)

(declare-fun call!10369 () ListLongMap!1557)

(declare-fun call!10368 () ListLongMap!1557)

(assert (=> bm!10365 (= call!10369 call!10368)))

(declare-fun bm!10366 () Bool)

(declare-fun call!10370 () ListLongMap!1557)

(assert (=> bm!10366 (= call!10368 call!10370)))

(declare-fun b!100589 () Bool)

(declare-fun e!65496 () Bool)

(assert (=> b!100589 (= e!65505 e!65496)))

(declare-fun res!50451 () Bool)

(assert (=> b!100589 (= res!50451 call!10372)))

(assert (=> b!100589 (=> (not res!50451) (not e!65496))))

(declare-fun b!100590 () Bool)

(declare-fun e!65495 () Bool)

(declare-fun call!10371 () Bool)

(assert (=> b!100590 (= e!65495 (not call!10371))))

(declare-fun e!65497 () Bool)

(declare-fun b!100591 () Bool)

(assert (=> b!100591 (= e!65497 (= (apply!93 lt!50867 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16))))))

(declare-fun b!100592 () Bool)

(declare-fun c!17289 () Bool)

(assert (=> b!100592 (= c!17289 (and (not (= (bvand (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65499 () ListLongMap!1557)

(declare-fun e!65504 () ListLongMap!1557)

(assert (=> b!100592 (= e!65499 e!65504)))

(declare-fun c!17290 () Bool)

(declare-fun c!17287 () Bool)

(declare-fun call!10374 () ListLongMap!1557)

(declare-fun bm!10367 () Bool)

(assert (=> bm!10367 (= call!10374 (+!139 (ite c!17287 call!10370 (ite c!17290 call!10368 call!10369)) (ite (or c!17287 c!17290) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16))))))))

(declare-fun b!100593 () Bool)

(declare-fun e!65500 () Bool)

(assert (=> b!100593 (= e!65500 e!65495)))

(declare-fun c!17286 () Bool)

(assert (=> b!100593 (= c!17286 (not (= (bvand (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100594 () Bool)

(declare-fun e!65503 () Unit!3031)

(declare-fun lt!50864 () Unit!3031)

(assert (=> b!100594 (= e!65503 lt!50864)))

(declare-fun lt!50879 () ListLongMap!1557)

(assert (=> b!100594 (= lt!50879 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (_values!2485 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (mask!6609 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 (_2!1192 lt!50030) newMap!16))))))

(declare-fun lt!50876 () (_ BitVec 64))

(assert (=> b!100594 (= lt!50876 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50863 () (_ BitVec 64))

(assert (=> b!100594 (= lt!50863 (select (arr!2020 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16))) #b00000000000000000000000000000000))))

(declare-fun lt!50865 () Unit!3031)

(assert (=> b!100594 (= lt!50865 (addStillContains!69 lt!50879 lt!50876 (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) lt!50863))))

(assert (=> b!100594 (contains!810 (+!139 lt!50879 (tuple2!2367 lt!50876 (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)))) lt!50863)))

(declare-fun lt!50874 () Unit!3031)

(assert (=> b!100594 (= lt!50874 lt!50865)))

(declare-fun lt!50873 () ListLongMap!1557)

(assert (=> b!100594 (= lt!50873 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (_values!2485 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (mask!6609 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 (_2!1192 lt!50030) newMap!16))))))

(declare-fun lt!50875 () (_ BitVec 64))

(assert (=> b!100594 (= lt!50875 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50872 () (_ BitVec 64))

(assert (=> b!100594 (= lt!50872 (select (arr!2020 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16))) #b00000000000000000000000000000000))))

(declare-fun lt!50871 () Unit!3031)

(assert (=> b!100594 (= lt!50871 (addApplyDifferent!69 lt!50873 lt!50875 (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) lt!50872))))

(assert (=> b!100594 (= (apply!93 (+!139 lt!50873 (tuple2!2367 lt!50875 (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)))) lt!50872) (apply!93 lt!50873 lt!50872))))

(declare-fun lt!50870 () Unit!3031)

(assert (=> b!100594 (= lt!50870 lt!50871)))

(declare-fun lt!50880 () ListLongMap!1557)

(assert (=> b!100594 (= lt!50880 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (_values!2485 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (mask!6609 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 (_2!1192 lt!50030) newMap!16))))))

(declare-fun lt!50868 () (_ BitVec 64))

(assert (=> b!100594 (= lt!50868 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50881 () (_ BitVec 64))

(assert (=> b!100594 (= lt!50881 (select (arr!2020 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16))) #b00000000000000000000000000000000))))

(declare-fun lt!50866 () Unit!3031)

(assert (=> b!100594 (= lt!50866 (addApplyDifferent!69 lt!50880 lt!50868 (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) lt!50881))))

(assert (=> b!100594 (= (apply!93 (+!139 lt!50880 (tuple2!2367 lt!50868 (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)))) lt!50881) (apply!93 lt!50880 lt!50881))))

(declare-fun lt!50878 () Unit!3031)

(assert (=> b!100594 (= lt!50878 lt!50866)))

(declare-fun lt!50869 () ListLongMap!1557)

(assert (=> b!100594 (= lt!50869 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (_values!2485 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (mask!6609 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 (_2!1192 lt!50030) newMap!16))))))

(declare-fun lt!50877 () (_ BitVec 64))

(assert (=> b!100594 (= lt!50877 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!50883 () (_ BitVec 64))

(assert (=> b!100594 (= lt!50883 (select (arr!2020 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16))) #b00000000000000000000000000000000))))

(assert (=> b!100594 (= lt!50864 (addApplyDifferent!69 lt!50869 lt!50877 (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) lt!50883))))

(assert (=> b!100594 (= (apply!93 (+!139 lt!50869 (tuple2!2367 lt!50877 (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)))) lt!50883) (apply!93 lt!50869 lt!50883))))

(declare-fun b!100595 () Bool)

(declare-fun call!10373 () ListLongMap!1557)

(assert (=> b!100595 (= e!65504 call!10373)))

(declare-fun b!100596 () Bool)

(declare-fun res!50458 () Bool)

(assert (=> b!100596 (=> (not res!50458) (not e!65500))))

(assert (=> b!100596 (= res!50458 e!65505)))

(declare-fun c!17288 () Bool)

(assert (=> b!100596 (= c!17288 (not (= (bvand (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!65501 () Bool)

(declare-fun b!100597 () Bool)

(assert (=> b!100597 (= e!65501 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16))) #b00000000000000000000000000000000)))))

(declare-fun b!100598 () Bool)

(assert (=> b!100598 (= e!65507 (= (apply!93 lt!50867 (select (arr!2020 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16))) #b00000000000000000000000000000000)) (get!1304 (select (arr!2021 (_values!2485 (ite c!16972 (_2!1192 lt!50030) newMap!16))) #b00000000000000000000000000000000) (dynLambda!381 (defaultEntry!2502 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!100598 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2272 (_values!2485 (ite c!16972 (_2!1192 lt!50030) newMap!16)))))))

(assert (=> b!100598 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)))))))

(declare-fun b!100599 () Bool)

(declare-fun Unit!3086 () Unit!3031)

(assert (=> b!100599 (= e!65503 Unit!3086)))

(declare-fun b!100600 () Bool)

(assert (=> b!100600 (= e!65499 call!10373)))

(declare-fun bm!10368 () Bool)

(assert (=> bm!10368 (= call!10371 (contains!810 lt!50867 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10369 () Bool)

(assert (=> bm!10369 (= call!10373 call!10374)))

(declare-fun b!100601 () Bool)

(declare-fun res!50459 () Bool)

(assert (=> b!100601 (=> (not res!50459) (not e!65500))))

(assert (=> b!100601 (= res!50459 e!65506)))

(declare-fun res!50457 () Bool)

(assert (=> b!100601 (=> res!50457 e!65506)))

(assert (=> b!100601 (= res!50457 (not e!65501))))

(declare-fun res!50456 () Bool)

(assert (=> b!100601 (=> (not res!50456) (not e!65501))))

(assert (=> b!100601 (= res!50456 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)))))))

(declare-fun d!27307 () Bool)

(assert (=> d!27307 e!65500))

(declare-fun res!50454 () Bool)

(assert (=> d!27307 (=> (not res!50454) (not e!65500))))

(assert (=> d!27307 (= res!50454 (or (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)))))))))

(declare-fun lt!50882 () ListLongMap!1557)

(assert (=> d!27307 (= lt!50867 lt!50882)))

(declare-fun lt!50862 () Unit!3031)

(assert (=> d!27307 (= lt!50862 e!65503)))

(declare-fun c!17285 () Bool)

(declare-fun e!65498 () Bool)

(assert (=> d!27307 (= c!17285 e!65498)))

(declare-fun res!50452 () Bool)

(assert (=> d!27307 (=> (not res!50452) (not e!65498))))

(assert (=> d!27307 (= res!50452 (bvslt #b00000000000000000000000000000000 (size!2271 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)))))))

(declare-fun e!65502 () ListLongMap!1557)

(assert (=> d!27307 (= lt!50882 e!65502)))

(assert (=> d!27307 (= c!17287 (and (not (= (bvand (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!27307 (validMask!0 (mask!6609 (ite c!16972 (_2!1192 lt!50030) newMap!16)))))

(assert (=> d!27307 (= (getCurrentListMap!474 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (_values!2485 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (mask!6609 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 (_2!1192 lt!50030) newMap!16))) lt!50867)))

(declare-fun bm!10370 () Bool)

(assert (=> bm!10370 (= call!10372 (contains!810 lt!50867 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!10371 () Bool)

(assert (=> bm!10371 (= call!10370 (getCurrentListMapNoExtraKeys!103 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (_values!2485 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (mask!6609 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2502 (ite c!16972 (_2!1192 lt!50030) newMap!16))))))

(declare-fun b!100602 () Bool)

(assert (=> b!100602 (= e!65496 (= (apply!93 lt!50867 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16))))))

(declare-fun b!100603 () Bool)

(assert (=> b!100603 (= e!65504 call!10369)))

(declare-fun b!100604 () Bool)

(assert (=> b!100604 (= e!65495 e!65497)))

(declare-fun res!50453 () Bool)

(assert (=> b!100604 (= res!50453 call!10371)))

(assert (=> b!100604 (=> (not res!50453) (not e!65497))))

(declare-fun b!100605 () Bool)

(assert (=> b!100605 (= e!65502 e!65499)))

(assert (=> b!100605 (= c!17290 (and (not (= (bvand (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2319 (ite c!16972 (_2!1192 lt!50030) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!100606 () Bool)

(assert (=> b!100606 (= e!65498 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (ite c!16972 (_2!1192 lt!50030) newMap!16))) #b00000000000000000000000000000000)))))

(declare-fun b!100607 () Bool)

(assert (=> b!100607 (= e!65502 (+!139 call!10374 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (ite c!16972 (_2!1192 lt!50030) newMap!16)))))))

(assert (= (and d!27307 c!17287) b!100607))

(assert (= (and d!27307 (not c!17287)) b!100605))

(assert (= (and b!100605 c!17290) b!100600))

(assert (= (and b!100605 (not c!17290)) b!100592))

(assert (= (and b!100592 c!17289) b!100595))

(assert (= (and b!100592 (not c!17289)) b!100603))

(assert (= (or b!100595 b!100603) bm!10365))

(assert (= (or b!100600 bm!10365) bm!10366))

(assert (= (or b!100600 b!100595) bm!10369))

(assert (= (or b!100607 bm!10366) bm!10371))

(assert (= (or b!100607 bm!10369) bm!10367))

(assert (= (and d!27307 res!50452) b!100606))

(assert (= (and d!27307 c!17285) b!100594))

(assert (= (and d!27307 (not c!17285)) b!100599))

(assert (= (and d!27307 res!50454) b!100601))

(assert (= (and b!100601 res!50456) b!100597))

(assert (= (and b!100601 (not res!50457)) b!100588))

(assert (= (and b!100588 res!50455) b!100598))

(assert (= (and b!100601 res!50459) b!100596))

(assert (= (and b!100596 c!17288) b!100589))

(assert (= (and b!100596 (not c!17288)) b!100587))

(assert (= (and b!100589 res!50451) b!100602))

(assert (= (or b!100589 b!100587) bm!10370))

(assert (= (and b!100596 res!50458) b!100593))

(assert (= (and b!100593 c!17286) b!100604))

(assert (= (and b!100593 (not c!17286)) b!100590))

(assert (= (and b!100604 res!50453) b!100591))

(assert (= (or b!100604 b!100590) bm!10368))

(declare-fun b_lambda!4503 () Bool)

(assert (=> (not b_lambda!4503) (not b!100598)))

(declare-fun tb!1965 () Bool)

(declare-fun t!5613 () Bool)

(assert (=> (and b!99123 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 (ite c!16972 (_2!1192 lt!50030) newMap!16))) t!5613) tb!1965))

(declare-fun result!3319 () Bool)

(assert (=> tb!1965 (= result!3319 tp_is_empty!2637)))

(assert (=> b!100598 t!5613))

(declare-fun b_and!6201 () Bool)

(assert (= b_and!6197 (and (=> t!5613 result!3319) b_and!6201)))

(declare-fun tb!1967 () Bool)

(declare-fun t!5615 () Bool)

(assert (=> (and b!99136 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (ite c!16972 (_2!1192 lt!50030) newMap!16))) t!5615) tb!1967))

(declare-fun result!3321 () Bool)

(assert (= result!3321 result!3319))

(assert (=> b!100598 t!5615))

(declare-fun b_and!6203 () Bool)

(assert (= b_and!6199 (and (=> t!5615 result!3321) b_and!6203)))

(declare-fun m!111459 () Bool)

(assert (=> b!100598 m!111459))

(declare-fun m!111461 () Bool)

(assert (=> b!100598 m!111461))

(declare-fun m!111463 () Bool)

(assert (=> b!100598 m!111463))

(assert (=> b!100598 m!111463))

(declare-fun m!111465 () Bool)

(assert (=> b!100598 m!111465))

(declare-fun m!111467 () Bool)

(assert (=> b!100598 m!111467))

(assert (=> b!100598 m!111459))

(assert (=> b!100598 m!111465))

(declare-fun m!111469 () Bool)

(assert (=> b!100591 m!111469))

(declare-fun m!111471 () Bool)

(assert (=> bm!10371 m!111471))

(assert (=> b!100588 m!111459))

(assert (=> b!100588 m!111459))

(declare-fun m!111473 () Bool)

(assert (=> b!100588 m!111473))

(declare-fun m!111475 () Bool)

(assert (=> bm!10368 m!111475))

(declare-fun m!111477 () Bool)

(assert (=> d!27307 m!111477))

(assert (=> b!100597 m!111459))

(assert (=> b!100597 m!111459))

(declare-fun m!111479 () Bool)

(assert (=> b!100597 m!111479))

(declare-fun m!111481 () Bool)

(assert (=> b!100602 m!111481))

(declare-fun m!111483 () Bool)

(assert (=> b!100607 m!111483))

(declare-fun m!111485 () Bool)

(assert (=> bm!10370 m!111485))

(assert (=> b!100606 m!111459))

(assert (=> b!100606 m!111459))

(assert (=> b!100606 m!111479))

(declare-fun m!111487 () Bool)

(assert (=> b!100594 m!111487))

(declare-fun m!111489 () Bool)

(assert (=> b!100594 m!111489))

(declare-fun m!111491 () Bool)

(assert (=> b!100594 m!111491))

(declare-fun m!111493 () Bool)

(assert (=> b!100594 m!111493))

(declare-fun m!111495 () Bool)

(assert (=> b!100594 m!111495))

(assert (=> b!100594 m!111493))

(declare-fun m!111497 () Bool)

(assert (=> b!100594 m!111497))

(declare-fun m!111499 () Bool)

(assert (=> b!100594 m!111499))

(declare-fun m!111501 () Bool)

(assert (=> b!100594 m!111501))

(assert (=> b!100594 m!111459))

(declare-fun m!111503 () Bool)

(assert (=> b!100594 m!111503))

(declare-fun m!111505 () Bool)

(assert (=> b!100594 m!111505))

(assert (=> b!100594 m!111495))

(declare-fun m!111507 () Bool)

(assert (=> b!100594 m!111507))

(assert (=> b!100594 m!111487))

(declare-fun m!111509 () Bool)

(assert (=> b!100594 m!111509))

(declare-fun m!111511 () Bool)

(assert (=> b!100594 m!111511))

(assert (=> b!100594 m!111509))

(declare-fun m!111513 () Bool)

(assert (=> b!100594 m!111513))

(assert (=> b!100594 m!111471))

(declare-fun m!111515 () Bool)

(assert (=> b!100594 m!111515))

(declare-fun m!111517 () Bool)

(assert (=> bm!10367 m!111517))

(assert (=> d!26815 d!27307))

(declare-fun d!27309 () Bool)

(declare-fun e!65508 () Bool)

(assert (=> d!27309 e!65508))

(declare-fun res!50460 () Bool)

(assert (=> d!27309 (=> res!50460 e!65508)))

(declare-fun lt!50885 () Bool)

(assert (=> d!27309 (= res!50460 (not lt!50885))))

(declare-fun lt!50887 () Bool)

(assert (=> d!27309 (= lt!50885 lt!50887)))

(declare-fun lt!50884 () Unit!3031)

(declare-fun e!65509 () Unit!3031)

(assert (=> d!27309 (= lt!50884 e!65509)))

(declare-fun c!17291 () Bool)

(assert (=> d!27309 (= c!17291 lt!50887)))

(assert (=> d!27309 (= lt!50887 (containsKey!154 (toList!794 lt!50249) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> d!27309 (= (contains!810 lt!50249 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50885)))

(declare-fun b!100608 () Bool)

(declare-fun lt!50886 () Unit!3031)

(assert (=> b!100608 (= e!65509 lt!50886)))

(assert (=> b!100608 (= lt!50886 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50249) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (=> b!100608 (isDefined!104 (getValueByKey!150 (toList!794 lt!50249) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100609 () Bool)

(declare-fun Unit!3087 () Unit!3031)

(assert (=> b!100609 (= e!65509 Unit!3087)))

(declare-fun b!100610 () Bool)

(assert (=> b!100610 (= e!65508 (isDefined!104 (getValueByKey!150 (toList!794 lt!50249) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!27309 c!17291) b!100608))

(assert (= (and d!27309 (not c!17291)) b!100609))

(assert (= (and d!27309 (not res!50460)) b!100610))

(declare-fun m!111519 () Bool)

(assert (=> d!27309 m!111519))

(declare-fun m!111521 () Bool)

(assert (=> b!100608 m!111521))

(assert (=> b!100608 m!109575))

(assert (=> b!100608 m!109575))

(declare-fun m!111523 () Bool)

(assert (=> b!100608 m!111523))

(assert (=> b!100610 m!109575))

(assert (=> b!100610 m!109575))

(assert (=> b!100610 m!111523))

(assert (=> d!26753 d!27309))

(declare-fun b!100612 () Bool)

(declare-fun e!65510 () Option!156)

(declare-fun e!65511 () Option!156)

(assert (=> b!100612 (= e!65510 e!65511)))

(declare-fun c!17293 () Bool)

(assert (=> b!100612 (= c!17293 (and ((_ is Cons!1611) lt!50251) (not (= (_1!1193 (h!2206 lt!50251)) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun d!27311 () Bool)

(declare-fun c!17292 () Bool)

(assert (=> d!27311 (= c!17292 (and ((_ is Cons!1611) lt!50251) (= (_1!1193 (h!2206 lt!50251)) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27311 (= (getValueByKey!150 lt!50251 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) e!65510)))

(declare-fun b!100614 () Bool)

(assert (=> b!100614 (= e!65511 None!154)))

(declare-fun b!100611 () Bool)

(assert (=> b!100611 (= e!65510 (Some!155 (_2!1193 (h!2206 lt!50251))))))

(declare-fun b!100613 () Bool)

(assert (=> b!100613 (= e!65511 (getValueByKey!150 (t!5597 lt!50251) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!27311 c!17292) b!100611))

(assert (= (and d!27311 (not c!17292)) b!100612))

(assert (= (and b!100612 c!17293) b!100613))

(assert (= (and b!100612 (not c!17293)) b!100614))

(declare-fun m!111525 () Bool)

(assert (=> b!100613 m!111525))

(assert (=> d!26753 d!27311))

(declare-fun d!27313 () Bool)

(assert (=> d!27313 (= (getValueByKey!150 lt!50251 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) (Some!155 (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun lt!50888 () Unit!3031)

(assert (=> d!27313 (= lt!50888 (choose!620 lt!50251 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun e!65512 () Bool)

(assert (=> d!27313 e!65512))

(declare-fun res!50461 () Bool)

(assert (=> d!27313 (=> (not res!50461) (not e!65512))))

(assert (=> d!27313 (= res!50461 (isStrictlySorted!300 lt!50251))))

(assert (=> d!27313 (= (lemmaContainsTupThenGetReturnValue!68 lt!50251 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50888)))

(declare-fun b!100615 () Bool)

(declare-fun res!50462 () Bool)

(assert (=> b!100615 (=> (not res!50462) (not e!65512))))

(assert (=> b!100615 (= res!50462 (containsKey!154 lt!50251 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100616 () Bool)

(assert (=> b!100616 (= e!65512 (contains!812 lt!50251 (tuple2!2367 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (= (and d!27313 res!50461) b!100615))

(assert (= (and b!100615 res!50462) b!100616))

(assert (=> d!27313 m!109569))

(declare-fun m!111527 () Bool)

(assert (=> d!27313 m!111527))

(declare-fun m!111529 () Bool)

(assert (=> d!27313 m!111529))

(declare-fun m!111531 () Bool)

(assert (=> b!100615 m!111531))

(declare-fun m!111533 () Bool)

(assert (=> b!100616 m!111533))

(assert (=> d!26753 d!27313))

(declare-fun b!100617 () Bool)

(declare-fun e!65514 () List!1615)

(declare-fun e!65516 () List!1615)

(assert (=> b!100617 (= e!65514 e!65516)))

(declare-fun c!17297 () Bool)

(assert (=> b!100617 (= c!17297 (and ((_ is Cons!1611) (toList!794 lt!49949)) (= (_1!1193 (h!2206 (toList!794 lt!49949))) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun e!65515 () List!1615)

(declare-fun b!100618 () Bool)

(assert (=> b!100618 (= e!65515 (insertStrictlySorted!70 (t!5597 (toList!794 lt!49949)) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun b!100619 () Bool)

(declare-fun call!10375 () List!1615)

(assert (=> b!100619 (= e!65516 call!10375)))

(declare-fun call!10377 () List!1615)

(declare-fun bm!10373 () Bool)

(declare-fun c!17296 () Bool)

(assert (=> bm!10373 (= call!10377 ($colon$colon!78 e!65515 (ite c!17296 (h!2206 (toList!794 lt!49949)) (tuple2!2367 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun c!17294 () Bool)

(assert (=> bm!10373 (= c!17294 c!17296)))

(declare-fun b!100620 () Bool)

(declare-fun e!65513 () List!1615)

(declare-fun call!10376 () List!1615)

(assert (=> b!100620 (= e!65513 call!10376)))

(declare-fun e!65517 () Bool)

(declare-fun b!100621 () Bool)

(declare-fun lt!50889 () List!1615)

(assert (=> b!100621 (= e!65517 (contains!812 lt!50889 (tuple2!2367 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(declare-fun b!100622 () Bool)

(declare-fun res!50464 () Bool)

(assert (=> b!100622 (=> (not res!50464) (not e!65517))))

(assert (=> b!100622 (= res!50464 (containsKey!154 lt!50889 (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(declare-fun c!17295 () Bool)

(declare-fun b!100623 () Bool)

(assert (=> b!100623 (= c!17295 (and ((_ is Cons!1611) (toList!794 lt!49949)) (bvsgt (_1!1193 (h!2206 (toList!794 lt!49949))) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> b!100623 (= e!65516 e!65513)))

(declare-fun b!100624 () Bool)

(assert (=> b!100624 (= e!65513 call!10376)))

(declare-fun b!100625 () Bool)

(assert (=> b!100625 (= e!65514 call!10377)))

(declare-fun b!100626 () Bool)

(assert (=> b!100626 (= e!65515 (ite c!17297 (t!5597 (toList!794 lt!49949)) (ite c!17295 (Cons!1611 (h!2206 (toList!794 lt!49949)) (t!5597 (toList!794 lt!49949))) Nil!1612)))))

(declare-fun bm!10374 () Bool)

(assert (=> bm!10374 (= call!10375 call!10377)))

(declare-fun d!27315 () Bool)

(assert (=> d!27315 e!65517))

(declare-fun res!50463 () Bool)

(assert (=> d!27315 (=> (not res!50463) (not e!65517))))

(assert (=> d!27315 (= res!50463 (isStrictlySorted!300 lt!50889))))

(assert (=> d!27315 (= lt!50889 e!65514)))

(assert (=> d!27315 (= c!17296 (and ((_ is Cons!1611) (toList!794 lt!49949)) (bvslt (_1!1193 (h!2206 (toList!794 lt!49949))) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27315 (isStrictlySorted!300 (toList!794 lt!49949))))

(assert (=> d!27315 (= (insertStrictlySorted!70 (toList!794 lt!49949) (_1!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) (_2!1193 (tuple2!2367 lt!49957 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) lt!50889)))

(declare-fun bm!10372 () Bool)

(assert (=> bm!10372 (= call!10376 call!10375)))

(assert (= (and d!27315 c!17296) b!100625))

(assert (= (and d!27315 (not c!17296)) b!100617))

(assert (= (and b!100617 c!17297) b!100619))

(assert (= (and b!100617 (not c!17297)) b!100623))

(assert (= (and b!100623 c!17295) b!100620))

(assert (= (and b!100623 (not c!17295)) b!100624))

(assert (= (or b!100620 b!100624) bm!10372))

(assert (= (or b!100619 bm!10372) bm!10374))

(assert (= (or b!100625 bm!10374) bm!10373))

(assert (= (and bm!10373 c!17294) b!100618))

(assert (= (and bm!10373 (not c!17294)) b!100626))

(assert (= (and d!27315 res!50463) b!100622))

(assert (= (and b!100622 res!50464) b!100621))

(declare-fun m!111535 () Bool)

(assert (=> b!100622 m!111535))

(declare-fun m!111537 () Bool)

(assert (=> bm!10373 m!111537))

(declare-fun m!111539 () Bool)

(assert (=> b!100621 m!111539))

(declare-fun m!111541 () Bool)

(assert (=> b!100618 m!111541))

(declare-fun m!111543 () Bool)

(assert (=> d!27315 m!111543))

(declare-fun m!111545 () Bool)

(assert (=> d!27315 m!111545))

(assert (=> d!26753 d!27315))

(declare-fun d!27317 () Bool)

(declare-fun e!65518 () Bool)

(assert (=> d!27317 e!65518))

(declare-fun res!50465 () Bool)

(assert (=> d!27317 (=> res!50465 e!65518)))

(declare-fun lt!50891 () Bool)

(assert (=> d!27317 (= res!50465 (not lt!50891))))

(declare-fun lt!50893 () Bool)

(assert (=> d!27317 (= lt!50891 lt!50893)))

(declare-fun lt!50890 () Unit!3031)

(declare-fun e!65519 () Unit!3031)

(assert (=> d!27317 (= lt!50890 e!65519)))

(declare-fun c!17298 () Bool)

(assert (=> d!27317 (= c!17298 lt!50893)))

(assert (=> d!27317 (= lt!50893 (containsKey!154 (toList!794 lt!50344) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27317 (= (contains!810 lt!50344 #b0000000000000000000000000000000000000000000000000000000000000000) lt!50891)))

(declare-fun b!100627 () Bool)

(declare-fun lt!50892 () Unit!3031)

(assert (=> b!100627 (= e!65519 lt!50892)))

(assert (=> b!100627 (= lt!50892 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50344) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100627 (isDefined!104 (getValueByKey!150 (toList!794 lt!50344) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100628 () Bool)

(declare-fun Unit!3088 () Unit!3031)

(assert (=> b!100628 (= e!65519 Unit!3088)))

(declare-fun b!100629 () Bool)

(assert (=> b!100629 (= e!65518 (isDefined!104 (getValueByKey!150 (toList!794 lt!50344) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27317 c!17298) b!100627))

(assert (= (and d!27317 (not c!17298)) b!100628))

(assert (= (and d!27317 (not res!50465)) b!100629))

(declare-fun m!111547 () Bool)

(assert (=> d!27317 m!111547))

(declare-fun m!111549 () Bool)

(assert (=> b!100627 m!111549))

(assert (=> b!100627 m!110207))

(assert (=> b!100627 m!110207))

(declare-fun m!111551 () Bool)

(assert (=> b!100627 m!111551))

(assert (=> b!100629 m!110207))

(assert (=> b!100629 m!110207))

(assert (=> b!100629 m!111551))

(assert (=> bm!10264 d!27317))

(declare-fun d!27319 () Bool)

(assert (=> d!27319 (= (get!1306 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!99768 d!27319))

(declare-fun d!27321 () Bool)

(declare-fun e!65520 () Bool)

(assert (=> d!27321 e!65520))

(declare-fun res!50466 () Bool)

(assert (=> d!27321 (=> res!50466 e!65520)))

(declare-fun lt!50895 () Bool)

(assert (=> d!27321 (= res!50466 (not lt!50895))))

(declare-fun lt!50897 () Bool)

(assert (=> d!27321 (= lt!50895 lt!50897)))

(declare-fun lt!50894 () Unit!3031)

(declare-fun e!65521 () Unit!3031)

(assert (=> d!27321 (= lt!50894 e!65521)))

(declare-fun c!17299 () Bool)

(assert (=> d!27321 (= c!17299 lt!50897)))

(assert (=> d!27321 (= lt!50897 (containsKey!154 (toList!794 lt!50232) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!27321 (= (contains!810 lt!50232 #b1000000000000000000000000000000000000000000000000000000000000000) lt!50895)))

(declare-fun b!100630 () Bool)

(declare-fun lt!50896 () Unit!3031)

(assert (=> b!100630 (= e!65521 lt!50896)))

(assert (=> b!100630 (= lt!50896 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!50232) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!100630 (isDefined!104 (getValueByKey!150 (toList!794 lt!50232) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!100631 () Bool)

(declare-fun Unit!3089 () Unit!3031)

(assert (=> b!100631 (= e!65521 Unit!3089)))

(declare-fun b!100632 () Bool)

(assert (=> b!100632 (= e!65520 (isDefined!104 (getValueByKey!150 (toList!794 lt!50232) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!27321 c!17299) b!100630))

(assert (= (and d!27321 (not c!17299)) b!100631))

(assert (= (and d!27321 (not res!50466)) b!100632))

(declare-fun m!111553 () Bool)

(assert (=> d!27321 m!111553))

(declare-fun m!111555 () Bool)

(assert (=> b!100630 m!111555))

(declare-fun m!111557 () Bool)

(assert (=> b!100630 m!111557))

(assert (=> b!100630 m!111557))

(declare-fun m!111559 () Bool)

(assert (=> b!100630 m!111559))

(assert (=> b!100632 m!111557))

(assert (=> b!100632 m!111557))

(assert (=> b!100632 m!111559))

(assert (=> b!99620 d!27321))

(assert (=> b!99684 d!26837))

(declare-fun d!27323 () Bool)

(assert (=> d!27323 (= (inRange!0 (ite c!17008 (index!3200 lt!50198) (index!3203 lt!50198)) (mask!6609 newMap!16)) (and (bvsge (ite c!17008 (index!3200 lt!50198) (index!3203 lt!50198)) #b00000000000000000000000000000000) (bvslt (ite c!17008 (index!3200 lt!50198) (index!3203 lt!50198)) (bvadd (mask!6609 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!10242 d!27323))

(declare-fun d!27325 () Bool)

(assert (=> d!27325 (= (apply!93 lt!50232 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1307 (getValueByKey!150 (toList!794 lt!50232) (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!4167 () Bool)

(assert (= bs!4167 d!27325))

(assert (=> bs!4167 m!109187))

(assert (=> bs!4167 m!111303))

(assert (=> bs!4167 m!111303))

(declare-fun m!111561 () Bool)

(assert (=> bs!4167 m!111561))

(assert (=> b!99613 d!27325))

(assert (=> b!99613 d!26827))

(declare-fun b!100633 () Bool)

(declare-fun e!65525 () Bool)

(declare-fun e!65522 () Bool)

(assert (=> b!100633 (= e!65525 e!65522)))

(declare-fun c!17300 () Bool)

(assert (=> b!100633 (= c!17300 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!100634 () Bool)

(declare-fun e!65523 () Bool)

(assert (=> b!100634 (= e!65523 (contains!811 Nil!1613 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!10375 () Bool)

(declare-fun call!10378 () Bool)

(assert (=> bm!10375 (= call!10378 (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!17300 (Cons!1612 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b00000000000000000000000000000000) Nil!1613) Nil!1613)))))

(declare-fun b!100635 () Bool)

(declare-fun e!65524 () Bool)

(assert (=> b!100635 (= e!65524 e!65525)))

(declare-fun res!50468 () Bool)

(assert (=> b!100635 (=> (not res!50468) (not e!65525))))

(assert (=> b!100635 (= res!50468 (not e!65523))))

(declare-fun res!50467 () Bool)

(assert (=> b!100635 (=> (not res!50467) (not e!65523))))

(assert (=> b!100635 (= res!50467 (validKeyInArray!0 (select (arr!2020 (_keys!4196 (v!2817 (underlying!342 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!100636 () Bool)

(assert (=> b!100636 (= e!65522 call!10378)))

(declare-fun d!27327 () Bool)

(declare-fun res!50469 () Bool)

(assert (=> d!27327 (=> res!50469 e!65524)))

(assert (=> d!27327 (= res!50469 (bvsge #b00000000000000000000000000000000 (size!2271 (_keys!4196 (v!2817 (underlying!342 thiss!992))))))))

(assert (=> d!27327 (= (arrayNoDuplicates!0 (_keys!4196 (v!2817 (underlying!342 thiss!992))) #b00000000000000000000000000000000 Nil!1613) e!65524)))

(declare-fun b!100637 () Bool)

(assert (=> b!100637 (= e!65522 call!10378)))

(assert (= (and d!27327 (not res!50469)) b!100635))

(assert (= (and b!100635 res!50467) b!100634))

(assert (= (and b!100635 res!50468) b!100633))

(assert (= (and b!100633 c!17300) b!100637))

(assert (= (and b!100633 (not c!17300)) b!100636))

(assert (= (or b!100637 b!100636) bm!10375))

(assert (=> b!100633 m!110577))

(assert (=> b!100633 m!110577))

(assert (=> b!100633 m!110579))

(assert (=> b!100634 m!110577))

(assert (=> b!100634 m!110577))

(declare-fun m!111563 () Bool)

(assert (=> b!100634 m!111563))

(assert (=> bm!10375 m!110577))

(declare-fun m!111565 () Bool)

(assert (=> bm!10375 m!111565))

(assert (=> b!100635 m!110577))

(assert (=> b!100635 m!110577))

(assert (=> b!100635 m!110579))

(assert (=> b!99741 d!27327))

(assert (=> d!26763 d!26755))

(assert (=> d!26763 d!26775))

(declare-fun d!27329 () Bool)

(declare-fun e!65526 () Bool)

(assert (=> d!27329 e!65526))

(declare-fun res!50470 () Bool)

(assert (=> d!27329 (=> res!50470 e!65526)))

(declare-fun lt!50899 () Bool)

(assert (=> d!27329 (= res!50470 (not lt!50899))))

(declare-fun lt!50901 () Bool)

(assert (=> d!27329 (= lt!50899 lt!50901)))

(declare-fun lt!50898 () Unit!3031)

(declare-fun e!65527 () Unit!3031)

(assert (=> d!27329 (= lt!50898 e!65527)))

(declare-fun c!17301 () Bool)

(assert (=> d!27329 (= c!17301 lt!50901)))

(assert (=> d!27329 (= lt!50901 (containsKey!154 (toList!794 lt!49953) lt!49952))))

(assert (=> d!27329 (= (contains!810 lt!49953 lt!49952) lt!50899)))

(declare-fun b!100638 () Bool)

(declare-fun lt!50900 () Unit!3031)

(assert (=> b!100638 (= e!65527 lt!50900)))

(assert (=> b!100638 (= lt!50900 (lemmaContainsKeyImpliesGetValueByKeyDefined!103 (toList!794 lt!49953) lt!49952))))

(assert (=> b!100638 (isDefined!104 (getValueByKey!150 (toList!794 lt!49953) lt!49952))))

(declare-fun b!100639 () Bool)

(declare-fun Unit!3090 () Unit!3031)

(assert (=> b!100639 (= e!65527 Unit!3090)))

(declare-fun b!100640 () Bool)

(assert (=> b!100640 (= e!65526 (isDefined!104 (getValueByKey!150 (toList!794 lt!49953) lt!49952)))))

(assert (= (and d!27329 c!17301) b!100638))

(assert (= (and d!27329 (not c!17301)) b!100639))

(assert (= (and d!27329 (not res!50470)) b!100640))

(declare-fun m!111567 () Bool)

(assert (=> d!27329 m!111567))

(declare-fun m!111569 () Bool)

(assert (=> b!100638 m!111569))

(assert (=> b!100638 m!109635))

(assert (=> b!100638 m!109635))

(declare-fun m!111571 () Bool)

(assert (=> b!100638 m!111571))

(assert (=> b!100640 m!109635))

(assert (=> b!100640 m!109635))

(assert (=> b!100640 m!111571))

(assert (=> d!26763 d!27329))

(declare-fun d!27331 () Bool)

(assert (=> d!27331 (= (apply!93 (+!139 lt!49953 (tuple2!2367 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))))) lt!49952) (apply!93 lt!49953 lt!49952))))

(assert (=> d!27331 true))

(declare-fun _$34!876 () Unit!3031)

(assert (=> d!27331 (= (choose!617 lt!49953 lt!49955 (minValue!2383 (v!2817 (underlying!342 thiss!992))) lt!49952) _$34!876)))

(declare-fun bs!4168 () Bool)

(assert (= bs!4168 d!27331))

(assert (=> bs!4168 m!109245))

(assert (=> bs!4168 m!109245))

(assert (=> bs!4168 m!109249))

(assert (=> bs!4168 m!109227))

(assert (=> d!26763 d!27331))

(assert (=> d!26763 d!26769))

(declare-fun d!27333 () Bool)

(assert (=> d!27333 (contains!810 (getCurrentListMap!474 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2502 newMap!16)) (select (arr!2020 (_keys!4196 newMap!16)) (index!3201 lt!50043)))))

(assert (=> d!27333 true))

(declare-fun _$16!120 () Unit!3031)

(assert (=> d!27333 (= (choose!610 (_keys!4196 newMap!16) lt!50042 (mask!6609 newMap!16) (extraKeys!2319 newMap!16) (zeroValue!2383 newMap!16) (minValue!2383 newMap!16) (index!3201 lt!50043) (defaultEntry!2502 newMap!16)) _$16!120)))

(declare-fun bs!4169 () Bool)

(assert (= bs!4169 d!27333))

(assert (=> bs!4169 m!109331))

(assert (=> bs!4169 m!109291))

(assert (=> bs!4169 m!109331))

(assert (=> bs!4169 m!109291))

(assert (=> bs!4169 m!109333))

(assert (=> d!26703 d!27333))

(assert (=> d!26703 d!26835))

(declare-fun b!100642 () Bool)

(declare-fun e!65528 () Option!156)

(declare-fun e!65529 () Option!156)

(assert (=> b!100642 (= e!65528 e!65529)))

(declare-fun c!17303 () Bool)

(assert (=> b!100642 (= c!17303 (and ((_ is Cons!1611) (toList!794 lt!50321)) (not (= (_1!1193 (h!2206 (toList!794 lt!50321))) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))))

(declare-fun d!27335 () Bool)

(declare-fun c!17302 () Bool)

(assert (=> d!27335 (= c!17302 (and ((_ is Cons!1611) (toList!794 lt!50321)) (= (_1!1193 (h!2206 (toList!794 lt!50321))) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992))))))))))

(assert (=> d!27335 (= (getValueByKey!150 (toList!794 lt!50321) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))) e!65528)))

(declare-fun b!100644 () Bool)

(assert (=> b!100644 (= e!65529 None!154)))

(declare-fun b!100641 () Bool)

(assert (=> b!100641 (= e!65528 (Some!155 (_2!1193 (h!2206 (toList!794 lt!50321)))))))

(declare-fun b!100643 () Bool)

(assert (=> b!100643 (= e!65529 (getValueByKey!150 (t!5597 (toList!794 lt!50321)) (_1!1193 (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 (v!2817 (underlying!342 thiss!992)))))))))

(assert (= (and d!27335 c!17302) b!100641))

(assert (= (and d!27335 (not c!17302)) b!100642))

(assert (= (and b!100642 c!17303) b!100643))

(assert (= (and b!100642 (not c!17303)) b!100644))

(declare-fun m!111573 () Bool)

(assert (=> b!100643 m!111573))

(assert (=> b!99748 d!27335))

(declare-fun d!27337 () Bool)

(assert (=> d!27337 (= (get!1307 (getValueByKey!150 (toList!794 lt!49960) lt!49961)) (v!2821 (getValueByKey!150 (toList!794 lt!49960) lt!49961)))))

(assert (=> d!26771 d!27337))

(declare-fun b!100646 () Bool)

(declare-fun e!65530 () Option!156)

(declare-fun e!65531 () Option!156)

(assert (=> b!100646 (= e!65530 e!65531)))

(declare-fun c!17305 () Bool)

(assert (=> b!100646 (= c!17305 (and ((_ is Cons!1611) (toList!794 lt!49960)) (not (= (_1!1193 (h!2206 (toList!794 lt!49960))) lt!49961))))))

(declare-fun d!27339 () Bool)

(declare-fun c!17304 () Bool)

(assert (=> d!27339 (= c!17304 (and ((_ is Cons!1611) (toList!794 lt!49960)) (= (_1!1193 (h!2206 (toList!794 lt!49960))) lt!49961)))))

(assert (=> d!27339 (= (getValueByKey!150 (toList!794 lt!49960) lt!49961) e!65530)))

(declare-fun b!100648 () Bool)

(assert (=> b!100648 (= e!65531 None!154)))

(declare-fun b!100645 () Bool)

(assert (=> b!100645 (= e!65530 (Some!155 (_2!1193 (h!2206 (toList!794 lt!49960)))))))

(declare-fun b!100647 () Bool)

(assert (=> b!100647 (= e!65531 (getValueByKey!150 (t!5597 (toList!794 lt!49960)) lt!49961))))

(assert (= (and d!27339 c!17304) b!100645))

(assert (= (and d!27339 (not c!17304)) b!100646))

(assert (= (and b!100646 c!17305) b!100647))

(assert (= (and b!100646 (not c!17305)) b!100648))

(declare-fun m!111575 () Bool)

(assert (=> b!100647 m!111575))

(assert (=> d!26771 d!27339))

(declare-fun d!27341 () Bool)

(declare-fun res!50471 () Bool)

(declare-fun e!65532 () Bool)

(assert (=> d!27341 (=> res!50471 e!65532)))

(assert (=> d!27341 (= res!50471 (and ((_ is Cons!1611) (toList!794 lt!49947)) (= (_1!1193 (h!2206 (toList!794 lt!49947))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!27341 (= (containsKey!154 (toList!794 lt!49947) #b0000000000000000000000000000000000000000000000000000000000000000) e!65532)))

(declare-fun b!100649 () Bool)

(declare-fun e!65533 () Bool)

(assert (=> b!100649 (= e!65532 e!65533)))

(declare-fun res!50472 () Bool)

(assert (=> b!100649 (=> (not res!50472) (not e!65533))))

(assert (=> b!100649 (= res!50472 (and (or (not ((_ is Cons!1611) (toList!794 lt!49947))) (bvsle (_1!1193 (h!2206 (toList!794 lt!49947))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1611) (toList!794 lt!49947)) (bvslt (_1!1193 (h!2206 (toList!794 lt!49947))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!100650 () Bool)

(assert (=> b!100650 (= e!65533 (containsKey!154 (t!5597 (toList!794 lt!49947)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!27341 (not res!50471)) b!100649))

(assert (= (and b!100649 res!50472) b!100650))

(declare-fun m!111577 () Bool)

(assert (=> b!100650 m!111577))

(assert (=> d!26811 d!27341))

(declare-fun d!27343 () Bool)

(declare-fun e!65534 () Bool)

(assert (=> d!27343 e!65534))

(declare-fun res!50473 () Bool)

(assert (=> d!27343 (=> (not res!50473) (not e!65534))))

(declare-fun lt!50903 () ListLongMap!1557)

(assert (=> d!27343 (= res!50473 (contains!810 lt!50903 (_1!1193 (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(declare-fun lt!50905 () List!1615)

(assert (=> d!27343 (= lt!50903 (ListLongMap!1558 lt!50905))))

(declare-fun lt!50904 () Unit!3031)

(declare-fun lt!50902 () Unit!3031)

(assert (=> d!27343 (= lt!50904 lt!50902)))

(assert (=> d!27343 (= (getValueByKey!150 lt!50905 (_1!1193 (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))) (Some!155 (_2!1193 (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!27343 (= lt!50902 (lemmaContainsTupThenGetReturnValue!68 lt!50905 (_1!1193 (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (_2!1193 (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!27343 (= lt!50905 (insertStrictlySorted!70 (toList!794 (ite c!17037 call!10256 (ite c!17040 call!10254 call!10255))) (_1!1193 (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) (_2!1193 (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))))))

(assert (=> d!27343 (= (+!139 (ite c!17037 call!10256 (ite c!17040 call!10254 call!10255)) (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))) lt!50903)))

(declare-fun b!100651 () Bool)

(declare-fun res!50474 () Bool)

(assert (=> b!100651 (=> (not res!50474) (not e!65534))))

(assert (=> b!100651 (= res!50474 (= (getValueByKey!150 (toList!794 lt!50903) (_1!1193 (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16))))) (Some!155 (_2!1193 (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))))

(declare-fun b!100652 () Bool)

(assert (=> b!100652 (= e!65534 (contains!812 (toList!794 lt!50903) (ite (or c!17037 c!17040) (tuple2!2367 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16967 c!16973) (get!1304 (select (arr!2021 (_values!2485 (v!2817 (underlying!342 thiss!992)))) from!355) (dynLambda!381 (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2383 newMap!16))) (tuple2!2367 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2383 newMap!16)))))))

(assert (= (and d!27343 res!50473) b!100651))

(assert (= (and b!100651 res!50474) b!100652))

(declare-fun m!111579 () Bool)

(assert (=> d!27343 m!111579))

(declare-fun m!111581 () Bool)

(assert (=> d!27343 m!111581))

(declare-fun m!111583 () Bool)

(assert (=> d!27343 m!111583))

(declare-fun m!111585 () Bool)

(assert (=> d!27343 m!111585))

(declare-fun m!111587 () Bool)

(assert (=> b!100651 m!111587))

(declare-fun m!111589 () Bool)

(assert (=> b!100652 m!111589))

(assert (=> bm!10253 d!27343))

(declare-fun d!27345 () Bool)

(assert (=> d!27345 (= (get!1307 (getValueByKey!150 (toList!794 lt!49949) lt!49963)) (v!2821 (getValueByKey!150 (toList!794 lt!49949) lt!49963)))))

(assert (=> d!26777 d!27345))

(declare-fun b!100654 () Bool)

(declare-fun e!65535 () Option!156)

(declare-fun e!65536 () Option!156)

(assert (=> b!100654 (= e!65535 e!65536)))

(declare-fun c!17307 () Bool)

(assert (=> b!100654 (= c!17307 (and ((_ is Cons!1611) (toList!794 lt!49949)) (not (= (_1!1193 (h!2206 (toList!794 lt!49949))) lt!49963))))))

(declare-fun d!27347 () Bool)

(declare-fun c!17306 () Bool)

(assert (=> d!27347 (= c!17306 (and ((_ is Cons!1611) (toList!794 lt!49949)) (= (_1!1193 (h!2206 (toList!794 lt!49949))) lt!49963)))))

(assert (=> d!27347 (= (getValueByKey!150 (toList!794 lt!49949) lt!49963) e!65535)))

(declare-fun b!100656 () Bool)

(assert (=> b!100656 (= e!65536 None!154)))

(declare-fun b!100653 () Bool)

(assert (=> b!100653 (= e!65535 (Some!155 (_2!1193 (h!2206 (toList!794 lt!49949)))))))

(declare-fun b!100655 () Bool)

(assert (=> b!100655 (= e!65536 (getValueByKey!150 (t!5597 (toList!794 lt!49949)) lt!49963))))

(assert (= (and d!27347 c!17306) b!100653))

(assert (= (and d!27347 (not c!17306)) b!100654))

(assert (= (and b!100654 c!17307) b!100655))

(assert (= (and b!100654 (not c!17307)) b!100656))

(declare-fun m!111591 () Bool)

(assert (=> b!100655 m!111591))

(assert (=> d!26777 d!27347))

(declare-fun condMapEmpty!3785 () Bool)

(declare-fun mapDefault!3785 () ValueCell!975)

(assert (=> mapNonEmpty!3783 (= condMapEmpty!3785 (= mapRest!3783 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3785)))))

(declare-fun e!65538 () Bool)

(declare-fun mapRes!3785 () Bool)

(assert (=> mapNonEmpty!3783 (= tp!9633 (and e!65538 mapRes!3785))))

(declare-fun b!100658 () Bool)

(assert (=> b!100658 (= e!65538 tp_is_empty!2637)))

(declare-fun b!100657 () Bool)

(declare-fun e!65537 () Bool)

(assert (=> b!100657 (= e!65537 tp_is_empty!2637)))

(declare-fun mapIsEmpty!3785 () Bool)

(assert (=> mapIsEmpty!3785 mapRes!3785))

(declare-fun mapNonEmpty!3785 () Bool)

(declare-fun tp!9635 () Bool)

(assert (=> mapNonEmpty!3785 (= mapRes!3785 (and tp!9635 e!65537))))

(declare-fun mapRest!3785 () (Array (_ BitVec 32) ValueCell!975))

(declare-fun mapKey!3785 () (_ BitVec 32))

(declare-fun mapValue!3785 () ValueCell!975)

(assert (=> mapNonEmpty!3785 (= mapRest!3783 (store mapRest!3785 mapKey!3785 mapValue!3785))))

(assert (= (and mapNonEmpty!3783 condMapEmpty!3785) mapIsEmpty!3785))

(assert (= (and mapNonEmpty!3783 (not condMapEmpty!3785)) mapNonEmpty!3785))

(assert (= (and mapNonEmpty!3785 ((_ is ValueCellFull!975) mapValue!3785)) b!100657))

(assert (= (and mapNonEmpty!3783 ((_ is ValueCellFull!975) mapDefault!3785)) b!100658))

(declare-fun m!111593 () Bool)

(assert (=> mapNonEmpty!3785 m!111593))

(declare-fun condMapEmpty!3786 () Bool)

(declare-fun mapDefault!3786 () ValueCell!975)

(assert (=> mapNonEmpty!3784 (= condMapEmpty!3786 (= mapRest!3784 ((as const (Array (_ BitVec 32) ValueCell!975)) mapDefault!3786)))))

(declare-fun e!65540 () Bool)

(declare-fun mapRes!3786 () Bool)

(assert (=> mapNonEmpty!3784 (= tp!9634 (and e!65540 mapRes!3786))))

(declare-fun b!100660 () Bool)

(assert (=> b!100660 (= e!65540 tp_is_empty!2637)))

(declare-fun b!100659 () Bool)

(declare-fun e!65539 () Bool)

(assert (=> b!100659 (= e!65539 tp_is_empty!2637)))

(declare-fun mapIsEmpty!3786 () Bool)

(assert (=> mapIsEmpty!3786 mapRes!3786))

(declare-fun mapNonEmpty!3786 () Bool)

(declare-fun tp!9636 () Bool)

(assert (=> mapNonEmpty!3786 (= mapRes!3786 (and tp!9636 e!65539))))

(declare-fun mapKey!3786 () (_ BitVec 32))

(declare-fun mapValue!3786 () ValueCell!975)

(declare-fun mapRest!3786 () (Array (_ BitVec 32) ValueCell!975))

(assert (=> mapNonEmpty!3786 (= mapRest!3784 (store mapRest!3786 mapKey!3786 mapValue!3786))))

(assert (= (and mapNonEmpty!3784 condMapEmpty!3786) mapIsEmpty!3786))

(assert (= (and mapNonEmpty!3784 (not condMapEmpty!3786)) mapNonEmpty!3786))

(assert (= (and mapNonEmpty!3786 ((_ is ValueCellFull!975) mapValue!3786)) b!100659))

(assert (= (and mapNonEmpty!3784 ((_ is ValueCellFull!975) mapDefault!3786)) b!100660))

(declare-fun m!111595 () Bool)

(assert (=> mapNonEmpty!3786 m!111595))

(declare-fun b_lambda!4505 () Bool)

(assert (= b_lambda!4485 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4505)))

(declare-fun b_lambda!4507 () Bool)

(assert (= b_lambda!4495 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4507)))

(declare-fun b_lambda!4509 () Bool)

(assert (= b_lambda!4475 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4509)))

(declare-fun b_lambda!4511 () Bool)

(assert (= b_lambda!4487 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4511)))

(declare-fun b_lambda!4513 () Bool)

(assert (= b_lambda!4483 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4513)))

(declare-fun b_lambda!4515 () Bool)

(assert (= b_lambda!4491 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4515)))

(declare-fun b_lambda!4517 () Bool)

(assert (= b_lambda!4489 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4517)))

(declare-fun b_lambda!4519 () Bool)

(assert (= b_lambda!4473 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4519)))

(declare-fun b_lambda!4521 () Bool)

(assert (= b_lambda!4499 (or (and b!99123 b_free!2441) (and b!99136 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))))) b_lambda!4521)))

(declare-fun b_lambda!4523 () Bool)

(assert (= b_lambda!4497 (or (and b!99123 b_free!2441) (and b!99136 b_free!2443 (= (defaultEntry!2502 newMap!16) (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))))) b_lambda!4523)))

(declare-fun b_lambda!4525 () Bool)

(assert (= b_lambda!4493 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4525)))

(declare-fun b_lambda!4527 () Bool)

(assert (= b_lambda!4479 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4527)))

(declare-fun b_lambda!4529 () Bool)

(assert (= b_lambda!4477 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4529)))

(declare-fun b_lambda!4531 () Bool)

(assert (= b_lambda!4481 (or (and b!99123 b_free!2441 (= (defaultEntry!2502 (v!2817 (underlying!342 thiss!992))) (defaultEntry!2502 newMap!16))) (and b!99136 b_free!2443) b_lambda!4531)))

(check-sat (not b!100510) (not b!100205) (not b!100220) (not d!27027) (not b!100079) (not d!27203) (not bm!10320) (not b!99835) (not b!99859) (not b!99973) (not b!99831) (not d!27091) (not b!99844) (not b!100029) (not b_lambda!4471) (not d!27169) (not d!26961) (not b!100446) (not d!26991) (not b!100597) (not b!99801) (not b!100308) (not b!100536) (not b!100495) (not d!27013) (not b!100085) (not b!100389) (not b!100464) (not bm!10345) (not b!100007) (not d!27197) (not b!100279) (not bm!10321) (not b!100051) (not b!100634) (not d!27307) (not bm!10367) (not b!100435) (not b!99845) (not b!100397) (not b!99860) (not b!100598) (not b!100629) (not b!100410) (not d!27209) (not b!100581) (not d!27205) (not d!27265) (not d!26873) (not b!100551) b_and!6201 (not b!100261) (not b!100183) (not b!99814) (not b!99799) (not bm!10282) (not bm!10331) (not b!100244) (not b!100504) (not bm!10270) (not d!27343) (not b!100443) (not b!100249) (not d!26981) (not d!27331) (not b!99979) (not d!26947) (not d!27261) (not b!100318) (not bm!10329) (not b!99914) (not b!100199) (not b!100521) (not bm!10335) (not b!100313) (not d!27019) (not d!26953) (not b!100104) (not b!100582) (not b!100013) (not b!100184) (not b!100297) (not b_lambda!4513) (not b!100291) (not b!100061) (not b!100082) (not bm!10312) (not d!26959) (not b!99966) (not b!100314) (not b!100650) (not d!27011) (not b!99856) (not b_lambda!4469) (not bm!10293) (not d!27155) (not b!100402) (not b!100437) (not b!99992) (not d!26883) (not b!100060) (not d!27267) (not bm!10300) (not d!27139) (not b!100324) (not b!99951) (not b!100124) (not b!99824) (not b!99854) (not b!100321) (not d!26855) (not b!100087) (not b!100538) (not b!100093) (not d!26955) (not b!99900) (not b!100516) (not b!100109) (not b!100440) (not d!27047) (not b!100246) (not d!27143) (not d!26911) (not b!99838) (not d!26897) (not b!100531) (not b!100377) (not b!100586) (not b!99964) (not b!99907) (not b!100632) (not d!27243) (not b!100218) (not b!100522) (not d!27109) (not b!100340) (not b!100223) (not d!26971) (not b!100383) (not b!100518) (not bm!10322) (not d!27105) (not d!26967) (not b!100020) (not d!27087) (not b!100231) (not d!27089) (not d!27125) (not d!27269) (not d!26929) (not b!99971) (not d!26999) (not b_lambda!4465) (not bm!10313) (not b!100618) (not b!99853) (not b!100270) (not b!100480) (not b!100422) (not b!100024) (not b!99894) (not b!99815) (not bm!10310) (not bm!10316) (not b!99871) (not b!100485) (not d!26921) (not d!26943) (not b!100290) (not d!27225) (not d!27037) (not b!100035) (not b!100630) (not d!27053) (not b!99903) (not bm!10326) (not b!100483) (not d!27199) (not b!99955) (not b!100083) (not b!100426) (not d!27009) (not b!100309) (not d!27063) (not b!100468) (not b!99866) (not d!27039) (not d!27035) (not d!27161) (not b!99829) (not b!100635) (not b!99922) (not b!100042) (not d!26903) (not b!100306) (not b!100081) (not b!100004) (not d!27153) (not b_lambda!4505) (not b_lambda!4527) (not b!100206) (not b!100638) (not b!99882) (not b!99841) (not bm!10342) (not b!100351) (not b!100010) (not b!99808) (not bm!10337) (not bm!10303) (not b!100106) (not b!100442) (not d!27079) (not bm!10325) (not b!99905) (not b!100439) (not bm!10357) (not b!100292) (not b!99797) (not b!100069) (not b!99849) (not d!26977) (not b!100095) (not b!100515) (not bm!10277) (not b!100608) (not b!100285) (not b!100160) (not b!99811) (not b!100288) (not bm!10363) (not b!100411) (not b!100196) (not b!100332) (not bm!10375) (not bm!10311) (not d!27025) (not b_lambda!4501) (not b!100036) (not d!27051) (not d!26853) (not d!27201) (not d!26867) (not bm!10333) (not b!100182) (not d!27107) (not d!27099) (not b!100606) (not b!99954) (not b!100170) (not b!99895) (not d!26893) (not mapNonEmpty!3786) (not d!27075) (not d!27321) (not d!27217) (not d!26841) (not b!100294) (not d!27325) (not b_lambda!4509) (not b!100498) (not b!99999) (not b!100547) (not b_lambda!4511) (not d!27113) (not b!100540) (not b!100399) (not b!99919) (not b_lambda!4467) (not b!100513) (not bm!10370) (not bm!10371) (not b!100527) (not b!100273) (not b!100647) (not d!27279) (not b!100189) (not d!26847) (not d!27285) (not d!26857) (not b!100139) (not d!27057) (not d!27309) (not d!27165) (not b!100474) (not d!27227) (not b!100028) (not d!27291) (not d!27315) (not b!100616) (not b!100166) (not d!26975) (not b!100482) (not d!27015) (not d!26887) (not b!100395) (not d!26931) (not d!26861) (not b!100040) (not b!99917) (not d!26889) (not d!27023) (not d!27103) (not b!100115) (not b!99960) (not b!100241) (not d!26899) (not d!26989) (not b!100621) (not b!100098) (not d!26875) (not d!26963) (not b!100277) (not b!100130) (not b!100602) (not b!100607) (not bm!10272) (not b!100469) (not b!100138) (not d!27215) (not b!100419) (not b!100146) (not b!99897) (not d!27061) (not bm!10358) (not b!99819) (not d!27301) (not b!100488) (not d!26923) (not b_lambda!4531) (not d!27085) (not d!26983) (not b!99833) (not b!100416) (not b!100477) (not b!100129) (not bm!10368) (not d!27055) (not b!100652) (not d!27021) (not d!27149) (not b!100339) (not d!27185) (not b!100281) (not d!27129) (not d!27031) (not b!100120) (not b!100578) (not b!100101) (not d!27127) (not b!100421) (not d!27295) (not bm!10341) (not d!27083) (not b!100174) (not b!100181) (not b!100312) (not b!100267) (not d!26891) (not b!100301) (not d!27033) (not b!100615) (not bm!10349) (not d!27195) (not b!100140) (not d!27119) (not b!100344) (not b!100227) (not d!27067) (not b!100441) (not bm!10351) (not b!100508) (not b!100221) (not b_lambda!4463) (not b!100627) (not b!100259) (not b!99985) (not b!100381) (not d!26979) (not b!100591) (not b!100266) (not b!100141) (not bm!10364) (not d!27151) (not d!26833) (not bm!10307) (not bm!10346) (not b!99877) (not b!100074) (not b!100250) (not b!100456) (not bm!10280) (not b!100417) (not b!99909) (not b!100326) (not d!26935) (not bm!10348) (not b!100234) (not b!100103) (not b!100319) (not d!27017) (not d!27237) (not b!100289) (not b!99863) (not b!100225) (not b!100002) (not b!100064) (not d!27299) (not b_lambda!4507) (not b!100655) (not b!100404) (not d!26845) (not b!100238) (not mapNonEmpty!3785) (not d!27123) (not b_next!2441) (not d!27329) (not b!100137) (not b!100459) (not d!27093) (not b!100588) (not b!100072) (not bm!10296) (not b_lambda!4515) (not b!99913) (not d!27213) (not b!100453) (not b!100303) (not b!100001) (not d!27189) (not d!26985) (not b!100550) (not b!100116) (not b!100543) (not bm!10339) (not d!27163) (not bm!10266) (not b!100427) (not b!100080) (not b!99870) (not b!99864) (not b!99929) (not bm!10319) (not b!100430) (not b!100280) (not b!100191) (not d!27191) (not b!100640) (not b!99800) (not d!26907) (not d!26925) (not b!100045) (not b!99906) (not b!100445) (not b!99883) (not b!100125) (not b!100352) (not b!100167) (not d!27187) (not d!26937) (not d!27259) (not d!27173) (not b!100622) (not b!100128) (not b!100546) tp_is_empty!2637 (not b!100224) (not b!100529) (not d!27293) (not b_next!2443) (not bm!10353) (not b_lambda!4517) (not d!26881) (not b!100215) (not b!100388) (not d!27211) (not b!100333) (not b!100236) (not d!27247) (not b!100282) (not d!26843) (not b!100327) (not d!27145) (not d!26905) (not d!26949) (not b!100132) (not b!100387) (not b!100530) (not b!100276) (not b!100472) (not b!100633) (not d!27251) (not b!100424) (not d!27101) (not d!27097) (not b!100460) (not b!100037) (not b_lambda!4447) (not b!100038) (not b!100349) (not bm!10308) (not d!27135) (not b!100097) (not b_lambda!4521) (not b!99881) (not d!27223) (not d!27179) (not b!99876) (not d!27221) (not b!100528) (not b!100594) (not b!100418) (not b_lambda!4525) (not b!100219) (not b!100066) (not b!100264) (not d!26969) (not bm!10284) (not d!26933) (not b!100651) (not bm!10301) (not bm!10373) (not b!99981) (not b!100256) (not b!99908) (not b!100610) (not d!27181) (not b!100056) (not b!100346) (not d!26859) (not bm!10328) (not b!100542) (not b!100579) (not b!100286) (not d!27029) (not b!100552) (not b!100008) (not d!27317) (not bm!10276) (not b!100243) (not b!99996) (not bm!10285) (not b_lambda!4519) (not b!99984) (not b!100006) (not d!26941) (not d!27303) (not b!100112) (not b!100643) (not bm!10269) (not b_lambda!4503) (not bm!10304) (not b!99962) (not b!100433) (not d!27333) (not b!100016) (not b!100048) (not b!99823) (not b!99928) (not b!100384) (not b!100214) (not d!27171) (not b!100296) (not d!27249) (not d!26987) (not b!100088) (not bm!10283) (not b!100278) (not b!100420) (not b!100390) (not b!100127) (not d!27253) (not b!100497) (not b!100342) (not b!100075) b_and!6203 (not b!100274) (not b!100507) (not b!99911) (not b!100584) (not b!100471) (not b_lambda!4451) (not b!100407) (not b!100210) (not d!27219) (not b!100019) (not b!100052) (not b!100432) (not b!100613) (not d!27133) (not d!27071) (not d!27207) (not bm!10273) (not b!100202) (not bm!10355) (not b!99865) (not b!100317) (not b!99976) (not d!27241) (not b!99898) (not b!100226) (not b_lambda!4529) (not d!27095) (not b!100329) (not b!100316) (not b!100545) (not bm!10317) (not d!27283) (not b_lambda!4523) (not bm!10281) (not b!100405) (not d!27313) (not b!99978) (not b!100217) (not d!26849) (not b!100450) (not bm!10279) (not d!26927) (not d!27077) (not b!100310) (not b!100444) (not b!99805) (not b!100489) (not b!100475) (not d!27081))
(check-sat b_and!6201 b_and!6203 (not b_next!2441) (not b_next!2443))
