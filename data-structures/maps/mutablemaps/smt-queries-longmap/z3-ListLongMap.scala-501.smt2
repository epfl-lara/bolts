; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!11510 () Bool)

(assert start!11510)

(declare-fun b!95662 () Bool)

(declare-fun b_free!2405 () Bool)

(declare-fun b_next!2405 () Bool)

(assert (=> b!95662 (= b_free!2405 (not b_next!2405))))

(declare-fun tp!9492 () Bool)

(declare-fun b_and!5849 () Bool)

(assert (=> b!95662 (= tp!9492 b_and!5849)))

(declare-fun b!95665 () Bool)

(declare-fun b_free!2407 () Bool)

(declare-fun b_next!2407 () Bool)

(assert (=> b!95665 (= b_free!2407 (not b_next!2407))))

(declare-fun tp!9490 () Bool)

(declare-fun b_and!5851 () Bool)

(assert (=> b!95665 (= tp!9490 b_and!5851)))

(declare-fun b!95649 () Bool)

(declare-fun res!48334 () Bool)

(declare-fun e!62412 () Bool)

(assert (=> b!95649 (=> (not res!48334) (not e!62412))))

(declare-datatypes ((V!3139 0))(
  ( (V!3140 (val!1354 Int)) )
))
(declare-datatypes ((array!4214 0))(
  ( (array!4215 (arr!2002 (Array (_ BitVec 32) (_ BitVec 64))) (size!2251 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!966 0))(
  ( (ValueCellFull!966 (v!2778 V!3139)) (EmptyCell!966) )
))
(declare-datatypes ((array!4216 0))(
  ( (array!4217 (arr!2003 (Array (_ BitVec 32) ValueCell!966)) (size!2252 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!840 0))(
  ( (LongMapFixedSize!841 (defaultEntry!2457 Int) (mask!6542 (_ BitVec 32)) (extraKeys!2282 (_ BitVec 32)) (zeroValue!2342 V!3139) (minValue!2342 V!3139) (_size!469 (_ BitVec 32)) (_keys!4143 array!4214) (_values!2440 array!4216) (_vacant!469 (_ BitVec 32))) )
))
(declare-fun newMap!16 () LongMapFixedSize!840)

(declare-datatypes ((Cell!644 0))(
  ( (Cell!645 (v!2779 LongMapFixedSize!840)) )
))
(declare-datatypes ((LongMap!644 0))(
  ( (LongMap!645 (underlying!333 Cell!644)) )
))
(declare-fun thiss!992 () LongMap!644)

(assert (=> b!95649 (= res!48334 (bvsge (bvadd #b00000000000000000000000000000001 (mask!6542 newMap!16)) (_size!469 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun mapNonEmpty!3701 () Bool)

(declare-fun mapRes!3702 () Bool)

(declare-fun tp!9491 () Bool)

(declare-fun e!62421 () Bool)

(assert (=> mapNonEmpty!3701 (= mapRes!3702 (and tp!9491 e!62421))))

(declare-fun mapValue!3701 () ValueCell!966)

(declare-fun mapRest!3702 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapKey!3702 () (_ BitVec 32))

(assert (=> mapNonEmpty!3701 (= (arr!2003 (_values!2440 newMap!16)) (store mapRest!3702 mapKey!3702 mapValue!3701))))

(declare-fun b!95650 () Bool)

(declare-fun e!62413 () Bool)

(declare-fun e!62423 () Bool)

(assert (=> b!95650 (= e!62413 e!62423)))

(declare-fun mapNonEmpty!3702 () Bool)

(declare-fun mapRes!3701 () Bool)

(declare-fun tp!9489 () Bool)

(declare-fun e!62420 () Bool)

(assert (=> mapNonEmpty!3702 (= mapRes!3701 (and tp!9489 e!62420))))

(declare-fun mapKey!3701 () (_ BitVec 32))

(declare-fun mapRest!3701 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapValue!3702 () ValueCell!966)

(assert (=> mapNonEmpty!3702 (= (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (store mapRest!3701 mapKey!3701 mapValue!3702))))

(declare-fun b!95652 () Bool)

(declare-fun tp_is_empty!2619 () Bool)

(assert (=> b!95652 (= e!62420 tp_is_empty!2619)))

(declare-fun mapIsEmpty!3701 () Bool)

(assert (=> mapIsEmpty!3701 mapRes!3702))

(declare-fun b!95653 () Bool)

(declare-fun e!62425 () Bool)

(assert (=> b!95653 (= e!62425 tp_is_empty!2619)))

(declare-fun b!95654 () Bool)

(declare-fun e!62417 () Bool)

(assert (=> b!95654 (= e!62417 e!62413)))

(declare-fun b!95655 () Bool)

(assert (=> b!95655 (= e!62421 tp_is_empty!2619)))

(declare-fun b!95656 () Bool)

(declare-fun e!62411 () Bool)

(assert (=> b!95656 (= e!62411 (and (= (size!2252 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!6542 (v!2779 (underlying!333 thiss!992))))) (not (= (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (size!2252 (_values!2440 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!95657 () Bool)

(declare-fun e!62422 () Bool)

(declare-fun e!62424 () Bool)

(assert (=> b!95657 (= e!62422 (and e!62424 mapRes!3701))))

(declare-fun condMapEmpty!3702 () Bool)

(declare-fun mapDefault!3702 () ValueCell!966)

(assert (=> b!95657 (= condMapEmpty!3702 (= (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3702)))))

(declare-fun mapIsEmpty!3702 () Bool)

(assert (=> mapIsEmpty!3702 mapRes!3701))

(declare-fun b!95658 () Bool)

(declare-fun e!62426 () Bool)

(assert (=> b!95658 (= e!62426 (and e!62425 mapRes!3702))))

(declare-fun condMapEmpty!3701 () Bool)

(declare-fun mapDefault!3701 () ValueCell!966)

(assert (=> b!95658 (= condMapEmpty!3701 (= (arr!2003 (_values!2440 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3701)))))

(declare-fun b!95659 () Bool)

(declare-fun res!48337 () Bool)

(assert (=> b!95659 (=> (not res!48337) (not e!62412))))

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!95659 (= res!48337 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!95651 () Bool)

(declare-fun res!48332 () Bool)

(assert (=> b!95651 (=> (not res!48332) (not e!62412))))

(declare-fun valid!378 (LongMapFixedSize!840) Bool)

(assert (=> b!95651 (= res!48332 (valid!378 newMap!16))))

(declare-fun res!48336 () Bool)

(assert (=> start!11510 (=> (not res!48336) (not e!62412))))

(declare-fun valid!379 (LongMap!644) Bool)

(assert (=> start!11510 (= res!48336 (valid!379 thiss!992))))

(assert (=> start!11510 e!62412))

(assert (=> start!11510 e!62417))

(assert (=> start!11510 true))

(declare-fun e!62414 () Bool)

(assert (=> start!11510 e!62414))

(declare-fun b!95660 () Bool)

(declare-datatypes ((Unit!2887 0))(
  ( (Unit!2888) )
))
(declare-fun e!62416 () Unit!2887)

(declare-fun Unit!2889 () Unit!2887)

(assert (=> b!95660 (= e!62416 Unit!2889)))

(declare-fun lt!47604 () Unit!2887)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!94 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) (_ BitVec 32) Int) Unit!2887)

(assert (=> b!95660 (= lt!47604 (lemmaListMapContainsThenArrayContainsFrom!94 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!4214 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!95660 (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!47602 () Unit!2887)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!4214 (_ BitVec 32) (_ BitVec 32)) Unit!2887)

(assert (=> b!95660 (= lt!47602 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1602 0))(
  ( (Nil!1599) (Cons!1598 (h!2191 (_ BitVec 64)) (t!5528 List!1602)) )
))
(declare-fun arrayNoDuplicates!0 (array!4214 (_ BitVec 32) List!1602) Bool)

(assert (=> b!95660 (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) from!355 Nil!1599)))

(declare-fun lt!47605 () Unit!2887)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!4214 (_ BitVec 32) (_ BitVec 64) List!1602) Unit!2887)

(assert (=> b!95660 (= lt!47605 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599)))))

(assert (=> b!95660 false))

(declare-fun b!95661 () Bool)

(declare-fun e!62419 () Bool)

(assert (=> b!95661 (= e!62412 e!62419)))

(declare-fun res!48335 () Bool)

(assert (=> b!95661 (=> (not res!48335) (not e!62419))))

(declare-datatypes ((tuple2!2336 0))(
  ( (tuple2!2337 (_1!1178 (_ BitVec 64)) (_2!1178 V!3139)) )
))
(declare-datatypes ((List!1603 0))(
  ( (Nil!1600) (Cons!1599 (h!2192 tuple2!2336) (t!5529 List!1603)) )
))
(declare-datatypes ((ListLongMap!1541 0))(
  ( (ListLongMap!1542 (toList!786 List!1603)) )
))
(declare-fun lt!47603 () ListLongMap!1541)

(declare-fun lt!47607 () ListLongMap!1541)

(assert (=> b!95661 (= res!48335 (and (= lt!47603 lt!47607) (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1246 (LongMapFixedSize!840) ListLongMap!1541)

(assert (=> b!95661 (= lt!47607 (map!1246 newMap!16))))

(declare-fun getCurrentListMap!467 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) Int) ListLongMap!1541)

(assert (=> b!95661 (= lt!47603 (getCurrentListMap!467 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun array_inv!1201 (array!4214) Bool)

(declare-fun array_inv!1202 (array!4216) Bool)

(assert (=> b!95662 (= e!62423 (and tp!9492 tp_is_empty!2619 (array_inv!1201 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (array_inv!1202 (_values!2440 (v!2779 (underlying!333 thiss!992)))) e!62422))))

(declare-fun b!95663 () Bool)

(declare-fun res!48333 () Bool)

(assert (=> b!95663 (=> (not res!48333) (not e!62411))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!95663 (= res!48333 (validMask!0 (mask!6542 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun b!95664 () Bool)

(declare-fun Unit!2890 () Unit!2887)

(assert (=> b!95664 (= e!62416 Unit!2890)))

(assert (=> b!95665 (= e!62414 (and tp!9490 tp_is_empty!2619 (array_inv!1201 (_keys!4143 newMap!16)) (array_inv!1202 (_values!2440 newMap!16)) e!62426))))

(declare-fun b!95666 () Bool)

(assert (=> b!95666 (= e!62419 e!62411)))

(declare-fun res!48331 () Bool)

(assert (=> b!95666 (=> (not res!48331) (not e!62411))))

(declare-datatypes ((tuple2!2338 0))(
  ( (tuple2!2339 (_1!1179 Bool) (_2!1179 LongMapFixedSize!840)) )
))
(declare-fun lt!47606 () tuple2!2338)

(assert (=> b!95666 (= res!48331 (and (_1!1179 lt!47606) (bvsle from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!47601 () Unit!2887)

(assert (=> b!95666 (= lt!47601 e!62416)))

(declare-fun c!16073 () Bool)

(declare-fun contains!800 (ListLongMap!1541 (_ BitVec 64)) Bool)

(assert (=> b!95666 (= c!16073 (contains!800 lt!47607 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun update!143 (LongMapFixedSize!840 (_ BitVec 64) V!3139) tuple2!2338)

(declare-fun get!1286 (ValueCell!966 V!3139) V!3139)

(declare-fun dynLambda!375 (Int (_ BitVec 64)) V!3139)

(assert (=> b!95666 (= lt!47606 (update!143 newMap!16 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!95667 () Bool)

(assert (=> b!95667 (= e!62424 tp_is_empty!2619)))

(assert (= (and start!11510 res!48336) b!95659))

(assert (= (and b!95659 res!48337) b!95651))

(assert (= (and b!95651 res!48332) b!95649))

(assert (= (and b!95649 res!48334) b!95661))

(assert (= (and b!95661 res!48335) b!95666))

(assert (= (and b!95666 c!16073) b!95660))

(assert (= (and b!95666 (not c!16073)) b!95664))

(assert (= (and b!95666 res!48331) b!95663))

(assert (= (and b!95663 res!48333) b!95656))

(assert (= (and b!95657 condMapEmpty!3702) mapIsEmpty!3702))

(assert (= (and b!95657 (not condMapEmpty!3702)) mapNonEmpty!3702))

(get-info :version)

(assert (= (and mapNonEmpty!3702 ((_ is ValueCellFull!966) mapValue!3702)) b!95652))

(assert (= (and b!95657 ((_ is ValueCellFull!966) mapDefault!3702)) b!95667))

(assert (= b!95662 b!95657))

(assert (= b!95650 b!95662))

(assert (= b!95654 b!95650))

(assert (= start!11510 b!95654))

(assert (= (and b!95658 condMapEmpty!3701) mapIsEmpty!3701))

(assert (= (and b!95658 (not condMapEmpty!3701)) mapNonEmpty!3701))

(assert (= (and mapNonEmpty!3701 ((_ is ValueCellFull!966) mapValue!3701)) b!95655))

(assert (= (and b!95658 ((_ is ValueCellFull!966) mapDefault!3701)) b!95653))

(assert (= b!95665 b!95658))

(assert (= start!11510 b!95665))

(declare-fun b_lambda!4247 () Bool)

(assert (=> (not b_lambda!4247) (not b!95666)))

(declare-fun t!5525 () Bool)

(declare-fun tb!1893 () Bool)

(assert (=> (and b!95662 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))) t!5525) tb!1893))

(declare-fun result!3219 () Bool)

(assert (=> tb!1893 (= result!3219 tp_is_empty!2619)))

(assert (=> b!95666 t!5525))

(declare-fun b_and!5853 () Bool)

(assert (= b_and!5849 (and (=> t!5525 result!3219) b_and!5853)))

(declare-fun tb!1895 () Bool)

(declare-fun t!5527 () Bool)

(assert (=> (and b!95665 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))) t!5527) tb!1895))

(declare-fun result!3223 () Bool)

(assert (= result!3223 result!3219))

(assert (=> b!95666 t!5527))

(declare-fun b_and!5855 () Bool)

(assert (= b_and!5851 (and (=> t!5527 result!3223) b_and!5855)))

(declare-fun m!103725 () Bool)

(assert (=> b!95662 m!103725))

(declare-fun m!103727 () Bool)

(assert (=> b!95662 m!103727))

(declare-fun m!103729 () Bool)

(assert (=> b!95665 m!103729))

(declare-fun m!103731 () Bool)

(assert (=> b!95665 m!103731))

(declare-fun m!103733 () Bool)

(assert (=> b!95663 m!103733))

(declare-fun m!103735 () Bool)

(assert (=> mapNonEmpty!3702 m!103735))

(declare-fun m!103737 () Bool)

(assert (=> start!11510 m!103737))

(declare-fun m!103739 () Bool)

(assert (=> mapNonEmpty!3701 m!103739))

(declare-fun m!103741 () Bool)

(assert (=> b!95660 m!103741))

(declare-fun m!103743 () Bool)

(assert (=> b!95660 m!103743))

(declare-fun m!103745 () Bool)

(assert (=> b!95660 m!103745))

(declare-fun m!103747 () Bool)

(assert (=> b!95660 m!103747))

(assert (=> b!95660 m!103745))

(assert (=> b!95660 m!103745))

(declare-fun m!103749 () Bool)

(assert (=> b!95660 m!103749))

(assert (=> b!95660 m!103745))

(declare-fun m!103751 () Bool)

(assert (=> b!95660 m!103751))

(declare-fun m!103753 () Bool)

(assert (=> b!95651 m!103753))

(assert (=> b!95661 m!103745))

(declare-fun m!103755 () Bool)

(assert (=> b!95661 m!103755))

(declare-fun m!103757 () Bool)

(assert (=> b!95661 m!103757))

(assert (=> b!95666 m!103745))

(declare-fun m!103759 () Bool)

(assert (=> b!95666 m!103759))

(declare-fun m!103761 () Bool)

(assert (=> b!95666 m!103761))

(declare-fun m!103763 () Bool)

(assert (=> b!95666 m!103763))

(declare-fun m!103765 () Bool)

(assert (=> b!95666 m!103765))

(assert (=> b!95666 m!103745))

(assert (=> b!95666 m!103763))

(assert (=> b!95666 m!103745))

(assert (=> b!95666 m!103765))

(declare-fun m!103767 () Bool)

(assert (=> b!95666 m!103767))

(assert (=> b!95666 m!103761))

(check-sat (not mapNonEmpty!3701) (not b_lambda!4247) b_and!5855 (not b_next!2405) (not b!95660) tp_is_empty!2619 (not b_next!2407) (not start!11510) b_and!5853 (not b!95662) (not b!95666) (not b!95661) (not mapNonEmpty!3702) (not b!95651) (not b!95665) (not b!95663))
(check-sat b_and!5853 b_and!5855 (not b_next!2405) (not b_next!2407))
(get-model)

(declare-fun b_lambda!4251 () Bool)

(assert (= b_lambda!4247 (or (and b!95662 b_free!2405) (and b!95665 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))))) b_lambda!4251)))

(check-sat (not mapNonEmpty!3701) b_and!5855 (not b_next!2405) (not b!95660) tp_is_empty!2619 (not b_next!2407) (not start!11510) b_and!5853 (not b!95662) (not b!95666) (not b!95661) (not mapNonEmpty!3702) (not b_lambda!4251) (not b!95651) (not b!95665) (not b!95663))
(check-sat b_and!5853 b_and!5855 (not b_next!2405) (not b_next!2407))
(get-model)

(declare-fun d!25255 () Bool)

(declare-fun e!62480 () Bool)

(assert (=> d!25255 e!62480))

(declare-fun res!48361 () Bool)

(assert (=> d!25255 (=> res!48361 e!62480)))

(declare-fun lt!47639 () Bool)

(assert (=> d!25255 (= res!48361 (not lt!47639))))

(declare-fun lt!47637 () Bool)

(assert (=> d!25255 (= lt!47639 lt!47637)))

(declare-fun lt!47638 () Unit!2887)

(declare-fun e!62479 () Unit!2887)

(assert (=> d!25255 (= lt!47638 e!62479)))

(declare-fun c!16079 () Bool)

(assert (=> d!25255 (= c!16079 lt!47637)))

(declare-fun containsKey!152 (List!1603 (_ BitVec 64)) Bool)

(assert (=> d!25255 (= lt!47637 (containsKey!152 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25255 (= (contains!800 lt!47607 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) lt!47639)))

(declare-fun b!95735 () Bool)

(declare-fun lt!47640 () Unit!2887)

(assert (=> b!95735 (= e!62479 lt!47640)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!101 (List!1603 (_ BitVec 64)) Unit!2887)

(assert (=> b!95735 (= lt!47640 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-datatypes ((Option!154 0))(
  ( (Some!153 (v!2783 V!3139)) (None!152) )
))
(declare-fun isDefined!102 (Option!154) Bool)

(declare-fun getValueByKey!148 (List!1603 (_ BitVec 64)) Option!154)

(assert (=> b!95735 (isDefined!102 (getValueByKey!148 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!95736 () Bool)

(declare-fun Unit!2891 () Unit!2887)

(assert (=> b!95736 (= e!62479 Unit!2891)))

(declare-fun b!95737 () Bool)

(assert (=> b!95737 (= e!62480 (isDefined!102 (getValueByKey!148 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (= (and d!25255 c!16079) b!95735))

(assert (= (and d!25255 (not c!16079)) b!95736))

(assert (= (and d!25255 (not res!48361)) b!95737))

(assert (=> d!25255 m!103745))

(declare-fun m!103813 () Bool)

(assert (=> d!25255 m!103813))

(assert (=> b!95735 m!103745))

(declare-fun m!103815 () Bool)

(assert (=> b!95735 m!103815))

(assert (=> b!95735 m!103745))

(declare-fun m!103817 () Bool)

(assert (=> b!95735 m!103817))

(assert (=> b!95735 m!103817))

(declare-fun m!103819 () Bool)

(assert (=> b!95735 m!103819))

(assert (=> b!95737 m!103745))

(assert (=> b!95737 m!103817))

(assert (=> b!95737 m!103817))

(assert (=> b!95737 m!103819))

(assert (=> b!95666 d!25255))

(declare-fun b!95818 () Bool)

(declare-fun c!16109 () Bool)

(declare-datatypes ((SeekEntryResult!262 0))(
  ( (MissingZero!262 (index!3190 (_ BitVec 32))) (Found!262 (index!3191 (_ BitVec 32))) (Intermediate!262 (undefined!1074 Bool) (index!3192 (_ BitVec 32)) (x!12810 (_ BitVec 32))) (Undefined!262) (MissingVacant!262 (index!3193 (_ BitVec 32))) )
))
(declare-fun lt!47707 () SeekEntryResult!262)

(assert (=> b!95818 (= c!16109 ((_ is MissingVacant!262) lt!47707))))

(declare-fun e!62533 () tuple2!2338)

(declare-fun e!62536 () tuple2!2338)

(assert (=> b!95818 (= e!62533 e!62536)))

(declare-fun b!95819 () Bool)

(declare-fun e!62523 () Bool)

(declare-fun lt!47715 () SeekEntryResult!262)

(assert (=> b!95819 (= e!62523 ((_ is Undefined!262) lt!47715))))

(declare-fun call!9678 () ListLongMap!1541)

(declare-fun c!16116 () Bool)

(declare-fun lt!47718 () tuple2!2338)

(declare-fun bm!9662 () Bool)

(assert (=> bm!9662 (= call!9678 (map!1246 (ite c!16116 newMap!16 (_2!1179 lt!47718))))))

(declare-fun call!9672 () Unit!2887)

(declare-fun bm!9663 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!40 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) Int) Unit!2887)

(assert (=> bm!9663 (= call!9672 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(declare-fun b!95820 () Bool)

(declare-fun e!62530 () Bool)

(declare-fun lt!47703 () SeekEntryResult!262)

(assert (=> b!95820 (= e!62530 ((_ is Undefined!262) lt!47703))))

(declare-fun b!95821 () Bool)

(declare-fun lt!47697 () Unit!2887)

(declare-fun lt!47698 () Unit!2887)

(assert (=> b!95821 (= lt!47697 lt!47698)))

(declare-fun call!9687 () ListLongMap!1541)

(assert (=> b!95821 (contains!800 call!9687 (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707)))))

(declare-fun lt!47712 () array!4216)

(declare-fun lemmaValidKeyInArrayIsInListMap!98 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) Int) Unit!2887)

(assert (=> b!95821 (= lt!47698 (lemmaValidKeyInArrayIsInListMap!98 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3191 lt!47707) (defaultEntry!2457 newMap!16)))))

(assert (=> b!95821 (= lt!47712 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))))))

(declare-fun lt!47702 () Unit!2887)

(declare-fun lt!47719 () Unit!2887)

(assert (=> b!95821 (= lt!47702 lt!47719)))

(declare-fun call!9669 () ListLongMap!1541)

(assert (=> b!95821 (= call!9669 (getCurrentListMap!467 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!40 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) (_ BitVec 64) V!3139 Int) Unit!2887)

(assert (=> b!95821 (= lt!47719 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3191 lt!47707) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47711 () Unit!2887)

(declare-fun e!62539 () Unit!2887)

(assert (=> b!95821 (= lt!47711 e!62539)))

(declare-fun c!16117 () Bool)

(declare-fun call!9673 () Bool)

(assert (=> b!95821 (= c!16117 call!9673)))

(declare-fun e!62537 () tuple2!2338)

(assert (=> b!95821 (= e!62537 (tuple2!2339 true (LongMapFixedSize!841 (defaultEntry!2457 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (_size!469 newMap!16) (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (_vacant!469 newMap!16))))))

(declare-fun call!9670 () Bool)

(declare-fun bm!9664 () Bool)

(assert (=> bm!9664 (= call!9670 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!9665 () Bool)

(declare-fun call!9671 () SeekEntryResult!262)

(declare-fun call!9668 () SeekEntryResult!262)

(assert (=> bm!9665 (= call!9671 call!9668)))

(declare-fun b!95822 () Bool)

(declare-fun lt!47701 () Unit!2887)

(declare-fun lt!47721 () Unit!2887)

(assert (=> b!95822 (= lt!47701 lt!47721)))

(declare-fun call!9681 () ListLongMap!1541)

(declare-fun call!9683 () ListLongMap!1541)

(assert (=> b!95822 (= call!9681 call!9683)))

(declare-fun lt!47696 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!40 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 V!3139 Int) Unit!2887)

(assert (=> b!95822 (= lt!47721 (lemmaChangeLongMinValueKeyThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(assert (=> b!95822 (= lt!47696 (bvor (extraKeys!2282 newMap!16) #b00000000000000000000000000000010))))

(declare-fun e!62535 () tuple2!2338)

(assert (=> b!95822 (= e!62535 (tuple2!2339 true (LongMapFixedSize!841 (defaultEntry!2457 newMap!16) (mask!6542 newMap!16) (bvor (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!469 newMap!16) (_keys!4143 newMap!16) (_values!2440 newMap!16) (_vacant!469 newMap!16))))))

(declare-fun bm!9666 () Bool)

(declare-fun call!9674 () SeekEntryResult!262)

(assert (=> bm!9666 (= call!9674 call!9668)))

(declare-fun b!95823 () Bool)

(declare-fun lt!47714 () tuple2!2338)

(declare-fun call!9686 () tuple2!2338)

(assert (=> b!95823 (= lt!47714 call!9686)))

(assert (=> b!95823 (= e!62537 (tuple2!2339 (_1!1179 lt!47714) (_2!1179 lt!47714)))))

(declare-fun b!95824 () Bool)

(declare-fun e!62528 () Bool)

(declare-fun call!9667 () Bool)

(assert (=> b!95824 (= e!62528 (not call!9667))))

(declare-fun e!62543 () Bool)

(declare-fun b!95825 () Bool)

(declare-fun call!9684 () ListLongMap!1541)

(declare-fun +!137 (ListLongMap!1541 tuple2!2336) ListLongMap!1541)

(assert (=> b!95825 (= e!62543 (= call!9684 (+!137 call!9678 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!9667 () Bool)

(declare-fun call!9685 () Bool)

(declare-fun call!9665 () Bool)

(assert (=> bm!9667 (= call!9685 call!9665)))

(declare-fun b!95826 () Bool)

(declare-fun e!62531 () ListLongMap!1541)

(assert (=> b!95826 (= e!62531 call!9687)))

(declare-fun b!95827 () Bool)

(declare-fun e!62541 () Bool)

(assert (=> b!95827 (= e!62541 (not call!9667))))

(declare-fun b!95828 () Bool)

(declare-fun res!48403 () Bool)

(assert (=> b!95828 (= res!48403 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3193 lt!47703)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!62525 () Bool)

(assert (=> b!95828 (=> (not res!48403) (not e!62525))))

(declare-fun bm!9668 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4214 (_ BitVec 32)) SeekEntryResult!262)

(assert (=> bm!9668 (= call!9668 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!95829 () Bool)

(declare-fun e!62532 () Bool)

(declare-fun e!62542 () Bool)

(assert (=> b!95829 (= e!62532 e!62542)))

(assert (=> b!95829 (= c!16116 (_1!1179 lt!47718))))

(declare-fun bm!9669 () Bool)

(declare-fun updateHelperNewKey!40 (LongMapFixedSize!840 (_ BitVec 64) V!3139 (_ BitVec 32)) tuple2!2338)

(assert (=> bm!9669 (= call!9686 (updateHelperNewKey!40 newMap!16 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707))))))

(declare-fun b!95830 () Bool)

(assert (=> b!95830 (= e!62530 e!62525)))

(declare-fun res!48401 () Bool)

(declare-fun call!9675 () Bool)

(assert (=> b!95830 (= res!48401 call!9675)))

(assert (=> b!95830 (=> (not res!48401) (not e!62525))))

(declare-fun b!95831 () Bool)

(declare-fun res!48402 () Bool)

(declare-fun call!9676 () Bool)

(assert (=> b!95831 (= res!48402 call!9676)))

(declare-fun e!62527 () Bool)

(assert (=> b!95831 (=> (not res!48402) (not e!62527))))

(declare-fun b!95832 () Bool)

(assert (=> b!95832 (= e!62536 e!62537)))

(declare-fun c!16112 () Bool)

(assert (=> b!95832 (= c!16112 ((_ is MissingZero!262) lt!47707))))

(declare-fun b!95833 () Bool)

(declare-fun res!48391 () Bool)

(assert (=> b!95833 (= res!48391 call!9685)))

(declare-fun e!62526 () Bool)

(assert (=> b!95833 (=> (not res!48391) (not e!62526))))

(declare-fun bm!9670 () Bool)

(declare-fun c!16111 () Bool)

(declare-fun c!16107 () Bool)

(assert (=> bm!9670 (= c!16111 c!16107)))

(assert (=> bm!9670 (= call!9673 (contains!800 e!62531 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun d!25257 () Bool)

(assert (=> d!25257 e!62532))

(declare-fun res!48399 () Bool)

(assert (=> d!25257 (=> (not res!48399) (not e!62532))))

(assert (=> d!25257 (= res!48399 (valid!378 (_2!1179 lt!47718)))))

(declare-fun e!62538 () tuple2!2338)

(assert (=> d!25257 (= lt!47718 e!62538)))

(declare-fun c!16115 () Bool)

(assert (=> d!25257 (= c!16115 (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvneg (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (=> d!25257 (valid!378 newMap!16)))

(assert (=> d!25257 (= (update!143 newMap!16 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!47718)))

(declare-fun bm!9671 () Bool)

(assert (=> bm!9671 (= call!9676 call!9665)))

(declare-fun b!95834 () Bool)

(declare-fun Unit!2892 () Unit!2887)

(assert (=> b!95834 (= e!62539 Unit!2892)))

(declare-fun lt!47713 () Unit!2887)

(assert (=> b!95834 (= lt!47713 call!9672)))

(assert (=> b!95834 (= lt!47715 call!9674)))

(declare-fun c!16113 () Bool)

(assert (=> b!95834 (= c!16113 ((_ is MissingZero!262) lt!47715))))

(declare-fun e!62534 () Bool)

(assert (=> b!95834 e!62534))

(declare-fun lt!47716 () Unit!2887)

(assert (=> b!95834 (= lt!47716 lt!47713)))

(assert (=> b!95834 false))

(declare-fun b!95835 () Bool)

(declare-fun e!62529 () Unit!2887)

(declare-fun Unit!2893 () Unit!2887)

(assert (=> b!95835 (= e!62529 Unit!2893)))

(declare-fun lt!47700 () Unit!2887)

(declare-fun call!9688 () Unit!2887)

(assert (=> b!95835 (= lt!47700 call!9688)))

(declare-fun lt!47699 () SeekEntryResult!262)

(assert (=> b!95835 (= lt!47699 call!9671)))

(declare-fun res!48397 () Bool)

(assert (=> b!95835 (= res!48397 ((_ is Found!262) lt!47699))))

(assert (=> b!95835 (=> (not res!48397) (not e!62527))))

(assert (=> b!95835 e!62527))

(declare-fun lt!47704 () Unit!2887)

(assert (=> b!95835 (= lt!47704 lt!47700)))

(assert (=> b!95835 false))

(declare-fun b!95836 () Bool)

(declare-fun lt!47695 () Unit!2887)

(assert (=> b!95836 (= e!62539 lt!47695)))

(assert (=> b!95836 (= lt!47695 call!9688)))

(declare-fun lt!47706 () SeekEntryResult!262)

(assert (=> b!95836 (= lt!47706 call!9674)))

(declare-fun res!48390 () Bool)

(assert (=> b!95836 (= res!48390 ((_ is Found!262) lt!47706))))

(assert (=> b!95836 (=> (not res!48390) (not e!62526))))

(assert (=> b!95836 e!62526))

(declare-fun bm!9672 () Bool)

(declare-fun call!9682 () ListLongMap!1541)

(assert (=> bm!9672 (= call!9683 call!9682)))

(declare-fun c!16114 () Bool)

(declare-fun bm!9673 () Bool)

(assert (=> bm!9673 (= call!9682 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9674 () Bool)

(assert (=> bm!9674 (= call!9675 call!9676)))

(declare-fun b!95837 () Bool)

(declare-fun call!9666 () Bool)

(assert (=> b!95837 (= e!62525 (not call!9666))))

(declare-fun bm!9675 () Bool)

(declare-fun call!9679 () ListLongMap!1541)

(declare-fun call!9680 () ListLongMap!1541)

(assert (=> bm!9675 (= call!9679 call!9680)))

(declare-fun c!16118 () Bool)

(declare-fun c!16108 () Bool)

(declare-fun bm!9676 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!9676 (= call!9665 (inRange!0 (ite c!16107 (ite c!16108 (index!3191 lt!47699) (ite c!16118 (index!3190 lt!47703) (index!3193 lt!47703))) (ite c!16117 (index!3191 lt!47706) (ite c!16113 (index!3190 lt!47715) (index!3193 lt!47715)))) (mask!6542 newMap!16)))))

(declare-fun b!95838 () Bool)

(assert (=> b!95838 (= e!62538 e!62533)))

(assert (=> b!95838 (= lt!47707 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (=> b!95838 (= c!16107 ((_ is Undefined!262) lt!47707))))

(declare-fun b!95839 () Bool)

(declare-fun c!16106 () Bool)

(assert (=> b!95839 (= c!16106 ((_ is MissingVacant!262) lt!47703))))

(declare-fun e!62540 () Bool)

(assert (=> b!95839 (= e!62540 e!62530)))

(declare-fun b!95840 () Bool)

(declare-fun lt!47720 () tuple2!2338)

(assert (=> b!95840 (= e!62536 (tuple2!2339 (_1!1179 lt!47720) (_2!1179 lt!47720)))))

(assert (=> b!95840 (= lt!47720 call!9686)))

(declare-fun bm!9677 () Bool)

(assert (=> bm!9677 (= call!9669 (+!137 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682) (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!95841 () Bool)

(declare-fun lt!47709 () Unit!2887)

(declare-fun lt!47705 () Unit!2887)

(assert (=> b!95841 (= lt!47709 lt!47705)))

(assert (=> b!95841 (= call!9681 call!9679)))

(declare-fun lt!47708 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!40 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 V!3139 Int) Unit!2887)

(assert (=> b!95841 (= lt!47705 (lemmaChangeZeroKeyThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47708 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) (defaultEntry!2457 newMap!16)))))

(assert (=> b!95841 (= lt!47708 (bvor (extraKeys!2282 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!95841 (= e!62535 (tuple2!2339 true (LongMapFixedSize!841 (defaultEntry!2457 newMap!16) (mask!6542 newMap!16) (bvor (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) (_size!469 newMap!16) (_keys!4143 newMap!16) (_values!2440 newMap!16) (_vacant!469 newMap!16))))))

(declare-fun bm!9678 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!40 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) Int) Unit!2887)

(assert (=> bm!9678 (= call!9688 (lemmaInListMapThenSeekEntryOrOpenFindsIt!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(declare-fun b!95842 () Bool)

(declare-fun res!48400 () Bool)

(assert (=> b!95842 (= res!48400 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3193 lt!47715)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!95842 (=> (not res!48400) (not e!62528))))

(declare-fun b!95843 () Bool)

(declare-fun lt!47717 () Unit!2887)

(assert (=> b!95843 (= e!62529 lt!47717)))

(assert (=> b!95843 (= lt!47717 call!9672)))

(assert (=> b!95843 (= lt!47703 call!9671)))

(assert (=> b!95843 (= c!16118 ((_ is MissingZero!262) lt!47703))))

(assert (=> b!95843 e!62540))

(declare-fun bm!9679 () Bool)

(assert (=> bm!9679 (= call!9666 call!9670)))

(declare-fun bm!9680 () Bool)

(assert (=> bm!9680 (= call!9667 call!9670)))

(declare-fun b!95844 () Bool)

(declare-fun res!48396 () Bool)

(declare-fun e!62524 () Bool)

(assert (=> b!95844 (=> (not res!48396) (not e!62524))))

(assert (=> b!95844 (= res!48396 call!9675)))

(assert (=> b!95844 (= e!62540 e!62524)))

(declare-fun bm!9681 () Bool)

(assert (=> bm!9681 (= call!9687 call!9680)))

(declare-fun b!95845 () Bool)

(assert (=> b!95845 (= e!62523 e!62528)))

(declare-fun res!48393 () Bool)

(declare-fun call!9677 () Bool)

(assert (=> b!95845 (= res!48393 call!9677)))

(assert (=> b!95845 (=> (not res!48393) (not e!62528))))

(declare-fun b!95846 () Bool)

(declare-fun c!16110 () Bool)

(assert (=> b!95846 (= c!16110 ((_ is MissingVacant!262) lt!47715))))

(assert (=> b!95846 (= e!62534 e!62523)))

(declare-fun b!95847 () Bool)

(assert (=> b!95847 (= e!62531 call!9682)))

(declare-fun bm!9682 () Bool)

(assert (=> bm!9682 (= call!9680 (getCurrentListMap!467 (_keys!4143 newMap!16) (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712) (mask!6542 newMap!16) (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun b!95848 () Bool)

(assert (=> b!95848 (= e!62538 e!62535)))

(assert (=> b!95848 (= c!16114 (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!95849 () Bool)

(assert (=> b!95849 (= e!62527 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47699)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!95850 () Bool)

(assert (=> b!95850 (= e!62526 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47706)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!95851 () Bool)

(assert (=> b!95851 (= e!62524 (not call!9666))))

(declare-fun bm!9683 () Bool)

(assert (=> bm!9683 (= call!9677 call!9685)))

(declare-fun b!95852 () Bool)

(assert (=> b!95852 (= e!62542 (= call!9678 call!9684))))

(declare-fun b!95853 () Bool)

(declare-fun lt!47710 () Unit!2887)

(assert (=> b!95853 (= lt!47710 e!62529)))

(assert (=> b!95853 (= c!16108 call!9673)))

(assert (=> b!95853 (= e!62533 (tuple2!2339 false newMap!16))))

(declare-fun bm!9684 () Bool)

(assert (=> bm!9684 (= call!9684 (map!1246 (ite c!16116 (_2!1179 lt!47718) newMap!16)))))

(declare-fun b!95854 () Bool)

(assert (=> b!95854 (= e!62542 e!62543)))

(declare-fun res!48392 () Bool)

(assert (=> b!95854 (= res!48392 (contains!800 call!9684 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> b!95854 (=> (not res!48392) (not e!62543))))

(declare-fun b!95855 () Bool)

(declare-fun res!48394 () Bool)

(assert (=> b!95855 (=> (not res!48394) (not e!62524))))

(assert (=> b!95855 (= res!48394 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3190 lt!47703)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!9685 () Bool)

(assert (=> bm!9685 (= call!9681 call!9669)))

(declare-fun b!95856 () Bool)

(declare-fun res!48395 () Bool)

(assert (=> b!95856 (=> (not res!48395) (not e!62541))))

(assert (=> b!95856 (= res!48395 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3190 lt!47715)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!95857 () Bool)

(declare-fun res!48398 () Bool)

(assert (=> b!95857 (=> (not res!48398) (not e!62541))))

(assert (=> b!95857 (= res!48398 call!9677)))

(assert (=> b!95857 (= e!62534 e!62541)))

(assert (= (and d!25257 c!16115) b!95848))

(assert (= (and d!25257 (not c!16115)) b!95838))

(assert (= (and b!95848 c!16114) b!95841))

(assert (= (and b!95848 (not c!16114)) b!95822))

(assert (= (or b!95841 b!95822) bm!9672))

(assert (= (or b!95841 b!95822) bm!9675))

(assert (= (or b!95841 b!95822) bm!9685))

(assert (= (and b!95838 c!16107) b!95853))

(assert (= (and b!95838 (not c!16107)) b!95818))

(assert (= (and b!95853 c!16108) b!95835))

(assert (= (and b!95853 (not c!16108)) b!95843))

(assert (= (and b!95835 res!48397) b!95831))

(assert (= (and b!95831 res!48402) b!95849))

(assert (= (and b!95843 c!16118) b!95844))

(assert (= (and b!95843 (not c!16118)) b!95839))

(assert (= (and b!95844 res!48396) b!95855))

(assert (= (and b!95855 res!48394) b!95851))

(assert (= (and b!95839 c!16106) b!95830))

(assert (= (and b!95839 (not c!16106)) b!95820))

(assert (= (and b!95830 res!48401) b!95828))

(assert (= (and b!95828 res!48403) b!95837))

(assert (= (or b!95844 b!95830) bm!9674))

(assert (= (or b!95851 b!95837) bm!9679))

(assert (= (or b!95831 bm!9674) bm!9671))

(assert (= (or b!95835 b!95843) bm!9665))

(assert (= (and b!95818 c!16109) b!95840))

(assert (= (and b!95818 (not c!16109)) b!95832))

(assert (= (and b!95832 c!16112) b!95823))

(assert (= (and b!95832 (not c!16112)) b!95821))

(assert (= (and b!95821 c!16117) b!95836))

(assert (= (and b!95821 (not c!16117)) b!95834))

(assert (= (and b!95836 res!48390) b!95833))

(assert (= (and b!95833 res!48391) b!95850))

(assert (= (and b!95834 c!16113) b!95857))

(assert (= (and b!95834 (not c!16113)) b!95846))

(assert (= (and b!95857 res!48398) b!95856))

(assert (= (and b!95856 res!48395) b!95827))

(assert (= (and b!95846 c!16110) b!95845))

(assert (= (and b!95846 (not c!16110)) b!95819))

(assert (= (and b!95845 res!48393) b!95842))

(assert (= (and b!95842 res!48400) b!95824))

(assert (= (or b!95857 b!95845) bm!9683))

(assert (= (or b!95827 b!95824) bm!9680))

(assert (= (or b!95833 bm!9683) bm!9667))

(assert (= (or b!95836 b!95834) bm!9666))

(assert (= (or b!95840 b!95823) bm!9669))

(assert (= (or b!95843 b!95834) bm!9663))

(assert (= (or bm!9671 bm!9667) bm!9676))

(assert (= (or bm!9665 bm!9666) bm!9668))

(assert (= (or b!95835 b!95836) bm!9678))

(assert (= (or b!95853 b!95821) bm!9681))

(assert (= (or bm!9679 bm!9680) bm!9664))

(assert (= (or b!95853 b!95821) bm!9670))

(assert (= (and bm!9670 c!16111) b!95826))

(assert (= (and bm!9670 (not c!16111)) b!95847))

(assert (= (or bm!9675 bm!9681) bm!9682))

(assert (= (or bm!9672 b!95847 b!95821) bm!9673))

(assert (= (or bm!9685 b!95821) bm!9677))

(assert (= (and d!25257 res!48399) b!95829))

(assert (= (and b!95829 c!16116) b!95854))

(assert (= (and b!95829 (not c!16116)) b!95852))

(assert (= (and b!95854 res!48392) b!95825))

(assert (= (or b!95854 b!95825 b!95852) bm!9684))

(assert (= (or b!95825 b!95852) bm!9662))

(assert (=> b!95854 m!103745))

(declare-fun m!103821 () Bool)

(assert (=> b!95854 m!103821))

(declare-fun m!103823 () Bool)

(assert (=> b!95849 m!103823))

(declare-fun m!103825 () Bool)

(assert (=> b!95842 m!103825))

(assert (=> b!95838 m!103745))

(declare-fun m!103827 () Bool)

(assert (=> b!95838 m!103827))

(assert (=> bm!9668 m!103745))

(assert (=> bm!9668 m!103827))

(assert (=> bm!9663 m!103745))

(declare-fun m!103829 () Bool)

(assert (=> bm!9663 m!103829))

(assert (=> bm!9664 m!103745))

(declare-fun m!103831 () Bool)

(assert (=> bm!9664 m!103831))

(declare-fun m!103833 () Bool)

(assert (=> b!95825 m!103833))

(assert (=> bm!9670 m!103745))

(declare-fun m!103835 () Bool)

(assert (=> bm!9670 m!103835))

(assert (=> bm!9678 m!103745))

(declare-fun m!103837 () Bool)

(assert (=> bm!9678 m!103837))

(assert (=> b!95841 m!103765))

(declare-fun m!103839 () Bool)

(assert (=> b!95841 m!103839))

(assert (=> bm!9669 m!103745))

(assert (=> bm!9669 m!103765))

(declare-fun m!103841 () Bool)

(assert (=> bm!9669 m!103841))

(declare-fun m!103843 () Bool)

(assert (=> bm!9677 m!103843))

(declare-fun m!103845 () Bool)

(assert (=> bm!9662 m!103845))

(declare-fun m!103847 () Bool)

(assert (=> bm!9676 m!103847))

(declare-fun m!103849 () Bool)

(assert (=> b!95850 m!103849))

(declare-fun m!103851 () Bool)

(assert (=> b!95855 m!103851))

(declare-fun m!103853 () Bool)

(assert (=> bm!9684 m!103853))

(declare-fun m!103855 () Bool)

(assert (=> bm!9673 m!103855))

(declare-fun m!103857 () Bool)

(assert (=> b!95828 m!103857))

(declare-fun m!103859 () Bool)

(assert (=> d!25257 m!103859))

(assert (=> d!25257 m!103753))

(declare-fun m!103861 () Bool)

(assert (=> b!95821 m!103861))

(declare-fun m!103863 () Bool)

(assert (=> b!95821 m!103863))

(declare-fun m!103865 () Bool)

(assert (=> b!95821 m!103865))

(declare-fun m!103867 () Bool)

(assert (=> b!95821 m!103867))

(declare-fun m!103869 () Bool)

(assert (=> b!95821 m!103869))

(assert (=> b!95821 m!103863))

(assert (=> b!95821 m!103745))

(assert (=> b!95821 m!103765))

(declare-fun m!103871 () Bool)

(assert (=> b!95821 m!103871))

(assert (=> b!95822 m!103765))

(declare-fun m!103873 () Bool)

(assert (=> b!95822 m!103873))

(declare-fun m!103875 () Bool)

(assert (=> bm!9682 m!103875))

(declare-fun m!103877 () Bool)

(assert (=> b!95856 m!103877))

(assert (=> b!95666 d!25257))

(declare-fun d!25259 () Bool)

(declare-fun c!16121 () Bool)

(assert (=> d!25259 (= c!16121 ((_ is ValueCellFull!966) (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun e!62546 () V!3139)

(assert (=> d!25259 (= (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!62546)))

(declare-fun b!95862 () Bool)

(declare-fun get!1287 (ValueCell!966 V!3139) V!3139)

(assert (=> b!95862 (= e!62546 (get!1287 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!95863 () Bool)

(declare-fun get!1288 (ValueCell!966 V!3139) V!3139)

(assert (=> b!95863 (= e!62546 (get!1288 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25259 c!16121) b!95862))

(assert (= (and d!25259 (not c!16121)) b!95863))

(assert (=> b!95862 m!103761))

(assert (=> b!95862 m!103763))

(declare-fun m!103879 () Bool)

(assert (=> b!95862 m!103879))

(assert (=> b!95863 m!103761))

(assert (=> b!95863 m!103763))

(declare-fun m!103881 () Bool)

(assert (=> b!95863 m!103881))

(assert (=> b!95666 d!25259))

(declare-fun d!25261 () Bool)

(assert (=> d!25261 (= (array_inv!1201 (_keys!4143 newMap!16)) (bvsge (size!2251 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!95665 d!25261))

(declare-fun d!25263 () Bool)

(assert (=> d!25263 (= (array_inv!1202 (_values!2440 newMap!16)) (bvsge (size!2252 (_values!2440 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!95665 d!25263))

(declare-fun d!25265 () Bool)

(assert (=> d!25265 (not (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!47724 () Unit!2887)

(declare-fun choose!68 (array!4214 (_ BitVec 32) (_ BitVec 64) List!1602) Unit!2887)

(assert (=> d!25265 (= lt!47724 (choose!68 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599)))))

(assert (=> d!25265 (bvslt (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!25265 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599)) lt!47724)))

(declare-fun bs!3933 () Bool)

(assert (= bs!3933 d!25265))

(assert (=> bs!3933 m!103745))

(assert (=> bs!3933 m!103749))

(assert (=> bs!3933 m!103745))

(declare-fun m!103883 () Bool)

(assert (=> bs!3933 m!103883))

(assert (=> b!95660 d!25265))

(declare-fun d!25267 () Bool)

(assert (=> d!25267 (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) from!355 Nil!1599)))

(declare-fun lt!47727 () Unit!2887)

(declare-fun choose!39 (array!4214 (_ BitVec 32) (_ BitVec 32)) Unit!2887)

(assert (=> d!25267 (= lt!47727 (choose!39 (_keys!4143 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!25267 (bvslt (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!25267 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000000 from!355) lt!47727)))

(declare-fun bs!3934 () Bool)

(assert (= bs!3934 d!25267))

(assert (=> bs!3934 m!103743))

(declare-fun m!103885 () Bool)

(assert (=> bs!3934 m!103885))

(assert (=> b!95660 d!25267))

(declare-fun d!25269 () Bool)

(declare-fun res!48408 () Bool)

(declare-fun e!62551 () Bool)

(assert (=> d!25269 (=> res!48408 e!62551)))

(assert (=> d!25269 (= res!48408 (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25269 (= (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!62551)))

(declare-fun b!95868 () Bool)

(declare-fun e!62552 () Bool)

(assert (=> b!95868 (= e!62551 e!62552)))

(declare-fun res!48409 () Bool)

(assert (=> b!95868 (=> (not res!48409) (not e!62552))))

(assert (=> b!95868 (= res!48409 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!95869 () Bool)

(assert (=> b!95869 (= e!62552 (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!25269 (not res!48408)) b!95868))

(assert (= (and b!95868 res!48409) b!95869))

(declare-fun m!103887 () Bool)

(assert (=> d!25269 m!103887))

(assert (=> b!95869 m!103745))

(declare-fun m!103889 () Bool)

(assert (=> b!95869 m!103889))

(assert (=> b!95660 d!25269))

(declare-fun d!25271 () Bool)

(declare-fun e!62555 () Bool)

(assert (=> d!25271 e!62555))

(declare-fun c!16124 () Bool)

(assert (=> d!25271 (= c!16124 (and (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!47730 () Unit!2887)

(declare-fun choose!581 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) (_ BitVec 32) Int) Unit!2887)

(assert (=> d!25271 (= lt!47730 (choose!581 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))))))

(assert (=> d!25271 (validMask!0 (mask!6542 (v!2779 (underlying!333 thiss!992))))))

(assert (=> d!25271 (= (lemmaListMapContainsThenArrayContainsFrom!94 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))) lt!47730)))

(declare-fun b!95874 () Bool)

(assert (=> b!95874 (= e!62555 (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!95875 () Bool)

(assert (=> b!95875 (= e!62555 (ite (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!25271 c!16124) b!95874))

(assert (= (and d!25271 (not c!16124)) b!95875))

(assert (=> d!25271 m!103745))

(declare-fun m!103891 () Bool)

(assert (=> d!25271 m!103891))

(assert (=> d!25271 m!103733))

(assert (=> b!95874 m!103745))

(assert (=> b!95874 m!103749))

(assert (=> b!95660 d!25271))

(declare-fun b!95886 () Bool)

(declare-fun e!62564 () Bool)

(declare-fun e!62567 () Bool)

(assert (=> b!95886 (= e!62564 e!62567)))

(declare-fun c!16127 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!95886 (= c!16127 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!95887 () Bool)

(declare-fun call!9691 () Bool)

(assert (=> b!95887 (= e!62567 call!9691)))

(declare-fun b!95888 () Bool)

(declare-fun e!62565 () Bool)

(declare-fun contains!801 (List!1602 (_ BitVec 64)) Bool)

(assert (=> b!95888 (= e!62565 (contains!801 Nil!1599 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!95889 () Bool)

(assert (=> b!95889 (= e!62567 call!9691)))

(declare-fun d!25273 () Bool)

(declare-fun res!48417 () Bool)

(declare-fun e!62566 () Bool)

(assert (=> d!25273 (=> res!48417 e!62566)))

(assert (=> d!25273 (= res!48417 (bvsge from!355 (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> d!25273 (= (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) from!355 Nil!1599) e!62566)))

(declare-fun b!95890 () Bool)

(assert (=> b!95890 (= e!62566 e!62564)))

(declare-fun res!48418 () Bool)

(assert (=> b!95890 (=> (not res!48418) (not e!62564))))

(assert (=> b!95890 (= res!48418 (not e!62565))))

(declare-fun res!48416 () Bool)

(assert (=> b!95890 (=> (not res!48416) (not e!62565))))

(assert (=> b!95890 (= res!48416 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun bm!9688 () Bool)

(assert (=> bm!9688 (= call!9691 (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)))))

(assert (= (and d!25273 (not res!48417)) b!95890))

(assert (= (and b!95890 res!48416) b!95888))

(assert (= (and b!95890 res!48418) b!95886))

(assert (= (and b!95886 c!16127) b!95887))

(assert (= (and b!95886 (not c!16127)) b!95889))

(assert (= (or b!95887 b!95889) bm!9688))

(assert (=> b!95886 m!103745))

(assert (=> b!95886 m!103745))

(declare-fun m!103893 () Bool)

(assert (=> b!95886 m!103893))

(assert (=> b!95888 m!103745))

(assert (=> b!95888 m!103745))

(declare-fun m!103895 () Bool)

(assert (=> b!95888 m!103895))

(assert (=> b!95890 m!103745))

(assert (=> b!95890 m!103745))

(assert (=> b!95890 m!103893))

(assert (=> bm!9688 m!103745))

(declare-fun m!103897 () Bool)

(assert (=> bm!9688 m!103897))

(assert (=> b!95660 d!25273))

(declare-fun d!25275 () Bool)

(assert (=> d!25275 (= (array_inv!1201 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvsge (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!95662 d!25275))

(declare-fun d!25277 () Bool)

(assert (=> d!25277 (= (array_inv!1202 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvsge (size!2252 (_values!2440 (v!2779 (underlying!333 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!95662 d!25277))

(declare-fun d!25279 () Bool)

(assert (=> d!25279 (= (map!1246 newMap!16) (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bs!3935 () Bool)

(assert (= bs!3935 d!25279))

(declare-fun m!103899 () Bool)

(assert (=> bs!3935 m!103899))

(assert (=> b!95661 d!25279))

(declare-fun d!25281 () Bool)

(declare-fun e!62606 () Bool)

(assert (=> d!25281 e!62606))

(declare-fun res!48440 () Bool)

(assert (=> d!25281 (=> (not res!48440) (not e!62606))))

(assert (=> d!25281 (= res!48440 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun lt!47784 () ListLongMap!1541)

(declare-fun lt!47777 () ListLongMap!1541)

(assert (=> d!25281 (= lt!47784 lt!47777)))

(declare-fun lt!47776 () Unit!2887)

(declare-fun e!62598 () Unit!2887)

(assert (=> d!25281 (= lt!47776 e!62598)))

(declare-fun c!16142 () Bool)

(declare-fun e!62603 () Bool)

(assert (=> d!25281 (= c!16142 e!62603)))

(declare-fun res!48442 () Bool)

(assert (=> d!25281 (=> (not res!48442) (not e!62603))))

(assert (=> d!25281 (= res!48442 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun e!62604 () ListLongMap!1541)

(assert (=> d!25281 (= lt!47777 e!62604)))

(declare-fun c!16145 () Bool)

(assert (=> d!25281 (= c!16145 (and (not (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25281 (validMask!0 (mask!6542 (v!2779 (underlying!333 thiss!992))))))

(assert (=> d!25281 (= (getCurrentListMap!467 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))) lt!47784)))

(declare-fun b!95933 () Bool)

(declare-fun e!62601 () ListLongMap!1541)

(assert (=> b!95933 (= e!62604 e!62601)))

(declare-fun c!16140 () Bool)

(assert (=> b!95933 (= c!16140 (and (not (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!95934 () Bool)

(declare-fun e!62595 () Bool)

(declare-fun apply!91 (ListLongMap!1541 (_ BitVec 64)) V!3139)

(assert (=> b!95934 (= e!62595 (= (apply!91 lt!47784 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun b!95935 () Bool)

(declare-fun e!62600 () Bool)

(assert (=> b!95935 (= e!62606 e!62600)))

(declare-fun c!16141 () Bool)

(assert (=> b!95935 (= c!16141 (not (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!95936 () Bool)

(declare-fun call!9708 () ListLongMap!1541)

(assert (=> b!95936 (= e!62604 (+!137 call!9708 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun bm!9703 () Bool)

(declare-fun call!9707 () ListLongMap!1541)

(declare-fun call!9712 () ListLongMap!1541)

(assert (=> bm!9703 (= call!9707 call!9712)))

(declare-fun b!95937 () Bool)

(declare-fun c!16143 () Bool)

(assert (=> b!95937 (= c!16143 (and (not (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62605 () ListLongMap!1541)

(assert (=> b!95937 (= e!62601 e!62605)))

(declare-fun b!95938 () Bool)

(declare-fun res!48437 () Bool)

(assert (=> b!95938 (=> (not res!48437) (not e!62606))))

(declare-fun e!62602 () Bool)

(assert (=> b!95938 (= res!48437 e!62602)))

(declare-fun res!48441 () Bool)

(assert (=> b!95938 (=> res!48441 e!62602)))

(declare-fun e!62594 () Bool)

(assert (=> b!95938 (= res!48441 (not e!62594))))

(declare-fun res!48443 () Bool)

(assert (=> b!95938 (=> (not res!48443) (not e!62594))))

(assert (=> b!95938 (= res!48443 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun bm!9704 () Bool)

(declare-fun call!9709 () ListLongMap!1541)

(assert (=> bm!9704 (= call!9708 (+!137 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709)) (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!95939 () Bool)

(assert (=> b!95939 (= e!62603 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!95940 () Bool)

(declare-fun e!62599 () Bool)

(assert (=> b!95940 (= e!62602 e!62599)))

(declare-fun res!48438 () Bool)

(assert (=> b!95940 (=> (not res!48438) (not e!62599))))

(assert (=> b!95940 (= res!48438 (contains!800 lt!47784 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!95940 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!95941 () Bool)

(declare-fun call!9710 () Bool)

(assert (=> b!95941 (= e!62600 (not call!9710))))

(declare-fun b!95942 () Bool)

(assert (=> b!95942 (= e!62605 call!9709)))

(declare-fun bm!9705 () Bool)

(assert (=> bm!9705 (= call!9709 call!9707)))

(declare-fun b!95943 () Bool)

(declare-fun e!62596 () Bool)

(declare-fun call!9706 () Bool)

(assert (=> b!95943 (= e!62596 (not call!9706))))

(declare-fun bm!9706 () Bool)

(assert (=> bm!9706 (= call!9706 (contains!800 lt!47784 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!95944 () Bool)

(assert (=> b!95944 (= e!62599 (= (apply!91 lt!47784 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!95944 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_values!2440 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> b!95944 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!95945 () Bool)

(declare-fun Unit!2894 () Unit!2887)

(assert (=> b!95945 (= e!62598 Unit!2894)))

(declare-fun bm!9707 () Bool)

(declare-fun call!9711 () ListLongMap!1541)

(assert (=> bm!9707 (= call!9711 call!9708)))

(declare-fun b!95946 () Bool)

(declare-fun res!48444 () Bool)

(assert (=> b!95946 (=> (not res!48444) (not e!62606))))

(assert (=> b!95946 (= res!48444 e!62596)))

(declare-fun c!16144 () Bool)

(assert (=> b!95946 (= c!16144 (not (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!95947 () Bool)

(assert (=> b!95947 (= e!62601 call!9711)))

(declare-fun b!95948 () Bool)

(declare-fun lt!47788 () Unit!2887)

(assert (=> b!95948 (= e!62598 lt!47788)))

(declare-fun lt!47782 () ListLongMap!1541)

(declare-fun getCurrentListMapNoExtraKeys!101 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) Int) ListLongMap!1541)

(assert (=> b!95948 (= lt!47782 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun lt!47792 () (_ BitVec 64))

(assert (=> b!95948 (= lt!47792 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47781 () (_ BitVec 64))

(assert (=> b!95948 (= lt!47781 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!47783 () Unit!2887)

(declare-fun addStillContains!67 (ListLongMap!1541 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2887)

(assert (=> b!95948 (= lt!47783 (addStillContains!67 lt!47782 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47781))))

(assert (=> b!95948 (contains!800 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47781)))

(declare-fun lt!47791 () Unit!2887)

(assert (=> b!95948 (= lt!47791 lt!47783)))

(declare-fun lt!47785 () ListLongMap!1541)

(assert (=> b!95948 (= lt!47785 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun lt!47789 () (_ BitVec 64))

(assert (=> b!95948 (= lt!47789 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47780 () (_ BitVec 64))

(assert (=> b!95948 (= lt!47780 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!47790 () Unit!2887)

(declare-fun addApplyDifferent!67 (ListLongMap!1541 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2887)

(assert (=> b!95948 (= lt!47790 (addApplyDifferent!67 lt!47785 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47780))))

(assert (=> b!95948 (= (apply!91 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47780) (apply!91 lt!47785 lt!47780))))

(declare-fun lt!47778 () Unit!2887)

(assert (=> b!95948 (= lt!47778 lt!47790)))

(declare-fun lt!47775 () ListLongMap!1541)

(assert (=> b!95948 (= lt!47775 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun lt!47786 () (_ BitVec 64))

(assert (=> b!95948 (= lt!47786 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47794 () (_ BitVec 64))

(assert (=> b!95948 (= lt!47794 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!47796 () Unit!2887)

(assert (=> b!95948 (= lt!47796 (addApplyDifferent!67 lt!47775 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47794))))

(assert (=> b!95948 (= (apply!91 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47794) (apply!91 lt!47775 lt!47794))))

(declare-fun lt!47795 () Unit!2887)

(assert (=> b!95948 (= lt!47795 lt!47796)))

(declare-fun lt!47793 () ListLongMap!1541)

(assert (=> b!95948 (= lt!47793 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun lt!47787 () (_ BitVec 64))

(assert (=> b!95948 (= lt!47787 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47779 () (_ BitVec 64))

(assert (=> b!95948 (= lt!47779 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!95948 (= lt!47788 (addApplyDifferent!67 lt!47793 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47779))))

(assert (=> b!95948 (= (apply!91 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47779) (apply!91 lt!47793 lt!47779))))

(declare-fun b!95949 () Bool)

(assert (=> b!95949 (= e!62600 e!62595)))

(declare-fun res!48445 () Bool)

(assert (=> b!95949 (= res!48445 call!9710)))

(assert (=> b!95949 (=> (not res!48445) (not e!62595))))

(declare-fun b!95950 () Bool)

(assert (=> b!95950 (= e!62594 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun bm!9708 () Bool)

(assert (=> bm!9708 (= call!9712 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun bm!9709 () Bool)

(assert (=> bm!9709 (= call!9710 (contains!800 lt!47784 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!95951 () Bool)

(assert (=> b!95951 (= e!62605 call!9711)))

(declare-fun b!95952 () Bool)

(declare-fun e!62597 () Bool)

(assert (=> b!95952 (= e!62597 (= (apply!91 lt!47784 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun b!95953 () Bool)

(assert (=> b!95953 (= e!62596 e!62597)))

(declare-fun res!48439 () Bool)

(assert (=> b!95953 (= res!48439 call!9706)))

(assert (=> b!95953 (=> (not res!48439) (not e!62597))))

(assert (= (and d!25281 c!16145) b!95936))

(assert (= (and d!25281 (not c!16145)) b!95933))

(assert (= (and b!95933 c!16140) b!95947))

(assert (= (and b!95933 (not c!16140)) b!95937))

(assert (= (and b!95937 c!16143) b!95951))

(assert (= (and b!95937 (not c!16143)) b!95942))

(assert (= (or b!95951 b!95942) bm!9705))

(assert (= (or b!95947 bm!9705) bm!9703))

(assert (= (or b!95947 b!95951) bm!9707))

(assert (= (or b!95936 bm!9703) bm!9708))

(assert (= (or b!95936 bm!9707) bm!9704))

(assert (= (and d!25281 res!48442) b!95939))

(assert (= (and d!25281 c!16142) b!95948))

(assert (= (and d!25281 (not c!16142)) b!95945))

(assert (= (and d!25281 res!48440) b!95938))

(assert (= (and b!95938 res!48443) b!95950))

(assert (= (and b!95938 (not res!48441)) b!95940))

(assert (= (and b!95940 res!48438) b!95944))

(assert (= (and b!95938 res!48437) b!95946))

(assert (= (and b!95946 c!16144) b!95953))

(assert (= (and b!95946 (not c!16144)) b!95943))

(assert (= (and b!95953 res!48439) b!95952))

(assert (= (or b!95953 b!95943) bm!9706))

(assert (= (and b!95946 res!48444) b!95935))

(assert (= (and b!95935 c!16141) b!95949))

(assert (= (and b!95935 (not c!16141)) b!95941))

(assert (= (and b!95949 res!48445) b!95934))

(assert (= (or b!95949 b!95941) bm!9709))

(declare-fun b_lambda!4253 () Bool)

(assert (=> (not b_lambda!4253) (not b!95944)))

(assert (=> b!95944 t!5525))

(declare-fun b_and!5865 () Bool)

(assert (= b_and!5853 (and (=> t!5525 result!3219) b_and!5865)))

(assert (=> b!95944 t!5527))

(declare-fun b_and!5867 () Bool)

(assert (= b_and!5855 (and (=> t!5527 result!3223) b_and!5867)))

(assert (=> b!95940 m!103887))

(assert (=> b!95940 m!103887))

(declare-fun m!103901 () Bool)

(assert (=> b!95940 m!103901))

(declare-fun m!103903 () Bool)

(assert (=> b!95948 m!103903))

(declare-fun m!103905 () Bool)

(assert (=> b!95948 m!103905))

(declare-fun m!103907 () Bool)

(assert (=> b!95948 m!103907))

(declare-fun m!103909 () Bool)

(assert (=> b!95948 m!103909))

(declare-fun m!103911 () Bool)

(assert (=> b!95948 m!103911))

(assert (=> b!95948 m!103907))

(declare-fun m!103913 () Bool)

(assert (=> b!95948 m!103913))

(declare-fun m!103915 () Bool)

(assert (=> b!95948 m!103915))

(declare-fun m!103917 () Bool)

(assert (=> b!95948 m!103917))

(declare-fun m!103919 () Bool)

(assert (=> b!95948 m!103919))

(declare-fun m!103921 () Bool)

(assert (=> b!95948 m!103921))

(declare-fun m!103923 () Bool)

(assert (=> b!95948 m!103923))

(declare-fun m!103925 () Bool)

(assert (=> b!95948 m!103925))

(assert (=> b!95948 m!103917))

(declare-fun m!103927 () Bool)

(assert (=> b!95948 m!103927))

(assert (=> b!95948 m!103919))

(assert (=> b!95948 m!103887))

(declare-fun m!103929 () Bool)

(assert (=> b!95948 m!103929))

(assert (=> b!95948 m!103923))

(declare-fun m!103931 () Bool)

(assert (=> b!95948 m!103931))

(declare-fun m!103933 () Bool)

(assert (=> b!95948 m!103933))

(declare-fun m!103935 () Bool)

(assert (=> b!95944 m!103935))

(assert (=> b!95944 m!103887))

(declare-fun m!103937 () Bool)

(assert (=> b!95944 m!103937))

(assert (=> b!95944 m!103935))

(assert (=> b!95944 m!103763))

(declare-fun m!103939 () Bool)

(assert (=> b!95944 m!103939))

(assert (=> b!95944 m!103887))

(assert (=> b!95944 m!103763))

(declare-fun m!103941 () Bool)

(assert (=> b!95936 m!103941))

(assert (=> d!25281 m!103733))

(declare-fun m!103943 () Bool)

(assert (=> bm!9706 m!103943))

(assert (=> b!95939 m!103887))

(assert (=> b!95939 m!103887))

(declare-fun m!103945 () Bool)

(assert (=> b!95939 m!103945))

(declare-fun m!103947 () Bool)

(assert (=> bm!9704 m!103947))

(declare-fun m!103949 () Bool)

(assert (=> b!95952 m!103949))

(declare-fun m!103951 () Bool)

(assert (=> bm!9709 m!103951))

(declare-fun m!103953 () Bool)

(assert (=> b!95934 m!103953))

(assert (=> b!95950 m!103887))

(assert (=> b!95950 m!103887))

(assert (=> b!95950 m!103945))

(assert (=> bm!9708 m!103925))

(assert (=> b!95661 d!25281))

(declare-fun d!25283 () Bool)

(assert (=> d!25283 (= (validMask!0 (mask!6542 (v!2779 (underlying!333 thiss!992)))) (and (or (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000001111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000011111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000001111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000011111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000001111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000011111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000001111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000011111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000001111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000011111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000001111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000011111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000111111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000001111111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000011111111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000111111111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000001111111111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000011111111111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000111111111111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00001111111111111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00011111111111111111111111111111) (= (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!95663 d!25283))

(declare-fun d!25285 () Bool)

(assert (=> d!25285 (= (valid!379 thiss!992) (valid!378 (v!2779 (underlying!333 thiss!992))))))

(declare-fun bs!3936 () Bool)

(assert (= bs!3936 d!25285))

(declare-fun m!103955 () Bool)

(assert (=> bs!3936 m!103955))

(assert (=> start!11510 d!25285))

(declare-fun d!25287 () Bool)

(declare-fun res!48452 () Bool)

(declare-fun e!62609 () Bool)

(assert (=> d!25287 (=> (not res!48452) (not e!62609))))

(declare-fun simpleValid!66 (LongMapFixedSize!840) Bool)

(assert (=> d!25287 (= res!48452 (simpleValid!66 newMap!16))))

(assert (=> d!25287 (= (valid!378 newMap!16) e!62609)))

(declare-fun b!95960 () Bool)

(declare-fun res!48453 () Bool)

(assert (=> b!95960 (=> (not res!48453) (not e!62609))))

(declare-fun arrayCountValidKeys!0 (array!4214 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!95960 (= res!48453 (= (arrayCountValidKeys!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (_size!469 newMap!16)))))

(declare-fun b!95961 () Bool)

(declare-fun res!48454 () Bool)

(assert (=> b!95961 (=> (not res!48454) (not e!62609))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4214 (_ BitVec 32)) Bool)

(assert (=> b!95961 (= res!48454 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!95962 () Bool)

(assert (=> b!95962 (= e!62609 (arrayNoDuplicates!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 Nil!1599))))

(assert (= (and d!25287 res!48452) b!95960))

(assert (= (and b!95960 res!48453) b!95961))

(assert (= (and b!95961 res!48454) b!95962))

(declare-fun m!103957 () Bool)

(assert (=> d!25287 m!103957))

(declare-fun m!103959 () Bool)

(assert (=> b!95960 m!103959))

(declare-fun m!103961 () Bool)

(assert (=> b!95961 m!103961))

(declare-fun m!103963 () Bool)

(assert (=> b!95962 m!103963))

(assert (=> b!95651 d!25287))

(declare-fun condMapEmpty!3711 () Bool)

(declare-fun mapDefault!3711 () ValueCell!966)

(assert (=> mapNonEmpty!3702 (= condMapEmpty!3711 (= mapRest!3701 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3711)))))

(declare-fun e!62615 () Bool)

(declare-fun mapRes!3711 () Bool)

(assert (=> mapNonEmpty!3702 (= tp!9489 (and e!62615 mapRes!3711))))

(declare-fun mapNonEmpty!3711 () Bool)

(declare-fun tp!9507 () Bool)

(declare-fun e!62614 () Bool)

(assert (=> mapNonEmpty!3711 (= mapRes!3711 (and tp!9507 e!62614))))

(declare-fun mapRest!3711 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapKey!3711 () (_ BitVec 32))

(declare-fun mapValue!3711 () ValueCell!966)

(assert (=> mapNonEmpty!3711 (= mapRest!3701 (store mapRest!3711 mapKey!3711 mapValue!3711))))

(declare-fun b!95969 () Bool)

(assert (=> b!95969 (= e!62614 tp_is_empty!2619)))

(declare-fun b!95970 () Bool)

(assert (=> b!95970 (= e!62615 tp_is_empty!2619)))

(declare-fun mapIsEmpty!3711 () Bool)

(assert (=> mapIsEmpty!3711 mapRes!3711))

(assert (= (and mapNonEmpty!3702 condMapEmpty!3711) mapIsEmpty!3711))

(assert (= (and mapNonEmpty!3702 (not condMapEmpty!3711)) mapNonEmpty!3711))

(assert (= (and mapNonEmpty!3711 ((_ is ValueCellFull!966) mapValue!3711)) b!95969))

(assert (= (and mapNonEmpty!3702 ((_ is ValueCellFull!966) mapDefault!3711)) b!95970))

(declare-fun m!103965 () Bool)

(assert (=> mapNonEmpty!3711 m!103965))

(declare-fun condMapEmpty!3712 () Bool)

(declare-fun mapDefault!3712 () ValueCell!966)

(assert (=> mapNonEmpty!3701 (= condMapEmpty!3712 (= mapRest!3702 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3712)))))

(declare-fun e!62617 () Bool)

(declare-fun mapRes!3712 () Bool)

(assert (=> mapNonEmpty!3701 (= tp!9491 (and e!62617 mapRes!3712))))

(declare-fun mapNonEmpty!3712 () Bool)

(declare-fun tp!9508 () Bool)

(declare-fun e!62616 () Bool)

(assert (=> mapNonEmpty!3712 (= mapRes!3712 (and tp!9508 e!62616))))

(declare-fun mapValue!3712 () ValueCell!966)

(declare-fun mapRest!3712 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapKey!3712 () (_ BitVec 32))

(assert (=> mapNonEmpty!3712 (= mapRest!3702 (store mapRest!3712 mapKey!3712 mapValue!3712))))

(declare-fun b!95971 () Bool)

(assert (=> b!95971 (= e!62616 tp_is_empty!2619)))

(declare-fun b!95972 () Bool)

(assert (=> b!95972 (= e!62617 tp_is_empty!2619)))

(declare-fun mapIsEmpty!3712 () Bool)

(assert (=> mapIsEmpty!3712 mapRes!3712))

(assert (= (and mapNonEmpty!3701 condMapEmpty!3712) mapIsEmpty!3712))

(assert (= (and mapNonEmpty!3701 (not condMapEmpty!3712)) mapNonEmpty!3712))

(assert (= (and mapNonEmpty!3712 ((_ is ValueCellFull!966) mapValue!3712)) b!95971))

(assert (= (and mapNonEmpty!3701 ((_ is ValueCellFull!966) mapDefault!3712)) b!95972))

(declare-fun m!103967 () Bool)

(assert (=> mapNonEmpty!3712 m!103967))

(declare-fun b_lambda!4255 () Bool)

(assert (= b_lambda!4253 (or (and b!95662 b_free!2405) (and b!95665 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))))) b_lambda!4255)))

(check-sat (not bm!9676) (not bm!9663) (not b!95841) (not b!95862) (not bm!9677) (not b_lambda!4251) (not d!25279) (not b!95821) (not b!95869) (not b!95854) (not b!95874) (not b_lambda!4255) (not b!95960) (not b!95888) (not b!95944) (not bm!9704) (not b!95950) (not b!95934) (not b!95948) (not b!95962) (not bm!9673) (not mapNonEmpty!3711) (not bm!9709) (not b_next!2405) (not bm!9684) (not bm!9678) (not b!95952) (not b!95890) (not b!95936) b_and!5867 (not d!25267) (not b!95838) tp_is_empty!2619 (not d!25281) (not b!95822) (not b_next!2407) (not d!25285) (not b!95737) (not d!25287) (not bm!9688) (not bm!9668) (not b!95939) (not d!25255) (not d!25257) (not bm!9670) (not b!95940) (not b!95863) (not b!95825) b_and!5865 (not bm!9664) (not d!25265) (not bm!9708) (not bm!9662) (not b!95735) (not bm!9706) (not d!25271) (not b!95886) (not bm!9682) (not mapNonEmpty!3712) (not bm!9669) (not b!95961))
(check-sat b_and!5865 b_and!5867 (not b_next!2405) (not b_next!2407))
(get-model)

(assert (=> b!95874 d!25269))

(declare-fun d!25289 () Bool)

(assert (=> d!25289 (= (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!95939 d!25289))

(declare-fun call!9718 () Bool)

(declare-fun bm!9714 () Bool)

(assert (=> bm!9714 (= call!9718 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!95990 () Bool)

(declare-fun e!62627 () Bool)

(assert (=> b!95990 (= e!62627 (not call!9718))))

(declare-fun c!16151 () Bool)

(declare-fun bm!9715 () Bool)

(declare-fun lt!47802 () SeekEntryResult!262)

(declare-fun call!9717 () Bool)

(assert (=> bm!9715 (= call!9717 (inRange!0 (ite c!16151 (index!3190 lt!47802) (index!3193 lt!47802)) (mask!6542 newMap!16)))))

(declare-fun b!95991 () Bool)

(declare-fun res!48465 () Bool)

(assert (=> b!95991 (=> (not res!48465) (not e!62627))))

(assert (=> b!95991 (= res!48465 call!9717)))

(declare-fun e!62628 () Bool)

(assert (=> b!95991 (= e!62628 e!62627)))

(declare-fun b!95992 () Bool)

(declare-fun res!48463 () Bool)

(assert (=> b!95992 (=> (not res!48463) (not e!62627))))

(assert (=> b!95992 (= res!48463 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3193 lt!47802)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!95992 (and (bvsge (index!3193 lt!47802) #b00000000000000000000000000000000) (bvslt (index!3193 lt!47802) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!95993 () Bool)

(declare-fun e!62629 () Bool)

(assert (=> b!95993 (= e!62629 (not call!9718))))

(declare-fun b!95994 () Bool)

(assert (=> b!95994 (and (bvsge (index!3190 lt!47802) #b00000000000000000000000000000000) (bvslt (index!3190 lt!47802) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun res!48466 () Bool)

(assert (=> b!95994 (= res!48466 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3190 lt!47802)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!95994 (=> (not res!48466) (not e!62629))))

(declare-fun b!95995 () Bool)

(declare-fun e!62626 () Bool)

(assert (=> b!95995 (= e!62626 e!62629)))

(declare-fun res!48464 () Bool)

(assert (=> b!95995 (= res!48464 call!9717)))

(assert (=> b!95995 (=> (not res!48464) (not e!62629))))

(declare-fun b!95996 () Bool)

(assert (=> b!95996 (= e!62626 e!62628)))

(declare-fun c!16150 () Bool)

(assert (=> b!95996 (= c!16150 ((_ is MissingVacant!262) lt!47802))))

(declare-fun d!25291 () Bool)

(assert (=> d!25291 e!62626))

(assert (=> d!25291 (= c!16151 ((_ is MissingZero!262) lt!47802))))

(assert (=> d!25291 (= lt!47802 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun lt!47801 () Unit!2887)

(declare-fun choose!582 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) Int) Unit!2887)

(assert (=> d!25291 (= lt!47801 (choose!582 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25291 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25291 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)) lt!47801)))

(declare-fun b!95989 () Bool)

(assert (=> b!95989 (= e!62628 ((_ is Undefined!262) lt!47802))))

(assert (= (and d!25291 c!16151) b!95995))

(assert (= (and d!25291 (not c!16151)) b!95996))

(assert (= (and b!95995 res!48464) b!95994))

(assert (= (and b!95994 res!48466) b!95993))

(assert (= (and b!95996 c!16150) b!95991))

(assert (= (and b!95996 (not c!16150)) b!95989))

(assert (= (and b!95991 res!48465) b!95992))

(assert (= (and b!95992 res!48463) b!95990))

(assert (= (or b!95995 b!95991) bm!9715))

(assert (= (or b!95993 b!95990) bm!9714))

(assert (=> bm!9714 m!103745))

(assert (=> bm!9714 m!103831))

(declare-fun m!103969 () Bool)

(assert (=> b!95992 m!103969))

(declare-fun m!103971 () Bool)

(assert (=> b!95994 m!103971))

(declare-fun m!103973 () Bool)

(assert (=> bm!9715 m!103973))

(assert (=> d!25291 m!103745))

(assert (=> d!25291 m!103827))

(assert (=> d!25291 m!103745))

(declare-fun m!103975 () Bool)

(assert (=> d!25291 m!103975))

(declare-fun m!103977 () Bool)

(assert (=> d!25291 m!103977))

(assert (=> bm!9663 d!25291))

(declare-fun d!25293 () Bool)

(declare-fun e!62631 () Bool)

(assert (=> d!25293 e!62631))

(declare-fun res!48467 () Bool)

(assert (=> d!25293 (=> res!48467 e!62631)))

(declare-fun lt!47805 () Bool)

(assert (=> d!25293 (= res!48467 (not lt!47805))))

(declare-fun lt!47803 () Bool)

(assert (=> d!25293 (= lt!47805 lt!47803)))

(declare-fun lt!47804 () Unit!2887)

(declare-fun e!62630 () Unit!2887)

(assert (=> d!25293 (= lt!47804 e!62630)))

(declare-fun c!16152 () Bool)

(assert (=> d!25293 (= c!16152 lt!47803)))

(assert (=> d!25293 (= lt!47803 (containsKey!152 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25293 (= (contains!800 e!62531 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) lt!47805)))

(declare-fun b!95997 () Bool)

(declare-fun lt!47806 () Unit!2887)

(assert (=> b!95997 (= e!62630 lt!47806)))

(assert (=> b!95997 (= lt!47806 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> b!95997 (isDefined!102 (getValueByKey!148 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!95998 () Bool)

(declare-fun Unit!2895 () Unit!2887)

(assert (=> b!95998 (= e!62630 Unit!2895)))

(declare-fun b!95999 () Bool)

(assert (=> b!95999 (= e!62631 (isDefined!102 (getValueByKey!148 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (= (and d!25293 c!16152) b!95997))

(assert (= (and d!25293 (not c!16152)) b!95998))

(assert (= (and d!25293 (not res!48467)) b!95999))

(assert (=> d!25293 m!103745))

(declare-fun m!103979 () Bool)

(assert (=> d!25293 m!103979))

(assert (=> b!95997 m!103745))

(declare-fun m!103981 () Bool)

(assert (=> b!95997 m!103981))

(assert (=> b!95997 m!103745))

(declare-fun m!103983 () Bool)

(assert (=> b!95997 m!103983))

(assert (=> b!95997 m!103983))

(declare-fun m!103985 () Bool)

(assert (=> b!95997 m!103985))

(assert (=> b!95999 m!103745))

(assert (=> b!95999 m!103983))

(assert (=> b!95999 m!103983))

(assert (=> b!95999 m!103985))

(assert (=> bm!9670 d!25293))

(declare-fun d!25295 () Bool)

(declare-fun res!48468 () Bool)

(declare-fun e!62632 () Bool)

(assert (=> d!25295 (=> (not res!48468) (not e!62632))))

(assert (=> d!25295 (= res!48468 (simpleValid!66 (v!2779 (underlying!333 thiss!992))))))

(assert (=> d!25295 (= (valid!378 (v!2779 (underlying!333 thiss!992))) e!62632)))

(declare-fun b!96000 () Bool)

(declare-fun res!48469 () Bool)

(assert (=> b!96000 (=> (not res!48469) (not e!62632))))

(assert (=> b!96000 (= res!48469 (= (arrayCountValidKeys!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000000 (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))) (_size!469 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun b!96001 () Bool)

(declare-fun res!48470 () Bool)

(assert (=> b!96001 (=> (not res!48470) (not e!62632))))

(assert (=> b!96001 (= res!48470 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun b!96002 () Bool)

(assert (=> b!96002 (= e!62632 (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000000 Nil!1599))))

(assert (= (and d!25295 res!48468) b!96000))

(assert (= (and b!96000 res!48469) b!96001))

(assert (= (and b!96001 res!48470) b!96002))

(declare-fun m!103987 () Bool)

(assert (=> d!25295 m!103987))

(declare-fun m!103989 () Bool)

(assert (=> b!96000 m!103989))

(declare-fun m!103991 () Bool)

(assert (=> b!96001 m!103991))

(declare-fun m!103993 () Bool)

(assert (=> b!96002 m!103993))

(assert (=> d!25285 d!25295))

(declare-fun d!25297 () Bool)

(declare-fun e!62634 () Bool)

(assert (=> d!25297 e!62634))

(declare-fun res!48471 () Bool)

(assert (=> d!25297 (=> res!48471 e!62634)))

(declare-fun lt!47809 () Bool)

(assert (=> d!25297 (= res!48471 (not lt!47809))))

(declare-fun lt!47807 () Bool)

(assert (=> d!25297 (= lt!47809 lt!47807)))

(declare-fun lt!47808 () Unit!2887)

(declare-fun e!62633 () Unit!2887)

(assert (=> d!25297 (= lt!47808 e!62633)))

(declare-fun c!16153 () Bool)

(assert (=> d!25297 (= c!16153 lt!47807)))

(assert (=> d!25297 (= lt!47807 (containsKey!152 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25297 (= (contains!800 lt!47784 #b0000000000000000000000000000000000000000000000000000000000000000) lt!47809)))

(declare-fun b!96003 () Bool)

(declare-fun lt!47810 () Unit!2887)

(assert (=> b!96003 (= e!62633 lt!47810)))

(assert (=> b!96003 (= lt!47810 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96003 (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96004 () Bool)

(declare-fun Unit!2896 () Unit!2887)

(assert (=> b!96004 (= e!62633 Unit!2896)))

(declare-fun b!96005 () Bool)

(assert (=> b!96005 (= e!62634 (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25297 c!16153) b!96003))

(assert (= (and d!25297 (not c!16153)) b!96004))

(assert (= (and d!25297 (not res!48471)) b!96005))

(declare-fun m!103995 () Bool)

(assert (=> d!25297 m!103995))

(declare-fun m!103997 () Bool)

(assert (=> b!96003 m!103997))

(declare-fun m!103999 () Bool)

(assert (=> b!96003 m!103999))

(assert (=> b!96003 m!103999))

(declare-fun m!104001 () Bool)

(assert (=> b!96003 m!104001))

(assert (=> b!96005 m!103999))

(assert (=> b!96005 m!103999))

(assert (=> b!96005 m!104001))

(assert (=> bm!9706 d!25297))

(declare-fun d!25299 () Bool)

(assert (=> d!25299 (= (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (and (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!95886 d!25299))

(declare-fun d!25301 () Bool)

(declare-fun e!62647 () Bool)

(assert (=> d!25301 e!62647))

(declare-fun res!48475 () Bool)

(assert (=> d!25301 (=> (not res!48475) (not e!62647))))

(assert (=> d!25301 (= res!48475 (or (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))))

(declare-fun lt!47820 () ListLongMap!1541)

(declare-fun lt!47813 () ListLongMap!1541)

(assert (=> d!25301 (= lt!47820 lt!47813)))

(declare-fun lt!47812 () Unit!2887)

(declare-fun e!62639 () Unit!2887)

(assert (=> d!25301 (= lt!47812 e!62639)))

(declare-fun c!16156 () Bool)

(declare-fun e!62644 () Bool)

(assert (=> d!25301 (= c!16156 e!62644)))

(declare-fun res!48477 () Bool)

(assert (=> d!25301 (=> (not res!48477) (not e!62644))))

(assert (=> d!25301 (= res!48477 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun e!62645 () ListLongMap!1541)

(assert (=> d!25301 (= lt!47813 e!62645)))

(declare-fun c!16159 () Bool)

(assert (=> d!25301 (= c!16159 (and (not (= (bvand (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25301 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25301 (= (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!47820)))

(declare-fun b!96006 () Bool)

(declare-fun e!62642 () ListLongMap!1541)

(assert (=> b!96006 (= e!62645 e!62642)))

(declare-fun c!16154 () Bool)

(assert (=> b!96006 (= c!16154 (and (not (= (bvand (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun e!62636 () Bool)

(declare-fun b!96007 () Bool)

(assert (=> b!96007 (= e!62636 (= (apply!91 lt!47820 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))

(declare-fun b!96008 () Bool)

(declare-fun e!62641 () Bool)

(assert (=> b!96008 (= e!62647 e!62641)))

(declare-fun c!16155 () Bool)

(assert (=> b!96008 (= c!16155 (not (= (bvand (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96009 () Bool)

(declare-fun call!9721 () ListLongMap!1541)

(assert (=> b!96009 (= e!62645 (+!137 call!9721 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))

(declare-fun bm!9716 () Bool)

(declare-fun call!9720 () ListLongMap!1541)

(declare-fun call!9725 () ListLongMap!1541)

(assert (=> bm!9716 (= call!9720 call!9725)))

(declare-fun b!96010 () Bool)

(declare-fun c!16157 () Bool)

(assert (=> b!96010 (= c!16157 (and (not (= (bvand (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62646 () ListLongMap!1541)

(assert (=> b!96010 (= e!62642 e!62646)))

(declare-fun b!96011 () Bool)

(declare-fun res!48472 () Bool)

(assert (=> b!96011 (=> (not res!48472) (not e!62647))))

(declare-fun e!62643 () Bool)

(assert (=> b!96011 (= res!48472 e!62643)))

(declare-fun res!48476 () Bool)

(assert (=> b!96011 (=> res!48476 e!62643)))

(declare-fun e!62635 () Bool)

(assert (=> b!96011 (= res!48476 (not e!62635))))

(declare-fun res!48478 () Bool)

(assert (=> b!96011 (=> (not res!48478) (not e!62635))))

(assert (=> b!96011 (= res!48478 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun call!9722 () ListLongMap!1541)

(declare-fun bm!9717 () Bool)

(assert (=> bm!9717 (= call!9721 (+!137 (ite c!16159 call!9725 (ite c!16154 call!9720 call!9722)) (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(declare-fun b!96012 () Bool)

(assert (=> b!96012 (= e!62644 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96013 () Bool)

(declare-fun e!62640 () Bool)

(assert (=> b!96013 (= e!62643 e!62640)))

(declare-fun res!48473 () Bool)

(assert (=> b!96013 (=> (not res!48473) (not e!62640))))

(assert (=> b!96013 (= res!48473 (contains!800 lt!47820 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96013 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96014 () Bool)

(declare-fun call!9723 () Bool)

(assert (=> b!96014 (= e!62641 (not call!9723))))

(declare-fun b!96015 () Bool)

(assert (=> b!96015 (= e!62646 call!9722)))

(declare-fun bm!9718 () Bool)

(assert (=> bm!9718 (= call!9722 call!9720)))

(declare-fun b!96016 () Bool)

(declare-fun e!62637 () Bool)

(declare-fun call!9719 () Bool)

(assert (=> b!96016 (= e!62637 (not call!9719))))

(declare-fun bm!9719 () Bool)

(assert (=> bm!9719 (= call!9719 (contains!800 lt!47820 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96017 () Bool)

(assert (=> b!96017 (= e!62640 (= (apply!91 lt!47820 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96017 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_values!2440 newMap!16))))))

(assert (=> b!96017 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96018 () Bool)

(declare-fun Unit!2897 () Unit!2887)

(assert (=> b!96018 (= e!62639 Unit!2897)))

(declare-fun bm!9720 () Bool)

(declare-fun call!9724 () ListLongMap!1541)

(assert (=> bm!9720 (= call!9724 call!9721)))

(declare-fun b!96019 () Bool)

(declare-fun res!48479 () Bool)

(assert (=> b!96019 (=> (not res!48479) (not e!62647))))

(assert (=> b!96019 (= res!48479 e!62637)))

(declare-fun c!16158 () Bool)

(assert (=> b!96019 (= c!16158 (not (= (bvand (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!96020 () Bool)

(assert (=> b!96020 (= e!62642 call!9724)))

(declare-fun b!96021 () Bool)

(declare-fun lt!47824 () Unit!2887)

(assert (=> b!96021 (= e!62639 lt!47824)))

(declare-fun lt!47818 () ListLongMap!1541)

(assert (=> b!96021 (= lt!47818 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47828 () (_ BitVec 64))

(assert (=> b!96021 (= lt!47828 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47817 () (_ BitVec 64))

(assert (=> b!96021 (= lt!47817 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47819 () Unit!2887)

(assert (=> b!96021 (= lt!47819 (addStillContains!67 lt!47818 lt!47828 (zeroValue!2342 newMap!16) lt!47817))))

(assert (=> b!96021 (contains!800 (+!137 lt!47818 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16))) lt!47817)))

(declare-fun lt!47827 () Unit!2887)

(assert (=> b!96021 (= lt!47827 lt!47819)))

(declare-fun lt!47821 () ListLongMap!1541)

(assert (=> b!96021 (= lt!47821 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47825 () (_ BitVec 64))

(assert (=> b!96021 (= lt!47825 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47816 () (_ BitVec 64))

(assert (=> b!96021 (= lt!47816 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47826 () Unit!2887)

(assert (=> b!96021 (= lt!47826 (addApplyDifferent!67 lt!47821 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47816))))

(assert (=> b!96021 (= (apply!91 (+!137 lt!47821 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47816) (apply!91 lt!47821 lt!47816))))

(declare-fun lt!47814 () Unit!2887)

(assert (=> b!96021 (= lt!47814 lt!47826)))

(declare-fun lt!47811 () ListLongMap!1541)

(assert (=> b!96021 (= lt!47811 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47822 () (_ BitVec 64))

(assert (=> b!96021 (= lt!47822 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47830 () (_ BitVec 64))

(assert (=> b!96021 (= lt!47830 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47832 () Unit!2887)

(assert (=> b!96021 (= lt!47832 (addApplyDifferent!67 lt!47811 lt!47822 (zeroValue!2342 newMap!16) lt!47830))))

(assert (=> b!96021 (= (apply!91 (+!137 lt!47811 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16))) lt!47830) (apply!91 lt!47811 lt!47830))))

(declare-fun lt!47831 () Unit!2887)

(assert (=> b!96021 (= lt!47831 lt!47832)))

(declare-fun lt!47829 () ListLongMap!1541)

(assert (=> b!96021 (= lt!47829 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47823 () (_ BitVec 64))

(assert (=> b!96021 (= lt!47823 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47815 () (_ BitVec 64))

(assert (=> b!96021 (= lt!47815 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96021 (= lt!47824 (addApplyDifferent!67 lt!47829 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47815))))

(assert (=> b!96021 (= (apply!91 (+!137 lt!47829 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47815) (apply!91 lt!47829 lt!47815))))

(declare-fun b!96022 () Bool)

(assert (=> b!96022 (= e!62641 e!62636)))

(declare-fun res!48480 () Bool)

(assert (=> b!96022 (= res!48480 call!9723)))

(assert (=> b!96022 (=> (not res!48480) (not e!62636))))

(declare-fun b!96023 () Bool)

(assert (=> b!96023 (= e!62635 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9721 () Bool)

(assert (=> bm!9721 (= call!9725 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9722 () Bool)

(assert (=> bm!9722 (= call!9723 (contains!800 lt!47820 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96024 () Bool)

(assert (=> b!96024 (= e!62646 call!9724)))

(declare-fun b!96025 () Bool)

(declare-fun e!62638 () Bool)

(assert (=> b!96025 (= e!62638 (= (apply!91 lt!47820 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96026 () Bool)

(assert (=> b!96026 (= e!62637 e!62638)))

(declare-fun res!48474 () Bool)

(assert (=> b!96026 (= res!48474 call!9719)))

(assert (=> b!96026 (=> (not res!48474) (not e!62638))))

(assert (= (and d!25301 c!16159) b!96009))

(assert (= (and d!25301 (not c!16159)) b!96006))

(assert (= (and b!96006 c!16154) b!96020))

(assert (= (and b!96006 (not c!16154)) b!96010))

(assert (= (and b!96010 c!16157) b!96024))

(assert (= (and b!96010 (not c!16157)) b!96015))

(assert (= (or b!96024 b!96015) bm!9718))

(assert (= (or b!96020 bm!9718) bm!9716))

(assert (= (or b!96020 b!96024) bm!9720))

(assert (= (or b!96009 bm!9716) bm!9721))

(assert (= (or b!96009 bm!9720) bm!9717))

(assert (= (and d!25301 res!48477) b!96012))

(assert (= (and d!25301 c!16156) b!96021))

(assert (= (and d!25301 (not c!16156)) b!96018))

(assert (= (and d!25301 res!48475) b!96011))

(assert (= (and b!96011 res!48478) b!96023))

(assert (= (and b!96011 (not res!48476)) b!96013))

(assert (= (and b!96013 res!48473) b!96017))

(assert (= (and b!96011 res!48472) b!96019))

(assert (= (and b!96019 c!16158) b!96026))

(assert (= (and b!96019 (not c!16158)) b!96016))

(assert (= (and b!96026 res!48474) b!96025))

(assert (= (or b!96026 b!96016) bm!9719))

(assert (= (and b!96019 res!48479) b!96008))

(assert (= (and b!96008 c!16155) b!96022))

(assert (= (and b!96008 (not c!16155)) b!96014))

(assert (= (and b!96022 res!48480) b!96007))

(assert (= (or b!96022 b!96014) bm!9722))

(declare-fun b_lambda!4257 () Bool)

(assert (=> (not b_lambda!4257) (not b!96017)))

(declare-fun tb!1901 () Bool)

(declare-fun t!5535 () Bool)

(assert (=> (and b!95662 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16)) t!5535) tb!1901))

(declare-fun result!3233 () Bool)

(assert (=> tb!1901 (= result!3233 tp_is_empty!2619)))

(assert (=> b!96017 t!5535))

(declare-fun b_and!5869 () Bool)

(assert (= b_and!5865 (and (=> t!5535 result!3233) b_and!5869)))

(declare-fun t!5537 () Bool)

(declare-fun tb!1903 () Bool)

(assert (=> (and b!95665 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 newMap!16)) t!5537) tb!1903))

(declare-fun result!3235 () Bool)

(assert (= result!3235 result!3233))

(assert (=> b!96017 t!5537))

(declare-fun b_and!5871 () Bool)

(assert (= b_and!5867 (and (=> t!5537 result!3235) b_and!5871)))

(declare-fun m!104003 () Bool)

(assert (=> b!96013 m!104003))

(assert (=> b!96013 m!104003))

(declare-fun m!104005 () Bool)

(assert (=> b!96013 m!104005))

(declare-fun m!104007 () Bool)

(assert (=> b!96021 m!104007))

(declare-fun m!104009 () Bool)

(assert (=> b!96021 m!104009))

(declare-fun m!104011 () Bool)

(assert (=> b!96021 m!104011))

(declare-fun m!104013 () Bool)

(assert (=> b!96021 m!104013))

(declare-fun m!104015 () Bool)

(assert (=> b!96021 m!104015))

(assert (=> b!96021 m!104011))

(declare-fun m!104017 () Bool)

(assert (=> b!96021 m!104017))

(declare-fun m!104019 () Bool)

(assert (=> b!96021 m!104019))

(declare-fun m!104021 () Bool)

(assert (=> b!96021 m!104021))

(declare-fun m!104023 () Bool)

(assert (=> b!96021 m!104023))

(declare-fun m!104025 () Bool)

(assert (=> b!96021 m!104025))

(declare-fun m!104027 () Bool)

(assert (=> b!96021 m!104027))

(declare-fun m!104029 () Bool)

(assert (=> b!96021 m!104029))

(assert (=> b!96021 m!104021))

(declare-fun m!104031 () Bool)

(assert (=> b!96021 m!104031))

(assert (=> b!96021 m!104023))

(assert (=> b!96021 m!104003))

(declare-fun m!104033 () Bool)

(assert (=> b!96021 m!104033))

(assert (=> b!96021 m!104027))

(declare-fun m!104035 () Bool)

(assert (=> b!96021 m!104035))

(declare-fun m!104037 () Bool)

(assert (=> b!96021 m!104037))

(declare-fun m!104039 () Bool)

(assert (=> b!96017 m!104039))

(assert (=> b!96017 m!104003))

(declare-fun m!104041 () Bool)

(assert (=> b!96017 m!104041))

(assert (=> b!96017 m!104039))

(declare-fun m!104043 () Bool)

(assert (=> b!96017 m!104043))

(declare-fun m!104045 () Bool)

(assert (=> b!96017 m!104045))

(assert (=> b!96017 m!104003))

(assert (=> b!96017 m!104043))

(declare-fun m!104047 () Bool)

(assert (=> b!96009 m!104047))

(assert (=> d!25301 m!103977))

(declare-fun m!104049 () Bool)

(assert (=> bm!9719 m!104049))

(assert (=> b!96012 m!104003))

(assert (=> b!96012 m!104003))

(declare-fun m!104051 () Bool)

(assert (=> b!96012 m!104051))

(declare-fun m!104053 () Bool)

(assert (=> bm!9717 m!104053))

(declare-fun m!104055 () Bool)

(assert (=> b!96025 m!104055))

(declare-fun m!104057 () Bool)

(assert (=> bm!9722 m!104057))

(declare-fun m!104059 () Bool)

(assert (=> b!96007 m!104059))

(assert (=> b!96023 m!104003))

(assert (=> b!96023 m!104003))

(assert (=> b!96023 m!104051))

(assert (=> bm!9721 m!104029))

(assert (=> bm!9673 d!25301))

(declare-fun d!25303 () Bool)

(declare-fun e!62660 () Bool)

(assert (=> d!25303 e!62660))

(declare-fun res!48484 () Bool)

(assert (=> d!25303 (=> (not res!48484) (not e!62660))))

(assert (=> d!25303 (= res!48484 (or (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))))

(declare-fun lt!47842 () ListLongMap!1541)

(declare-fun lt!47835 () ListLongMap!1541)

(assert (=> d!25303 (= lt!47842 lt!47835)))

(declare-fun lt!47834 () Unit!2887)

(declare-fun e!62652 () Unit!2887)

(assert (=> d!25303 (= lt!47834 e!62652)))

(declare-fun c!16162 () Bool)

(declare-fun e!62657 () Bool)

(assert (=> d!25303 (= c!16162 e!62657)))

(declare-fun res!48486 () Bool)

(assert (=> d!25303 (=> (not res!48486) (not e!62657))))

(assert (=> d!25303 (= res!48486 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun e!62658 () ListLongMap!1541)

(assert (=> d!25303 (= lt!47835 e!62658)))

(declare-fun c!16165 () Bool)

(assert (=> d!25303 (= c!16165 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25303 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25303 (= (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!47842)))

(declare-fun b!96027 () Bool)

(declare-fun e!62655 () ListLongMap!1541)

(assert (=> b!96027 (= e!62658 e!62655)))

(declare-fun c!16160 () Bool)

(assert (=> b!96027 (= c!16160 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96028 () Bool)

(declare-fun e!62649 () Bool)

(assert (=> b!96028 (= e!62649 (= (apply!91 lt!47842 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96029 () Bool)

(declare-fun e!62654 () Bool)

(assert (=> b!96029 (= e!62660 e!62654)))

(declare-fun c!16161 () Bool)

(assert (=> b!96029 (= c!16161 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96030 () Bool)

(declare-fun call!9728 () ListLongMap!1541)

(assert (=> b!96030 (= e!62658 (+!137 call!9728 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun bm!9723 () Bool)

(declare-fun call!9727 () ListLongMap!1541)

(declare-fun call!9732 () ListLongMap!1541)

(assert (=> bm!9723 (= call!9727 call!9732)))

(declare-fun b!96031 () Bool)

(declare-fun c!16163 () Bool)

(assert (=> b!96031 (= c!16163 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62659 () ListLongMap!1541)

(assert (=> b!96031 (= e!62655 e!62659)))

(declare-fun b!96032 () Bool)

(declare-fun res!48481 () Bool)

(assert (=> b!96032 (=> (not res!48481) (not e!62660))))

(declare-fun e!62656 () Bool)

(assert (=> b!96032 (= res!48481 e!62656)))

(declare-fun res!48485 () Bool)

(assert (=> b!96032 (=> res!48485 e!62656)))

(declare-fun e!62648 () Bool)

(assert (=> b!96032 (= res!48485 (not e!62648))))

(declare-fun res!48487 () Bool)

(assert (=> b!96032 (=> (not res!48487) (not e!62648))))

(assert (=> b!96032 (= res!48487 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun call!9729 () ListLongMap!1541)

(declare-fun bm!9724 () Bool)

(assert (=> bm!9724 (= call!9728 (+!137 (ite c!16165 call!9732 (ite c!16160 call!9727 call!9729)) (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!96033 () Bool)

(assert (=> b!96033 (= e!62657 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96034 () Bool)

(declare-fun e!62653 () Bool)

(assert (=> b!96034 (= e!62656 e!62653)))

(declare-fun res!48482 () Bool)

(assert (=> b!96034 (=> (not res!48482) (not e!62653))))

(assert (=> b!96034 (= res!48482 (contains!800 lt!47842 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96034 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96035 () Bool)

(declare-fun call!9730 () Bool)

(assert (=> b!96035 (= e!62654 (not call!9730))))

(declare-fun b!96036 () Bool)

(assert (=> b!96036 (= e!62659 call!9729)))

(declare-fun bm!9725 () Bool)

(assert (=> bm!9725 (= call!9729 call!9727)))

(declare-fun b!96037 () Bool)

(declare-fun e!62650 () Bool)

(declare-fun call!9726 () Bool)

(assert (=> b!96037 (= e!62650 (not call!9726))))

(declare-fun bm!9726 () Bool)

(assert (=> bm!9726 (= call!9726 (contains!800 lt!47842 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96038 () Bool)

(assert (=> b!96038 (= e!62653 (= (apply!91 lt!47842 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96038 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_values!2440 newMap!16))))))

(assert (=> b!96038 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96039 () Bool)

(declare-fun Unit!2898 () Unit!2887)

(assert (=> b!96039 (= e!62652 Unit!2898)))

(declare-fun bm!9727 () Bool)

(declare-fun call!9731 () ListLongMap!1541)

(assert (=> bm!9727 (= call!9731 call!9728)))

(declare-fun b!96040 () Bool)

(declare-fun res!48488 () Bool)

(assert (=> b!96040 (=> (not res!48488) (not e!62660))))

(assert (=> b!96040 (= res!48488 e!62650)))

(declare-fun c!16164 () Bool)

(assert (=> b!96040 (= c!16164 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!96041 () Bool)

(assert (=> b!96041 (= e!62655 call!9731)))

(declare-fun b!96042 () Bool)

(declare-fun lt!47846 () Unit!2887)

(assert (=> b!96042 (= e!62652 lt!47846)))

(declare-fun lt!47840 () ListLongMap!1541)

(assert (=> b!96042 (= lt!47840 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47850 () (_ BitVec 64))

(assert (=> b!96042 (= lt!47850 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47839 () (_ BitVec 64))

(assert (=> b!96042 (= lt!47839 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47841 () Unit!2887)

(assert (=> b!96042 (= lt!47841 (addStillContains!67 lt!47840 lt!47850 (zeroValue!2342 newMap!16) lt!47839))))

(assert (=> b!96042 (contains!800 (+!137 lt!47840 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16))) lt!47839)))

(declare-fun lt!47849 () Unit!2887)

(assert (=> b!96042 (= lt!47849 lt!47841)))

(declare-fun lt!47843 () ListLongMap!1541)

(assert (=> b!96042 (= lt!47843 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47847 () (_ BitVec 64))

(assert (=> b!96042 (= lt!47847 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47838 () (_ BitVec 64))

(assert (=> b!96042 (= lt!47838 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47848 () Unit!2887)

(assert (=> b!96042 (= lt!47848 (addApplyDifferent!67 lt!47843 lt!47847 (minValue!2342 newMap!16) lt!47838))))

(assert (=> b!96042 (= (apply!91 (+!137 lt!47843 (tuple2!2337 lt!47847 (minValue!2342 newMap!16))) lt!47838) (apply!91 lt!47843 lt!47838))))

(declare-fun lt!47836 () Unit!2887)

(assert (=> b!96042 (= lt!47836 lt!47848)))

(declare-fun lt!47833 () ListLongMap!1541)

(assert (=> b!96042 (= lt!47833 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47844 () (_ BitVec 64))

(assert (=> b!96042 (= lt!47844 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47852 () (_ BitVec 64))

(assert (=> b!96042 (= lt!47852 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47854 () Unit!2887)

(assert (=> b!96042 (= lt!47854 (addApplyDifferent!67 lt!47833 lt!47844 (zeroValue!2342 newMap!16) lt!47852))))

(assert (=> b!96042 (= (apply!91 (+!137 lt!47833 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16))) lt!47852) (apply!91 lt!47833 lt!47852))))

(declare-fun lt!47853 () Unit!2887)

(assert (=> b!96042 (= lt!47853 lt!47854)))

(declare-fun lt!47851 () ListLongMap!1541)

(assert (=> b!96042 (= lt!47851 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47845 () (_ BitVec 64))

(assert (=> b!96042 (= lt!47845 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47837 () (_ BitVec 64))

(assert (=> b!96042 (= lt!47837 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96042 (= lt!47846 (addApplyDifferent!67 lt!47851 lt!47845 (minValue!2342 newMap!16) lt!47837))))

(assert (=> b!96042 (= (apply!91 (+!137 lt!47851 (tuple2!2337 lt!47845 (minValue!2342 newMap!16))) lt!47837) (apply!91 lt!47851 lt!47837))))

(declare-fun b!96043 () Bool)

(assert (=> b!96043 (= e!62654 e!62649)))

(declare-fun res!48489 () Bool)

(assert (=> b!96043 (= res!48489 call!9730)))

(assert (=> b!96043 (=> (not res!48489) (not e!62649))))

(declare-fun b!96044 () Bool)

(assert (=> b!96044 (= e!62648 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9728 () Bool)

(assert (=> bm!9728 (= call!9732 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9729 () Bool)

(assert (=> bm!9729 (= call!9730 (contains!800 lt!47842 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96045 () Bool)

(assert (=> b!96045 (= e!62659 call!9731)))

(declare-fun b!96046 () Bool)

(declare-fun e!62651 () Bool)

(assert (=> b!96046 (= e!62651 (= (apply!91 lt!47842 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96047 () Bool)

(assert (=> b!96047 (= e!62650 e!62651)))

(declare-fun res!48483 () Bool)

(assert (=> b!96047 (= res!48483 call!9726)))

(assert (=> b!96047 (=> (not res!48483) (not e!62651))))

(assert (= (and d!25303 c!16165) b!96030))

(assert (= (and d!25303 (not c!16165)) b!96027))

(assert (= (and b!96027 c!16160) b!96041))

(assert (= (and b!96027 (not c!16160)) b!96031))

(assert (= (and b!96031 c!16163) b!96045))

(assert (= (and b!96031 (not c!16163)) b!96036))

(assert (= (or b!96045 b!96036) bm!9725))

(assert (= (or b!96041 bm!9725) bm!9723))

(assert (= (or b!96041 b!96045) bm!9727))

(assert (= (or b!96030 bm!9723) bm!9728))

(assert (= (or b!96030 bm!9727) bm!9724))

(assert (= (and d!25303 res!48486) b!96033))

(assert (= (and d!25303 c!16162) b!96042))

(assert (= (and d!25303 (not c!16162)) b!96039))

(assert (= (and d!25303 res!48484) b!96032))

(assert (= (and b!96032 res!48487) b!96044))

(assert (= (and b!96032 (not res!48485)) b!96034))

(assert (= (and b!96034 res!48482) b!96038))

(assert (= (and b!96032 res!48481) b!96040))

(assert (= (and b!96040 c!16164) b!96047))

(assert (= (and b!96040 (not c!16164)) b!96037))

(assert (= (and b!96047 res!48483) b!96046))

(assert (= (or b!96047 b!96037) bm!9726))

(assert (= (and b!96040 res!48488) b!96029))

(assert (= (and b!96029 c!16161) b!96043))

(assert (= (and b!96029 (not c!16161)) b!96035))

(assert (= (and b!96043 res!48489) b!96028))

(assert (= (or b!96043 b!96035) bm!9729))

(declare-fun b_lambda!4259 () Bool)

(assert (=> (not b_lambda!4259) (not b!96038)))

(assert (=> b!96038 t!5535))

(declare-fun b_and!5873 () Bool)

(assert (= b_and!5869 (and (=> t!5535 result!3233) b_and!5873)))

(assert (=> b!96038 t!5537))

(declare-fun b_and!5875 () Bool)

(assert (= b_and!5871 (and (=> t!5537 result!3235) b_and!5875)))

(assert (=> b!96034 m!104003))

(assert (=> b!96034 m!104003))

(declare-fun m!104061 () Bool)

(assert (=> b!96034 m!104061))

(declare-fun m!104063 () Bool)

(assert (=> b!96042 m!104063))

(declare-fun m!104065 () Bool)

(assert (=> b!96042 m!104065))

(declare-fun m!104067 () Bool)

(assert (=> b!96042 m!104067))

(declare-fun m!104069 () Bool)

(assert (=> b!96042 m!104069))

(declare-fun m!104071 () Bool)

(assert (=> b!96042 m!104071))

(assert (=> b!96042 m!104067))

(declare-fun m!104073 () Bool)

(assert (=> b!96042 m!104073))

(declare-fun m!104075 () Bool)

(assert (=> b!96042 m!104075))

(declare-fun m!104077 () Bool)

(assert (=> b!96042 m!104077))

(declare-fun m!104079 () Bool)

(assert (=> b!96042 m!104079))

(declare-fun m!104081 () Bool)

(assert (=> b!96042 m!104081))

(declare-fun m!104083 () Bool)

(assert (=> b!96042 m!104083))

(declare-fun m!104085 () Bool)

(assert (=> b!96042 m!104085))

(assert (=> b!96042 m!104077))

(declare-fun m!104087 () Bool)

(assert (=> b!96042 m!104087))

(assert (=> b!96042 m!104079))

(assert (=> b!96042 m!104003))

(declare-fun m!104089 () Bool)

(assert (=> b!96042 m!104089))

(assert (=> b!96042 m!104083))

(declare-fun m!104091 () Bool)

(assert (=> b!96042 m!104091))

(declare-fun m!104093 () Bool)

(assert (=> b!96042 m!104093))

(assert (=> b!96038 m!104039))

(assert (=> b!96038 m!104003))

(declare-fun m!104095 () Bool)

(assert (=> b!96038 m!104095))

(assert (=> b!96038 m!104039))

(assert (=> b!96038 m!104043))

(assert (=> b!96038 m!104045))

(assert (=> b!96038 m!104003))

(assert (=> b!96038 m!104043))

(declare-fun m!104097 () Bool)

(assert (=> b!96030 m!104097))

(assert (=> d!25303 m!103977))

(declare-fun m!104099 () Bool)

(assert (=> bm!9726 m!104099))

(assert (=> b!96033 m!104003))

(assert (=> b!96033 m!104003))

(assert (=> b!96033 m!104051))

(declare-fun m!104101 () Bool)

(assert (=> bm!9724 m!104101))

(declare-fun m!104103 () Bool)

(assert (=> b!96046 m!104103))

(declare-fun m!104105 () Bool)

(assert (=> bm!9729 m!104105))

(declare-fun m!104107 () Bool)

(assert (=> b!96028 m!104107))

(assert (=> b!96044 m!104003))

(assert (=> b!96044 m!104003))

(assert (=> b!96044 m!104051))

(assert (=> bm!9728 m!104085))

(assert (=> d!25279 d!25303))

(declare-fun d!25305 () Bool)

(declare-fun e!62662 () Bool)

(assert (=> d!25305 e!62662))

(declare-fun res!48490 () Bool)

(assert (=> d!25305 (=> res!48490 e!62662)))

(declare-fun lt!47857 () Bool)

(assert (=> d!25305 (= res!48490 (not lt!47857))))

(declare-fun lt!47855 () Bool)

(assert (=> d!25305 (= lt!47857 lt!47855)))

(declare-fun lt!47856 () Unit!2887)

(declare-fun e!62661 () Unit!2887)

(assert (=> d!25305 (= lt!47856 e!62661)))

(declare-fun c!16166 () Bool)

(assert (=> d!25305 (= c!16166 lt!47855)))

(assert (=> d!25305 (= lt!47855 (containsKey!152 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(assert (=> d!25305 (= (contains!800 call!9687 (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))) lt!47857)))

(declare-fun b!96048 () Bool)

(declare-fun lt!47858 () Unit!2887)

(assert (=> b!96048 (= e!62661 lt!47858)))

(assert (=> b!96048 (= lt!47858 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(assert (=> b!96048 (isDefined!102 (getValueByKey!148 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(declare-fun b!96049 () Bool)

(declare-fun Unit!2899 () Unit!2887)

(assert (=> b!96049 (= e!62661 Unit!2899)))

(declare-fun b!96050 () Bool)

(assert (=> b!96050 (= e!62662 (isDefined!102 (getValueByKey!148 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707)))))))

(assert (= (and d!25305 c!16166) b!96048))

(assert (= (and d!25305 (not c!16166)) b!96049))

(assert (= (and d!25305 (not res!48490)) b!96050))

(assert (=> d!25305 m!103863))

(declare-fun m!104109 () Bool)

(assert (=> d!25305 m!104109))

(assert (=> b!96048 m!103863))

(declare-fun m!104111 () Bool)

(assert (=> b!96048 m!104111))

(assert (=> b!96048 m!103863))

(declare-fun m!104113 () Bool)

(assert (=> b!96048 m!104113))

(assert (=> b!96048 m!104113))

(declare-fun m!104115 () Bool)

(assert (=> b!96048 m!104115))

(assert (=> b!96050 m!103863))

(assert (=> b!96050 m!104113))

(assert (=> b!96050 m!104113))

(assert (=> b!96050 m!104115))

(assert (=> b!95821 d!25305))

(declare-fun d!25307 () Bool)

(declare-fun e!62665 () Bool)

(assert (=> d!25307 e!62665))

(declare-fun res!48493 () Bool)

(assert (=> d!25307 (=> (not res!48493) (not e!62665))))

(assert (=> d!25307 (= res!48493 (and (bvsge (index!3191 lt!47707) #b00000000000000000000000000000000) (bvslt (index!3191 lt!47707) (size!2251 (_keys!4143 newMap!16)))))))

(declare-fun lt!47861 () Unit!2887)

(declare-fun choose!583 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) Int) Unit!2887)

(assert (=> d!25307 (= lt!47861 (choose!583 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3191 lt!47707) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25307 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25307 (= (lemmaValidKeyInArrayIsInListMap!98 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3191 lt!47707) (defaultEntry!2457 newMap!16)) lt!47861)))

(declare-fun b!96053 () Bool)

(assert (=> b!96053 (= e!62665 (contains!800 (getCurrentListMap!467 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(assert (= (and d!25307 res!48493) b!96053))

(declare-fun m!104117 () Bool)

(assert (=> d!25307 m!104117))

(assert (=> d!25307 m!103977))

(declare-fun m!104119 () Bool)

(assert (=> b!96053 m!104119))

(assert (=> b!96053 m!103863))

(assert (=> b!96053 m!104119))

(assert (=> b!96053 m!103863))

(declare-fun m!104121 () Bool)

(assert (=> b!96053 m!104121))

(assert (=> b!95821 d!25307))

(declare-fun d!25309 () Bool)

(declare-fun e!62678 () Bool)

(assert (=> d!25309 e!62678))

(declare-fun res!48497 () Bool)

(assert (=> d!25309 (=> (not res!48497) (not e!62678))))

(assert (=> d!25309 (= res!48497 (or (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))))

(declare-fun lt!47871 () ListLongMap!1541)

(declare-fun lt!47864 () ListLongMap!1541)

(assert (=> d!25309 (= lt!47871 lt!47864)))

(declare-fun lt!47863 () Unit!2887)

(declare-fun e!62670 () Unit!2887)

(assert (=> d!25309 (= lt!47863 e!62670)))

(declare-fun c!16169 () Bool)

(declare-fun e!62675 () Bool)

(assert (=> d!25309 (= c!16169 e!62675)))

(declare-fun res!48499 () Bool)

(assert (=> d!25309 (=> (not res!48499) (not e!62675))))

(assert (=> d!25309 (= res!48499 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun e!62676 () ListLongMap!1541)

(assert (=> d!25309 (= lt!47864 e!62676)))

(declare-fun c!16172 () Bool)

(assert (=> d!25309 (= c!16172 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25309 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25309 (= (getCurrentListMap!467 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!47871)))

(declare-fun b!96054 () Bool)

(declare-fun e!62673 () ListLongMap!1541)

(assert (=> b!96054 (= e!62676 e!62673)))

(declare-fun c!16167 () Bool)

(assert (=> b!96054 (= c!16167 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96055 () Bool)

(declare-fun e!62667 () Bool)

(assert (=> b!96055 (= e!62667 (= (apply!91 lt!47871 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96056 () Bool)

(declare-fun e!62672 () Bool)

(assert (=> b!96056 (= e!62678 e!62672)))

(declare-fun c!16168 () Bool)

(assert (=> b!96056 (= c!16168 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96057 () Bool)

(declare-fun call!9735 () ListLongMap!1541)

(assert (=> b!96057 (= e!62676 (+!137 call!9735 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun bm!9730 () Bool)

(declare-fun call!9734 () ListLongMap!1541)

(declare-fun call!9739 () ListLongMap!1541)

(assert (=> bm!9730 (= call!9734 call!9739)))

(declare-fun b!96058 () Bool)

(declare-fun c!16170 () Bool)

(assert (=> b!96058 (= c!16170 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62677 () ListLongMap!1541)

(assert (=> b!96058 (= e!62673 e!62677)))

(declare-fun b!96059 () Bool)

(declare-fun res!48494 () Bool)

(assert (=> b!96059 (=> (not res!48494) (not e!62678))))

(declare-fun e!62674 () Bool)

(assert (=> b!96059 (= res!48494 e!62674)))

(declare-fun res!48498 () Bool)

(assert (=> b!96059 (=> res!48498 e!62674)))

(declare-fun e!62666 () Bool)

(assert (=> b!96059 (= res!48498 (not e!62666))))

(declare-fun res!48500 () Bool)

(assert (=> b!96059 (=> (not res!48500) (not e!62666))))

(assert (=> b!96059 (= res!48500 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun bm!9731 () Bool)

(declare-fun call!9736 () ListLongMap!1541)

(assert (=> bm!9731 (= call!9735 (+!137 (ite c!16172 call!9739 (ite c!16167 call!9734 call!9736)) (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!96060 () Bool)

(assert (=> b!96060 (= e!62675 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96061 () Bool)

(declare-fun e!62671 () Bool)

(assert (=> b!96061 (= e!62674 e!62671)))

(declare-fun res!48495 () Bool)

(assert (=> b!96061 (=> (not res!48495) (not e!62671))))

(assert (=> b!96061 (= res!48495 (contains!800 lt!47871 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96061 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96062 () Bool)

(declare-fun call!9737 () Bool)

(assert (=> b!96062 (= e!62672 (not call!9737))))

(declare-fun b!96063 () Bool)

(assert (=> b!96063 (= e!62677 call!9736)))

(declare-fun bm!9732 () Bool)

(assert (=> bm!9732 (= call!9736 call!9734)))

(declare-fun b!96064 () Bool)

(declare-fun e!62668 () Bool)

(declare-fun call!9733 () Bool)

(assert (=> b!96064 (= e!62668 (not call!9733))))

(declare-fun bm!9733 () Bool)

(assert (=> bm!9733 (= call!9733 (contains!800 lt!47871 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96065 () Bool)

(assert (=> b!96065 (= e!62671 (= (apply!91 lt!47871 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96065 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))))))))

(assert (=> b!96065 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96066 () Bool)

(declare-fun Unit!2900 () Unit!2887)

(assert (=> b!96066 (= e!62670 Unit!2900)))

(declare-fun bm!9734 () Bool)

(declare-fun call!9738 () ListLongMap!1541)

(assert (=> bm!9734 (= call!9738 call!9735)))

(declare-fun b!96067 () Bool)

(declare-fun res!48501 () Bool)

(assert (=> b!96067 (=> (not res!48501) (not e!62678))))

(assert (=> b!96067 (= res!48501 e!62668)))

(declare-fun c!16171 () Bool)

(assert (=> b!96067 (= c!16171 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!96068 () Bool)

(assert (=> b!96068 (= e!62673 call!9738)))

(declare-fun b!96069 () Bool)

(declare-fun lt!47875 () Unit!2887)

(assert (=> b!96069 (= e!62670 lt!47875)))

(declare-fun lt!47869 () ListLongMap!1541)

(assert (=> b!96069 (= lt!47869 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47879 () (_ BitVec 64))

(assert (=> b!96069 (= lt!47879 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47868 () (_ BitVec 64))

(assert (=> b!96069 (= lt!47868 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47870 () Unit!2887)

(assert (=> b!96069 (= lt!47870 (addStillContains!67 lt!47869 lt!47879 (zeroValue!2342 newMap!16) lt!47868))))

(assert (=> b!96069 (contains!800 (+!137 lt!47869 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16))) lt!47868)))

(declare-fun lt!47878 () Unit!2887)

(assert (=> b!96069 (= lt!47878 lt!47870)))

(declare-fun lt!47872 () ListLongMap!1541)

(assert (=> b!96069 (= lt!47872 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47876 () (_ BitVec 64))

(assert (=> b!96069 (= lt!47876 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47867 () (_ BitVec 64))

(assert (=> b!96069 (= lt!47867 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47877 () Unit!2887)

(assert (=> b!96069 (= lt!47877 (addApplyDifferent!67 lt!47872 lt!47876 (minValue!2342 newMap!16) lt!47867))))

(assert (=> b!96069 (= (apply!91 (+!137 lt!47872 (tuple2!2337 lt!47876 (minValue!2342 newMap!16))) lt!47867) (apply!91 lt!47872 lt!47867))))

(declare-fun lt!47865 () Unit!2887)

(assert (=> b!96069 (= lt!47865 lt!47877)))

(declare-fun lt!47862 () ListLongMap!1541)

(assert (=> b!96069 (= lt!47862 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47873 () (_ BitVec 64))

(assert (=> b!96069 (= lt!47873 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47881 () (_ BitVec 64))

(assert (=> b!96069 (= lt!47881 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47883 () Unit!2887)

(assert (=> b!96069 (= lt!47883 (addApplyDifferent!67 lt!47862 lt!47873 (zeroValue!2342 newMap!16) lt!47881))))

(assert (=> b!96069 (= (apply!91 (+!137 lt!47862 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16))) lt!47881) (apply!91 lt!47862 lt!47881))))

(declare-fun lt!47882 () Unit!2887)

(assert (=> b!96069 (= lt!47882 lt!47883)))

(declare-fun lt!47880 () ListLongMap!1541)

(assert (=> b!96069 (= lt!47880 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47874 () (_ BitVec 64))

(assert (=> b!96069 (= lt!47874 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47866 () (_ BitVec 64))

(assert (=> b!96069 (= lt!47866 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96069 (= lt!47875 (addApplyDifferent!67 lt!47880 lt!47874 (minValue!2342 newMap!16) lt!47866))))

(assert (=> b!96069 (= (apply!91 (+!137 lt!47880 (tuple2!2337 lt!47874 (minValue!2342 newMap!16))) lt!47866) (apply!91 lt!47880 lt!47866))))

(declare-fun b!96070 () Bool)

(assert (=> b!96070 (= e!62672 e!62667)))

(declare-fun res!48502 () Bool)

(assert (=> b!96070 (= res!48502 call!9737)))

(assert (=> b!96070 (=> (not res!48502) (not e!62667))))

(declare-fun b!96071 () Bool)

(assert (=> b!96071 (= e!62666 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9735 () Bool)

(assert (=> bm!9735 (= call!9739 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9736 () Bool)

(assert (=> bm!9736 (= call!9737 (contains!800 lt!47871 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96072 () Bool)

(assert (=> b!96072 (= e!62677 call!9738)))

(declare-fun b!96073 () Bool)

(declare-fun e!62669 () Bool)

(assert (=> b!96073 (= e!62669 (= (apply!91 lt!47871 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96074 () Bool)

(assert (=> b!96074 (= e!62668 e!62669)))

(declare-fun res!48496 () Bool)

(assert (=> b!96074 (= res!48496 call!9733)))

(assert (=> b!96074 (=> (not res!48496) (not e!62669))))

(assert (= (and d!25309 c!16172) b!96057))

(assert (= (and d!25309 (not c!16172)) b!96054))

(assert (= (and b!96054 c!16167) b!96068))

(assert (= (and b!96054 (not c!16167)) b!96058))

(assert (= (and b!96058 c!16170) b!96072))

(assert (= (and b!96058 (not c!16170)) b!96063))

(assert (= (or b!96072 b!96063) bm!9732))

(assert (= (or b!96068 bm!9732) bm!9730))

(assert (= (or b!96068 b!96072) bm!9734))

(assert (= (or b!96057 bm!9730) bm!9735))

(assert (= (or b!96057 bm!9734) bm!9731))

(assert (= (and d!25309 res!48499) b!96060))

(assert (= (and d!25309 c!16169) b!96069))

(assert (= (and d!25309 (not c!16169)) b!96066))

(assert (= (and d!25309 res!48497) b!96059))

(assert (= (and b!96059 res!48500) b!96071))

(assert (= (and b!96059 (not res!48498)) b!96061))

(assert (= (and b!96061 res!48495) b!96065))

(assert (= (and b!96059 res!48494) b!96067))

(assert (= (and b!96067 c!16171) b!96074))

(assert (= (and b!96067 (not c!16171)) b!96064))

(assert (= (and b!96074 res!48496) b!96073))

(assert (= (or b!96074 b!96064) bm!9733))

(assert (= (and b!96067 res!48501) b!96056))

(assert (= (and b!96056 c!16168) b!96070))

(assert (= (and b!96056 (not c!16168)) b!96062))

(assert (= (and b!96070 res!48502) b!96055))

(assert (= (or b!96070 b!96062) bm!9736))

(declare-fun b_lambda!4261 () Bool)

(assert (=> (not b_lambda!4261) (not b!96065)))

(assert (=> b!96065 t!5535))

(declare-fun b_and!5877 () Bool)

(assert (= b_and!5873 (and (=> t!5535 result!3233) b_and!5877)))

(assert (=> b!96065 t!5537))

(declare-fun b_and!5879 () Bool)

(assert (= b_and!5875 (and (=> t!5537 result!3235) b_and!5879)))

(assert (=> b!96061 m!104003))

(assert (=> b!96061 m!104003))

(declare-fun m!104123 () Bool)

(assert (=> b!96061 m!104123))

(declare-fun m!104125 () Bool)

(assert (=> b!96069 m!104125))

(declare-fun m!104127 () Bool)

(assert (=> b!96069 m!104127))

(declare-fun m!104129 () Bool)

(assert (=> b!96069 m!104129))

(declare-fun m!104131 () Bool)

(assert (=> b!96069 m!104131))

(declare-fun m!104133 () Bool)

(assert (=> b!96069 m!104133))

(assert (=> b!96069 m!104129))

(declare-fun m!104135 () Bool)

(assert (=> b!96069 m!104135))

(declare-fun m!104137 () Bool)

(assert (=> b!96069 m!104137))

(declare-fun m!104139 () Bool)

(assert (=> b!96069 m!104139))

(declare-fun m!104141 () Bool)

(assert (=> b!96069 m!104141))

(declare-fun m!104143 () Bool)

(assert (=> b!96069 m!104143))

(declare-fun m!104145 () Bool)

(assert (=> b!96069 m!104145))

(declare-fun m!104147 () Bool)

(assert (=> b!96069 m!104147))

(assert (=> b!96069 m!104139))

(declare-fun m!104149 () Bool)

(assert (=> b!96069 m!104149))

(assert (=> b!96069 m!104141))

(assert (=> b!96069 m!104003))

(declare-fun m!104151 () Bool)

(assert (=> b!96069 m!104151))

(assert (=> b!96069 m!104145))

(declare-fun m!104153 () Bool)

(assert (=> b!96069 m!104153))

(declare-fun m!104155 () Bool)

(assert (=> b!96069 m!104155))

(declare-fun m!104157 () Bool)

(assert (=> b!96065 m!104157))

(assert (=> b!96065 m!104003))

(declare-fun m!104159 () Bool)

(assert (=> b!96065 m!104159))

(assert (=> b!96065 m!104157))

(assert (=> b!96065 m!104043))

(declare-fun m!104161 () Bool)

(assert (=> b!96065 m!104161))

(assert (=> b!96065 m!104003))

(assert (=> b!96065 m!104043))

(declare-fun m!104163 () Bool)

(assert (=> b!96057 m!104163))

(assert (=> d!25309 m!103977))

(declare-fun m!104165 () Bool)

(assert (=> bm!9733 m!104165))

(assert (=> b!96060 m!104003))

(assert (=> b!96060 m!104003))

(assert (=> b!96060 m!104051))

(declare-fun m!104167 () Bool)

(assert (=> bm!9731 m!104167))

(declare-fun m!104169 () Bool)

(assert (=> b!96073 m!104169))

(declare-fun m!104171 () Bool)

(assert (=> bm!9736 m!104171))

(declare-fun m!104173 () Bool)

(assert (=> b!96055 m!104173))

(assert (=> b!96071 m!104003))

(assert (=> b!96071 m!104003))

(assert (=> b!96071 m!104051))

(assert (=> bm!9735 m!104147))

(assert (=> b!95821 d!25309))

(declare-fun d!25311 () Bool)

(declare-fun e!62681 () Bool)

(assert (=> d!25311 e!62681))

(declare-fun res!48505 () Bool)

(assert (=> d!25311 (=> (not res!48505) (not e!62681))))

(assert (=> d!25311 (= res!48505 (and (bvsge (index!3191 lt!47707) #b00000000000000000000000000000000) (bvslt (index!3191 lt!47707) (size!2252 (_values!2440 newMap!16)))))))

(declare-fun lt!47886 () Unit!2887)

(declare-fun choose!584 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) (_ BitVec 64) V!3139 Int) Unit!2887)

(assert (=> d!25311 (= lt!47886 (choose!584 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3191 lt!47707) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25311 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25311 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3191 lt!47707) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)) lt!47886)))

(declare-fun b!96077 () Bool)

(assert (=> b!96077 (= e!62681 (= (+!137 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!467 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))))))

(assert (= (and d!25311 res!48505) b!96077))

(assert (=> d!25311 m!103745))

(assert (=> d!25311 m!103765))

(declare-fun m!104175 () Bool)

(assert (=> d!25311 m!104175))

(assert (=> d!25311 m!103977))

(assert (=> b!96077 m!103899))

(assert (=> b!96077 m!103899))

(declare-fun m!104177 () Bool)

(assert (=> b!96077 m!104177))

(assert (=> b!96077 m!103867))

(assert (=> b!96077 m!103869))

(assert (=> b!95821 d!25311))

(declare-fun d!25313 () Bool)

(declare-fun e!62684 () Bool)

(assert (=> d!25313 e!62684))

(declare-fun res!48510 () Bool)

(assert (=> d!25313 (=> (not res!48510) (not e!62684))))

(declare-fun lt!47897 () ListLongMap!1541)

(assert (=> d!25313 (= res!48510 (contains!800 lt!47897 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!47896 () List!1603)

(assert (=> d!25313 (= lt!47897 (ListLongMap!1542 lt!47896))))

(declare-fun lt!47895 () Unit!2887)

(declare-fun lt!47898 () Unit!2887)

(assert (=> d!25313 (= lt!47895 lt!47898)))

(assert (=> d!25313 (= (getValueByKey!148 lt!47896 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!66 (List!1603 (_ BitVec 64) V!3139) Unit!2887)

(assert (=> d!25313 (= lt!47898 (lemmaContainsTupThenGetReturnValue!66 lt!47896 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun insertStrictlySorted!68 (List!1603 (_ BitVec 64) V!3139) List!1603)

(assert (=> d!25313 (= lt!47896 (insertStrictlySorted!68 (toList!786 call!9678) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25313 (= (+!137 call!9678 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!47897)))

(declare-fun b!96082 () Bool)

(declare-fun res!48511 () Bool)

(assert (=> b!96082 (=> (not res!48511) (not e!62684))))

(assert (=> b!96082 (= res!48511 (= (getValueByKey!148 (toList!786 lt!47897) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96083 () Bool)

(declare-fun contains!802 (List!1603 tuple2!2336) Bool)

(assert (=> b!96083 (= e!62684 (contains!802 (toList!786 lt!47897) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25313 res!48510) b!96082))

(assert (= (and b!96082 res!48511) b!96083))

(declare-fun m!104179 () Bool)

(assert (=> d!25313 m!104179))

(declare-fun m!104181 () Bool)

(assert (=> d!25313 m!104181))

(declare-fun m!104183 () Bool)

(assert (=> d!25313 m!104183))

(declare-fun m!104185 () Bool)

(assert (=> d!25313 m!104185))

(declare-fun m!104187 () Bool)

(assert (=> b!96082 m!104187))

(declare-fun m!104189 () Bool)

(assert (=> b!96083 m!104189))

(assert (=> b!95825 d!25313))

(declare-fun d!25315 () Bool)

(declare-fun res!48512 () Bool)

(declare-fun e!62685 () Bool)

(assert (=> d!25315 (=> res!48512 e!62685)))

(assert (=> d!25315 (= res!48512 (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25315 (= (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!62685)))

(declare-fun b!96084 () Bool)

(declare-fun e!62686 () Bool)

(assert (=> b!96084 (= e!62685 e!62686)))

(declare-fun res!48513 () Bool)

(assert (=> b!96084 (=> (not res!48513) (not e!62686))))

(assert (=> b!96084 (= res!48513 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!96085 () Bool)

(assert (=> b!96085 (= e!62686 (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!25315 (not res!48512)) b!96084))

(assert (= (and b!96084 res!48513) b!96085))

(declare-fun m!104191 () Bool)

(assert (=> d!25315 m!104191))

(assert (=> b!96085 m!103745))

(declare-fun m!104193 () Bool)

(assert (=> b!96085 m!104193))

(assert (=> b!95869 d!25315))

(declare-fun b!96086 () Bool)

(declare-fun e!62687 () Bool)

(declare-fun e!62690 () Bool)

(assert (=> b!96086 (= e!62687 e!62690)))

(declare-fun c!16173 () Bool)

(assert (=> b!96086 (= c!16173 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!96087 () Bool)

(declare-fun call!9740 () Bool)

(assert (=> b!96087 (= e!62690 call!9740)))

(declare-fun b!96088 () Bool)

(declare-fun e!62688 () Bool)

(assert (=> b!96088 (= e!62688 (contains!801 (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!96089 () Bool)

(assert (=> b!96089 (= e!62690 call!9740)))

(declare-fun d!25317 () Bool)

(declare-fun res!48515 () Bool)

(declare-fun e!62689 () Bool)

(assert (=> d!25317 (=> res!48515 e!62689)))

(assert (=> d!25317 (= res!48515 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> d!25317 (= (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)) e!62689)))

(declare-fun b!96090 () Bool)

(assert (=> b!96090 (= e!62689 e!62687)))

(declare-fun res!48516 () Bool)

(assert (=> b!96090 (=> (not res!48516) (not e!62687))))

(assert (=> b!96090 (= res!48516 (not e!62688))))

(declare-fun res!48514 () Bool)

(assert (=> b!96090 (=> (not res!48514) (not e!62688))))

(assert (=> b!96090 (= res!48514 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun bm!9737 () Bool)

(assert (=> bm!9737 (= call!9740 (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16173 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599))))))

(assert (= (and d!25317 (not res!48515)) b!96090))

(assert (= (and b!96090 res!48514) b!96088))

(assert (= (and b!96090 res!48516) b!96086))

(assert (= (and b!96086 c!16173) b!96087))

(assert (= (and b!96086 (not c!16173)) b!96089))

(assert (= (or b!96087 b!96089) bm!9737))

(declare-fun m!104195 () Bool)

(assert (=> b!96086 m!104195))

(assert (=> b!96086 m!104195))

(declare-fun m!104197 () Bool)

(assert (=> b!96086 m!104197))

(assert (=> b!96088 m!104195))

(assert (=> b!96088 m!104195))

(declare-fun m!104199 () Bool)

(assert (=> b!96088 m!104199))

(assert (=> b!96090 m!104195))

(assert (=> b!96090 m!104195))

(assert (=> b!96090 m!104197))

(assert (=> bm!9737 m!104195))

(declare-fun m!104201 () Bool)

(assert (=> bm!9737 m!104201))

(assert (=> bm!9688 d!25317))

(declare-fun b!96103 () Bool)

(declare-fun e!62697 () SeekEntryResult!262)

(assert (=> b!96103 (= e!62697 Undefined!262)))

(declare-fun d!25319 () Bool)

(declare-fun lt!47907 () SeekEntryResult!262)

(assert (=> d!25319 (and (or ((_ is Undefined!262) lt!47907) (not ((_ is Found!262) lt!47907)) (and (bvsge (index!3191 lt!47907) #b00000000000000000000000000000000) (bvslt (index!3191 lt!47907) (size!2251 (_keys!4143 newMap!16))))) (or ((_ is Undefined!262) lt!47907) ((_ is Found!262) lt!47907) (not ((_ is MissingZero!262) lt!47907)) (and (bvsge (index!3190 lt!47907) #b00000000000000000000000000000000) (bvslt (index!3190 lt!47907) (size!2251 (_keys!4143 newMap!16))))) (or ((_ is Undefined!262) lt!47907) ((_ is Found!262) lt!47907) ((_ is MissingZero!262) lt!47907) (not ((_ is MissingVacant!262) lt!47907)) (and (bvsge (index!3193 lt!47907) #b00000000000000000000000000000000) (bvslt (index!3193 lt!47907) (size!2251 (_keys!4143 newMap!16))))) (or ((_ is Undefined!262) lt!47907) (ite ((_ is Found!262) lt!47907) (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47907)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (ite ((_ is MissingZero!262) lt!47907) (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3190 lt!47907)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!262) lt!47907) (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3193 lt!47907)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25319 (= lt!47907 e!62697)))

(declare-fun c!16181 () Bool)

(declare-fun lt!47906 () SeekEntryResult!262)

(assert (=> d!25319 (= c!16181 (and ((_ is Intermediate!262) lt!47906) (undefined!1074 lt!47906)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4214 (_ BitVec 32)) SeekEntryResult!262)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!25319 (= lt!47906 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (mask!6542 newMap!16)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (=> d!25319 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25319 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)) lt!47907)))

(declare-fun b!96104 () Bool)

(declare-fun e!62699 () SeekEntryResult!262)

(assert (=> b!96104 (= e!62699 (Found!262 (index!3192 lt!47906)))))

(declare-fun e!62698 () SeekEntryResult!262)

(declare-fun b!96105 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4214 (_ BitVec 32)) SeekEntryResult!262)

(assert (=> b!96105 (= e!62698 (seekKeyOrZeroReturnVacant!0 (x!12810 lt!47906) (index!3192 lt!47906) (index!3192 lt!47906) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!96106 () Bool)

(declare-fun c!16182 () Bool)

(declare-fun lt!47905 () (_ BitVec 64))

(assert (=> b!96106 (= c!16182 (= lt!47905 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96106 (= e!62699 e!62698)))

(declare-fun b!96107 () Bool)

(assert (=> b!96107 (= e!62698 (MissingZero!262 (index!3192 lt!47906)))))

(declare-fun b!96108 () Bool)

(assert (=> b!96108 (= e!62697 e!62699)))

(assert (=> b!96108 (= lt!47905 (select (arr!2002 (_keys!4143 newMap!16)) (index!3192 lt!47906)))))

(declare-fun c!16180 () Bool)

(assert (=> b!96108 (= c!16180 (= lt!47905 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (= (and d!25319 c!16181) b!96103))

(assert (= (and d!25319 (not c!16181)) b!96108))

(assert (= (and b!96108 c!16180) b!96104))

(assert (= (and b!96108 (not c!16180)) b!96106))

(assert (= (and b!96106 c!16182) b!96107))

(assert (= (and b!96106 (not c!16182)) b!96105))

(declare-fun m!104203 () Bool)

(assert (=> d!25319 m!104203))

(declare-fun m!104205 () Bool)

(assert (=> d!25319 m!104205))

(assert (=> d!25319 m!103977))

(assert (=> d!25319 m!103745))

(declare-fun m!104207 () Bool)

(assert (=> d!25319 m!104207))

(declare-fun m!104209 () Bool)

(assert (=> d!25319 m!104209))

(assert (=> d!25319 m!104207))

(assert (=> d!25319 m!103745))

(declare-fun m!104211 () Bool)

(assert (=> d!25319 m!104211))

(assert (=> b!96105 m!103745))

(declare-fun m!104213 () Bool)

(assert (=> b!96105 m!104213))

(declare-fun m!104215 () Bool)

(assert (=> b!96108 m!104215))

(assert (=> b!95838 d!25319))

(declare-fun b!96109 () Bool)

(declare-fun e!62700 () Bool)

(declare-fun e!62703 () Bool)

(assert (=> b!96109 (= e!62700 e!62703)))

(declare-fun c!16183 () Bool)

(assert (=> b!96109 (= c!16183 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96110 () Bool)

(declare-fun call!9741 () Bool)

(assert (=> b!96110 (= e!62703 call!9741)))

(declare-fun b!96111 () Bool)

(declare-fun e!62701 () Bool)

(assert (=> b!96111 (= e!62701 (contains!801 Nil!1599 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96112 () Bool)

(assert (=> b!96112 (= e!62703 call!9741)))

(declare-fun d!25321 () Bool)

(declare-fun res!48518 () Bool)

(declare-fun e!62702 () Bool)

(assert (=> d!25321 (=> res!48518 e!62702)))

(assert (=> d!25321 (= res!48518 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25321 (= (arrayNoDuplicates!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 Nil!1599) e!62702)))

(declare-fun b!96113 () Bool)

(assert (=> b!96113 (= e!62702 e!62700)))

(declare-fun res!48519 () Bool)

(assert (=> b!96113 (=> (not res!48519) (not e!62700))))

(assert (=> b!96113 (= res!48519 (not e!62701))))

(declare-fun res!48517 () Bool)

(assert (=> b!96113 (=> (not res!48517) (not e!62701))))

(assert (=> b!96113 (= res!48517 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9738 () Bool)

(assert (=> bm!9738 (= call!9741 (arrayNoDuplicates!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16183 (Cons!1598 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) Nil!1599) Nil!1599)))))

(assert (= (and d!25321 (not res!48518)) b!96113))

(assert (= (and b!96113 res!48517) b!96111))

(assert (= (and b!96113 res!48519) b!96109))

(assert (= (and b!96109 c!16183) b!96110))

(assert (= (and b!96109 (not c!16183)) b!96112))

(assert (= (or b!96110 b!96112) bm!9738))

(assert (=> b!96109 m!104003))

(assert (=> b!96109 m!104003))

(assert (=> b!96109 m!104051))

(assert (=> b!96111 m!104003))

(assert (=> b!96111 m!104003))

(declare-fun m!104217 () Bool)

(assert (=> b!96111 m!104217))

(assert (=> b!96113 m!104003))

(assert (=> b!96113 m!104003))

(assert (=> b!96113 m!104051))

(assert (=> bm!9738 m!104003))

(declare-fun m!104219 () Bool)

(assert (=> bm!9738 m!104219))

(assert (=> b!95962 d!25321))

(declare-fun d!25323 () Bool)

(declare-fun get!1289 (Option!154) V!3139)

(assert (=> d!25323 (= (apply!91 lt!47784 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1289 (getValueByKey!148 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!3937 () Bool)

(assert (= bs!3937 d!25323))

(assert (=> bs!3937 m!103887))

(declare-fun m!104221 () Bool)

(assert (=> bs!3937 m!104221))

(assert (=> bs!3937 m!104221))

(declare-fun m!104223 () Bool)

(assert (=> bs!3937 m!104223))

(assert (=> b!95944 d!25323))

(declare-fun d!25325 () Bool)

(declare-fun c!16184 () Bool)

(assert (=> d!25325 (= c!16184 ((_ is ValueCellFull!966) (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!62704 () V!3139)

(assert (=> d!25325 (= (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!62704)))

(declare-fun b!96114 () Bool)

(assert (=> b!96114 (= e!62704 (get!1287 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96115 () Bool)

(assert (=> b!96115 (= e!62704 (get!1288 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25325 c!16184) b!96114))

(assert (= (and d!25325 (not c!16184)) b!96115))

(assert (=> b!96114 m!103935))

(assert (=> b!96114 m!103763))

(declare-fun m!104225 () Bool)

(assert (=> b!96114 m!104225))

(assert (=> b!96115 m!103935))

(assert (=> b!96115 m!103763))

(declare-fun m!104227 () Bool)

(assert (=> b!96115 m!104227))

(assert (=> b!95944 d!25325))

(declare-fun d!25327 () Bool)

(assert (=> d!25327 (= (get!1287 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2778 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> b!95862 d!25327))

(declare-fun bm!9741 () Bool)

(declare-fun call!9744 () (_ BitVec 32))

(assert (=> bm!9741 (= call!9744 (arrayCountValidKeys!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96124 () Bool)

(declare-fun e!62709 () (_ BitVec 32))

(assert (=> b!96124 (= e!62709 #b00000000000000000000000000000000)))

(declare-fun b!96125 () Bool)

(declare-fun e!62710 () (_ BitVec 32))

(assert (=> b!96125 (= e!62710 call!9744)))

(declare-fun b!96126 () Bool)

(assert (=> b!96126 (= e!62709 e!62710)))

(declare-fun c!16189 () Bool)

(assert (=> b!96126 (= c!16189 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96127 () Bool)

(assert (=> b!96127 (= e!62710 (bvadd #b00000000000000000000000000000001 call!9744))))

(declare-fun d!25329 () Bool)

(declare-fun lt!47910 () (_ BitVec 32))

(assert (=> d!25329 (and (bvsge lt!47910 #b00000000000000000000000000000000) (bvsle lt!47910 (bvsub (size!2251 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!25329 (= lt!47910 e!62709)))

(declare-fun c!16190 () Bool)

(assert (=> d!25329 (= c!16190 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25329 (and (bvsle #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2251 (_keys!4143 newMap!16)) (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25329 (= (arrayCountValidKeys!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) lt!47910)))

(assert (= (and d!25329 c!16190) b!96124))

(assert (= (and d!25329 (not c!16190)) b!96126))

(assert (= (and b!96126 c!16189) b!96127))

(assert (= (and b!96126 (not c!16189)) b!96125))

(assert (= (or b!96127 b!96125) bm!9741))

(declare-fun m!104229 () Bool)

(assert (=> bm!9741 m!104229))

(assert (=> b!96126 m!104003))

(assert (=> b!96126 m!104003))

(assert (=> b!96126 m!104051))

(assert (=> b!95960 d!25329))

(declare-fun d!25331 () Bool)

(assert (=> d!25331 (= (+!137 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47708 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47913 () Unit!2887)

(declare-fun choose!585 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 V!3139 Int) Unit!2887)

(assert (=> d!25331 (= lt!47913 (choose!585 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47708 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25331 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25331 (= (lemmaChangeZeroKeyThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47708 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) (defaultEntry!2457 newMap!16)) lt!47913)))

(declare-fun bs!3938 () Bool)

(assert (= bs!3938 d!25331))

(assert (=> bs!3938 m!103765))

(declare-fun m!104231 () Bool)

(assert (=> bs!3938 m!104231))

(assert (=> bs!3938 m!103899))

(declare-fun m!104233 () Bool)

(assert (=> bs!3938 m!104233))

(assert (=> bs!3938 m!103977))

(assert (=> bs!3938 m!103765))

(declare-fun m!104235 () Bool)

(assert (=> bs!3938 m!104235))

(assert (=> bs!3938 m!103899))

(assert (=> b!95841 d!25331))

(declare-fun b!96152 () Bool)

(assert (=> b!96152 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> b!96152 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_values!2440 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun lt!47931 () ListLongMap!1541)

(declare-fun e!62730 () Bool)

(assert (=> b!96152 (= e!62730 (= (apply!91 lt!47931 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!9744 () Bool)

(declare-fun call!9747 () ListLongMap!1541)

(assert (=> bm!9744 (= call!9747 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun b!96153 () Bool)

(declare-fun e!62725 () Bool)

(declare-fun e!62728 () Bool)

(assert (=> b!96153 (= e!62725 e!62728)))

(declare-fun c!16200 () Bool)

(declare-fun e!62729 () Bool)

(assert (=> b!96153 (= c!16200 e!62729)))

(declare-fun res!48528 () Bool)

(assert (=> b!96153 (=> (not res!48528) (not e!62729))))

(assert (=> b!96153 (= res!48528 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!96154 () Bool)

(declare-fun e!62731 () ListLongMap!1541)

(assert (=> b!96154 (= e!62731 (ListLongMap!1542 Nil!1600))))

(declare-fun b!96155 () Bool)

(declare-fun e!62726 () Bool)

(declare-fun isEmpty!358 (ListLongMap!1541) Bool)

(assert (=> b!96155 (= e!62726 (isEmpty!358 lt!47931))))

(declare-fun b!96156 () Bool)

(declare-fun res!48529 () Bool)

(assert (=> b!96156 (=> (not res!48529) (not e!62725))))

(assert (=> b!96156 (= res!48529 (not (contains!800 lt!47931 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96157 () Bool)

(assert (=> b!96157 (= e!62726 (= lt!47931 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!96158 () Bool)

(declare-fun e!62727 () ListLongMap!1541)

(assert (=> b!96158 (= e!62731 e!62727)))

(declare-fun c!16199 () Bool)

(assert (=> b!96158 (= c!16199 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!96160 () Bool)

(assert (=> b!96160 (= e!62729 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!96160 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!96161 () Bool)

(declare-fun lt!47930 () Unit!2887)

(declare-fun lt!47929 () Unit!2887)

(assert (=> b!96161 (= lt!47930 lt!47929)))

(declare-fun lt!47932 () ListLongMap!1541)

(declare-fun lt!47933 () V!3139)

(declare-fun lt!47928 () (_ BitVec 64))

(declare-fun lt!47934 () (_ BitVec 64))

(assert (=> b!96161 (not (contains!800 (+!137 lt!47932 (tuple2!2337 lt!47934 lt!47933)) lt!47928))))

(declare-fun addStillNotContains!41 (ListLongMap!1541 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2887)

(assert (=> b!96161 (= lt!47929 (addStillNotContains!41 lt!47932 lt!47934 lt!47933 lt!47928))))

(assert (=> b!96161 (= lt!47928 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!96161 (= lt!47933 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!96161 (= lt!47934 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!96161 (= lt!47932 call!9747)))

(assert (=> b!96161 (= e!62727 (+!137 call!9747 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!96162 () Bool)

(assert (=> b!96162 (= e!62728 e!62726)))

(declare-fun c!16202 () Bool)

(assert (=> b!96162 (= c!16202 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!96163 () Bool)

(assert (=> b!96163 (= e!62727 call!9747)))

(declare-fun b!96159 () Bool)

(assert (=> b!96159 (= e!62728 e!62730)))

(assert (=> b!96159 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun res!48531 () Bool)

(assert (=> b!96159 (= res!48531 (contains!800 lt!47931 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!96159 (=> (not res!48531) (not e!62730))))

(declare-fun d!25333 () Bool)

(assert (=> d!25333 e!62725))

(declare-fun res!48530 () Bool)

(assert (=> d!25333 (=> (not res!48530) (not e!62725))))

(assert (=> d!25333 (= res!48530 (not (contains!800 lt!47931 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25333 (= lt!47931 e!62731)))

(declare-fun c!16201 () Bool)

(assert (=> d!25333 (= c!16201 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> d!25333 (validMask!0 (mask!6542 (v!2779 (underlying!333 thiss!992))))))

(assert (=> d!25333 (= (getCurrentListMapNoExtraKeys!101 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))) lt!47931)))

(assert (= (and d!25333 c!16201) b!96154))

(assert (= (and d!25333 (not c!16201)) b!96158))

(assert (= (and b!96158 c!16199) b!96161))

(assert (= (and b!96158 (not c!16199)) b!96163))

(assert (= (or b!96161 b!96163) bm!9744))

(assert (= (and d!25333 res!48530) b!96156))

(assert (= (and b!96156 res!48529) b!96153))

(assert (= (and b!96153 res!48528) b!96160))

(assert (= (and b!96153 c!16200) b!96159))

(assert (= (and b!96153 (not c!16200)) b!96162))

(assert (= (and b!96159 res!48531) b!96152))

(assert (= (and b!96162 c!16202) b!96157))

(assert (= (and b!96162 (not c!16202)) b!96155))

(declare-fun b_lambda!4263 () Bool)

(assert (=> (not b_lambda!4263) (not b!96152)))

(assert (=> b!96152 t!5525))

(declare-fun b_and!5881 () Bool)

(assert (= b_and!5877 (and (=> t!5525 result!3219) b_and!5881)))

(assert (=> b!96152 t!5527))

(declare-fun b_and!5883 () Bool)

(assert (= b_and!5879 (and (=> t!5527 result!3223) b_and!5883)))

(declare-fun b_lambda!4265 () Bool)

(assert (=> (not b_lambda!4265) (not b!96161)))

(assert (=> b!96161 t!5525))

(declare-fun b_and!5885 () Bool)

(assert (= b_and!5881 (and (=> t!5525 result!3219) b_and!5885)))

(assert (=> b!96161 t!5527))

(declare-fun b_and!5887 () Bool)

(assert (= b_and!5883 (and (=> t!5527 result!3223) b_and!5887)))

(assert (=> b!96159 m!103887))

(assert (=> b!96159 m!103887))

(declare-fun m!104237 () Bool)

(assert (=> b!96159 m!104237))

(declare-fun m!104239 () Bool)

(assert (=> bm!9744 m!104239))

(assert (=> b!96152 m!103887))

(assert (=> b!96152 m!103935))

(assert (=> b!96152 m!103763))

(assert (=> b!96152 m!103935))

(assert (=> b!96152 m!103763))

(assert (=> b!96152 m!103939))

(assert (=> b!96152 m!103887))

(declare-fun m!104241 () Bool)

(assert (=> b!96152 m!104241))

(declare-fun m!104243 () Bool)

(assert (=> d!25333 m!104243))

(assert (=> d!25333 m!103733))

(declare-fun m!104245 () Bool)

(assert (=> b!96155 m!104245))

(declare-fun m!104247 () Bool)

(assert (=> b!96156 m!104247))

(assert (=> b!96158 m!103887))

(assert (=> b!96158 m!103887))

(assert (=> b!96158 m!103945))

(assert (=> b!96157 m!104239))

(assert (=> b!96161 m!103887))

(declare-fun m!104249 () Bool)

(assert (=> b!96161 m!104249))

(declare-fun m!104251 () Bool)

(assert (=> b!96161 m!104251))

(declare-fun m!104253 () Bool)

(assert (=> b!96161 m!104253))

(assert (=> b!96161 m!104251))

(assert (=> b!96161 m!103935))

(assert (=> b!96161 m!103763))

(assert (=> b!96161 m!103935))

(assert (=> b!96161 m!103763))

(assert (=> b!96161 m!103939))

(declare-fun m!104255 () Bool)

(assert (=> b!96161 m!104255))

(assert (=> b!96160 m!103887))

(assert (=> b!96160 m!103887))

(assert (=> b!96160 m!103945))

(assert (=> bm!9708 d!25333))

(declare-fun d!25335 () Bool)

(declare-fun e!62734 () Bool)

(assert (=> d!25335 e!62734))

(declare-fun c!16205 () Bool)

(assert (=> d!25335 (= c!16205 (and (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!25335 true))

(declare-fun _$29!123 () Unit!2887)

(assert (=> d!25335 (= (choose!581 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))) _$29!123)))

(declare-fun b!96168 () Bool)

(assert (=> b!96168 (= e!62734 (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!96169 () Bool)

(assert (=> b!96169 (= e!62734 (ite (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!25335 c!16205) b!96168))

(assert (= (and d!25335 (not c!16205)) b!96169))

(assert (=> b!96168 m!103745))

(assert (=> b!96168 m!103749))

(assert (=> d!25271 d!25335))

(assert (=> d!25271 d!25283))

(assert (=> d!25267 d!25273))

(declare-fun d!25337 () Bool)

(assert (=> d!25337 (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) from!355 Nil!1599)))

(assert (=> d!25337 true))

(declare-fun _$71!129 () Unit!2887)

(assert (=> d!25337 (= (choose!39 (_keys!4143 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!129)))

(declare-fun bs!3939 () Bool)

(assert (= bs!3939 d!25337))

(assert (=> bs!3939 m!103743))

(assert (=> d!25267 d!25337))

(declare-fun d!25339 () Bool)

(assert (=> d!25339 (= (map!1246 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (getCurrentListMap!467 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (_values!2440 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (mask!6542 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 (_2!1179 lt!47718) newMap!16))))))

(declare-fun bs!3940 () Bool)

(assert (= bs!3940 d!25339))

(declare-fun m!104257 () Bool)

(assert (=> bs!3940 m!104257))

(assert (=> bm!9684 d!25339))

(declare-fun d!25341 () Bool)

(declare-fun res!48532 () Bool)

(declare-fun e!62735 () Bool)

(assert (=> d!25341 (=> (not res!48532) (not e!62735))))

(assert (=> d!25341 (= res!48532 (simpleValid!66 (_2!1179 lt!47718)))))

(assert (=> d!25341 (= (valid!378 (_2!1179 lt!47718)) e!62735)))

(declare-fun b!96170 () Bool)

(declare-fun res!48533 () Bool)

(assert (=> b!96170 (=> (not res!48533) (not e!62735))))

(assert (=> b!96170 (= res!48533 (= (arrayCountValidKeys!0 (_keys!4143 (_2!1179 lt!47718)) #b00000000000000000000000000000000 (size!2251 (_keys!4143 (_2!1179 lt!47718)))) (_size!469 (_2!1179 lt!47718))))))

(declare-fun b!96171 () Bool)

(declare-fun res!48534 () Bool)

(assert (=> b!96171 (=> (not res!48534) (not e!62735))))

(assert (=> b!96171 (= res!48534 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 (_2!1179 lt!47718)) (mask!6542 (_2!1179 lt!47718))))))

(declare-fun b!96172 () Bool)

(assert (=> b!96172 (= e!62735 (arrayNoDuplicates!0 (_keys!4143 (_2!1179 lt!47718)) #b00000000000000000000000000000000 Nil!1599))))

(assert (= (and d!25341 res!48532) b!96170))

(assert (= (and b!96170 res!48533) b!96171))

(assert (= (and b!96171 res!48534) b!96172))

(declare-fun m!104259 () Bool)

(assert (=> d!25341 m!104259))

(declare-fun m!104261 () Bool)

(assert (=> b!96170 m!104261))

(declare-fun m!104263 () Bool)

(assert (=> b!96171 m!104263))

(declare-fun m!104265 () Bool)

(assert (=> b!96172 m!104265))

(assert (=> d!25257 d!25341))

(assert (=> d!25257 d!25287))

(declare-fun d!25343 () Bool)

(declare-fun e!62736 () Bool)

(assert (=> d!25343 e!62736))

(declare-fun res!48535 () Bool)

(assert (=> d!25343 (=> (not res!48535) (not e!62736))))

(declare-fun lt!47937 () ListLongMap!1541)

(assert (=> d!25343 (= res!48535 (contains!800 lt!47937 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun lt!47936 () List!1603)

(assert (=> d!25343 (= lt!47937 (ListLongMap!1542 lt!47936))))

(declare-fun lt!47935 () Unit!2887)

(declare-fun lt!47938 () Unit!2887)

(assert (=> d!25343 (= lt!47935 lt!47938)))

(assert (=> d!25343 (= (getValueByKey!148 lt!47936 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) (Some!153 (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25343 (= lt!47938 (lemmaContainsTupThenGetReturnValue!66 lt!47936 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25343 (= lt!47936 (insertStrictlySorted!68 (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709))) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25343 (= (+!137 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709)) (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47937)))

(declare-fun b!96173 () Bool)

(declare-fun res!48536 () Bool)

(assert (=> b!96173 (=> (not res!48536) (not e!62736))))

(assert (=> b!96173 (= res!48536 (= (getValueByKey!148 (toList!786 lt!47937) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) (Some!153 (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun b!96174 () Bool)

(assert (=> b!96174 (= e!62736 (contains!802 (toList!786 lt!47937) (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (= (and d!25343 res!48535) b!96173))

(assert (= (and b!96173 res!48536) b!96174))

(declare-fun m!104267 () Bool)

(assert (=> d!25343 m!104267))

(declare-fun m!104269 () Bool)

(assert (=> d!25343 m!104269))

(declare-fun m!104271 () Bool)

(assert (=> d!25343 m!104271))

(declare-fun m!104273 () Bool)

(assert (=> d!25343 m!104273))

(declare-fun m!104275 () Bool)

(assert (=> b!96173 m!104275))

(declare-fun m!104277 () Bool)

(assert (=> b!96174 m!104277))

(assert (=> bm!9704 d!25343))

(declare-fun d!25345 () Bool)

(assert (=> d!25345 (= (map!1246 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (getCurrentListMap!467 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (_values!2440 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (mask!6542 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 newMap!16 (_2!1179 lt!47718)))))))

(declare-fun bs!3941 () Bool)

(assert (= bs!3941 d!25345))

(declare-fun m!104279 () Bool)

(assert (=> bs!3941 m!104279))

(assert (=> bm!9662 d!25345))

(declare-fun d!25347 () Bool)

(declare-fun e!62738 () Bool)

(assert (=> d!25347 e!62738))

(declare-fun res!48537 () Bool)

(assert (=> d!25347 (=> res!48537 e!62738)))

(declare-fun lt!47941 () Bool)

(assert (=> d!25347 (= res!48537 (not lt!47941))))

(declare-fun lt!47939 () Bool)

(assert (=> d!25347 (= lt!47941 lt!47939)))

(declare-fun lt!47940 () Unit!2887)

(declare-fun e!62737 () Unit!2887)

(assert (=> d!25347 (= lt!47940 e!62737)))

(declare-fun c!16206 () Bool)

(assert (=> d!25347 (= c!16206 lt!47939)))

(assert (=> d!25347 (= lt!47939 (containsKey!152 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!25347 (= (contains!800 lt!47784 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!47941)))

(declare-fun b!96175 () Bool)

(declare-fun lt!47942 () Unit!2887)

(assert (=> b!96175 (= e!62737 lt!47942)))

(assert (=> b!96175 (= lt!47942 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!96175 (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!96176 () Bool)

(declare-fun Unit!2901 () Unit!2887)

(assert (=> b!96176 (= e!62737 Unit!2901)))

(declare-fun b!96177 () Bool)

(assert (=> b!96177 (= e!62738 (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!25347 c!16206) b!96175))

(assert (= (and d!25347 (not c!16206)) b!96176))

(assert (= (and d!25347 (not res!48537)) b!96177))

(assert (=> d!25347 m!103887))

(declare-fun m!104281 () Bool)

(assert (=> d!25347 m!104281))

(assert (=> b!96175 m!103887))

(declare-fun m!104283 () Bool)

(assert (=> b!96175 m!104283))

(assert (=> b!96175 m!103887))

(assert (=> b!96175 m!104221))

(assert (=> b!96175 m!104221))

(declare-fun m!104285 () Bool)

(assert (=> b!96175 m!104285))

(assert (=> b!96177 m!103887))

(assert (=> b!96177 m!104221))

(assert (=> b!96177 m!104221))

(assert (=> b!96177 m!104285))

(assert (=> b!95940 d!25347))

(declare-fun d!25349 () Bool)

(assert (=> d!25349 (= (apply!91 lt!47784 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1289 (getValueByKey!148 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3942 () Bool)

(assert (= bs!3942 d!25349))

(assert (=> bs!3942 m!103999))

(assert (=> bs!3942 m!103999))

(declare-fun m!104287 () Bool)

(assert (=> bs!3942 m!104287))

(assert (=> b!95952 d!25349))

(declare-fun d!25351 () Bool)

(declare-fun isEmpty!359 (Option!154) Bool)

(assert (=> d!25351 (= (isDefined!102 (getValueByKey!148 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))) (not (isEmpty!359 (getValueByKey!148 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))))

(declare-fun bs!3943 () Bool)

(assert (= bs!3943 d!25351))

(assert (=> bs!3943 m!103817))

(declare-fun m!104289 () Bool)

(assert (=> bs!3943 m!104289))

(assert (=> b!95737 d!25351))

(declare-fun b!96187 () Bool)

(declare-fun e!62743 () Option!154)

(declare-fun e!62744 () Option!154)

(assert (=> b!96187 (= e!62743 e!62744)))

(declare-fun c!16212 () Bool)

(assert (=> b!96187 (= c!16212 (and ((_ is Cons!1599) (toList!786 lt!47607)) (not (= (_1!1178 (h!2192 (toList!786 lt!47607))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))))

(declare-fun c!16211 () Bool)

(declare-fun d!25353 () Bool)

(assert (=> d!25353 (= c!16211 (and ((_ is Cons!1599) (toList!786 lt!47607)) (= (_1!1178 (h!2192 (toList!786 lt!47607))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (=> d!25353 (= (getValueByKey!148 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) e!62743)))

(declare-fun b!96188 () Bool)

(assert (=> b!96188 (= e!62744 (getValueByKey!148 (t!5529 (toList!786 lt!47607)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!96189 () Bool)

(assert (=> b!96189 (= e!62744 None!152)))

(declare-fun b!96186 () Bool)

(assert (=> b!96186 (= e!62743 (Some!153 (_2!1178 (h!2192 (toList!786 lt!47607)))))))

(assert (= (and d!25353 c!16211) b!96186))

(assert (= (and d!25353 (not c!16211)) b!96187))

(assert (= (and b!96187 c!16212) b!96188))

(assert (= (and b!96187 (not c!16212)) b!96189))

(assert (=> b!96188 m!103745))

(declare-fun m!104291 () Bool)

(assert (=> b!96188 m!104291))

(assert (=> b!95737 d!25353))

(declare-fun d!25355 () Bool)

(declare-fun e!62757 () Bool)

(assert (=> d!25355 e!62757))

(declare-fun res!48541 () Bool)

(assert (=> d!25355 (=> (not res!48541) (not e!62757))))

(assert (=> d!25355 (= res!48541 (or (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))))

(declare-fun lt!47952 () ListLongMap!1541)

(declare-fun lt!47945 () ListLongMap!1541)

(assert (=> d!25355 (= lt!47952 lt!47945)))

(declare-fun lt!47944 () Unit!2887)

(declare-fun e!62749 () Unit!2887)

(assert (=> d!25355 (= lt!47944 e!62749)))

(declare-fun c!16215 () Bool)

(declare-fun e!62754 () Bool)

(assert (=> d!25355 (= c!16215 e!62754)))

(declare-fun res!48543 () Bool)

(assert (=> d!25355 (=> (not res!48543) (not e!62754))))

(assert (=> d!25355 (= res!48543 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun e!62755 () ListLongMap!1541)

(assert (=> d!25355 (= lt!47945 e!62755)))

(declare-fun c!16218 () Bool)

(assert (=> d!25355 (= c!16218 (and (not (= (bvand (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25355 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25355 (= (getCurrentListMap!467 (_keys!4143 newMap!16) (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712) (mask!6542 newMap!16) (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!47952)))

(declare-fun b!96190 () Bool)

(declare-fun e!62752 () ListLongMap!1541)

(assert (=> b!96190 (= e!62755 e!62752)))

(declare-fun c!16213 () Bool)

(assert (=> b!96190 (= c!16213 (and (not (= (bvand (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96191 () Bool)

(declare-fun e!62746 () Bool)

(assert (=> b!96191 (= e!62746 (= (apply!91 lt!47952 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96192 () Bool)

(declare-fun e!62751 () Bool)

(assert (=> b!96192 (= e!62757 e!62751)))

(declare-fun c!16214 () Bool)

(assert (=> b!96192 (= c!16214 (not (= (bvand (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96193 () Bool)

(declare-fun call!9750 () ListLongMap!1541)

(assert (=> b!96193 (= e!62755 (+!137 call!9750 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun bm!9745 () Bool)

(declare-fun call!9749 () ListLongMap!1541)

(declare-fun call!9754 () ListLongMap!1541)

(assert (=> bm!9745 (= call!9749 call!9754)))

(declare-fun c!16216 () Bool)

(declare-fun b!96194 () Bool)

(assert (=> b!96194 (= c!16216 (and (not (= (bvand (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62756 () ListLongMap!1541)

(assert (=> b!96194 (= e!62752 e!62756)))

(declare-fun b!96195 () Bool)

(declare-fun res!48538 () Bool)

(assert (=> b!96195 (=> (not res!48538) (not e!62757))))

(declare-fun e!62753 () Bool)

(assert (=> b!96195 (= res!48538 e!62753)))

(declare-fun res!48542 () Bool)

(assert (=> b!96195 (=> res!48542 e!62753)))

(declare-fun e!62745 () Bool)

(assert (=> b!96195 (= res!48542 (not e!62745))))

(declare-fun res!48544 () Bool)

(assert (=> b!96195 (=> (not res!48544) (not e!62745))))

(assert (=> b!96195 (= res!48544 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun bm!9746 () Bool)

(declare-fun call!9751 () ListLongMap!1541)

(assert (=> bm!9746 (= call!9750 (+!137 (ite c!16218 call!9754 (ite c!16213 call!9749 call!9751)) (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!96196 () Bool)

(assert (=> b!96196 (= e!62754 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96197 () Bool)

(declare-fun e!62750 () Bool)

(assert (=> b!96197 (= e!62753 e!62750)))

(declare-fun res!48539 () Bool)

(assert (=> b!96197 (=> (not res!48539) (not e!62750))))

(assert (=> b!96197 (= res!48539 (contains!800 lt!47952 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96197 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96198 () Bool)

(declare-fun call!9752 () Bool)

(assert (=> b!96198 (= e!62751 (not call!9752))))

(declare-fun b!96199 () Bool)

(assert (=> b!96199 (= e!62756 call!9751)))

(declare-fun bm!9747 () Bool)

(assert (=> bm!9747 (= call!9751 call!9749)))

(declare-fun b!96200 () Bool)

(declare-fun e!62747 () Bool)

(declare-fun call!9748 () Bool)

(assert (=> b!96200 (= e!62747 (not call!9748))))

(declare-fun bm!9748 () Bool)

(assert (=> bm!9748 (= call!9748 (contains!800 lt!47952 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96201 () Bool)

(assert (=> b!96201 (= e!62750 (= (apply!91 lt!47952 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96201 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712))))))

(assert (=> b!96201 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96202 () Bool)

(declare-fun Unit!2902 () Unit!2887)

(assert (=> b!96202 (= e!62749 Unit!2902)))

(declare-fun bm!9749 () Bool)

(declare-fun call!9753 () ListLongMap!1541)

(assert (=> bm!9749 (= call!9753 call!9750)))

(declare-fun b!96203 () Bool)

(declare-fun res!48545 () Bool)

(assert (=> b!96203 (=> (not res!48545) (not e!62757))))

(assert (=> b!96203 (= res!48545 e!62747)))

(declare-fun c!16217 () Bool)

(assert (=> b!96203 (= c!16217 (not (= (bvand (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!96204 () Bool)

(assert (=> b!96204 (= e!62752 call!9753)))

(declare-fun b!96205 () Bool)

(declare-fun lt!47956 () Unit!2887)

(assert (=> b!96205 (= e!62749 lt!47956)))

(declare-fun lt!47950 () ListLongMap!1541)

(assert (=> b!96205 (= lt!47950 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712) (mask!6542 newMap!16) (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47960 () (_ BitVec 64))

(assert (=> b!96205 (= lt!47960 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47949 () (_ BitVec 64))

(assert (=> b!96205 (= lt!47949 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47951 () Unit!2887)

(assert (=> b!96205 (= lt!47951 (addStillContains!67 lt!47950 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!47949))))

(assert (=> b!96205 (contains!800 (+!137 lt!47950 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!47949)))

(declare-fun lt!47959 () Unit!2887)

(assert (=> b!96205 (= lt!47959 lt!47951)))

(declare-fun lt!47953 () ListLongMap!1541)

(assert (=> b!96205 (= lt!47953 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712) (mask!6542 newMap!16) (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47957 () (_ BitVec 64))

(assert (=> b!96205 (= lt!47957 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47948 () (_ BitVec 64))

(assert (=> b!96205 (= lt!47948 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47958 () Unit!2887)

(assert (=> b!96205 (= lt!47958 (addApplyDifferent!67 lt!47953 lt!47957 (minValue!2342 newMap!16) lt!47948))))

(assert (=> b!96205 (= (apply!91 (+!137 lt!47953 (tuple2!2337 lt!47957 (minValue!2342 newMap!16))) lt!47948) (apply!91 lt!47953 lt!47948))))

(declare-fun lt!47946 () Unit!2887)

(assert (=> b!96205 (= lt!47946 lt!47958)))

(declare-fun lt!47943 () ListLongMap!1541)

(assert (=> b!96205 (= lt!47943 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712) (mask!6542 newMap!16) (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47954 () (_ BitVec 64))

(assert (=> b!96205 (= lt!47954 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47962 () (_ BitVec 64))

(assert (=> b!96205 (= lt!47962 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47964 () Unit!2887)

(assert (=> b!96205 (= lt!47964 (addApplyDifferent!67 lt!47943 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!47962))))

(assert (=> b!96205 (= (apply!91 (+!137 lt!47943 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!47962) (apply!91 lt!47943 lt!47962))))

(declare-fun lt!47963 () Unit!2887)

(assert (=> b!96205 (= lt!47963 lt!47964)))

(declare-fun lt!47961 () ListLongMap!1541)

(assert (=> b!96205 (= lt!47961 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712) (mask!6542 newMap!16) (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47955 () (_ BitVec 64))

(assert (=> b!96205 (= lt!47955 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47947 () (_ BitVec 64))

(assert (=> b!96205 (= lt!47947 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96205 (= lt!47956 (addApplyDifferent!67 lt!47961 lt!47955 (minValue!2342 newMap!16) lt!47947))))

(assert (=> b!96205 (= (apply!91 (+!137 lt!47961 (tuple2!2337 lt!47955 (minValue!2342 newMap!16))) lt!47947) (apply!91 lt!47961 lt!47947))))

(declare-fun b!96206 () Bool)

(assert (=> b!96206 (= e!62751 e!62746)))

(declare-fun res!48546 () Bool)

(assert (=> b!96206 (= res!48546 call!9752)))

(assert (=> b!96206 (=> (not res!48546) (not e!62746))))

(declare-fun b!96207 () Bool)

(assert (=> b!96207 (= e!62745 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9750 () Bool)

(assert (=> bm!9750 (= call!9754 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712) (mask!6542 newMap!16) (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9751 () Bool)

(assert (=> bm!9751 (= call!9752 (contains!800 lt!47952 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96208 () Bool)

(assert (=> b!96208 (= e!62756 call!9753)))

(declare-fun b!96209 () Bool)

(declare-fun e!62748 () Bool)

(assert (=> b!96209 (= e!62748 (= (apply!91 lt!47952 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))

(declare-fun b!96210 () Bool)

(assert (=> b!96210 (= e!62747 e!62748)))

(declare-fun res!48540 () Bool)

(assert (=> b!96210 (= res!48540 call!9748)))

(assert (=> b!96210 (=> (not res!48540) (not e!62748))))

(assert (= (and d!25355 c!16218) b!96193))

(assert (= (and d!25355 (not c!16218)) b!96190))

(assert (= (and b!96190 c!16213) b!96204))

(assert (= (and b!96190 (not c!16213)) b!96194))

(assert (= (and b!96194 c!16216) b!96208))

(assert (= (and b!96194 (not c!16216)) b!96199))

(assert (= (or b!96208 b!96199) bm!9747))

(assert (= (or b!96204 bm!9747) bm!9745))

(assert (= (or b!96204 b!96208) bm!9749))

(assert (= (or b!96193 bm!9745) bm!9750))

(assert (= (or b!96193 bm!9749) bm!9746))

(assert (= (and d!25355 res!48543) b!96196))

(assert (= (and d!25355 c!16215) b!96205))

(assert (= (and d!25355 (not c!16215)) b!96202))

(assert (= (and d!25355 res!48541) b!96195))

(assert (= (and b!96195 res!48544) b!96207))

(assert (= (and b!96195 (not res!48542)) b!96197))

(assert (= (and b!96197 res!48539) b!96201))

(assert (= (and b!96195 res!48538) b!96203))

(assert (= (and b!96203 c!16217) b!96210))

(assert (= (and b!96203 (not c!16217)) b!96200))

(assert (= (and b!96210 res!48540) b!96209))

(assert (= (or b!96210 b!96200) bm!9748))

(assert (= (and b!96203 res!48545) b!96192))

(assert (= (and b!96192 c!16214) b!96206))

(assert (= (and b!96192 (not c!16214)) b!96198))

(assert (= (and b!96206 res!48546) b!96191))

(assert (= (or b!96206 b!96198) bm!9751))

(declare-fun b_lambda!4267 () Bool)

(assert (=> (not b_lambda!4267) (not b!96201)))

(assert (=> b!96201 t!5535))

(declare-fun b_and!5889 () Bool)

(assert (= b_and!5885 (and (=> t!5535 result!3233) b_and!5889)))

(assert (=> b!96201 t!5537))

(declare-fun b_and!5891 () Bool)

(assert (= b_and!5887 (and (=> t!5537 result!3235) b_and!5891)))

(assert (=> b!96197 m!104003))

(assert (=> b!96197 m!104003))

(declare-fun m!104293 () Bool)

(assert (=> b!96197 m!104293))

(declare-fun m!104295 () Bool)

(assert (=> b!96205 m!104295))

(declare-fun m!104297 () Bool)

(assert (=> b!96205 m!104297))

(declare-fun m!104299 () Bool)

(assert (=> b!96205 m!104299))

(declare-fun m!104301 () Bool)

(assert (=> b!96205 m!104301))

(declare-fun m!104303 () Bool)

(assert (=> b!96205 m!104303))

(assert (=> b!96205 m!104299))

(declare-fun m!104305 () Bool)

(assert (=> b!96205 m!104305))

(declare-fun m!104307 () Bool)

(assert (=> b!96205 m!104307))

(declare-fun m!104309 () Bool)

(assert (=> b!96205 m!104309))

(declare-fun m!104311 () Bool)

(assert (=> b!96205 m!104311))

(declare-fun m!104313 () Bool)

(assert (=> b!96205 m!104313))

(declare-fun m!104315 () Bool)

(assert (=> b!96205 m!104315))

(declare-fun m!104317 () Bool)

(assert (=> b!96205 m!104317))

(assert (=> b!96205 m!104309))

(declare-fun m!104319 () Bool)

(assert (=> b!96205 m!104319))

(assert (=> b!96205 m!104311))

(assert (=> b!96205 m!104003))

(declare-fun m!104321 () Bool)

(assert (=> b!96205 m!104321))

(assert (=> b!96205 m!104315))

(declare-fun m!104323 () Bool)

(assert (=> b!96205 m!104323))

(declare-fun m!104325 () Bool)

(assert (=> b!96205 m!104325))

(declare-fun m!104327 () Bool)

(assert (=> b!96201 m!104327))

(assert (=> b!96201 m!104003))

(declare-fun m!104329 () Bool)

(assert (=> b!96201 m!104329))

(assert (=> b!96201 m!104327))

(assert (=> b!96201 m!104043))

(declare-fun m!104331 () Bool)

(assert (=> b!96201 m!104331))

(assert (=> b!96201 m!104003))

(assert (=> b!96201 m!104043))

(declare-fun m!104333 () Bool)

(assert (=> b!96193 m!104333))

(assert (=> d!25355 m!103977))

(declare-fun m!104335 () Bool)

(assert (=> bm!9748 m!104335))

(assert (=> b!96196 m!104003))

(assert (=> b!96196 m!104003))

(assert (=> b!96196 m!104051))

(declare-fun m!104337 () Bool)

(assert (=> bm!9746 m!104337))

(declare-fun m!104339 () Bool)

(assert (=> b!96209 m!104339))

(declare-fun m!104341 () Bool)

(assert (=> bm!9751 m!104341))

(declare-fun m!104343 () Bool)

(assert (=> b!96191 m!104343))

(assert (=> b!96207 m!104003))

(assert (=> b!96207 m!104003))

(assert (=> b!96207 m!104051))

(assert (=> bm!9750 m!104317))

(assert (=> bm!9682 d!25355))

(declare-fun d!25357 () Bool)

(assert (=> d!25357 (= (+!137 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47967 () Unit!2887)

(declare-fun choose!586 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 V!3139 Int) Unit!2887)

(assert (=> d!25357 (= lt!47967 (choose!586 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25357 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25357 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)) lt!47967)))

(declare-fun bs!3944 () Bool)

(assert (= bs!3944 d!25357))

(assert (=> bs!3944 m!103899))

(assert (=> bs!3944 m!103977))

(assert (=> bs!3944 m!103765))

(declare-fun m!104345 () Bool)

(assert (=> bs!3944 m!104345))

(assert (=> bs!3944 m!103765))

(declare-fun m!104347 () Bool)

(assert (=> bs!3944 m!104347))

(assert (=> bs!3944 m!103899))

(declare-fun m!104349 () Bool)

(assert (=> bs!3944 m!104349))

(assert (=> b!95822 d!25357))

(declare-fun d!25359 () Bool)

(assert (=> d!25359 (isDefined!102 (getValueByKey!148 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun lt!47970 () Unit!2887)

(declare-fun choose!587 (List!1603 (_ BitVec 64)) Unit!2887)

(assert (=> d!25359 (= lt!47970 (choose!587 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun e!62760 () Bool)

(assert (=> d!25359 e!62760))

(declare-fun res!48549 () Bool)

(assert (=> d!25359 (=> (not res!48549) (not e!62760))))

(declare-fun isStrictlySorted!298 (List!1603) Bool)

(assert (=> d!25359 (= res!48549 (isStrictlySorted!298 (toList!786 lt!47607)))))

(assert (=> d!25359 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) lt!47970)))

(declare-fun b!96213 () Bool)

(assert (=> b!96213 (= e!62760 (containsKey!152 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (= (and d!25359 res!48549) b!96213))

(assert (=> d!25359 m!103745))

(assert (=> d!25359 m!103817))

(assert (=> d!25359 m!103817))

(assert (=> d!25359 m!103819))

(assert (=> d!25359 m!103745))

(declare-fun m!104351 () Bool)

(assert (=> d!25359 m!104351))

(declare-fun m!104353 () Bool)

(assert (=> d!25359 m!104353))

(assert (=> b!96213 m!103745))

(assert (=> b!96213 m!103813))

(assert (=> b!95735 d!25359))

(assert (=> b!95735 d!25351))

(assert (=> b!95735 d!25353))

(assert (=> d!25265 d!25269))

(declare-fun d!25361 () Bool)

(assert (=> d!25361 (not (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!25361 true))

(declare-fun _$68!88 () Unit!2887)

(assert (=> d!25361 (= (choose!68 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599)) _$68!88)))

(declare-fun bs!3945 () Bool)

(assert (= bs!3945 d!25361))

(assert (=> bs!3945 m!103745))

(assert (=> bs!3945 m!103749))

(assert (=> d!25265 d!25361))

(declare-fun d!25363 () Bool)

(declare-fun res!48550 () Bool)

(declare-fun e!62761 () Bool)

(assert (=> d!25363 (=> res!48550 e!62761)))

(assert (=> d!25363 (= res!48550 (= (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25363 (= (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000) e!62761)))

(declare-fun b!96214 () Bool)

(declare-fun e!62762 () Bool)

(assert (=> b!96214 (= e!62761 e!62762)))

(declare-fun res!48551 () Bool)

(assert (=> b!96214 (=> (not res!48551) (not e!62762))))

(assert (=> b!96214 (= res!48551 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96215 () Bool)

(assert (=> b!96215 (= e!62762 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!25363 (not res!48550)) b!96214))

(assert (= (and b!96214 res!48551) b!96215))

(assert (=> d!25363 m!104003))

(assert (=> b!96215 m!103745))

(declare-fun m!104355 () Bool)

(assert (=> b!96215 m!104355))

(assert (=> bm!9664 d!25363))

(declare-fun d!25365 () Bool)

(declare-fun res!48556 () Bool)

(declare-fun e!62767 () Bool)

(assert (=> d!25365 (=> res!48556 e!62767)))

(assert (=> d!25365 (= res!48556 (and ((_ is Cons!1599) (toList!786 lt!47607)) (= (_1!1178 (h!2192 (toList!786 lt!47607))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (=> d!25365 (= (containsKey!152 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) e!62767)))

(declare-fun b!96220 () Bool)

(declare-fun e!62768 () Bool)

(assert (=> b!96220 (= e!62767 e!62768)))

(declare-fun res!48557 () Bool)

(assert (=> b!96220 (=> (not res!48557) (not e!62768))))

(assert (=> b!96220 (= res!48557 (and (or (not ((_ is Cons!1599) (toList!786 lt!47607))) (bvsle (_1!1178 (h!2192 (toList!786 lt!47607))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))) ((_ is Cons!1599) (toList!786 lt!47607)) (bvslt (_1!1178 (h!2192 (toList!786 lt!47607))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(declare-fun b!96221 () Bool)

(assert (=> b!96221 (= e!62768 (containsKey!152 (t!5529 (toList!786 lt!47607)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (= (and d!25365 (not res!48556)) b!96220))

(assert (= (and b!96220 res!48557) b!96221))

(assert (=> b!96221 m!103745))

(declare-fun m!104357 () Bool)

(assert (=> b!96221 m!104357))

(assert (=> d!25255 d!25365))

(assert (=> d!25281 d!25283))

(declare-fun b!96230 () Bool)

(declare-fun e!62775 () Bool)

(declare-fun call!9757 () Bool)

(assert (=> b!96230 (= e!62775 call!9757)))

(declare-fun bm!9754 () Bool)

(assert (=> bm!9754 (= call!9757 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!96231 () Bool)

(declare-fun e!62776 () Bool)

(declare-fun e!62777 () Bool)

(assert (=> b!96231 (= e!62776 e!62777)))

(declare-fun c!16221 () Bool)

(assert (=> b!96231 (= c!16221 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96233 () Bool)

(assert (=> b!96233 (= e!62777 call!9757)))

(declare-fun b!96232 () Bool)

(assert (=> b!96232 (= e!62777 e!62775)))

(declare-fun lt!47977 () (_ BitVec 64))

(assert (=> b!96232 (= lt!47977 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47978 () Unit!2887)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4214 (_ BitVec 64) (_ BitVec 32)) Unit!2887)

(assert (=> b!96232 (= lt!47978 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4143 newMap!16) lt!47977 #b00000000000000000000000000000000))))

(assert (=> b!96232 (arrayContainsKey!0 (_keys!4143 newMap!16) lt!47977 #b00000000000000000000000000000000)))

(declare-fun lt!47979 () Unit!2887)

(assert (=> b!96232 (= lt!47979 lt!47978)))

(declare-fun res!48563 () Bool)

(assert (=> b!96232 (= res!48563 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (_keys!4143 newMap!16) (mask!6542 newMap!16)) (Found!262 #b00000000000000000000000000000000)))))

(assert (=> b!96232 (=> (not res!48563) (not e!62775))))

(declare-fun d!25367 () Bool)

(declare-fun res!48562 () Bool)

(assert (=> d!25367 (=> res!48562 e!62776)))

(assert (=> d!25367 (= res!48562 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25367 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 newMap!16) (mask!6542 newMap!16)) e!62776)))

(assert (= (and d!25367 (not res!48562)) b!96231))

(assert (= (and b!96231 c!16221) b!96232))

(assert (= (and b!96231 (not c!16221)) b!96233))

(assert (= (and b!96232 res!48563) b!96230))

(assert (= (or b!96230 b!96233) bm!9754))

(declare-fun m!104359 () Bool)

(assert (=> bm!9754 m!104359))

(assert (=> b!96231 m!104003))

(assert (=> b!96231 m!104003))

(assert (=> b!96231 m!104051))

(assert (=> b!96232 m!104003))

(declare-fun m!104361 () Bool)

(assert (=> b!96232 m!104361))

(declare-fun m!104363 () Bool)

(assert (=> b!96232 m!104363))

(assert (=> b!96232 m!104003))

(declare-fun m!104365 () Bool)

(assert (=> b!96232 m!104365))

(assert (=> b!95961 d!25367))

(assert (=> b!95890 d!25299))

(declare-fun d!25369 () Bool)

(assert (=> d!25369 (= (inRange!0 (ite c!16107 (ite c!16108 (index!3191 lt!47699) (ite c!16118 (index!3190 lt!47703) (index!3193 lt!47703))) (ite c!16117 (index!3191 lt!47706) (ite c!16113 (index!3190 lt!47715) (index!3193 lt!47715)))) (mask!6542 newMap!16)) (and (bvsge (ite c!16107 (ite c!16108 (index!3191 lt!47699) (ite c!16118 (index!3190 lt!47703) (index!3193 lt!47703))) (ite c!16117 (index!3191 lt!47706) (ite c!16113 (index!3190 lt!47715) (index!3193 lt!47715)))) #b00000000000000000000000000000000) (bvslt (ite c!16107 (ite c!16108 (index!3191 lt!47699) (ite c!16118 (index!3190 lt!47703) (index!3193 lt!47703))) (ite c!16117 (index!3191 lt!47706) (ite c!16113 (index!3190 lt!47715) (index!3193 lt!47715)))) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9676 d!25369))

(declare-fun d!25371 () Bool)

(assert (=> d!25371 (= (apply!91 lt!47785 lt!47780) (get!1289 (getValueByKey!148 (toList!786 lt!47785) lt!47780)))))

(declare-fun bs!3946 () Bool)

(assert (= bs!3946 d!25371))

(declare-fun m!104367 () Bool)

(assert (=> bs!3946 m!104367))

(assert (=> bs!3946 m!104367))

(declare-fun m!104369 () Bool)

(assert (=> bs!3946 m!104369))

(assert (=> b!95948 d!25371))

(declare-fun d!25373 () Bool)

(assert (=> d!25373 (= (apply!91 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47779) (apply!91 lt!47793 lt!47779))))

(declare-fun lt!47982 () Unit!2887)

(declare-fun choose!588 (ListLongMap!1541 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2887)

(assert (=> d!25373 (= lt!47982 (choose!588 lt!47793 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47779))))

(declare-fun e!62780 () Bool)

(assert (=> d!25373 e!62780))

(declare-fun res!48566 () Bool)

(assert (=> d!25373 (=> (not res!48566) (not e!62780))))

(assert (=> d!25373 (= res!48566 (contains!800 lt!47793 lt!47779))))

(assert (=> d!25373 (= (addApplyDifferent!67 lt!47793 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47779) lt!47982)))

(declare-fun b!96237 () Bool)

(assert (=> b!96237 (= e!62780 (not (= lt!47779 lt!47787)))))

(assert (= (and d!25373 res!48566) b!96237))

(declare-fun m!104371 () Bool)

(assert (=> d!25373 m!104371))

(assert (=> d!25373 m!103903))

(declare-fun m!104373 () Bool)

(assert (=> d!25373 m!104373))

(assert (=> d!25373 m!103907))

(assert (=> d!25373 m!103909))

(assert (=> d!25373 m!103907))

(assert (=> b!95948 d!25373))

(assert (=> b!95948 d!25333))

(declare-fun d!25375 () Bool)

(declare-fun e!62781 () Bool)

(assert (=> d!25375 e!62781))

(declare-fun res!48567 () Bool)

(assert (=> d!25375 (=> (not res!48567) (not e!62781))))

(declare-fun lt!47985 () ListLongMap!1541)

(assert (=> d!25375 (= res!48567 (contains!800 lt!47985 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun lt!47984 () List!1603)

(assert (=> d!25375 (= lt!47985 (ListLongMap!1542 lt!47984))))

(declare-fun lt!47983 () Unit!2887)

(declare-fun lt!47986 () Unit!2887)

(assert (=> d!25375 (= lt!47983 lt!47986)))

(assert (=> d!25375 (= (getValueByKey!148 lt!47984 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25375 (= lt!47986 (lemmaContainsTupThenGetReturnValue!66 lt!47984 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25375 (= lt!47984 (insertStrictlySorted!68 (toList!786 lt!47793) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25375 (= (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47985)))

(declare-fun b!96238 () Bool)

(declare-fun res!48568 () Bool)

(assert (=> b!96238 (=> (not res!48568) (not e!62781))))

(assert (=> b!96238 (= res!48568 (= (getValueByKey!148 (toList!786 lt!47985) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96239 () Bool)

(assert (=> b!96239 (= e!62781 (contains!802 (toList!786 lt!47985) (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(assert (= (and d!25375 res!48567) b!96238))

(assert (= (and b!96238 res!48568) b!96239))

(declare-fun m!104375 () Bool)

(assert (=> d!25375 m!104375))

(declare-fun m!104377 () Bool)

(assert (=> d!25375 m!104377))

(declare-fun m!104379 () Bool)

(assert (=> d!25375 m!104379))

(declare-fun m!104381 () Bool)

(assert (=> d!25375 m!104381))

(declare-fun m!104383 () Bool)

(assert (=> b!96238 m!104383))

(declare-fun m!104385 () Bool)

(assert (=> b!96239 m!104385))

(assert (=> b!95948 d!25375))

(declare-fun d!25377 () Bool)

(declare-fun e!62782 () Bool)

(assert (=> d!25377 e!62782))

(declare-fun res!48569 () Bool)

(assert (=> d!25377 (=> (not res!48569) (not e!62782))))

(declare-fun lt!47989 () ListLongMap!1541)

(assert (=> d!25377 (= res!48569 (contains!800 lt!47989 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun lt!47988 () List!1603)

(assert (=> d!25377 (= lt!47989 (ListLongMap!1542 lt!47988))))

(declare-fun lt!47987 () Unit!2887)

(declare-fun lt!47990 () Unit!2887)

(assert (=> d!25377 (= lt!47987 lt!47990)))

(assert (=> d!25377 (= (getValueByKey!148 lt!47988 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25377 (= lt!47990 (lemmaContainsTupThenGetReturnValue!66 lt!47988 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25377 (= lt!47988 (insertStrictlySorted!68 (toList!786 lt!47775) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25377 (= (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47989)))

(declare-fun b!96240 () Bool)

(declare-fun res!48570 () Bool)

(assert (=> b!96240 (=> (not res!48570) (not e!62782))))

(assert (=> b!96240 (= res!48570 (= (getValueByKey!148 (toList!786 lt!47989) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96241 () Bool)

(assert (=> b!96241 (= e!62782 (contains!802 (toList!786 lt!47989) (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(assert (= (and d!25377 res!48569) b!96240))

(assert (= (and b!96240 res!48570) b!96241))

(declare-fun m!104387 () Bool)

(assert (=> d!25377 m!104387))

(declare-fun m!104389 () Bool)

(assert (=> d!25377 m!104389))

(declare-fun m!104391 () Bool)

(assert (=> d!25377 m!104391))

(declare-fun m!104393 () Bool)

(assert (=> d!25377 m!104393))

(declare-fun m!104395 () Bool)

(assert (=> b!96240 m!104395))

(declare-fun m!104397 () Bool)

(assert (=> b!96241 m!104397))

(assert (=> b!95948 d!25377))

(declare-fun d!25379 () Bool)

(assert (=> d!25379 (contains!800 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47781)))

(declare-fun lt!47993 () Unit!2887)

(declare-fun choose!589 (ListLongMap!1541 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2887)

(assert (=> d!25379 (= lt!47993 (choose!589 lt!47782 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47781))))

(assert (=> d!25379 (contains!800 lt!47782 lt!47781)))

(assert (=> d!25379 (= (addStillContains!67 lt!47782 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47781) lt!47993)))

(declare-fun bs!3947 () Bool)

(assert (= bs!3947 d!25379))

(assert (=> bs!3947 m!103917))

(assert (=> bs!3947 m!103917))

(assert (=> bs!3947 m!103927))

(declare-fun m!104399 () Bool)

(assert (=> bs!3947 m!104399))

(declare-fun m!104401 () Bool)

(assert (=> bs!3947 m!104401))

(assert (=> b!95948 d!25379))

(declare-fun d!25381 () Bool)

(assert (=> d!25381 (= (apply!91 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47779) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47779)))))

(declare-fun bs!3948 () Bool)

(assert (= bs!3948 d!25381))

(declare-fun m!104403 () Bool)

(assert (=> bs!3948 m!104403))

(assert (=> bs!3948 m!104403))

(declare-fun m!104405 () Bool)

(assert (=> bs!3948 m!104405))

(assert (=> b!95948 d!25381))

(declare-fun d!25383 () Bool)

(declare-fun e!62784 () Bool)

(assert (=> d!25383 e!62784))

(declare-fun res!48571 () Bool)

(assert (=> d!25383 (=> res!48571 e!62784)))

(declare-fun lt!47996 () Bool)

(assert (=> d!25383 (= res!48571 (not lt!47996))))

(declare-fun lt!47994 () Bool)

(assert (=> d!25383 (= lt!47996 lt!47994)))

(declare-fun lt!47995 () Unit!2887)

(declare-fun e!62783 () Unit!2887)

(assert (=> d!25383 (= lt!47995 e!62783)))

(declare-fun c!16222 () Bool)

(assert (=> d!25383 (= c!16222 lt!47994)))

(assert (=> d!25383 (= lt!47994 (containsKey!152 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781))))

(assert (=> d!25383 (= (contains!800 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47781) lt!47996)))

(declare-fun b!96243 () Bool)

(declare-fun lt!47997 () Unit!2887)

(assert (=> b!96243 (= e!62783 lt!47997)))

(assert (=> b!96243 (= lt!47997 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781))))

(assert (=> b!96243 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781))))

(declare-fun b!96244 () Bool)

(declare-fun Unit!2903 () Unit!2887)

(assert (=> b!96244 (= e!62783 Unit!2903)))

(declare-fun b!96245 () Bool)

(assert (=> b!96245 (= e!62784 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781)))))

(assert (= (and d!25383 c!16222) b!96243))

(assert (= (and d!25383 (not c!16222)) b!96244))

(assert (= (and d!25383 (not res!48571)) b!96245))

(declare-fun m!104407 () Bool)

(assert (=> d!25383 m!104407))

(declare-fun m!104409 () Bool)

(assert (=> b!96243 m!104409))

(declare-fun m!104411 () Bool)

(assert (=> b!96243 m!104411))

(assert (=> b!96243 m!104411))

(declare-fun m!104413 () Bool)

(assert (=> b!96243 m!104413))

(assert (=> b!96245 m!104411))

(assert (=> b!96245 m!104411))

(assert (=> b!96245 m!104413))

(assert (=> b!95948 d!25383))

(declare-fun d!25385 () Bool)

(assert (=> d!25385 (= (apply!91 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47780) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47780)))))

(declare-fun bs!3949 () Bool)

(assert (= bs!3949 d!25385))

(declare-fun m!104415 () Bool)

(assert (=> bs!3949 m!104415))

(assert (=> bs!3949 m!104415))

(declare-fun m!104417 () Bool)

(assert (=> bs!3949 m!104417))

(assert (=> b!95948 d!25385))

(declare-fun d!25387 () Bool)

(assert (=> d!25387 (= (apply!91 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47780) (apply!91 lt!47785 lt!47780))))

(declare-fun lt!47998 () Unit!2887)

(assert (=> d!25387 (= lt!47998 (choose!588 lt!47785 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47780))))

(declare-fun e!62785 () Bool)

(assert (=> d!25387 e!62785))

(declare-fun res!48572 () Bool)

(assert (=> d!25387 (=> (not res!48572) (not e!62785))))

(assert (=> d!25387 (= res!48572 (contains!800 lt!47785 lt!47780))))

(assert (=> d!25387 (= (addApplyDifferent!67 lt!47785 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47780) lt!47998)))

(declare-fun b!96246 () Bool)

(assert (=> b!96246 (= e!62785 (not (= lt!47780 lt!47789)))))

(assert (= (and d!25387 res!48572) b!96246))

(declare-fun m!104419 () Bool)

(assert (=> d!25387 m!104419))

(assert (=> d!25387 m!103911))

(declare-fun m!104421 () Bool)

(assert (=> d!25387 m!104421))

(assert (=> d!25387 m!103923))

(assert (=> d!25387 m!103931))

(assert (=> d!25387 m!103923))

(assert (=> b!95948 d!25387))

(declare-fun d!25389 () Bool)

(assert (=> d!25389 (= (apply!91 lt!47793 lt!47779) (get!1289 (getValueByKey!148 (toList!786 lt!47793) lt!47779)))))

(declare-fun bs!3950 () Bool)

(assert (= bs!3950 d!25389))

(declare-fun m!104423 () Bool)

(assert (=> bs!3950 m!104423))

(assert (=> bs!3950 m!104423))

(declare-fun m!104425 () Bool)

(assert (=> bs!3950 m!104425))

(assert (=> b!95948 d!25389))

(declare-fun d!25391 () Bool)

(declare-fun e!62786 () Bool)

(assert (=> d!25391 e!62786))

(declare-fun res!48573 () Bool)

(assert (=> d!25391 (=> (not res!48573) (not e!62786))))

(declare-fun lt!48001 () ListLongMap!1541)

(assert (=> d!25391 (= res!48573 (contains!800 lt!48001 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun lt!48000 () List!1603)

(assert (=> d!25391 (= lt!48001 (ListLongMap!1542 lt!48000))))

(declare-fun lt!47999 () Unit!2887)

(declare-fun lt!48002 () Unit!2887)

(assert (=> d!25391 (= lt!47999 lt!48002)))

(assert (=> d!25391 (= (getValueByKey!148 lt!48000 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25391 (= lt!48002 (lemmaContainsTupThenGetReturnValue!66 lt!48000 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25391 (= lt!48000 (insertStrictlySorted!68 (toList!786 lt!47782) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25391 (= (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!48001)))

(declare-fun b!96247 () Bool)

(declare-fun res!48574 () Bool)

(assert (=> b!96247 (=> (not res!48574) (not e!62786))))

(assert (=> b!96247 (= res!48574 (= (getValueByKey!148 (toList!786 lt!48001) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96248 () Bool)

(assert (=> b!96248 (= e!62786 (contains!802 (toList!786 lt!48001) (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(assert (= (and d!25391 res!48573) b!96247))

(assert (= (and b!96247 res!48574) b!96248))

(declare-fun m!104427 () Bool)

(assert (=> d!25391 m!104427))

(declare-fun m!104429 () Bool)

(assert (=> d!25391 m!104429))

(declare-fun m!104431 () Bool)

(assert (=> d!25391 m!104431))

(declare-fun m!104433 () Bool)

(assert (=> d!25391 m!104433))

(declare-fun m!104435 () Bool)

(assert (=> b!96247 m!104435))

(declare-fun m!104437 () Bool)

(assert (=> b!96248 m!104437))

(assert (=> b!95948 d!25391))

(declare-fun d!25393 () Bool)

(assert (=> d!25393 (= (apply!91 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47794) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47794)))))

(declare-fun bs!3951 () Bool)

(assert (= bs!3951 d!25393))

(declare-fun m!104439 () Bool)

(assert (=> bs!3951 m!104439))

(assert (=> bs!3951 m!104439))

(declare-fun m!104441 () Bool)

(assert (=> bs!3951 m!104441))

(assert (=> b!95948 d!25393))

(declare-fun d!25395 () Bool)

(declare-fun e!62787 () Bool)

(assert (=> d!25395 e!62787))

(declare-fun res!48575 () Bool)

(assert (=> d!25395 (=> (not res!48575) (not e!62787))))

(declare-fun lt!48005 () ListLongMap!1541)

(assert (=> d!25395 (= res!48575 (contains!800 lt!48005 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun lt!48004 () List!1603)

(assert (=> d!25395 (= lt!48005 (ListLongMap!1542 lt!48004))))

(declare-fun lt!48003 () Unit!2887)

(declare-fun lt!48006 () Unit!2887)

(assert (=> d!25395 (= lt!48003 lt!48006)))

(assert (=> d!25395 (= (getValueByKey!148 lt!48004 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25395 (= lt!48006 (lemmaContainsTupThenGetReturnValue!66 lt!48004 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25395 (= lt!48004 (insertStrictlySorted!68 (toList!786 lt!47785) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25395 (= (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!48005)))

(declare-fun b!96249 () Bool)

(declare-fun res!48576 () Bool)

(assert (=> b!96249 (=> (not res!48576) (not e!62787))))

(assert (=> b!96249 (= res!48576 (= (getValueByKey!148 (toList!786 lt!48005) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96250 () Bool)

(assert (=> b!96250 (= e!62787 (contains!802 (toList!786 lt!48005) (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(assert (= (and d!25395 res!48575) b!96249))

(assert (= (and b!96249 res!48576) b!96250))

(declare-fun m!104443 () Bool)

(assert (=> d!25395 m!104443))

(declare-fun m!104445 () Bool)

(assert (=> d!25395 m!104445))

(declare-fun m!104447 () Bool)

(assert (=> d!25395 m!104447))

(declare-fun m!104449 () Bool)

(assert (=> d!25395 m!104449))

(declare-fun m!104451 () Bool)

(assert (=> b!96249 m!104451))

(declare-fun m!104453 () Bool)

(assert (=> b!96250 m!104453))

(assert (=> b!95948 d!25395))

(declare-fun d!25397 () Bool)

(assert (=> d!25397 (= (apply!91 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47794) (apply!91 lt!47775 lt!47794))))

(declare-fun lt!48007 () Unit!2887)

(assert (=> d!25397 (= lt!48007 (choose!588 lt!47775 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47794))))

(declare-fun e!62788 () Bool)

(assert (=> d!25397 e!62788))

(declare-fun res!48577 () Bool)

(assert (=> d!25397 (=> (not res!48577) (not e!62788))))

(assert (=> d!25397 (= res!48577 (contains!800 lt!47775 lt!47794))))

(assert (=> d!25397 (= (addApplyDifferent!67 lt!47775 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47794) lt!48007)))

(declare-fun b!96251 () Bool)

(assert (=> b!96251 (= e!62788 (not (= lt!47794 lt!47786)))))

(assert (= (and d!25397 res!48577) b!96251))

(declare-fun m!104455 () Bool)

(assert (=> d!25397 m!104455))

(assert (=> d!25397 m!103933))

(declare-fun m!104457 () Bool)

(assert (=> d!25397 m!104457))

(assert (=> d!25397 m!103919))

(assert (=> d!25397 m!103921))

(assert (=> d!25397 m!103919))

(assert (=> b!95948 d!25397))

(declare-fun d!25399 () Bool)

(assert (=> d!25399 (= (apply!91 lt!47775 lt!47794) (get!1289 (getValueByKey!148 (toList!786 lt!47775) lt!47794)))))

(declare-fun bs!3952 () Bool)

(assert (= bs!3952 d!25399))

(declare-fun m!104459 () Bool)

(assert (=> bs!3952 m!104459))

(assert (=> bs!3952 m!104459))

(declare-fun m!104461 () Bool)

(assert (=> bs!3952 m!104461))

(assert (=> b!95948 d!25399))

(declare-fun d!25401 () Bool)

(assert (=> d!25401 (= (get!1288 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!95863 d!25401))

(declare-fun d!25403 () Bool)

(declare-fun lt!48010 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!98 (List!1602) (InoxSet (_ BitVec 64)))

(assert (=> d!25403 (= lt!48010 (select (content!98 Nil!1599) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun e!62794 () Bool)

(assert (=> d!25403 (= lt!48010 e!62794)))

(declare-fun res!48582 () Bool)

(assert (=> d!25403 (=> (not res!48582) (not e!62794))))

(assert (=> d!25403 (= res!48582 ((_ is Cons!1598) Nil!1599))))

(assert (=> d!25403 (= (contains!801 Nil!1599 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) lt!48010)))

(declare-fun b!96256 () Bool)

(declare-fun e!62793 () Bool)

(assert (=> b!96256 (= e!62794 e!62793)))

(declare-fun res!48583 () Bool)

(assert (=> b!96256 (=> res!48583 e!62793)))

(assert (=> b!96256 (= res!48583 (= (h!2191 Nil!1599) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!96257 () Bool)

(assert (=> b!96257 (= e!62793 (contains!801 (t!5528 Nil!1599) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (= (and d!25403 res!48582) b!96256))

(assert (= (and b!96256 (not res!48583)) b!96257))

(declare-fun m!104463 () Bool)

(assert (=> d!25403 m!104463))

(assert (=> d!25403 m!103745))

(declare-fun m!104465 () Bool)

(assert (=> d!25403 m!104465))

(assert (=> b!96257 m!103745))

(declare-fun m!104467 () Bool)

(assert (=> b!96257 m!104467))

(assert (=> b!95888 d!25403))

(declare-fun d!25405 () Bool)

(declare-fun res!48593 () Bool)

(declare-fun e!62797 () Bool)

(assert (=> d!25405 (=> (not res!48593) (not e!62797))))

(assert (=> d!25405 (= res!48593 (validMask!0 (mask!6542 newMap!16)))))

(assert (=> d!25405 (= (simpleValid!66 newMap!16) e!62797)))

(declare-fun b!96266 () Bool)

(declare-fun res!48595 () Bool)

(assert (=> b!96266 (=> (not res!48595) (not e!62797))))

(assert (=> b!96266 (= res!48595 (and (= (size!2252 (_values!2440 newMap!16)) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001)) (= (size!2251 (_keys!4143 newMap!16)) (size!2252 (_values!2440 newMap!16))) (bvsge (_size!469 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!469 newMap!16) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!96268 () Bool)

(declare-fun res!48592 () Bool)

(assert (=> b!96268 (=> (not res!48592) (not e!62797))))

(declare-fun size!2255 (LongMapFixedSize!840) (_ BitVec 32))

(assert (=> b!96268 (= res!48592 (= (size!2255 newMap!16) (bvadd (_size!469 newMap!16) (bvsdiv (bvadd (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!96269 () Bool)

(assert (=> b!96269 (= e!62797 (and (bvsge (extraKeys!2282 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2282 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!469 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!96267 () Bool)

(declare-fun res!48594 () Bool)

(assert (=> b!96267 (=> (not res!48594) (not e!62797))))

(assert (=> b!96267 (= res!48594 (bvsge (size!2255 newMap!16) (_size!469 newMap!16)))))

(assert (= (and d!25405 res!48593) b!96266))

(assert (= (and b!96266 res!48595) b!96267))

(assert (= (and b!96267 res!48594) b!96268))

(assert (= (and b!96268 res!48592) b!96269))

(assert (=> d!25405 m!103977))

(declare-fun m!104469 () Bool)

(assert (=> b!96268 m!104469))

(assert (=> b!96267 m!104469))

(assert (=> d!25287 d!25405))

(declare-fun d!25407 () Bool)

(declare-fun e!62799 () Bool)

(assert (=> d!25407 e!62799))

(declare-fun res!48596 () Bool)

(assert (=> d!25407 (=> res!48596 e!62799)))

(declare-fun lt!48013 () Bool)

(assert (=> d!25407 (= res!48596 (not lt!48013))))

(declare-fun lt!48011 () Bool)

(assert (=> d!25407 (= lt!48013 lt!48011)))

(declare-fun lt!48012 () Unit!2887)

(declare-fun e!62798 () Unit!2887)

(assert (=> d!25407 (= lt!48012 e!62798)))

(declare-fun c!16223 () Bool)

(assert (=> d!25407 (= c!16223 lt!48011)))

(assert (=> d!25407 (= lt!48011 (containsKey!152 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25407 (= (contains!800 lt!47784 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48013)))

(declare-fun b!96270 () Bool)

(declare-fun lt!48014 () Unit!2887)

(assert (=> b!96270 (= e!62798 lt!48014)))

(assert (=> b!96270 (= lt!48014 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96270 (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96271 () Bool)

(declare-fun Unit!2904 () Unit!2887)

(assert (=> b!96271 (= e!62798 Unit!2904)))

(declare-fun b!96272 () Bool)

(assert (=> b!96272 (= e!62799 (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25407 c!16223) b!96270))

(assert (= (and d!25407 (not c!16223)) b!96271))

(assert (= (and d!25407 (not res!48596)) b!96272))

(declare-fun m!104471 () Bool)

(assert (=> d!25407 m!104471))

(declare-fun m!104473 () Bool)

(assert (=> b!96270 m!104473))

(declare-fun m!104475 () Bool)

(assert (=> b!96270 m!104475))

(assert (=> b!96270 m!104475))

(declare-fun m!104477 () Bool)

(assert (=> b!96270 m!104477))

(assert (=> b!96272 m!104475))

(assert (=> b!96272 m!104475))

(assert (=> b!96272 m!104477))

(assert (=> bm!9709 d!25407))

(declare-fun b!96307 () Bool)

(declare-fun e!62820 () Bool)

(declare-fun call!9768 () Bool)

(assert (=> b!96307 (= e!62820 (not call!9768))))

(declare-fun b!96308 () Bool)

(declare-fun e!62821 () Bool)

(assert (=> b!96308 (= e!62821 (not call!9768))))

(declare-fun b!96309 () Bool)

(declare-fun lt!48089 () tuple2!2338)

(declare-fun e!62822 () Bool)

(assert (=> b!96309 (= e!62822 (= (map!1246 (_2!1179 lt!48089)) (+!137 (map!1246 newMap!16) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96310 () Bool)

(declare-fun e!62817 () Bool)

(assert (=> b!96310 (= e!62817 e!62820)))

(declare-fun res!48616 () Bool)

(declare-fun call!9766 () Bool)

(assert (=> b!96310 (= res!48616 call!9766)))

(assert (=> b!96310 (=> (not res!48616) (not e!62820))))

(declare-fun bm!9763 () Bool)

(assert (=> bm!9763 (= call!9768 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!96312 () Bool)

(declare-fun e!62823 () Unit!2887)

(declare-fun lt!48098 () Unit!2887)

(assert (=> b!96312 (= e!62823 lt!48098)))

(assert (=> b!96312 (= lt!48098 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48081 () SeekEntryResult!262)

(declare-fun call!9767 () SeekEntryResult!262)

(assert (=> b!96312 (= lt!48081 call!9767)))

(declare-fun c!16232 () Bool)

(assert (=> b!96312 (= c!16232 ((_ is MissingZero!262) lt!48081))))

(declare-fun e!62816 () Bool)

(assert (=> b!96312 e!62816))

(declare-fun b!96313 () Bool)

(declare-fun res!48617 () Bool)

(assert (=> b!96313 (=> (not res!48617) (not e!62822))))

(assert (=> b!96313 (= res!48617 (valid!378 (_2!1179 lt!48089)))))

(declare-fun b!96314 () Bool)

(declare-fun res!48615 () Bool)

(declare-fun call!9769 () Bool)

(assert (=> b!96314 (= res!48615 call!9769)))

(declare-fun e!62818 () Bool)

(assert (=> b!96314 (=> (not res!48615) (not e!62818))))

(declare-fun b!96315 () Bool)

(declare-fun e!62819 () Unit!2887)

(declare-fun Unit!2905 () Unit!2887)

(assert (=> b!96315 (= e!62819 Unit!2905)))

(declare-fun bm!9764 () Bool)

(assert (=> bm!9764 (= call!9767 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun bm!9765 () Bool)

(assert (=> bm!9765 (= call!9766 call!9769)))

(declare-fun b!96316 () Bool)

(declare-fun res!48622 () Bool)

(assert (=> b!96316 (= res!48622 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3193 lt!48081)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96316 (=> (not res!48622) (not e!62820))))

(declare-fun b!96317 () Bool)

(declare-fun res!48621 () Bool)

(assert (=> b!96317 (=> (not res!48621) (not e!62821))))

(assert (=> b!96317 (= res!48621 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3190 lt!48081)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96318 () Bool)

(declare-fun Unit!2906 () Unit!2887)

(assert (=> b!96318 (= e!62819 Unit!2906)))

(declare-fun lt!48102 () Unit!2887)

(declare-fun lemmaArrayContainsKeyThenInListMap!24 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) (_ BitVec 32) Int) Unit!2887)

(assert (=> b!96318 (= lt!48102 (lemmaArrayContainsKeyThenInListMap!24 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(assert (=> b!96318 (contains!800 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))

(declare-fun lt!48095 () Unit!2887)

(assert (=> b!96318 (= lt!48095 lt!48102)))

(assert (=> b!96318 false))

(declare-fun d!25409 () Bool)

(assert (=> d!25409 e!62822))

(declare-fun res!48623 () Bool)

(assert (=> d!25409 (=> (not res!48623) (not e!62822))))

(assert (=> d!25409 (= res!48623 (_1!1179 lt!48089))))

(assert (=> d!25409 (= lt!48089 (tuple2!2339 true (LongMapFixedSize!841 (defaultEntry!2457 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (bvadd (_size!469 newMap!16) #b00000000000000000000000000000001) (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (_vacant!469 newMap!16))))))

(declare-fun lt!48099 () Unit!2887)

(declare-fun lt!48101 () Unit!2887)

(assert (=> d!25409 (= lt!48099 lt!48101)))

(declare-fun lt!48082 () array!4216)

(declare-fun lt!48104 () array!4214)

(assert (=> d!25409 (contains!800 (getCurrentListMap!467 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707))))))

(assert (=> d!25409 (= lt!48101 (lemmaValidKeyInArrayIsInListMap!98 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25409 (= lt!48082 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))))))

(assert (=> d!25409 (= lt!48104 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun lt!48080 () Unit!2887)

(declare-fun lt!48091 () Unit!2887)

(assert (=> d!25409 (= lt!48080 lt!48091)))

(declare-fun lt!48077 () array!4214)

(assert (=> d!25409 (= (arrayCountValidKeys!0 lt!48077 (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (bvadd (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4214 (_ BitVec 32)) Unit!2887)

(assert (=> d!25409 (= lt!48091 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!48077 (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707))))))

(assert (=> d!25409 (= lt!48077 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun lt!48075 () Unit!2887)

(declare-fun lt!48092 () Unit!2887)

(assert (=> d!25409 (= lt!48075 lt!48092)))

(declare-fun lt!48079 () array!4214)

(assert (=> d!25409 (arrayContainsKey!0 lt!48079 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!25409 (= lt!48092 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!48079 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707))))))

(assert (=> d!25409 (= lt!48079 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun lt!48084 () Unit!2887)

(declare-fun lt!48103 () Unit!2887)

(assert (=> d!25409 (= lt!48084 lt!48103)))

(assert (=> d!25409 (= (+!137 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!467 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!24 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) (_ BitVec 64) V!3139 Int) Unit!2887)

(assert (=> d!25409 (= lt!48103 (lemmaAddValidKeyToArrayThenAddPairToListMap!24 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48087 () Unit!2887)

(declare-fun lt!48076 () Unit!2887)

(assert (=> d!25409 (= lt!48087 lt!48076)))

(assert (=> d!25409 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (mask!6542 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4214 (_ BitVec 32) (_ BitVec 32)) Unit!2887)

(assert (=> d!25409 (= lt!48076 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (mask!6542 newMap!16)))))

(declare-fun lt!48100 () Unit!2887)

(declare-fun lt!48096 () Unit!2887)

(assert (=> d!25409 (= lt!48100 lt!48096)))

(assert (=> d!25409 (= (arrayCountValidKeys!0 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4214 (_ BitVec 32) (_ BitVec 64)) Unit!2887)

(assert (=> d!25409 (= lt!48096 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4143 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun lt!48078 () Unit!2887)

(declare-fun lt!48094 () Unit!2887)

(assert (=> d!25409 (= lt!48078 lt!48094)))

(declare-fun lt!48088 () List!1602)

(declare-fun lt!48086 () (_ BitVec 32))

(assert (=> d!25409 (arrayNoDuplicates!0 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) lt!48086 lt!48088)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4214 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1602) Unit!2887)

(assert (=> d!25409 (= lt!48094 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) lt!48086 lt!48088))))

(assert (=> d!25409 (= lt!48088 Nil!1599)))

(assert (=> d!25409 (= lt!48086 #b00000000000000000000000000000000)))

(declare-fun lt!48083 () Unit!2887)

(assert (=> d!25409 (= lt!48083 e!62819)))

(declare-fun c!16233 () Bool)

(assert (=> d!25409 (= c!16233 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!48085 () Unit!2887)

(assert (=> d!25409 (= lt!48085 e!62823)))

(declare-fun c!16235 () Bool)

(assert (=> d!25409 (= c!16235 (contains!800 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25409 (valid!378 newMap!16)))

(assert (=> d!25409 (= (updateHelperNewKey!40 newMap!16 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707))) lt!48089)))

(declare-fun b!96311 () Bool)

(declare-fun Unit!2907 () Unit!2887)

(assert (=> b!96311 (= e!62823 Unit!2907)))

(declare-fun lt!48093 () Unit!2887)

(assert (=> b!96311 (= lt!48093 (lemmaInListMapThenSeekEntryOrOpenFindsIt!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48097 () SeekEntryResult!262)

(assert (=> b!96311 (= lt!48097 call!9767)))

(declare-fun res!48618 () Bool)

(assert (=> b!96311 (= res!48618 ((_ is Found!262) lt!48097))))

(assert (=> b!96311 (=> (not res!48618) (not e!62818))))

(assert (=> b!96311 e!62818))

(declare-fun lt!48090 () Unit!2887)

(assert (=> b!96311 (= lt!48090 lt!48093)))

(assert (=> b!96311 false))

(declare-fun b!96319 () Bool)

(declare-fun res!48620 () Bool)

(assert (=> b!96319 (=> (not res!48620) (not e!62821))))

(assert (=> b!96319 (= res!48620 call!9766)))

(assert (=> b!96319 (= e!62816 e!62821)))

(declare-fun b!96320 () Bool)

(assert (=> b!96320 (= e!62817 ((_ is Undefined!262) lt!48081))))

(declare-fun b!96321 () Bool)

(assert (=> b!96321 (= e!62818 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!48097)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!96322 () Bool)

(declare-fun res!48619 () Bool)

(assert (=> b!96322 (=> (not res!48619) (not e!62822))))

(assert (=> b!96322 (= res!48619 (contains!800 (map!1246 (_2!1179 lt!48089)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!96323 () Bool)

(declare-fun c!16234 () Bool)

(assert (=> b!96323 (= c!16234 ((_ is MissingVacant!262) lt!48081))))

(assert (=> b!96323 (= e!62816 e!62817)))

(declare-fun bm!9766 () Bool)

(assert (=> bm!9766 (= call!9769 (inRange!0 (ite c!16235 (index!3191 lt!48097) (ite c!16232 (index!3190 lt!48081) (index!3193 lt!48081))) (mask!6542 newMap!16)))))

(assert (= (and d!25409 c!16235) b!96311))

(assert (= (and d!25409 (not c!16235)) b!96312))

(assert (= (and b!96311 res!48618) b!96314))

(assert (= (and b!96314 res!48615) b!96321))

(assert (= (and b!96312 c!16232) b!96319))

(assert (= (and b!96312 (not c!16232)) b!96323))

(assert (= (and b!96319 res!48620) b!96317))

(assert (= (and b!96317 res!48621) b!96308))

(assert (= (and b!96323 c!16234) b!96310))

(assert (= (and b!96323 (not c!16234)) b!96320))

(assert (= (and b!96310 res!48616) b!96316))

(assert (= (and b!96316 res!48622) b!96307))

(assert (= (or b!96319 b!96310) bm!9765))

(assert (= (or b!96308 b!96307) bm!9763))

(assert (= (or b!96314 bm!9765) bm!9766))

(assert (= (or b!96311 b!96312) bm!9764))

(assert (= (and d!25409 c!16233) b!96318))

(assert (= (and d!25409 (not c!16233)) b!96315))

(assert (= (and d!25409 res!48623) b!96313))

(assert (= (and b!96313 res!48617) b!96322))

(assert (= (and b!96322 res!48619) b!96309))

(assert (=> b!96318 m!103745))

(declare-fun m!104479 () Bool)

(assert (=> b!96318 m!104479))

(assert (=> b!96318 m!103899))

(assert (=> b!96318 m!103899))

(assert (=> b!96318 m!103745))

(declare-fun m!104481 () Bool)

(assert (=> b!96318 m!104481))

(declare-fun m!104483 () Bool)

(assert (=> b!96317 m!104483))

(assert (=> b!96312 m!103745))

(assert (=> b!96312 m!103829))

(assert (=> d!25409 m!103959))

(assert (=> d!25409 m!103745))

(assert (=> d!25409 m!103831))

(assert (=> d!25409 m!103745))

(assert (=> d!25409 m!103765))

(declare-fun m!104485 () Bool)

(assert (=> d!25409 m!104485))

(declare-fun m!104487 () Bool)

(assert (=> d!25409 m!104487))

(declare-fun m!104489 () Bool)

(assert (=> d!25409 m!104489))

(declare-fun m!104491 () Bool)

(assert (=> d!25409 m!104491))

(declare-fun m!104493 () Bool)

(assert (=> d!25409 m!104493))

(declare-fun m!104495 () Bool)

(assert (=> d!25409 m!104495))

(assert (=> d!25409 m!103899))

(assert (=> d!25409 m!103899))

(assert (=> d!25409 m!104177))

(assert (=> d!25409 m!103753))

(assert (=> d!25409 m!104487))

(assert (=> d!25409 m!103745))

(declare-fun m!104497 () Bool)

(assert (=> d!25409 m!104497))

(assert (=> d!25409 m!103745))

(declare-fun m!104499 () Bool)

(assert (=> d!25409 m!104499))

(assert (=> d!25409 m!103745))

(declare-fun m!104501 () Bool)

(assert (=> d!25409 m!104501))

(assert (=> d!25409 m!103745))

(declare-fun m!104503 () Bool)

(assert (=> d!25409 m!104503))

(declare-fun m!104505 () Bool)

(assert (=> d!25409 m!104505))

(assert (=> d!25409 m!103745))

(declare-fun m!104507 () Bool)

(assert (=> d!25409 m!104507))

(assert (=> d!25409 m!104489))

(declare-fun m!104509 () Bool)

(assert (=> d!25409 m!104509))

(declare-fun m!104511 () Bool)

(assert (=> d!25409 m!104511))

(declare-fun m!104513 () Bool)

(assert (=> d!25409 m!104513))

(assert (=> d!25409 m!103899))

(assert (=> d!25409 m!103745))

(assert (=> d!25409 m!104481))

(declare-fun m!104515 () Bool)

(assert (=> d!25409 m!104515))

(declare-fun m!104517 () Bool)

(assert (=> d!25409 m!104517))

(declare-fun m!104519 () Bool)

(assert (=> d!25409 m!104519))

(declare-fun m!104521 () Bool)

(assert (=> b!96313 m!104521))

(assert (=> b!96311 m!103745))

(assert (=> b!96311 m!103837))

(declare-fun m!104523 () Bool)

(assert (=> b!96321 m!104523))

(declare-fun m!104525 () Bool)

(assert (=> b!96309 m!104525))

(assert (=> b!96309 m!103755))

(assert (=> b!96309 m!103755))

(declare-fun m!104527 () Bool)

(assert (=> b!96309 m!104527))

(assert (=> b!96322 m!104525))

(assert (=> b!96322 m!104525))

(assert (=> b!96322 m!103745))

(declare-fun m!104529 () Bool)

(assert (=> b!96322 m!104529))

(assert (=> bm!9764 m!103745))

(assert (=> bm!9764 m!103827))

(declare-fun m!104531 () Bool)

(assert (=> b!96316 m!104531))

(declare-fun m!104533 () Bool)

(assert (=> bm!9766 m!104533))

(assert (=> bm!9763 m!103745))

(assert (=> bm!9763 m!103831))

(assert (=> bm!9669 d!25409))

(declare-fun d!25411 () Bool)

(declare-fun e!62824 () Bool)

(assert (=> d!25411 e!62824))

(declare-fun res!48624 () Bool)

(assert (=> d!25411 (=> (not res!48624) (not e!62824))))

(declare-fun lt!48107 () ListLongMap!1541)

(assert (=> d!25411 (= res!48624 (contains!800 lt!48107 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun lt!48106 () List!1603)

(assert (=> d!25411 (= lt!48107 (ListLongMap!1542 lt!48106))))

(declare-fun lt!48105 () Unit!2887)

(declare-fun lt!48108 () Unit!2887)

(assert (=> d!25411 (= lt!48105 lt!48108)))

(assert (=> d!25411 (= (getValueByKey!148 lt!48106 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25411 (= lt!48108 (lemmaContainsTupThenGetReturnValue!66 lt!48106 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25411 (= lt!48106 (insertStrictlySorted!68 (toList!786 call!9708) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25411 (= (+!137 call!9708 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!48107)))

(declare-fun b!96324 () Bool)

(declare-fun res!48625 () Bool)

(assert (=> b!96324 (=> (not res!48625) (not e!62824))))

(assert (=> b!96324 (= res!48625 (= (getValueByKey!148 (toList!786 lt!48107) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96325 () Bool)

(assert (=> b!96325 (= e!62824 (contains!802 (toList!786 lt!48107) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(assert (= (and d!25411 res!48624) b!96324))

(assert (= (and b!96324 res!48625) b!96325))

(declare-fun m!104535 () Bool)

(assert (=> d!25411 m!104535))

(declare-fun m!104537 () Bool)

(assert (=> d!25411 m!104537))

(declare-fun m!104539 () Bool)

(assert (=> d!25411 m!104539))

(declare-fun m!104541 () Bool)

(assert (=> d!25411 m!104541))

(declare-fun m!104543 () Bool)

(assert (=> b!96324 m!104543))

(declare-fun m!104545 () Bool)

(assert (=> b!96325 m!104545))

(assert (=> b!95936 d!25411))

(declare-fun d!25413 () Bool)

(declare-fun e!62827 () Bool)

(assert (=> d!25413 e!62827))

(declare-fun res!48630 () Bool)

(assert (=> d!25413 (=> (not res!48630) (not e!62827))))

(declare-fun lt!48113 () SeekEntryResult!262)

(assert (=> d!25413 (= res!48630 ((_ is Found!262) lt!48113))))

(assert (=> d!25413 (= lt!48113 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun lt!48114 () Unit!2887)

(declare-fun choose!590 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) Int) Unit!2887)

(assert (=> d!25413 (= lt!48114 (choose!590 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25413 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25413 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)) lt!48114)))

(declare-fun b!96330 () Bool)

(declare-fun res!48631 () Bool)

(assert (=> b!96330 (=> (not res!48631) (not e!62827))))

(assert (=> b!96330 (= res!48631 (inRange!0 (index!3191 lt!48113) (mask!6542 newMap!16)))))

(declare-fun b!96331 () Bool)

(assert (=> b!96331 (= e!62827 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!48113)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> b!96331 (and (bvsge (index!3191 lt!48113) #b00000000000000000000000000000000) (bvslt (index!3191 lt!48113) (size!2251 (_keys!4143 newMap!16))))))

(assert (= (and d!25413 res!48630) b!96330))

(assert (= (and b!96330 res!48631) b!96331))

(assert (=> d!25413 m!103745))

(assert (=> d!25413 m!103827))

(assert (=> d!25413 m!103745))

(declare-fun m!104547 () Bool)

(assert (=> d!25413 m!104547))

(assert (=> d!25413 m!103977))

(declare-fun m!104549 () Bool)

(assert (=> b!96330 m!104549))

(declare-fun m!104551 () Bool)

(assert (=> b!96331 m!104551))

(assert (=> bm!9678 d!25413))

(assert (=> b!95950 d!25289))

(declare-fun d!25415 () Bool)

(declare-fun e!62829 () Bool)

(assert (=> d!25415 e!62829))

(declare-fun res!48632 () Bool)

(assert (=> d!25415 (=> res!48632 e!62829)))

(declare-fun lt!48117 () Bool)

(assert (=> d!25415 (= res!48632 (not lt!48117))))

(declare-fun lt!48115 () Bool)

(assert (=> d!25415 (= lt!48117 lt!48115)))

(declare-fun lt!48116 () Unit!2887)

(declare-fun e!62828 () Unit!2887)

(assert (=> d!25415 (= lt!48116 e!62828)))

(declare-fun c!16236 () Bool)

(assert (=> d!25415 (= c!16236 lt!48115)))

(assert (=> d!25415 (= lt!48115 (containsKey!152 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25415 (= (contains!800 call!9684 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) lt!48117)))

(declare-fun b!96332 () Bool)

(declare-fun lt!48118 () Unit!2887)

(assert (=> b!96332 (= e!62828 lt!48118)))

(assert (=> b!96332 (= lt!48118 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> b!96332 (isDefined!102 (getValueByKey!148 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!96333 () Bool)

(declare-fun Unit!2908 () Unit!2887)

(assert (=> b!96333 (= e!62828 Unit!2908)))

(declare-fun b!96334 () Bool)

(assert (=> b!96334 (= e!62829 (isDefined!102 (getValueByKey!148 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (= (and d!25415 c!16236) b!96332))

(assert (= (and d!25415 (not c!16236)) b!96333))

(assert (= (and d!25415 (not res!48632)) b!96334))

(assert (=> d!25415 m!103745))

(declare-fun m!104553 () Bool)

(assert (=> d!25415 m!104553))

(assert (=> b!96332 m!103745))

(declare-fun m!104555 () Bool)

(assert (=> b!96332 m!104555))

(assert (=> b!96332 m!103745))

(declare-fun m!104557 () Bool)

(assert (=> b!96332 m!104557))

(assert (=> b!96332 m!104557))

(declare-fun m!104559 () Bool)

(assert (=> b!96332 m!104559))

(assert (=> b!96334 m!103745))

(assert (=> b!96334 m!104557))

(assert (=> b!96334 m!104557))

(assert (=> b!96334 m!104559))

(assert (=> b!95854 d!25415))

(assert (=> bm!9668 d!25319))

(declare-fun d!25417 () Bool)

(assert (=> d!25417 (= (apply!91 lt!47784 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1289 (getValueByKey!148 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3953 () Bool)

(assert (= bs!3953 d!25417))

(assert (=> bs!3953 m!104475))

(assert (=> bs!3953 m!104475))

(declare-fun m!104561 () Bool)

(assert (=> bs!3953 m!104561))

(assert (=> b!95934 d!25417))

(declare-fun d!25419 () Bool)

(declare-fun e!62830 () Bool)

(assert (=> d!25419 e!62830))

(declare-fun res!48633 () Bool)

(assert (=> d!25419 (=> (not res!48633) (not e!62830))))

(declare-fun lt!48121 () ListLongMap!1541)

(assert (=> d!25419 (= res!48633 (contains!800 lt!48121 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!48120 () List!1603)

(assert (=> d!25419 (= lt!48121 (ListLongMap!1542 lt!48120))))

(declare-fun lt!48119 () Unit!2887)

(declare-fun lt!48122 () Unit!2887)

(assert (=> d!25419 (= lt!48119 lt!48122)))

(assert (=> d!25419 (= (getValueByKey!148 lt!48120 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!153 (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25419 (= lt!48122 (lemmaContainsTupThenGetReturnValue!66 lt!48120 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25419 (= lt!48120 (insertStrictlySorted!68 (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682)) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25419 (= (+!137 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682) (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!48121)))

(declare-fun b!96335 () Bool)

(declare-fun res!48634 () Bool)

(assert (=> b!96335 (=> (not res!48634) (not e!62830))))

(assert (=> b!96335 (= res!48634 (= (getValueByKey!148 (toList!786 lt!48121) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!153 (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!96336 () Bool)

(assert (=> b!96336 (= e!62830 (contains!802 (toList!786 lt!48121) (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!25419 res!48633) b!96335))

(assert (= (and b!96335 res!48634) b!96336))

(declare-fun m!104563 () Bool)

(assert (=> d!25419 m!104563))

(declare-fun m!104565 () Bool)

(assert (=> d!25419 m!104565))

(declare-fun m!104567 () Bool)

(assert (=> d!25419 m!104567))

(declare-fun m!104569 () Bool)

(assert (=> d!25419 m!104569))

(declare-fun m!104571 () Bool)

(assert (=> b!96335 m!104571))

(declare-fun m!104573 () Bool)

(assert (=> b!96336 m!104573))

(assert (=> bm!9677 d!25419))

(declare-fun condMapEmpty!3713 () Bool)

(declare-fun mapDefault!3713 () ValueCell!966)

(assert (=> mapNonEmpty!3712 (= condMapEmpty!3713 (= mapRest!3712 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3713)))))

(declare-fun e!62832 () Bool)

(declare-fun mapRes!3713 () Bool)

(assert (=> mapNonEmpty!3712 (= tp!9508 (and e!62832 mapRes!3713))))

(declare-fun mapNonEmpty!3713 () Bool)

(declare-fun tp!9509 () Bool)

(declare-fun e!62831 () Bool)

(assert (=> mapNonEmpty!3713 (= mapRes!3713 (and tp!9509 e!62831))))

(declare-fun mapRest!3713 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapKey!3713 () (_ BitVec 32))

(declare-fun mapValue!3713 () ValueCell!966)

(assert (=> mapNonEmpty!3713 (= mapRest!3712 (store mapRest!3713 mapKey!3713 mapValue!3713))))

(declare-fun b!96337 () Bool)

(assert (=> b!96337 (= e!62831 tp_is_empty!2619)))

(declare-fun b!96338 () Bool)

(assert (=> b!96338 (= e!62832 tp_is_empty!2619)))

(declare-fun mapIsEmpty!3713 () Bool)

(assert (=> mapIsEmpty!3713 mapRes!3713))

(assert (= (and mapNonEmpty!3712 condMapEmpty!3713) mapIsEmpty!3713))

(assert (= (and mapNonEmpty!3712 (not condMapEmpty!3713)) mapNonEmpty!3713))

(assert (= (and mapNonEmpty!3713 ((_ is ValueCellFull!966) mapValue!3713)) b!96337))

(assert (= (and mapNonEmpty!3712 ((_ is ValueCellFull!966) mapDefault!3713)) b!96338))

(declare-fun m!104575 () Bool)

(assert (=> mapNonEmpty!3713 m!104575))

(declare-fun condMapEmpty!3714 () Bool)

(declare-fun mapDefault!3714 () ValueCell!966)

(assert (=> mapNonEmpty!3711 (= condMapEmpty!3714 (= mapRest!3711 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3714)))))

(declare-fun e!62834 () Bool)

(declare-fun mapRes!3714 () Bool)

(assert (=> mapNonEmpty!3711 (= tp!9507 (and e!62834 mapRes!3714))))

(declare-fun mapNonEmpty!3714 () Bool)

(declare-fun tp!9510 () Bool)

(declare-fun e!62833 () Bool)

(assert (=> mapNonEmpty!3714 (= mapRes!3714 (and tp!9510 e!62833))))

(declare-fun mapKey!3714 () (_ BitVec 32))

(declare-fun mapValue!3714 () ValueCell!966)

(declare-fun mapRest!3714 () (Array (_ BitVec 32) ValueCell!966))

(assert (=> mapNonEmpty!3714 (= mapRest!3711 (store mapRest!3714 mapKey!3714 mapValue!3714))))

(declare-fun b!96339 () Bool)

(assert (=> b!96339 (= e!62833 tp_is_empty!2619)))

(declare-fun b!96340 () Bool)

(assert (=> b!96340 (= e!62834 tp_is_empty!2619)))

(declare-fun mapIsEmpty!3714 () Bool)

(assert (=> mapIsEmpty!3714 mapRes!3714))

(assert (= (and mapNonEmpty!3711 condMapEmpty!3714) mapIsEmpty!3714))

(assert (= (and mapNonEmpty!3711 (not condMapEmpty!3714)) mapNonEmpty!3714))

(assert (= (and mapNonEmpty!3714 ((_ is ValueCellFull!966) mapValue!3714)) b!96339))

(assert (= (and mapNonEmpty!3711 ((_ is ValueCellFull!966) mapDefault!3714)) b!96340))

(declare-fun m!104577 () Bool)

(assert (=> mapNonEmpty!3714 m!104577))

(declare-fun b_lambda!4269 () Bool)

(assert (= b_lambda!4267 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4269)))

(declare-fun b_lambda!4271 () Bool)

(assert (= b_lambda!4259 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4271)))

(declare-fun b_lambda!4273 () Bool)

(assert (= b_lambda!4257 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4273)))

(declare-fun b_lambda!4275 () Bool)

(assert (= b_lambda!4263 (or (and b!95662 b_free!2405) (and b!95665 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))))) b_lambda!4275)))

(declare-fun b_lambda!4277 () Bool)

(assert (= b_lambda!4261 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4277)))

(declare-fun b_lambda!4279 () Bool)

(assert (= b_lambda!4265 (or (and b!95662 b_free!2405) (and b!95665 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))))) b_lambda!4279)))

(check-sat (not b!96023) (not bm!9746) (not d!25357) (not d!25371) (not d!25345) (not bm!9735) (not d!25291) (not b!96249) (not bm!9748) (not d!25323) (not b_lambda!4271) (not bm!9754) (not b!96086) (not d!25319) (not bm!9721) (not d!25309) (not b!96241) (not bm!9715) (not b!96311) (not b!96061) (not d!25303) (not bm!9736) (not bm!9733) (not b!96030) (not b!96272) (not b_lambda!4255) (not b!96033) (not b!96069) (not b!96114) (not d!25385) (not b!96025) (not bm!9763) (not b!96046) (not bm!9728) (not b!96193) (not b!96173) (not b!96050) (not b!96209) (not b!96172) (not d!25411) (not d!25419) (not d!25413) (not b!96207) (not b_lambda!4269) (not b!96013) (not d!25409) (not d!25415) (not b!96109) (not b!96324) (not bm!9738) (not bm!9731) (not bm!9766) (not bm!9719) (not d!25307) (not b!96168) (not b!96250) (not b!95999) (not b!96174) (not d!25343) b_and!5891 (not b_lambda!4275) (not b!96160) (not b!96060) (not b!96257) (not bm!9729) (not d!25361) (not b!96221) (not b!96318) (not d!25339) (not b!96325) (not b!96336) (not b!96268) (not b!96017) (not bm!9726) (not b!96188) (not b!96115) (not mapNonEmpty!3713) (not bm!9764) (not b_lambda!4273) (not d!25405) (not b!96313) (not b!96330) (not b!96001) (not d!25387) (not b!96239) (not b!96191) (not b!96196) (not b!96000) (not b_next!2405) (not b!96201) (not b!96231) (not d!25389) (not b!96085) (not d!25403) (not b!96044) (not d!25393) (not d!25311) (not b!96038) (not b!96002) (not b!96071) (not b!96042) (not b!96247) (not d!25381) (not d!25395) (not b!96267) (not d!25305) (not d!25331) (not bm!9744) (not b!96077) (not b!96170) (not b!96238) (not b!96083) (not d!25373) (not b!95997) tp_is_empty!2619 (not b!96073) (not b!96205) (not b!96197) (not d!25379) (not d!25355) (not b!96111) (not b!96177) (not b!96332) (not b!96048) (not d!25391) (not b!96175) (not b!96082) (not d!25337) (not d!25383) (not b!96057) (not b!96156) (not b!96003) (not mapNonEmpty!3714) (not b!96065) (not bm!9724) (not b!96245) (not b_next!2407) (not d!25333) (not d!25359) (not b!96105) (not b!96090) (not b!96009) (not bm!9751) (not b!96213) (not d!25347) (not d!25397) (not b!96007) (not b!96161) (not b_lambda!4279) (not b!96309) (not b!96055) (not b!96152) (not b!96334) (not d!25375) (not b!96157) (not b_lambda!4251) (not b!96243) (not bm!9722) (not b!96155) (not b!96005) (not b!96240) (not b!96312) (not b!96113) (not b!96028) (not bm!9750) (not b!96021) (not bm!9741) (not b_lambda!4277) (not b!96088) (not b!96159) (not d!25417) (not b!96053) (not b!96126) (not bm!9737) (not b!96215) (not b!96034) (not d!25297) (not d!25351) (not b!96248) (not d!25399) (not b!96335) (not b!96232) (not b!96322) (not d!25349) (not d!25301) b_and!5889 (not d!25295) (not bm!9717) (not b!96171) (not d!25341) (not d!25377) (not d!25293) (not d!25313) (not b!96270) (not bm!9714) (not d!25407) (not b!96158) (not b!96012))
(check-sat b_and!5889 b_and!5891 (not b_next!2405) (not b_next!2407))
(get-model)

(declare-fun d!25421 () Bool)

(declare-fun res!48636 () Bool)

(declare-fun e!62835 () Bool)

(assert (=> d!25421 (=> (not res!48636) (not e!62835))))

(assert (=> d!25421 (= res!48636 (validMask!0 (mask!6542 (v!2779 (underlying!333 thiss!992)))))))

(assert (=> d!25421 (= (simpleValid!66 (v!2779 (underlying!333 thiss!992))) e!62835)))

(declare-fun b!96341 () Bool)

(declare-fun res!48638 () Bool)

(assert (=> b!96341 (=> (not res!48638) (not e!62835))))

(assert (=> b!96341 (= res!48638 (and (= (size!2252 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000001)) (= (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (size!2252 (_values!2440 (v!2779 (underlying!333 thiss!992))))) (bvsge (_size!469 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!469 (v!2779 (underlying!333 thiss!992))) (bvadd (mask!6542 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!96343 () Bool)

(declare-fun res!48635 () Bool)

(assert (=> b!96343 (=> (not res!48635) (not e!62835))))

(assert (=> b!96343 (= res!48635 (= (size!2255 (v!2779 (underlying!333 thiss!992))) (bvadd (_size!469 (v!2779 (underlying!333 thiss!992))) (bvsdiv (bvadd (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!96344 () Bool)

(assert (=> b!96344 (= e!62835 (and (bvsge (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!469 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!96342 () Bool)

(declare-fun res!48637 () Bool)

(assert (=> b!96342 (=> (not res!48637) (not e!62835))))

(assert (=> b!96342 (= res!48637 (bvsge (size!2255 (v!2779 (underlying!333 thiss!992))) (_size!469 (v!2779 (underlying!333 thiss!992)))))))

(assert (= (and d!25421 res!48636) b!96341))

(assert (= (and b!96341 res!48638) b!96342))

(assert (= (and b!96342 res!48637) b!96343))

(assert (= (and b!96343 res!48635) b!96344))

(assert (=> d!25421 m!103733))

(declare-fun m!104579 () Bool)

(assert (=> b!96343 m!104579))

(assert (=> b!96342 m!104579))

(assert (=> d!25295 d!25421))

(declare-fun lt!48125 () Bool)

(declare-fun d!25423 () Bool)

(declare-fun content!99 (List!1603) (InoxSet tuple2!2336))

(assert (=> d!25423 (= lt!48125 (select (content!99 (toList!786 lt!48001)) (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun e!62840 () Bool)

(assert (=> d!25423 (= lt!48125 e!62840)))

(declare-fun res!48644 () Bool)

(assert (=> d!25423 (=> (not res!48644) (not e!62840))))

(assert (=> d!25423 (= res!48644 ((_ is Cons!1599) (toList!786 lt!48001)))))

(assert (=> d!25423 (= (contains!802 (toList!786 lt!48001) (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!48125)))

(declare-fun b!96349 () Bool)

(declare-fun e!62841 () Bool)

(assert (=> b!96349 (= e!62840 e!62841)))

(declare-fun res!48643 () Bool)

(assert (=> b!96349 (=> res!48643 e!62841)))

(assert (=> b!96349 (= res!48643 (= (h!2192 (toList!786 lt!48001)) (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!96350 () Bool)

(assert (=> b!96350 (= e!62841 (contains!802 (t!5529 (toList!786 lt!48001)) (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(assert (= (and d!25423 res!48644) b!96349))

(assert (= (and b!96349 (not res!48643)) b!96350))

(declare-fun m!104581 () Bool)

(assert (=> d!25423 m!104581))

(declare-fun m!104583 () Bool)

(assert (=> d!25423 m!104583))

(declare-fun m!104585 () Bool)

(assert (=> b!96350 m!104585))

(assert (=> b!96248 d!25423))

(declare-fun d!25425 () Bool)

(declare-fun res!48645 () Bool)

(declare-fun e!62842 () Bool)

(assert (=> d!25425 (=> res!48645 e!62842)))

(assert (=> d!25425 (= res!48645 (and ((_ is Cons!1599) (toList!786 e!62531)) (= (_1!1178 (h!2192 (toList!786 e!62531))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (=> d!25425 (= (containsKey!152 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) e!62842)))

(declare-fun b!96351 () Bool)

(declare-fun e!62843 () Bool)

(assert (=> b!96351 (= e!62842 e!62843)))

(declare-fun res!48646 () Bool)

(assert (=> b!96351 (=> (not res!48646) (not e!62843))))

(assert (=> b!96351 (= res!48646 (and (or (not ((_ is Cons!1599) (toList!786 e!62531))) (bvsle (_1!1178 (h!2192 (toList!786 e!62531))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))) ((_ is Cons!1599) (toList!786 e!62531)) (bvslt (_1!1178 (h!2192 (toList!786 e!62531))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(declare-fun b!96352 () Bool)

(assert (=> b!96352 (= e!62843 (containsKey!152 (t!5529 (toList!786 e!62531)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (= (and d!25425 (not res!48645)) b!96351))

(assert (= (and b!96351 res!48646) b!96352))

(assert (=> b!96352 m!103745))

(declare-fun m!104587 () Bool)

(assert (=> b!96352 m!104587))

(assert (=> d!25293 d!25425))

(declare-fun d!25427 () Bool)

(declare-fun e!62845 () Bool)

(assert (=> d!25427 e!62845))

(declare-fun res!48647 () Bool)

(assert (=> d!25427 (=> res!48647 e!62845)))

(declare-fun lt!48128 () Bool)

(assert (=> d!25427 (= res!48647 (not lt!48128))))

(declare-fun lt!48126 () Bool)

(assert (=> d!25427 (= lt!48128 lt!48126)))

(declare-fun lt!48127 () Unit!2887)

(declare-fun e!62844 () Unit!2887)

(assert (=> d!25427 (= lt!48127 e!62844)))

(declare-fun c!16237 () Bool)

(assert (=> d!25427 (= c!16237 lt!48126)))

(assert (=> d!25427 (= lt!48126 (containsKey!152 (toList!786 lt!48005) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25427 (= (contains!800 lt!48005 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48128)))

(declare-fun b!96353 () Bool)

(declare-fun lt!48129 () Unit!2887)

(assert (=> b!96353 (= e!62844 lt!48129)))

(assert (=> b!96353 (= lt!48129 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!48005) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> b!96353 (isDefined!102 (getValueByKey!148 (toList!786 lt!48005) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96354 () Bool)

(declare-fun Unit!2909 () Unit!2887)

(assert (=> b!96354 (= e!62844 Unit!2909)))

(declare-fun b!96355 () Bool)

(assert (=> b!96355 (= e!62845 (isDefined!102 (getValueByKey!148 (toList!786 lt!48005) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (= (and d!25427 c!16237) b!96353))

(assert (= (and d!25427 (not c!16237)) b!96354))

(assert (= (and d!25427 (not res!48647)) b!96355))

(declare-fun m!104589 () Bool)

(assert (=> d!25427 m!104589))

(declare-fun m!104591 () Bool)

(assert (=> b!96353 m!104591))

(assert (=> b!96353 m!104451))

(assert (=> b!96353 m!104451))

(declare-fun m!104593 () Bool)

(assert (=> b!96353 m!104593))

(assert (=> b!96355 m!104451))

(assert (=> b!96355 m!104451))

(assert (=> b!96355 m!104593))

(assert (=> d!25395 d!25427))

(declare-fun b!96357 () Bool)

(declare-fun e!62846 () Option!154)

(declare-fun e!62847 () Option!154)

(assert (=> b!96357 (= e!62846 e!62847)))

(declare-fun c!16239 () Bool)

(assert (=> b!96357 (= c!16239 (and ((_ is Cons!1599) lt!48004) (not (= (_1!1178 (h!2192 lt!48004)) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun c!16238 () Bool)

(declare-fun d!25429 () Bool)

(assert (=> d!25429 (= c!16238 (and ((_ is Cons!1599) lt!48004) (= (_1!1178 (h!2192 lt!48004)) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25429 (= (getValueByKey!148 lt!48004 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) e!62846)))

(declare-fun b!96358 () Bool)

(assert (=> b!96358 (= e!62847 (getValueByKey!148 (t!5529 lt!48004) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96359 () Bool)

(assert (=> b!96359 (= e!62847 None!152)))

(declare-fun b!96356 () Bool)

(assert (=> b!96356 (= e!62846 (Some!153 (_2!1178 (h!2192 lt!48004))))))

(assert (= (and d!25429 c!16238) b!96356))

(assert (= (and d!25429 (not c!16238)) b!96357))

(assert (= (and b!96357 c!16239) b!96358))

(assert (= (and b!96357 (not c!16239)) b!96359))

(declare-fun m!104595 () Bool)

(assert (=> b!96358 m!104595))

(assert (=> d!25395 d!25429))

(declare-fun d!25431 () Bool)

(assert (=> d!25431 (= (getValueByKey!148 lt!48004 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun lt!48132 () Unit!2887)

(declare-fun choose!591 (List!1603 (_ BitVec 64) V!3139) Unit!2887)

(assert (=> d!25431 (= lt!48132 (choose!591 lt!48004 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun e!62850 () Bool)

(assert (=> d!25431 e!62850))

(declare-fun res!48652 () Bool)

(assert (=> d!25431 (=> (not res!48652) (not e!62850))))

(assert (=> d!25431 (= res!48652 (isStrictlySorted!298 lt!48004))))

(assert (=> d!25431 (= (lemmaContainsTupThenGetReturnValue!66 lt!48004 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48132)))

(declare-fun b!96364 () Bool)

(declare-fun res!48653 () Bool)

(assert (=> b!96364 (=> (not res!48653) (not e!62850))))

(assert (=> b!96364 (= res!48653 (containsKey!152 lt!48004 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96365 () Bool)

(assert (=> b!96365 (= e!62850 (contains!802 lt!48004 (tuple2!2337 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (= (and d!25431 res!48652) b!96364))

(assert (= (and b!96364 res!48653) b!96365))

(assert (=> d!25431 m!104445))

(declare-fun m!104597 () Bool)

(assert (=> d!25431 m!104597))

(declare-fun m!104599 () Bool)

(assert (=> d!25431 m!104599))

(declare-fun m!104601 () Bool)

(assert (=> b!96364 m!104601))

(declare-fun m!104603 () Bool)

(assert (=> b!96365 m!104603))

(assert (=> d!25395 d!25431))

(declare-fun e!62864 () List!1603)

(declare-fun b!96386 () Bool)

(assert (=> b!96386 (= e!62864 (insertStrictlySorted!68 (t!5529 (toList!786 lt!47785)) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96388 () Bool)

(declare-fun e!62861 () List!1603)

(declare-fun call!9777 () List!1603)

(assert (=> b!96388 (= e!62861 call!9777)))

(declare-fun b!96389 () Bool)

(declare-fun e!62865 () List!1603)

(declare-fun call!9776 () List!1603)

(assert (=> b!96389 (= e!62865 call!9776)))

(declare-fun b!96390 () Bool)

(declare-fun e!62863 () List!1603)

(declare-fun call!9778 () List!1603)

(assert (=> b!96390 (= e!62863 call!9778)))

(declare-fun bm!9773 () Bool)

(assert (=> bm!9773 (= call!9778 call!9777)))

(declare-fun e!62862 () Bool)

(declare-fun lt!48135 () List!1603)

(declare-fun b!96391 () Bool)

(assert (=> b!96391 (= e!62862 (contains!802 lt!48135 (tuple2!2337 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun bm!9774 () Bool)

(assert (=> bm!9774 (= call!9776 call!9778)))

(declare-fun c!16249 () Bool)

(declare-fun b!96392 () Bool)

(declare-fun c!16251 () Bool)

(assert (=> b!96392 (= e!62864 (ite c!16249 (t!5529 (toList!786 lt!47785)) (ite c!16251 (Cons!1599 (h!2192 (toList!786 lt!47785)) (t!5529 (toList!786 lt!47785))) Nil!1600)))))

(declare-fun b!96387 () Bool)

(declare-fun res!48658 () Bool)

(assert (=> b!96387 (=> (not res!48658) (not e!62862))))

(assert (=> b!96387 (= res!48658 (containsKey!152 lt!48135 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun d!25433 () Bool)

(assert (=> d!25433 e!62862))

(declare-fun res!48659 () Bool)

(assert (=> d!25433 (=> (not res!48659) (not e!62862))))

(assert (=> d!25433 (= res!48659 (isStrictlySorted!298 lt!48135))))

(assert (=> d!25433 (= lt!48135 e!62861)))

(declare-fun c!16248 () Bool)

(assert (=> d!25433 (= c!16248 (and ((_ is Cons!1599) (toList!786 lt!47785)) (bvslt (_1!1178 (h!2192 (toList!786 lt!47785))) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25433 (isStrictlySorted!298 (toList!786 lt!47785))))

(assert (=> d!25433 (= (insertStrictlySorted!68 (toList!786 lt!47785) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48135)))

(declare-fun b!96393 () Bool)

(assert (=> b!96393 (= c!16251 (and ((_ is Cons!1599) (toList!786 lt!47785)) (bvsgt (_1!1178 (h!2192 (toList!786 lt!47785))) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> b!96393 (= e!62863 e!62865)))

(declare-fun bm!9775 () Bool)

(declare-fun $colon$colon!76 (List!1603 tuple2!2336) List!1603)

(assert (=> bm!9775 (= call!9777 ($colon$colon!76 e!62864 (ite c!16248 (h!2192 (toList!786 lt!47785)) (tuple2!2337 (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun c!16250 () Bool)

(assert (=> bm!9775 (= c!16250 c!16248)))

(declare-fun b!96394 () Bool)

(assert (=> b!96394 (= e!62861 e!62863)))

(assert (=> b!96394 (= c!16249 (and ((_ is Cons!1599) (toList!786 lt!47785)) (= (_1!1178 (h!2192 (toList!786 lt!47785))) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96395 () Bool)

(assert (=> b!96395 (= e!62865 call!9776)))

(assert (= (and d!25433 c!16248) b!96388))

(assert (= (and d!25433 (not c!16248)) b!96394))

(assert (= (and b!96394 c!16249) b!96390))

(assert (= (and b!96394 (not c!16249)) b!96393))

(assert (= (and b!96393 c!16251) b!96389))

(assert (= (and b!96393 (not c!16251)) b!96395))

(assert (= (or b!96389 b!96395) bm!9774))

(assert (= (or b!96390 bm!9774) bm!9773))

(assert (= (or b!96388 bm!9773) bm!9775))

(assert (= (and bm!9775 c!16250) b!96386))

(assert (= (and bm!9775 (not c!16250)) b!96392))

(assert (= (and d!25433 res!48659) b!96387))

(assert (= (and b!96387 res!48658) b!96391))

(declare-fun m!104605 () Bool)

(assert (=> b!96386 m!104605))

(declare-fun m!104607 () Bool)

(assert (=> d!25433 m!104607))

(declare-fun m!104609 () Bool)

(assert (=> d!25433 m!104609))

(declare-fun m!104611 () Bool)

(assert (=> b!96391 m!104611))

(declare-fun m!104613 () Bool)

(assert (=> b!96387 m!104613))

(declare-fun m!104615 () Bool)

(assert (=> bm!9775 m!104615))

(assert (=> d!25395 d!25433))

(declare-fun d!25435 () Bool)

(assert (=> d!25435 (= (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96231 d!25435))

(declare-fun d!25437 () Bool)

(assert (=> d!25437 (= (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96090 d!25437))

(declare-fun d!25439 () Bool)

(declare-fun e!62867 () Bool)

(assert (=> d!25439 e!62867))

(declare-fun res!48660 () Bool)

(assert (=> d!25439 (=> res!48660 e!62867)))

(declare-fun lt!48138 () Bool)

(assert (=> d!25439 (= res!48660 (not lt!48138))))

(declare-fun lt!48136 () Bool)

(assert (=> d!25439 (= lt!48138 lt!48136)))

(declare-fun lt!48137 () Unit!2887)

(declare-fun e!62866 () Unit!2887)

(assert (=> d!25439 (= lt!48137 e!62866)))

(declare-fun c!16252 () Bool)

(assert (=> d!25439 (= c!16252 lt!48136)))

(assert (=> d!25439 (= lt!48136 (containsKey!152 (toList!786 lt!47952) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25439 (= (contains!800 lt!47952 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48138)))

(declare-fun b!96396 () Bool)

(declare-fun lt!48139 () Unit!2887)

(assert (=> b!96396 (= e!62866 lt!48139)))

(assert (=> b!96396 (= lt!48139 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47952) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96396 (isDefined!102 (getValueByKey!148 (toList!786 lt!47952) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96397 () Bool)

(declare-fun Unit!2910 () Unit!2887)

(assert (=> b!96397 (= e!62866 Unit!2910)))

(declare-fun b!96398 () Bool)

(assert (=> b!96398 (= e!62867 (isDefined!102 (getValueByKey!148 (toList!786 lt!47952) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25439 c!16252) b!96396))

(assert (= (and d!25439 (not c!16252)) b!96397))

(assert (= (and d!25439 (not res!48660)) b!96398))

(declare-fun m!104617 () Bool)

(assert (=> d!25439 m!104617))

(declare-fun m!104619 () Bool)

(assert (=> b!96396 m!104619))

(declare-fun m!104621 () Bool)

(assert (=> b!96396 m!104621))

(assert (=> b!96396 m!104621))

(declare-fun m!104623 () Bool)

(assert (=> b!96396 m!104623))

(assert (=> b!96398 m!104621))

(assert (=> b!96398 m!104621))

(assert (=> b!96398 m!104623))

(assert (=> bm!9748 d!25439))

(declare-fun d!25441 () Bool)

(assert (=> d!25441 (= (content!98 Nil!1599) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!25403 d!25441))

(declare-fun d!25443 () Bool)

(assert (=> d!25443 (= (apply!91 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47779) (apply!91 lt!47793 lt!47779))))

(assert (=> d!25443 true))

(declare-fun _$34!855 () Unit!2887)

(assert (=> d!25443 (= (choose!588 lt!47793 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47779) _$34!855)))

(declare-fun bs!3954 () Bool)

(assert (= bs!3954 d!25443))

(assert (=> bs!3954 m!103907))

(assert (=> bs!3954 m!103907))

(assert (=> bs!3954 m!103909))

(assert (=> bs!3954 m!103903))

(assert (=> d!25373 d!25443))

(declare-fun d!25445 () Bool)

(declare-fun e!62869 () Bool)

(assert (=> d!25445 e!62869))

(declare-fun res!48661 () Bool)

(assert (=> d!25445 (=> res!48661 e!62869)))

(declare-fun lt!48142 () Bool)

(assert (=> d!25445 (= res!48661 (not lt!48142))))

(declare-fun lt!48140 () Bool)

(assert (=> d!25445 (= lt!48142 lt!48140)))

(declare-fun lt!48141 () Unit!2887)

(declare-fun e!62868 () Unit!2887)

(assert (=> d!25445 (= lt!48141 e!62868)))

(declare-fun c!16253 () Bool)

(assert (=> d!25445 (= c!16253 lt!48140)))

(assert (=> d!25445 (= lt!48140 (containsKey!152 (toList!786 lt!47793) lt!47779))))

(assert (=> d!25445 (= (contains!800 lt!47793 lt!47779) lt!48142)))

(declare-fun b!96400 () Bool)

(declare-fun lt!48143 () Unit!2887)

(assert (=> b!96400 (= e!62868 lt!48143)))

(assert (=> b!96400 (= lt!48143 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47793) lt!47779))))

(assert (=> b!96400 (isDefined!102 (getValueByKey!148 (toList!786 lt!47793) lt!47779))))

(declare-fun b!96401 () Bool)

(declare-fun Unit!2911 () Unit!2887)

(assert (=> b!96401 (= e!62868 Unit!2911)))

(declare-fun b!96402 () Bool)

(assert (=> b!96402 (= e!62869 (isDefined!102 (getValueByKey!148 (toList!786 lt!47793) lt!47779)))))

(assert (= (and d!25445 c!16253) b!96400))

(assert (= (and d!25445 (not c!16253)) b!96401))

(assert (= (and d!25445 (not res!48661)) b!96402))

(declare-fun m!104625 () Bool)

(assert (=> d!25445 m!104625))

(declare-fun m!104627 () Bool)

(assert (=> b!96400 m!104627))

(assert (=> b!96400 m!104423))

(assert (=> b!96400 m!104423))

(declare-fun m!104629 () Bool)

(assert (=> b!96400 m!104629))

(assert (=> b!96402 m!104423))

(assert (=> b!96402 m!104423))

(assert (=> b!96402 m!104629))

(assert (=> d!25373 d!25445))

(assert (=> d!25373 d!25389))

(assert (=> d!25373 d!25375))

(assert (=> d!25373 d!25381))

(assert (=> b!96086 d!25437))

(declare-fun d!25447 () Bool)

(declare-fun e!62870 () Bool)

(assert (=> d!25447 e!62870))

(declare-fun res!48662 () Bool)

(assert (=> d!25447 (=> (not res!48662) (not e!62870))))

(declare-fun lt!48146 () ListLongMap!1541)

(assert (=> d!25447 (= res!48662 (contains!800 lt!48146 (_1!1178 (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(declare-fun lt!48145 () List!1603)

(assert (=> d!25447 (= lt!48146 (ListLongMap!1542 lt!48145))))

(declare-fun lt!48144 () Unit!2887)

(declare-fun lt!48147 () Unit!2887)

(assert (=> d!25447 (= lt!48144 lt!48147)))

(assert (=> d!25447 (= (getValueByKey!148 lt!48145 (_1!1178 (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))) (Some!153 (_2!1178 (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(assert (=> d!25447 (= lt!48147 (lemmaContainsTupThenGetReturnValue!66 lt!48145 (_1!1178 (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (_2!1178 (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(assert (=> d!25447 (= lt!48145 (insertStrictlySorted!68 (toList!786 (ite c!16159 call!9725 (ite c!16154 call!9720 call!9722))) (_1!1178 (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (_2!1178 (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(assert (=> d!25447 (= (+!137 (ite c!16159 call!9725 (ite c!16154 call!9720 call!9722)) (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) lt!48146)))

(declare-fun b!96403 () Bool)

(declare-fun res!48663 () Bool)

(assert (=> b!96403 (=> (not res!48663) (not e!62870))))

(assert (=> b!96403 (= res!48663 (= (getValueByKey!148 (toList!786 lt!48146) (_1!1178 (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))) (Some!153 (_2!1178 (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))))

(declare-fun b!96404 () Bool)

(assert (=> b!96404 (= e!62870 (contains!802 (toList!786 lt!48146) (ite (or c!16159 c!16154) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (= (and d!25447 res!48662) b!96403))

(assert (= (and b!96403 res!48663) b!96404))

(declare-fun m!104631 () Bool)

(assert (=> d!25447 m!104631))

(declare-fun m!104633 () Bool)

(assert (=> d!25447 m!104633))

(declare-fun m!104635 () Bool)

(assert (=> d!25447 m!104635))

(declare-fun m!104637 () Bool)

(assert (=> d!25447 m!104637))

(declare-fun m!104639 () Bool)

(assert (=> b!96403 m!104639))

(declare-fun m!104641 () Bool)

(assert (=> b!96404 m!104641))

(assert (=> bm!9717 d!25447))

(assert (=> d!25413 d!25319))

(declare-fun d!25449 () Bool)

(declare-fun e!62873 () Bool)

(assert (=> d!25449 e!62873))

(declare-fun res!48668 () Bool)

(assert (=> d!25449 (=> (not res!48668) (not e!62873))))

(declare-fun lt!48150 () SeekEntryResult!262)

(assert (=> d!25449 (= res!48668 ((_ is Found!262) lt!48150))))

(assert (=> d!25449 (= lt!48150 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (=> d!25449 true))

(declare-fun _$33!78 () Unit!2887)

(assert (=> d!25449 (= (choose!590 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)) _$33!78)))

(declare-fun b!96409 () Bool)

(declare-fun res!48669 () Bool)

(assert (=> b!96409 (=> (not res!48669) (not e!62873))))

(assert (=> b!96409 (= res!48669 (inRange!0 (index!3191 lt!48150) (mask!6542 newMap!16)))))

(declare-fun b!96410 () Bool)

(assert (=> b!96410 (= e!62873 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!48150)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (= (and d!25449 res!48668) b!96409))

(assert (= (and b!96409 res!48669) b!96410))

(assert (=> d!25449 m!103745))

(assert (=> d!25449 m!103827))

(declare-fun m!104643 () Bool)

(assert (=> b!96409 m!104643))

(declare-fun m!104645 () Bool)

(assert (=> b!96410 m!104645))

(assert (=> d!25413 d!25449))

(declare-fun d!25451 () Bool)

(assert (=> d!25451 (= (validMask!0 (mask!6542 newMap!16)) (and (or (= (mask!6542 newMap!16) #b00000000000000000000000000000111) (= (mask!6542 newMap!16) #b00000000000000000000000000001111) (= (mask!6542 newMap!16) #b00000000000000000000000000011111) (= (mask!6542 newMap!16) #b00000000000000000000000000111111) (= (mask!6542 newMap!16) #b00000000000000000000000001111111) (= (mask!6542 newMap!16) #b00000000000000000000000011111111) (= (mask!6542 newMap!16) #b00000000000000000000000111111111) (= (mask!6542 newMap!16) #b00000000000000000000001111111111) (= (mask!6542 newMap!16) #b00000000000000000000011111111111) (= (mask!6542 newMap!16) #b00000000000000000000111111111111) (= (mask!6542 newMap!16) #b00000000000000000001111111111111) (= (mask!6542 newMap!16) #b00000000000000000011111111111111) (= (mask!6542 newMap!16) #b00000000000000000111111111111111) (= (mask!6542 newMap!16) #b00000000000000001111111111111111) (= (mask!6542 newMap!16) #b00000000000000011111111111111111) (= (mask!6542 newMap!16) #b00000000000000111111111111111111) (= (mask!6542 newMap!16) #b00000000000001111111111111111111) (= (mask!6542 newMap!16) #b00000000000011111111111111111111) (= (mask!6542 newMap!16) #b00000000000111111111111111111111) (= (mask!6542 newMap!16) #b00000000001111111111111111111111) (= (mask!6542 newMap!16) #b00000000011111111111111111111111) (= (mask!6542 newMap!16) #b00000000111111111111111111111111) (= (mask!6542 newMap!16) #b00000001111111111111111111111111) (= (mask!6542 newMap!16) #b00000011111111111111111111111111) (= (mask!6542 newMap!16) #b00000111111111111111111111111111) (= (mask!6542 newMap!16) #b00001111111111111111111111111111) (= (mask!6542 newMap!16) #b00011111111111111111111111111111) (= (mask!6542 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!6542 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!25413 d!25451))

(declare-fun d!25453 () Bool)

(declare-fun e!62874 () Bool)

(assert (=> d!25453 e!62874))

(declare-fun res!48670 () Bool)

(assert (=> d!25453 (=> (not res!48670) (not e!62874))))

(declare-fun lt!48153 () ListLongMap!1541)

(assert (=> d!25453 (= res!48670 (contains!800 lt!48153 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48152 () List!1603)

(assert (=> d!25453 (= lt!48153 (ListLongMap!1542 lt!48152))))

(declare-fun lt!48151 () Unit!2887)

(declare-fun lt!48154 () Unit!2887)

(assert (=> d!25453 (= lt!48151 lt!48154)))

(assert (=> d!25453 (= (getValueByKey!148 lt!48152 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25453 (= lt!48154 (lemmaContainsTupThenGetReturnValue!66 lt!48152 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25453 (= lt!48152 (insertStrictlySorted!68 (toList!786 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25453 (= (+!137 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48153)))

(declare-fun b!96411 () Bool)

(declare-fun res!48671 () Bool)

(assert (=> b!96411 (=> (not res!48671) (not e!62874))))

(assert (=> b!96411 (= res!48671 (= (getValueByKey!148 (toList!786 lt!48153) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96412 () Bool)

(assert (=> b!96412 (= e!62874 (contains!802 (toList!786 lt!48153) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25453 res!48670) b!96411))

(assert (= (and b!96411 res!48671) b!96412))

(declare-fun m!104647 () Bool)

(assert (=> d!25453 m!104647))

(declare-fun m!104649 () Bool)

(assert (=> d!25453 m!104649))

(declare-fun m!104651 () Bool)

(assert (=> d!25453 m!104651))

(declare-fun m!104653 () Bool)

(assert (=> d!25453 m!104653))

(declare-fun m!104655 () Bool)

(assert (=> b!96411 m!104655))

(declare-fun m!104657 () Bool)

(assert (=> b!96412 m!104657))

(assert (=> d!25409 d!25453))

(declare-fun b!96413 () Bool)

(declare-fun e!62875 () Bool)

(declare-fun call!9779 () Bool)

(assert (=> b!96413 (= e!62875 call!9779)))

(declare-fun bm!9776 () Bool)

(assert (=> bm!9776 (= call!9779 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (mask!6542 newMap!16)))))

(declare-fun b!96414 () Bool)

(declare-fun e!62876 () Bool)

(declare-fun e!62877 () Bool)

(assert (=> b!96414 (= e!62876 e!62877)))

(declare-fun c!16254 () Bool)

(assert (=> b!96414 (= c!16254 (validKeyInArray!0 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!96416 () Bool)

(assert (=> b!96416 (= e!62877 call!9779)))

(declare-fun b!96415 () Bool)

(assert (=> b!96415 (= e!62877 e!62875)))

(declare-fun lt!48155 () (_ BitVec 64))

(assert (=> b!96415 (= lt!48155 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!48156 () Unit!2887)

(assert (=> b!96415 (= lt!48156 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) lt!48155 #b00000000000000000000000000000000))))

(assert (=> b!96415 (arrayContainsKey!0 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) lt!48155 #b00000000000000000000000000000000)))

(declare-fun lt!48157 () Unit!2887)

(assert (=> b!96415 (= lt!48157 lt!48156)))

(declare-fun res!48673 () Bool)

(assert (=> b!96415 (= res!48673 (= (seekEntryOrOpen!0 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000) (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (mask!6542 newMap!16)) (Found!262 #b00000000000000000000000000000000)))))

(assert (=> b!96415 (=> (not res!48673) (not e!62875))))

(declare-fun d!25455 () Bool)

(declare-fun res!48672 () Bool)

(assert (=> d!25455 (=> res!48672 e!62876)))

(assert (=> d!25455 (= res!48672 (bvsge #b00000000000000000000000000000000 (size!2251 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))))))

(assert (=> d!25455 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (mask!6542 newMap!16)) e!62876)))

(assert (= (and d!25455 (not res!48672)) b!96414))

(assert (= (and b!96414 c!16254) b!96415))

(assert (= (and b!96414 (not c!16254)) b!96416))

(assert (= (and b!96415 res!48673) b!96413))

(assert (= (or b!96413 b!96416) bm!9776))

(declare-fun m!104659 () Bool)

(assert (=> bm!9776 m!104659))

(declare-fun m!104661 () Bool)

(assert (=> b!96414 m!104661))

(assert (=> b!96414 m!104661))

(declare-fun m!104663 () Bool)

(assert (=> b!96414 m!104663))

(assert (=> b!96415 m!104661))

(declare-fun m!104665 () Bool)

(assert (=> b!96415 m!104665))

(declare-fun m!104667 () Bool)

(assert (=> b!96415 m!104667))

(assert (=> b!96415 m!104661))

(declare-fun m!104669 () Bool)

(assert (=> b!96415 m!104669))

(assert (=> d!25409 d!25455))

(declare-fun d!25457 () Bool)

(declare-fun e!62880 () Bool)

(assert (=> d!25457 e!62880))

(declare-fun res!48676 () Bool)

(assert (=> d!25457 (=> (not res!48676) (not e!62880))))

(assert (=> d!25457 (= res!48676 (and (bvsge (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000000) (bvslt (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (size!2251 (_keys!4143 newMap!16))) (bvslt (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (size!2252 (_values!2440 newMap!16)))))))

(declare-fun lt!48160 () Unit!2887)

(declare-fun choose!592 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) (_ BitVec 64) V!3139 Int) Unit!2887)

(assert (=> d!25457 (= lt!48160 (choose!592 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25457 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25457 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!24 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)) lt!48160)))

(declare-fun b!96419 () Bool)

(assert (=> b!96419 (= e!62880 (= (+!137 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!467 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))))))

(assert (= (and d!25457 res!48676) b!96419))

(assert (=> d!25457 m!103745))

(assert (=> d!25457 m!103765))

(declare-fun m!104671 () Bool)

(assert (=> d!25457 m!104671))

(assert (=> d!25457 m!103977))

(assert (=> b!96419 m!103899))

(assert (=> b!96419 m!103899))

(assert (=> b!96419 m!104177))

(assert (=> b!96419 m!104505))

(assert (=> b!96419 m!104517))

(assert (=> b!96419 m!104495))

(assert (=> d!25409 d!25457))

(assert (=> d!25409 d!25303))

(declare-fun d!25459 () Bool)

(declare-fun e!62893 () Bool)

(assert (=> d!25459 e!62893))

(declare-fun res!48680 () Bool)

(assert (=> d!25459 (=> (not res!48680) (not e!62893))))

(assert (=> d!25459 (= res!48680 (or (bvsge #b00000000000000000000000000000000 (size!2251 lt!48104)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 lt!48104)))))))

(declare-fun lt!48170 () ListLongMap!1541)

(declare-fun lt!48163 () ListLongMap!1541)

(assert (=> d!25459 (= lt!48170 lt!48163)))

(declare-fun lt!48162 () Unit!2887)

(declare-fun e!62885 () Unit!2887)

(assert (=> d!25459 (= lt!48162 e!62885)))

(declare-fun c!16257 () Bool)

(declare-fun e!62890 () Bool)

(assert (=> d!25459 (= c!16257 e!62890)))

(declare-fun res!48682 () Bool)

(assert (=> d!25459 (=> (not res!48682) (not e!62890))))

(assert (=> d!25459 (= res!48682 (bvslt #b00000000000000000000000000000000 (size!2251 lt!48104)))))

(declare-fun e!62891 () ListLongMap!1541)

(assert (=> d!25459 (= lt!48163 e!62891)))

(declare-fun c!16260 () Bool)

(assert (=> d!25459 (= c!16260 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25459 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25459 (= (getCurrentListMap!467 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48170)))

(declare-fun b!96420 () Bool)

(declare-fun e!62888 () ListLongMap!1541)

(assert (=> b!96420 (= e!62891 e!62888)))

(declare-fun c!16255 () Bool)

(assert (=> b!96420 (= c!16255 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96421 () Bool)

(declare-fun e!62882 () Bool)

(assert (=> b!96421 (= e!62882 (= (apply!91 lt!48170 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96422 () Bool)

(declare-fun e!62887 () Bool)

(assert (=> b!96422 (= e!62893 e!62887)))

(declare-fun c!16256 () Bool)

(assert (=> b!96422 (= c!16256 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96423 () Bool)

(declare-fun call!9782 () ListLongMap!1541)

(assert (=> b!96423 (= e!62891 (+!137 call!9782 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun bm!9777 () Bool)

(declare-fun call!9781 () ListLongMap!1541)

(declare-fun call!9786 () ListLongMap!1541)

(assert (=> bm!9777 (= call!9781 call!9786)))

(declare-fun b!96424 () Bool)

(declare-fun c!16258 () Bool)

(assert (=> b!96424 (= c!16258 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62892 () ListLongMap!1541)

(assert (=> b!96424 (= e!62888 e!62892)))

(declare-fun b!96425 () Bool)

(declare-fun res!48677 () Bool)

(assert (=> b!96425 (=> (not res!48677) (not e!62893))))

(declare-fun e!62889 () Bool)

(assert (=> b!96425 (= res!48677 e!62889)))

(declare-fun res!48681 () Bool)

(assert (=> b!96425 (=> res!48681 e!62889)))

(declare-fun e!62881 () Bool)

(assert (=> b!96425 (= res!48681 (not e!62881))))

(declare-fun res!48683 () Bool)

(assert (=> b!96425 (=> (not res!48683) (not e!62881))))

(assert (=> b!96425 (= res!48683 (bvslt #b00000000000000000000000000000000 (size!2251 lt!48104)))))

(declare-fun bm!9778 () Bool)

(declare-fun call!9783 () ListLongMap!1541)

(assert (=> bm!9778 (= call!9782 (+!137 (ite c!16260 call!9786 (ite c!16255 call!9781 call!9783)) (ite (or c!16260 c!16255) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!96426 () Bool)

(assert (=> b!96426 (= e!62890 (validKeyInArray!0 (select (arr!2002 lt!48104) #b00000000000000000000000000000000)))))

(declare-fun b!96427 () Bool)

(declare-fun e!62886 () Bool)

(assert (=> b!96427 (= e!62889 e!62886)))

(declare-fun res!48678 () Bool)

(assert (=> b!96427 (=> (not res!48678) (not e!62886))))

(assert (=> b!96427 (= res!48678 (contains!800 lt!48170 (select (arr!2002 lt!48104) #b00000000000000000000000000000000)))))

(assert (=> b!96427 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 lt!48104)))))

(declare-fun b!96428 () Bool)

(declare-fun call!9784 () Bool)

(assert (=> b!96428 (= e!62887 (not call!9784))))

(declare-fun b!96429 () Bool)

(assert (=> b!96429 (= e!62892 call!9783)))

(declare-fun bm!9779 () Bool)

(assert (=> bm!9779 (= call!9783 call!9781)))

(declare-fun b!96430 () Bool)

(declare-fun e!62883 () Bool)

(declare-fun call!9780 () Bool)

(assert (=> b!96430 (= e!62883 (not call!9780))))

(declare-fun bm!9780 () Bool)

(assert (=> bm!9780 (= call!9780 (contains!800 lt!48170 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96431 () Bool)

(assert (=> b!96431 (= e!62886 (= (apply!91 lt!48170 (select (arr!2002 lt!48104) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 lt!48082) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96431 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 lt!48082)))))

(assert (=> b!96431 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 lt!48104)))))

(declare-fun b!96432 () Bool)

(declare-fun Unit!2912 () Unit!2887)

(assert (=> b!96432 (= e!62885 Unit!2912)))

(declare-fun bm!9781 () Bool)

(declare-fun call!9785 () ListLongMap!1541)

(assert (=> bm!9781 (= call!9785 call!9782)))

(declare-fun b!96433 () Bool)

(declare-fun res!48684 () Bool)

(assert (=> b!96433 (=> (not res!48684) (not e!62893))))

(assert (=> b!96433 (= res!48684 e!62883)))

(declare-fun c!16259 () Bool)

(assert (=> b!96433 (= c!16259 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!96434 () Bool)

(assert (=> b!96434 (= e!62888 call!9785)))

(declare-fun b!96435 () Bool)

(declare-fun lt!48174 () Unit!2887)

(assert (=> b!96435 (= e!62885 lt!48174)))

(declare-fun lt!48168 () ListLongMap!1541)

(assert (=> b!96435 (= lt!48168 (getCurrentListMapNoExtraKeys!101 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48178 () (_ BitVec 64))

(assert (=> b!96435 (= lt!48178 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48167 () (_ BitVec 64))

(assert (=> b!96435 (= lt!48167 (select (arr!2002 lt!48104) #b00000000000000000000000000000000))))

(declare-fun lt!48169 () Unit!2887)

(assert (=> b!96435 (= lt!48169 (addStillContains!67 lt!48168 lt!48178 (zeroValue!2342 newMap!16) lt!48167))))

(assert (=> b!96435 (contains!800 (+!137 lt!48168 (tuple2!2337 lt!48178 (zeroValue!2342 newMap!16))) lt!48167)))

(declare-fun lt!48177 () Unit!2887)

(assert (=> b!96435 (= lt!48177 lt!48169)))

(declare-fun lt!48171 () ListLongMap!1541)

(assert (=> b!96435 (= lt!48171 (getCurrentListMapNoExtraKeys!101 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48175 () (_ BitVec 64))

(assert (=> b!96435 (= lt!48175 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48166 () (_ BitVec 64))

(assert (=> b!96435 (= lt!48166 (select (arr!2002 lt!48104) #b00000000000000000000000000000000))))

(declare-fun lt!48176 () Unit!2887)

(assert (=> b!96435 (= lt!48176 (addApplyDifferent!67 lt!48171 lt!48175 (minValue!2342 newMap!16) lt!48166))))

(assert (=> b!96435 (= (apply!91 (+!137 lt!48171 (tuple2!2337 lt!48175 (minValue!2342 newMap!16))) lt!48166) (apply!91 lt!48171 lt!48166))))

(declare-fun lt!48164 () Unit!2887)

(assert (=> b!96435 (= lt!48164 lt!48176)))

(declare-fun lt!48161 () ListLongMap!1541)

(assert (=> b!96435 (= lt!48161 (getCurrentListMapNoExtraKeys!101 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48172 () (_ BitVec 64))

(assert (=> b!96435 (= lt!48172 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48180 () (_ BitVec 64))

(assert (=> b!96435 (= lt!48180 (select (arr!2002 lt!48104) #b00000000000000000000000000000000))))

(declare-fun lt!48182 () Unit!2887)

(assert (=> b!96435 (= lt!48182 (addApplyDifferent!67 lt!48161 lt!48172 (zeroValue!2342 newMap!16) lt!48180))))

(assert (=> b!96435 (= (apply!91 (+!137 lt!48161 (tuple2!2337 lt!48172 (zeroValue!2342 newMap!16))) lt!48180) (apply!91 lt!48161 lt!48180))))

(declare-fun lt!48181 () Unit!2887)

(assert (=> b!96435 (= lt!48181 lt!48182)))

(declare-fun lt!48179 () ListLongMap!1541)

(assert (=> b!96435 (= lt!48179 (getCurrentListMapNoExtraKeys!101 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48173 () (_ BitVec 64))

(assert (=> b!96435 (= lt!48173 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48165 () (_ BitVec 64))

(assert (=> b!96435 (= lt!48165 (select (arr!2002 lt!48104) #b00000000000000000000000000000000))))

(assert (=> b!96435 (= lt!48174 (addApplyDifferent!67 lt!48179 lt!48173 (minValue!2342 newMap!16) lt!48165))))

(assert (=> b!96435 (= (apply!91 (+!137 lt!48179 (tuple2!2337 lt!48173 (minValue!2342 newMap!16))) lt!48165) (apply!91 lt!48179 lt!48165))))

(declare-fun b!96436 () Bool)

(assert (=> b!96436 (= e!62887 e!62882)))

(declare-fun res!48685 () Bool)

(assert (=> b!96436 (= res!48685 call!9784)))

(assert (=> b!96436 (=> (not res!48685) (not e!62882))))

(declare-fun b!96437 () Bool)

(assert (=> b!96437 (= e!62881 (validKeyInArray!0 (select (arr!2002 lt!48104) #b00000000000000000000000000000000)))))

(declare-fun bm!9782 () Bool)

(assert (=> bm!9782 (= call!9786 (getCurrentListMapNoExtraKeys!101 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9783 () Bool)

(assert (=> bm!9783 (= call!9784 (contains!800 lt!48170 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96438 () Bool)

(assert (=> b!96438 (= e!62892 call!9785)))

(declare-fun b!96439 () Bool)

(declare-fun e!62884 () Bool)

(assert (=> b!96439 (= e!62884 (= (apply!91 lt!48170 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96440 () Bool)

(assert (=> b!96440 (= e!62883 e!62884)))

(declare-fun res!48679 () Bool)

(assert (=> b!96440 (= res!48679 call!9780)))

(assert (=> b!96440 (=> (not res!48679) (not e!62884))))

(assert (= (and d!25459 c!16260) b!96423))

(assert (= (and d!25459 (not c!16260)) b!96420))

(assert (= (and b!96420 c!16255) b!96434))

(assert (= (and b!96420 (not c!16255)) b!96424))

(assert (= (and b!96424 c!16258) b!96438))

(assert (= (and b!96424 (not c!16258)) b!96429))

(assert (= (or b!96438 b!96429) bm!9779))

(assert (= (or b!96434 bm!9779) bm!9777))

(assert (= (or b!96434 b!96438) bm!9781))

(assert (= (or b!96423 bm!9777) bm!9782))

(assert (= (or b!96423 bm!9781) bm!9778))

(assert (= (and d!25459 res!48682) b!96426))

(assert (= (and d!25459 c!16257) b!96435))

(assert (= (and d!25459 (not c!16257)) b!96432))

(assert (= (and d!25459 res!48680) b!96425))

(assert (= (and b!96425 res!48683) b!96437))

(assert (= (and b!96425 (not res!48681)) b!96427))

(assert (= (and b!96427 res!48678) b!96431))

(assert (= (and b!96425 res!48677) b!96433))

(assert (= (and b!96433 c!16259) b!96440))

(assert (= (and b!96433 (not c!16259)) b!96430))

(assert (= (and b!96440 res!48679) b!96439))

(assert (= (or b!96440 b!96430) bm!9780))

(assert (= (and b!96433 res!48684) b!96422))

(assert (= (and b!96422 c!16256) b!96436))

(assert (= (and b!96422 (not c!16256)) b!96428))

(assert (= (and b!96436 res!48685) b!96421))

(assert (= (or b!96436 b!96428) bm!9783))

(declare-fun b_lambda!4281 () Bool)

(assert (=> (not b_lambda!4281) (not b!96431)))

(assert (=> b!96431 t!5535))

(declare-fun b_and!5893 () Bool)

(assert (= b_and!5889 (and (=> t!5535 result!3233) b_and!5893)))

(assert (=> b!96431 t!5537))

(declare-fun b_and!5895 () Bool)

(assert (= b_and!5891 (and (=> t!5537 result!3235) b_and!5895)))

(declare-fun m!104673 () Bool)

(assert (=> b!96427 m!104673))

(assert (=> b!96427 m!104673))

(declare-fun m!104675 () Bool)

(assert (=> b!96427 m!104675))

(declare-fun m!104677 () Bool)

(assert (=> b!96435 m!104677))

(declare-fun m!104679 () Bool)

(assert (=> b!96435 m!104679))

(declare-fun m!104681 () Bool)

(assert (=> b!96435 m!104681))

(declare-fun m!104683 () Bool)

(assert (=> b!96435 m!104683))

(declare-fun m!104685 () Bool)

(assert (=> b!96435 m!104685))

(assert (=> b!96435 m!104681))

(declare-fun m!104687 () Bool)

(assert (=> b!96435 m!104687))

(declare-fun m!104689 () Bool)

(assert (=> b!96435 m!104689))

(declare-fun m!104691 () Bool)

(assert (=> b!96435 m!104691))

(declare-fun m!104693 () Bool)

(assert (=> b!96435 m!104693))

(declare-fun m!104695 () Bool)

(assert (=> b!96435 m!104695))

(declare-fun m!104697 () Bool)

(assert (=> b!96435 m!104697))

(declare-fun m!104699 () Bool)

(assert (=> b!96435 m!104699))

(assert (=> b!96435 m!104691))

(declare-fun m!104701 () Bool)

(assert (=> b!96435 m!104701))

(assert (=> b!96435 m!104693))

(assert (=> b!96435 m!104673))

(declare-fun m!104703 () Bool)

(assert (=> b!96435 m!104703))

(assert (=> b!96435 m!104697))

(declare-fun m!104705 () Bool)

(assert (=> b!96435 m!104705))

(declare-fun m!104707 () Bool)

(assert (=> b!96435 m!104707))

(declare-fun m!104709 () Bool)

(assert (=> b!96431 m!104709))

(assert (=> b!96431 m!104673))

(declare-fun m!104711 () Bool)

(assert (=> b!96431 m!104711))

(assert (=> b!96431 m!104709))

(assert (=> b!96431 m!104043))

(declare-fun m!104713 () Bool)

(assert (=> b!96431 m!104713))

(assert (=> b!96431 m!104673))

(assert (=> b!96431 m!104043))

(declare-fun m!104715 () Bool)

(assert (=> b!96423 m!104715))

(assert (=> d!25459 m!103977))

(declare-fun m!104717 () Bool)

(assert (=> bm!9780 m!104717))

(assert (=> b!96426 m!104673))

(assert (=> b!96426 m!104673))

(declare-fun m!104719 () Bool)

(assert (=> b!96426 m!104719))

(declare-fun m!104721 () Bool)

(assert (=> bm!9778 m!104721))

(declare-fun m!104723 () Bool)

(assert (=> b!96439 m!104723))

(declare-fun m!104725 () Bool)

(assert (=> bm!9783 m!104725))

(declare-fun m!104727 () Bool)

(assert (=> b!96421 m!104727))

(assert (=> b!96437 m!104673))

(assert (=> b!96437 m!104673))

(assert (=> b!96437 m!104719))

(assert (=> bm!9782 m!104699))

(assert (=> d!25409 d!25459))

(assert (=> d!25409 d!25363))

(assert (=> d!25409 d!25329))

(declare-fun bm!9784 () Bool)

(declare-fun call!9787 () (_ BitVec 32))

(assert (=> bm!9784 (= call!9787 (arrayCountValidKeys!0 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96441 () Bool)

(declare-fun e!62894 () (_ BitVec 32))

(assert (=> b!96441 (= e!62894 #b00000000000000000000000000000000)))

(declare-fun b!96442 () Bool)

(declare-fun e!62895 () (_ BitVec 32))

(assert (=> b!96442 (= e!62895 call!9787)))

(declare-fun b!96443 () Bool)

(assert (=> b!96443 (= e!62894 e!62895)))

(declare-fun c!16261 () Bool)

(assert (=> b!96443 (= c!16261 (validKeyInArray!0 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!96444 () Bool)

(assert (=> b!96444 (= e!62895 (bvadd #b00000000000000000000000000000001 call!9787))))

(declare-fun lt!48183 () (_ BitVec 32))

(declare-fun d!25461 () Bool)

(assert (=> d!25461 (and (bvsge lt!48183 #b00000000000000000000000000000000) (bvsle lt!48183 (bvsub (size!2251 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!25461 (= lt!48183 e!62894)))

(declare-fun c!16262 () Bool)

(assert (=> d!25461 (= c!16262 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25461 (and (bvsle #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2251 (_keys!4143 newMap!16)) (size!2251 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))))))

(assert (=> d!25461 (= (arrayCountValidKeys!0 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) lt!48183)))

(assert (= (and d!25461 c!16262) b!96441))

(assert (= (and d!25461 (not c!16262)) b!96443))

(assert (= (and b!96443 c!16261) b!96444))

(assert (= (and b!96443 (not c!16261)) b!96442))

(assert (= (or b!96444 b!96442) bm!9784))

(declare-fun m!104729 () Bool)

(assert (=> bm!9784 m!104729))

(assert (=> b!96443 m!104661))

(assert (=> b!96443 m!104661))

(assert (=> b!96443 m!104663))

(assert (=> d!25409 d!25461))

(declare-fun b!96456 () Bool)

(declare-fun e!62900 () Bool)

(assert (=> b!96456 (= e!62900 (= (arrayCountValidKeys!0 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!96455 () Bool)

(declare-fun e!62901 () Bool)

(assert (=> b!96455 (= e!62901 (bvslt (size!2251 (_keys!4143 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun d!25463 () Bool)

(assert (=> d!25463 e!62900))

(declare-fun res!48694 () Bool)

(assert (=> d!25463 (=> (not res!48694) (not e!62900))))

(assert (=> d!25463 (= res!48694 (and (bvsge (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000000) (bvslt (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (size!2251 (_keys!4143 newMap!16)))))))

(declare-fun lt!48186 () Unit!2887)

(declare-fun choose!1 (array!4214 (_ BitVec 32) (_ BitVec 64)) Unit!2887)

(assert (=> d!25463 (= lt!48186 (choose!1 (_keys!4143 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25463 e!62901))

(declare-fun res!48695 () Bool)

(assert (=> d!25463 (=> (not res!48695) (not e!62901))))

(assert (=> d!25463 (= res!48695 (and (bvsge (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000000) (bvslt (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (size!2251 (_keys!4143 newMap!16)))))))

(assert (=> d!25463 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4143 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) lt!48186)))

(declare-fun b!96454 () Bool)

(declare-fun res!48696 () Bool)

(assert (=> b!96454 (=> (not res!48696) (not e!62901))))

(assert (=> b!96454 (= res!48696 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!96453 () Bool)

(declare-fun res!48697 () Bool)

(assert (=> b!96453 (=> (not res!48697) (not e!62901))))

(assert (=> b!96453 (= res!48697 (not (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707))))))))

(assert (= (and d!25463 res!48695) b!96453))

(assert (= (and b!96453 res!48697) b!96454))

(assert (= (and b!96454 res!48696) b!96455))

(assert (= (and d!25463 res!48694) b!96456))

(assert (=> b!96456 m!104517))

(assert (=> b!96456 m!104511))

(assert (=> b!96456 m!103959))

(assert (=> d!25463 m!103745))

(declare-fun m!104731 () Bool)

(assert (=> d!25463 m!104731))

(assert (=> b!96454 m!103745))

(assert (=> b!96454 m!103893))

(declare-fun m!104733 () Bool)

(assert (=> b!96453 m!104733))

(assert (=> b!96453 m!104733))

(declare-fun m!104735 () Bool)

(assert (=> b!96453 m!104735))

(assert (=> d!25409 d!25463))

(declare-fun d!25465 () Bool)

(assert (=> d!25465 (= (arrayCountValidKeys!0 lt!48077 (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (bvadd (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!48189 () Unit!2887)

(declare-fun choose!2 (array!4214 (_ BitVec 32)) Unit!2887)

(assert (=> d!25465 (= lt!48189 (choose!2 lt!48077 (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707))))))

(declare-fun e!62904 () Bool)

(assert (=> d!25465 e!62904))

(declare-fun res!48702 () Bool)

(assert (=> d!25465 (=> (not res!48702) (not e!62904))))

(assert (=> d!25465 (= res!48702 (and (bvsge (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000000) (bvslt (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (size!2251 lt!48077))))))

(assert (=> d!25465 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!48077 (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707))) lt!48189)))

(declare-fun b!96461 () Bool)

(declare-fun res!48703 () Bool)

(assert (=> b!96461 (=> (not res!48703) (not e!62904))))

(assert (=> b!96461 (= res!48703 (validKeyInArray!0 (select (arr!2002 lt!48077) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)))))))

(declare-fun b!96462 () Bool)

(assert (=> b!96462 (= e!62904 (bvslt (size!2251 lt!48077) #b01111111111111111111111111111111))))

(assert (= (and d!25465 res!48702) b!96461))

(assert (= (and b!96461 res!48703) b!96462))

(assert (=> d!25465 m!104515))

(declare-fun m!104737 () Bool)

(assert (=> d!25465 m!104737))

(declare-fun m!104739 () Bool)

(assert (=> b!96461 m!104739))

(assert (=> b!96461 m!104739))

(declare-fun m!104741 () Bool)

(assert (=> b!96461 m!104741))

(assert (=> d!25409 d!25465))

(declare-fun bm!9785 () Bool)

(declare-fun call!9788 () (_ BitVec 32))

(assert (=> bm!9785 (= call!9788 (arrayCountValidKeys!0 lt!48077 (bvadd (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000001) (bvadd (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000001)))))

(declare-fun b!96463 () Bool)

(declare-fun e!62905 () (_ BitVec 32))

(assert (=> b!96463 (= e!62905 #b00000000000000000000000000000000)))

(declare-fun b!96464 () Bool)

(declare-fun e!62906 () (_ BitVec 32))

(assert (=> b!96464 (= e!62906 call!9788)))

(declare-fun b!96465 () Bool)

(assert (=> b!96465 (= e!62905 e!62906)))

(declare-fun c!16263 () Bool)

(assert (=> b!96465 (= c!16263 (validKeyInArray!0 (select (arr!2002 lt!48077) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)))))))

(declare-fun b!96466 () Bool)

(assert (=> b!96466 (= e!62906 (bvadd #b00000000000000000000000000000001 call!9788))))

(declare-fun lt!48190 () (_ BitVec 32))

(declare-fun d!25467 () Bool)

(assert (=> d!25467 (and (bvsge lt!48190 #b00000000000000000000000000000000) (bvsle lt!48190 (bvsub (size!2251 lt!48077) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)))))))

(assert (=> d!25467 (= lt!48190 e!62905)))

(declare-fun c!16264 () Bool)

(assert (=> d!25467 (= c!16264 (bvsge (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (bvadd (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000001)))))

(assert (=> d!25467 (and (bvsle (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (bvadd (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000001)) (bvsge (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000001) (size!2251 lt!48077)))))

(assert (=> d!25467 (= (arrayCountValidKeys!0 lt!48077 (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (bvadd (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000001)) lt!48190)))

(assert (= (and d!25467 c!16264) b!96463))

(assert (= (and d!25467 (not c!16264)) b!96465))

(assert (= (and b!96465 c!16263) b!96466))

(assert (= (and b!96465 (not c!16263)) b!96464))

(assert (= (or b!96466 b!96464) bm!9785))

(declare-fun m!104743 () Bool)

(assert (=> bm!9785 m!104743))

(assert (=> b!96465 m!104739))

(assert (=> b!96465 m!104739))

(assert (=> b!96465 m!104741))

(assert (=> d!25409 d!25467))

(declare-fun d!25469 () Bool)

(declare-fun e!62908 () Bool)

(assert (=> d!25469 e!62908))

(declare-fun res!48704 () Bool)

(assert (=> d!25469 (=> res!48704 e!62908)))

(declare-fun lt!48193 () Bool)

(assert (=> d!25469 (= res!48704 (not lt!48193))))

(declare-fun lt!48191 () Bool)

(assert (=> d!25469 (= lt!48193 lt!48191)))

(declare-fun lt!48192 () Unit!2887)

(declare-fun e!62907 () Unit!2887)

(assert (=> d!25469 (= lt!48192 e!62907)))

(declare-fun c!16265 () Bool)

(assert (=> d!25469 (= c!16265 lt!48191)))

(assert (=> d!25469 (= lt!48191 (containsKey!152 (toList!786 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25469 (= (contains!800 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) lt!48193)))

(declare-fun b!96467 () Bool)

(declare-fun lt!48194 () Unit!2887)

(assert (=> b!96467 (= e!62907 lt!48194)))

(assert (=> b!96467 (= lt!48194 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> b!96467 (isDefined!102 (getValueByKey!148 (toList!786 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!96468 () Bool)

(declare-fun Unit!2913 () Unit!2887)

(assert (=> b!96468 (= e!62907 Unit!2913)))

(declare-fun b!96469 () Bool)

(assert (=> b!96469 (= e!62908 (isDefined!102 (getValueByKey!148 (toList!786 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (= (and d!25469 c!16265) b!96467))

(assert (= (and d!25469 (not c!16265)) b!96468))

(assert (= (and d!25469 (not res!48704)) b!96469))

(assert (=> d!25469 m!103745))

(declare-fun m!104745 () Bool)

(assert (=> d!25469 m!104745))

(assert (=> b!96467 m!103745))

(declare-fun m!104747 () Bool)

(assert (=> b!96467 m!104747))

(assert (=> b!96467 m!103745))

(declare-fun m!104749 () Bool)

(assert (=> b!96467 m!104749))

(assert (=> b!96467 m!104749))

(declare-fun m!104751 () Bool)

(assert (=> b!96467 m!104751))

(assert (=> b!96469 m!103745))

(assert (=> b!96469 m!104749))

(assert (=> b!96469 m!104749))

(assert (=> b!96469 m!104751))

(assert (=> d!25409 d!25469))

(declare-fun d!25471 () Bool)

(declare-fun e!62921 () Bool)

(assert (=> d!25471 e!62921))

(declare-fun res!48708 () Bool)

(assert (=> d!25471 (=> (not res!48708) (not e!62921))))

(assert (=> d!25471 (= res!48708 (or (bvsge #b00000000000000000000000000000000 (size!2251 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))))))))

(declare-fun lt!48204 () ListLongMap!1541)

(declare-fun lt!48197 () ListLongMap!1541)

(assert (=> d!25471 (= lt!48204 lt!48197)))

(declare-fun lt!48196 () Unit!2887)

(declare-fun e!62913 () Unit!2887)

(assert (=> d!25471 (= lt!48196 e!62913)))

(declare-fun c!16268 () Bool)

(declare-fun e!62918 () Bool)

(assert (=> d!25471 (= c!16268 e!62918)))

(declare-fun res!48710 () Bool)

(assert (=> d!25471 (=> (not res!48710) (not e!62918))))

(assert (=> d!25471 (= res!48710 (bvslt #b00000000000000000000000000000000 (size!2251 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))))))

(declare-fun e!62919 () ListLongMap!1541)

(assert (=> d!25471 (= lt!48197 e!62919)))

(declare-fun c!16271 () Bool)

(assert (=> d!25471 (= c!16271 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25471 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25471 (= (getCurrentListMap!467 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48204)))

(declare-fun b!96470 () Bool)

(declare-fun e!62916 () ListLongMap!1541)

(assert (=> b!96470 (= e!62919 e!62916)))

(declare-fun c!16266 () Bool)

(assert (=> b!96470 (= c!16266 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96471 () Bool)

(declare-fun e!62910 () Bool)

(assert (=> b!96471 (= e!62910 (= (apply!91 lt!48204 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96472 () Bool)

(declare-fun e!62915 () Bool)

(assert (=> b!96472 (= e!62921 e!62915)))

(declare-fun c!16267 () Bool)

(assert (=> b!96472 (= c!16267 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96473 () Bool)

(declare-fun call!9791 () ListLongMap!1541)

(assert (=> b!96473 (= e!62919 (+!137 call!9791 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun bm!9786 () Bool)

(declare-fun call!9790 () ListLongMap!1541)

(declare-fun call!9795 () ListLongMap!1541)

(assert (=> bm!9786 (= call!9790 call!9795)))

(declare-fun b!96474 () Bool)

(declare-fun c!16269 () Bool)

(assert (=> b!96474 (= c!16269 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62920 () ListLongMap!1541)

(assert (=> b!96474 (= e!62916 e!62920)))

(declare-fun b!96475 () Bool)

(declare-fun res!48705 () Bool)

(assert (=> b!96475 (=> (not res!48705) (not e!62921))))

(declare-fun e!62917 () Bool)

(assert (=> b!96475 (= res!48705 e!62917)))

(declare-fun res!48709 () Bool)

(assert (=> b!96475 (=> res!48709 e!62917)))

(declare-fun e!62909 () Bool)

(assert (=> b!96475 (= res!48709 (not e!62909))))

(declare-fun res!48711 () Bool)

(assert (=> b!96475 (=> (not res!48711) (not e!62909))))

(assert (=> b!96475 (= res!48711 (bvslt #b00000000000000000000000000000000 (size!2251 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))))))

(declare-fun call!9792 () ListLongMap!1541)

(declare-fun bm!9787 () Bool)

(assert (=> bm!9787 (= call!9791 (+!137 (ite c!16271 call!9795 (ite c!16266 call!9790 call!9792)) (ite (or c!16271 c!16266) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!96476 () Bool)

(assert (=> b!96476 (= e!62918 (validKeyInArray!0 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!96477 () Bool)

(declare-fun e!62914 () Bool)

(assert (=> b!96477 (= e!62917 e!62914)))

(declare-fun res!48706 () Bool)

(assert (=> b!96477 (=> (not res!48706) (not e!62914))))

(assert (=> b!96477 (= res!48706 (contains!800 lt!48204 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!96477 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))))))

(declare-fun b!96478 () Bool)

(declare-fun call!9793 () Bool)

(assert (=> b!96478 (= e!62915 (not call!9793))))

(declare-fun b!96479 () Bool)

(assert (=> b!96479 (= e!62920 call!9792)))

(declare-fun bm!9788 () Bool)

(assert (=> bm!9788 (= call!9792 call!9790)))

(declare-fun b!96480 () Bool)

(declare-fun e!62911 () Bool)

(declare-fun call!9789 () Bool)

(assert (=> b!96480 (= e!62911 (not call!9789))))

(declare-fun bm!9789 () Bool)

(assert (=> bm!9789 (= call!9789 (contains!800 lt!48204 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96481 () Bool)

(assert (=> b!96481 (= e!62914 (= (apply!91 lt!48204 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96481 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))))))))

(assert (=> b!96481 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))))))

(declare-fun b!96482 () Bool)

(declare-fun Unit!2914 () Unit!2887)

(assert (=> b!96482 (= e!62913 Unit!2914)))

(declare-fun bm!9790 () Bool)

(declare-fun call!9794 () ListLongMap!1541)

(assert (=> bm!9790 (= call!9794 call!9791)))

(declare-fun b!96483 () Bool)

(declare-fun res!48712 () Bool)

(assert (=> b!96483 (=> (not res!48712) (not e!62921))))

(assert (=> b!96483 (= res!48712 e!62911)))

(declare-fun c!16270 () Bool)

(assert (=> b!96483 (= c!16270 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!96484 () Bool)

(assert (=> b!96484 (= e!62916 call!9794)))

(declare-fun b!96485 () Bool)

(declare-fun lt!48208 () Unit!2887)

(assert (=> b!96485 (= e!62913 lt!48208)))

(declare-fun lt!48202 () ListLongMap!1541)

(assert (=> b!96485 (= lt!48202 (getCurrentListMapNoExtraKeys!101 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48212 () (_ BitVec 64))

(assert (=> b!96485 (= lt!48212 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48201 () (_ BitVec 64))

(assert (=> b!96485 (= lt!48201 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!48203 () Unit!2887)

(assert (=> b!96485 (= lt!48203 (addStillContains!67 lt!48202 lt!48212 (zeroValue!2342 newMap!16) lt!48201))))

(assert (=> b!96485 (contains!800 (+!137 lt!48202 (tuple2!2337 lt!48212 (zeroValue!2342 newMap!16))) lt!48201)))

(declare-fun lt!48211 () Unit!2887)

(assert (=> b!96485 (= lt!48211 lt!48203)))

(declare-fun lt!48205 () ListLongMap!1541)

(assert (=> b!96485 (= lt!48205 (getCurrentListMapNoExtraKeys!101 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48209 () (_ BitVec 64))

(assert (=> b!96485 (= lt!48209 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48200 () (_ BitVec 64))

(assert (=> b!96485 (= lt!48200 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!48210 () Unit!2887)

(assert (=> b!96485 (= lt!48210 (addApplyDifferent!67 lt!48205 lt!48209 (minValue!2342 newMap!16) lt!48200))))

(assert (=> b!96485 (= (apply!91 (+!137 lt!48205 (tuple2!2337 lt!48209 (minValue!2342 newMap!16))) lt!48200) (apply!91 lt!48205 lt!48200))))

(declare-fun lt!48198 () Unit!2887)

(assert (=> b!96485 (= lt!48198 lt!48210)))

(declare-fun lt!48195 () ListLongMap!1541)

(assert (=> b!96485 (= lt!48195 (getCurrentListMapNoExtraKeys!101 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48206 () (_ BitVec 64))

(assert (=> b!96485 (= lt!48206 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48214 () (_ BitVec 64))

(assert (=> b!96485 (= lt!48214 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!48216 () Unit!2887)

(assert (=> b!96485 (= lt!48216 (addApplyDifferent!67 lt!48195 lt!48206 (zeroValue!2342 newMap!16) lt!48214))))

(assert (=> b!96485 (= (apply!91 (+!137 lt!48195 (tuple2!2337 lt!48206 (zeroValue!2342 newMap!16))) lt!48214) (apply!91 lt!48195 lt!48214))))

(declare-fun lt!48215 () Unit!2887)

(assert (=> b!96485 (= lt!48215 lt!48216)))

(declare-fun lt!48213 () ListLongMap!1541)

(assert (=> b!96485 (= lt!48213 (getCurrentListMapNoExtraKeys!101 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48207 () (_ BitVec 64))

(assert (=> b!96485 (= lt!48207 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48199 () (_ BitVec 64))

(assert (=> b!96485 (= lt!48199 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!96485 (= lt!48208 (addApplyDifferent!67 lt!48213 lt!48207 (minValue!2342 newMap!16) lt!48199))))

(assert (=> b!96485 (= (apply!91 (+!137 lt!48213 (tuple2!2337 lt!48207 (minValue!2342 newMap!16))) lt!48199) (apply!91 lt!48213 lt!48199))))

(declare-fun b!96486 () Bool)

(assert (=> b!96486 (= e!62915 e!62910)))

(declare-fun res!48713 () Bool)

(assert (=> b!96486 (= res!48713 call!9793)))

(assert (=> b!96486 (=> (not res!48713) (not e!62910))))

(declare-fun b!96487 () Bool)

(assert (=> b!96487 (= e!62909 (validKeyInArray!0 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!9791 () Bool)

(assert (=> bm!9791 (= call!9795 (getCurrentListMapNoExtraKeys!101 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9792 () Bool)

(assert (=> bm!9792 (= call!9793 (contains!800 lt!48204 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96488 () Bool)

(assert (=> b!96488 (= e!62920 call!9794)))

(declare-fun b!96489 () Bool)

(declare-fun e!62912 () Bool)

(assert (=> b!96489 (= e!62912 (= (apply!91 lt!48204 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96490 () Bool)

(assert (=> b!96490 (= e!62911 e!62912)))

(declare-fun res!48707 () Bool)

(assert (=> b!96490 (= res!48707 call!9789)))

(assert (=> b!96490 (=> (not res!48707) (not e!62912))))

(assert (= (and d!25471 c!16271) b!96473))

(assert (= (and d!25471 (not c!16271)) b!96470))

(assert (= (and b!96470 c!16266) b!96484))

(assert (= (and b!96470 (not c!16266)) b!96474))

(assert (= (and b!96474 c!16269) b!96488))

(assert (= (and b!96474 (not c!16269)) b!96479))

(assert (= (or b!96488 b!96479) bm!9788))

(assert (= (or b!96484 bm!9788) bm!9786))

(assert (= (or b!96484 b!96488) bm!9790))

(assert (= (or b!96473 bm!9786) bm!9791))

(assert (= (or b!96473 bm!9790) bm!9787))

(assert (= (and d!25471 res!48710) b!96476))

(assert (= (and d!25471 c!16268) b!96485))

(assert (= (and d!25471 (not c!16268)) b!96482))

(assert (= (and d!25471 res!48708) b!96475))

(assert (= (and b!96475 res!48711) b!96487))

(assert (= (and b!96475 (not res!48709)) b!96477))

(assert (= (and b!96477 res!48706) b!96481))

(assert (= (and b!96475 res!48705) b!96483))

(assert (= (and b!96483 c!16270) b!96490))

(assert (= (and b!96483 (not c!16270)) b!96480))

(assert (= (and b!96490 res!48707) b!96489))

(assert (= (or b!96490 b!96480) bm!9789))

(assert (= (and b!96483 res!48712) b!96472))

(assert (= (and b!96472 c!16267) b!96486))

(assert (= (and b!96472 (not c!16267)) b!96478))

(assert (= (and b!96486 res!48713) b!96471))

(assert (= (or b!96486 b!96478) bm!9792))

(declare-fun b_lambda!4283 () Bool)

(assert (=> (not b_lambda!4283) (not b!96481)))

(assert (=> b!96481 t!5535))

(declare-fun b_and!5897 () Bool)

(assert (= b_and!5893 (and (=> t!5535 result!3233) b_and!5897)))

(assert (=> b!96481 t!5537))

(declare-fun b_and!5899 () Bool)

(assert (= b_and!5895 (and (=> t!5537 result!3235) b_and!5899)))

(assert (=> b!96477 m!104661))

(assert (=> b!96477 m!104661))

(declare-fun m!104753 () Bool)

(assert (=> b!96477 m!104753))

(declare-fun m!104755 () Bool)

(assert (=> b!96485 m!104755))

(declare-fun m!104757 () Bool)

(assert (=> b!96485 m!104757))

(declare-fun m!104759 () Bool)

(assert (=> b!96485 m!104759))

(declare-fun m!104761 () Bool)

(assert (=> b!96485 m!104761))

(declare-fun m!104763 () Bool)

(assert (=> b!96485 m!104763))

(assert (=> b!96485 m!104759))

(declare-fun m!104765 () Bool)

(assert (=> b!96485 m!104765))

(declare-fun m!104767 () Bool)

(assert (=> b!96485 m!104767))

(declare-fun m!104769 () Bool)

(assert (=> b!96485 m!104769))

(declare-fun m!104771 () Bool)

(assert (=> b!96485 m!104771))

(declare-fun m!104773 () Bool)

(assert (=> b!96485 m!104773))

(declare-fun m!104775 () Bool)

(assert (=> b!96485 m!104775))

(declare-fun m!104777 () Bool)

(assert (=> b!96485 m!104777))

(assert (=> b!96485 m!104769))

(declare-fun m!104779 () Bool)

(assert (=> b!96485 m!104779))

(assert (=> b!96485 m!104771))

(assert (=> b!96485 m!104661))

(declare-fun m!104781 () Bool)

(assert (=> b!96485 m!104781))

(assert (=> b!96485 m!104775))

(declare-fun m!104783 () Bool)

(assert (=> b!96485 m!104783))

(declare-fun m!104785 () Bool)

(assert (=> b!96485 m!104785))

(declare-fun m!104787 () Bool)

(assert (=> b!96481 m!104787))

(assert (=> b!96481 m!104661))

(declare-fun m!104789 () Bool)

(assert (=> b!96481 m!104789))

(assert (=> b!96481 m!104787))

(assert (=> b!96481 m!104043))

(declare-fun m!104791 () Bool)

(assert (=> b!96481 m!104791))

(assert (=> b!96481 m!104661))

(assert (=> b!96481 m!104043))

(declare-fun m!104793 () Bool)

(assert (=> b!96473 m!104793))

(assert (=> d!25471 m!103977))

(declare-fun m!104795 () Bool)

(assert (=> bm!9789 m!104795))

(assert (=> b!96476 m!104661))

(assert (=> b!96476 m!104661))

(assert (=> b!96476 m!104663))

(declare-fun m!104797 () Bool)

(assert (=> bm!9787 m!104797))

(declare-fun m!104799 () Bool)

(assert (=> b!96489 m!104799))

(declare-fun m!104801 () Bool)

(assert (=> bm!9792 m!104801))

(declare-fun m!104803 () Bool)

(assert (=> b!96471 m!104803))

(assert (=> b!96487 m!104661))

(assert (=> b!96487 m!104661))

(assert (=> b!96487 m!104663))

(assert (=> bm!9791 m!104777))

(assert (=> d!25409 d!25471))

(assert (=> d!25409 d!25287))

(declare-fun d!25473 () Bool)

(declare-fun res!48714 () Bool)

(declare-fun e!62922 () Bool)

(assert (=> d!25473 (=> res!48714 e!62922)))

(assert (=> d!25473 (= res!48714 (= (select (arr!2002 lt!48079) #b00000000000000000000000000000000) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25473 (= (arrayContainsKey!0 lt!48079 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000) e!62922)))

(declare-fun b!96491 () Bool)

(declare-fun e!62923 () Bool)

(assert (=> b!96491 (= e!62922 e!62923)))

(declare-fun res!48715 () Bool)

(assert (=> b!96491 (=> (not res!48715) (not e!62923))))

(assert (=> b!96491 (= res!48715 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 lt!48079)))))

(declare-fun b!96492 () Bool)

(assert (=> b!96492 (= e!62923 (arrayContainsKey!0 lt!48079 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!25473 (not res!48714)) b!96491))

(assert (= (and b!96491 res!48715) b!96492))

(declare-fun m!104805 () Bool)

(assert (=> d!25473 m!104805))

(assert (=> b!96492 m!103745))

(declare-fun m!104807 () Bool)

(assert (=> b!96492 m!104807))

(assert (=> d!25409 d!25473))

(declare-fun d!25475 () Bool)

(declare-fun e!62926 () Bool)

(assert (=> d!25475 e!62926))

(declare-fun res!48718 () Bool)

(assert (=> d!25475 (=> (not res!48718) (not e!62926))))

(assert (=> d!25475 (= res!48718 (and (bvsge (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000000) (bvslt (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (size!2251 (_keys!4143 newMap!16)))))))

(declare-fun lt!48219 () Unit!2887)

(declare-fun choose!102 ((_ BitVec 64) array!4214 (_ BitVec 32) (_ BitVec 32)) Unit!2887)

(assert (=> d!25475 (= lt!48219 (choose!102 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (mask!6542 newMap!16)))))

(assert (=> d!25475 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25475 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (mask!6542 newMap!16)) lt!48219)))

(declare-fun b!96495 () Bool)

(assert (=> b!96495 (= e!62926 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (mask!6542 newMap!16)))))

(assert (= (and d!25475 res!48718) b!96495))

(assert (=> d!25475 m!103745))

(declare-fun m!104809 () Bool)

(assert (=> d!25475 m!104809))

(assert (=> d!25475 m!103977))

(assert (=> b!96495 m!104517))

(assert (=> b!96495 m!104493))

(assert (=> d!25409 d!25475))

(declare-fun d!25477 () Bool)

(assert (=> d!25477 (arrayContainsKey!0 lt!48079 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!48222 () Unit!2887)

(declare-fun choose!13 (array!4214 (_ BitVec 64) (_ BitVec 32)) Unit!2887)

(assert (=> d!25477 (= lt!48222 (choose!13 lt!48079 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707))))))

(assert (=> d!25477 (bvsge (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000000)))

(assert (=> d!25477 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!48079 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707))) lt!48222)))

(declare-fun bs!3955 () Bool)

(assert (= bs!3955 d!25477))

(assert (=> bs!3955 m!103745))

(assert (=> bs!3955 m!104501))

(assert (=> bs!3955 m!103745))

(declare-fun m!104811 () Bool)

(assert (=> bs!3955 m!104811))

(assert (=> d!25409 d!25477))

(declare-fun d!25479 () Bool)

(declare-fun e!62927 () Bool)

(assert (=> d!25479 e!62927))

(declare-fun res!48719 () Bool)

(assert (=> d!25479 (=> (not res!48719) (not e!62927))))

(assert (=> d!25479 (= res!48719 (and (bvsge (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000000) (bvslt (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (size!2251 lt!48104))))))

(declare-fun lt!48223 () Unit!2887)

(assert (=> d!25479 (= lt!48223 (choose!583 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25479 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25479 (= (lemmaValidKeyInArrayIsInListMap!98 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (defaultEntry!2457 newMap!16)) lt!48223)))

(declare-fun b!96496 () Bool)

(assert (=> b!96496 (= e!62927 (contains!800 (getCurrentListMap!467 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2002 lt!48104) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)))))))

(assert (= (and d!25479 res!48719) b!96496))

(declare-fun m!104813 () Bool)

(assert (=> d!25479 m!104813))

(assert (=> d!25479 m!103977))

(assert (=> b!96496 m!104487))

(declare-fun m!104815 () Bool)

(assert (=> b!96496 m!104815))

(assert (=> b!96496 m!104487))

(assert (=> b!96496 m!104815))

(declare-fun m!104817 () Bool)

(assert (=> b!96496 m!104817))

(assert (=> d!25409 d!25479))

(declare-fun b!96497 () Bool)

(declare-fun e!62928 () Bool)

(declare-fun e!62931 () Bool)

(assert (=> b!96497 (= e!62928 e!62931)))

(declare-fun c!16272 () Bool)

(assert (=> b!96497 (= c!16272 (validKeyInArray!0 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) lt!48086)))))

(declare-fun b!96498 () Bool)

(declare-fun call!9796 () Bool)

(assert (=> b!96498 (= e!62931 call!9796)))

(declare-fun b!96499 () Bool)

(declare-fun e!62929 () Bool)

(assert (=> b!96499 (= e!62929 (contains!801 lt!48088 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) lt!48086)))))

(declare-fun b!96500 () Bool)

(assert (=> b!96500 (= e!62931 call!9796)))

(declare-fun d!25481 () Bool)

(declare-fun res!48721 () Bool)

(declare-fun e!62930 () Bool)

(assert (=> d!25481 (=> res!48721 e!62930)))

(assert (=> d!25481 (= res!48721 (bvsge lt!48086 (size!2251 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))))))))

(assert (=> d!25481 (= (arrayNoDuplicates!0 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) lt!48086 lt!48088) e!62930)))

(declare-fun b!96501 () Bool)

(assert (=> b!96501 (= e!62930 e!62928)))

(declare-fun res!48722 () Bool)

(assert (=> b!96501 (=> (not res!48722) (not e!62928))))

(assert (=> b!96501 (= res!48722 (not e!62929))))

(declare-fun res!48720 () Bool)

(assert (=> b!96501 (=> (not res!48720) (not e!62929))))

(assert (=> b!96501 (= res!48720 (validKeyInArray!0 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) lt!48086)))))

(declare-fun bm!9793 () Bool)

(assert (=> bm!9793 (= call!9796 (arrayNoDuplicates!0 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) (bvadd lt!48086 #b00000000000000000000000000000001) (ite c!16272 (Cons!1598 (select (arr!2002 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16)))) lt!48086) lt!48088) lt!48088)))))

(assert (= (and d!25481 (not res!48721)) b!96501))

(assert (= (and b!96501 res!48720) b!96499))

(assert (= (and b!96501 res!48722) b!96497))

(assert (= (and b!96497 c!16272) b!96498))

(assert (= (and b!96497 (not c!16272)) b!96500))

(assert (= (or b!96498 b!96500) bm!9793))

(declare-fun m!104819 () Bool)

(assert (=> b!96497 m!104819))

(assert (=> b!96497 m!104819))

(declare-fun m!104821 () Bool)

(assert (=> b!96497 m!104821))

(assert (=> b!96499 m!104819))

(assert (=> b!96499 m!104819))

(declare-fun m!104823 () Bool)

(assert (=> b!96499 m!104823))

(assert (=> b!96501 m!104819))

(assert (=> b!96501 m!104819))

(assert (=> b!96501 m!104821))

(assert (=> bm!9793 m!104819))

(declare-fun m!104825 () Bool)

(assert (=> bm!9793 m!104825))

(assert (=> d!25409 d!25481))

(declare-fun d!25483 () Bool)

(declare-fun e!62934 () Bool)

(assert (=> d!25483 e!62934))

(declare-fun res!48725 () Bool)

(assert (=> d!25483 (=> (not res!48725) (not e!62934))))

(assert (=> d!25483 (= res!48725 (and (bvsge (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) #b00000000000000000000000000000000) (bvslt (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (size!2251 (_keys!4143 newMap!16)))))))

(declare-fun lt!48226 () Unit!2887)

(declare-fun choose!41 (array!4214 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1602) Unit!2887)

(assert (=> d!25483 (= lt!48226 (choose!41 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) lt!48086 lt!48088))))

(assert (=> d!25483 (bvslt (size!2251 (_keys!4143 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!25483 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) lt!48086 lt!48088) lt!48226)))

(declare-fun b!96504 () Bool)

(assert (=> b!96504 (= e!62934 (arrayNoDuplicates!0 (array!4215 (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (size!2251 (_keys!4143 newMap!16))) lt!48086 lt!48088))))

(assert (= (and d!25483 res!48725) b!96504))

(assert (=> d!25483 m!103745))

(declare-fun m!104827 () Bool)

(assert (=> d!25483 m!104827))

(assert (=> b!96504 m!104517))

(assert (=> b!96504 m!104509))

(assert (=> d!25409 d!25483))

(declare-fun d!25485 () Bool)

(declare-fun e!62936 () Bool)

(assert (=> d!25485 e!62936))

(declare-fun res!48726 () Bool)

(assert (=> d!25485 (=> res!48726 e!62936)))

(declare-fun lt!48229 () Bool)

(assert (=> d!25485 (= res!48726 (not lt!48229))))

(declare-fun lt!48227 () Bool)

(assert (=> d!25485 (= lt!48229 lt!48227)))

(declare-fun lt!48228 () Unit!2887)

(declare-fun e!62935 () Unit!2887)

(assert (=> d!25485 (= lt!48228 e!62935)))

(declare-fun c!16273 () Bool)

(assert (=> d!25485 (= c!16273 lt!48227)))

(assert (=> d!25485 (= lt!48227 (containsKey!152 (toList!786 (getCurrentListMap!467 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)))))))

(assert (=> d!25485 (= (contains!800 (getCurrentListMap!467 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)))) lt!48229)))

(declare-fun b!96505 () Bool)

(declare-fun lt!48230 () Unit!2887)

(assert (=> b!96505 (= e!62935 lt!48230)))

(assert (=> b!96505 (= lt!48230 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 (getCurrentListMap!467 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)))))))

(assert (=> b!96505 (isDefined!102 (getValueByKey!148 (toList!786 (getCurrentListMap!467 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)))))))

(declare-fun b!96506 () Bool)

(declare-fun Unit!2915 () Unit!2887)

(assert (=> b!96506 (= e!62935 Unit!2915)))

(declare-fun b!96507 () Bool)

(assert (=> b!96507 (= e!62936 (isDefined!102 (getValueByKey!148 (toList!786 (getCurrentListMap!467 lt!48104 lt!48082 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (store (arr!2002 (_keys!4143 newMap!16)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (ite c!16109 (index!3193 lt!47707) (index!3190 lt!47707))))))))

(assert (= (and d!25485 c!16273) b!96505))

(assert (= (and d!25485 (not c!16273)) b!96506))

(assert (= (and d!25485 (not res!48726)) b!96507))

(assert (=> d!25485 m!104489))

(declare-fun m!104829 () Bool)

(assert (=> d!25485 m!104829))

(assert (=> b!96505 m!104489))

(declare-fun m!104831 () Bool)

(assert (=> b!96505 m!104831))

(assert (=> b!96505 m!104489))

(declare-fun m!104833 () Bool)

(assert (=> b!96505 m!104833))

(assert (=> b!96505 m!104833))

(declare-fun m!104835 () Bool)

(assert (=> b!96505 m!104835))

(assert (=> b!96507 m!104489))

(assert (=> b!96507 m!104833))

(assert (=> b!96507 m!104833))

(assert (=> b!96507 m!104835))

(assert (=> d!25409 d!25485))

(declare-fun d!25487 () Bool)

(declare-fun e!62938 () Bool)

(assert (=> d!25487 e!62938))

(declare-fun res!48727 () Bool)

(assert (=> d!25487 (=> res!48727 e!62938)))

(declare-fun lt!48233 () Bool)

(assert (=> d!25487 (= res!48727 (not lt!48233))))

(declare-fun lt!48231 () Bool)

(assert (=> d!25487 (= lt!48233 lt!48231)))

(declare-fun lt!48232 () Unit!2887)

(declare-fun e!62937 () Unit!2887)

(assert (=> d!25487 (= lt!48232 e!62937)))

(declare-fun c!16274 () Bool)

(assert (=> d!25487 (= c!16274 lt!48231)))

(assert (=> d!25487 (= lt!48231 (containsKey!152 (toList!786 lt!47937) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25487 (= (contains!800 lt!47937 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) lt!48233)))

(declare-fun b!96508 () Bool)

(declare-fun lt!48234 () Unit!2887)

(assert (=> b!96508 (= e!62937 lt!48234)))

(assert (=> b!96508 (= lt!48234 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47937) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> b!96508 (isDefined!102 (getValueByKey!148 (toList!786 lt!47937) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96509 () Bool)

(declare-fun Unit!2916 () Unit!2887)

(assert (=> b!96509 (= e!62937 Unit!2916)))

(declare-fun b!96510 () Bool)

(assert (=> b!96510 (= e!62938 (isDefined!102 (getValueByKey!148 (toList!786 lt!47937) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(assert (= (and d!25487 c!16274) b!96508))

(assert (= (and d!25487 (not c!16274)) b!96509))

(assert (= (and d!25487 (not res!48727)) b!96510))

(declare-fun m!104837 () Bool)

(assert (=> d!25487 m!104837))

(declare-fun m!104839 () Bool)

(assert (=> b!96508 m!104839))

(assert (=> b!96508 m!104275))

(assert (=> b!96508 m!104275))

(declare-fun m!104841 () Bool)

(assert (=> b!96508 m!104841))

(assert (=> b!96510 m!104275))

(assert (=> b!96510 m!104275))

(assert (=> b!96510 m!104841))

(assert (=> d!25343 d!25487))

(declare-fun b!96512 () Bool)

(declare-fun e!62939 () Option!154)

(declare-fun e!62940 () Option!154)

(assert (=> b!96512 (= e!62939 e!62940)))

(declare-fun c!16276 () Bool)

(assert (=> b!96512 (= c!16276 (and ((_ is Cons!1599) lt!47936) (not (= (_1!1178 (h!2192 lt!47936)) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))))

(declare-fun d!25489 () Bool)

(declare-fun c!16275 () Bool)

(assert (=> d!25489 (= c!16275 (and ((_ is Cons!1599) lt!47936) (= (_1!1178 (h!2192 lt!47936)) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(assert (=> d!25489 (= (getValueByKey!148 lt!47936 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) e!62939)))

(declare-fun b!96513 () Bool)

(assert (=> b!96513 (= e!62940 (getValueByKey!148 (t!5529 lt!47936) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96514 () Bool)

(assert (=> b!96514 (= e!62940 None!152)))

(declare-fun b!96511 () Bool)

(assert (=> b!96511 (= e!62939 (Some!153 (_2!1178 (h!2192 lt!47936))))))

(assert (= (and d!25489 c!16275) b!96511))

(assert (= (and d!25489 (not c!16275)) b!96512))

(assert (= (and b!96512 c!16276) b!96513))

(assert (= (and b!96512 (not c!16276)) b!96514))

(declare-fun m!104843 () Bool)

(assert (=> b!96513 m!104843))

(assert (=> d!25343 d!25489))

(declare-fun d!25491 () Bool)

(assert (=> d!25491 (= (getValueByKey!148 lt!47936 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) (Some!153 (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun lt!48235 () Unit!2887)

(assert (=> d!25491 (= lt!48235 (choose!591 lt!47936 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun e!62941 () Bool)

(assert (=> d!25491 e!62941))

(declare-fun res!48728 () Bool)

(assert (=> d!25491 (=> (not res!48728) (not e!62941))))

(assert (=> d!25491 (= res!48728 (isStrictlySorted!298 lt!47936))))

(assert (=> d!25491 (= (lemmaContainsTupThenGetReturnValue!66 lt!47936 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) lt!48235)))

(declare-fun b!96515 () Bool)

(declare-fun res!48729 () Bool)

(assert (=> b!96515 (=> (not res!48729) (not e!62941))))

(assert (=> b!96515 (= res!48729 (containsKey!152 lt!47936 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96516 () Bool)

(assert (=> b!96516 (= e!62941 (contains!802 lt!47936 (tuple2!2337 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(assert (= (and d!25491 res!48728) b!96515))

(assert (= (and b!96515 res!48729) b!96516))

(assert (=> d!25491 m!104269))

(declare-fun m!104845 () Bool)

(assert (=> d!25491 m!104845))

(declare-fun m!104847 () Bool)

(assert (=> d!25491 m!104847))

(declare-fun m!104849 () Bool)

(assert (=> b!96515 m!104849))

(declare-fun m!104851 () Bool)

(assert (=> b!96516 m!104851))

(assert (=> d!25343 d!25491))

(declare-fun e!62945 () List!1603)

(declare-fun b!96517 () Bool)

(assert (=> b!96517 (= e!62945 (insertStrictlySorted!68 (t!5529 (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709)))) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96519 () Bool)

(declare-fun e!62942 () List!1603)

(declare-fun call!9798 () List!1603)

(assert (=> b!96519 (= e!62942 call!9798)))

(declare-fun b!96520 () Bool)

(declare-fun e!62946 () List!1603)

(declare-fun call!9797 () List!1603)

(assert (=> b!96520 (= e!62946 call!9797)))

(declare-fun b!96521 () Bool)

(declare-fun e!62944 () List!1603)

(declare-fun call!9799 () List!1603)

(assert (=> b!96521 (= e!62944 call!9799)))

(declare-fun bm!9794 () Bool)

(assert (=> bm!9794 (= call!9799 call!9798)))

(declare-fun e!62943 () Bool)

(declare-fun b!96522 () Bool)

(declare-fun lt!48236 () List!1603)

(assert (=> b!96522 (= e!62943 (contains!802 lt!48236 (tuple2!2337 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun bm!9795 () Bool)

(assert (=> bm!9795 (= call!9797 call!9799)))

(declare-fun c!16278 () Bool)

(declare-fun b!96523 () Bool)

(declare-fun c!16280 () Bool)

(assert (=> b!96523 (= e!62945 (ite c!16278 (t!5529 (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709)))) (ite c!16280 (Cons!1599 (h!2192 (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709)))) (t!5529 (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709))))) Nil!1600)))))

(declare-fun b!96518 () Bool)

(declare-fun res!48730 () Bool)

(assert (=> b!96518 (=> (not res!48730) (not e!62943))))

(assert (=> b!96518 (= res!48730 (containsKey!152 lt!48236 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun d!25493 () Bool)

(assert (=> d!25493 e!62943))

(declare-fun res!48731 () Bool)

(assert (=> d!25493 (=> (not res!48731) (not e!62943))))

(assert (=> d!25493 (= res!48731 (isStrictlySorted!298 lt!48236))))

(assert (=> d!25493 (= lt!48236 e!62942)))

(declare-fun c!16277 () Bool)

(assert (=> d!25493 (= c!16277 (and ((_ is Cons!1599) (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709)))) (bvslt (_1!1178 (h!2192 (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709))))) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(assert (=> d!25493 (isStrictlySorted!298 (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709))))))

(assert (=> d!25493 (= (insertStrictlySorted!68 (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709))) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) lt!48236)))

(declare-fun b!96524 () Bool)

(assert (=> b!96524 (= c!16280 (and ((_ is Cons!1599) (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709)))) (bvsgt (_1!1178 (h!2192 (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709))))) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(assert (=> b!96524 (= e!62944 e!62946)))

(declare-fun bm!9796 () Bool)

(assert (=> bm!9796 (= call!9798 ($colon$colon!76 e!62945 (ite c!16277 (h!2192 (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709)))) (tuple2!2337 (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (_2!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))))

(declare-fun c!16279 () Bool)

(assert (=> bm!9796 (= c!16279 c!16277)))

(declare-fun b!96525 () Bool)

(assert (=> b!96525 (= e!62942 e!62944)))

(assert (=> b!96525 (= c!16278 (and ((_ is Cons!1599) (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709)))) (= (_1!1178 (h!2192 (toList!786 (ite c!16145 call!9712 (ite c!16140 call!9707 call!9709))))) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun b!96526 () Bool)

(assert (=> b!96526 (= e!62946 call!9797)))

(assert (= (and d!25493 c!16277) b!96519))

(assert (= (and d!25493 (not c!16277)) b!96525))

(assert (= (and b!96525 c!16278) b!96521))

(assert (= (and b!96525 (not c!16278)) b!96524))

(assert (= (and b!96524 c!16280) b!96520))

(assert (= (and b!96524 (not c!16280)) b!96526))

(assert (= (or b!96520 b!96526) bm!9795))

(assert (= (or b!96521 bm!9795) bm!9794))

(assert (= (or b!96519 bm!9794) bm!9796))

(assert (= (and bm!9796 c!16279) b!96517))

(assert (= (and bm!9796 (not c!16279)) b!96523))

(assert (= (and d!25493 res!48731) b!96518))

(assert (= (and b!96518 res!48730) b!96522))

(declare-fun m!104853 () Bool)

(assert (=> b!96517 m!104853))

(declare-fun m!104855 () Bool)

(assert (=> d!25493 m!104855))

(declare-fun m!104857 () Bool)

(assert (=> d!25493 m!104857))

(declare-fun m!104859 () Bool)

(assert (=> b!96522 m!104859))

(declare-fun m!104861 () Bool)

(assert (=> b!96518 m!104861))

(declare-fun m!104863 () Bool)

(assert (=> bm!9796 m!104863))

(assert (=> d!25343 d!25493))

(declare-fun d!25495 () Bool)

(assert (=> d!25495 (= (apply!91 lt!47820 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1289 (getValueByKey!148 (toList!786 lt!47820) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!3956 () Bool)

(assert (= bs!3956 d!25495))

(assert (=> bs!3956 m!104003))

(declare-fun m!104865 () Bool)

(assert (=> bs!3956 m!104865))

(assert (=> bs!3956 m!104865))

(declare-fun m!104867 () Bool)

(assert (=> bs!3956 m!104867))

(assert (=> b!96017 d!25495))

(declare-fun d!25497 () Bool)

(declare-fun c!16281 () Bool)

(assert (=> d!25497 (= c!16281 ((_ is ValueCellFull!966) (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!62947 () V!3139)

(assert (=> d!25497 (= (get!1286 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!62947)))

(declare-fun b!96527 () Bool)

(assert (=> b!96527 (= e!62947 (get!1287 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96528 () Bool)

(assert (=> b!96528 (= e!62947 (get!1288 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25497 c!16281) b!96527))

(assert (= (and d!25497 (not c!16281)) b!96528))

(assert (=> b!96527 m!104039))

(assert (=> b!96527 m!104043))

(declare-fun m!104869 () Bool)

(assert (=> b!96527 m!104869))

(assert (=> b!96528 m!104039))

(assert (=> b!96528 m!104043))

(declare-fun m!104871 () Bool)

(assert (=> b!96528 m!104871))

(assert (=> b!96017 d!25497))

(declare-fun d!25499 () Bool)

(declare-fun e!62949 () Bool)

(assert (=> d!25499 e!62949))

(declare-fun res!48732 () Bool)

(assert (=> d!25499 (=> res!48732 e!62949)))

(declare-fun lt!48239 () Bool)

(assert (=> d!25499 (= res!48732 (not lt!48239))))

(declare-fun lt!48237 () Bool)

(assert (=> d!25499 (= lt!48239 lt!48237)))

(declare-fun lt!48238 () Unit!2887)

(declare-fun e!62948 () Unit!2887)

(assert (=> d!25499 (= lt!48238 e!62948)))

(declare-fun c!16282 () Bool)

(assert (=> d!25499 (= c!16282 lt!48237)))

(assert (=> d!25499 (= lt!48237 (containsKey!152 (toList!786 lt!47931) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25499 (= (contains!800 lt!47931 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48239)))

(declare-fun b!96529 () Bool)

(declare-fun lt!48240 () Unit!2887)

(assert (=> b!96529 (= e!62948 lt!48240)))

(assert (=> b!96529 (= lt!48240 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47931) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96529 (isDefined!102 (getValueByKey!148 (toList!786 lt!47931) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96530 () Bool)

(declare-fun Unit!2917 () Unit!2887)

(assert (=> b!96530 (= e!62948 Unit!2917)))

(declare-fun b!96531 () Bool)

(assert (=> b!96531 (= e!62949 (isDefined!102 (getValueByKey!148 (toList!786 lt!47931) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25499 c!16282) b!96529))

(assert (= (and d!25499 (not c!16282)) b!96530))

(assert (= (and d!25499 (not res!48732)) b!96531))

(declare-fun m!104873 () Bool)

(assert (=> d!25499 m!104873))

(declare-fun m!104875 () Bool)

(assert (=> b!96529 m!104875))

(declare-fun m!104877 () Bool)

(assert (=> b!96529 m!104877))

(assert (=> b!96529 m!104877))

(declare-fun m!104879 () Bool)

(assert (=> b!96529 m!104879))

(assert (=> b!96531 m!104877))

(assert (=> b!96531 m!104877))

(assert (=> b!96531 m!104879))

(assert (=> d!25333 d!25499))

(assert (=> d!25333 d!25283))

(declare-fun d!25501 () Bool)

(assert (=> d!25501 (contains!800 (getCurrentListMap!467 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707)))))

(assert (=> d!25501 true))

(declare-fun _$16!114 () Unit!2887)

(assert (=> d!25501 (= (choose!583 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3191 lt!47707) (defaultEntry!2457 newMap!16)) _$16!114)))

(declare-fun bs!3957 () Bool)

(assert (= bs!3957 d!25501))

(assert (=> bs!3957 m!104119))

(assert (=> bs!3957 m!103863))

(assert (=> bs!3957 m!104119))

(assert (=> bs!3957 m!103863))

(assert (=> bs!3957 m!104121))

(assert (=> d!25307 d!25501))

(assert (=> d!25307 d!25451))

(declare-fun d!25503 () Bool)

(assert (=> d!25503 (= (isDefined!102 (getValueByKey!148 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))) (not (isEmpty!359 (getValueByKey!148 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))))

(declare-fun bs!3958 () Bool)

(assert (= bs!3958 d!25503))

(assert (=> bs!3958 m!104557))

(declare-fun m!104881 () Bool)

(assert (=> bs!3958 m!104881))

(assert (=> b!96334 d!25503))

(declare-fun b!96533 () Bool)

(declare-fun e!62950 () Option!154)

(declare-fun e!62951 () Option!154)

(assert (=> b!96533 (= e!62950 e!62951)))

(declare-fun c!16284 () Bool)

(assert (=> b!96533 (= c!16284 (and ((_ is Cons!1599) (toList!786 call!9684)) (not (= (_1!1178 (h!2192 (toList!786 call!9684))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))))

(declare-fun c!16283 () Bool)

(declare-fun d!25505 () Bool)

(assert (=> d!25505 (= c!16283 (and ((_ is Cons!1599) (toList!786 call!9684)) (= (_1!1178 (h!2192 (toList!786 call!9684))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (=> d!25505 (= (getValueByKey!148 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) e!62950)))

(declare-fun b!96534 () Bool)

(assert (=> b!96534 (= e!62951 (getValueByKey!148 (t!5529 (toList!786 call!9684)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!96535 () Bool)

(assert (=> b!96535 (= e!62951 None!152)))

(declare-fun b!96532 () Bool)

(assert (=> b!96532 (= e!62950 (Some!153 (_2!1178 (h!2192 (toList!786 call!9684)))))))

(assert (= (and d!25505 c!16283) b!96532))

(assert (= (and d!25505 (not c!16283)) b!96533))

(assert (= (and b!96533 c!16284) b!96534))

(assert (= (and b!96533 (not c!16284)) b!96535))

(assert (=> b!96534 m!103745))

(declare-fun m!104883 () Bool)

(assert (=> b!96534 m!104883))

(assert (=> b!96334 d!25505))

(declare-fun d!25507 () Bool)

(declare-fun res!48733 () Bool)

(declare-fun e!62952 () Bool)

(assert (=> d!25507 (=> res!48733 e!62952)))

(assert (=> d!25507 (= res!48733 (and ((_ is Cons!1599) (toList!786 call!9687)) (= (_1!1178 (h!2192 (toList!786 call!9687))) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707)))))))

(assert (=> d!25507 (= (containsKey!152 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))) e!62952)))

(declare-fun b!96536 () Bool)

(declare-fun e!62953 () Bool)

(assert (=> b!96536 (= e!62952 e!62953)))

(declare-fun res!48734 () Bool)

(assert (=> b!96536 (=> (not res!48734) (not e!62953))))

(assert (=> b!96536 (= res!48734 (and (or (not ((_ is Cons!1599) (toList!786 call!9687))) (bvsle (_1!1178 (h!2192 (toList!786 call!9687))) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707)))) ((_ is Cons!1599) (toList!786 call!9687)) (bvslt (_1!1178 (h!2192 (toList!786 call!9687))) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707)))))))

(declare-fun b!96537 () Bool)

(assert (=> b!96537 (= e!62953 (containsKey!152 (t!5529 (toList!786 call!9687)) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(assert (= (and d!25507 (not res!48733)) b!96536))

(assert (= (and b!96536 res!48734) b!96537))

(assert (=> b!96537 m!103863))

(declare-fun m!104885 () Bool)

(assert (=> b!96537 m!104885))

(assert (=> d!25305 d!25507))

(declare-fun b!96539 () Bool)

(declare-fun e!62954 () Option!154)

(declare-fun e!62955 () Option!154)

(assert (=> b!96539 (= e!62954 e!62955)))

(declare-fun c!16286 () Bool)

(assert (=> b!96539 (= c!16286 (and ((_ is Cons!1599) (toList!786 lt!48005)) (not (= (_1!1178 (h!2192 (toList!786 lt!48005))) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun d!25509 () Bool)

(declare-fun c!16285 () Bool)

(assert (=> d!25509 (= c!16285 (and ((_ is Cons!1599) (toList!786 lt!48005)) (= (_1!1178 (h!2192 (toList!786 lt!48005))) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25509 (= (getValueByKey!148 (toList!786 lt!48005) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) e!62954)))

(declare-fun b!96540 () Bool)

(assert (=> b!96540 (= e!62955 (getValueByKey!148 (t!5529 (toList!786 lt!48005)) (_1!1178 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96541 () Bool)

(assert (=> b!96541 (= e!62955 None!152)))

(declare-fun b!96538 () Bool)

(assert (=> b!96538 (= e!62954 (Some!153 (_2!1178 (h!2192 (toList!786 lt!48005)))))))

(assert (= (and d!25509 c!16285) b!96538))

(assert (= (and d!25509 (not c!16285)) b!96539))

(assert (= (and b!96539 c!16286) b!96540))

(assert (= (and b!96539 (not c!16286)) b!96541))

(declare-fun m!104887 () Bool)

(assert (=> b!96540 m!104887))

(assert (=> b!96249 d!25509))

(declare-fun d!25511 () Bool)

(assert (=> d!25511 (= (apply!91 lt!47851 lt!47837) (get!1289 (getValueByKey!148 (toList!786 lt!47851) lt!47837)))))

(declare-fun bs!3959 () Bool)

(assert (= bs!3959 d!25511))

(declare-fun m!104889 () Bool)

(assert (=> bs!3959 m!104889))

(assert (=> bs!3959 m!104889))

(declare-fun m!104891 () Bool)

(assert (=> bs!3959 m!104891))

(assert (=> b!96042 d!25511))

(declare-fun d!25513 () Bool)

(assert (=> d!25513 (= (apply!91 lt!47843 lt!47838) (get!1289 (getValueByKey!148 (toList!786 lt!47843) lt!47838)))))

(declare-fun bs!3960 () Bool)

(assert (= bs!3960 d!25513))

(declare-fun m!104893 () Bool)

(assert (=> bs!3960 m!104893))

(assert (=> bs!3960 m!104893))

(declare-fun m!104895 () Bool)

(assert (=> bs!3960 m!104895))

(assert (=> b!96042 d!25513))

(declare-fun d!25515 () Bool)

(assert (=> d!25515 (= (apply!91 lt!47833 lt!47852) (get!1289 (getValueByKey!148 (toList!786 lt!47833) lt!47852)))))

(declare-fun bs!3961 () Bool)

(assert (= bs!3961 d!25515))

(declare-fun m!104897 () Bool)

(assert (=> bs!3961 m!104897))

(assert (=> bs!3961 m!104897))

(declare-fun m!104899 () Bool)

(assert (=> bs!3961 m!104899))

(assert (=> b!96042 d!25515))

(declare-fun d!25517 () Bool)

(assert (=> d!25517 (= (apply!91 (+!137 lt!47843 (tuple2!2337 lt!47847 (minValue!2342 newMap!16))) lt!47838) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47843 (tuple2!2337 lt!47847 (minValue!2342 newMap!16)))) lt!47838)))))

(declare-fun bs!3962 () Bool)

(assert (= bs!3962 d!25517))

(declare-fun m!104901 () Bool)

(assert (=> bs!3962 m!104901))

(assert (=> bs!3962 m!104901))

(declare-fun m!104903 () Bool)

(assert (=> bs!3962 m!104903))

(assert (=> b!96042 d!25517))

(declare-fun d!25519 () Bool)

(assert (=> d!25519 (= (apply!91 (+!137 lt!47843 (tuple2!2337 lt!47847 (minValue!2342 newMap!16))) lt!47838) (apply!91 lt!47843 lt!47838))))

(declare-fun lt!48241 () Unit!2887)

(assert (=> d!25519 (= lt!48241 (choose!588 lt!47843 lt!47847 (minValue!2342 newMap!16) lt!47838))))

(declare-fun e!62956 () Bool)

(assert (=> d!25519 e!62956))

(declare-fun res!48735 () Bool)

(assert (=> d!25519 (=> (not res!48735) (not e!62956))))

(assert (=> d!25519 (= res!48735 (contains!800 lt!47843 lt!47838))))

(assert (=> d!25519 (= (addApplyDifferent!67 lt!47843 lt!47847 (minValue!2342 newMap!16) lt!47838) lt!48241)))

(declare-fun b!96542 () Bool)

(assert (=> b!96542 (= e!62956 (not (= lt!47838 lt!47847)))))

(assert (= (and d!25519 res!48735) b!96542))

(declare-fun m!104905 () Bool)

(assert (=> d!25519 m!104905))

(assert (=> d!25519 m!104071))

(declare-fun m!104907 () Bool)

(assert (=> d!25519 m!104907))

(assert (=> d!25519 m!104083))

(assert (=> d!25519 m!104091))

(assert (=> d!25519 m!104083))

(assert (=> b!96042 d!25519))

(declare-fun d!25521 () Bool)

(assert (=> d!25521 (= (apply!91 (+!137 lt!47833 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16))) lt!47852) (apply!91 lt!47833 lt!47852))))

(declare-fun lt!48242 () Unit!2887)

(assert (=> d!25521 (= lt!48242 (choose!588 lt!47833 lt!47844 (zeroValue!2342 newMap!16) lt!47852))))

(declare-fun e!62957 () Bool)

(assert (=> d!25521 e!62957))

(declare-fun res!48736 () Bool)

(assert (=> d!25521 (=> (not res!48736) (not e!62957))))

(assert (=> d!25521 (= res!48736 (contains!800 lt!47833 lt!47852))))

(assert (=> d!25521 (= (addApplyDifferent!67 lt!47833 lt!47844 (zeroValue!2342 newMap!16) lt!47852) lt!48242)))

(declare-fun b!96543 () Bool)

(assert (=> b!96543 (= e!62957 (not (= lt!47852 lt!47844)))))

(assert (= (and d!25521 res!48736) b!96543))

(declare-fun m!104909 () Bool)

(assert (=> d!25521 m!104909))

(assert (=> d!25521 m!104093))

(declare-fun m!104911 () Bool)

(assert (=> d!25521 m!104911))

(assert (=> d!25521 m!104079))

(assert (=> d!25521 m!104081))

(assert (=> d!25521 m!104079))

(assert (=> b!96042 d!25521))

(declare-fun d!25523 () Bool)

(declare-fun e!62958 () Bool)

(assert (=> d!25523 e!62958))

(declare-fun res!48737 () Bool)

(assert (=> d!25523 (=> (not res!48737) (not e!62958))))

(declare-fun lt!48245 () ListLongMap!1541)

(assert (=> d!25523 (= res!48737 (contains!800 lt!48245 (_1!1178 (tuple2!2337 lt!47847 (minValue!2342 newMap!16)))))))

(declare-fun lt!48244 () List!1603)

(assert (=> d!25523 (= lt!48245 (ListLongMap!1542 lt!48244))))

(declare-fun lt!48243 () Unit!2887)

(declare-fun lt!48246 () Unit!2887)

(assert (=> d!25523 (= lt!48243 lt!48246)))

(assert (=> d!25523 (= (getValueByKey!148 lt!48244 (_1!1178 (tuple2!2337 lt!47847 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47847 (minValue!2342 newMap!16)))))))

(assert (=> d!25523 (= lt!48246 (lemmaContainsTupThenGetReturnValue!66 lt!48244 (_1!1178 (tuple2!2337 lt!47847 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47847 (minValue!2342 newMap!16)))))))

(assert (=> d!25523 (= lt!48244 (insertStrictlySorted!68 (toList!786 lt!47843) (_1!1178 (tuple2!2337 lt!47847 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47847 (minValue!2342 newMap!16)))))))

(assert (=> d!25523 (= (+!137 lt!47843 (tuple2!2337 lt!47847 (minValue!2342 newMap!16))) lt!48245)))

(declare-fun b!96544 () Bool)

(declare-fun res!48738 () Bool)

(assert (=> b!96544 (=> (not res!48738) (not e!62958))))

(assert (=> b!96544 (= res!48738 (= (getValueByKey!148 (toList!786 lt!48245) (_1!1178 (tuple2!2337 lt!47847 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47847 (minValue!2342 newMap!16))))))))

(declare-fun b!96545 () Bool)

(assert (=> b!96545 (= e!62958 (contains!802 (toList!786 lt!48245) (tuple2!2337 lt!47847 (minValue!2342 newMap!16))))))

(assert (= (and d!25523 res!48737) b!96544))

(assert (= (and b!96544 res!48738) b!96545))

(declare-fun m!104913 () Bool)

(assert (=> d!25523 m!104913))

(declare-fun m!104915 () Bool)

(assert (=> d!25523 m!104915))

(declare-fun m!104917 () Bool)

(assert (=> d!25523 m!104917))

(declare-fun m!104919 () Bool)

(assert (=> d!25523 m!104919))

(declare-fun m!104921 () Bool)

(assert (=> b!96544 m!104921))

(declare-fun m!104923 () Bool)

(assert (=> b!96545 m!104923))

(assert (=> b!96042 d!25523))

(declare-fun d!25525 () Bool)

(assert (=> d!25525 (contains!800 (+!137 lt!47840 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16))) lt!47839)))

(declare-fun lt!48247 () Unit!2887)

(assert (=> d!25525 (= lt!48247 (choose!589 lt!47840 lt!47850 (zeroValue!2342 newMap!16) lt!47839))))

(assert (=> d!25525 (contains!800 lt!47840 lt!47839)))

(assert (=> d!25525 (= (addStillContains!67 lt!47840 lt!47850 (zeroValue!2342 newMap!16) lt!47839) lt!48247)))

(declare-fun bs!3963 () Bool)

(assert (= bs!3963 d!25525))

(assert (=> bs!3963 m!104077))

(assert (=> bs!3963 m!104077))

(assert (=> bs!3963 m!104087))

(declare-fun m!104925 () Bool)

(assert (=> bs!3963 m!104925))

(declare-fun m!104927 () Bool)

(assert (=> bs!3963 m!104927))

(assert (=> b!96042 d!25525))

(declare-fun d!25527 () Bool)

(declare-fun e!62959 () Bool)

(assert (=> d!25527 e!62959))

(declare-fun res!48739 () Bool)

(assert (=> d!25527 (=> (not res!48739) (not e!62959))))

(declare-fun lt!48250 () ListLongMap!1541)

(assert (=> d!25527 (= res!48739 (contains!800 lt!48250 (_1!1178 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48249 () List!1603)

(assert (=> d!25527 (= lt!48250 (ListLongMap!1542 lt!48249))))

(declare-fun lt!48248 () Unit!2887)

(declare-fun lt!48251 () Unit!2887)

(assert (=> d!25527 (= lt!48248 lt!48251)))

(assert (=> d!25527 (= (getValueByKey!148 lt!48249 (_1!1178 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25527 (= lt!48251 (lemmaContainsTupThenGetReturnValue!66 lt!48249 (_1!1178 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25527 (= lt!48249 (insertStrictlySorted!68 (toList!786 lt!47840) (_1!1178 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25527 (= (+!137 lt!47840 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16))) lt!48250)))

(declare-fun b!96546 () Bool)

(declare-fun res!48740 () Bool)

(assert (=> b!96546 (=> (not res!48740) (not e!62959))))

(assert (=> b!96546 (= res!48740 (= (getValueByKey!148 (toList!786 lt!48250) (_1!1178 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16))))))))

(declare-fun b!96547 () Bool)

(assert (=> b!96547 (= e!62959 (contains!802 (toList!786 lt!48250) (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25527 res!48739) b!96546))

(assert (= (and b!96546 res!48740) b!96547))

(declare-fun m!104929 () Bool)

(assert (=> d!25527 m!104929))

(declare-fun m!104931 () Bool)

(assert (=> d!25527 m!104931))

(declare-fun m!104933 () Bool)

(assert (=> d!25527 m!104933))

(declare-fun m!104935 () Bool)

(assert (=> d!25527 m!104935))

(declare-fun m!104937 () Bool)

(assert (=> b!96546 m!104937))

(declare-fun m!104939 () Bool)

(assert (=> b!96547 m!104939))

(assert (=> b!96042 d!25527))

(declare-fun d!25529 () Bool)

(declare-fun e!62960 () Bool)

(assert (=> d!25529 e!62960))

(declare-fun res!48741 () Bool)

(assert (=> d!25529 (=> (not res!48741) (not e!62960))))

(declare-fun lt!48254 () ListLongMap!1541)

(assert (=> d!25529 (= res!48741 (contains!800 lt!48254 (_1!1178 (tuple2!2337 lt!47845 (minValue!2342 newMap!16)))))))

(declare-fun lt!48253 () List!1603)

(assert (=> d!25529 (= lt!48254 (ListLongMap!1542 lt!48253))))

(declare-fun lt!48252 () Unit!2887)

(declare-fun lt!48255 () Unit!2887)

(assert (=> d!25529 (= lt!48252 lt!48255)))

(assert (=> d!25529 (= (getValueByKey!148 lt!48253 (_1!1178 (tuple2!2337 lt!47845 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47845 (minValue!2342 newMap!16)))))))

(assert (=> d!25529 (= lt!48255 (lemmaContainsTupThenGetReturnValue!66 lt!48253 (_1!1178 (tuple2!2337 lt!47845 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47845 (minValue!2342 newMap!16)))))))

(assert (=> d!25529 (= lt!48253 (insertStrictlySorted!68 (toList!786 lt!47851) (_1!1178 (tuple2!2337 lt!47845 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47845 (minValue!2342 newMap!16)))))))

(assert (=> d!25529 (= (+!137 lt!47851 (tuple2!2337 lt!47845 (minValue!2342 newMap!16))) lt!48254)))

(declare-fun b!96548 () Bool)

(declare-fun res!48742 () Bool)

(assert (=> b!96548 (=> (not res!48742) (not e!62960))))

(assert (=> b!96548 (= res!48742 (= (getValueByKey!148 (toList!786 lt!48254) (_1!1178 (tuple2!2337 lt!47845 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47845 (minValue!2342 newMap!16))))))))

(declare-fun b!96549 () Bool)

(assert (=> b!96549 (= e!62960 (contains!802 (toList!786 lt!48254) (tuple2!2337 lt!47845 (minValue!2342 newMap!16))))))

(assert (= (and d!25529 res!48741) b!96548))

(assert (= (and b!96548 res!48742) b!96549))

(declare-fun m!104941 () Bool)

(assert (=> d!25529 m!104941))

(declare-fun m!104943 () Bool)

(assert (=> d!25529 m!104943))

(declare-fun m!104945 () Bool)

(assert (=> d!25529 m!104945))

(declare-fun m!104947 () Bool)

(assert (=> d!25529 m!104947))

(declare-fun m!104949 () Bool)

(assert (=> b!96548 m!104949))

(declare-fun m!104951 () Bool)

(assert (=> b!96549 m!104951))

(assert (=> b!96042 d!25529))

(declare-fun d!25531 () Bool)

(assert (=> d!25531 (= (apply!91 (+!137 lt!47833 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16))) lt!47852) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47833 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16)))) lt!47852)))))

(declare-fun bs!3964 () Bool)

(assert (= bs!3964 d!25531))

(declare-fun m!104953 () Bool)

(assert (=> bs!3964 m!104953))

(assert (=> bs!3964 m!104953))

(declare-fun m!104955 () Bool)

(assert (=> bs!3964 m!104955))

(assert (=> b!96042 d!25531))

(declare-fun d!25533 () Bool)

(assert (=> d!25533 (= (apply!91 (+!137 lt!47851 (tuple2!2337 lt!47845 (minValue!2342 newMap!16))) lt!47837) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47851 (tuple2!2337 lt!47845 (minValue!2342 newMap!16)))) lt!47837)))))

(declare-fun bs!3965 () Bool)

(assert (= bs!3965 d!25533))

(declare-fun m!104957 () Bool)

(assert (=> bs!3965 m!104957))

(assert (=> bs!3965 m!104957))

(declare-fun m!104959 () Bool)

(assert (=> bs!3965 m!104959))

(assert (=> b!96042 d!25533))

(declare-fun d!25535 () Bool)

(declare-fun e!62961 () Bool)

(assert (=> d!25535 e!62961))

(declare-fun res!48743 () Bool)

(assert (=> d!25535 (=> (not res!48743) (not e!62961))))

(declare-fun lt!48258 () ListLongMap!1541)

(assert (=> d!25535 (= res!48743 (contains!800 lt!48258 (_1!1178 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48257 () List!1603)

(assert (=> d!25535 (= lt!48258 (ListLongMap!1542 lt!48257))))

(declare-fun lt!48256 () Unit!2887)

(declare-fun lt!48259 () Unit!2887)

(assert (=> d!25535 (= lt!48256 lt!48259)))

(assert (=> d!25535 (= (getValueByKey!148 lt!48257 (_1!1178 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25535 (= lt!48259 (lemmaContainsTupThenGetReturnValue!66 lt!48257 (_1!1178 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25535 (= lt!48257 (insertStrictlySorted!68 (toList!786 lt!47833) (_1!1178 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25535 (= (+!137 lt!47833 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16))) lt!48258)))

(declare-fun b!96550 () Bool)

(declare-fun res!48744 () Bool)

(assert (=> b!96550 (=> (not res!48744) (not e!62961))))

(assert (=> b!96550 (= res!48744 (= (getValueByKey!148 (toList!786 lt!48258) (_1!1178 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16))))))))

(declare-fun b!96551 () Bool)

(assert (=> b!96551 (= e!62961 (contains!802 (toList!786 lt!48258) (tuple2!2337 lt!47844 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25535 res!48743) b!96550))

(assert (= (and b!96550 res!48744) b!96551))

(declare-fun m!104961 () Bool)

(assert (=> d!25535 m!104961))

(declare-fun m!104963 () Bool)

(assert (=> d!25535 m!104963))

(declare-fun m!104965 () Bool)

(assert (=> d!25535 m!104965))

(declare-fun m!104967 () Bool)

(assert (=> d!25535 m!104967))

(declare-fun m!104969 () Bool)

(assert (=> b!96550 m!104969))

(declare-fun m!104971 () Bool)

(assert (=> b!96551 m!104971))

(assert (=> b!96042 d!25535))

(declare-fun d!25537 () Bool)

(declare-fun e!62963 () Bool)

(assert (=> d!25537 e!62963))

(declare-fun res!48745 () Bool)

(assert (=> d!25537 (=> res!48745 e!62963)))

(declare-fun lt!48262 () Bool)

(assert (=> d!25537 (= res!48745 (not lt!48262))))

(declare-fun lt!48260 () Bool)

(assert (=> d!25537 (= lt!48262 lt!48260)))

(declare-fun lt!48261 () Unit!2887)

(declare-fun e!62962 () Unit!2887)

(assert (=> d!25537 (= lt!48261 e!62962)))

(declare-fun c!16287 () Bool)

(assert (=> d!25537 (= c!16287 lt!48260)))

(assert (=> d!25537 (= lt!48260 (containsKey!152 (toList!786 (+!137 lt!47840 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16)))) lt!47839))))

(assert (=> d!25537 (= (contains!800 (+!137 lt!47840 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16))) lt!47839) lt!48262)))

(declare-fun b!96552 () Bool)

(declare-fun lt!48263 () Unit!2887)

(assert (=> b!96552 (= e!62962 lt!48263)))

(assert (=> b!96552 (= lt!48263 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 (+!137 lt!47840 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16)))) lt!47839))))

(assert (=> b!96552 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47840 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16)))) lt!47839))))

(declare-fun b!96553 () Bool)

(declare-fun Unit!2918 () Unit!2887)

(assert (=> b!96553 (= e!62962 Unit!2918)))

(declare-fun b!96554 () Bool)

(assert (=> b!96554 (= e!62963 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47840 (tuple2!2337 lt!47850 (zeroValue!2342 newMap!16)))) lt!47839)))))

(assert (= (and d!25537 c!16287) b!96552))

(assert (= (and d!25537 (not c!16287)) b!96553))

(assert (= (and d!25537 (not res!48745)) b!96554))

(declare-fun m!104973 () Bool)

(assert (=> d!25537 m!104973))

(declare-fun m!104975 () Bool)

(assert (=> b!96552 m!104975))

(declare-fun m!104977 () Bool)

(assert (=> b!96552 m!104977))

(assert (=> b!96552 m!104977))

(declare-fun m!104979 () Bool)

(assert (=> b!96552 m!104979))

(assert (=> b!96554 m!104977))

(assert (=> b!96554 m!104977))

(assert (=> b!96554 m!104979))

(assert (=> b!96042 d!25537))

(declare-fun d!25539 () Bool)

(assert (=> d!25539 (= (apply!91 (+!137 lt!47851 (tuple2!2337 lt!47845 (minValue!2342 newMap!16))) lt!47837) (apply!91 lt!47851 lt!47837))))

(declare-fun lt!48264 () Unit!2887)

(assert (=> d!25539 (= lt!48264 (choose!588 lt!47851 lt!47845 (minValue!2342 newMap!16) lt!47837))))

(declare-fun e!62964 () Bool)

(assert (=> d!25539 e!62964))

(declare-fun res!48746 () Bool)

(assert (=> d!25539 (=> (not res!48746) (not e!62964))))

(assert (=> d!25539 (= res!48746 (contains!800 lt!47851 lt!47837))))

(assert (=> d!25539 (= (addApplyDifferent!67 lt!47851 lt!47845 (minValue!2342 newMap!16) lt!47837) lt!48264)))

(declare-fun b!96555 () Bool)

(assert (=> b!96555 (= e!62964 (not (= lt!47837 lt!47845)))))

(assert (= (and d!25539 res!48746) b!96555))

(declare-fun m!104981 () Bool)

(assert (=> d!25539 m!104981))

(assert (=> d!25539 m!104063))

(declare-fun m!104983 () Bool)

(assert (=> d!25539 m!104983))

(assert (=> d!25539 m!104067))

(assert (=> d!25539 m!104069))

(assert (=> d!25539 m!104067))

(assert (=> b!96042 d!25539))

(declare-fun b!96556 () Bool)

(assert (=> b!96556 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> b!96556 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_values!2440 newMap!16))))))

(declare-fun e!62970 () Bool)

(declare-fun lt!48268 () ListLongMap!1541)

(assert (=> b!96556 (= e!62970 (= (apply!91 lt!48268 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!9797 () Bool)

(declare-fun call!9800 () ListLongMap!1541)

(assert (=> bm!9797 (= call!9800 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16)))))

(declare-fun b!96557 () Bool)

(declare-fun e!62965 () Bool)

(declare-fun e!62968 () Bool)

(assert (=> b!96557 (= e!62965 e!62968)))

(declare-fun c!16289 () Bool)

(declare-fun e!62969 () Bool)

(assert (=> b!96557 (= c!16289 e!62969)))

(declare-fun res!48747 () Bool)

(assert (=> b!96557 (=> (not res!48747) (not e!62969))))

(assert (=> b!96557 (= res!48747 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96558 () Bool)

(declare-fun e!62971 () ListLongMap!1541)

(assert (=> b!96558 (= e!62971 (ListLongMap!1542 Nil!1600))))

(declare-fun b!96559 () Bool)

(declare-fun e!62966 () Bool)

(assert (=> b!96559 (= e!62966 (isEmpty!358 lt!48268))))

(declare-fun b!96560 () Bool)

(declare-fun res!48748 () Bool)

(assert (=> b!96560 (=> (not res!48748) (not e!62965))))

(assert (=> b!96560 (= res!48748 (not (contains!800 lt!48268 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96561 () Bool)

(assert (=> b!96561 (= e!62966 (= lt!48268 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16))))))

(declare-fun b!96562 () Bool)

(declare-fun e!62967 () ListLongMap!1541)

(assert (=> b!96562 (= e!62971 e!62967)))

(declare-fun c!16288 () Bool)

(assert (=> b!96562 (= c!16288 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96564 () Bool)

(assert (=> b!96564 (= e!62969 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96564 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!96565 () Bool)

(declare-fun lt!48267 () Unit!2887)

(declare-fun lt!48266 () Unit!2887)

(assert (=> b!96565 (= lt!48267 lt!48266)))

(declare-fun lt!48269 () ListLongMap!1541)

(declare-fun lt!48271 () (_ BitVec 64))

(declare-fun lt!48265 () (_ BitVec 64))

(declare-fun lt!48270 () V!3139)

(assert (=> b!96565 (not (contains!800 (+!137 lt!48269 (tuple2!2337 lt!48271 lt!48270)) lt!48265))))

(assert (=> b!96565 (= lt!48266 (addStillNotContains!41 lt!48269 lt!48271 lt!48270 lt!48265))))

(assert (=> b!96565 (= lt!48265 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!96565 (= lt!48270 (get!1286 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!96565 (= lt!48271 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96565 (= lt!48269 call!9800)))

(assert (=> b!96565 (= e!62967 (+!137 call!9800 (tuple2!2337 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (get!1286 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!96566 () Bool)

(assert (=> b!96566 (= e!62968 e!62966)))

(declare-fun c!16291 () Bool)

(assert (=> b!96566 (= c!16291 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96567 () Bool)

(assert (=> b!96567 (= e!62967 call!9800)))

(declare-fun b!96563 () Bool)

(assert (=> b!96563 (= e!62968 e!62970)))

(assert (=> b!96563 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun res!48750 () Bool)

(assert (=> b!96563 (= res!48750 (contains!800 lt!48268 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96563 (=> (not res!48750) (not e!62970))))

(declare-fun d!25541 () Bool)

(assert (=> d!25541 e!62965))

(declare-fun res!48749 () Bool)

(assert (=> d!25541 (=> (not res!48749) (not e!62965))))

(assert (=> d!25541 (= res!48749 (not (contains!800 lt!48268 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25541 (= lt!48268 e!62971)))

(declare-fun c!16290 () Bool)

(assert (=> d!25541 (= c!16290 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25541 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25541 (= (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48268)))

(assert (= (and d!25541 c!16290) b!96558))

(assert (= (and d!25541 (not c!16290)) b!96562))

(assert (= (and b!96562 c!16288) b!96565))

(assert (= (and b!96562 (not c!16288)) b!96567))

(assert (= (or b!96565 b!96567) bm!9797))

(assert (= (and d!25541 res!48749) b!96560))

(assert (= (and b!96560 res!48748) b!96557))

(assert (= (and b!96557 res!48747) b!96564))

(assert (= (and b!96557 c!16289) b!96563))

(assert (= (and b!96557 (not c!16289)) b!96566))

(assert (= (and b!96563 res!48750) b!96556))

(assert (= (and b!96566 c!16291) b!96561))

(assert (= (and b!96566 (not c!16291)) b!96559))

(declare-fun b_lambda!4285 () Bool)

(assert (=> (not b_lambda!4285) (not b!96556)))

(assert (=> b!96556 t!5535))

(declare-fun b_and!5901 () Bool)

(assert (= b_and!5897 (and (=> t!5535 result!3233) b_and!5901)))

(assert (=> b!96556 t!5537))

(declare-fun b_and!5903 () Bool)

(assert (= b_and!5899 (and (=> t!5537 result!3235) b_and!5903)))

(declare-fun b_lambda!4287 () Bool)

(assert (=> (not b_lambda!4287) (not b!96565)))

(assert (=> b!96565 t!5535))

(declare-fun b_and!5905 () Bool)

(assert (= b_and!5901 (and (=> t!5535 result!3233) b_and!5905)))

(assert (=> b!96565 t!5537))

(declare-fun b_and!5907 () Bool)

(assert (= b_and!5903 (and (=> t!5537 result!3235) b_and!5907)))

(assert (=> b!96563 m!104003))

(assert (=> b!96563 m!104003))

(declare-fun m!104985 () Bool)

(assert (=> b!96563 m!104985))

(declare-fun m!104987 () Bool)

(assert (=> bm!9797 m!104987))

(assert (=> b!96556 m!104003))

(assert (=> b!96556 m!104039))

(assert (=> b!96556 m!104043))

(assert (=> b!96556 m!104039))

(assert (=> b!96556 m!104043))

(assert (=> b!96556 m!104045))

(assert (=> b!96556 m!104003))

(declare-fun m!104989 () Bool)

(assert (=> b!96556 m!104989))

(declare-fun m!104991 () Bool)

(assert (=> d!25541 m!104991))

(assert (=> d!25541 m!103977))

(declare-fun m!104993 () Bool)

(assert (=> b!96559 m!104993))

(declare-fun m!104995 () Bool)

(assert (=> b!96560 m!104995))

(assert (=> b!96562 m!104003))

(assert (=> b!96562 m!104003))

(assert (=> b!96562 m!104051))

(assert (=> b!96561 m!104987))

(assert (=> b!96565 m!104003))

(declare-fun m!104997 () Bool)

(assert (=> b!96565 m!104997))

(declare-fun m!104999 () Bool)

(assert (=> b!96565 m!104999))

(declare-fun m!105001 () Bool)

(assert (=> b!96565 m!105001))

(assert (=> b!96565 m!104999))

(assert (=> b!96565 m!104039))

(assert (=> b!96565 m!104043))

(assert (=> b!96565 m!104039))

(assert (=> b!96565 m!104043))

(assert (=> b!96565 m!104045))

(declare-fun m!105003 () Bool)

(assert (=> b!96565 m!105003))

(assert (=> b!96564 m!104003))

(assert (=> b!96564 m!104003))

(assert (=> b!96564 m!104051))

(assert (=> b!96042 d!25541))

(declare-fun d!25543 () Bool)

(assert (not d!25543))

(assert (=> b!96257 d!25543))

(declare-fun d!25545 () Bool)

(assert (=> d!25545 (= (apply!91 lt!47952 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1289 (getValueByKey!148 (toList!786 lt!47952) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3966 () Bool)

(assert (= bs!3966 d!25545))

(declare-fun m!105005 () Bool)

(assert (=> bs!3966 m!105005))

(assert (=> bs!3966 m!105005))

(declare-fun m!105007 () Bool)

(assert (=> bs!3966 m!105007))

(assert (=> b!96191 d!25545))

(declare-fun d!25547 () Bool)

(declare-fun res!48751 () Bool)

(declare-fun e!62972 () Bool)

(assert (=> d!25547 (=> res!48751 e!62972)))

(assert (=> d!25547 (= res!48751 (and ((_ is Cons!1599) (toList!786 lt!47784)) (= (_1!1178 (h!2192 (toList!786 lt!47784))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25547 (= (containsKey!152 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000) e!62972)))

(declare-fun b!96568 () Bool)

(declare-fun e!62973 () Bool)

(assert (=> b!96568 (= e!62972 e!62973)))

(declare-fun res!48752 () Bool)

(assert (=> b!96568 (=> (not res!48752) (not e!62973))))

(assert (=> b!96568 (= res!48752 (and (or (not ((_ is Cons!1599) (toList!786 lt!47784))) (bvsle (_1!1178 (h!2192 (toList!786 lt!47784))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1599) (toList!786 lt!47784)) (bvslt (_1!1178 (h!2192 (toList!786 lt!47784))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96569 () Bool)

(assert (=> b!96569 (= e!62973 (containsKey!152 (t!5529 (toList!786 lt!47784)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!25547 (not res!48751)) b!96568))

(assert (= (and b!96568 res!48752) b!96569))

(declare-fun m!105009 () Bool)

(assert (=> b!96569 m!105009))

(assert (=> d!25407 d!25547))

(assert (=> b!96207 d!25435))

(assert (=> d!25309 d!25451))

(declare-fun d!25549 () Bool)

(assert (=> d!25549 (= (apply!91 lt!47821 lt!47816) (get!1289 (getValueByKey!148 (toList!786 lt!47821) lt!47816)))))

(declare-fun bs!3967 () Bool)

(assert (= bs!3967 d!25549))

(declare-fun m!105011 () Bool)

(assert (=> bs!3967 m!105011))

(assert (=> bs!3967 m!105011))

(declare-fun m!105013 () Bool)

(assert (=> bs!3967 m!105013))

(assert (=> b!96021 d!25549))

(declare-fun d!25551 () Bool)

(assert (=> d!25551 (= (apply!91 (+!137 lt!47829 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47815) (apply!91 lt!47829 lt!47815))))

(declare-fun lt!48272 () Unit!2887)

(assert (=> d!25551 (= lt!48272 (choose!588 lt!47829 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47815))))

(declare-fun e!62974 () Bool)

(assert (=> d!25551 e!62974))

(declare-fun res!48753 () Bool)

(assert (=> d!25551 (=> (not res!48753) (not e!62974))))

(assert (=> d!25551 (= res!48753 (contains!800 lt!47829 lt!47815))))

(assert (=> d!25551 (= (addApplyDifferent!67 lt!47829 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47815) lt!48272)))

(declare-fun b!96570 () Bool)

(assert (=> b!96570 (= e!62974 (not (= lt!47815 lt!47823)))))

(assert (= (and d!25551 res!48753) b!96570))

(declare-fun m!105015 () Bool)

(assert (=> d!25551 m!105015))

(assert (=> d!25551 m!104007))

(declare-fun m!105017 () Bool)

(assert (=> d!25551 m!105017))

(assert (=> d!25551 m!104011))

(assert (=> d!25551 m!104013))

(assert (=> d!25551 m!104011))

(assert (=> b!96021 d!25551))

(declare-fun d!25553 () Bool)

(assert (=> d!25553 (= (apply!91 (+!137 lt!47811 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16))) lt!47830) (apply!91 lt!47811 lt!47830))))

(declare-fun lt!48273 () Unit!2887)

(assert (=> d!25553 (= lt!48273 (choose!588 lt!47811 lt!47822 (zeroValue!2342 newMap!16) lt!47830))))

(declare-fun e!62975 () Bool)

(assert (=> d!25553 e!62975))

(declare-fun res!48754 () Bool)

(assert (=> d!25553 (=> (not res!48754) (not e!62975))))

(assert (=> d!25553 (= res!48754 (contains!800 lt!47811 lt!47830))))

(assert (=> d!25553 (= (addApplyDifferent!67 lt!47811 lt!47822 (zeroValue!2342 newMap!16) lt!47830) lt!48273)))

(declare-fun b!96571 () Bool)

(assert (=> b!96571 (= e!62975 (not (= lt!47830 lt!47822)))))

(assert (= (and d!25553 res!48754) b!96571))

(declare-fun m!105019 () Bool)

(assert (=> d!25553 m!105019))

(assert (=> d!25553 m!104037))

(declare-fun m!105021 () Bool)

(assert (=> d!25553 m!105021))

(assert (=> d!25553 m!104023))

(assert (=> d!25553 m!104025))

(assert (=> d!25553 m!104023))

(assert (=> b!96021 d!25553))

(declare-fun d!25555 () Bool)

(declare-fun e!62976 () Bool)

(assert (=> d!25555 e!62976))

(declare-fun res!48755 () Bool)

(assert (=> d!25555 (=> (not res!48755) (not e!62976))))

(declare-fun lt!48276 () ListLongMap!1541)

(assert (=> d!25555 (= res!48755 (contains!800 lt!48276 (_1!1178 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48275 () List!1603)

(assert (=> d!25555 (= lt!48276 (ListLongMap!1542 lt!48275))))

(declare-fun lt!48274 () Unit!2887)

(declare-fun lt!48277 () Unit!2887)

(assert (=> d!25555 (= lt!48274 lt!48277)))

(assert (=> d!25555 (= (getValueByKey!148 lt!48275 (_1!1178 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25555 (= lt!48277 (lemmaContainsTupThenGetReturnValue!66 lt!48275 (_1!1178 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25555 (= lt!48275 (insertStrictlySorted!68 (toList!786 lt!47811) (_1!1178 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25555 (= (+!137 lt!47811 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16))) lt!48276)))

(declare-fun b!96572 () Bool)

(declare-fun res!48756 () Bool)

(assert (=> b!96572 (=> (not res!48756) (not e!62976))))

(assert (=> b!96572 (= res!48756 (= (getValueByKey!148 (toList!786 lt!48276) (_1!1178 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16))))))))

(declare-fun b!96573 () Bool)

(assert (=> b!96573 (= e!62976 (contains!802 (toList!786 lt!48276) (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25555 res!48755) b!96572))

(assert (= (and b!96572 res!48756) b!96573))

(declare-fun m!105023 () Bool)

(assert (=> d!25555 m!105023))

(declare-fun m!105025 () Bool)

(assert (=> d!25555 m!105025))

(declare-fun m!105027 () Bool)

(assert (=> d!25555 m!105027))

(declare-fun m!105029 () Bool)

(assert (=> d!25555 m!105029))

(declare-fun m!105031 () Bool)

(assert (=> b!96572 m!105031))

(declare-fun m!105033 () Bool)

(assert (=> b!96573 m!105033))

(assert (=> b!96021 d!25555))

(declare-fun d!25557 () Bool)

(assert (=> d!25557 (contains!800 (+!137 lt!47818 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16))) lt!47817)))

(declare-fun lt!48278 () Unit!2887)

(assert (=> d!25557 (= lt!48278 (choose!589 lt!47818 lt!47828 (zeroValue!2342 newMap!16) lt!47817))))

(assert (=> d!25557 (contains!800 lt!47818 lt!47817)))

(assert (=> d!25557 (= (addStillContains!67 lt!47818 lt!47828 (zeroValue!2342 newMap!16) lt!47817) lt!48278)))

(declare-fun bs!3968 () Bool)

(assert (= bs!3968 d!25557))

(assert (=> bs!3968 m!104021))

(assert (=> bs!3968 m!104021))

(assert (=> bs!3968 m!104031))

(declare-fun m!105035 () Bool)

(assert (=> bs!3968 m!105035))

(declare-fun m!105037 () Bool)

(assert (=> bs!3968 m!105037))

(assert (=> b!96021 d!25557))

(declare-fun d!25559 () Bool)

(declare-fun e!62977 () Bool)

(assert (=> d!25559 e!62977))

(declare-fun res!48757 () Bool)

(assert (=> d!25559 (=> (not res!48757) (not e!62977))))

(declare-fun lt!48281 () ListLongMap!1541)

(assert (=> d!25559 (= res!48757 (contains!800 lt!48281 (_1!1178 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(declare-fun lt!48280 () List!1603)

(assert (=> d!25559 (= lt!48281 (ListLongMap!1542 lt!48280))))

(declare-fun lt!48279 () Unit!2887)

(declare-fun lt!48282 () Unit!2887)

(assert (=> d!25559 (= lt!48279 lt!48282)))

(assert (=> d!25559 (= (getValueByKey!148 lt!48280 (_1!1178 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25559 (= lt!48282 (lemmaContainsTupThenGetReturnValue!66 lt!48280 (_1!1178 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1178 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25559 (= lt!48280 (insertStrictlySorted!68 (toList!786 lt!47821) (_1!1178 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1178 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25559 (= (+!137 lt!47821 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!48281)))

(declare-fun b!96574 () Bool)

(declare-fun res!48758 () Bool)

(assert (=> b!96574 (=> (not res!48758) (not e!62977))))

(assert (=> b!96574 (= res!48758 (= (getValueByKey!148 (toList!786 lt!48281) (_1!1178 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(declare-fun b!96575 () Bool)

(assert (=> b!96575 (= e!62977 (contains!802 (toList!786 lt!48281) (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))

(assert (= (and d!25559 res!48757) b!96574))

(assert (= (and b!96574 res!48758) b!96575))

(declare-fun m!105039 () Bool)

(assert (=> d!25559 m!105039))

(declare-fun m!105041 () Bool)

(assert (=> d!25559 m!105041))

(declare-fun m!105043 () Bool)

(assert (=> d!25559 m!105043))

(declare-fun m!105045 () Bool)

(assert (=> d!25559 m!105045))

(declare-fun m!105047 () Bool)

(assert (=> b!96574 m!105047))

(declare-fun m!105049 () Bool)

(assert (=> b!96575 m!105049))

(assert (=> b!96021 d!25559))

(declare-fun d!25561 () Bool)

(assert (=> d!25561 (= (apply!91 lt!47811 lt!47830) (get!1289 (getValueByKey!148 (toList!786 lt!47811) lt!47830)))))

(declare-fun bs!3969 () Bool)

(assert (= bs!3969 d!25561))

(declare-fun m!105051 () Bool)

(assert (=> bs!3969 m!105051))

(assert (=> bs!3969 m!105051))

(declare-fun m!105053 () Bool)

(assert (=> bs!3969 m!105053))

(assert (=> b!96021 d!25561))

(declare-fun d!25563 () Bool)

(assert (=> d!25563 (= (apply!91 (+!137 lt!47821 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47816) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47821 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) lt!47816)))))

(declare-fun bs!3970 () Bool)

(assert (= bs!3970 d!25563))

(declare-fun m!105055 () Bool)

(assert (=> bs!3970 m!105055))

(assert (=> bs!3970 m!105055))

(declare-fun m!105057 () Bool)

(assert (=> bs!3970 m!105057))

(assert (=> b!96021 d!25563))

(declare-fun d!25565 () Bool)

(assert (=> d!25565 (= (apply!91 (+!137 lt!47821 (tuple2!2337 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47816) (apply!91 lt!47821 lt!47816))))

(declare-fun lt!48283 () Unit!2887)

(assert (=> d!25565 (= lt!48283 (choose!588 lt!47821 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47816))))

(declare-fun e!62978 () Bool)

(assert (=> d!25565 e!62978))

(declare-fun res!48759 () Bool)

(assert (=> d!25565 (=> (not res!48759) (not e!62978))))

(assert (=> d!25565 (= res!48759 (contains!800 lt!47821 lt!47816))))

(assert (=> d!25565 (= (addApplyDifferent!67 lt!47821 lt!47825 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47816) lt!48283)))

(declare-fun b!96576 () Bool)

(assert (=> b!96576 (= e!62978 (not (= lt!47816 lt!47825)))))

(assert (= (and d!25565 res!48759) b!96576))

(declare-fun m!105059 () Bool)

(assert (=> d!25565 m!105059))

(assert (=> d!25565 m!104015))

(declare-fun m!105061 () Bool)

(assert (=> d!25565 m!105061))

(assert (=> d!25565 m!104027))

(assert (=> d!25565 m!104035))

(assert (=> d!25565 m!104027))

(assert (=> b!96021 d!25565))

(declare-fun d!25567 () Bool)

(assert (=> d!25567 (= (apply!91 (+!137 lt!47811 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16))) lt!47830) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47811 (tuple2!2337 lt!47822 (zeroValue!2342 newMap!16)))) lt!47830)))))

(declare-fun bs!3971 () Bool)

(assert (= bs!3971 d!25567))

(declare-fun m!105063 () Bool)

(assert (=> bs!3971 m!105063))

(assert (=> bs!3971 m!105063))

(declare-fun m!105065 () Bool)

(assert (=> bs!3971 m!105065))

(assert (=> b!96021 d!25567))

(declare-fun d!25569 () Bool)

(declare-fun e!62979 () Bool)

(assert (=> d!25569 e!62979))

(declare-fun res!48760 () Bool)

(assert (=> d!25569 (=> (not res!48760) (not e!62979))))

(declare-fun lt!48286 () ListLongMap!1541)

(assert (=> d!25569 (= res!48760 (contains!800 lt!48286 (_1!1178 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(declare-fun lt!48285 () List!1603)

(assert (=> d!25569 (= lt!48286 (ListLongMap!1542 lt!48285))))

(declare-fun lt!48284 () Unit!2887)

(declare-fun lt!48287 () Unit!2887)

(assert (=> d!25569 (= lt!48284 lt!48287)))

(assert (=> d!25569 (= (getValueByKey!148 lt!48285 (_1!1178 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25569 (= lt!48287 (lemmaContainsTupThenGetReturnValue!66 lt!48285 (_1!1178 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1178 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25569 (= lt!48285 (insertStrictlySorted!68 (toList!786 lt!47829) (_1!1178 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1178 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25569 (= (+!137 lt!47829 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!48286)))

(declare-fun b!96577 () Bool)

(declare-fun res!48761 () Bool)

(assert (=> b!96577 (=> (not res!48761) (not e!62979))))

(assert (=> b!96577 (= res!48761 (= (getValueByKey!148 (toList!786 lt!48286) (_1!1178 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(declare-fun b!96578 () Bool)

(assert (=> b!96578 (= e!62979 (contains!802 (toList!786 lt!48286) (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))

(assert (= (and d!25569 res!48760) b!96577))

(assert (= (and b!96577 res!48761) b!96578))

(declare-fun m!105067 () Bool)

(assert (=> d!25569 m!105067))

(declare-fun m!105069 () Bool)

(assert (=> d!25569 m!105069))

(declare-fun m!105071 () Bool)

(assert (=> d!25569 m!105071))

(declare-fun m!105073 () Bool)

(assert (=> d!25569 m!105073))

(declare-fun m!105075 () Bool)

(assert (=> b!96577 m!105075))

(declare-fun m!105077 () Bool)

(assert (=> b!96578 m!105077))

(assert (=> b!96021 d!25569))

(declare-fun d!25571 () Bool)

(declare-fun e!62981 () Bool)

(assert (=> d!25571 e!62981))

(declare-fun res!48762 () Bool)

(assert (=> d!25571 (=> res!48762 e!62981)))

(declare-fun lt!48290 () Bool)

(assert (=> d!25571 (= res!48762 (not lt!48290))))

(declare-fun lt!48288 () Bool)

(assert (=> d!25571 (= lt!48290 lt!48288)))

(declare-fun lt!48289 () Unit!2887)

(declare-fun e!62980 () Unit!2887)

(assert (=> d!25571 (= lt!48289 e!62980)))

(declare-fun c!16292 () Bool)

(assert (=> d!25571 (= c!16292 lt!48288)))

(assert (=> d!25571 (= lt!48288 (containsKey!152 (toList!786 (+!137 lt!47818 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16)))) lt!47817))))

(assert (=> d!25571 (= (contains!800 (+!137 lt!47818 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16))) lt!47817) lt!48290)))

(declare-fun b!96579 () Bool)

(declare-fun lt!48291 () Unit!2887)

(assert (=> b!96579 (= e!62980 lt!48291)))

(assert (=> b!96579 (= lt!48291 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 (+!137 lt!47818 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16)))) lt!47817))))

(assert (=> b!96579 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47818 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16)))) lt!47817))))

(declare-fun b!96580 () Bool)

(declare-fun Unit!2919 () Unit!2887)

(assert (=> b!96580 (= e!62980 Unit!2919)))

(declare-fun b!96581 () Bool)

(assert (=> b!96581 (= e!62981 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47818 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16)))) lt!47817)))))

(assert (= (and d!25571 c!16292) b!96579))

(assert (= (and d!25571 (not c!16292)) b!96580))

(assert (= (and d!25571 (not res!48762)) b!96581))

(declare-fun m!105079 () Bool)

(assert (=> d!25571 m!105079))

(declare-fun m!105081 () Bool)

(assert (=> b!96579 m!105081))

(declare-fun m!105083 () Bool)

(assert (=> b!96579 m!105083))

(assert (=> b!96579 m!105083))

(declare-fun m!105085 () Bool)

(assert (=> b!96579 m!105085))

(assert (=> b!96581 m!105083))

(assert (=> b!96581 m!105083))

(assert (=> b!96581 m!105085))

(assert (=> b!96021 d!25571))

(declare-fun b!96582 () Bool)

(assert (=> b!96582 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> b!96582 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_values!2440 newMap!16))))))

(declare-fun e!62987 () Bool)

(declare-fun lt!48295 () ListLongMap!1541)

(assert (=> b!96582 (= e!62987 (= (apply!91 lt!48295 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!9798 () Bool)

(declare-fun call!9801 () ListLongMap!1541)

(assert (=> bm!9798 (= call!9801 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16)))))

(declare-fun b!96583 () Bool)

(declare-fun e!62982 () Bool)

(declare-fun e!62985 () Bool)

(assert (=> b!96583 (= e!62982 e!62985)))

(declare-fun c!16294 () Bool)

(declare-fun e!62986 () Bool)

(assert (=> b!96583 (= c!16294 e!62986)))

(declare-fun res!48763 () Bool)

(assert (=> b!96583 (=> (not res!48763) (not e!62986))))

(assert (=> b!96583 (= res!48763 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96584 () Bool)

(declare-fun e!62988 () ListLongMap!1541)

(assert (=> b!96584 (= e!62988 (ListLongMap!1542 Nil!1600))))

(declare-fun b!96585 () Bool)

(declare-fun e!62983 () Bool)

(assert (=> b!96585 (= e!62983 (isEmpty!358 lt!48295))))

(declare-fun b!96586 () Bool)

(declare-fun res!48764 () Bool)

(assert (=> b!96586 (=> (not res!48764) (not e!62982))))

(assert (=> b!96586 (= res!48764 (not (contains!800 lt!48295 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96587 () Bool)

(assert (=> b!96587 (= e!62983 (= lt!48295 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16))))))

(declare-fun b!96588 () Bool)

(declare-fun e!62984 () ListLongMap!1541)

(assert (=> b!96588 (= e!62988 e!62984)))

(declare-fun c!16293 () Bool)

(assert (=> b!96588 (= c!16293 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96590 () Bool)

(assert (=> b!96590 (= e!62986 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96590 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!96591 () Bool)

(declare-fun lt!48294 () Unit!2887)

(declare-fun lt!48293 () Unit!2887)

(assert (=> b!96591 (= lt!48294 lt!48293)))

(declare-fun lt!48292 () (_ BitVec 64))

(declare-fun lt!48296 () ListLongMap!1541)

(declare-fun lt!48297 () V!3139)

(declare-fun lt!48298 () (_ BitVec 64))

(assert (=> b!96591 (not (contains!800 (+!137 lt!48296 (tuple2!2337 lt!48298 lt!48297)) lt!48292))))

(assert (=> b!96591 (= lt!48293 (addStillNotContains!41 lt!48296 lt!48298 lt!48297 lt!48292))))

(assert (=> b!96591 (= lt!48292 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!96591 (= lt!48297 (get!1286 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!96591 (= lt!48298 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96591 (= lt!48296 call!9801)))

(assert (=> b!96591 (= e!62984 (+!137 call!9801 (tuple2!2337 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (get!1286 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!96592 () Bool)

(assert (=> b!96592 (= e!62985 e!62983)))

(declare-fun c!16296 () Bool)

(assert (=> b!96592 (= c!16296 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96593 () Bool)

(assert (=> b!96593 (= e!62984 call!9801)))

(declare-fun b!96589 () Bool)

(assert (=> b!96589 (= e!62985 e!62987)))

(assert (=> b!96589 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun res!48766 () Bool)

(assert (=> b!96589 (= res!48766 (contains!800 lt!48295 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96589 (=> (not res!48766) (not e!62987))))

(declare-fun d!25573 () Bool)

(assert (=> d!25573 e!62982))

(declare-fun res!48765 () Bool)

(assert (=> d!25573 (=> (not res!48765) (not e!62982))))

(assert (=> d!25573 (= res!48765 (not (contains!800 lt!48295 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25573 (= lt!48295 e!62988)))

(declare-fun c!16295 () Bool)

(assert (=> d!25573 (= c!16295 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25573 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25573 (= (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite c!16115 (ite c!16114 (extraKeys!2282 newMap!16) lt!47696) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48295)))

(assert (= (and d!25573 c!16295) b!96584))

(assert (= (and d!25573 (not c!16295)) b!96588))

(assert (= (and b!96588 c!16293) b!96591))

(assert (= (and b!96588 (not c!16293)) b!96593))

(assert (= (or b!96591 b!96593) bm!9798))

(assert (= (and d!25573 res!48765) b!96586))

(assert (= (and b!96586 res!48764) b!96583))

(assert (= (and b!96583 res!48763) b!96590))

(assert (= (and b!96583 c!16294) b!96589))

(assert (= (and b!96583 (not c!16294)) b!96592))

(assert (= (and b!96589 res!48766) b!96582))

(assert (= (and b!96592 c!16296) b!96587))

(assert (= (and b!96592 (not c!16296)) b!96585))

(declare-fun b_lambda!4289 () Bool)

(assert (=> (not b_lambda!4289) (not b!96582)))

(assert (=> b!96582 t!5535))

(declare-fun b_and!5909 () Bool)

(assert (= b_and!5905 (and (=> t!5535 result!3233) b_and!5909)))

(assert (=> b!96582 t!5537))

(declare-fun b_and!5911 () Bool)

(assert (= b_and!5907 (and (=> t!5537 result!3235) b_and!5911)))

(declare-fun b_lambda!4291 () Bool)

(assert (=> (not b_lambda!4291) (not b!96591)))

(assert (=> b!96591 t!5535))

(declare-fun b_and!5913 () Bool)

(assert (= b_and!5909 (and (=> t!5535 result!3233) b_and!5913)))

(assert (=> b!96591 t!5537))

(declare-fun b_and!5915 () Bool)

(assert (= b_and!5911 (and (=> t!5537 result!3235) b_and!5915)))

(assert (=> b!96589 m!104003))

(assert (=> b!96589 m!104003))

(declare-fun m!105087 () Bool)

(assert (=> b!96589 m!105087))

(declare-fun m!105089 () Bool)

(assert (=> bm!9798 m!105089))

(assert (=> b!96582 m!104003))

(assert (=> b!96582 m!104039))

(assert (=> b!96582 m!104043))

(assert (=> b!96582 m!104039))

(assert (=> b!96582 m!104043))

(assert (=> b!96582 m!104045))

(assert (=> b!96582 m!104003))

(declare-fun m!105091 () Bool)

(assert (=> b!96582 m!105091))

(declare-fun m!105093 () Bool)

(assert (=> d!25573 m!105093))

(assert (=> d!25573 m!103977))

(declare-fun m!105095 () Bool)

(assert (=> b!96585 m!105095))

(declare-fun m!105097 () Bool)

(assert (=> b!96586 m!105097))

(assert (=> b!96588 m!104003))

(assert (=> b!96588 m!104003))

(assert (=> b!96588 m!104051))

(assert (=> b!96587 m!105089))

(assert (=> b!96591 m!104003))

(declare-fun m!105099 () Bool)

(assert (=> b!96591 m!105099))

(declare-fun m!105101 () Bool)

(assert (=> b!96591 m!105101))

(declare-fun m!105103 () Bool)

(assert (=> b!96591 m!105103))

(assert (=> b!96591 m!105101))

(assert (=> b!96591 m!104039))

(assert (=> b!96591 m!104043))

(assert (=> b!96591 m!104039))

(assert (=> b!96591 m!104043))

(assert (=> b!96591 m!104045))

(declare-fun m!105105 () Bool)

(assert (=> b!96591 m!105105))

(assert (=> b!96590 m!104003))

(assert (=> b!96590 m!104003))

(assert (=> b!96590 m!104051))

(assert (=> b!96021 d!25573))

(declare-fun d!25575 () Bool)

(assert (=> d!25575 (= (apply!91 lt!47829 lt!47815) (get!1289 (getValueByKey!148 (toList!786 lt!47829) lt!47815)))))

(declare-fun bs!3972 () Bool)

(assert (= bs!3972 d!25575))

(declare-fun m!105107 () Bool)

(assert (=> bs!3972 m!105107))

(assert (=> bs!3972 m!105107))

(declare-fun m!105109 () Bool)

(assert (=> bs!3972 m!105109))

(assert (=> b!96021 d!25575))

(declare-fun d!25577 () Bool)

(declare-fun e!62989 () Bool)

(assert (=> d!25577 e!62989))

(declare-fun res!48767 () Bool)

(assert (=> d!25577 (=> (not res!48767) (not e!62989))))

(declare-fun lt!48301 () ListLongMap!1541)

(assert (=> d!25577 (= res!48767 (contains!800 lt!48301 (_1!1178 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48300 () List!1603)

(assert (=> d!25577 (= lt!48301 (ListLongMap!1542 lt!48300))))

(declare-fun lt!48299 () Unit!2887)

(declare-fun lt!48302 () Unit!2887)

(assert (=> d!25577 (= lt!48299 lt!48302)))

(assert (=> d!25577 (= (getValueByKey!148 lt!48300 (_1!1178 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25577 (= lt!48302 (lemmaContainsTupThenGetReturnValue!66 lt!48300 (_1!1178 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25577 (= lt!48300 (insertStrictlySorted!68 (toList!786 lt!47818) (_1!1178 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25577 (= (+!137 lt!47818 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16))) lt!48301)))

(declare-fun b!96594 () Bool)

(declare-fun res!48768 () Bool)

(assert (=> b!96594 (=> (not res!48768) (not e!62989))))

(assert (=> b!96594 (= res!48768 (= (getValueByKey!148 (toList!786 lt!48301) (_1!1178 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16))))))))

(declare-fun b!96595 () Bool)

(assert (=> b!96595 (= e!62989 (contains!802 (toList!786 lt!48301) (tuple2!2337 lt!47828 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25577 res!48767) b!96594))

(assert (= (and b!96594 res!48768) b!96595))

(declare-fun m!105111 () Bool)

(assert (=> d!25577 m!105111))

(declare-fun m!105113 () Bool)

(assert (=> d!25577 m!105113))

(declare-fun m!105115 () Bool)

(assert (=> d!25577 m!105115))

(declare-fun m!105117 () Bool)

(assert (=> d!25577 m!105117))

(declare-fun m!105119 () Bool)

(assert (=> b!96594 m!105119))

(declare-fun m!105121 () Bool)

(assert (=> b!96595 m!105121))

(assert (=> b!96021 d!25577))

(declare-fun d!25579 () Bool)

(assert (=> d!25579 (= (apply!91 (+!137 lt!47829 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47815) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47829 (tuple2!2337 lt!47823 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) lt!47815)))))

(declare-fun bs!3973 () Bool)

(assert (= bs!3973 d!25579))

(declare-fun m!105123 () Bool)

(assert (=> bs!3973 m!105123))

(assert (=> bs!3973 m!105123))

(declare-fun m!105125 () Bool)

(assert (=> bs!3973 m!105125))

(assert (=> b!96021 d!25579))

(declare-fun d!25581 () Bool)

(declare-fun res!48769 () Bool)

(declare-fun e!62990 () Bool)

(assert (=> d!25581 (=> res!48769 e!62990)))

(assert (=> d!25581 (= res!48769 (and ((_ is Cons!1599) (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))) (= (_1!1178 (h!2192 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))) lt!47781)))))

(assert (=> d!25581 (= (containsKey!152 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781) e!62990)))

(declare-fun b!96596 () Bool)

(declare-fun e!62991 () Bool)

(assert (=> b!96596 (= e!62990 e!62991)))

(declare-fun res!48770 () Bool)

(assert (=> b!96596 (=> (not res!48770) (not e!62991))))

(assert (=> b!96596 (= res!48770 (and (or (not ((_ is Cons!1599) (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))) (bvsle (_1!1178 (h!2192 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))) lt!47781)) ((_ is Cons!1599) (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))) (bvslt (_1!1178 (h!2192 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))) lt!47781)))))

(declare-fun b!96597 () Bool)

(assert (=> b!96597 (= e!62991 (containsKey!152 (t!5529 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))) lt!47781))))

(assert (= (and d!25581 (not res!48769)) b!96596))

(assert (= (and b!96596 res!48770) b!96597))

(declare-fun m!105127 () Bool)

(assert (=> b!96597 m!105127))

(assert (=> d!25383 d!25581))

(declare-fun d!25583 () Bool)

(assert (=> d!25583 (isDefined!102 (getValueByKey!148 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(declare-fun lt!48303 () Unit!2887)

(assert (=> d!25583 (= lt!48303 (choose!587 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(declare-fun e!62992 () Bool)

(assert (=> d!25583 e!62992))

(declare-fun res!48771 () Bool)

(assert (=> d!25583 (=> (not res!48771) (not e!62992))))

(assert (=> d!25583 (= res!48771 (isStrictlySorted!298 (toList!786 call!9687)))))

(assert (=> d!25583 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))) lt!48303)))

(declare-fun b!96598 () Bool)

(assert (=> b!96598 (= e!62992 (containsKey!152 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(assert (= (and d!25583 res!48771) b!96598))

(assert (=> d!25583 m!103863))

(assert (=> d!25583 m!104113))

(assert (=> d!25583 m!104113))

(assert (=> d!25583 m!104115))

(assert (=> d!25583 m!103863))

(declare-fun m!105129 () Bool)

(assert (=> d!25583 m!105129))

(declare-fun m!105131 () Bool)

(assert (=> d!25583 m!105131))

(assert (=> b!96598 m!103863))

(assert (=> b!96598 m!104109))

(assert (=> b!96048 d!25583))

(declare-fun d!25585 () Bool)

(assert (=> d!25585 (= (isDefined!102 (getValueByKey!148 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707)))) (not (isEmpty!359 (getValueByKey!148 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))))

(declare-fun bs!3974 () Bool)

(assert (= bs!3974 d!25585))

(assert (=> bs!3974 m!104113))

(declare-fun m!105133 () Bool)

(assert (=> bs!3974 m!105133))

(assert (=> b!96048 d!25585))

(declare-fun b!96600 () Bool)

(declare-fun e!62993 () Option!154)

(declare-fun e!62994 () Option!154)

(assert (=> b!96600 (= e!62993 e!62994)))

(declare-fun c!16298 () Bool)

(assert (=> b!96600 (= c!16298 (and ((_ is Cons!1599) (toList!786 call!9687)) (not (= (_1!1178 (h!2192 (toList!786 call!9687))) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))))

(declare-fun d!25587 () Bool)

(declare-fun c!16297 () Bool)

(assert (=> d!25587 (= c!16297 (and ((_ is Cons!1599) (toList!786 call!9687)) (= (_1!1178 (h!2192 (toList!786 call!9687))) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707)))))))

(assert (=> d!25587 (= (getValueByKey!148 (toList!786 call!9687) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))) e!62993)))

(declare-fun b!96601 () Bool)

(assert (=> b!96601 (= e!62994 (getValueByKey!148 (t!5529 (toList!786 call!9687)) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(declare-fun b!96602 () Bool)

(assert (=> b!96602 (= e!62994 None!152)))

(declare-fun b!96599 () Bool)

(assert (=> b!96599 (= e!62993 (Some!153 (_2!1178 (h!2192 (toList!786 call!9687)))))))

(assert (= (and d!25587 c!16297) b!96599))

(assert (= (and d!25587 (not c!16297)) b!96600))

(assert (= (and b!96600 c!16298) b!96601))

(assert (= (and b!96600 (not c!16298)) b!96602))

(assert (=> b!96601 m!103863))

(declare-fun m!105135 () Bool)

(assert (=> b!96601 m!105135))

(assert (=> b!96048 d!25587))

(declare-fun d!25589 () Bool)

(assert (=> d!25589 (= (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47780)) (v!2783 (getValueByKey!148 (toList!786 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47780)))))

(assert (=> d!25385 d!25589))

(declare-fun b!96604 () Bool)

(declare-fun e!62995 () Option!154)

(declare-fun e!62996 () Option!154)

(assert (=> b!96604 (= e!62995 e!62996)))

(declare-fun c!16300 () Bool)

(assert (=> b!96604 (= c!16300 (and ((_ is Cons!1599) (toList!786 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) (not (= (_1!1178 (h!2192 (toList!786 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))) lt!47780))))))

(declare-fun d!25591 () Bool)

(declare-fun c!16299 () Bool)

(assert (=> d!25591 (= c!16299 (and ((_ is Cons!1599) (toList!786 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) (= (_1!1178 (h!2192 (toList!786 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))) lt!47780)))))

(assert (=> d!25591 (= (getValueByKey!148 (toList!786 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47780) e!62995)))

(declare-fun b!96605 () Bool)

(assert (=> b!96605 (= e!62996 (getValueByKey!148 (t!5529 (toList!786 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) lt!47780))))

(declare-fun b!96606 () Bool)

(assert (=> b!96606 (= e!62996 None!152)))

(declare-fun b!96603 () Bool)

(assert (=> b!96603 (= e!62995 (Some!153 (_2!1178 (h!2192 (toList!786 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))))

(assert (= (and d!25591 c!16299) b!96603))

(assert (= (and d!25591 (not c!16299)) b!96604))

(assert (= (and b!96604 c!16300) b!96605))

(assert (= (and b!96604 (not c!16300)) b!96606))

(declare-fun m!105137 () Bool)

(assert (=> b!96605 m!105137))

(assert (=> d!25385 d!25591))

(declare-fun d!25593 () Bool)

(assert (=> d!25593 (= (inRange!0 (index!3191 lt!48113) (mask!6542 newMap!16)) (and (bvsge (index!3191 lt!48113) #b00000000000000000000000000000000) (bvslt (index!3191 lt!48113) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!96330 d!25593))

(assert (=> d!25361 d!25269))

(declare-fun d!25595 () Bool)

(assert (=> d!25595 (= (get!1289 (getValueByKey!148 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2783 (getValueByKey!148 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25349 d!25595))

(declare-fun b!96608 () Bool)

(declare-fun e!62997 () Option!154)

(declare-fun e!62998 () Option!154)

(assert (=> b!96608 (= e!62997 e!62998)))

(declare-fun c!16302 () Bool)

(assert (=> b!96608 (= c!16302 (and ((_ is Cons!1599) (toList!786 lt!47784)) (not (= (_1!1178 (h!2192 (toList!786 lt!47784))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!25597 () Bool)

(declare-fun c!16301 () Bool)

(assert (=> d!25597 (= c!16301 (and ((_ is Cons!1599) (toList!786 lt!47784)) (= (_1!1178 (h!2192 (toList!786 lt!47784))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25597 (= (getValueByKey!148 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000) e!62997)))

(declare-fun b!96609 () Bool)

(assert (=> b!96609 (= e!62998 (getValueByKey!148 (t!5529 (toList!786 lt!47784)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96610 () Bool)

(assert (=> b!96610 (= e!62998 None!152)))

(declare-fun b!96607 () Bool)

(assert (=> b!96607 (= e!62997 (Some!153 (_2!1178 (h!2192 (toList!786 lt!47784)))))))

(assert (= (and d!25597 c!16301) b!96607))

(assert (= (and d!25597 (not c!16301)) b!96608))

(assert (= (and b!96608 c!16302) b!96609))

(assert (= (and b!96608 (not c!16302)) b!96610))

(declare-fun m!105139 () Bool)

(assert (=> b!96609 m!105139))

(assert (=> d!25349 d!25597))

(declare-fun d!25599 () Bool)

(declare-fun lt!48304 () Bool)

(assert (=> d!25599 (= lt!48304 (select (content!99 (toList!786 lt!48005)) (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun e!62999 () Bool)

(assert (=> d!25599 (= lt!48304 e!62999)))

(declare-fun res!48773 () Bool)

(assert (=> d!25599 (=> (not res!48773) (not e!62999))))

(assert (=> d!25599 (= res!48773 ((_ is Cons!1599) (toList!786 lt!48005)))))

(assert (=> d!25599 (= (contains!802 (toList!786 lt!48005) (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!48304)))

(declare-fun b!96611 () Bool)

(declare-fun e!63000 () Bool)

(assert (=> b!96611 (= e!62999 e!63000)))

(declare-fun res!48772 () Bool)

(assert (=> b!96611 (=> res!48772 e!63000)))

(assert (=> b!96611 (= res!48772 (= (h!2192 (toList!786 lt!48005)) (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!96612 () Bool)

(assert (=> b!96612 (= e!63000 (contains!802 (t!5529 (toList!786 lt!48005)) (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(assert (= (and d!25599 res!48773) b!96611))

(assert (= (and b!96611 (not res!48772)) b!96612))

(declare-fun m!105141 () Bool)

(assert (=> d!25599 m!105141))

(declare-fun m!105143 () Bool)

(assert (=> d!25599 m!105143))

(declare-fun m!105145 () Bool)

(assert (=> b!96612 m!105145))

(assert (=> b!96250 d!25599))

(declare-fun d!25601 () Bool)

(declare-fun lt!48305 () Bool)

(assert (=> d!25601 (= lt!48305 (select (content!99 (toList!786 lt!47937)) (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun e!63001 () Bool)

(assert (=> d!25601 (= lt!48305 e!63001)))

(declare-fun res!48775 () Bool)

(assert (=> d!25601 (=> (not res!48775) (not e!63001))))

(assert (=> d!25601 (= res!48775 ((_ is Cons!1599) (toList!786 lt!47937)))))

(assert (=> d!25601 (= (contains!802 (toList!786 lt!47937) (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48305)))

(declare-fun b!96613 () Bool)

(declare-fun e!63002 () Bool)

(assert (=> b!96613 (= e!63001 e!63002)))

(declare-fun res!48774 () Bool)

(assert (=> b!96613 (=> res!48774 e!63002)))

(assert (=> b!96613 (= res!48774 (= (h!2192 (toList!786 lt!47937)) (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96614 () Bool)

(assert (=> b!96614 (= e!63002 (contains!802 (t!5529 (toList!786 lt!47937)) (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (= (and d!25601 res!48775) b!96613))

(assert (= (and b!96613 (not res!48774)) b!96614))

(declare-fun m!105147 () Bool)

(assert (=> d!25601 m!105147))

(declare-fun m!105149 () Bool)

(assert (=> d!25601 m!105149))

(declare-fun m!105151 () Bool)

(assert (=> b!96614 m!105151))

(assert (=> b!96174 d!25601))

(declare-fun d!25603 () Bool)

(assert (=> d!25603 (isDefined!102 (getValueByKey!148 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun lt!48306 () Unit!2887)

(assert (=> d!25603 (= lt!48306 (choose!587 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun e!63003 () Bool)

(assert (=> d!25603 e!63003))

(declare-fun res!48776 () Bool)

(assert (=> d!25603 (=> (not res!48776) (not e!63003))))

(assert (=> d!25603 (= res!48776 (isStrictlySorted!298 (toList!786 e!62531)))))

(assert (=> d!25603 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) lt!48306)))

(declare-fun b!96615 () Bool)

(assert (=> b!96615 (= e!63003 (containsKey!152 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (= (and d!25603 res!48776) b!96615))

(assert (=> d!25603 m!103745))

(assert (=> d!25603 m!103983))

(assert (=> d!25603 m!103983))

(assert (=> d!25603 m!103985))

(assert (=> d!25603 m!103745))

(declare-fun m!105153 () Bool)

(assert (=> d!25603 m!105153))

(declare-fun m!105155 () Bool)

(assert (=> d!25603 m!105155))

(assert (=> b!96615 m!103745))

(assert (=> b!96615 m!103979))

(assert (=> b!95997 d!25603))

(declare-fun d!25605 () Bool)

(assert (=> d!25605 (= (isDefined!102 (getValueByKey!148 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))) (not (isEmpty!359 (getValueByKey!148 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))))

(declare-fun bs!3975 () Bool)

(assert (= bs!3975 d!25605))

(assert (=> bs!3975 m!103983))

(declare-fun m!105157 () Bool)

(assert (=> bs!3975 m!105157))

(assert (=> b!95997 d!25605))

(declare-fun b!96617 () Bool)

(declare-fun e!63004 () Option!154)

(declare-fun e!63005 () Option!154)

(assert (=> b!96617 (= e!63004 e!63005)))

(declare-fun c!16304 () Bool)

(assert (=> b!96617 (= c!16304 (and ((_ is Cons!1599) (toList!786 e!62531)) (not (= (_1!1178 (h!2192 (toList!786 e!62531))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))))

(declare-fun d!25607 () Bool)

(declare-fun c!16303 () Bool)

(assert (=> d!25607 (= c!16303 (and ((_ is Cons!1599) (toList!786 e!62531)) (= (_1!1178 (h!2192 (toList!786 e!62531))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (=> d!25607 (= (getValueByKey!148 (toList!786 e!62531) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) e!63004)))

(declare-fun b!96618 () Bool)

(assert (=> b!96618 (= e!63005 (getValueByKey!148 (t!5529 (toList!786 e!62531)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!96619 () Bool)

(assert (=> b!96619 (= e!63005 None!152)))

(declare-fun b!96616 () Bool)

(assert (=> b!96616 (= e!63004 (Some!153 (_2!1178 (h!2192 (toList!786 e!62531)))))))

(assert (= (and d!25607 c!16303) b!96616))

(assert (= (and d!25607 (not c!16303)) b!96617))

(assert (= (and b!96617 c!16304) b!96618))

(assert (= (and b!96617 (not c!16304)) b!96619))

(assert (=> b!96618 m!103745))

(declare-fun m!105159 () Bool)

(assert (=> b!96618 m!105159))

(assert (=> b!95997 d!25607))

(declare-fun d!25609 () Bool)

(assert (=> d!25609 (= (apply!91 lt!47871 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1289 (getValueByKey!148 (toList!786 lt!47871) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3976 () Bool)

(assert (= bs!3976 d!25609))

(declare-fun m!105161 () Bool)

(assert (=> bs!3976 m!105161))

(assert (=> bs!3976 m!105161))

(declare-fun m!105163 () Bool)

(assert (=> bs!3976 m!105163))

(assert (=> b!96073 d!25609))

(assert (=> bm!9763 d!25363))

(assert (=> b!96158 d!25289))

(declare-fun d!25611 () Bool)

(declare-fun e!63006 () Bool)

(assert (=> d!25611 e!63006))

(declare-fun res!48777 () Bool)

(assert (=> d!25611 (=> (not res!48777) (not e!63006))))

(declare-fun lt!48309 () ListLongMap!1541)

(assert (=> d!25611 (= res!48777 (contains!800 lt!48309 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(declare-fun lt!48308 () List!1603)

(assert (=> d!25611 (= lt!48309 (ListLongMap!1542 lt!48308))))

(declare-fun lt!48307 () Unit!2887)

(declare-fun lt!48310 () Unit!2887)

(assert (=> d!25611 (= lt!48307 lt!48310)))

(assert (=> d!25611 (= (getValueByKey!148 lt!48308 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25611 (= lt!48310 (lemmaContainsTupThenGetReturnValue!66 lt!48308 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25611 (= lt!48308 (insertStrictlySorted!68 (toList!786 call!9721) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25611 (= (+!137 call!9721 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!48309)))

(declare-fun b!96620 () Bool)

(declare-fun res!48778 () Bool)

(assert (=> b!96620 (=> (not res!48778) (not e!63006))))

(assert (=> b!96620 (= res!48778 (= (getValueByKey!148 (toList!786 lt!48309) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(declare-fun b!96621 () Bool)

(assert (=> b!96621 (= e!63006 (contains!802 (toList!786 lt!48309) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16115 (ite c!16114 (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))

(assert (= (and d!25611 res!48777) b!96620))

(assert (= (and b!96620 res!48778) b!96621))

(declare-fun m!105165 () Bool)

(assert (=> d!25611 m!105165))

(declare-fun m!105167 () Bool)

(assert (=> d!25611 m!105167))

(declare-fun m!105169 () Bool)

(assert (=> d!25611 m!105169))

(declare-fun m!105171 () Bool)

(assert (=> d!25611 m!105171))

(declare-fun m!105173 () Bool)

(assert (=> b!96620 m!105173))

(declare-fun m!105175 () Bool)

(assert (=> b!96621 m!105175))

(assert (=> b!96009 d!25611))

(declare-fun d!25613 () Bool)

(declare-fun e!63008 () Bool)

(assert (=> d!25613 e!63008))

(declare-fun res!48779 () Bool)

(assert (=> d!25613 (=> res!48779 e!63008)))

(declare-fun lt!48313 () Bool)

(assert (=> d!25613 (= res!48779 (not lt!48313))))

(declare-fun lt!48311 () Bool)

(assert (=> d!25613 (= lt!48313 lt!48311)))

(declare-fun lt!48312 () Unit!2887)

(declare-fun e!63007 () Unit!2887)

(assert (=> d!25613 (= lt!48312 e!63007)))

(declare-fun c!16305 () Bool)

(assert (=> d!25613 (= c!16305 lt!48311)))

(assert (=> d!25613 (= lt!48311 (containsKey!152 (toList!786 lt!47897) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25613 (= (contains!800 lt!47897 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!48313)))

(declare-fun b!96622 () Bool)

(declare-fun lt!48314 () Unit!2887)

(assert (=> b!96622 (= e!63007 lt!48314)))

(assert (=> b!96622 (= lt!48314 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47897) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!96622 (isDefined!102 (getValueByKey!148 (toList!786 lt!47897) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96623 () Bool)

(declare-fun Unit!2920 () Unit!2887)

(assert (=> b!96623 (= e!63007 Unit!2920)))

(declare-fun b!96624 () Bool)

(assert (=> b!96624 (= e!63008 (isDefined!102 (getValueByKey!148 (toList!786 lt!47897) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!25613 c!16305) b!96622))

(assert (= (and d!25613 (not c!16305)) b!96623))

(assert (= (and d!25613 (not res!48779)) b!96624))

(declare-fun m!105177 () Bool)

(assert (=> d!25613 m!105177))

(declare-fun m!105179 () Bool)

(assert (=> b!96622 m!105179))

(assert (=> b!96622 m!104187))

(assert (=> b!96622 m!104187))

(declare-fun m!105181 () Bool)

(assert (=> b!96622 m!105181))

(assert (=> b!96624 m!104187))

(assert (=> b!96624 m!104187))

(assert (=> b!96624 m!105181))

(assert (=> d!25313 d!25613))

(declare-fun b!96626 () Bool)

(declare-fun e!63009 () Option!154)

(declare-fun e!63010 () Option!154)

(assert (=> b!96626 (= e!63009 e!63010)))

(declare-fun c!16307 () Bool)

(assert (=> b!96626 (= c!16307 (and ((_ is Cons!1599) lt!47896) (not (= (_1!1178 (h!2192 lt!47896)) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!16306 () Bool)

(declare-fun d!25615 () Bool)

(assert (=> d!25615 (= c!16306 (and ((_ is Cons!1599) lt!47896) (= (_1!1178 (h!2192 lt!47896)) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25615 (= (getValueByKey!148 lt!47896 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!63009)))

(declare-fun b!96627 () Bool)

(assert (=> b!96627 (= e!63010 (getValueByKey!148 (t!5529 lt!47896) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96628 () Bool)

(assert (=> b!96628 (= e!63010 None!152)))

(declare-fun b!96625 () Bool)

(assert (=> b!96625 (= e!63009 (Some!153 (_2!1178 (h!2192 lt!47896))))))

(assert (= (and d!25615 c!16306) b!96625))

(assert (= (and d!25615 (not c!16306)) b!96626))

(assert (= (and b!96626 c!16307) b!96627))

(assert (= (and b!96626 (not c!16307)) b!96628))

(declare-fun m!105183 () Bool)

(assert (=> b!96627 m!105183))

(assert (=> d!25313 d!25615))

(declare-fun d!25617 () Bool)

(assert (=> d!25617 (= (getValueByKey!148 lt!47896 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48315 () Unit!2887)

(assert (=> d!25617 (= lt!48315 (choose!591 lt!47896 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!63011 () Bool)

(assert (=> d!25617 e!63011))

(declare-fun res!48780 () Bool)

(assert (=> d!25617 (=> (not res!48780) (not e!63011))))

(assert (=> d!25617 (= res!48780 (isStrictlySorted!298 lt!47896))))

(assert (=> d!25617 (= (lemmaContainsTupThenGetReturnValue!66 lt!47896 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!48315)))

(declare-fun b!96629 () Bool)

(declare-fun res!48781 () Bool)

(assert (=> b!96629 (=> (not res!48781) (not e!63011))))

(assert (=> b!96629 (= res!48781 (containsKey!152 lt!47896 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96630 () Bool)

(assert (=> b!96630 (= e!63011 (contains!802 lt!47896 (tuple2!2337 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!25617 res!48780) b!96629))

(assert (= (and b!96629 res!48781) b!96630))

(assert (=> d!25617 m!104181))

(declare-fun m!105185 () Bool)

(assert (=> d!25617 m!105185))

(declare-fun m!105187 () Bool)

(assert (=> d!25617 m!105187))

(declare-fun m!105189 () Bool)

(assert (=> b!96629 m!105189))

(declare-fun m!105191 () Bool)

(assert (=> b!96630 m!105191))

(assert (=> d!25313 d!25617))

(declare-fun e!63015 () List!1603)

(declare-fun b!96631 () Bool)

(assert (=> b!96631 (= e!63015 (insertStrictlySorted!68 (t!5529 (toList!786 call!9678)) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96633 () Bool)

(declare-fun e!63012 () List!1603)

(declare-fun call!9803 () List!1603)

(assert (=> b!96633 (= e!63012 call!9803)))

(declare-fun b!96634 () Bool)

(declare-fun e!63016 () List!1603)

(declare-fun call!9802 () List!1603)

(assert (=> b!96634 (= e!63016 call!9802)))

(declare-fun b!96635 () Bool)

(declare-fun e!63014 () List!1603)

(declare-fun call!9804 () List!1603)

(assert (=> b!96635 (= e!63014 call!9804)))

(declare-fun bm!9799 () Bool)

(assert (=> bm!9799 (= call!9804 call!9803)))

(declare-fun e!63013 () Bool)

(declare-fun b!96636 () Bool)

(declare-fun lt!48316 () List!1603)

(assert (=> b!96636 (= e!63013 (contains!802 lt!48316 (tuple2!2337 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!9800 () Bool)

(assert (=> bm!9800 (= call!9802 call!9804)))

(declare-fun b!96637 () Bool)

(declare-fun c!16309 () Bool)

(declare-fun c!16311 () Bool)

(assert (=> b!96637 (= e!63015 (ite c!16309 (t!5529 (toList!786 call!9678)) (ite c!16311 (Cons!1599 (h!2192 (toList!786 call!9678)) (t!5529 (toList!786 call!9678))) Nil!1600)))))

(declare-fun b!96632 () Bool)

(declare-fun res!48782 () Bool)

(assert (=> b!96632 (=> (not res!48782) (not e!63013))))

(assert (=> b!96632 (= res!48782 (containsKey!152 lt!48316 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun d!25619 () Bool)

(assert (=> d!25619 e!63013))

(declare-fun res!48783 () Bool)

(assert (=> d!25619 (=> (not res!48783) (not e!63013))))

(assert (=> d!25619 (= res!48783 (isStrictlySorted!298 lt!48316))))

(assert (=> d!25619 (= lt!48316 e!63012)))

(declare-fun c!16308 () Bool)

(assert (=> d!25619 (= c!16308 (and ((_ is Cons!1599) (toList!786 call!9678)) (bvslt (_1!1178 (h!2192 (toList!786 call!9678))) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25619 (isStrictlySorted!298 (toList!786 call!9678))))

(assert (=> d!25619 (= (insertStrictlySorted!68 (toList!786 call!9678) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!48316)))

(declare-fun b!96638 () Bool)

(assert (=> b!96638 (= c!16311 (and ((_ is Cons!1599) (toList!786 call!9678)) (bvsgt (_1!1178 (h!2192 (toList!786 call!9678))) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!96638 (= e!63014 e!63016)))

(declare-fun bm!9801 () Bool)

(assert (=> bm!9801 (= call!9803 ($colon$colon!76 e!63015 (ite c!16308 (h!2192 (toList!786 call!9678)) (tuple2!2337 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!16310 () Bool)

(assert (=> bm!9801 (= c!16310 c!16308)))

(declare-fun b!96639 () Bool)

(assert (=> b!96639 (= e!63012 e!63014)))

(assert (=> b!96639 (= c!16309 (and ((_ is Cons!1599) (toList!786 call!9678)) (= (_1!1178 (h!2192 (toList!786 call!9678))) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96640 () Bool)

(assert (=> b!96640 (= e!63016 call!9802)))

(assert (= (and d!25619 c!16308) b!96633))

(assert (= (and d!25619 (not c!16308)) b!96639))

(assert (= (and b!96639 c!16309) b!96635))

(assert (= (and b!96639 (not c!16309)) b!96638))

(assert (= (and b!96638 c!16311) b!96634))

(assert (= (and b!96638 (not c!16311)) b!96640))

(assert (= (or b!96634 b!96640) bm!9800))

(assert (= (or b!96635 bm!9800) bm!9799))

(assert (= (or b!96633 bm!9799) bm!9801))

(assert (= (and bm!9801 c!16310) b!96631))

(assert (= (and bm!9801 (not c!16310)) b!96637))

(assert (= (and d!25619 res!48783) b!96632))

(assert (= (and b!96632 res!48782) b!96636))

(declare-fun m!105193 () Bool)

(assert (=> b!96631 m!105193))

(declare-fun m!105195 () Bool)

(assert (=> d!25619 m!105195))

(declare-fun m!105197 () Bool)

(assert (=> d!25619 m!105197))

(declare-fun m!105199 () Bool)

(assert (=> b!96636 m!105199))

(declare-fun m!105201 () Bool)

(assert (=> b!96632 m!105201))

(declare-fun m!105203 () Bool)

(assert (=> bm!9801 m!105203))

(assert (=> d!25313 d!25619))

(declare-fun d!25621 () Bool)

(declare-fun res!48784 () Bool)

(declare-fun e!63017 () Bool)

(assert (=> d!25621 (=> res!48784 e!63017)))

(assert (=> d!25621 (= res!48784 (and ((_ is Cons!1599) (toList!786 lt!47784)) (= (_1!1178 (h!2192 (toList!786 lt!47784))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25621 (= (containsKey!152 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000) e!63017)))

(declare-fun b!96641 () Bool)

(declare-fun e!63018 () Bool)

(assert (=> b!96641 (= e!63017 e!63018)))

(declare-fun res!48785 () Bool)

(assert (=> b!96641 (=> (not res!48785) (not e!63018))))

(assert (=> b!96641 (= res!48785 (and (or (not ((_ is Cons!1599) (toList!786 lt!47784))) (bvsle (_1!1178 (h!2192 (toList!786 lt!47784))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1599) (toList!786 lt!47784)) (bvslt (_1!1178 (h!2192 (toList!786 lt!47784))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96642 () Bool)

(assert (=> b!96642 (= e!63018 (containsKey!152 (t!5529 (toList!786 lt!47784)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!25621 (not res!48784)) b!96641))

(assert (= (and b!96641 res!48785) b!96642))

(declare-fun m!105205 () Bool)

(assert (=> b!96642 m!105205))

(assert (=> d!25297 d!25621))

(declare-fun d!25623 () Bool)

(assert (=> d!25623 (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!48317 () Unit!2887)

(assert (=> d!25623 (= lt!48317 (choose!587 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63019 () Bool)

(assert (=> d!25623 e!63019))

(declare-fun res!48786 () Bool)

(assert (=> d!25623 (=> (not res!48786) (not e!63019))))

(assert (=> d!25623 (= res!48786 (isStrictlySorted!298 (toList!786 lt!47784)))))

(assert (=> d!25623 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000) lt!48317)))

(declare-fun b!96643 () Bool)

(assert (=> b!96643 (= e!63019 (containsKey!152 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!25623 res!48786) b!96643))

(assert (=> d!25623 m!104475))

(assert (=> d!25623 m!104475))

(assert (=> d!25623 m!104477))

(declare-fun m!105207 () Bool)

(assert (=> d!25623 m!105207))

(declare-fun m!105209 () Bool)

(assert (=> d!25623 m!105209))

(assert (=> b!96643 m!104471))

(assert (=> b!96270 d!25623))

(declare-fun d!25625 () Bool)

(assert (=> d!25625 (= (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!359 (getValueByKey!148 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!3977 () Bool)

(assert (= bs!3977 d!25625))

(assert (=> bs!3977 m!104475))

(declare-fun m!105211 () Bool)

(assert (=> bs!3977 m!105211))

(assert (=> b!96270 d!25625))

(declare-fun b!96645 () Bool)

(declare-fun e!63020 () Option!154)

(declare-fun e!63021 () Option!154)

(assert (=> b!96645 (= e!63020 e!63021)))

(declare-fun c!16313 () Bool)

(assert (=> b!96645 (= c!16313 (and ((_ is Cons!1599) (toList!786 lt!47784)) (not (= (_1!1178 (h!2192 (toList!786 lt!47784))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!25627 () Bool)

(declare-fun c!16312 () Bool)

(assert (=> d!25627 (= c!16312 (and ((_ is Cons!1599) (toList!786 lt!47784)) (= (_1!1178 (h!2192 (toList!786 lt!47784))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25627 (= (getValueByKey!148 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000) e!63020)))

(declare-fun b!96646 () Bool)

(assert (=> b!96646 (= e!63021 (getValueByKey!148 (t!5529 (toList!786 lt!47784)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96647 () Bool)

(assert (=> b!96647 (= e!63021 None!152)))

(declare-fun b!96644 () Bool)

(assert (=> b!96644 (= e!63020 (Some!153 (_2!1178 (h!2192 (toList!786 lt!47784)))))))

(assert (= (and d!25627 c!16312) b!96644))

(assert (= (and d!25627 (not c!16312)) b!96645))

(assert (= (and b!96645 c!16313) b!96646))

(assert (= (and b!96645 (not c!16313)) b!96647))

(declare-fun m!105213 () Bool)

(assert (=> b!96646 m!105213))

(assert (=> b!96270 d!25627))

(declare-fun b!96649 () Bool)

(declare-fun e!63022 () Option!154)

(declare-fun e!63023 () Option!154)

(assert (=> b!96649 (= e!63022 e!63023)))

(declare-fun c!16315 () Bool)

(assert (=> b!96649 (= c!16315 (and ((_ is Cons!1599) (toList!786 lt!47989)) (not (= (_1!1178 (h!2192 (toList!786 lt!47989))) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun d!25629 () Bool)

(declare-fun c!16314 () Bool)

(assert (=> d!25629 (= c!16314 (and ((_ is Cons!1599) (toList!786 lt!47989)) (= (_1!1178 (h!2192 (toList!786 lt!47989))) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25629 (= (getValueByKey!148 (toList!786 lt!47989) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) e!63022)))

(declare-fun b!96650 () Bool)

(assert (=> b!96650 (= e!63023 (getValueByKey!148 (t!5529 (toList!786 lt!47989)) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96651 () Bool)

(assert (=> b!96651 (= e!63023 None!152)))

(declare-fun b!96648 () Bool)

(assert (=> b!96648 (= e!63022 (Some!153 (_2!1178 (h!2192 (toList!786 lt!47989)))))))

(assert (= (and d!25629 c!16314) b!96648))

(assert (= (and d!25629 (not c!16314)) b!96649))

(assert (= (and b!96649 c!16315) b!96650))

(assert (= (and b!96649 (not c!16315)) b!96651))

(declare-fun m!105215 () Bool)

(assert (=> b!96650 m!105215))

(assert (=> b!96240 d!25629))

(assert (=> d!25337 d!25273))

(declare-fun bm!9802 () Bool)

(declare-fun call!9805 () (_ BitVec 32))

(assert (=> bm!9802 (= call!9805 (arrayCountValidKeys!0 (_keys!4143 (_2!1179 lt!47718)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (_2!1179 lt!47718)))))))

(declare-fun b!96652 () Bool)

(declare-fun e!63024 () (_ BitVec 32))

(assert (=> b!96652 (= e!63024 #b00000000000000000000000000000000)))

(declare-fun b!96653 () Bool)

(declare-fun e!63025 () (_ BitVec 32))

(assert (=> b!96653 (= e!63025 call!9805)))

(declare-fun b!96654 () Bool)

(assert (=> b!96654 (= e!63024 e!63025)))

(declare-fun c!16316 () Bool)

(assert (=> b!96654 (= c!16316 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (_2!1179 lt!47718))) #b00000000000000000000000000000000)))))

(declare-fun b!96655 () Bool)

(assert (=> b!96655 (= e!63025 (bvadd #b00000000000000000000000000000001 call!9805))))

(declare-fun d!25631 () Bool)

(declare-fun lt!48318 () (_ BitVec 32))

(assert (=> d!25631 (and (bvsge lt!48318 #b00000000000000000000000000000000) (bvsle lt!48318 (bvsub (size!2251 (_keys!4143 (_2!1179 lt!47718))) #b00000000000000000000000000000000)))))

(assert (=> d!25631 (= lt!48318 e!63024)))

(declare-fun c!16317 () Bool)

(assert (=> d!25631 (= c!16317 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 (_2!1179 lt!47718)))))))

(assert (=> d!25631 (and (bvsle #b00000000000000000000000000000000 (size!2251 (_keys!4143 (_2!1179 lt!47718)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2251 (_keys!4143 (_2!1179 lt!47718))) (size!2251 (_keys!4143 (_2!1179 lt!47718)))))))

(assert (=> d!25631 (= (arrayCountValidKeys!0 (_keys!4143 (_2!1179 lt!47718)) #b00000000000000000000000000000000 (size!2251 (_keys!4143 (_2!1179 lt!47718)))) lt!48318)))

(assert (= (and d!25631 c!16317) b!96652))

(assert (= (and d!25631 (not c!16317)) b!96654))

(assert (= (and b!96654 c!16316) b!96655))

(assert (= (and b!96654 (not c!16316)) b!96653))

(assert (= (or b!96655 b!96653) bm!9802))

(declare-fun m!105217 () Bool)

(assert (=> bm!9802 m!105217))

(declare-fun m!105219 () Bool)

(assert (=> b!96654 m!105219))

(assert (=> b!96654 m!105219))

(declare-fun m!105221 () Bool)

(assert (=> b!96654 m!105221))

(assert (=> b!96170 d!25631))

(assert (=> b!96033 d!25435))

(declare-fun d!25633 () Bool)

(assert (=> d!25633 (= (get!1289 (getValueByKey!148 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2783 (getValueByKey!148 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!25323 d!25633))

(declare-fun b!96657 () Bool)

(declare-fun e!63026 () Option!154)

(declare-fun e!63027 () Option!154)

(assert (=> b!96657 (= e!63026 e!63027)))

(declare-fun c!16319 () Bool)

(assert (=> b!96657 (= c!16319 (and ((_ is Cons!1599) (toList!786 lt!47784)) (not (= (_1!1178 (h!2192 (toList!786 lt!47784))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun c!16318 () Bool)

(declare-fun d!25635 () Bool)

(assert (=> d!25635 (= c!16318 (and ((_ is Cons!1599) (toList!786 lt!47784)) (= (_1!1178 (h!2192 (toList!786 lt!47784))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!25635 (= (getValueByKey!148 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!63026)))

(declare-fun b!96658 () Bool)

(assert (=> b!96658 (= e!63027 (getValueByKey!148 (t!5529 (toList!786 lt!47784)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!96659 () Bool)

(assert (=> b!96659 (= e!63027 None!152)))

(declare-fun b!96656 () Bool)

(assert (=> b!96656 (= e!63026 (Some!153 (_2!1178 (h!2192 (toList!786 lt!47784)))))))

(assert (= (and d!25635 c!16318) b!96656))

(assert (= (and d!25635 (not c!16318)) b!96657))

(assert (= (and b!96657 c!16319) b!96658))

(assert (= (and b!96657 (not c!16319)) b!96659))

(assert (=> b!96658 m!103887))

(declare-fun m!105223 () Bool)

(assert (=> b!96658 m!105223))

(assert (=> d!25323 d!25635))

(declare-fun d!25637 () Bool)

(declare-fun e!63029 () Bool)

(assert (=> d!25637 e!63029))

(declare-fun res!48787 () Bool)

(assert (=> d!25637 (=> res!48787 e!63029)))

(declare-fun lt!48321 () Bool)

(assert (=> d!25637 (= res!48787 (not lt!48321))))

(declare-fun lt!48319 () Bool)

(assert (=> d!25637 (= lt!48321 lt!48319)))

(declare-fun lt!48320 () Unit!2887)

(declare-fun e!63028 () Unit!2887)

(assert (=> d!25637 (= lt!48320 e!63028)))

(declare-fun c!16320 () Bool)

(assert (=> d!25637 (= c!16320 lt!48319)))

(assert (=> d!25637 (= lt!48319 (containsKey!152 (toList!786 lt!47871) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!25637 (= (contains!800 lt!47871 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) lt!48321)))

(declare-fun b!96660 () Bool)

(declare-fun lt!48322 () Unit!2887)

(assert (=> b!96660 (= e!63028 lt!48322)))

(assert (=> b!96660 (= lt!48322 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47871) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96660 (isDefined!102 (getValueByKey!148 (toList!786 lt!47871) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96661 () Bool)

(declare-fun Unit!2921 () Unit!2887)

(assert (=> b!96661 (= e!63028 Unit!2921)))

(declare-fun b!96662 () Bool)

(assert (=> b!96662 (= e!63029 (isDefined!102 (getValueByKey!148 (toList!786 lt!47871) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!25637 c!16320) b!96660))

(assert (= (and d!25637 (not c!16320)) b!96661))

(assert (= (and d!25637 (not res!48787)) b!96662))

(assert (=> d!25637 m!104003))

(declare-fun m!105225 () Bool)

(assert (=> d!25637 m!105225))

(assert (=> b!96660 m!104003))

(declare-fun m!105227 () Bool)

(assert (=> b!96660 m!105227))

(assert (=> b!96660 m!104003))

(declare-fun m!105229 () Bool)

(assert (=> b!96660 m!105229))

(assert (=> b!96660 m!105229))

(declare-fun m!105231 () Bool)

(assert (=> b!96660 m!105231))

(assert (=> b!96662 m!104003))

(assert (=> b!96662 m!105229))

(assert (=> b!96662 m!105229))

(assert (=> b!96662 m!105231))

(assert (=> b!96061 d!25637))

(declare-fun d!25639 () Bool)

(declare-fun e!63031 () Bool)

(assert (=> d!25639 e!63031))

(declare-fun res!48788 () Bool)

(assert (=> d!25639 (=> res!48788 e!63031)))

(declare-fun lt!48325 () Bool)

(assert (=> d!25639 (= res!48788 (not lt!48325))))

(declare-fun lt!48323 () Bool)

(assert (=> d!25639 (= lt!48325 lt!48323)))

(declare-fun lt!48324 () Unit!2887)

(declare-fun e!63030 () Unit!2887)

(assert (=> d!25639 (= lt!48324 e!63030)))

(declare-fun c!16321 () Bool)

(assert (=> d!25639 (= c!16321 lt!48323)))

(assert (=> d!25639 (= lt!48323 (containsKey!152 (toList!786 lt!47820) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25639 (= (contains!800 lt!47820 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48325)))

(declare-fun b!96663 () Bool)

(declare-fun lt!48326 () Unit!2887)

(assert (=> b!96663 (= e!63030 lt!48326)))

(assert (=> b!96663 (= lt!48326 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47820) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96663 (isDefined!102 (getValueByKey!148 (toList!786 lt!47820) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96664 () Bool)

(declare-fun Unit!2922 () Unit!2887)

(assert (=> b!96664 (= e!63030 Unit!2922)))

(declare-fun b!96665 () Bool)

(assert (=> b!96665 (= e!63031 (isDefined!102 (getValueByKey!148 (toList!786 lt!47820) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25639 c!16321) b!96663))

(assert (= (and d!25639 (not c!16321)) b!96664))

(assert (= (and d!25639 (not res!48788)) b!96665))

(declare-fun m!105233 () Bool)

(assert (=> d!25639 m!105233))

(declare-fun m!105235 () Bool)

(assert (=> b!96663 m!105235))

(declare-fun m!105237 () Bool)

(assert (=> b!96663 m!105237))

(assert (=> b!96663 m!105237))

(declare-fun m!105239 () Bool)

(assert (=> b!96663 m!105239))

(assert (=> b!96665 m!105237))

(assert (=> b!96665 m!105237))

(assert (=> b!96665 m!105239))

(assert (=> bm!9722 d!25639))

(declare-fun d!25641 () Bool)

(assert (=> d!25641 (arrayContainsKey!0 (_keys!4143 newMap!16) lt!47977 #b00000000000000000000000000000000)))

(declare-fun lt!48327 () Unit!2887)

(assert (=> d!25641 (= lt!48327 (choose!13 (_keys!4143 newMap!16) lt!47977 #b00000000000000000000000000000000))))

(assert (=> d!25641 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!25641 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4143 newMap!16) lt!47977 #b00000000000000000000000000000000) lt!48327)))

(declare-fun bs!3978 () Bool)

(assert (= bs!3978 d!25641))

(assert (=> bs!3978 m!104363))

(declare-fun m!105241 () Bool)

(assert (=> bs!3978 m!105241))

(assert (=> b!96232 d!25641))

(declare-fun d!25643 () Bool)

(declare-fun res!48789 () Bool)

(declare-fun e!63032 () Bool)

(assert (=> d!25643 (=> res!48789 e!63032)))

(assert (=> d!25643 (= res!48789 (= (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) lt!47977))))

(assert (=> d!25643 (= (arrayContainsKey!0 (_keys!4143 newMap!16) lt!47977 #b00000000000000000000000000000000) e!63032)))

(declare-fun b!96666 () Bool)

(declare-fun e!63033 () Bool)

(assert (=> b!96666 (= e!63032 e!63033)))

(declare-fun res!48790 () Bool)

(assert (=> b!96666 (=> (not res!48790) (not e!63033))))

(assert (=> b!96666 (= res!48790 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96667 () Bool)

(assert (=> b!96667 (= e!63033 (arrayContainsKey!0 (_keys!4143 newMap!16) lt!47977 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!25643 (not res!48789)) b!96666))

(assert (= (and b!96666 res!48790) b!96667))

(assert (=> d!25643 m!104003))

(declare-fun m!105243 () Bool)

(assert (=> b!96667 m!105243))

(assert (=> b!96232 d!25643))

(declare-fun b!96668 () Bool)

(declare-fun e!63034 () SeekEntryResult!262)

(assert (=> b!96668 (= e!63034 Undefined!262)))

(declare-fun d!25645 () Bool)

(declare-fun lt!48330 () SeekEntryResult!262)

(assert (=> d!25645 (and (or ((_ is Undefined!262) lt!48330) (not ((_ is Found!262) lt!48330)) (and (bvsge (index!3191 lt!48330) #b00000000000000000000000000000000) (bvslt (index!3191 lt!48330) (size!2251 (_keys!4143 newMap!16))))) (or ((_ is Undefined!262) lt!48330) ((_ is Found!262) lt!48330) (not ((_ is MissingZero!262) lt!48330)) (and (bvsge (index!3190 lt!48330) #b00000000000000000000000000000000) (bvslt (index!3190 lt!48330) (size!2251 (_keys!4143 newMap!16))))) (or ((_ is Undefined!262) lt!48330) ((_ is Found!262) lt!48330) ((_ is MissingZero!262) lt!48330) (not ((_ is MissingVacant!262) lt!48330)) (and (bvsge (index!3193 lt!48330) #b00000000000000000000000000000000) (bvslt (index!3193 lt!48330) (size!2251 (_keys!4143 newMap!16))))) (or ((_ is Undefined!262) lt!48330) (ite ((_ is Found!262) lt!48330) (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!48330)) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!262) lt!48330) (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3190 lt!48330)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!262) lt!48330) (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3193 lt!48330)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25645 (= lt!48330 e!63034)))

(declare-fun c!16323 () Bool)

(declare-fun lt!48329 () SeekEntryResult!262)

(assert (=> d!25645 (= c!16323 (and ((_ is Intermediate!262) lt!48329) (undefined!1074 lt!48329)))))

(assert (=> d!25645 (= lt!48329 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (mask!6542 newMap!16)) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (=> d!25645 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25645 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (_keys!4143 newMap!16) (mask!6542 newMap!16)) lt!48330)))

(declare-fun b!96669 () Bool)

(declare-fun e!63036 () SeekEntryResult!262)

(assert (=> b!96669 (= e!63036 (Found!262 (index!3192 lt!48329)))))

(declare-fun b!96670 () Bool)

(declare-fun e!63035 () SeekEntryResult!262)

(assert (=> b!96670 (= e!63035 (seekKeyOrZeroReturnVacant!0 (x!12810 lt!48329) (index!3192 lt!48329) (index!3192 lt!48329) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!96671 () Bool)

(declare-fun c!16324 () Bool)

(declare-fun lt!48328 () (_ BitVec 64))

(assert (=> b!96671 (= c!16324 (= lt!48328 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96671 (= e!63036 e!63035)))

(declare-fun b!96672 () Bool)

(assert (=> b!96672 (= e!63035 (MissingZero!262 (index!3192 lt!48329)))))

(declare-fun b!96673 () Bool)

(assert (=> b!96673 (= e!63034 e!63036)))

(assert (=> b!96673 (= lt!48328 (select (arr!2002 (_keys!4143 newMap!16)) (index!3192 lt!48329)))))

(declare-fun c!16322 () Bool)

(assert (=> b!96673 (= c!16322 (= lt!48328 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!25645 c!16323) b!96668))

(assert (= (and d!25645 (not c!16323)) b!96673))

(assert (= (and b!96673 c!16322) b!96669))

(assert (= (and b!96673 (not c!16322)) b!96671))

(assert (= (and b!96671 c!16324) b!96672))

(assert (= (and b!96671 (not c!16324)) b!96670))

(declare-fun m!105245 () Bool)

(assert (=> d!25645 m!105245))

(declare-fun m!105247 () Bool)

(assert (=> d!25645 m!105247))

(assert (=> d!25645 m!103977))

(assert (=> d!25645 m!104003))

(declare-fun m!105249 () Bool)

(assert (=> d!25645 m!105249))

(declare-fun m!105251 () Bool)

(assert (=> d!25645 m!105251))

(assert (=> d!25645 m!105249))

(assert (=> d!25645 m!104003))

(declare-fun m!105253 () Bool)

(assert (=> d!25645 m!105253))

(assert (=> b!96670 m!104003))

(declare-fun m!105255 () Bool)

(assert (=> b!96670 m!105255))

(declare-fun m!105257 () Bool)

(assert (=> b!96673 m!105257))

(assert (=> b!96232 d!25645))

(declare-fun d!25647 () Bool)

(assert (=> d!25647 (= (apply!91 lt!47952 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1289 (getValueByKey!148 (toList!786 lt!47952) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!3979 () Bool)

(assert (= bs!3979 d!25647))

(assert (=> bs!3979 m!104003))

(declare-fun m!105259 () Bool)

(assert (=> bs!3979 m!105259))

(assert (=> bs!3979 m!105259))

(declare-fun m!105261 () Bool)

(assert (=> bs!3979 m!105261))

(assert (=> b!96201 d!25647))

(declare-fun d!25649 () Bool)

(declare-fun c!16325 () Bool)

(assert (=> d!25649 (= c!16325 ((_ is ValueCellFull!966) (select (arr!2003 (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712)) #b00000000000000000000000000000000)))))

(declare-fun e!63037 () V!3139)

(assert (=> d!25649 (= (get!1286 (select (arr!2003 (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63037)))

(declare-fun b!96674 () Bool)

(assert (=> b!96674 (= e!63037 (get!1287 (select (arr!2003 (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96675 () Bool)

(assert (=> b!96675 (= e!63037 (get!1288 (select (arr!2003 (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25649 c!16325) b!96674))

(assert (= (and d!25649 (not c!16325)) b!96675))

(assert (=> b!96674 m!104327))

(assert (=> b!96674 m!104043))

(declare-fun m!105263 () Bool)

(assert (=> b!96674 m!105263))

(assert (=> b!96675 m!104327))

(assert (=> b!96675 m!104043))

(declare-fun m!105265 () Bool)

(assert (=> b!96675 m!105265))

(assert (=> b!96201 d!25649))

(declare-fun d!25651 () Bool)

(assert (=> d!25651 (contains!800 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))

(declare-fun lt!48333 () Unit!2887)

(declare-fun choose!593 (array!4214 array!4216 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) (_ BitVec 32) Int) Unit!2887)

(assert (=> d!25651 (= lt!48333 (choose!593 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(assert (=> d!25651 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25651 (= (lemmaArrayContainsKeyThenInListMap!24 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48333)))

(declare-fun bs!3980 () Bool)

(assert (= bs!3980 d!25651))

(assert (=> bs!3980 m!103899))

(assert (=> bs!3980 m!103899))

(assert (=> bs!3980 m!103745))

(assert (=> bs!3980 m!104481))

(assert (=> bs!3980 m!103745))

(declare-fun m!105267 () Bool)

(assert (=> bs!3980 m!105267))

(assert (=> bs!3980 m!103977))

(assert (=> b!96318 d!25651))

(assert (=> b!96318 d!25469))

(assert (=> b!96318 d!25303))

(assert (=> bm!9714 d!25363))

(declare-fun d!25653 () Bool)

(declare-fun e!63039 () Bool)

(assert (=> d!25653 e!63039))

(declare-fun res!48791 () Bool)

(assert (=> d!25653 (=> res!48791 e!63039)))

(declare-fun lt!48336 () Bool)

(assert (=> d!25653 (= res!48791 (not lt!48336))))

(declare-fun lt!48334 () Bool)

(assert (=> d!25653 (= lt!48336 lt!48334)))

(declare-fun lt!48335 () Unit!2887)

(declare-fun e!63038 () Unit!2887)

(assert (=> d!25653 (= lt!48335 e!63038)))

(declare-fun c!16326 () Bool)

(assert (=> d!25653 (= c!16326 lt!48334)))

(assert (=> d!25653 (= lt!48334 (containsKey!152 (toList!786 (map!1246 (_2!1179 lt!48089))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25653 (= (contains!800 (map!1246 (_2!1179 lt!48089)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) lt!48336)))

(declare-fun b!96676 () Bool)

(declare-fun lt!48337 () Unit!2887)

(assert (=> b!96676 (= e!63038 lt!48337)))

(assert (=> b!96676 (= lt!48337 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 (map!1246 (_2!1179 lt!48089))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> b!96676 (isDefined!102 (getValueByKey!148 (toList!786 (map!1246 (_2!1179 lt!48089))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!96677 () Bool)

(declare-fun Unit!2923 () Unit!2887)

(assert (=> b!96677 (= e!63038 Unit!2923)))

(declare-fun b!96678 () Bool)

(assert (=> b!96678 (= e!63039 (isDefined!102 (getValueByKey!148 (toList!786 (map!1246 (_2!1179 lt!48089))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (= (and d!25653 c!16326) b!96676))

(assert (= (and d!25653 (not c!16326)) b!96677))

(assert (= (and d!25653 (not res!48791)) b!96678))

(assert (=> d!25653 m!103745))

(declare-fun m!105269 () Bool)

(assert (=> d!25653 m!105269))

(assert (=> b!96676 m!103745))

(declare-fun m!105271 () Bool)

(assert (=> b!96676 m!105271))

(assert (=> b!96676 m!103745))

(declare-fun m!105273 () Bool)

(assert (=> b!96676 m!105273))

(assert (=> b!96676 m!105273))

(declare-fun m!105275 () Bool)

(assert (=> b!96676 m!105275))

(assert (=> b!96678 m!103745))

(assert (=> b!96678 m!105273))

(assert (=> b!96678 m!105273))

(assert (=> b!96678 m!105275))

(assert (=> b!96322 d!25653))

(declare-fun d!25655 () Bool)

(assert (=> d!25655 (= (map!1246 (_2!1179 lt!48089)) (getCurrentListMap!467 (_keys!4143 (_2!1179 lt!48089)) (_values!2440 (_2!1179 lt!48089)) (mask!6542 (_2!1179 lt!48089)) (extraKeys!2282 (_2!1179 lt!48089)) (zeroValue!2342 (_2!1179 lt!48089)) (minValue!2342 (_2!1179 lt!48089)) #b00000000000000000000000000000000 (defaultEntry!2457 (_2!1179 lt!48089))))))

(declare-fun bs!3981 () Bool)

(assert (= bs!3981 d!25655))

(declare-fun m!105277 () Bool)

(assert (=> bs!3981 m!105277))

(assert (=> b!96322 d!25655))

(declare-fun d!25657 () Bool)

(declare-fun e!63041 () Bool)

(assert (=> d!25657 e!63041))

(declare-fun res!48792 () Bool)

(assert (=> d!25657 (=> res!48792 e!63041)))

(declare-fun lt!48340 () Bool)

(assert (=> d!25657 (= res!48792 (not lt!48340))))

(declare-fun lt!48338 () Bool)

(assert (=> d!25657 (= lt!48340 lt!48338)))

(declare-fun lt!48339 () Unit!2887)

(declare-fun e!63040 () Unit!2887)

(assert (=> d!25657 (= lt!48339 e!63040)))

(declare-fun c!16327 () Bool)

(assert (=> d!25657 (= c!16327 lt!48338)))

(assert (=> d!25657 (= lt!48338 (containsKey!152 (toList!786 lt!47871) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25657 (= (contains!800 lt!47871 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48340)))

(declare-fun b!96679 () Bool)

(declare-fun lt!48341 () Unit!2887)

(assert (=> b!96679 (= e!63040 lt!48341)))

(assert (=> b!96679 (= lt!48341 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47871) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96679 (isDefined!102 (getValueByKey!148 (toList!786 lt!47871) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96680 () Bool)

(declare-fun Unit!2924 () Unit!2887)

(assert (=> b!96680 (= e!63040 Unit!2924)))

(declare-fun b!96681 () Bool)

(assert (=> b!96681 (= e!63041 (isDefined!102 (getValueByKey!148 (toList!786 lt!47871) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25657 c!16327) b!96679))

(assert (= (and d!25657 (not c!16327)) b!96680))

(assert (= (and d!25657 (not res!48792)) b!96681))

(declare-fun m!105279 () Bool)

(assert (=> d!25657 m!105279))

(declare-fun m!105281 () Bool)

(assert (=> b!96679 m!105281))

(assert (=> b!96679 m!105161))

(assert (=> b!96679 m!105161))

(declare-fun m!105283 () Bool)

(assert (=> b!96679 m!105283))

(assert (=> b!96681 m!105161))

(assert (=> b!96681 m!105161))

(assert (=> b!96681 m!105283))

(assert (=> bm!9733 d!25657))

(declare-fun d!25659 () Bool)

(assert (=> d!25659 (= (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!359 (getValueByKey!148 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!3982 () Bool)

(assert (= bs!3982 d!25659))

(assert (=> bs!3982 m!104221))

(declare-fun m!105285 () Bool)

(assert (=> bs!3982 m!105285))

(assert (=> b!96177 d!25659))

(assert (=> b!96177 d!25635))

(assert (=> b!96012 d!25435))

(declare-fun bm!9803 () Bool)

(declare-fun call!9806 () (_ BitVec 32))

(assert (=> bm!9803 (= call!9806 (arrayCountValidKeys!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!96682 () Bool)

(declare-fun e!63042 () (_ BitVec 32))

(assert (=> b!96682 (= e!63042 #b00000000000000000000000000000000)))

(declare-fun b!96683 () Bool)

(declare-fun e!63043 () (_ BitVec 32))

(assert (=> b!96683 (= e!63043 call!9806)))

(declare-fun b!96684 () Bool)

(assert (=> b!96684 (= e!63042 e!63043)))

(declare-fun c!16328 () Bool)

(assert (=> b!96684 (= c!16328 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!96685 () Bool)

(assert (=> b!96685 (= e!63043 (bvadd #b00000000000000000000000000000001 call!9806))))

(declare-fun d!25661 () Bool)

(declare-fun lt!48342 () (_ BitVec 32))

(assert (=> d!25661 (and (bvsge lt!48342 #b00000000000000000000000000000000) (bvsle lt!48342 (bvsub (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!25661 (= lt!48342 e!63042)))

(declare-fun c!16329 () Bool)

(assert (=> d!25661 (= c!16329 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> d!25661 (and (bvsle #b00000000000000000000000000000000 (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> d!25661 (= (arrayCountValidKeys!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000000 (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))) lt!48342)))

(assert (= (and d!25661 c!16329) b!96682))

(assert (= (and d!25661 (not c!16329)) b!96684))

(assert (= (and b!96684 c!16328) b!96685))

(assert (= (and b!96684 (not c!16328)) b!96683))

(assert (= (or b!96685 b!96683) bm!9803))

(declare-fun m!105287 () Bool)

(assert (=> bm!9803 m!105287))

(declare-fun m!105289 () Bool)

(assert (=> b!96684 m!105289))

(assert (=> b!96684 m!105289))

(declare-fun m!105291 () Bool)

(assert (=> b!96684 m!105291))

(assert (=> b!96000 d!25661))

(declare-fun d!25663 () Bool)

(assert (=> d!25663 (= (get!1289 (getValueByKey!148 (toList!786 lt!47793) lt!47779)) (v!2783 (getValueByKey!148 (toList!786 lt!47793) lt!47779)))))

(assert (=> d!25389 d!25663))

(declare-fun b!96687 () Bool)

(declare-fun e!63044 () Option!154)

(declare-fun e!63045 () Option!154)

(assert (=> b!96687 (= e!63044 e!63045)))

(declare-fun c!16331 () Bool)

(assert (=> b!96687 (= c!16331 (and ((_ is Cons!1599) (toList!786 lt!47793)) (not (= (_1!1178 (h!2192 (toList!786 lt!47793))) lt!47779))))))

(declare-fun d!25665 () Bool)

(declare-fun c!16330 () Bool)

(assert (=> d!25665 (= c!16330 (and ((_ is Cons!1599) (toList!786 lt!47793)) (= (_1!1178 (h!2192 (toList!786 lt!47793))) lt!47779)))))

(assert (=> d!25665 (= (getValueByKey!148 (toList!786 lt!47793) lt!47779) e!63044)))

(declare-fun b!96688 () Bool)

(assert (=> b!96688 (= e!63045 (getValueByKey!148 (t!5529 (toList!786 lt!47793)) lt!47779))))

(declare-fun b!96689 () Bool)

(assert (=> b!96689 (= e!63045 None!152)))

(declare-fun b!96686 () Bool)

(assert (=> b!96686 (= e!63044 (Some!153 (_2!1178 (h!2192 (toList!786 lt!47793)))))))

(assert (= (and d!25665 c!16330) b!96686))

(assert (= (and d!25665 (not c!16330)) b!96687))

(assert (= (and b!96687 c!16331) b!96688))

(assert (= (and b!96687 (not c!16331)) b!96689))

(declare-fun m!105293 () Bool)

(assert (=> b!96688 m!105293))

(assert (=> d!25389 d!25665))

(assert (=> b!96071 d!25435))

(declare-fun d!25667 () Bool)

(assert (=> d!25667 (= (apply!91 lt!47871 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1289 (getValueByKey!148 (toList!786 lt!47871) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3983 () Bool)

(assert (= bs!3983 d!25667))

(declare-fun m!105295 () Bool)

(assert (=> bs!3983 m!105295))

(assert (=> bs!3983 m!105295))

(declare-fun m!105297 () Bool)

(assert (=> bs!3983 m!105297))

(assert (=> b!96055 d!25667))

(declare-fun b!96690 () Bool)

(declare-fun e!63046 () Bool)

(declare-fun e!63049 () Bool)

(assert (=> b!96690 (= e!63046 e!63049)))

(declare-fun c!16332 () Bool)

(assert (=> b!96690 (= c!16332 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!96691 () Bool)

(declare-fun call!9807 () Bool)

(assert (=> b!96691 (= e!63049 call!9807)))

(declare-fun e!63047 () Bool)

(declare-fun b!96692 () Bool)

(assert (=> b!96692 (= e!63047 (contains!801 (ite c!16173 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!96693 () Bool)

(assert (=> b!96693 (= e!63049 call!9807)))

(declare-fun d!25669 () Bool)

(declare-fun res!48794 () Bool)

(declare-fun e!63048 () Bool)

(assert (=> d!25669 (=> res!48794 e!63048)))

(assert (=> d!25669 (= res!48794 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> d!25669 (= (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16173 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599))) e!63048)))

(declare-fun b!96694 () Bool)

(assert (=> b!96694 (= e!63048 e!63046)))

(declare-fun res!48795 () Bool)

(assert (=> b!96694 (=> (not res!48795) (not e!63046))))

(assert (=> b!96694 (= res!48795 (not e!63047))))

(declare-fun res!48793 () Bool)

(assert (=> b!96694 (=> (not res!48793) (not e!63047))))

(assert (=> b!96694 (= res!48793 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun bm!9804 () Bool)

(assert (=> bm!9804 (= call!9807 (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16332 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!16173 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599))) (ite c!16173 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)))))))

(assert (= (and d!25669 (not res!48794)) b!96694))

(assert (= (and b!96694 res!48793) b!96692))

(assert (= (and b!96694 res!48795) b!96690))

(assert (= (and b!96690 c!16332) b!96691))

(assert (= (and b!96690 (not c!16332)) b!96693))

(assert (= (or b!96691 b!96693) bm!9804))

(declare-fun m!105299 () Bool)

(assert (=> b!96690 m!105299))

(assert (=> b!96690 m!105299))

(declare-fun m!105301 () Bool)

(assert (=> b!96690 m!105301))

(assert (=> b!96692 m!105299))

(assert (=> b!96692 m!105299))

(declare-fun m!105303 () Bool)

(assert (=> b!96692 m!105303))

(assert (=> b!96694 m!105299))

(assert (=> b!96694 m!105299))

(assert (=> b!96694 m!105301))

(assert (=> bm!9804 m!105299))

(declare-fun m!105305 () Bool)

(assert (=> bm!9804 m!105305))

(assert (=> bm!9737 d!25669))

(declare-fun d!25671 () Bool)

(declare-fun e!63051 () Bool)

(assert (=> d!25671 e!63051))

(declare-fun res!48796 () Bool)

(assert (=> d!25671 (=> res!48796 e!63051)))

(declare-fun lt!48345 () Bool)

(assert (=> d!25671 (= res!48796 (not lt!48345))))

(declare-fun lt!48343 () Bool)

(assert (=> d!25671 (= lt!48345 lt!48343)))

(declare-fun lt!48344 () Unit!2887)

(declare-fun e!63050 () Unit!2887)

(assert (=> d!25671 (= lt!48344 e!63050)))

(declare-fun c!16333 () Bool)

(assert (=> d!25671 (= c!16333 lt!48343)))

(assert (=> d!25671 (= lt!48343 (containsKey!152 (toList!786 (getCurrentListMap!467 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(assert (=> d!25671 (= (contains!800 (getCurrentListMap!467 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))) lt!48345)))

(declare-fun b!96695 () Bool)

(declare-fun lt!48346 () Unit!2887)

(assert (=> b!96695 (= e!63050 lt!48346)))

(assert (=> b!96695 (= lt!48346 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 (getCurrentListMap!467 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(assert (=> b!96695 (isDefined!102 (getValueByKey!148 (toList!786 (getCurrentListMap!467 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707))))))

(declare-fun b!96696 () Bool)

(declare-fun Unit!2925 () Unit!2887)

(assert (=> b!96696 (= e!63050 Unit!2925)))

(declare-fun b!96697 () Bool)

(assert (=> b!96697 (= e!63051 (isDefined!102 (getValueByKey!148 (toList!786 (getCurrentListMap!467 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!47707)))))))

(assert (= (and d!25671 c!16333) b!96695))

(assert (= (and d!25671 (not c!16333)) b!96696))

(assert (= (and d!25671 (not res!48796)) b!96697))

(assert (=> d!25671 m!103863))

(declare-fun m!105307 () Bool)

(assert (=> d!25671 m!105307))

(assert (=> b!96695 m!103863))

(declare-fun m!105309 () Bool)

(assert (=> b!96695 m!105309))

(assert (=> b!96695 m!103863))

(declare-fun m!105311 () Bool)

(assert (=> b!96695 m!105311))

(assert (=> b!96695 m!105311))

(declare-fun m!105313 () Bool)

(assert (=> b!96695 m!105313))

(assert (=> b!96697 m!103863))

(assert (=> b!96697 m!105311))

(assert (=> b!96697 m!105311))

(assert (=> b!96697 m!105313))

(assert (=> b!96053 d!25671))

(declare-fun d!25673 () Bool)

(declare-fun e!63064 () Bool)

(assert (=> d!25673 e!63064))

(declare-fun res!48800 () Bool)

(assert (=> d!25673 (=> (not res!48800) (not e!63064))))

(assert (=> d!25673 (= res!48800 (or (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))))

(declare-fun lt!48356 () ListLongMap!1541)

(declare-fun lt!48349 () ListLongMap!1541)

(assert (=> d!25673 (= lt!48356 lt!48349)))

(declare-fun lt!48348 () Unit!2887)

(declare-fun e!63056 () Unit!2887)

(assert (=> d!25673 (= lt!48348 e!63056)))

(declare-fun c!16336 () Bool)

(declare-fun e!63061 () Bool)

(assert (=> d!25673 (= c!16336 e!63061)))

(declare-fun res!48802 () Bool)

(assert (=> d!25673 (=> (not res!48802) (not e!63061))))

(assert (=> d!25673 (= res!48802 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun e!63062 () ListLongMap!1541)

(assert (=> d!25673 (= lt!48349 e!63062)))

(declare-fun c!16339 () Bool)

(assert (=> d!25673 (= c!16339 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25673 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25673 (= (getCurrentListMap!467 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48356)))

(declare-fun b!96698 () Bool)

(declare-fun e!63059 () ListLongMap!1541)

(assert (=> b!96698 (= e!63062 e!63059)))

(declare-fun c!16334 () Bool)

(assert (=> b!96698 (= c!16334 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96699 () Bool)

(declare-fun e!63053 () Bool)

(assert (=> b!96699 (= e!63053 (= (apply!91 lt!48356 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96700 () Bool)

(declare-fun e!63058 () Bool)

(assert (=> b!96700 (= e!63064 e!63058)))

(declare-fun c!16335 () Bool)

(assert (=> b!96700 (= c!16335 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96701 () Bool)

(declare-fun call!9810 () ListLongMap!1541)

(assert (=> b!96701 (= e!63062 (+!137 call!9810 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun bm!9805 () Bool)

(declare-fun call!9809 () ListLongMap!1541)

(declare-fun call!9814 () ListLongMap!1541)

(assert (=> bm!9805 (= call!9809 call!9814)))

(declare-fun b!96702 () Bool)

(declare-fun c!16337 () Bool)

(assert (=> b!96702 (= c!16337 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63063 () ListLongMap!1541)

(assert (=> b!96702 (= e!63059 e!63063)))

(declare-fun b!96703 () Bool)

(declare-fun res!48797 () Bool)

(assert (=> b!96703 (=> (not res!48797) (not e!63064))))

(declare-fun e!63060 () Bool)

(assert (=> b!96703 (= res!48797 e!63060)))

(declare-fun res!48801 () Bool)

(assert (=> b!96703 (=> res!48801 e!63060)))

(declare-fun e!63052 () Bool)

(assert (=> b!96703 (= res!48801 (not e!63052))))

(declare-fun res!48803 () Bool)

(assert (=> b!96703 (=> (not res!48803) (not e!63052))))

(assert (=> b!96703 (= res!48803 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun bm!9806 () Bool)

(declare-fun call!9811 () ListLongMap!1541)

(assert (=> bm!9806 (= call!9810 (+!137 (ite c!16339 call!9814 (ite c!16334 call!9809 call!9811)) (ite (or c!16339 c!16334) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!96704 () Bool)

(assert (=> b!96704 (= e!63061 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96705 () Bool)

(declare-fun e!63057 () Bool)

(assert (=> b!96705 (= e!63060 e!63057)))

(declare-fun res!48798 () Bool)

(assert (=> b!96705 (=> (not res!48798) (not e!63057))))

(assert (=> b!96705 (= res!48798 (contains!800 lt!48356 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96705 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96706 () Bool)

(declare-fun call!9812 () Bool)

(assert (=> b!96706 (= e!63058 (not call!9812))))

(declare-fun b!96707 () Bool)

(assert (=> b!96707 (= e!63063 call!9811)))

(declare-fun bm!9807 () Bool)

(assert (=> bm!9807 (= call!9811 call!9809)))

(declare-fun b!96708 () Bool)

(declare-fun e!63054 () Bool)

(declare-fun call!9808 () Bool)

(assert (=> b!96708 (= e!63054 (not call!9808))))

(declare-fun bm!9808 () Bool)

(assert (=> bm!9808 (= call!9808 (contains!800 lt!48356 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96709 () Bool)

(assert (=> b!96709 (= e!63057 (= (apply!91 lt!48356 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 lt!47712) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96709 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 lt!47712)))))

(assert (=> b!96709 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96710 () Bool)

(declare-fun Unit!2926 () Unit!2887)

(assert (=> b!96710 (= e!63056 Unit!2926)))

(declare-fun bm!9809 () Bool)

(declare-fun call!9813 () ListLongMap!1541)

(assert (=> bm!9809 (= call!9813 call!9810)))

(declare-fun b!96711 () Bool)

(declare-fun res!48804 () Bool)

(assert (=> b!96711 (=> (not res!48804) (not e!63064))))

(assert (=> b!96711 (= res!48804 e!63054)))

(declare-fun c!16338 () Bool)

(assert (=> b!96711 (= c!16338 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!96712 () Bool)

(assert (=> b!96712 (= e!63059 call!9813)))

(declare-fun b!96713 () Bool)

(declare-fun lt!48360 () Unit!2887)

(assert (=> b!96713 (= e!63056 lt!48360)))

(declare-fun lt!48354 () ListLongMap!1541)

(assert (=> b!96713 (= lt!48354 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48364 () (_ BitVec 64))

(assert (=> b!96713 (= lt!48364 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48353 () (_ BitVec 64))

(assert (=> b!96713 (= lt!48353 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48355 () Unit!2887)

(assert (=> b!96713 (= lt!48355 (addStillContains!67 lt!48354 lt!48364 (zeroValue!2342 newMap!16) lt!48353))))

(assert (=> b!96713 (contains!800 (+!137 lt!48354 (tuple2!2337 lt!48364 (zeroValue!2342 newMap!16))) lt!48353)))

(declare-fun lt!48363 () Unit!2887)

(assert (=> b!96713 (= lt!48363 lt!48355)))

(declare-fun lt!48357 () ListLongMap!1541)

(assert (=> b!96713 (= lt!48357 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48361 () (_ BitVec 64))

(assert (=> b!96713 (= lt!48361 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48352 () (_ BitVec 64))

(assert (=> b!96713 (= lt!48352 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48362 () Unit!2887)

(assert (=> b!96713 (= lt!48362 (addApplyDifferent!67 lt!48357 lt!48361 (minValue!2342 newMap!16) lt!48352))))

(assert (=> b!96713 (= (apply!91 (+!137 lt!48357 (tuple2!2337 lt!48361 (minValue!2342 newMap!16))) lt!48352) (apply!91 lt!48357 lt!48352))))

(declare-fun lt!48350 () Unit!2887)

(assert (=> b!96713 (= lt!48350 lt!48362)))

(declare-fun lt!48347 () ListLongMap!1541)

(assert (=> b!96713 (= lt!48347 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48358 () (_ BitVec 64))

(assert (=> b!96713 (= lt!48358 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48366 () (_ BitVec 64))

(assert (=> b!96713 (= lt!48366 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48368 () Unit!2887)

(assert (=> b!96713 (= lt!48368 (addApplyDifferent!67 lt!48347 lt!48358 (zeroValue!2342 newMap!16) lt!48366))))

(assert (=> b!96713 (= (apply!91 (+!137 lt!48347 (tuple2!2337 lt!48358 (zeroValue!2342 newMap!16))) lt!48366) (apply!91 lt!48347 lt!48366))))

(declare-fun lt!48367 () Unit!2887)

(assert (=> b!96713 (= lt!48367 lt!48368)))

(declare-fun lt!48365 () ListLongMap!1541)

(assert (=> b!96713 (= lt!48365 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48359 () (_ BitVec 64))

(assert (=> b!96713 (= lt!48359 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48351 () (_ BitVec 64))

(assert (=> b!96713 (= lt!48351 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96713 (= lt!48360 (addApplyDifferent!67 lt!48365 lt!48359 (minValue!2342 newMap!16) lt!48351))))

(assert (=> b!96713 (= (apply!91 (+!137 lt!48365 (tuple2!2337 lt!48359 (minValue!2342 newMap!16))) lt!48351) (apply!91 lt!48365 lt!48351))))

(declare-fun b!96714 () Bool)

(assert (=> b!96714 (= e!63058 e!63053)))

(declare-fun res!48805 () Bool)

(assert (=> b!96714 (= res!48805 call!9812)))

(assert (=> b!96714 (=> (not res!48805) (not e!63053))))

(declare-fun b!96715 () Bool)

(assert (=> b!96715 (= e!63052 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9810 () Bool)

(assert (=> bm!9810 (= call!9814 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) lt!47712 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9811 () Bool)

(assert (=> bm!9811 (= call!9812 (contains!800 lt!48356 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96716 () Bool)

(assert (=> b!96716 (= e!63063 call!9813)))

(declare-fun b!96717 () Bool)

(declare-fun e!63055 () Bool)

(assert (=> b!96717 (= e!63055 (= (apply!91 lt!48356 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96718 () Bool)

(assert (=> b!96718 (= e!63054 e!63055)))

(declare-fun res!48799 () Bool)

(assert (=> b!96718 (= res!48799 call!9808)))

(assert (=> b!96718 (=> (not res!48799) (not e!63055))))

(assert (= (and d!25673 c!16339) b!96701))

(assert (= (and d!25673 (not c!16339)) b!96698))

(assert (= (and b!96698 c!16334) b!96712))

(assert (= (and b!96698 (not c!16334)) b!96702))

(assert (= (and b!96702 c!16337) b!96716))

(assert (= (and b!96702 (not c!16337)) b!96707))

(assert (= (or b!96716 b!96707) bm!9807))

(assert (= (or b!96712 bm!9807) bm!9805))

(assert (= (or b!96712 b!96716) bm!9809))

(assert (= (or b!96701 bm!9805) bm!9810))

(assert (= (or b!96701 bm!9809) bm!9806))

(assert (= (and d!25673 res!48802) b!96704))

(assert (= (and d!25673 c!16336) b!96713))

(assert (= (and d!25673 (not c!16336)) b!96710))

(assert (= (and d!25673 res!48800) b!96703))

(assert (= (and b!96703 res!48803) b!96715))

(assert (= (and b!96703 (not res!48801)) b!96705))

(assert (= (and b!96705 res!48798) b!96709))

(assert (= (and b!96703 res!48797) b!96711))

(assert (= (and b!96711 c!16338) b!96718))

(assert (= (and b!96711 (not c!16338)) b!96708))

(assert (= (and b!96718 res!48799) b!96717))

(assert (= (or b!96718 b!96708) bm!9808))

(assert (= (and b!96711 res!48804) b!96700))

(assert (= (and b!96700 c!16335) b!96714))

(assert (= (and b!96700 (not c!16335)) b!96706))

(assert (= (and b!96714 res!48805) b!96699))

(assert (= (or b!96714 b!96706) bm!9811))

(declare-fun b_lambda!4293 () Bool)

(assert (=> (not b_lambda!4293) (not b!96709)))

(assert (=> b!96709 t!5535))

(declare-fun b_and!5917 () Bool)

(assert (= b_and!5913 (and (=> t!5535 result!3233) b_and!5917)))

(assert (=> b!96709 t!5537))

(declare-fun b_and!5919 () Bool)

(assert (= b_and!5915 (and (=> t!5537 result!3235) b_and!5919)))

(assert (=> b!96705 m!104003))

(assert (=> b!96705 m!104003))

(declare-fun m!105315 () Bool)

(assert (=> b!96705 m!105315))

(declare-fun m!105317 () Bool)

(assert (=> b!96713 m!105317))

(declare-fun m!105319 () Bool)

(assert (=> b!96713 m!105319))

(declare-fun m!105321 () Bool)

(assert (=> b!96713 m!105321))

(declare-fun m!105323 () Bool)

(assert (=> b!96713 m!105323))

(declare-fun m!105325 () Bool)

(assert (=> b!96713 m!105325))

(assert (=> b!96713 m!105321))

(declare-fun m!105327 () Bool)

(assert (=> b!96713 m!105327))

(declare-fun m!105329 () Bool)

(assert (=> b!96713 m!105329))

(declare-fun m!105331 () Bool)

(assert (=> b!96713 m!105331))

(declare-fun m!105333 () Bool)

(assert (=> b!96713 m!105333))

(declare-fun m!105335 () Bool)

(assert (=> b!96713 m!105335))

(declare-fun m!105337 () Bool)

(assert (=> b!96713 m!105337))

(declare-fun m!105339 () Bool)

(assert (=> b!96713 m!105339))

(assert (=> b!96713 m!105331))

(declare-fun m!105341 () Bool)

(assert (=> b!96713 m!105341))

(assert (=> b!96713 m!105333))

(assert (=> b!96713 m!104003))

(declare-fun m!105343 () Bool)

(assert (=> b!96713 m!105343))

(assert (=> b!96713 m!105337))

(declare-fun m!105345 () Bool)

(assert (=> b!96713 m!105345))

(declare-fun m!105347 () Bool)

(assert (=> b!96713 m!105347))

(declare-fun m!105349 () Bool)

(assert (=> b!96709 m!105349))

(assert (=> b!96709 m!104003))

(declare-fun m!105351 () Bool)

(assert (=> b!96709 m!105351))

(assert (=> b!96709 m!105349))

(assert (=> b!96709 m!104043))

(declare-fun m!105353 () Bool)

(assert (=> b!96709 m!105353))

(assert (=> b!96709 m!104003))

(assert (=> b!96709 m!104043))

(declare-fun m!105355 () Bool)

(assert (=> b!96701 m!105355))

(assert (=> d!25673 m!103977))

(declare-fun m!105357 () Bool)

(assert (=> bm!9808 m!105357))

(assert (=> b!96704 m!104003))

(assert (=> b!96704 m!104003))

(assert (=> b!96704 m!104051))

(declare-fun m!105359 () Bool)

(assert (=> bm!9806 m!105359))

(declare-fun m!105361 () Bool)

(assert (=> b!96717 m!105361))

(declare-fun m!105363 () Bool)

(assert (=> bm!9811 m!105363))

(declare-fun m!105365 () Bool)

(assert (=> b!96699 m!105365))

(assert (=> b!96715 m!104003))

(assert (=> b!96715 m!104003))

(assert (=> b!96715 m!104051))

(assert (=> bm!9810 m!105339))

(assert (=> b!96053 d!25673))

(declare-fun d!25675 () Bool)

(declare-fun res!48806 () Bool)

(declare-fun e!63065 () Bool)

(assert (=> d!25675 (=> res!48806 e!63065)))

(assert (=> d!25675 (= res!48806 (= (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25675 (= (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!63065)))

(declare-fun b!96719 () Bool)

(declare-fun e!63066 () Bool)

(assert (=> b!96719 (= e!63065 e!63066)))

(declare-fun res!48807 () Bool)

(assert (=> b!96719 (=> (not res!48807) (not e!63066))))

(assert (=> b!96719 (= res!48807 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!96720 () Bool)

(assert (=> b!96720 (= e!63066 (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!25675 (not res!48806)) b!96719))

(assert (= (and b!96719 res!48807) b!96720))

(declare-fun m!105367 () Bool)

(assert (=> d!25675 m!105367))

(assert (=> b!96720 m!103745))

(declare-fun m!105369 () Bool)

(assert (=> b!96720 m!105369))

(assert (=> b!96085 d!25675))

(declare-fun b!96722 () Bool)

(declare-fun e!63067 () Option!154)

(declare-fun e!63068 () Option!154)

(assert (=> b!96722 (= e!63067 e!63068)))

(declare-fun c!16341 () Bool)

(assert (=> b!96722 (= c!16341 (and ((_ is Cons!1599) (toList!786 lt!47897)) (not (= (_1!1178 (h!2192 (toList!786 lt!47897))) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun d!25677 () Bool)

(declare-fun c!16340 () Bool)

(assert (=> d!25677 (= c!16340 (and ((_ is Cons!1599) (toList!786 lt!47897)) (= (_1!1178 (h!2192 (toList!786 lt!47897))) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25677 (= (getValueByKey!148 (toList!786 lt!47897) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!63067)))

(declare-fun b!96723 () Bool)

(assert (=> b!96723 (= e!63068 (getValueByKey!148 (t!5529 (toList!786 lt!47897)) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96724 () Bool)

(assert (=> b!96724 (= e!63068 None!152)))

(declare-fun b!96721 () Bool)

(assert (=> b!96721 (= e!63067 (Some!153 (_2!1178 (h!2192 (toList!786 lt!47897)))))))

(assert (= (and d!25677 c!16340) b!96721))

(assert (= (and d!25677 (not c!16340)) b!96722))

(assert (= (and b!96722 c!16341) b!96723))

(assert (= (and b!96722 (not c!16341)) b!96724))

(declare-fun m!105371 () Bool)

(assert (=> b!96723 m!105371))

(assert (=> b!96082 d!25677))

(declare-fun b!96725 () Bool)

(assert (=> b!96725 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> b!96725 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712))))))

(declare-fun lt!48372 () ListLongMap!1541)

(declare-fun e!63074 () Bool)

(assert (=> b!96725 (= e!63074 (= (apply!91 lt!48372 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun call!9815 () ListLongMap!1541)

(declare-fun bm!9812 () Bool)

(assert (=> bm!9812 (= call!9815 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712) (mask!6542 newMap!16) (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16)))))

(declare-fun b!96726 () Bool)

(declare-fun e!63069 () Bool)

(declare-fun e!63072 () Bool)

(assert (=> b!96726 (= e!63069 e!63072)))

(declare-fun c!16343 () Bool)

(declare-fun e!63073 () Bool)

(assert (=> b!96726 (= c!16343 e!63073)))

(declare-fun res!48808 () Bool)

(assert (=> b!96726 (=> (not res!48808) (not e!63073))))

(assert (=> b!96726 (= res!48808 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96727 () Bool)

(declare-fun e!63075 () ListLongMap!1541)

(assert (=> b!96727 (= e!63075 (ListLongMap!1542 Nil!1600))))

(declare-fun b!96728 () Bool)

(declare-fun e!63070 () Bool)

(assert (=> b!96728 (= e!63070 (isEmpty!358 lt!48372))))

(declare-fun b!96729 () Bool)

(declare-fun res!48809 () Bool)

(assert (=> b!96729 (=> (not res!48809) (not e!63069))))

(assert (=> b!96729 (= res!48809 (not (contains!800 lt!48372 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96730 () Bool)

(assert (=> b!96730 (= e!63070 (= lt!48372 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712) (mask!6542 newMap!16) (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16))))))

(declare-fun b!96731 () Bool)

(declare-fun e!63071 () ListLongMap!1541)

(assert (=> b!96731 (= e!63075 e!63071)))

(declare-fun c!16342 () Bool)

(assert (=> b!96731 (= c!16342 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96733 () Bool)

(assert (=> b!96733 (= e!63073 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96733 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!96734 () Bool)

(declare-fun lt!48371 () Unit!2887)

(declare-fun lt!48370 () Unit!2887)

(assert (=> b!96734 (= lt!48371 lt!48370)))

(declare-fun lt!48373 () ListLongMap!1541)

(declare-fun lt!48369 () (_ BitVec 64))

(declare-fun lt!48375 () (_ BitVec 64))

(declare-fun lt!48374 () V!3139)

(assert (=> b!96734 (not (contains!800 (+!137 lt!48373 (tuple2!2337 lt!48375 lt!48374)) lt!48369))))

(assert (=> b!96734 (= lt!48370 (addStillNotContains!41 lt!48373 lt!48375 lt!48374 lt!48369))))

(assert (=> b!96734 (= lt!48369 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!96734 (= lt!48374 (get!1286 (select (arr!2003 (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!96734 (= lt!48375 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96734 (= lt!48373 call!9815)))

(assert (=> b!96734 (= e!63071 (+!137 call!9815 (tuple2!2337 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (get!1286 (select (arr!2003 (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!96735 () Bool)

(assert (=> b!96735 (= e!63072 e!63070)))

(declare-fun c!16345 () Bool)

(assert (=> b!96735 (= c!16345 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96736 () Bool)

(assert (=> b!96736 (= e!63071 call!9815)))

(declare-fun b!96732 () Bool)

(assert (=> b!96732 (= e!63072 e!63074)))

(assert (=> b!96732 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun res!48811 () Bool)

(assert (=> b!96732 (= res!48811 (contains!800 lt!48372 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96732 (=> (not res!48811) (not e!63074))))

(declare-fun d!25679 () Bool)

(assert (=> d!25679 e!63069))

(declare-fun res!48810 () Bool)

(assert (=> d!25679 (=> (not res!48810) (not e!63069))))

(assert (=> d!25679 (= res!48810 (not (contains!800 lt!48372 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25679 (= lt!48372 e!63075)))

(declare-fun c!16344 () Bool)

(assert (=> d!25679 (= c!16344 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25679 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25679 (= (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (ite (or c!16115 c!16107) (_values!2440 newMap!16) lt!47712) (mask!6542 newMap!16) (ite (and c!16115 c!16114) lt!47708 (extraKeys!2282 newMap!16)) (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48372)))

(assert (= (and d!25679 c!16344) b!96727))

(assert (= (and d!25679 (not c!16344)) b!96731))

(assert (= (and b!96731 c!16342) b!96734))

(assert (= (and b!96731 (not c!16342)) b!96736))

(assert (= (or b!96734 b!96736) bm!9812))

(assert (= (and d!25679 res!48810) b!96729))

(assert (= (and b!96729 res!48809) b!96726))

(assert (= (and b!96726 res!48808) b!96733))

(assert (= (and b!96726 c!16343) b!96732))

(assert (= (and b!96726 (not c!16343)) b!96735))

(assert (= (and b!96732 res!48811) b!96725))

(assert (= (and b!96735 c!16345) b!96730))

(assert (= (and b!96735 (not c!16345)) b!96728))

(declare-fun b_lambda!4295 () Bool)

(assert (=> (not b_lambda!4295) (not b!96725)))

(assert (=> b!96725 t!5535))

(declare-fun b_and!5921 () Bool)

(assert (= b_and!5917 (and (=> t!5535 result!3233) b_and!5921)))

(assert (=> b!96725 t!5537))

(declare-fun b_and!5923 () Bool)

(assert (= b_and!5919 (and (=> t!5537 result!3235) b_and!5923)))

(declare-fun b_lambda!4297 () Bool)

(assert (=> (not b_lambda!4297) (not b!96734)))

(assert (=> b!96734 t!5535))

(declare-fun b_and!5925 () Bool)

(assert (= b_and!5921 (and (=> t!5535 result!3233) b_and!5925)))

(assert (=> b!96734 t!5537))

(declare-fun b_and!5927 () Bool)

(assert (= b_and!5923 (and (=> t!5537 result!3235) b_and!5927)))

(assert (=> b!96732 m!104003))

(assert (=> b!96732 m!104003))

(declare-fun m!105373 () Bool)

(assert (=> b!96732 m!105373))

(declare-fun m!105375 () Bool)

(assert (=> bm!9812 m!105375))

(assert (=> b!96725 m!104003))

(assert (=> b!96725 m!104327))

(assert (=> b!96725 m!104043))

(assert (=> b!96725 m!104327))

(assert (=> b!96725 m!104043))

(assert (=> b!96725 m!104331))

(assert (=> b!96725 m!104003))

(declare-fun m!105377 () Bool)

(assert (=> b!96725 m!105377))

(declare-fun m!105379 () Bool)

(assert (=> d!25679 m!105379))

(assert (=> d!25679 m!103977))

(declare-fun m!105381 () Bool)

(assert (=> b!96728 m!105381))

(declare-fun m!105383 () Bool)

(assert (=> b!96729 m!105383))

(assert (=> b!96731 m!104003))

(assert (=> b!96731 m!104003))

(assert (=> b!96731 m!104051))

(assert (=> b!96730 m!105375))

(assert (=> b!96734 m!104003))

(declare-fun m!105385 () Bool)

(assert (=> b!96734 m!105385))

(declare-fun m!105387 () Bool)

(assert (=> b!96734 m!105387))

(declare-fun m!105389 () Bool)

(assert (=> b!96734 m!105389))

(assert (=> b!96734 m!105387))

(assert (=> b!96734 m!104327))

(assert (=> b!96734 m!104043))

(assert (=> b!96734 m!104327))

(assert (=> b!96734 m!104043))

(assert (=> b!96734 m!104331))

(declare-fun m!105391 () Bool)

(assert (=> b!96734 m!105391))

(assert (=> b!96733 m!104003))

(assert (=> b!96733 m!104003))

(assert (=> b!96733 m!104051))

(assert (=> bm!9750 d!25679))

(declare-fun d!25681 () Bool)

(declare-fun e!63077 () Bool)

(assert (=> d!25681 e!63077))

(declare-fun res!48812 () Bool)

(assert (=> d!25681 (=> res!48812 e!63077)))

(declare-fun lt!48378 () Bool)

(assert (=> d!25681 (= res!48812 (not lt!48378))))

(declare-fun lt!48376 () Bool)

(assert (=> d!25681 (= lt!48378 lt!48376)))

(declare-fun lt!48377 () Unit!2887)

(declare-fun e!63076 () Unit!2887)

(assert (=> d!25681 (= lt!48377 e!63076)))

(declare-fun c!16346 () Bool)

(assert (=> d!25681 (= c!16346 lt!48376)))

(assert (=> d!25681 (= lt!48376 (containsKey!152 (toList!786 lt!47989) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25681 (= (contains!800 lt!47989 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48378)))

(declare-fun b!96737 () Bool)

(declare-fun lt!48379 () Unit!2887)

(assert (=> b!96737 (= e!63076 lt!48379)))

(assert (=> b!96737 (= lt!48379 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47989) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> b!96737 (isDefined!102 (getValueByKey!148 (toList!786 lt!47989) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96738 () Bool)

(declare-fun Unit!2927 () Unit!2887)

(assert (=> b!96738 (= e!63076 Unit!2927)))

(declare-fun b!96739 () Bool)

(assert (=> b!96739 (= e!63077 (isDefined!102 (getValueByKey!148 (toList!786 lt!47989) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (= (and d!25681 c!16346) b!96737))

(assert (= (and d!25681 (not c!16346)) b!96738))

(assert (= (and d!25681 (not res!48812)) b!96739))

(declare-fun m!105393 () Bool)

(assert (=> d!25681 m!105393))

(declare-fun m!105395 () Bool)

(assert (=> b!96737 m!105395))

(assert (=> b!96737 m!104395))

(assert (=> b!96737 m!104395))

(declare-fun m!105397 () Bool)

(assert (=> b!96737 m!105397))

(assert (=> b!96739 m!104395))

(assert (=> b!96739 m!104395))

(assert (=> b!96739 m!105397))

(assert (=> d!25377 d!25681))

(declare-fun b!96741 () Bool)

(declare-fun e!63078 () Option!154)

(declare-fun e!63079 () Option!154)

(assert (=> b!96741 (= e!63078 e!63079)))

(declare-fun c!16348 () Bool)

(assert (=> b!96741 (= c!16348 (and ((_ is Cons!1599) lt!47988) (not (= (_1!1178 (h!2192 lt!47988)) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun c!16347 () Bool)

(declare-fun d!25683 () Bool)

(assert (=> d!25683 (= c!16347 (and ((_ is Cons!1599) lt!47988) (= (_1!1178 (h!2192 lt!47988)) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25683 (= (getValueByKey!148 lt!47988 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) e!63078)))

(declare-fun b!96742 () Bool)

(assert (=> b!96742 (= e!63079 (getValueByKey!148 (t!5529 lt!47988) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96743 () Bool)

(assert (=> b!96743 (= e!63079 None!152)))

(declare-fun b!96740 () Bool)

(assert (=> b!96740 (= e!63078 (Some!153 (_2!1178 (h!2192 lt!47988))))))

(assert (= (and d!25683 c!16347) b!96740))

(assert (= (and d!25683 (not c!16347)) b!96741))

(assert (= (and b!96741 c!16348) b!96742))

(assert (= (and b!96741 (not c!16348)) b!96743))

(declare-fun m!105399 () Bool)

(assert (=> b!96742 m!105399))

(assert (=> d!25377 d!25683))

(declare-fun d!25685 () Bool)

(assert (=> d!25685 (= (getValueByKey!148 lt!47988 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun lt!48380 () Unit!2887)

(assert (=> d!25685 (= lt!48380 (choose!591 lt!47988 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun e!63080 () Bool)

(assert (=> d!25685 e!63080))

(declare-fun res!48813 () Bool)

(assert (=> d!25685 (=> (not res!48813) (not e!63080))))

(assert (=> d!25685 (= res!48813 (isStrictlySorted!298 lt!47988))))

(assert (=> d!25685 (= (lemmaContainsTupThenGetReturnValue!66 lt!47988 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48380)))

(declare-fun b!96744 () Bool)

(declare-fun res!48814 () Bool)

(assert (=> b!96744 (=> (not res!48814) (not e!63080))))

(assert (=> b!96744 (= res!48814 (containsKey!152 lt!47988 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96745 () Bool)

(assert (=> b!96745 (= e!63080 (contains!802 lt!47988 (tuple2!2337 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (= (and d!25685 res!48813) b!96744))

(assert (= (and b!96744 res!48814) b!96745))

(assert (=> d!25685 m!104389))

(declare-fun m!105401 () Bool)

(assert (=> d!25685 m!105401))

(declare-fun m!105403 () Bool)

(assert (=> d!25685 m!105403))

(declare-fun m!105405 () Bool)

(assert (=> b!96744 m!105405))

(declare-fun m!105407 () Bool)

(assert (=> b!96745 m!105407))

(assert (=> d!25377 d!25685))

(declare-fun b!96746 () Bool)

(declare-fun e!63084 () List!1603)

(assert (=> b!96746 (= e!63084 (insertStrictlySorted!68 (t!5529 (toList!786 lt!47775)) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96748 () Bool)

(declare-fun e!63081 () List!1603)

(declare-fun call!9817 () List!1603)

(assert (=> b!96748 (= e!63081 call!9817)))

(declare-fun b!96749 () Bool)

(declare-fun e!63085 () List!1603)

(declare-fun call!9816 () List!1603)

(assert (=> b!96749 (= e!63085 call!9816)))

(declare-fun b!96750 () Bool)

(declare-fun e!63083 () List!1603)

(declare-fun call!9818 () List!1603)

(assert (=> b!96750 (= e!63083 call!9818)))

(declare-fun bm!9813 () Bool)

(assert (=> bm!9813 (= call!9818 call!9817)))

(declare-fun e!63082 () Bool)

(declare-fun b!96751 () Bool)

(declare-fun lt!48381 () List!1603)

(assert (=> b!96751 (= e!63082 (contains!802 lt!48381 (tuple2!2337 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun bm!9814 () Bool)

(assert (=> bm!9814 (= call!9816 call!9818)))

(declare-fun c!16350 () Bool)

(declare-fun b!96752 () Bool)

(declare-fun c!16352 () Bool)

(assert (=> b!96752 (= e!63084 (ite c!16350 (t!5529 (toList!786 lt!47775)) (ite c!16352 (Cons!1599 (h!2192 (toList!786 lt!47775)) (t!5529 (toList!786 lt!47775))) Nil!1600)))))

(declare-fun b!96747 () Bool)

(declare-fun res!48815 () Bool)

(assert (=> b!96747 (=> (not res!48815) (not e!63082))))

(assert (=> b!96747 (= res!48815 (containsKey!152 lt!48381 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun d!25687 () Bool)

(assert (=> d!25687 e!63082))

(declare-fun res!48816 () Bool)

(assert (=> d!25687 (=> (not res!48816) (not e!63082))))

(assert (=> d!25687 (= res!48816 (isStrictlySorted!298 lt!48381))))

(assert (=> d!25687 (= lt!48381 e!63081)))

(declare-fun c!16349 () Bool)

(assert (=> d!25687 (= c!16349 (and ((_ is Cons!1599) (toList!786 lt!47775)) (bvslt (_1!1178 (h!2192 (toList!786 lt!47775))) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25687 (isStrictlySorted!298 (toList!786 lt!47775))))

(assert (=> d!25687 (= (insertStrictlySorted!68 (toList!786 lt!47775) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48381)))

(declare-fun b!96753 () Bool)

(assert (=> b!96753 (= c!16352 (and ((_ is Cons!1599) (toList!786 lt!47775)) (bvsgt (_1!1178 (h!2192 (toList!786 lt!47775))) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> b!96753 (= e!63083 e!63085)))

(declare-fun bm!9815 () Bool)

(assert (=> bm!9815 (= call!9817 ($colon$colon!76 e!63084 (ite c!16349 (h!2192 (toList!786 lt!47775)) (tuple2!2337 (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun c!16351 () Bool)

(assert (=> bm!9815 (= c!16351 c!16349)))

(declare-fun b!96754 () Bool)

(assert (=> b!96754 (= e!63081 e!63083)))

(assert (=> b!96754 (= c!16350 (and ((_ is Cons!1599) (toList!786 lt!47775)) (= (_1!1178 (h!2192 (toList!786 lt!47775))) (_1!1178 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96755 () Bool)

(assert (=> b!96755 (= e!63085 call!9816)))

(assert (= (and d!25687 c!16349) b!96748))

(assert (= (and d!25687 (not c!16349)) b!96754))

(assert (= (and b!96754 c!16350) b!96750))

(assert (= (and b!96754 (not c!16350)) b!96753))

(assert (= (and b!96753 c!16352) b!96749))

(assert (= (and b!96753 (not c!16352)) b!96755))

(assert (= (or b!96749 b!96755) bm!9814))

(assert (= (or b!96750 bm!9814) bm!9813))

(assert (= (or b!96748 bm!9813) bm!9815))

(assert (= (and bm!9815 c!16351) b!96746))

(assert (= (and bm!9815 (not c!16351)) b!96752))

(assert (= (and d!25687 res!48816) b!96747))

(assert (= (and b!96747 res!48815) b!96751))

(declare-fun m!105409 () Bool)

(assert (=> b!96746 m!105409))

(declare-fun m!105411 () Bool)

(assert (=> d!25687 m!105411))

(declare-fun m!105413 () Bool)

(assert (=> d!25687 m!105413))

(declare-fun m!105415 () Bool)

(assert (=> b!96751 m!105415))

(declare-fun m!105417 () Bool)

(assert (=> b!96747 m!105417))

(declare-fun m!105419 () Bool)

(assert (=> bm!9815 m!105419))

(assert (=> d!25377 d!25687))

(declare-fun d!25689 () Bool)

(assert (=> d!25689 (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!48382 () Unit!2887)

(assert (=> d!25689 (= lt!48382 (choose!587 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63086 () Bool)

(assert (=> d!25689 e!63086))

(declare-fun res!48817 () Bool)

(assert (=> d!25689 (=> (not res!48817) (not e!63086))))

(assert (=> d!25689 (= res!48817 (isStrictlySorted!298 (toList!786 lt!47784)))))

(assert (=> d!25689 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000) lt!48382)))

(declare-fun b!96756 () Bool)

(assert (=> b!96756 (= e!63086 (containsKey!152 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!25689 res!48817) b!96756))

(assert (=> d!25689 m!103999))

(assert (=> d!25689 m!103999))

(assert (=> d!25689 m!104001))

(declare-fun m!105421 () Bool)

(assert (=> d!25689 m!105421))

(assert (=> d!25689 m!105209))

(assert (=> b!96756 m!103995))

(assert (=> b!96003 d!25689))

(declare-fun d!25691 () Bool)

(assert (=> d!25691 (= (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!359 (getValueByKey!148 (toList!786 lt!47784) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!3984 () Bool)

(assert (= bs!3984 d!25691))

(assert (=> bs!3984 m!103999))

(declare-fun m!105423 () Bool)

(assert (=> bs!3984 m!105423))

(assert (=> b!96003 d!25691))

(assert (=> b!96003 d!25597))

(assert (=> d!25303 d!25451))

(declare-fun b!96758 () Bool)

(declare-fun e!63087 () Option!154)

(declare-fun e!63088 () Option!154)

(assert (=> b!96758 (= e!63087 e!63088)))

(declare-fun c!16354 () Bool)

(assert (=> b!96758 (= c!16354 (and ((_ is Cons!1599) (toList!786 lt!48121)) (not (= (_1!1178 (h!2192 (toList!786 lt!48121))) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!16353 () Bool)

(declare-fun d!25693 () Bool)

(assert (=> d!25693 (= c!16353 (and ((_ is Cons!1599) (toList!786 lt!48121)) (= (_1!1178 (h!2192 (toList!786 lt!48121))) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!25693 (= (getValueByKey!148 (toList!786 lt!48121) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!63087)))

(declare-fun b!96759 () Bool)

(assert (=> b!96759 (= e!63088 (getValueByKey!148 (t!5529 (toList!786 lt!48121)) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96760 () Bool)

(assert (=> b!96760 (= e!63088 None!152)))

(declare-fun b!96757 () Bool)

(assert (=> b!96757 (= e!63087 (Some!153 (_2!1178 (h!2192 (toList!786 lt!48121)))))))

(assert (= (and d!25693 c!16353) b!96757))

(assert (= (and d!25693 (not c!16353)) b!96758))

(assert (= (and b!96758 c!16354) b!96759))

(assert (= (and b!96758 (not c!16354)) b!96760))

(declare-fun m!105425 () Bool)

(assert (=> b!96759 m!105425))

(assert (=> b!96335 d!25693))

(declare-fun d!25695 () Bool)

(declare-fun e!63089 () Bool)

(assert (=> d!25695 e!63089))

(declare-fun res!48818 () Bool)

(assert (=> d!25695 (=> (not res!48818) (not e!63089))))

(declare-fun lt!48385 () ListLongMap!1541)

(assert (=> d!25695 (= res!48818 (contains!800 lt!48385 (_1!1178 (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun lt!48384 () List!1603)

(assert (=> d!25695 (= lt!48385 (ListLongMap!1542 lt!48384))))

(declare-fun lt!48383 () Unit!2887)

(declare-fun lt!48386 () Unit!2887)

(assert (=> d!25695 (= lt!48383 lt!48386)))

(assert (=> d!25695 (= (getValueByKey!148 lt!48384 (_1!1178 (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25695 (= lt!48386 (lemmaContainsTupThenGetReturnValue!66 lt!48384 (_1!1178 (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1178 (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25695 (= lt!48384 (insertStrictlySorted!68 (toList!786 (ite c!16218 call!9754 (ite c!16213 call!9749 call!9751))) (_1!1178 (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1178 (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25695 (= (+!137 (ite c!16218 call!9754 (ite c!16213 call!9749 call!9751)) (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) lt!48385)))

(declare-fun b!96761 () Bool)

(declare-fun res!48819 () Bool)

(assert (=> b!96761 (=> (not res!48819) (not e!63089))))

(assert (=> b!96761 (= res!48819 (= (getValueByKey!148 (toList!786 lt!48385) (_1!1178 (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))))

(declare-fun b!96762 () Bool)

(assert (=> b!96762 (= e!63089 (contains!802 (toList!786 lt!48385) (ite (or c!16218 c!16213) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (= (and d!25695 res!48818) b!96761))

(assert (= (and b!96761 res!48819) b!96762))

(declare-fun m!105427 () Bool)

(assert (=> d!25695 m!105427))

(declare-fun m!105429 () Bool)

(assert (=> d!25695 m!105429))

(declare-fun m!105431 () Bool)

(assert (=> d!25695 m!105431))

(declare-fun m!105433 () Bool)

(assert (=> d!25695 m!105433))

(declare-fun m!105435 () Bool)

(assert (=> b!96761 m!105435))

(declare-fun m!105437 () Bool)

(assert (=> b!96762 m!105437))

(assert (=> bm!9746 d!25695))

(declare-fun d!25697 () Bool)

(declare-fun e!63091 () Bool)

(assert (=> d!25697 e!63091))

(declare-fun res!48820 () Bool)

(assert (=> d!25697 (=> res!48820 e!63091)))

(declare-fun lt!48389 () Bool)

(assert (=> d!25697 (= res!48820 (not lt!48389))))

(declare-fun lt!48387 () Bool)

(assert (=> d!25697 (= lt!48389 lt!48387)))

(declare-fun lt!48388 () Unit!2887)

(declare-fun e!63090 () Unit!2887)

(assert (=> d!25697 (= lt!48388 e!63090)))

(declare-fun c!16355 () Bool)

(assert (=> d!25697 (= c!16355 lt!48387)))

(assert (=> d!25697 (= lt!48387 (containsKey!152 (toList!786 lt!47931) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!25697 (= (contains!800 lt!47931 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!48389)))

(declare-fun b!96763 () Bool)

(declare-fun lt!48390 () Unit!2887)

(assert (=> b!96763 (= e!63090 lt!48390)))

(assert (=> b!96763 (= lt!48390 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47931) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!96763 (isDefined!102 (getValueByKey!148 (toList!786 lt!47931) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!96764 () Bool)

(declare-fun Unit!2928 () Unit!2887)

(assert (=> b!96764 (= e!63090 Unit!2928)))

(declare-fun b!96765 () Bool)

(assert (=> b!96765 (= e!63091 (isDefined!102 (getValueByKey!148 (toList!786 lt!47931) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!25697 c!16355) b!96763))

(assert (= (and d!25697 (not c!16355)) b!96764))

(assert (= (and d!25697 (not res!48820)) b!96765))

(assert (=> d!25697 m!103887))

(declare-fun m!105439 () Bool)

(assert (=> d!25697 m!105439))

(assert (=> b!96763 m!103887))

(declare-fun m!105441 () Bool)

(assert (=> b!96763 m!105441))

(assert (=> b!96763 m!103887))

(declare-fun m!105443 () Bool)

(assert (=> b!96763 m!105443))

(assert (=> b!96763 m!105443))

(declare-fun m!105445 () Bool)

(assert (=> b!96763 m!105445))

(assert (=> b!96765 m!103887))

(assert (=> b!96765 m!105443))

(assert (=> b!96765 m!105443))

(assert (=> b!96765 m!105445))

(assert (=> b!96159 d!25697))

(assert (=> b!96312 d!25291))

(declare-fun d!25699 () Bool)

(assert (=> d!25699 (= (apply!91 lt!47842 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1289 (getValueByKey!148 (toList!786 lt!47842) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3985 () Bool)

(assert (= bs!3985 d!25699))

(declare-fun m!105447 () Bool)

(assert (=> bs!3985 m!105447))

(assert (=> bs!3985 m!105447))

(declare-fun m!105449 () Bool)

(assert (=> bs!3985 m!105449))

(assert (=> b!96046 d!25699))

(assert (=> b!96113 d!25435))

(assert (=> b!96168 d!25269))

(declare-fun d!25701 () Bool)

(assert (=> d!25701 (= (get!1287 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2778 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!96114 d!25701))

(assert (=> bm!9764 d!25319))

(declare-fun d!25703 () Bool)

(declare-fun lt!48391 () Bool)

(assert (=> d!25703 (= lt!48391 (select (content!99 (toList!786 lt!47989)) (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun e!63092 () Bool)

(assert (=> d!25703 (= lt!48391 e!63092)))

(declare-fun res!48822 () Bool)

(assert (=> d!25703 (=> (not res!48822) (not e!63092))))

(assert (=> d!25703 (= res!48822 ((_ is Cons!1599) (toList!786 lt!47989)))))

(assert (=> d!25703 (= (contains!802 (toList!786 lt!47989) (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!48391)))

(declare-fun b!96766 () Bool)

(declare-fun e!63093 () Bool)

(assert (=> b!96766 (= e!63092 e!63093)))

(declare-fun res!48821 () Bool)

(assert (=> b!96766 (=> res!48821 e!63093)))

(assert (=> b!96766 (= res!48821 (= (h!2192 (toList!786 lt!47989)) (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!96767 () Bool)

(assert (=> b!96767 (= e!63093 (contains!802 (t!5529 (toList!786 lt!47989)) (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(assert (= (and d!25703 res!48822) b!96766))

(assert (= (and b!96766 (not res!48821)) b!96767))

(declare-fun m!105451 () Bool)

(assert (=> d!25703 m!105451))

(declare-fun m!105453 () Bool)

(assert (=> d!25703 m!105453))

(declare-fun m!105455 () Bool)

(assert (=> b!96767 m!105455))

(assert (=> b!96241 d!25703))

(declare-fun b!96768 () Bool)

(declare-fun e!63094 () Bool)

(declare-fun call!9819 () Bool)

(assert (=> b!96768 (= e!63094 call!9819)))

(declare-fun bm!9816 () Bool)

(assert (=> bm!9816 (= call!9819 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4143 (_2!1179 lt!47718)) (mask!6542 (_2!1179 lt!47718))))))

(declare-fun b!96769 () Bool)

(declare-fun e!63095 () Bool)

(declare-fun e!63096 () Bool)

(assert (=> b!96769 (= e!63095 e!63096)))

(declare-fun c!16356 () Bool)

(assert (=> b!96769 (= c!16356 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (_2!1179 lt!47718))) #b00000000000000000000000000000000)))))

(declare-fun b!96771 () Bool)

(assert (=> b!96771 (= e!63096 call!9819)))

(declare-fun b!96770 () Bool)

(assert (=> b!96770 (= e!63096 e!63094)))

(declare-fun lt!48392 () (_ BitVec 64))

(assert (=> b!96770 (= lt!48392 (select (arr!2002 (_keys!4143 (_2!1179 lt!47718))) #b00000000000000000000000000000000))))

(declare-fun lt!48393 () Unit!2887)

(assert (=> b!96770 (= lt!48393 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4143 (_2!1179 lt!47718)) lt!48392 #b00000000000000000000000000000000))))

(assert (=> b!96770 (arrayContainsKey!0 (_keys!4143 (_2!1179 lt!47718)) lt!48392 #b00000000000000000000000000000000)))

(declare-fun lt!48394 () Unit!2887)

(assert (=> b!96770 (= lt!48394 lt!48393)))

(declare-fun res!48824 () Bool)

(assert (=> b!96770 (= res!48824 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (_2!1179 lt!47718))) #b00000000000000000000000000000000) (_keys!4143 (_2!1179 lt!47718)) (mask!6542 (_2!1179 lt!47718))) (Found!262 #b00000000000000000000000000000000)))))

(assert (=> b!96770 (=> (not res!48824) (not e!63094))))

(declare-fun d!25705 () Bool)

(declare-fun res!48823 () Bool)

(assert (=> d!25705 (=> res!48823 e!63095)))

(assert (=> d!25705 (= res!48823 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 (_2!1179 lt!47718)))))))

(assert (=> d!25705 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 (_2!1179 lt!47718)) (mask!6542 (_2!1179 lt!47718))) e!63095)))

(assert (= (and d!25705 (not res!48823)) b!96769))

(assert (= (and b!96769 c!16356) b!96770))

(assert (= (and b!96769 (not c!16356)) b!96771))

(assert (= (and b!96770 res!48824) b!96768))

(assert (= (or b!96768 b!96771) bm!9816))

(declare-fun m!105457 () Bool)

(assert (=> bm!9816 m!105457))

(assert (=> b!96769 m!105219))

(assert (=> b!96769 m!105219))

(assert (=> b!96769 m!105221))

(assert (=> b!96770 m!105219))

(declare-fun m!105459 () Bool)

(assert (=> b!96770 m!105459))

(declare-fun m!105461 () Bool)

(assert (=> b!96770 m!105461))

(assert (=> b!96770 m!105219))

(declare-fun m!105463 () Bool)

(assert (=> b!96770 m!105463))

(assert (=> b!96171 d!25705))

(declare-fun d!25707 () Bool)

(assert (=> d!25707 (= (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47794)) (v!2783 (getValueByKey!148 (toList!786 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47794)))))

(assert (=> d!25393 d!25707))

(declare-fun b!96773 () Bool)

(declare-fun e!63097 () Option!154)

(declare-fun e!63098 () Option!154)

(assert (=> b!96773 (= e!63097 e!63098)))

(declare-fun c!16358 () Bool)

(assert (=> b!96773 (= c!16358 (and ((_ is Cons!1599) (toList!786 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))) (not (= (_1!1178 (h!2192 (toList!786 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))) lt!47794))))))

(declare-fun d!25709 () Bool)

(declare-fun c!16357 () Bool)

(assert (=> d!25709 (= c!16357 (and ((_ is Cons!1599) (toList!786 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))) (= (_1!1178 (h!2192 (toList!786 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))) lt!47794)))))

(assert (=> d!25709 (= (getValueByKey!148 (toList!786 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47794) e!63097)))

(declare-fun b!96774 () Bool)

(assert (=> b!96774 (= e!63098 (getValueByKey!148 (t!5529 (toList!786 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))) lt!47794))))

(declare-fun b!96775 () Bool)

(assert (=> b!96775 (= e!63098 None!152)))

(declare-fun b!96772 () Bool)

(assert (=> b!96772 (= e!63097 (Some!153 (_2!1178 (h!2192 (toList!786 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))))

(assert (= (and d!25709 c!16357) b!96772))

(assert (= (and d!25709 (not c!16357)) b!96773))

(assert (= (and b!96773 c!16358) b!96774))

(assert (= (and b!96773 (not c!16358)) b!96775))

(declare-fun m!105465 () Bool)

(assert (=> b!96774 m!105465))

(assert (=> d!25393 d!25709))

(declare-fun d!25711 () Bool)

(assert (=> d!25711 (= (isEmpty!359 (getValueByKey!148 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))) (not ((_ is Some!153) (getValueByKey!148 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))))

(assert (=> d!25351 d!25711))

(declare-fun d!25713 () Bool)

(assert (=> d!25713 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781))))

(declare-fun lt!48395 () Unit!2887)

(assert (=> d!25713 (= lt!48395 (choose!587 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781))))

(declare-fun e!63099 () Bool)

(assert (=> d!25713 e!63099))

(declare-fun res!48825 () Bool)

(assert (=> d!25713 (=> (not res!48825) (not e!63099))))

(assert (=> d!25713 (= res!48825 (isStrictlySorted!298 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25713 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781) lt!48395)))

(declare-fun b!96776 () Bool)

(assert (=> b!96776 (= e!63099 (containsKey!152 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781))))

(assert (= (and d!25713 res!48825) b!96776))

(assert (=> d!25713 m!104411))

(assert (=> d!25713 m!104411))

(assert (=> d!25713 m!104413))

(declare-fun m!105467 () Bool)

(assert (=> d!25713 m!105467))

(declare-fun m!105469 () Bool)

(assert (=> d!25713 m!105469))

(assert (=> b!96776 m!104407))

(assert (=> b!96243 d!25713))

(declare-fun d!25715 () Bool)

(assert (=> d!25715 (= (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781)) (not (isEmpty!359 (getValueByKey!148 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781))))))

(declare-fun bs!3986 () Bool)

(assert (= bs!3986 d!25715))

(assert (=> bs!3986 m!104411))

(declare-fun m!105471 () Bool)

(assert (=> bs!3986 m!105471))

(assert (=> b!96243 d!25715))

(declare-fun b!96778 () Bool)

(declare-fun e!63100 () Option!154)

(declare-fun e!63101 () Option!154)

(assert (=> b!96778 (= e!63100 e!63101)))

(declare-fun c!16360 () Bool)

(assert (=> b!96778 (= c!16360 (and ((_ is Cons!1599) (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))) (not (= (_1!1178 (h!2192 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))) lt!47781))))))

(declare-fun d!25717 () Bool)

(declare-fun c!16359 () Bool)

(assert (=> d!25717 (= c!16359 (and ((_ is Cons!1599) (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))) (= (_1!1178 (h!2192 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))) lt!47781)))))

(assert (=> d!25717 (= (getValueByKey!148 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47781) e!63100)))

(declare-fun b!96779 () Bool)

(assert (=> b!96779 (= e!63101 (getValueByKey!148 (t!5529 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))) lt!47781))))

(declare-fun b!96780 () Bool)

(assert (=> b!96780 (= e!63101 None!152)))

(declare-fun b!96777 () Bool)

(assert (=> b!96777 (= e!63100 (Some!153 (_2!1178 (h!2192 (toList!786 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))))

(assert (= (and d!25717 c!16359) b!96777))

(assert (= (and d!25717 (not c!16359)) b!96778))

(assert (= (and b!96778 c!16360) b!96779))

(assert (= (and b!96778 (not c!16360)) b!96780))

(declare-fun m!105473 () Bool)

(assert (=> b!96779 m!105473))

(assert (=> b!96243 d!25717))

(assert (=> b!96126 d!25435))

(declare-fun d!25719 () Bool)

(assert (=> d!25719 (= (get!1289 (getValueByKey!148 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2783 (getValueByKey!148 (toList!786 lt!47784) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25417 d!25719))

(assert (=> d!25417 d!25627))

(declare-fun d!25721 () Bool)

(declare-fun e!63103 () Bool)

(assert (=> d!25721 e!63103))

(declare-fun res!48826 () Bool)

(assert (=> d!25721 (=> res!48826 e!63103)))

(declare-fun lt!48398 () Bool)

(assert (=> d!25721 (= res!48826 (not lt!48398))))

(declare-fun lt!48396 () Bool)

(assert (=> d!25721 (= lt!48398 lt!48396)))

(declare-fun lt!48397 () Unit!2887)

(declare-fun e!63102 () Unit!2887)

(assert (=> d!25721 (= lt!48397 e!63102)))

(declare-fun c!16361 () Bool)

(assert (=> d!25721 (= c!16361 lt!48396)))

(assert (=> d!25721 (= lt!48396 (containsKey!152 (toList!786 lt!47842) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!25721 (= (contains!800 lt!47842 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) lt!48398)))

(declare-fun b!96781 () Bool)

(declare-fun lt!48399 () Unit!2887)

(assert (=> b!96781 (= e!63102 lt!48399)))

(assert (=> b!96781 (= lt!48399 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47842) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96781 (isDefined!102 (getValueByKey!148 (toList!786 lt!47842) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96782 () Bool)

(declare-fun Unit!2929 () Unit!2887)

(assert (=> b!96782 (= e!63102 Unit!2929)))

(declare-fun b!96783 () Bool)

(assert (=> b!96783 (= e!63103 (isDefined!102 (getValueByKey!148 (toList!786 lt!47842) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!25721 c!16361) b!96781))

(assert (= (and d!25721 (not c!16361)) b!96782))

(assert (= (and d!25721 (not res!48826)) b!96783))

(assert (=> d!25721 m!104003))

(declare-fun m!105475 () Bool)

(assert (=> d!25721 m!105475))

(assert (=> b!96781 m!104003))

(declare-fun m!105477 () Bool)

(assert (=> b!96781 m!105477))

(assert (=> b!96781 m!104003))

(declare-fun m!105479 () Bool)

(assert (=> b!96781 m!105479))

(assert (=> b!96781 m!105479))

(declare-fun m!105481 () Bool)

(assert (=> b!96781 m!105481))

(assert (=> b!96783 m!104003))

(assert (=> b!96783 m!105479))

(assert (=> b!96783 m!105479))

(assert (=> b!96783 m!105481))

(assert (=> b!96034 d!25721))

(declare-fun d!25723 () Bool)

(declare-fun res!48827 () Bool)

(declare-fun e!63104 () Bool)

(assert (=> d!25723 (=> res!48827 e!63104)))

(assert (=> d!25723 (= res!48827 (and ((_ is Cons!1599) (toList!786 call!9684)) (= (_1!1178 (h!2192 (toList!786 call!9684))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (=> d!25723 (= (containsKey!152 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) e!63104)))

(declare-fun b!96784 () Bool)

(declare-fun e!63105 () Bool)

(assert (=> b!96784 (= e!63104 e!63105)))

(declare-fun res!48828 () Bool)

(assert (=> b!96784 (=> (not res!48828) (not e!63105))))

(assert (=> b!96784 (= res!48828 (and (or (not ((_ is Cons!1599) (toList!786 call!9684))) (bvsle (_1!1178 (h!2192 (toList!786 call!9684))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))) ((_ is Cons!1599) (toList!786 call!9684)) (bvslt (_1!1178 (h!2192 (toList!786 call!9684))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(declare-fun b!96785 () Bool)

(assert (=> b!96785 (= e!63105 (containsKey!152 (t!5529 (toList!786 call!9684)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (= (and d!25723 (not res!48827)) b!96784))

(assert (= (and b!96784 res!48828) b!96785))

(assert (=> b!96785 m!103745))

(declare-fun m!105483 () Bool)

(assert (=> b!96785 m!105483))

(assert (=> d!25415 d!25723))

(declare-fun d!25725 () Bool)

(assert (=> d!25725 (= (get!1289 (getValueByKey!148 (toList!786 lt!47785) lt!47780)) (v!2783 (getValueByKey!148 (toList!786 lt!47785) lt!47780)))))

(assert (=> d!25371 d!25725))

(declare-fun b!96787 () Bool)

(declare-fun e!63106 () Option!154)

(declare-fun e!63107 () Option!154)

(assert (=> b!96787 (= e!63106 e!63107)))

(declare-fun c!16363 () Bool)

(assert (=> b!96787 (= c!16363 (and ((_ is Cons!1599) (toList!786 lt!47785)) (not (= (_1!1178 (h!2192 (toList!786 lt!47785))) lt!47780))))))

(declare-fun d!25727 () Bool)

(declare-fun c!16362 () Bool)

(assert (=> d!25727 (= c!16362 (and ((_ is Cons!1599) (toList!786 lt!47785)) (= (_1!1178 (h!2192 (toList!786 lt!47785))) lt!47780)))))

(assert (=> d!25727 (= (getValueByKey!148 (toList!786 lt!47785) lt!47780) e!63106)))

(declare-fun b!96788 () Bool)

(assert (=> b!96788 (= e!63107 (getValueByKey!148 (t!5529 (toList!786 lt!47785)) lt!47780))))

(declare-fun b!96789 () Bool)

(assert (=> b!96789 (= e!63107 None!152)))

(declare-fun b!96786 () Bool)

(assert (=> b!96786 (= e!63106 (Some!153 (_2!1178 (h!2192 (toList!786 lt!47785)))))))

(assert (= (and d!25727 c!16362) b!96786))

(assert (= (and d!25727 (not c!16362)) b!96787))

(assert (= (and b!96787 c!16363) b!96788))

(assert (= (and b!96787 (not c!16363)) b!96789))

(declare-fun m!105485 () Bool)

(assert (=> b!96788 m!105485))

(assert (=> d!25371 d!25727))

(declare-fun d!25729 () Bool)

(declare-fun lt!48400 () Bool)

(assert (=> d!25729 (= lt!48400 (select (content!98 (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!63109 () Bool)

(assert (=> d!25729 (= lt!48400 e!63109)))

(declare-fun res!48829 () Bool)

(assert (=> d!25729 (=> (not res!48829) (not e!63109))))

(assert (=> d!25729 (= res!48829 ((_ is Cons!1598) (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)))))

(assert (=> d!25729 (= (contains!801 (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!48400)))

(declare-fun b!96790 () Bool)

(declare-fun e!63108 () Bool)

(assert (=> b!96790 (= e!63109 e!63108)))

(declare-fun res!48830 () Bool)

(assert (=> b!96790 (=> res!48830 e!63108)))

(assert (=> b!96790 (= res!48830 (= (h!2191 (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!96791 () Bool)

(assert (=> b!96791 (= e!63108 (contains!801 (t!5528 (ite c!16127 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) Nil!1599) Nil!1599)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!25729 res!48829) b!96790))

(assert (= (and b!96790 (not res!48830)) b!96791))

(declare-fun m!105487 () Bool)

(assert (=> d!25729 m!105487))

(assert (=> d!25729 m!104195))

(declare-fun m!105489 () Bool)

(assert (=> d!25729 m!105489))

(assert (=> b!96791 m!104195))

(declare-fun m!105491 () Bool)

(assert (=> b!96791 m!105491))

(assert (=> b!96088 d!25729))

(declare-fun d!25731 () Bool)

(assert (=> d!25731 (= (size!2255 newMap!16) (bvadd (_size!469 newMap!16) (bvsdiv (bvadd (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!96267 d!25731))

(declare-fun d!25733 () Bool)

(declare-fun e!63111 () Bool)

(assert (=> d!25733 e!63111))

(declare-fun res!48831 () Bool)

(assert (=> d!25733 (=> res!48831 e!63111)))

(declare-fun lt!48403 () Bool)

(assert (=> d!25733 (= res!48831 (not lt!48403))))

(declare-fun lt!48401 () Bool)

(assert (=> d!25733 (= lt!48403 lt!48401)))

(declare-fun lt!48402 () Unit!2887)

(declare-fun e!63110 () Unit!2887)

(assert (=> d!25733 (= lt!48402 e!63110)))

(declare-fun c!16364 () Bool)

(assert (=> d!25733 (= c!16364 lt!48401)))

(assert (=> d!25733 (= lt!48401 (containsKey!152 (toList!786 lt!47820) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!25733 (= (contains!800 lt!47820 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) lt!48403)))

(declare-fun b!96792 () Bool)

(declare-fun lt!48404 () Unit!2887)

(assert (=> b!96792 (= e!63110 lt!48404)))

(assert (=> b!96792 (= lt!48404 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47820) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96792 (isDefined!102 (getValueByKey!148 (toList!786 lt!47820) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96793 () Bool)

(declare-fun Unit!2930 () Unit!2887)

(assert (=> b!96793 (= e!63110 Unit!2930)))

(declare-fun b!96794 () Bool)

(assert (=> b!96794 (= e!63111 (isDefined!102 (getValueByKey!148 (toList!786 lt!47820) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!25733 c!16364) b!96792))

(assert (= (and d!25733 (not c!16364)) b!96793))

(assert (= (and d!25733 (not res!48831)) b!96794))

(assert (=> d!25733 m!104003))

(declare-fun m!105493 () Bool)

(assert (=> d!25733 m!105493))

(assert (=> b!96792 m!104003))

(declare-fun m!105495 () Bool)

(assert (=> b!96792 m!105495))

(assert (=> b!96792 m!104003))

(assert (=> b!96792 m!104865))

(assert (=> b!96792 m!104865))

(declare-fun m!105497 () Bool)

(assert (=> b!96792 m!105497))

(assert (=> b!96794 m!104003))

(assert (=> b!96794 m!104865))

(assert (=> b!96794 m!104865))

(assert (=> b!96794 m!105497))

(assert (=> b!96013 d!25733))

(declare-fun d!25735 () Bool)

(declare-fun e!63113 () Bool)

(assert (=> d!25735 e!63113))

(declare-fun res!48832 () Bool)

(assert (=> d!25735 (=> res!48832 e!63113)))

(declare-fun lt!48407 () Bool)

(assert (=> d!25735 (= res!48832 (not lt!48407))))

(declare-fun lt!48405 () Bool)

(assert (=> d!25735 (= lt!48407 lt!48405)))

(declare-fun lt!48406 () Unit!2887)

(declare-fun e!63112 () Unit!2887)

(assert (=> d!25735 (= lt!48406 e!63112)))

(declare-fun c!16365 () Bool)

(assert (=> d!25735 (= c!16365 lt!48405)))

(assert (=> d!25735 (= lt!48405 (containsKey!152 (toList!786 lt!48107) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25735 (= (contains!800 lt!48107 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48407)))

(declare-fun b!96795 () Bool)

(declare-fun lt!48408 () Unit!2887)

(assert (=> b!96795 (= e!63112 lt!48408)))

(assert (=> b!96795 (= lt!48408 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!48107) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> b!96795 (isDefined!102 (getValueByKey!148 (toList!786 lt!48107) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96796 () Bool)

(declare-fun Unit!2931 () Unit!2887)

(assert (=> b!96796 (= e!63112 Unit!2931)))

(declare-fun b!96797 () Bool)

(assert (=> b!96797 (= e!63113 (isDefined!102 (getValueByKey!148 (toList!786 lt!48107) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (= (and d!25735 c!16365) b!96795))

(assert (= (and d!25735 (not c!16365)) b!96796))

(assert (= (and d!25735 (not res!48832)) b!96797))

(declare-fun m!105499 () Bool)

(assert (=> d!25735 m!105499))

(declare-fun m!105501 () Bool)

(assert (=> b!96795 m!105501))

(assert (=> b!96795 m!104543))

(assert (=> b!96795 m!104543))

(declare-fun m!105503 () Bool)

(assert (=> b!96795 m!105503))

(assert (=> b!96797 m!104543))

(assert (=> b!96797 m!104543))

(assert (=> b!96797 m!105503))

(assert (=> d!25411 d!25735))

(declare-fun b!96799 () Bool)

(declare-fun e!63114 () Option!154)

(declare-fun e!63115 () Option!154)

(assert (=> b!96799 (= e!63114 e!63115)))

(declare-fun c!16367 () Bool)

(assert (=> b!96799 (= c!16367 (and ((_ is Cons!1599) lt!48106) (not (= (_1!1178 (h!2192 lt!48106)) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun d!25737 () Bool)

(declare-fun c!16366 () Bool)

(assert (=> d!25737 (= c!16366 (and ((_ is Cons!1599) lt!48106) (= (_1!1178 (h!2192 lt!48106)) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25737 (= (getValueByKey!148 lt!48106 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) e!63114)))

(declare-fun b!96800 () Bool)

(assert (=> b!96800 (= e!63115 (getValueByKey!148 (t!5529 lt!48106) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96801 () Bool)

(assert (=> b!96801 (= e!63115 None!152)))

(declare-fun b!96798 () Bool)

(assert (=> b!96798 (= e!63114 (Some!153 (_2!1178 (h!2192 lt!48106))))))

(assert (= (and d!25737 c!16366) b!96798))

(assert (= (and d!25737 (not c!16366)) b!96799))

(assert (= (and b!96799 c!16367) b!96800))

(assert (= (and b!96799 (not c!16367)) b!96801))

(declare-fun m!105505 () Bool)

(assert (=> b!96800 m!105505))

(assert (=> d!25411 d!25737))

(declare-fun d!25739 () Bool)

(assert (=> d!25739 (= (getValueByKey!148 lt!48106 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun lt!48409 () Unit!2887)

(assert (=> d!25739 (= lt!48409 (choose!591 lt!48106 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun e!63116 () Bool)

(assert (=> d!25739 e!63116))

(declare-fun res!48833 () Bool)

(assert (=> d!25739 (=> (not res!48833) (not e!63116))))

(assert (=> d!25739 (= res!48833 (isStrictlySorted!298 lt!48106))))

(assert (=> d!25739 (= (lemmaContainsTupThenGetReturnValue!66 lt!48106 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48409)))

(declare-fun b!96802 () Bool)

(declare-fun res!48834 () Bool)

(assert (=> b!96802 (=> (not res!48834) (not e!63116))))

(assert (=> b!96802 (= res!48834 (containsKey!152 lt!48106 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96803 () Bool)

(assert (=> b!96803 (= e!63116 (contains!802 lt!48106 (tuple2!2337 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (= (and d!25739 res!48833) b!96802))

(assert (= (and b!96802 res!48834) b!96803))

(assert (=> d!25739 m!104537))

(declare-fun m!105507 () Bool)

(assert (=> d!25739 m!105507))

(declare-fun m!105509 () Bool)

(assert (=> d!25739 m!105509))

(declare-fun m!105511 () Bool)

(assert (=> b!96802 m!105511))

(declare-fun m!105513 () Bool)

(assert (=> b!96803 m!105513))

(assert (=> d!25411 d!25739))

(declare-fun b!96804 () Bool)

(declare-fun e!63120 () List!1603)

(assert (=> b!96804 (= e!63120 (insertStrictlySorted!68 (t!5529 (toList!786 call!9708)) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96806 () Bool)

(declare-fun e!63117 () List!1603)

(declare-fun call!9821 () List!1603)

(assert (=> b!96806 (= e!63117 call!9821)))

(declare-fun b!96807 () Bool)

(declare-fun e!63121 () List!1603)

(declare-fun call!9820 () List!1603)

(assert (=> b!96807 (= e!63121 call!9820)))

(declare-fun b!96808 () Bool)

(declare-fun e!63119 () List!1603)

(declare-fun call!9822 () List!1603)

(assert (=> b!96808 (= e!63119 call!9822)))

(declare-fun bm!9817 () Bool)

(assert (=> bm!9817 (= call!9822 call!9821)))

(declare-fun b!96809 () Bool)

(declare-fun e!63118 () Bool)

(declare-fun lt!48410 () List!1603)

(assert (=> b!96809 (= e!63118 (contains!802 lt!48410 (tuple2!2337 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun bm!9818 () Bool)

(assert (=> bm!9818 (= call!9820 call!9822)))

(declare-fun c!16371 () Bool)

(declare-fun b!96810 () Bool)

(declare-fun c!16369 () Bool)

(assert (=> b!96810 (= e!63120 (ite c!16369 (t!5529 (toList!786 call!9708)) (ite c!16371 (Cons!1599 (h!2192 (toList!786 call!9708)) (t!5529 (toList!786 call!9708))) Nil!1600)))))

(declare-fun b!96805 () Bool)

(declare-fun res!48835 () Bool)

(assert (=> b!96805 (=> (not res!48835) (not e!63118))))

(assert (=> b!96805 (= res!48835 (containsKey!152 lt!48410 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun d!25741 () Bool)

(assert (=> d!25741 e!63118))

(declare-fun res!48836 () Bool)

(assert (=> d!25741 (=> (not res!48836) (not e!63118))))

(assert (=> d!25741 (= res!48836 (isStrictlySorted!298 lt!48410))))

(assert (=> d!25741 (= lt!48410 e!63117)))

(declare-fun c!16368 () Bool)

(assert (=> d!25741 (= c!16368 (and ((_ is Cons!1599) (toList!786 call!9708)) (bvslt (_1!1178 (h!2192 (toList!786 call!9708))) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25741 (isStrictlySorted!298 (toList!786 call!9708))))

(assert (=> d!25741 (= (insertStrictlySorted!68 (toList!786 call!9708) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48410)))

(declare-fun b!96811 () Bool)

(assert (=> b!96811 (= c!16371 (and ((_ is Cons!1599) (toList!786 call!9708)) (bvsgt (_1!1178 (h!2192 (toList!786 call!9708))) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> b!96811 (= e!63119 e!63121)))

(declare-fun bm!9819 () Bool)

(assert (=> bm!9819 (= call!9821 ($colon$colon!76 e!63120 (ite c!16368 (h!2192 (toList!786 call!9708)) (tuple2!2337 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun c!16370 () Bool)

(assert (=> bm!9819 (= c!16370 c!16368)))

(declare-fun b!96812 () Bool)

(assert (=> b!96812 (= e!63117 e!63119)))

(assert (=> b!96812 (= c!16369 (and ((_ is Cons!1599) (toList!786 call!9708)) (= (_1!1178 (h!2192 (toList!786 call!9708))) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!96813 () Bool)

(assert (=> b!96813 (= e!63121 call!9820)))

(assert (= (and d!25741 c!16368) b!96806))

(assert (= (and d!25741 (not c!16368)) b!96812))

(assert (= (and b!96812 c!16369) b!96808))

(assert (= (and b!96812 (not c!16369)) b!96811))

(assert (= (and b!96811 c!16371) b!96807))

(assert (= (and b!96811 (not c!16371)) b!96813))

(assert (= (or b!96807 b!96813) bm!9818))

(assert (= (or b!96808 bm!9818) bm!9817))

(assert (= (or b!96806 bm!9817) bm!9819))

(assert (= (and bm!9819 c!16370) b!96804))

(assert (= (and bm!9819 (not c!16370)) b!96810))

(assert (= (and d!25741 res!48836) b!96805))

(assert (= (and b!96805 res!48835) b!96809))

(declare-fun m!105515 () Bool)

(assert (=> b!96804 m!105515))

(declare-fun m!105517 () Bool)

(assert (=> d!25741 m!105517))

(declare-fun m!105519 () Bool)

(assert (=> d!25741 m!105519))

(declare-fun m!105521 () Bool)

(assert (=> b!96809 m!105521))

(declare-fun m!105523 () Bool)

(assert (=> b!96805 m!105523))

(declare-fun m!105525 () Bool)

(assert (=> bm!9819 m!105525))

(assert (=> d!25411 d!25741))

(declare-fun d!25743 () Bool)

(assert (=> d!25743 (= (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47779)) (v!2783 (getValueByKey!148 (toList!786 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47779)))))

(assert (=> d!25381 d!25743))

(declare-fun b!96815 () Bool)

(declare-fun e!63122 () Option!154)

(declare-fun e!63123 () Option!154)

(assert (=> b!96815 (= e!63122 e!63123)))

(declare-fun c!16373 () Bool)

(assert (=> b!96815 (= c!16373 (and ((_ is Cons!1599) (toList!786 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) (not (= (_1!1178 (h!2192 (toList!786 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))) lt!47779))))))

(declare-fun d!25745 () Bool)

(declare-fun c!16372 () Bool)

(assert (=> d!25745 (= c!16372 (and ((_ is Cons!1599) (toList!786 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) (= (_1!1178 (h!2192 (toList!786 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))) lt!47779)))))

(assert (=> d!25745 (= (getValueByKey!148 (toList!786 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!47779) e!63122)))

(declare-fun b!96816 () Bool)

(assert (=> b!96816 (= e!63123 (getValueByKey!148 (t!5529 (toList!786 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) lt!47779))))

(declare-fun b!96817 () Bool)

(assert (=> b!96817 (= e!63123 None!152)))

(declare-fun b!96814 () Bool)

(assert (=> b!96814 (= e!63122 (Some!153 (_2!1178 (h!2192 (toList!786 (+!137 lt!47793 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))))

(assert (= (and d!25745 c!16372) b!96814))

(assert (= (and d!25745 (not c!16372)) b!96815))

(assert (= (and b!96815 c!16373) b!96816))

(assert (= (and b!96815 (not c!16373)) b!96817))

(declare-fun m!105527 () Bool)

(assert (=> b!96816 m!105527))

(assert (=> d!25381 d!25745))

(assert (=> d!25301 d!25451))

(declare-fun d!25747 () Bool)

(declare-fun e!63125 () Bool)

(assert (=> d!25747 e!63125))

(declare-fun res!48837 () Bool)

(assert (=> d!25747 (=> res!48837 e!63125)))

(declare-fun lt!48413 () Bool)

(assert (=> d!25747 (= res!48837 (not lt!48413))))

(declare-fun lt!48411 () Bool)

(assert (=> d!25747 (= lt!48413 lt!48411)))

(declare-fun lt!48412 () Unit!2887)

(declare-fun e!63124 () Unit!2887)

(assert (=> d!25747 (= lt!48412 e!63124)))

(declare-fun c!16374 () Bool)

(assert (=> d!25747 (= c!16374 lt!48411)))

(assert (=> d!25747 (= lt!48411 (containsKey!152 (toList!786 lt!47842) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25747 (= (contains!800 lt!47842 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48413)))

(declare-fun b!96818 () Bool)

(declare-fun lt!48414 () Unit!2887)

(assert (=> b!96818 (= e!63124 lt!48414)))

(assert (=> b!96818 (= lt!48414 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47842) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96818 (isDefined!102 (getValueByKey!148 (toList!786 lt!47842) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96819 () Bool)

(declare-fun Unit!2932 () Unit!2887)

(assert (=> b!96819 (= e!63124 Unit!2932)))

(declare-fun b!96820 () Bool)

(assert (=> b!96820 (= e!63125 (isDefined!102 (getValueByKey!148 (toList!786 lt!47842) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25747 c!16374) b!96818))

(assert (= (and d!25747 (not c!16374)) b!96819))

(assert (= (and d!25747 (not res!48837)) b!96820))

(declare-fun m!105529 () Bool)

(assert (=> d!25747 m!105529))

(declare-fun m!105531 () Bool)

(assert (=> b!96818 m!105531))

(assert (=> b!96818 m!105447))

(assert (=> b!96818 m!105447))

(declare-fun m!105533 () Bool)

(assert (=> b!96818 m!105533))

(assert (=> b!96820 m!105447))

(assert (=> b!96820 m!105447))

(assert (=> b!96820 m!105533))

(assert (=> bm!9726 d!25747))

(declare-fun d!25749 () Bool)

(declare-fun e!63126 () Bool)

(assert (=> d!25749 e!63126))

(declare-fun res!48838 () Bool)

(assert (=> d!25749 (=> (not res!48838) (not e!63126))))

(declare-fun lt!48417 () ListLongMap!1541)

(assert (=> d!25749 (= res!48838 (contains!800 lt!48417 (_1!1178 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48416 () List!1603)

(assert (=> d!25749 (= lt!48417 (ListLongMap!1542 lt!48416))))

(declare-fun lt!48415 () Unit!2887)

(declare-fun lt!48418 () Unit!2887)

(assert (=> d!25749 (= lt!48415 lt!48418)))

(assert (=> d!25749 (= (getValueByKey!148 lt!48416 (_1!1178 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25749 (= lt!48418 (lemmaContainsTupThenGetReturnValue!66 lt!48416 (_1!1178 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25749 (= lt!48416 (insertStrictlySorted!68 (toList!786 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (_1!1178 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25749 (= (+!137 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48417)))

(declare-fun b!96821 () Bool)

(declare-fun res!48839 () Bool)

(assert (=> b!96821 (=> (not res!48839) (not e!63126))))

(assert (=> b!96821 (= res!48839 (= (getValueByKey!148 (toList!786 lt!48417) (_1!1178 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96822 () Bool)

(assert (=> b!96822 (= e!63126 (contains!802 (toList!786 lt!48417) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25749 res!48838) b!96821))

(assert (= (and b!96821 res!48839) b!96822))

(declare-fun m!105535 () Bool)

(assert (=> d!25749 m!105535))

(declare-fun m!105537 () Bool)

(assert (=> d!25749 m!105537))

(declare-fun m!105539 () Bool)

(assert (=> d!25749 m!105539))

(declare-fun m!105541 () Bool)

(assert (=> d!25749 m!105541))

(declare-fun m!105543 () Bool)

(assert (=> b!96821 m!105543))

(declare-fun m!105545 () Bool)

(assert (=> b!96822 m!105545))

(assert (=> d!25331 d!25749))

(declare-fun d!25751 () Bool)

(assert (=> d!25751 (= (+!137 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47708 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(assert (=> d!25751 true))

(declare-fun _$7!80 () Unit!2887)

(assert (=> d!25751 (= (choose!585 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47708 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) (defaultEntry!2457 newMap!16)) _$7!80)))

(declare-fun bs!3987 () Bool)

(assert (= bs!3987 d!25751))

(assert (=> bs!3987 m!103899))

(assert (=> bs!3987 m!103899))

(assert (=> bs!3987 m!104233))

(assert (=> bs!3987 m!103765))

(assert (=> bs!3987 m!104231))

(assert (=> d!25331 d!25751))

(assert (=> d!25331 d!25303))

(declare-fun d!25753 () Bool)

(declare-fun e!63139 () Bool)

(assert (=> d!25753 e!63139))

(declare-fun res!48843 () Bool)

(assert (=> d!25753 (=> (not res!48843) (not e!63139))))

(assert (=> d!25753 (= res!48843 (or (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))))

(declare-fun lt!48428 () ListLongMap!1541)

(declare-fun lt!48421 () ListLongMap!1541)

(assert (=> d!25753 (= lt!48428 lt!48421)))

(declare-fun lt!48420 () Unit!2887)

(declare-fun e!63131 () Unit!2887)

(assert (=> d!25753 (= lt!48420 e!63131)))

(declare-fun c!16377 () Bool)

(declare-fun e!63136 () Bool)

(assert (=> d!25753 (= c!16377 e!63136)))

(declare-fun res!48845 () Bool)

(assert (=> d!25753 (=> (not res!48845) (not e!63136))))

(assert (=> d!25753 (= res!48845 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun e!63137 () ListLongMap!1541)

(assert (=> d!25753 (= lt!48421 e!63137)))

(declare-fun c!16380 () Bool)

(assert (=> d!25753 (= c!16380 (and (not (= (bvand lt!47708 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!47708 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25753 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25753 (= (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47708 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48428)))

(declare-fun b!96823 () Bool)

(declare-fun e!63134 () ListLongMap!1541)

(assert (=> b!96823 (= e!63137 e!63134)))

(declare-fun c!16375 () Bool)

(assert (=> b!96823 (= c!16375 (and (not (= (bvand lt!47708 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!47708 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96824 () Bool)

(declare-fun e!63128 () Bool)

(assert (=> b!96824 (= e!63128 (= (apply!91 lt!48428 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96825 () Bool)

(declare-fun e!63133 () Bool)

(assert (=> b!96825 (= e!63139 e!63133)))

(declare-fun c!16376 () Bool)

(assert (=> b!96825 (= c!16376 (not (= (bvand lt!47708 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96826 () Bool)

(declare-fun call!9825 () ListLongMap!1541)

(assert (=> b!96826 (= e!63137 (+!137 call!9825 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun bm!9820 () Bool)

(declare-fun call!9824 () ListLongMap!1541)

(declare-fun call!9829 () ListLongMap!1541)

(assert (=> bm!9820 (= call!9824 call!9829)))

(declare-fun b!96827 () Bool)

(declare-fun c!16378 () Bool)

(assert (=> b!96827 (= c!16378 (and (not (= (bvand lt!47708 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!47708 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63138 () ListLongMap!1541)

(assert (=> b!96827 (= e!63134 e!63138)))

(declare-fun b!96828 () Bool)

(declare-fun res!48840 () Bool)

(assert (=> b!96828 (=> (not res!48840) (not e!63139))))

(declare-fun e!63135 () Bool)

(assert (=> b!96828 (= res!48840 e!63135)))

(declare-fun res!48844 () Bool)

(assert (=> b!96828 (=> res!48844 e!63135)))

(declare-fun e!63127 () Bool)

(assert (=> b!96828 (= res!48844 (not e!63127))))

(declare-fun res!48846 () Bool)

(assert (=> b!96828 (=> (not res!48846) (not e!63127))))

(assert (=> b!96828 (= res!48846 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun bm!9821 () Bool)

(declare-fun call!9826 () ListLongMap!1541)

(assert (=> bm!9821 (= call!9825 (+!137 (ite c!16380 call!9829 (ite c!16375 call!9824 call!9826)) (ite (or c!16380 c!16375) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!96829 () Bool)

(assert (=> b!96829 (= e!63136 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96830 () Bool)

(declare-fun e!63132 () Bool)

(assert (=> b!96830 (= e!63135 e!63132)))

(declare-fun res!48841 () Bool)

(assert (=> b!96830 (=> (not res!48841) (not e!63132))))

(assert (=> b!96830 (= res!48841 (contains!800 lt!48428 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96830 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96831 () Bool)

(declare-fun call!9827 () Bool)

(assert (=> b!96831 (= e!63133 (not call!9827))))

(declare-fun b!96832 () Bool)

(assert (=> b!96832 (= e!63138 call!9826)))

(declare-fun bm!9822 () Bool)

(assert (=> bm!9822 (= call!9826 call!9824)))

(declare-fun b!96833 () Bool)

(declare-fun e!63129 () Bool)

(declare-fun call!9823 () Bool)

(assert (=> b!96833 (= e!63129 (not call!9823))))

(declare-fun bm!9823 () Bool)

(assert (=> bm!9823 (= call!9823 (contains!800 lt!48428 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96834 () Bool)

(assert (=> b!96834 (= e!63132 (= (apply!91 lt!48428 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96834 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_values!2440 newMap!16))))))

(assert (=> b!96834 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96835 () Bool)

(declare-fun Unit!2933 () Unit!2887)

(assert (=> b!96835 (= e!63131 Unit!2933)))

(declare-fun bm!9824 () Bool)

(declare-fun call!9828 () ListLongMap!1541)

(assert (=> bm!9824 (= call!9828 call!9825)))

(declare-fun b!96836 () Bool)

(declare-fun res!48847 () Bool)

(assert (=> b!96836 (=> (not res!48847) (not e!63139))))

(assert (=> b!96836 (= res!48847 e!63129)))

(declare-fun c!16379 () Bool)

(assert (=> b!96836 (= c!16379 (not (= (bvand lt!47708 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!96837 () Bool)

(assert (=> b!96837 (= e!63134 call!9828)))

(declare-fun b!96838 () Bool)

(declare-fun lt!48432 () Unit!2887)

(assert (=> b!96838 (= e!63131 lt!48432)))

(declare-fun lt!48426 () ListLongMap!1541)

(assert (=> b!96838 (= lt!48426 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47708 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48436 () (_ BitVec 64))

(assert (=> b!96838 (= lt!48436 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48425 () (_ BitVec 64))

(assert (=> b!96838 (= lt!48425 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48427 () Unit!2887)

(assert (=> b!96838 (= lt!48427 (addStillContains!67 lt!48426 lt!48436 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!48425))))

(assert (=> b!96838 (contains!800 (+!137 lt!48426 (tuple2!2337 lt!48436 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48425)))

(declare-fun lt!48435 () Unit!2887)

(assert (=> b!96838 (= lt!48435 lt!48427)))

(declare-fun lt!48429 () ListLongMap!1541)

(assert (=> b!96838 (= lt!48429 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47708 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48433 () (_ BitVec 64))

(assert (=> b!96838 (= lt!48433 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48424 () (_ BitVec 64))

(assert (=> b!96838 (= lt!48424 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48434 () Unit!2887)

(assert (=> b!96838 (= lt!48434 (addApplyDifferent!67 lt!48429 lt!48433 (minValue!2342 newMap!16) lt!48424))))

(assert (=> b!96838 (= (apply!91 (+!137 lt!48429 (tuple2!2337 lt!48433 (minValue!2342 newMap!16))) lt!48424) (apply!91 lt!48429 lt!48424))))

(declare-fun lt!48422 () Unit!2887)

(assert (=> b!96838 (= lt!48422 lt!48434)))

(declare-fun lt!48419 () ListLongMap!1541)

(assert (=> b!96838 (= lt!48419 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47708 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48430 () (_ BitVec 64))

(assert (=> b!96838 (= lt!48430 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48438 () (_ BitVec 64))

(assert (=> b!96838 (= lt!48438 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48440 () Unit!2887)

(assert (=> b!96838 (= lt!48440 (addApplyDifferent!67 lt!48419 lt!48430 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!48438))))

(assert (=> b!96838 (= (apply!91 (+!137 lt!48419 (tuple2!2337 lt!48430 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48438) (apply!91 lt!48419 lt!48438))))

(declare-fun lt!48439 () Unit!2887)

(assert (=> b!96838 (= lt!48439 lt!48440)))

(declare-fun lt!48437 () ListLongMap!1541)

(assert (=> b!96838 (= lt!48437 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47708 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48431 () (_ BitVec 64))

(assert (=> b!96838 (= lt!48431 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48423 () (_ BitVec 64))

(assert (=> b!96838 (= lt!48423 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96838 (= lt!48432 (addApplyDifferent!67 lt!48437 lt!48431 (minValue!2342 newMap!16) lt!48423))))

(assert (=> b!96838 (= (apply!91 (+!137 lt!48437 (tuple2!2337 lt!48431 (minValue!2342 newMap!16))) lt!48423) (apply!91 lt!48437 lt!48423))))

(declare-fun b!96839 () Bool)

(assert (=> b!96839 (= e!63133 e!63128)))

(declare-fun res!48848 () Bool)

(assert (=> b!96839 (= res!48848 call!9827)))

(assert (=> b!96839 (=> (not res!48848) (not e!63128))))

(declare-fun b!96840 () Bool)

(assert (=> b!96840 (= e!63127 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9825 () Bool)

(assert (=> bm!9825 (= call!9829 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47708 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9826 () Bool)

(assert (=> bm!9826 (= call!9827 (contains!800 lt!48428 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96841 () Bool)

(assert (=> b!96841 (= e!63138 call!9828)))

(declare-fun e!63130 () Bool)

(declare-fun b!96842 () Bool)

(assert (=> b!96842 (= e!63130 (= (apply!91 lt!48428 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!96843 () Bool)

(assert (=> b!96843 (= e!63129 e!63130)))

(declare-fun res!48842 () Bool)

(assert (=> b!96843 (= res!48842 call!9823)))

(assert (=> b!96843 (=> (not res!48842) (not e!63130))))

(assert (= (and d!25753 c!16380) b!96826))

(assert (= (and d!25753 (not c!16380)) b!96823))

(assert (= (and b!96823 c!16375) b!96837))

(assert (= (and b!96823 (not c!16375)) b!96827))

(assert (= (and b!96827 c!16378) b!96841))

(assert (= (and b!96827 (not c!16378)) b!96832))

(assert (= (or b!96841 b!96832) bm!9822))

(assert (= (or b!96837 bm!9822) bm!9820))

(assert (= (or b!96837 b!96841) bm!9824))

(assert (= (or b!96826 bm!9820) bm!9825))

(assert (= (or b!96826 bm!9824) bm!9821))

(assert (= (and d!25753 res!48845) b!96829))

(assert (= (and d!25753 c!16377) b!96838))

(assert (= (and d!25753 (not c!16377)) b!96835))

(assert (= (and d!25753 res!48843) b!96828))

(assert (= (and b!96828 res!48846) b!96840))

(assert (= (and b!96828 (not res!48844)) b!96830))

(assert (= (and b!96830 res!48841) b!96834))

(assert (= (and b!96828 res!48840) b!96836))

(assert (= (and b!96836 c!16379) b!96843))

(assert (= (and b!96836 (not c!16379)) b!96833))

(assert (= (and b!96843 res!48842) b!96842))

(assert (= (or b!96843 b!96833) bm!9823))

(assert (= (and b!96836 res!48847) b!96825))

(assert (= (and b!96825 c!16376) b!96839))

(assert (= (and b!96825 (not c!16376)) b!96831))

(assert (= (and b!96839 res!48848) b!96824))

(assert (= (or b!96839 b!96831) bm!9826))

(declare-fun b_lambda!4299 () Bool)

(assert (=> (not b_lambda!4299) (not b!96834)))

(assert (=> b!96834 t!5535))

(declare-fun b_and!5929 () Bool)

(assert (= b_and!5925 (and (=> t!5535 result!3233) b_and!5929)))

(assert (=> b!96834 t!5537))

(declare-fun b_and!5931 () Bool)

(assert (= b_and!5927 (and (=> t!5537 result!3235) b_and!5931)))

(assert (=> b!96830 m!104003))

(assert (=> b!96830 m!104003))

(declare-fun m!105547 () Bool)

(assert (=> b!96830 m!105547))

(declare-fun m!105549 () Bool)

(assert (=> b!96838 m!105549))

(assert (=> b!96838 m!103765))

(declare-fun m!105551 () Bool)

(assert (=> b!96838 m!105551))

(declare-fun m!105553 () Bool)

(assert (=> b!96838 m!105553))

(declare-fun m!105555 () Bool)

(assert (=> b!96838 m!105555))

(declare-fun m!105557 () Bool)

(assert (=> b!96838 m!105557))

(assert (=> b!96838 m!105553))

(assert (=> b!96838 m!103765))

(declare-fun m!105559 () Bool)

(assert (=> b!96838 m!105559))

(declare-fun m!105561 () Bool)

(assert (=> b!96838 m!105561))

(declare-fun m!105563 () Bool)

(assert (=> b!96838 m!105563))

(declare-fun m!105565 () Bool)

(assert (=> b!96838 m!105565))

(declare-fun m!105567 () Bool)

(assert (=> b!96838 m!105567))

(declare-fun m!105569 () Bool)

(assert (=> b!96838 m!105569))

(assert (=> b!96838 m!103765))

(declare-fun m!105571 () Bool)

(assert (=> b!96838 m!105571))

(assert (=> b!96838 m!105563))

(declare-fun m!105573 () Bool)

(assert (=> b!96838 m!105573))

(assert (=> b!96838 m!105565))

(assert (=> b!96838 m!104003))

(declare-fun m!105575 () Bool)

(assert (=> b!96838 m!105575))

(assert (=> b!96838 m!105569))

(declare-fun m!105577 () Bool)

(assert (=> b!96838 m!105577))

(declare-fun m!105579 () Bool)

(assert (=> b!96838 m!105579))

(assert (=> b!96834 m!104039))

(assert (=> b!96834 m!104003))

(declare-fun m!105581 () Bool)

(assert (=> b!96834 m!105581))

(assert (=> b!96834 m!104039))

(assert (=> b!96834 m!104043))

(assert (=> b!96834 m!104045))

(assert (=> b!96834 m!104003))

(assert (=> b!96834 m!104043))

(declare-fun m!105583 () Bool)

(assert (=> b!96826 m!105583))

(assert (=> d!25753 m!103977))

(declare-fun m!105585 () Bool)

(assert (=> bm!9823 m!105585))

(assert (=> b!96829 m!104003))

(assert (=> b!96829 m!104003))

(assert (=> b!96829 m!104051))

(declare-fun m!105587 () Bool)

(assert (=> bm!9821 m!105587))

(declare-fun m!105589 () Bool)

(assert (=> b!96842 m!105589))

(declare-fun m!105591 () Bool)

(assert (=> bm!9826 m!105591))

(declare-fun m!105593 () Bool)

(assert (=> b!96824 m!105593))

(assert (=> b!96840 m!104003))

(assert (=> b!96840 m!104003))

(assert (=> b!96840 m!104051))

(assert (=> bm!9825 m!103765))

(assert (=> bm!9825 m!105571))

(assert (=> d!25331 d!25753))

(assert (=> d!25331 d!25451))

(declare-fun d!25755 () Bool)

(assert (=> d!25755 (= (apply!91 lt!47871 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1289 (getValueByKey!148 (toList!786 lt!47871) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!3988 () Bool)

(assert (= bs!3988 d!25755))

(assert (=> bs!3988 m!104003))

(assert (=> bs!3988 m!105229))

(assert (=> bs!3988 m!105229))

(declare-fun m!105595 () Bool)

(assert (=> bs!3988 m!105595))

(assert (=> b!96065 d!25755))

(declare-fun d!25757 () Bool)

(declare-fun c!16381 () Bool)

(assert (=> d!25757 (= c!16381 ((_ is ValueCellFull!966) (select (arr!2003 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!63140 () V!3139)

(assert (=> d!25757 (= (get!1286 (select (arr!2003 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63140)))

(declare-fun b!96844 () Bool)

(assert (=> b!96844 (= e!63140 (get!1287 (select (arr!2003 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96845 () Bool)

(assert (=> b!96845 (= e!63140 (get!1288 (select (arr!2003 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25757 c!16381) b!96844))

(assert (= (and d!25757 (not c!16381)) b!96845))

(assert (=> b!96844 m!104157))

(assert (=> b!96844 m!104043))

(declare-fun m!105597 () Bool)

(assert (=> b!96844 m!105597))

(assert (=> b!96845 m!104157))

(assert (=> b!96845 m!104043))

(declare-fun m!105599 () Bool)

(assert (=> b!96845 m!105599))

(assert (=> b!96065 d!25757))

(declare-fun d!25759 () Bool)

(declare-fun e!63142 () Bool)

(assert (=> d!25759 e!63142))

(declare-fun res!48849 () Bool)

(assert (=> d!25759 (=> res!48849 e!63142)))

(declare-fun lt!48443 () Bool)

(assert (=> d!25759 (= res!48849 (not lt!48443))))

(declare-fun lt!48441 () Bool)

(assert (=> d!25759 (= lt!48443 lt!48441)))

(declare-fun lt!48442 () Unit!2887)

(declare-fun e!63141 () Unit!2887)

(assert (=> d!25759 (= lt!48442 e!63141)))

(declare-fun c!16382 () Bool)

(assert (=> d!25759 (= c!16382 lt!48441)))

(assert (=> d!25759 (= lt!48441 (containsKey!152 (toList!786 lt!47775) lt!47794))))

(assert (=> d!25759 (= (contains!800 lt!47775 lt!47794) lt!48443)))

(declare-fun b!96846 () Bool)

(declare-fun lt!48444 () Unit!2887)

(assert (=> b!96846 (= e!63141 lt!48444)))

(assert (=> b!96846 (= lt!48444 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47775) lt!47794))))

(assert (=> b!96846 (isDefined!102 (getValueByKey!148 (toList!786 lt!47775) lt!47794))))

(declare-fun b!96847 () Bool)

(declare-fun Unit!2934 () Unit!2887)

(assert (=> b!96847 (= e!63141 Unit!2934)))

(declare-fun b!96848 () Bool)

(assert (=> b!96848 (= e!63142 (isDefined!102 (getValueByKey!148 (toList!786 lt!47775) lt!47794)))))

(assert (= (and d!25759 c!16382) b!96846))

(assert (= (and d!25759 (not c!16382)) b!96847))

(assert (= (and d!25759 (not res!48849)) b!96848))

(declare-fun m!105601 () Bool)

(assert (=> d!25759 m!105601))

(declare-fun m!105603 () Bool)

(assert (=> b!96846 m!105603))

(assert (=> b!96846 m!104459))

(assert (=> b!96846 m!104459))

(declare-fun m!105605 () Bool)

(assert (=> b!96846 m!105605))

(assert (=> b!96848 m!104459))

(assert (=> b!96848 m!104459))

(assert (=> b!96848 m!105605))

(assert (=> d!25397 d!25759))

(assert (=> d!25397 d!25393))

(assert (=> d!25397 d!25377))

(declare-fun d!25761 () Bool)

(assert (=> d!25761 (= (apply!91 (+!137 lt!47775 (tuple2!2337 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47794) (apply!91 lt!47775 lt!47794))))

(assert (=> d!25761 true))

(declare-fun _$34!856 () Unit!2887)

(assert (=> d!25761 (= (choose!588 lt!47775 lt!47786 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47794) _$34!856)))

(declare-fun bs!3989 () Bool)

(assert (= bs!3989 d!25761))

(assert (=> bs!3989 m!103919))

(assert (=> bs!3989 m!103919))

(assert (=> bs!3989 m!103921))

(assert (=> bs!3989 m!103933))

(assert (=> d!25397 d!25761))

(assert (=> d!25397 d!25399))

(declare-fun d!25763 () Bool)

(declare-fun e!63144 () Bool)

(assert (=> d!25763 e!63144))

(declare-fun res!48850 () Bool)

(assert (=> d!25763 (=> res!48850 e!63144)))

(declare-fun lt!48447 () Bool)

(assert (=> d!25763 (= res!48850 (not lt!48447))))

(declare-fun lt!48445 () Bool)

(assert (=> d!25763 (= lt!48447 lt!48445)))

(declare-fun lt!48446 () Unit!2887)

(declare-fun e!63143 () Unit!2887)

(assert (=> d!25763 (= lt!48446 e!63143)))

(declare-fun c!16383 () Bool)

(assert (=> d!25763 (= c!16383 lt!48445)))

(assert (=> d!25763 (= lt!48445 (containsKey!152 (toList!786 lt!48121) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25763 (= (contains!800 lt!48121 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!48447)))

(declare-fun b!96849 () Bool)

(declare-fun lt!48448 () Unit!2887)

(assert (=> b!96849 (= e!63143 lt!48448)))

(assert (=> b!96849 (= lt!48448 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!48121) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!96849 (isDefined!102 (getValueByKey!148 (toList!786 lt!48121) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96850 () Bool)

(declare-fun Unit!2935 () Unit!2887)

(assert (=> b!96850 (= e!63143 Unit!2935)))

(declare-fun b!96851 () Bool)

(assert (=> b!96851 (= e!63144 (isDefined!102 (getValueByKey!148 (toList!786 lt!48121) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!25763 c!16383) b!96849))

(assert (= (and d!25763 (not c!16383)) b!96850))

(assert (= (and d!25763 (not res!48850)) b!96851))

(declare-fun m!105607 () Bool)

(assert (=> d!25763 m!105607))

(declare-fun m!105609 () Bool)

(assert (=> b!96849 m!105609))

(assert (=> b!96849 m!104571))

(assert (=> b!96849 m!104571))

(declare-fun m!105611 () Bool)

(assert (=> b!96849 m!105611))

(assert (=> b!96851 m!104571))

(assert (=> b!96851 m!104571))

(assert (=> b!96851 m!105611))

(assert (=> d!25419 d!25763))

(declare-fun b!96853 () Bool)

(declare-fun e!63145 () Option!154)

(declare-fun e!63146 () Option!154)

(assert (=> b!96853 (= e!63145 e!63146)))

(declare-fun c!16385 () Bool)

(assert (=> b!96853 (= c!16385 (and ((_ is Cons!1599) lt!48120) (not (= (_1!1178 (h!2192 lt!48120)) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun d!25765 () Bool)

(declare-fun c!16384 () Bool)

(assert (=> d!25765 (= c!16384 (and ((_ is Cons!1599) lt!48120) (= (_1!1178 (h!2192 lt!48120)) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!25765 (= (getValueByKey!148 lt!48120 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!63145)))

(declare-fun b!96854 () Bool)

(assert (=> b!96854 (= e!63146 (getValueByKey!148 (t!5529 lt!48120) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96855 () Bool)

(assert (=> b!96855 (= e!63146 None!152)))

(declare-fun b!96852 () Bool)

(assert (=> b!96852 (= e!63145 (Some!153 (_2!1178 (h!2192 lt!48120))))))

(assert (= (and d!25765 c!16384) b!96852))

(assert (= (and d!25765 (not c!16384)) b!96853))

(assert (= (and b!96853 c!16385) b!96854))

(assert (= (and b!96853 (not c!16385)) b!96855))

(declare-fun m!105613 () Bool)

(assert (=> b!96854 m!105613))

(assert (=> d!25419 d!25765))

(declare-fun d!25767 () Bool)

(assert (=> d!25767 (= (getValueByKey!148 lt!48120 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!153 (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!48449 () Unit!2887)

(assert (=> d!25767 (= lt!48449 (choose!591 lt!48120 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!63147 () Bool)

(assert (=> d!25767 e!63147))

(declare-fun res!48851 () Bool)

(assert (=> d!25767 (=> (not res!48851) (not e!63147))))

(assert (=> d!25767 (= res!48851 (isStrictlySorted!298 lt!48120))))

(assert (=> d!25767 (= (lemmaContainsTupThenGetReturnValue!66 lt!48120 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!48449)))

(declare-fun b!96856 () Bool)

(declare-fun res!48852 () Bool)

(assert (=> b!96856 (=> (not res!48852) (not e!63147))))

(assert (=> b!96856 (= res!48852 (containsKey!152 lt!48120 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96857 () Bool)

(assert (=> b!96857 (= e!63147 (contains!802 lt!48120 (tuple2!2337 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!25767 res!48851) b!96856))

(assert (= (and b!96856 res!48852) b!96857))

(assert (=> d!25767 m!104565))

(declare-fun m!105615 () Bool)

(assert (=> d!25767 m!105615))

(declare-fun m!105617 () Bool)

(assert (=> d!25767 m!105617))

(declare-fun m!105619 () Bool)

(assert (=> b!96856 m!105619))

(declare-fun m!105621 () Bool)

(assert (=> b!96857 m!105621))

(assert (=> d!25419 d!25767))

(declare-fun e!63151 () List!1603)

(declare-fun b!96858 () Bool)

(assert (=> b!96858 (= e!63151 (insertStrictlySorted!68 (t!5529 (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682))) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96860 () Bool)

(declare-fun e!63148 () List!1603)

(declare-fun call!9831 () List!1603)

(assert (=> b!96860 (= e!63148 call!9831)))

(declare-fun b!96861 () Bool)

(declare-fun e!63152 () List!1603)

(declare-fun call!9830 () List!1603)

(assert (=> b!96861 (= e!63152 call!9830)))

(declare-fun b!96862 () Bool)

(declare-fun e!63150 () List!1603)

(declare-fun call!9832 () List!1603)

(assert (=> b!96862 (= e!63150 call!9832)))

(declare-fun bm!9827 () Bool)

(assert (=> bm!9827 (= call!9832 call!9831)))

(declare-fun b!96863 () Bool)

(declare-fun e!63149 () Bool)

(declare-fun lt!48450 () List!1603)

(assert (=> b!96863 (= e!63149 (contains!802 lt!48450 (tuple2!2337 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun bm!9828 () Bool)

(assert (=> bm!9828 (= call!9830 call!9832)))

(declare-fun c!16389 () Bool)

(declare-fun c!16387 () Bool)

(declare-fun b!96864 () Bool)

(assert (=> b!96864 (= e!63151 (ite c!16387 (t!5529 (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682))) (ite c!16389 (Cons!1599 (h!2192 (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682))) (t!5529 (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682)))) Nil!1600)))))

(declare-fun b!96859 () Bool)

(declare-fun res!48853 () Bool)

(assert (=> b!96859 (=> (not res!48853) (not e!63149))))

(assert (=> b!96859 (= res!48853 (containsKey!152 lt!48450 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun d!25769 () Bool)

(assert (=> d!25769 e!63149))

(declare-fun res!48854 () Bool)

(assert (=> d!25769 (=> (not res!48854) (not e!63149))))

(assert (=> d!25769 (= res!48854 (isStrictlySorted!298 lt!48450))))

(assert (=> d!25769 (= lt!48450 e!63148)))

(declare-fun c!16386 () Bool)

(assert (=> d!25769 (= c!16386 (and ((_ is Cons!1599) (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682))) (bvslt (_1!1178 (h!2192 (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682)))) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!25769 (isStrictlySorted!298 (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682)))))

(assert (=> d!25769 (= (insertStrictlySorted!68 (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682)) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!48450)))

(declare-fun b!96865 () Bool)

(assert (=> b!96865 (= c!16389 (and ((_ is Cons!1599) (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682))) (bvsgt (_1!1178 (h!2192 (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682)))) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!96865 (= e!63150 e!63152)))

(declare-fun bm!9829 () Bool)

(assert (=> bm!9829 (= call!9831 ($colon$colon!76 e!63151 (ite c!16386 (h!2192 (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682))) (tuple2!2337 (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!16388 () Bool)

(assert (=> bm!9829 (= c!16388 c!16386)))

(declare-fun b!96866 () Bool)

(assert (=> b!96866 (= e!63148 e!63150)))

(assert (=> b!96866 (= c!16387 (and ((_ is Cons!1599) (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682))) (= (_1!1178 (h!2192 (toList!786 (ite c!16115 (ite c!16114 call!9683 call!9679) call!9682)))) (_1!1178 (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!96867 () Bool)

(assert (=> b!96867 (= e!63152 call!9830)))

(assert (= (and d!25769 c!16386) b!96860))

(assert (= (and d!25769 (not c!16386)) b!96866))

(assert (= (and b!96866 c!16387) b!96862))

(assert (= (and b!96866 (not c!16387)) b!96865))

(assert (= (and b!96865 c!16389) b!96861))

(assert (= (and b!96865 (not c!16389)) b!96867))

(assert (= (or b!96861 b!96867) bm!9828))

(assert (= (or b!96862 bm!9828) bm!9827))

(assert (= (or b!96860 bm!9827) bm!9829))

(assert (= (and bm!9829 c!16388) b!96858))

(assert (= (and bm!9829 (not c!16388)) b!96864))

(assert (= (and d!25769 res!48854) b!96859))

(assert (= (and b!96859 res!48853) b!96863))

(declare-fun m!105623 () Bool)

(assert (=> b!96858 m!105623))

(declare-fun m!105625 () Bool)

(assert (=> d!25769 m!105625))

(declare-fun m!105627 () Bool)

(assert (=> d!25769 m!105627))

(declare-fun m!105629 () Bool)

(assert (=> b!96863 m!105629))

(declare-fun m!105631 () Bool)

(assert (=> b!96859 m!105631))

(declare-fun m!105633 () Bool)

(assert (=> bm!9829 m!105633))

(assert (=> d!25419 d!25769))

(declare-fun b!96880 () Bool)

(declare-fun e!63159 () SeekEntryResult!262)

(assert (=> b!96880 (= e!63159 (Found!262 (index!3192 lt!47906)))))

(declare-fun b!96881 () Bool)

(declare-fun e!63161 () SeekEntryResult!262)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!96881 (= e!63161 (seekKeyOrZeroReturnVacant!0 (bvadd (x!12810 lt!47906) #b00000000000000000000000000000001) (nextIndex!0 (index!3192 lt!47906) (x!12810 lt!47906) (mask!6542 newMap!16)) (index!3192 lt!47906) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!96882 () Bool)

(declare-fun c!16396 () Bool)

(declare-fun lt!48455 () (_ BitVec 64))

(assert (=> b!96882 (= c!16396 (= lt!48455 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96882 (= e!63159 e!63161)))

(declare-fun b!96883 () Bool)

(assert (=> b!96883 (= e!63161 (MissingVacant!262 (index!3192 lt!47906)))))

(declare-fun b!96884 () Bool)

(declare-fun e!63160 () SeekEntryResult!262)

(assert (=> b!96884 (= e!63160 Undefined!262)))

(declare-fun lt!48456 () SeekEntryResult!262)

(declare-fun d!25771 () Bool)

(assert (=> d!25771 (and (or ((_ is Undefined!262) lt!48456) (not ((_ is Found!262) lt!48456)) (and (bvsge (index!3191 lt!48456) #b00000000000000000000000000000000) (bvslt (index!3191 lt!48456) (size!2251 (_keys!4143 newMap!16))))) (or ((_ is Undefined!262) lt!48456) ((_ is Found!262) lt!48456) (not ((_ is MissingVacant!262) lt!48456)) (not (= (index!3193 lt!48456) (index!3192 lt!47906))) (and (bvsge (index!3193 lt!48456) #b00000000000000000000000000000000) (bvslt (index!3193 lt!48456) (size!2251 (_keys!4143 newMap!16))))) (or ((_ is Undefined!262) lt!48456) (ite ((_ is Found!262) lt!48456) (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3191 lt!48456)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (and ((_ is MissingVacant!262) lt!48456) (= (index!3193 lt!48456) (index!3192 lt!47906)) (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3193 lt!48456)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!25771 (= lt!48456 e!63160)))

(declare-fun c!16398 () Bool)

(assert (=> d!25771 (= c!16398 (bvsge (x!12810 lt!47906) #b01111111111111111111111111111110))))

(assert (=> d!25771 (= lt!48455 (select (arr!2002 (_keys!4143 newMap!16)) (index!3192 lt!47906)))))

(assert (=> d!25771 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25771 (= (seekKeyOrZeroReturnVacant!0 (x!12810 lt!47906) (index!3192 lt!47906) (index!3192 lt!47906) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)) lt!48456)))

(declare-fun b!96885 () Bool)

(assert (=> b!96885 (= e!63160 e!63159)))

(declare-fun c!16397 () Bool)

(assert (=> b!96885 (= c!16397 (= lt!48455 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (= (and d!25771 c!16398) b!96884))

(assert (= (and d!25771 (not c!16398)) b!96885))

(assert (= (and b!96885 c!16397) b!96880))

(assert (= (and b!96885 (not c!16397)) b!96882))

(assert (= (and b!96882 c!16396) b!96883))

(assert (= (and b!96882 (not c!16396)) b!96881))

(declare-fun m!105635 () Bool)

(assert (=> b!96881 m!105635))

(assert (=> b!96881 m!105635))

(assert (=> b!96881 m!103745))

(declare-fun m!105637 () Bool)

(assert (=> b!96881 m!105637))

(declare-fun m!105639 () Bool)

(assert (=> d!25771 m!105639))

(declare-fun m!105641 () Bool)

(assert (=> d!25771 m!105641))

(assert (=> d!25771 m!104215))

(assert (=> d!25771 m!103977))

(assert (=> b!96105 d!25771))

(assert (=> b!96044 d!25435))

(declare-fun d!25773 () Bool)

(assert (=> d!25773 (= (apply!91 lt!47842 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1289 (getValueByKey!148 (toList!786 lt!47842) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3990 () Bool)

(assert (= bs!3990 d!25773))

(declare-fun m!105643 () Bool)

(assert (=> bs!3990 m!105643))

(assert (=> bs!3990 m!105643))

(declare-fun m!105645 () Bool)

(assert (=> bs!3990 m!105645))

(assert (=> b!96028 d!25773))

(declare-fun b!96886 () Bool)

(declare-fun e!63162 () Bool)

(declare-fun call!9833 () Bool)

(assert (=> b!96886 (= e!63162 call!9833)))

(declare-fun bm!9830 () Bool)

(assert (=> bm!9830 (= call!9833 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4143 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun b!96887 () Bool)

(declare-fun e!63163 () Bool)

(declare-fun e!63164 () Bool)

(assert (=> b!96887 (= e!63163 e!63164)))

(declare-fun c!16399 () Bool)

(assert (=> b!96887 (= c!16399 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!96889 () Bool)

(assert (=> b!96889 (= e!63164 call!9833)))

(declare-fun b!96888 () Bool)

(assert (=> b!96888 (= e!63164 e!63162)))

(declare-fun lt!48457 () (_ BitVec 64))

(assert (=> b!96888 (= lt!48457 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!48458 () Unit!2887)

(assert (=> b!96888 (= lt!48458 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) lt!48457 #b00000000000000000000000000000000))))

(assert (=> b!96888 (arrayContainsKey!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) lt!48457 #b00000000000000000000000000000000)))

(declare-fun lt!48459 () Unit!2887)

(assert (=> b!96888 (= lt!48459 lt!48458)))

(declare-fun res!48856 () Bool)

(assert (=> b!96888 (= res!48856 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b00000000000000000000000000000000) (_keys!4143 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992)))) (Found!262 #b00000000000000000000000000000000)))))

(assert (=> b!96888 (=> (not res!48856) (not e!63162))))

(declare-fun d!25775 () Bool)

(declare-fun res!48855 () Bool)

(assert (=> d!25775 (=> res!48855 e!63163)))

(assert (=> d!25775 (= res!48855 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> d!25775 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992)))) e!63163)))

(assert (= (and d!25775 (not res!48855)) b!96887))

(assert (= (and b!96887 c!16399) b!96888))

(assert (= (and b!96887 (not c!16399)) b!96889))

(assert (= (and b!96888 res!48856) b!96886))

(assert (= (or b!96886 b!96889) bm!9830))

(declare-fun m!105647 () Bool)

(assert (=> bm!9830 m!105647))

(assert (=> b!96887 m!105289))

(assert (=> b!96887 m!105289))

(assert (=> b!96887 m!105291))

(assert (=> b!96888 m!105289))

(declare-fun m!105649 () Bool)

(assert (=> b!96888 m!105649))

(declare-fun m!105651 () Bool)

(assert (=> b!96888 m!105651))

(assert (=> b!96888 m!105289))

(declare-fun m!105653 () Bool)

(assert (=> b!96888 m!105653))

(assert (=> b!96001 d!25775))

(declare-fun d!25777 () Bool)

(assert (=> d!25777 (= (apply!91 lt!47931 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1289 (getValueByKey!148 (toList!786 lt!47931) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!3991 () Bool)

(assert (= bs!3991 d!25777))

(assert (=> bs!3991 m!103887))

(assert (=> bs!3991 m!105443))

(assert (=> bs!3991 m!105443))

(declare-fun m!105655 () Bool)

(assert (=> bs!3991 m!105655))

(assert (=> b!96152 d!25777))

(assert (=> b!96152 d!25325))

(declare-fun b!96890 () Bool)

(assert (=> b!96890 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> b!96890 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))))))))

(declare-fun lt!48463 () ListLongMap!1541)

(declare-fun e!63170 () Bool)

(assert (=> b!96890 (= e!63170 (= (apply!91 lt!48463 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun call!9834 () ListLongMap!1541)

(declare-fun bm!9831 () Bool)

(assert (=> bm!9831 (= call!9834 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16)))))

(declare-fun b!96891 () Bool)

(declare-fun e!63165 () Bool)

(declare-fun e!63168 () Bool)

(assert (=> b!96891 (= e!63165 e!63168)))

(declare-fun c!16401 () Bool)

(declare-fun e!63169 () Bool)

(assert (=> b!96891 (= c!16401 e!63169)))

(declare-fun res!48857 () Bool)

(assert (=> b!96891 (=> (not res!48857) (not e!63169))))

(assert (=> b!96891 (= res!48857 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96892 () Bool)

(declare-fun e!63171 () ListLongMap!1541)

(assert (=> b!96892 (= e!63171 (ListLongMap!1542 Nil!1600))))

(declare-fun b!96893 () Bool)

(declare-fun e!63166 () Bool)

(assert (=> b!96893 (= e!63166 (isEmpty!358 lt!48463))))

(declare-fun b!96894 () Bool)

(declare-fun res!48858 () Bool)

(assert (=> b!96894 (=> (not res!48858) (not e!63165))))

(assert (=> b!96894 (= res!48858 (not (contains!800 lt!48463 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96895 () Bool)

(assert (=> b!96895 (= e!63166 (= lt!48463 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16))))))

(declare-fun b!96896 () Bool)

(declare-fun e!63167 () ListLongMap!1541)

(assert (=> b!96896 (= e!63171 e!63167)))

(declare-fun c!16400 () Bool)

(assert (=> b!96896 (= c!16400 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96898 () Bool)

(assert (=> b!96898 (= e!63169 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96898 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!96899 () Bool)

(declare-fun lt!48462 () Unit!2887)

(declare-fun lt!48461 () Unit!2887)

(assert (=> b!96899 (= lt!48462 lt!48461)))

(declare-fun lt!48460 () (_ BitVec 64))

(declare-fun lt!48464 () ListLongMap!1541)

(declare-fun lt!48466 () (_ BitVec 64))

(declare-fun lt!48465 () V!3139)

(assert (=> b!96899 (not (contains!800 (+!137 lt!48464 (tuple2!2337 lt!48466 lt!48465)) lt!48460))))

(assert (=> b!96899 (= lt!48461 (addStillNotContains!41 lt!48464 lt!48466 lt!48465 lt!48460))))

(assert (=> b!96899 (= lt!48460 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!96899 (= lt!48465 (get!1286 (select (arr!2003 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!96899 (= lt!48466 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96899 (= lt!48464 call!9834)))

(assert (=> b!96899 (= e!63167 (+!137 call!9834 (tuple2!2337 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (get!1286 (select (arr!2003 (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!96900 () Bool)

(assert (=> b!96900 (= e!63168 e!63166)))

(declare-fun c!16403 () Bool)

(assert (=> b!96900 (= c!16403 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96901 () Bool)

(assert (=> b!96901 (= e!63167 call!9834)))

(declare-fun b!96897 () Bool)

(assert (=> b!96897 (= e!63168 e!63170)))

(assert (=> b!96897 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun res!48860 () Bool)

(assert (=> b!96897 (= res!48860 (contains!800 lt!48463 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96897 (=> (not res!48860) (not e!63170))))

(declare-fun d!25779 () Bool)

(assert (=> d!25779 e!63165))

(declare-fun res!48859 () Bool)

(assert (=> d!25779 (=> (not res!48859) (not e!63165))))

(assert (=> d!25779 (= res!48859 (not (contains!800 lt!48463 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25779 (= lt!48463 e!63171)))

(declare-fun c!16402 () Bool)

(assert (=> d!25779 (= c!16402 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25779 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25779 (= (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48463)))

(assert (= (and d!25779 c!16402) b!96892))

(assert (= (and d!25779 (not c!16402)) b!96896))

(assert (= (and b!96896 c!16400) b!96899))

(assert (= (and b!96896 (not c!16400)) b!96901))

(assert (= (or b!96899 b!96901) bm!9831))

(assert (= (and d!25779 res!48859) b!96894))

(assert (= (and b!96894 res!48858) b!96891))

(assert (= (and b!96891 res!48857) b!96898))

(assert (= (and b!96891 c!16401) b!96897))

(assert (= (and b!96891 (not c!16401)) b!96900))

(assert (= (and b!96897 res!48860) b!96890))

(assert (= (and b!96900 c!16403) b!96895))

(assert (= (and b!96900 (not c!16403)) b!96893))

(declare-fun b_lambda!4301 () Bool)

(assert (=> (not b_lambda!4301) (not b!96890)))

(assert (=> b!96890 t!5535))

(declare-fun b_and!5933 () Bool)

(assert (= b_and!5929 (and (=> t!5535 result!3233) b_and!5933)))

(assert (=> b!96890 t!5537))

(declare-fun b_and!5935 () Bool)

(assert (= b_and!5931 (and (=> t!5537 result!3235) b_and!5935)))

(declare-fun b_lambda!4303 () Bool)

(assert (=> (not b_lambda!4303) (not b!96899)))

(assert (=> b!96899 t!5535))

(declare-fun b_and!5937 () Bool)

(assert (= b_and!5933 (and (=> t!5535 result!3233) b_and!5937)))

(assert (=> b!96899 t!5537))

(declare-fun b_and!5939 () Bool)

(assert (= b_and!5935 (and (=> t!5537 result!3235) b_and!5939)))

(assert (=> b!96897 m!104003))

(assert (=> b!96897 m!104003))

(declare-fun m!105657 () Bool)

(assert (=> b!96897 m!105657))

(declare-fun m!105659 () Bool)

(assert (=> bm!9831 m!105659))

(assert (=> b!96890 m!104003))

(assert (=> b!96890 m!104157))

(assert (=> b!96890 m!104043))

(assert (=> b!96890 m!104157))

(assert (=> b!96890 m!104043))

(assert (=> b!96890 m!104161))

(assert (=> b!96890 m!104003))

(declare-fun m!105661 () Bool)

(assert (=> b!96890 m!105661))

(declare-fun m!105663 () Bool)

(assert (=> d!25779 m!105663))

(assert (=> d!25779 m!103977))

(declare-fun m!105665 () Bool)

(assert (=> b!96893 m!105665))

(declare-fun m!105667 () Bool)

(assert (=> b!96894 m!105667))

(assert (=> b!96896 m!104003))

(assert (=> b!96896 m!104003))

(assert (=> b!96896 m!104051))

(assert (=> b!96895 m!105659))

(assert (=> b!96899 m!104003))

(declare-fun m!105669 () Bool)

(assert (=> b!96899 m!105669))

(declare-fun m!105671 () Bool)

(assert (=> b!96899 m!105671))

(declare-fun m!105673 () Bool)

(assert (=> b!96899 m!105673))

(assert (=> b!96899 m!105671))

(assert (=> b!96899 m!104157))

(assert (=> b!96899 m!104043))

(assert (=> b!96899 m!104157))

(assert (=> b!96899 m!104043))

(assert (=> b!96899 m!104161))

(declare-fun m!105675 () Bool)

(assert (=> b!96899 m!105675))

(assert (=> b!96898 m!104003))

(assert (=> b!96898 m!104003))

(assert (=> b!96898 m!104051))

(assert (=> bm!9735 d!25779))

(declare-fun d!25781 () Bool)

(assert (=> d!25781 (contains!800 (+!137 lt!47950 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!47949)))

(declare-fun lt!48467 () Unit!2887)

(assert (=> d!25781 (= lt!48467 (choose!589 lt!47950 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!47949))))

(assert (=> d!25781 (contains!800 lt!47950 lt!47949)))

(assert (=> d!25781 (= (addStillContains!67 lt!47950 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!47949) lt!48467)))

(declare-fun bs!3992 () Bool)

(assert (= bs!3992 d!25781))

(assert (=> bs!3992 m!104309))

(assert (=> bs!3992 m!104309))

(assert (=> bs!3992 m!104319))

(declare-fun m!105677 () Bool)

(assert (=> bs!3992 m!105677))

(declare-fun m!105679 () Bool)

(assert (=> bs!3992 m!105679))

(assert (=> b!96205 d!25781))

(declare-fun d!25783 () Bool)

(declare-fun e!63172 () Bool)

(assert (=> d!25783 e!63172))

(declare-fun res!48861 () Bool)

(assert (=> d!25783 (=> (not res!48861) (not e!63172))))

(declare-fun lt!48470 () ListLongMap!1541)

(assert (=> d!25783 (= res!48861 (contains!800 lt!48470 (_1!1178 (tuple2!2337 lt!47955 (minValue!2342 newMap!16)))))))

(declare-fun lt!48469 () List!1603)

(assert (=> d!25783 (= lt!48470 (ListLongMap!1542 lt!48469))))

(declare-fun lt!48468 () Unit!2887)

(declare-fun lt!48471 () Unit!2887)

(assert (=> d!25783 (= lt!48468 lt!48471)))

(assert (=> d!25783 (= (getValueByKey!148 lt!48469 (_1!1178 (tuple2!2337 lt!47955 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47955 (minValue!2342 newMap!16)))))))

(assert (=> d!25783 (= lt!48471 (lemmaContainsTupThenGetReturnValue!66 lt!48469 (_1!1178 (tuple2!2337 lt!47955 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47955 (minValue!2342 newMap!16)))))))

(assert (=> d!25783 (= lt!48469 (insertStrictlySorted!68 (toList!786 lt!47961) (_1!1178 (tuple2!2337 lt!47955 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47955 (minValue!2342 newMap!16)))))))

(assert (=> d!25783 (= (+!137 lt!47961 (tuple2!2337 lt!47955 (minValue!2342 newMap!16))) lt!48470)))

(declare-fun b!96902 () Bool)

(declare-fun res!48862 () Bool)

(assert (=> b!96902 (=> (not res!48862) (not e!63172))))

(assert (=> b!96902 (= res!48862 (= (getValueByKey!148 (toList!786 lt!48470) (_1!1178 (tuple2!2337 lt!47955 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47955 (minValue!2342 newMap!16))))))))

(declare-fun b!96903 () Bool)

(assert (=> b!96903 (= e!63172 (contains!802 (toList!786 lt!48470) (tuple2!2337 lt!47955 (minValue!2342 newMap!16))))))

(assert (= (and d!25783 res!48861) b!96902))

(assert (= (and b!96902 res!48862) b!96903))

(declare-fun m!105681 () Bool)

(assert (=> d!25783 m!105681))

(declare-fun m!105683 () Bool)

(assert (=> d!25783 m!105683))

(declare-fun m!105685 () Bool)

(assert (=> d!25783 m!105685))

(declare-fun m!105687 () Bool)

(assert (=> d!25783 m!105687))

(declare-fun m!105689 () Bool)

(assert (=> b!96902 m!105689))

(declare-fun m!105691 () Bool)

(assert (=> b!96903 m!105691))

(assert (=> b!96205 d!25783))

(declare-fun d!25785 () Bool)

(assert (=> d!25785 (= (apply!91 (+!137 lt!47961 (tuple2!2337 lt!47955 (minValue!2342 newMap!16))) lt!47947) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47961 (tuple2!2337 lt!47955 (minValue!2342 newMap!16)))) lt!47947)))))

(declare-fun bs!3993 () Bool)

(assert (= bs!3993 d!25785))

(declare-fun m!105693 () Bool)

(assert (=> bs!3993 m!105693))

(assert (=> bs!3993 m!105693))

(declare-fun m!105695 () Bool)

(assert (=> bs!3993 m!105695))

(assert (=> b!96205 d!25785))

(declare-fun d!25787 () Bool)

(declare-fun e!63173 () Bool)

(assert (=> d!25787 e!63173))

(declare-fun res!48863 () Bool)

(assert (=> d!25787 (=> (not res!48863) (not e!63173))))

(declare-fun lt!48474 () ListLongMap!1541)

(assert (=> d!25787 (= res!48863 (contains!800 lt!48474 (_1!1178 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(declare-fun lt!48473 () List!1603)

(assert (=> d!25787 (= lt!48474 (ListLongMap!1542 lt!48473))))

(declare-fun lt!48472 () Unit!2887)

(declare-fun lt!48475 () Unit!2887)

(assert (=> d!25787 (= lt!48472 lt!48475)))

(assert (=> d!25787 (= (getValueByKey!148 lt!48473 (_1!1178 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) (Some!153 (_2!1178 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25787 (= lt!48475 (lemmaContainsTupThenGetReturnValue!66 lt!48473 (_1!1178 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) (_2!1178 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25787 (= lt!48473 (insertStrictlySorted!68 (toList!786 lt!47950) (_1!1178 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) (_2!1178 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25787 (= (+!137 lt!47950 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!48474)))

(declare-fun b!96904 () Bool)

(declare-fun res!48864 () Bool)

(assert (=> b!96904 (=> (not res!48864) (not e!63173))))

(assert (=> b!96904 (= res!48864 (= (getValueByKey!148 (toList!786 lt!48474) (_1!1178 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) (Some!153 (_2!1178 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))))))))

(declare-fun b!96905 () Bool)

(assert (=> b!96905 (= e!63173 (contains!802 (toList!786 lt!48474) (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))))))

(assert (= (and d!25787 res!48863) b!96904))

(assert (= (and b!96904 res!48864) b!96905))

(declare-fun m!105697 () Bool)

(assert (=> d!25787 m!105697))

(declare-fun m!105699 () Bool)

(assert (=> d!25787 m!105699))

(declare-fun m!105701 () Bool)

(assert (=> d!25787 m!105701))

(declare-fun m!105703 () Bool)

(assert (=> d!25787 m!105703))

(declare-fun m!105705 () Bool)

(assert (=> b!96904 m!105705))

(declare-fun m!105707 () Bool)

(assert (=> b!96905 m!105707))

(assert (=> b!96205 d!25787))

(declare-fun d!25789 () Bool)

(assert (=> d!25789 (= (apply!91 lt!47961 lt!47947) (get!1289 (getValueByKey!148 (toList!786 lt!47961) lt!47947)))))

(declare-fun bs!3994 () Bool)

(assert (= bs!3994 d!25789))

(declare-fun m!105709 () Bool)

(assert (=> bs!3994 m!105709))

(assert (=> bs!3994 m!105709))

(declare-fun m!105711 () Bool)

(assert (=> bs!3994 m!105711))

(assert (=> b!96205 d!25789))

(assert (=> b!96205 d!25679))

(declare-fun d!25791 () Bool)

(assert (=> d!25791 (= (apply!91 (+!137 lt!47953 (tuple2!2337 lt!47957 (minValue!2342 newMap!16))) lt!47948) (apply!91 lt!47953 lt!47948))))

(declare-fun lt!48476 () Unit!2887)

(assert (=> d!25791 (= lt!48476 (choose!588 lt!47953 lt!47957 (minValue!2342 newMap!16) lt!47948))))

(declare-fun e!63174 () Bool)

(assert (=> d!25791 e!63174))

(declare-fun res!48865 () Bool)

(assert (=> d!25791 (=> (not res!48865) (not e!63174))))

(assert (=> d!25791 (= res!48865 (contains!800 lt!47953 lt!47948))))

(assert (=> d!25791 (= (addApplyDifferent!67 lt!47953 lt!47957 (minValue!2342 newMap!16) lt!47948) lt!48476)))

(declare-fun b!96906 () Bool)

(assert (=> b!96906 (= e!63174 (not (= lt!47948 lt!47957)))))

(assert (= (and d!25791 res!48865) b!96906))

(declare-fun m!105713 () Bool)

(assert (=> d!25791 m!105713))

(assert (=> d!25791 m!104303))

(declare-fun m!105715 () Bool)

(assert (=> d!25791 m!105715))

(assert (=> d!25791 m!104315))

(assert (=> d!25791 m!104323))

(assert (=> d!25791 m!104315))

(assert (=> b!96205 d!25791))

(declare-fun d!25793 () Bool)

(assert (=> d!25793 (= (apply!91 (+!137 lt!47953 (tuple2!2337 lt!47957 (minValue!2342 newMap!16))) lt!47948) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47953 (tuple2!2337 lt!47957 (minValue!2342 newMap!16)))) lt!47948)))))

(declare-fun bs!3995 () Bool)

(assert (= bs!3995 d!25793))

(declare-fun m!105717 () Bool)

(assert (=> bs!3995 m!105717))

(assert (=> bs!3995 m!105717))

(declare-fun m!105719 () Bool)

(assert (=> bs!3995 m!105719))

(assert (=> b!96205 d!25793))

(declare-fun d!25795 () Bool)

(declare-fun e!63175 () Bool)

(assert (=> d!25795 e!63175))

(declare-fun res!48866 () Bool)

(assert (=> d!25795 (=> (not res!48866) (not e!63175))))

(declare-fun lt!48479 () ListLongMap!1541)

(assert (=> d!25795 (= res!48866 (contains!800 lt!48479 (_1!1178 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(declare-fun lt!48478 () List!1603)

(assert (=> d!25795 (= lt!48479 (ListLongMap!1542 lt!48478))))

(declare-fun lt!48477 () Unit!2887)

(declare-fun lt!48480 () Unit!2887)

(assert (=> d!25795 (= lt!48477 lt!48480)))

(assert (=> d!25795 (= (getValueByKey!148 lt!48478 (_1!1178 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) (Some!153 (_2!1178 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25795 (= lt!48480 (lemmaContainsTupThenGetReturnValue!66 lt!48478 (_1!1178 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) (_2!1178 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25795 (= lt!48478 (insertStrictlySorted!68 (toList!786 lt!47943) (_1!1178 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) (_2!1178 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25795 (= (+!137 lt!47943 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!48479)))

(declare-fun b!96907 () Bool)

(declare-fun res!48867 () Bool)

(assert (=> b!96907 (=> (not res!48867) (not e!63175))))

(assert (=> b!96907 (= res!48867 (= (getValueByKey!148 (toList!786 lt!48479) (_1!1178 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) (Some!153 (_2!1178 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))))))))

(declare-fun b!96908 () Bool)

(assert (=> b!96908 (= e!63175 (contains!802 (toList!786 lt!48479) (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))))))

(assert (= (and d!25795 res!48866) b!96907))

(assert (= (and b!96907 res!48867) b!96908))

(declare-fun m!105721 () Bool)

(assert (=> d!25795 m!105721))

(declare-fun m!105723 () Bool)

(assert (=> d!25795 m!105723))

(declare-fun m!105725 () Bool)

(assert (=> d!25795 m!105725))

(declare-fun m!105727 () Bool)

(assert (=> d!25795 m!105727))

(declare-fun m!105729 () Bool)

(assert (=> b!96907 m!105729))

(declare-fun m!105731 () Bool)

(assert (=> b!96908 m!105731))

(assert (=> b!96205 d!25795))

(declare-fun d!25797 () Bool)

(assert (=> d!25797 (= (apply!91 (+!137 lt!47943 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!47962) (apply!91 lt!47943 lt!47962))))

(declare-fun lt!48481 () Unit!2887)

(assert (=> d!25797 (= lt!48481 (choose!588 lt!47943 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!47962))))

(declare-fun e!63176 () Bool)

(assert (=> d!25797 e!63176))

(declare-fun res!48868 () Bool)

(assert (=> d!25797 (=> (not res!48868) (not e!63176))))

(assert (=> d!25797 (= res!48868 (contains!800 lt!47943 lt!47962))))

(assert (=> d!25797 (= (addApplyDifferent!67 lt!47943 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!47962) lt!48481)))

(declare-fun b!96909 () Bool)

(assert (=> b!96909 (= e!63176 (not (= lt!47962 lt!47954)))))

(assert (= (and d!25797 res!48868) b!96909))

(declare-fun m!105733 () Bool)

(assert (=> d!25797 m!105733))

(assert (=> d!25797 m!104325))

(declare-fun m!105735 () Bool)

(assert (=> d!25797 m!105735))

(assert (=> d!25797 m!104311))

(assert (=> d!25797 m!104313))

(assert (=> d!25797 m!104311))

(assert (=> b!96205 d!25797))

(declare-fun d!25799 () Bool)

(declare-fun e!63177 () Bool)

(assert (=> d!25799 e!63177))

(declare-fun res!48869 () Bool)

(assert (=> d!25799 (=> (not res!48869) (not e!63177))))

(declare-fun lt!48484 () ListLongMap!1541)

(assert (=> d!25799 (= res!48869 (contains!800 lt!48484 (_1!1178 (tuple2!2337 lt!47957 (minValue!2342 newMap!16)))))))

(declare-fun lt!48483 () List!1603)

(assert (=> d!25799 (= lt!48484 (ListLongMap!1542 lt!48483))))

(declare-fun lt!48482 () Unit!2887)

(declare-fun lt!48485 () Unit!2887)

(assert (=> d!25799 (= lt!48482 lt!48485)))

(assert (=> d!25799 (= (getValueByKey!148 lt!48483 (_1!1178 (tuple2!2337 lt!47957 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47957 (minValue!2342 newMap!16)))))))

(assert (=> d!25799 (= lt!48485 (lemmaContainsTupThenGetReturnValue!66 lt!48483 (_1!1178 (tuple2!2337 lt!47957 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47957 (minValue!2342 newMap!16)))))))

(assert (=> d!25799 (= lt!48483 (insertStrictlySorted!68 (toList!786 lt!47953) (_1!1178 (tuple2!2337 lt!47957 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47957 (minValue!2342 newMap!16)))))))

(assert (=> d!25799 (= (+!137 lt!47953 (tuple2!2337 lt!47957 (minValue!2342 newMap!16))) lt!48484)))

(declare-fun b!96910 () Bool)

(declare-fun res!48870 () Bool)

(assert (=> b!96910 (=> (not res!48870) (not e!63177))))

(assert (=> b!96910 (= res!48870 (= (getValueByKey!148 (toList!786 lt!48484) (_1!1178 (tuple2!2337 lt!47957 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47957 (minValue!2342 newMap!16))))))))

(declare-fun b!96911 () Bool)

(assert (=> b!96911 (= e!63177 (contains!802 (toList!786 lt!48484) (tuple2!2337 lt!47957 (minValue!2342 newMap!16))))))

(assert (= (and d!25799 res!48869) b!96910))

(assert (= (and b!96910 res!48870) b!96911))

(declare-fun m!105737 () Bool)

(assert (=> d!25799 m!105737))

(declare-fun m!105739 () Bool)

(assert (=> d!25799 m!105739))

(declare-fun m!105741 () Bool)

(assert (=> d!25799 m!105741))

(declare-fun m!105743 () Bool)

(assert (=> d!25799 m!105743))

(declare-fun m!105745 () Bool)

(assert (=> b!96910 m!105745))

(declare-fun m!105747 () Bool)

(assert (=> b!96911 m!105747))

(assert (=> b!96205 d!25799))

(declare-fun d!25801 () Bool)

(declare-fun e!63179 () Bool)

(assert (=> d!25801 e!63179))

(declare-fun res!48871 () Bool)

(assert (=> d!25801 (=> res!48871 e!63179)))

(declare-fun lt!48488 () Bool)

(assert (=> d!25801 (= res!48871 (not lt!48488))))

(declare-fun lt!48486 () Bool)

(assert (=> d!25801 (= lt!48488 lt!48486)))

(declare-fun lt!48487 () Unit!2887)

(declare-fun e!63178 () Unit!2887)

(assert (=> d!25801 (= lt!48487 e!63178)))

(declare-fun c!16404 () Bool)

(assert (=> d!25801 (= c!16404 lt!48486)))

(assert (=> d!25801 (= lt!48486 (containsKey!152 (toList!786 (+!137 lt!47950 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) lt!47949))))

(assert (=> d!25801 (= (contains!800 (+!137 lt!47950 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!47949) lt!48488)))

(declare-fun b!96912 () Bool)

(declare-fun lt!48489 () Unit!2887)

(assert (=> b!96912 (= e!63178 lt!48489)))

(assert (=> b!96912 (= lt!48489 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 (+!137 lt!47950 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) lt!47949))))

(assert (=> b!96912 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47950 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) lt!47949))))

(declare-fun b!96913 () Bool)

(declare-fun Unit!2936 () Unit!2887)

(assert (=> b!96913 (= e!63178 Unit!2936)))

(declare-fun b!96914 () Bool)

(assert (=> b!96914 (= e!63179 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47950 (tuple2!2337 lt!47960 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) lt!47949)))))

(assert (= (and d!25801 c!16404) b!96912))

(assert (= (and d!25801 (not c!16404)) b!96913))

(assert (= (and d!25801 (not res!48871)) b!96914))

(declare-fun m!105749 () Bool)

(assert (=> d!25801 m!105749))

(declare-fun m!105751 () Bool)

(assert (=> b!96912 m!105751))

(declare-fun m!105753 () Bool)

(assert (=> b!96912 m!105753))

(assert (=> b!96912 m!105753))

(declare-fun m!105755 () Bool)

(assert (=> b!96912 m!105755))

(assert (=> b!96914 m!105753))

(assert (=> b!96914 m!105753))

(assert (=> b!96914 m!105755))

(assert (=> b!96205 d!25801))

(declare-fun d!25803 () Bool)

(assert (=> d!25803 (= (apply!91 (+!137 lt!47961 (tuple2!2337 lt!47955 (minValue!2342 newMap!16))) lt!47947) (apply!91 lt!47961 lt!47947))))

(declare-fun lt!48490 () Unit!2887)

(assert (=> d!25803 (= lt!48490 (choose!588 lt!47961 lt!47955 (minValue!2342 newMap!16) lt!47947))))

(declare-fun e!63180 () Bool)

(assert (=> d!25803 e!63180))

(declare-fun res!48872 () Bool)

(assert (=> d!25803 (=> (not res!48872) (not e!63180))))

(assert (=> d!25803 (= res!48872 (contains!800 lt!47961 lt!47947))))

(assert (=> d!25803 (= (addApplyDifferent!67 lt!47961 lt!47955 (minValue!2342 newMap!16) lt!47947) lt!48490)))

(declare-fun b!96915 () Bool)

(assert (=> b!96915 (= e!63180 (not (= lt!47947 lt!47955)))))

(assert (= (and d!25803 res!48872) b!96915))

(declare-fun m!105757 () Bool)

(assert (=> d!25803 m!105757))

(assert (=> d!25803 m!104295))

(declare-fun m!105759 () Bool)

(assert (=> d!25803 m!105759))

(assert (=> d!25803 m!104299))

(assert (=> d!25803 m!104301))

(assert (=> d!25803 m!104299))

(assert (=> b!96205 d!25803))

(declare-fun d!25805 () Bool)

(assert (=> d!25805 (= (apply!91 (+!137 lt!47943 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!47962) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47943 (tuple2!2337 lt!47954 (ite (and c!16115 c!16114) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) lt!47962)))))

(declare-fun bs!3996 () Bool)

(assert (= bs!3996 d!25805))

(declare-fun m!105761 () Bool)

(assert (=> bs!3996 m!105761))

(assert (=> bs!3996 m!105761))

(declare-fun m!105763 () Bool)

(assert (=> bs!3996 m!105763))

(assert (=> b!96205 d!25805))

(declare-fun d!25807 () Bool)

(assert (=> d!25807 (= (apply!91 lt!47943 lt!47962) (get!1289 (getValueByKey!148 (toList!786 lt!47943) lt!47962)))))

(declare-fun bs!3997 () Bool)

(assert (= bs!3997 d!25807))

(declare-fun m!105765 () Bool)

(assert (=> bs!3997 m!105765))

(assert (=> bs!3997 m!105765))

(declare-fun m!105767 () Bool)

(assert (=> bs!3997 m!105767))

(assert (=> b!96205 d!25807))

(declare-fun d!25809 () Bool)

(assert (=> d!25809 (= (apply!91 lt!47953 lt!47948) (get!1289 (getValueByKey!148 (toList!786 lt!47953) lt!47948)))))

(declare-fun bs!3998 () Bool)

(assert (= bs!3998 d!25809))

(declare-fun m!105769 () Bool)

(assert (=> bs!3998 m!105769))

(assert (=> bs!3998 m!105769))

(declare-fun m!105771 () Bool)

(assert (=> bs!3998 m!105771))

(assert (=> b!96205 d!25809))

(declare-fun d!25811 () Bool)

(declare-fun e!63181 () Bool)

(assert (=> d!25811 e!63181))

(declare-fun res!48873 () Bool)

(assert (=> d!25811 (=> (not res!48873) (not e!63181))))

(declare-fun lt!48493 () ListLongMap!1541)

(assert (=> d!25811 (= res!48873 (contains!800 lt!48493 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun lt!48492 () List!1603)

(assert (=> d!25811 (= lt!48493 (ListLongMap!1542 lt!48492))))

(declare-fun lt!48491 () Unit!2887)

(declare-fun lt!48494 () Unit!2887)

(assert (=> d!25811 (= lt!48491 lt!48494)))

(assert (=> d!25811 (= (getValueByKey!148 lt!48492 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25811 (= lt!48494 (lemmaContainsTupThenGetReturnValue!66 lt!48492 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25811 (= lt!48492 (insertStrictlySorted!68 (toList!786 call!9750) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25811 (= (+!137 call!9750 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) lt!48493)))

(declare-fun b!96916 () Bool)

(declare-fun res!48874 () Bool)

(assert (=> b!96916 (=> (not res!48874) (not e!63181))))

(assert (=> b!96916 (= res!48874 (= (getValueByKey!148 (toList!786 lt!48493) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun b!96917 () Bool)

(assert (=> b!96917 (= e!63181 (contains!802 (toList!786 lt!48493) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(assert (= (and d!25811 res!48873) b!96916))

(assert (= (and b!96916 res!48874) b!96917))

(declare-fun m!105773 () Bool)

(assert (=> d!25811 m!105773))

(declare-fun m!105775 () Bool)

(assert (=> d!25811 m!105775))

(declare-fun m!105777 () Bool)

(assert (=> d!25811 m!105777))

(declare-fun m!105779 () Bool)

(assert (=> d!25811 m!105779))

(declare-fun m!105781 () Bool)

(assert (=> b!96916 m!105781))

(declare-fun m!105783 () Bool)

(assert (=> b!96917 m!105783))

(assert (=> b!96193 d!25811))

(declare-fun d!25813 () Bool)

(declare-fun isEmpty!360 (List!1603) Bool)

(assert (=> d!25813 (= (isEmpty!358 lt!47931) (isEmpty!360 (toList!786 lt!47931)))))

(declare-fun bs!3999 () Bool)

(assert (= bs!3999 d!25813))

(declare-fun m!105785 () Bool)

(assert (=> bs!3999 m!105785))

(assert (=> b!96155 d!25813))

(declare-fun d!25815 () Bool)

(declare-fun e!63183 () Bool)

(assert (=> d!25815 e!63183))

(declare-fun res!48875 () Bool)

(assert (=> d!25815 (=> res!48875 e!63183)))

(declare-fun lt!48497 () Bool)

(assert (=> d!25815 (= res!48875 (not lt!48497))))

(declare-fun lt!48495 () Bool)

(assert (=> d!25815 (= lt!48497 lt!48495)))

(declare-fun lt!48496 () Unit!2887)

(declare-fun e!63182 () Unit!2887)

(assert (=> d!25815 (= lt!48496 e!63182)))

(declare-fun c!16405 () Bool)

(assert (=> d!25815 (= c!16405 lt!48495)))

(assert (=> d!25815 (= lt!48495 (containsKey!152 (toList!786 lt!47952) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25815 (= (contains!800 lt!47952 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48497)))

(declare-fun b!96918 () Bool)

(declare-fun lt!48498 () Unit!2887)

(assert (=> b!96918 (= e!63182 lt!48498)))

(assert (=> b!96918 (= lt!48498 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47952) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96918 (isDefined!102 (getValueByKey!148 (toList!786 lt!47952) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96919 () Bool)

(declare-fun Unit!2937 () Unit!2887)

(assert (=> b!96919 (= e!63182 Unit!2937)))

(declare-fun b!96920 () Bool)

(assert (=> b!96920 (= e!63183 (isDefined!102 (getValueByKey!148 (toList!786 lt!47952) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25815 c!16405) b!96918))

(assert (= (and d!25815 (not c!16405)) b!96919))

(assert (= (and d!25815 (not res!48875)) b!96920))

(declare-fun m!105787 () Bool)

(assert (=> d!25815 m!105787))

(declare-fun m!105789 () Bool)

(assert (=> b!96918 m!105789))

(assert (=> b!96918 m!105005))

(assert (=> b!96918 m!105005))

(declare-fun m!105791 () Bool)

(assert (=> b!96918 m!105791))

(assert (=> b!96920 m!105005))

(assert (=> b!96920 m!105005))

(assert (=> b!96920 m!105791))

(assert (=> bm!9751 d!25815))

(assert (=> b!96309 d!25655))

(declare-fun d!25817 () Bool)

(declare-fun e!63184 () Bool)

(assert (=> d!25817 e!63184))

(declare-fun res!48876 () Bool)

(assert (=> d!25817 (=> (not res!48876) (not e!63184))))

(declare-fun lt!48501 () ListLongMap!1541)

(assert (=> d!25817 (= res!48876 (contains!800 lt!48501 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48500 () List!1603)

(assert (=> d!25817 (= lt!48501 (ListLongMap!1542 lt!48500))))

(declare-fun lt!48499 () Unit!2887)

(declare-fun lt!48502 () Unit!2887)

(assert (=> d!25817 (= lt!48499 lt!48502)))

(assert (=> d!25817 (= (getValueByKey!148 lt!48500 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25817 (= lt!48502 (lemmaContainsTupThenGetReturnValue!66 lt!48500 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25817 (= lt!48500 (insertStrictlySorted!68 (toList!786 (map!1246 newMap!16)) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25817 (= (+!137 (map!1246 newMap!16) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48501)))

(declare-fun b!96921 () Bool)

(declare-fun res!48877 () Bool)

(assert (=> b!96921 (=> (not res!48877) (not e!63184))))

(assert (=> b!96921 (= res!48877 (= (getValueByKey!148 (toList!786 lt!48501) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96922 () Bool)

(assert (=> b!96922 (= e!63184 (contains!802 (toList!786 lt!48501) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25817 res!48876) b!96921))

(assert (= (and b!96921 res!48877) b!96922))

(declare-fun m!105793 () Bool)

(assert (=> d!25817 m!105793))

(declare-fun m!105795 () Bool)

(assert (=> d!25817 m!105795))

(declare-fun m!105797 () Bool)

(assert (=> d!25817 m!105797))

(declare-fun m!105799 () Bool)

(assert (=> d!25817 m!105799))

(declare-fun m!105801 () Bool)

(assert (=> b!96921 m!105801))

(declare-fun m!105803 () Bool)

(assert (=> b!96922 m!105803))

(assert (=> b!96309 d!25817))

(assert (=> b!96309 d!25279))

(assert (=> b!96109 d!25435))

(declare-fun d!25819 () Bool)

(declare-fun e!63185 () Bool)

(assert (=> d!25819 e!63185))

(declare-fun res!48878 () Bool)

(assert (=> d!25819 (=> (not res!48878) (not e!63185))))

(declare-fun lt!48505 () ListLongMap!1541)

(assert (=> d!25819 (= res!48878 (contains!800 lt!48505 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48504 () List!1603)

(assert (=> d!25819 (= lt!48505 (ListLongMap!1542 lt!48504))))

(declare-fun lt!48503 () Unit!2887)

(declare-fun lt!48506 () Unit!2887)

(assert (=> d!25819 (= lt!48503 lt!48506)))

(assert (=> d!25819 (= (getValueByKey!148 lt!48504 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25819 (= lt!48506 (lemmaContainsTupThenGetReturnValue!66 lt!48504 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25819 (= lt!48504 (insertStrictlySorted!68 (toList!786 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25819 (= (+!137 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48505)))

(declare-fun b!96923 () Bool)

(declare-fun res!48879 () Bool)

(assert (=> b!96923 (=> (not res!48879) (not e!63185))))

(assert (=> b!96923 (= res!48879 (= (getValueByKey!148 (toList!786 lt!48505) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96924 () Bool)

(assert (=> b!96924 (= e!63185 (contains!802 (toList!786 lt!48505) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25819 res!48878) b!96923))

(assert (= (and b!96923 res!48879) b!96924))

(declare-fun m!105805 () Bool)

(assert (=> d!25819 m!105805))

(declare-fun m!105807 () Bool)

(assert (=> d!25819 m!105807))

(declare-fun m!105809 () Bool)

(assert (=> d!25819 m!105809))

(declare-fun m!105811 () Bool)

(assert (=> d!25819 m!105811))

(declare-fun m!105813 () Bool)

(assert (=> b!96923 m!105813))

(declare-fun m!105815 () Bool)

(assert (=> b!96924 m!105815))

(assert (=> d!25357 d!25819))

(declare-fun d!25821 () Bool)

(declare-fun e!63198 () Bool)

(assert (=> d!25821 e!63198))

(declare-fun res!48883 () Bool)

(assert (=> d!25821 (=> (not res!48883) (not e!63198))))

(assert (=> d!25821 (= res!48883 (or (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))))

(declare-fun lt!48516 () ListLongMap!1541)

(declare-fun lt!48509 () ListLongMap!1541)

(assert (=> d!25821 (= lt!48516 lt!48509)))

(declare-fun lt!48508 () Unit!2887)

(declare-fun e!63190 () Unit!2887)

(assert (=> d!25821 (= lt!48508 e!63190)))

(declare-fun c!16408 () Bool)

(declare-fun e!63195 () Bool)

(assert (=> d!25821 (= c!16408 e!63195)))

(declare-fun res!48885 () Bool)

(assert (=> d!25821 (=> (not res!48885) (not e!63195))))

(assert (=> d!25821 (= res!48885 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun e!63196 () ListLongMap!1541)

(assert (=> d!25821 (= lt!48509 e!63196)))

(declare-fun c!16411 () Bool)

(assert (=> d!25821 (= c!16411 (and (not (= (bvand lt!47696 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!47696 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25821 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25821 (= (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48516)))

(declare-fun b!96925 () Bool)

(declare-fun e!63193 () ListLongMap!1541)

(assert (=> b!96925 (= e!63196 e!63193)))

(declare-fun c!16406 () Bool)

(assert (=> b!96925 (= c!16406 (and (not (= (bvand lt!47696 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!47696 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96926 () Bool)

(declare-fun e!63187 () Bool)

(assert (=> b!96926 (= e!63187 (= (apply!91 lt!48516 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!96927 () Bool)

(declare-fun e!63192 () Bool)

(assert (=> b!96927 (= e!63198 e!63192)))

(declare-fun c!16407 () Bool)

(assert (=> b!96927 (= c!16407 (not (= (bvand lt!47696 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!9837 () ListLongMap!1541)

(declare-fun b!96928 () Bool)

(assert (=> b!96928 (= e!63196 (+!137 call!9837 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!9832 () Bool)

(declare-fun call!9836 () ListLongMap!1541)

(declare-fun call!9841 () ListLongMap!1541)

(assert (=> bm!9832 (= call!9836 call!9841)))

(declare-fun b!96929 () Bool)

(declare-fun c!16409 () Bool)

(assert (=> b!96929 (= c!16409 (and (not (= (bvand lt!47696 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!47696 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63197 () ListLongMap!1541)

(assert (=> b!96929 (= e!63193 e!63197)))

(declare-fun b!96930 () Bool)

(declare-fun res!48880 () Bool)

(assert (=> b!96930 (=> (not res!48880) (not e!63198))))

(declare-fun e!63194 () Bool)

(assert (=> b!96930 (= res!48880 e!63194)))

(declare-fun res!48884 () Bool)

(assert (=> b!96930 (=> res!48884 e!63194)))

(declare-fun e!63186 () Bool)

(assert (=> b!96930 (= res!48884 (not e!63186))))

(declare-fun res!48886 () Bool)

(assert (=> b!96930 (=> (not res!48886) (not e!63186))))

(assert (=> b!96930 (= res!48886 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun bm!9833 () Bool)

(declare-fun call!9838 () ListLongMap!1541)

(assert (=> bm!9833 (= call!9837 (+!137 (ite c!16411 call!9841 (ite c!16406 call!9836 call!9838)) (ite (or c!16411 c!16406) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96931 () Bool)

(assert (=> b!96931 (= e!63195 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96932 () Bool)

(declare-fun e!63191 () Bool)

(assert (=> b!96932 (= e!63194 e!63191)))

(declare-fun res!48881 () Bool)

(assert (=> b!96932 (=> (not res!48881) (not e!63191))))

(assert (=> b!96932 (= res!48881 (contains!800 lt!48516 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96932 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96933 () Bool)

(declare-fun call!9839 () Bool)

(assert (=> b!96933 (= e!63192 (not call!9839))))

(declare-fun b!96934 () Bool)

(assert (=> b!96934 (= e!63197 call!9838)))

(declare-fun bm!9834 () Bool)

(assert (=> bm!9834 (= call!9838 call!9836)))

(declare-fun b!96935 () Bool)

(declare-fun e!63188 () Bool)

(declare-fun call!9835 () Bool)

(assert (=> b!96935 (= e!63188 (not call!9835))))

(declare-fun bm!9835 () Bool)

(assert (=> bm!9835 (= call!9835 (contains!800 lt!48516 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96936 () Bool)

(assert (=> b!96936 (= e!63191 (= (apply!91 lt!48516 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96936 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_values!2440 newMap!16))))))

(assert (=> b!96936 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96937 () Bool)

(declare-fun Unit!2938 () Unit!2887)

(assert (=> b!96937 (= e!63190 Unit!2938)))

(declare-fun bm!9836 () Bool)

(declare-fun call!9840 () ListLongMap!1541)

(assert (=> bm!9836 (= call!9840 call!9837)))

(declare-fun b!96938 () Bool)

(declare-fun res!48887 () Bool)

(assert (=> b!96938 (=> (not res!48887) (not e!63198))))

(assert (=> b!96938 (= res!48887 e!63188)))

(declare-fun c!16410 () Bool)

(assert (=> b!96938 (= c!16410 (not (= (bvand lt!47696 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!96939 () Bool)

(assert (=> b!96939 (= e!63193 call!9840)))

(declare-fun b!96940 () Bool)

(declare-fun lt!48520 () Unit!2887)

(assert (=> b!96940 (= e!63190 lt!48520)))

(declare-fun lt!48514 () ListLongMap!1541)

(assert (=> b!96940 (= lt!48514 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48524 () (_ BitVec 64))

(assert (=> b!96940 (= lt!48524 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48513 () (_ BitVec 64))

(assert (=> b!96940 (= lt!48513 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48515 () Unit!2887)

(assert (=> b!96940 (= lt!48515 (addStillContains!67 lt!48514 lt!48524 (zeroValue!2342 newMap!16) lt!48513))))

(assert (=> b!96940 (contains!800 (+!137 lt!48514 (tuple2!2337 lt!48524 (zeroValue!2342 newMap!16))) lt!48513)))

(declare-fun lt!48523 () Unit!2887)

(assert (=> b!96940 (= lt!48523 lt!48515)))

(declare-fun lt!48517 () ListLongMap!1541)

(assert (=> b!96940 (= lt!48517 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48521 () (_ BitVec 64))

(assert (=> b!96940 (= lt!48521 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48512 () (_ BitVec 64))

(assert (=> b!96940 (= lt!48512 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48522 () Unit!2887)

(assert (=> b!96940 (= lt!48522 (addApplyDifferent!67 lt!48517 lt!48521 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!48512))))

(assert (=> b!96940 (= (apply!91 (+!137 lt!48517 (tuple2!2337 lt!48521 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48512) (apply!91 lt!48517 lt!48512))))

(declare-fun lt!48510 () Unit!2887)

(assert (=> b!96940 (= lt!48510 lt!48522)))

(declare-fun lt!48507 () ListLongMap!1541)

(assert (=> b!96940 (= lt!48507 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48518 () (_ BitVec 64))

(assert (=> b!96940 (= lt!48518 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48526 () (_ BitVec 64))

(assert (=> b!96940 (= lt!48526 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48528 () Unit!2887)

(assert (=> b!96940 (= lt!48528 (addApplyDifferent!67 lt!48507 lt!48518 (zeroValue!2342 newMap!16) lt!48526))))

(assert (=> b!96940 (= (apply!91 (+!137 lt!48507 (tuple2!2337 lt!48518 (zeroValue!2342 newMap!16))) lt!48526) (apply!91 lt!48507 lt!48526))))

(declare-fun lt!48527 () Unit!2887)

(assert (=> b!96940 (= lt!48527 lt!48528)))

(declare-fun lt!48525 () ListLongMap!1541)

(assert (=> b!96940 (= lt!48525 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48519 () (_ BitVec 64))

(assert (=> b!96940 (= lt!48519 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48511 () (_ BitVec 64))

(assert (=> b!96940 (= lt!48511 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96940 (= lt!48520 (addApplyDifferent!67 lt!48525 lt!48519 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!48511))))

(assert (=> b!96940 (= (apply!91 (+!137 lt!48525 (tuple2!2337 lt!48519 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48511) (apply!91 lt!48525 lt!48511))))

(declare-fun b!96941 () Bool)

(assert (=> b!96941 (= e!63192 e!63187)))

(declare-fun res!48888 () Bool)

(assert (=> b!96941 (= res!48888 call!9839)))

(assert (=> b!96941 (=> (not res!48888) (not e!63187))))

(declare-fun b!96942 () Bool)

(assert (=> b!96942 (= e!63186 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9837 () Bool)

(assert (=> bm!9837 (= call!9841 (getCurrentListMapNoExtraKeys!101 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9838 () Bool)

(assert (=> bm!9838 (= call!9839 (contains!800 lt!48516 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96943 () Bool)

(assert (=> b!96943 (= e!63197 call!9840)))

(declare-fun b!96944 () Bool)

(declare-fun e!63189 () Bool)

(assert (=> b!96944 (= e!63189 (= (apply!91 lt!48516 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96945 () Bool)

(assert (=> b!96945 (= e!63188 e!63189)))

(declare-fun res!48882 () Bool)

(assert (=> b!96945 (= res!48882 call!9835)))

(assert (=> b!96945 (=> (not res!48882) (not e!63189))))

(assert (= (and d!25821 c!16411) b!96928))

(assert (= (and d!25821 (not c!16411)) b!96925))

(assert (= (and b!96925 c!16406) b!96939))

(assert (= (and b!96925 (not c!16406)) b!96929))

(assert (= (and b!96929 c!16409) b!96943))

(assert (= (and b!96929 (not c!16409)) b!96934))

(assert (= (or b!96943 b!96934) bm!9834))

(assert (= (or b!96939 bm!9834) bm!9832))

(assert (= (or b!96939 b!96943) bm!9836))

(assert (= (or b!96928 bm!9832) bm!9837))

(assert (= (or b!96928 bm!9836) bm!9833))

(assert (= (and d!25821 res!48885) b!96931))

(assert (= (and d!25821 c!16408) b!96940))

(assert (= (and d!25821 (not c!16408)) b!96937))

(assert (= (and d!25821 res!48883) b!96930))

(assert (= (and b!96930 res!48886) b!96942))

(assert (= (and b!96930 (not res!48884)) b!96932))

(assert (= (and b!96932 res!48881) b!96936))

(assert (= (and b!96930 res!48880) b!96938))

(assert (= (and b!96938 c!16410) b!96945))

(assert (= (and b!96938 (not c!16410)) b!96935))

(assert (= (and b!96945 res!48882) b!96944))

(assert (= (or b!96945 b!96935) bm!9835))

(assert (= (and b!96938 res!48887) b!96927))

(assert (= (and b!96927 c!16407) b!96941))

(assert (= (and b!96927 (not c!16407)) b!96933))

(assert (= (and b!96941 res!48888) b!96926))

(assert (= (or b!96941 b!96933) bm!9838))

(declare-fun b_lambda!4305 () Bool)

(assert (=> (not b_lambda!4305) (not b!96936)))

(assert (=> b!96936 t!5535))

(declare-fun b_and!5941 () Bool)

(assert (= b_and!5937 (and (=> t!5535 result!3233) b_and!5941)))

(assert (=> b!96936 t!5537))

(declare-fun b_and!5943 () Bool)

(assert (= b_and!5939 (and (=> t!5537 result!3235) b_and!5943)))

(assert (=> b!96932 m!104003))

(assert (=> b!96932 m!104003))

(declare-fun m!105817 () Bool)

(assert (=> b!96932 m!105817))

(declare-fun m!105819 () Bool)

(assert (=> b!96940 m!105819))

(declare-fun m!105821 () Bool)

(assert (=> b!96940 m!105821))

(declare-fun m!105823 () Bool)

(assert (=> b!96940 m!105823))

(declare-fun m!105825 () Bool)

(assert (=> b!96940 m!105825))

(declare-fun m!105827 () Bool)

(assert (=> b!96940 m!105827))

(assert (=> b!96940 m!105823))

(declare-fun m!105829 () Bool)

(assert (=> b!96940 m!105829))

(assert (=> b!96940 m!103765))

(declare-fun m!105831 () Bool)

(assert (=> b!96940 m!105831))

(declare-fun m!105833 () Bool)

(assert (=> b!96940 m!105833))

(declare-fun m!105835 () Bool)

(assert (=> b!96940 m!105835))

(declare-fun m!105837 () Bool)

(assert (=> b!96940 m!105837))

(declare-fun m!105839 () Bool)

(assert (=> b!96940 m!105839))

(assert (=> b!96940 m!103765))

(declare-fun m!105841 () Bool)

(assert (=> b!96940 m!105841))

(assert (=> b!96940 m!105833))

(declare-fun m!105843 () Bool)

(assert (=> b!96940 m!105843))

(assert (=> b!96940 m!105835))

(assert (=> b!96940 m!104003))

(assert (=> b!96940 m!103765))

(declare-fun m!105845 () Bool)

(assert (=> b!96940 m!105845))

(assert (=> b!96940 m!105839))

(declare-fun m!105847 () Bool)

(assert (=> b!96940 m!105847))

(declare-fun m!105849 () Bool)

(assert (=> b!96940 m!105849))

(assert (=> b!96936 m!104039))

(assert (=> b!96936 m!104003))

(declare-fun m!105851 () Bool)

(assert (=> b!96936 m!105851))

(assert (=> b!96936 m!104039))

(assert (=> b!96936 m!104043))

(assert (=> b!96936 m!104045))

(assert (=> b!96936 m!104003))

(assert (=> b!96936 m!104043))

(declare-fun m!105853 () Bool)

(assert (=> b!96928 m!105853))

(assert (=> d!25821 m!103977))

(declare-fun m!105855 () Bool)

(assert (=> bm!9835 m!105855))

(assert (=> b!96931 m!104003))

(assert (=> b!96931 m!104003))

(assert (=> b!96931 m!104051))

(declare-fun m!105857 () Bool)

(assert (=> bm!9833 m!105857))

(declare-fun m!105859 () Bool)

(assert (=> b!96944 m!105859))

(declare-fun m!105861 () Bool)

(assert (=> bm!9838 m!105861))

(declare-fun m!105863 () Bool)

(assert (=> b!96926 m!105863))

(assert (=> b!96942 m!104003))

(assert (=> b!96942 m!104003))

(assert (=> b!96942 m!104051))

(assert (=> bm!9837 m!103765))

(assert (=> bm!9837 m!105841))

(assert (=> d!25357 d!25821))

(assert (=> d!25357 d!25303))

(declare-fun d!25823 () Bool)

(assert (=> d!25823 (= (+!137 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(assert (=> d!25823 true))

(declare-fun _$8!82 () Unit!2887)

(assert (=> d!25823 (= (choose!586 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47696 (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)) _$8!82)))

(declare-fun bs!4000 () Bool)

(assert (= bs!4000 d!25823))

(assert (=> bs!4000 m!103899))

(assert (=> bs!4000 m!103899))

(assert (=> bs!4000 m!104349))

(assert (=> bs!4000 m!103765))

(assert (=> bs!4000 m!104347))

(assert (=> d!25357 d!25823))

(assert (=> d!25357 d!25451))

(declare-fun b!96947 () Bool)

(declare-fun e!63199 () Option!154)

(declare-fun e!63200 () Option!154)

(assert (=> b!96947 (= e!63199 e!63200)))

(declare-fun c!16413 () Bool)

(assert (=> b!96947 (= c!16413 (and ((_ is Cons!1599) (toList!786 lt!48107)) (not (= (_1!1178 (h!2192 (toList!786 lt!48107))) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun d!25825 () Bool)

(declare-fun c!16412 () Bool)

(assert (=> d!25825 (= c!16412 (and ((_ is Cons!1599) (toList!786 lt!48107)) (= (_1!1178 (h!2192 (toList!786 lt!48107))) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25825 (= (getValueByKey!148 (toList!786 lt!48107) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) e!63199)))

(declare-fun b!96948 () Bool)

(assert (=> b!96948 (= e!63200 (getValueByKey!148 (t!5529 (toList!786 lt!48107)) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96949 () Bool)

(assert (=> b!96949 (= e!63200 None!152)))

(declare-fun b!96946 () Bool)

(assert (=> b!96946 (= e!63199 (Some!153 (_2!1178 (h!2192 (toList!786 lt!48107)))))))

(assert (= (and d!25825 c!16412) b!96946))

(assert (= (and d!25825 (not c!16412)) b!96947))

(assert (= (and b!96947 c!16413) b!96948))

(assert (= (and b!96947 (not c!16413)) b!96949))

(declare-fun m!105865 () Bool)

(assert (=> b!96948 m!105865))

(assert (=> b!96324 d!25825))

(declare-fun d!25827 () Bool)

(declare-fun e!63213 () Bool)

(assert (=> d!25827 e!63213))

(declare-fun res!48892 () Bool)

(assert (=> d!25827 (=> (not res!48892) (not e!63213))))

(assert (=> d!25827 (= res!48892 (or (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))))))))))

(declare-fun lt!48538 () ListLongMap!1541)

(declare-fun lt!48531 () ListLongMap!1541)

(assert (=> d!25827 (= lt!48538 lt!48531)))

(declare-fun lt!48530 () Unit!2887)

(declare-fun e!63205 () Unit!2887)

(assert (=> d!25827 (= lt!48530 e!63205)))

(declare-fun c!16416 () Bool)

(declare-fun e!63210 () Bool)

(assert (=> d!25827 (= c!16416 e!63210)))

(declare-fun res!48894 () Bool)

(assert (=> d!25827 (=> (not res!48894) (not e!63210))))

(assert (=> d!25827 (= res!48894 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))))))))

(declare-fun e!63211 () ListLongMap!1541)

(assert (=> d!25827 (= lt!48531 e!63211)))

(declare-fun c!16419 () Bool)

(assert (=> d!25827 (= c!16419 (and (not (= (bvand (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25827 (validMask!0 (mask!6542 (ite c!16116 newMap!16 (_2!1179 lt!47718))))))

(assert (=> d!25827 (= (getCurrentListMap!467 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (_values!2440 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (mask!6542 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) lt!48538)))

(declare-fun b!96950 () Bool)

(declare-fun e!63208 () ListLongMap!1541)

(assert (=> b!96950 (= e!63211 e!63208)))

(declare-fun c!16414 () Bool)

(assert (=> b!96950 (= c!16414 (and (not (= (bvand (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96951 () Bool)

(declare-fun e!63202 () Bool)

(assert (=> b!96951 (= e!63202 (= (apply!91 lt!48538 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718)))))))

(declare-fun b!96952 () Bool)

(declare-fun e!63207 () Bool)

(assert (=> b!96952 (= e!63213 e!63207)))

(declare-fun c!16415 () Bool)

(assert (=> b!96952 (= c!16415 (not (= (bvand (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96953 () Bool)

(declare-fun call!9844 () ListLongMap!1541)

(assert (=> b!96953 (= e!63211 (+!137 call!9844 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))))))))

(declare-fun bm!9839 () Bool)

(declare-fun call!9843 () ListLongMap!1541)

(declare-fun call!9848 () ListLongMap!1541)

(assert (=> bm!9839 (= call!9843 call!9848)))

(declare-fun c!16417 () Bool)

(declare-fun b!96954 () Bool)

(assert (=> b!96954 (= c!16417 (and (not (= (bvand (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63212 () ListLongMap!1541)

(assert (=> b!96954 (= e!63208 e!63212)))

(declare-fun b!96955 () Bool)

(declare-fun res!48889 () Bool)

(assert (=> b!96955 (=> (not res!48889) (not e!63213))))

(declare-fun e!63209 () Bool)

(assert (=> b!96955 (= res!48889 e!63209)))

(declare-fun res!48893 () Bool)

(assert (=> b!96955 (=> res!48893 e!63209)))

(declare-fun e!63201 () Bool)

(assert (=> b!96955 (= res!48893 (not e!63201))))

(declare-fun res!48895 () Bool)

(assert (=> b!96955 (=> (not res!48895) (not e!63201))))

(assert (=> b!96955 (= res!48895 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))))))))

(declare-fun call!9845 () ListLongMap!1541)

(declare-fun bm!9840 () Bool)

(assert (=> bm!9840 (= call!9844 (+!137 (ite c!16419 call!9848 (ite c!16414 call!9843 call!9845)) (ite (or c!16419 c!16414) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718)))))))))

(declare-fun b!96956 () Bool)

(assert (=> b!96956 (= e!63210 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) #b00000000000000000000000000000000)))))

(declare-fun b!96957 () Bool)

(declare-fun e!63206 () Bool)

(assert (=> b!96957 (= e!63209 e!63206)))

(declare-fun res!48890 () Bool)

(assert (=> b!96957 (=> (not res!48890) (not e!63206))))

(assert (=> b!96957 (= res!48890 (contains!800 lt!48538 (select (arr!2002 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) #b00000000000000000000000000000000)))))

(assert (=> b!96957 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))))))))

(declare-fun b!96958 () Bool)

(declare-fun call!9846 () Bool)

(assert (=> b!96958 (= e!63207 (not call!9846))))

(declare-fun b!96959 () Bool)

(assert (=> b!96959 (= e!63212 call!9845)))

(declare-fun bm!9841 () Bool)

(assert (=> bm!9841 (= call!9845 call!9843)))

(declare-fun b!96960 () Bool)

(declare-fun e!63203 () Bool)

(declare-fun call!9842 () Bool)

(assert (=> b!96960 (= e!63203 (not call!9842))))

(declare-fun bm!9842 () Bool)

(assert (=> bm!9842 (= call!9842 (contains!800 lt!48538 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96961 () Bool)

(assert (=> b!96961 (= e!63206 (= (apply!91 lt!48538 (select (arr!2002 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (_values!2440 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96961 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_values!2440 (ite c!16116 newMap!16 (_2!1179 lt!47718))))))))

(assert (=> b!96961 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))))))))

(declare-fun b!96962 () Bool)

(declare-fun Unit!2939 () Unit!2887)

(assert (=> b!96962 (= e!63205 Unit!2939)))

(declare-fun bm!9843 () Bool)

(declare-fun call!9847 () ListLongMap!1541)

(assert (=> bm!9843 (= call!9847 call!9844)))

(declare-fun b!96963 () Bool)

(declare-fun res!48896 () Bool)

(assert (=> b!96963 (=> (not res!48896) (not e!63213))))

(assert (=> b!96963 (= res!48896 e!63203)))

(declare-fun c!16418 () Bool)

(assert (=> b!96963 (= c!16418 (not (= (bvand (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!96964 () Bool)

(assert (=> b!96964 (= e!63208 call!9847)))

(declare-fun b!96965 () Bool)

(declare-fun lt!48542 () Unit!2887)

(assert (=> b!96965 (= e!63205 lt!48542)))

(declare-fun lt!48536 () ListLongMap!1541)

(assert (=> b!96965 (= lt!48536 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (_values!2440 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (mask!6542 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 newMap!16 (_2!1179 lt!47718)))))))

(declare-fun lt!48546 () (_ BitVec 64))

(assert (=> b!96965 (= lt!48546 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48535 () (_ BitVec 64))

(assert (=> b!96965 (= lt!48535 (select (arr!2002 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) #b00000000000000000000000000000000))))

(declare-fun lt!48537 () Unit!2887)

(assert (=> b!96965 (= lt!48537 (addStillContains!67 lt!48536 lt!48546 (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) lt!48535))))

(assert (=> b!96965 (contains!800 (+!137 lt!48536 (tuple2!2337 lt!48546 (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))))) lt!48535)))

(declare-fun lt!48545 () Unit!2887)

(assert (=> b!96965 (= lt!48545 lt!48537)))

(declare-fun lt!48539 () ListLongMap!1541)

(assert (=> b!96965 (= lt!48539 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (_values!2440 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (mask!6542 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 newMap!16 (_2!1179 lt!47718)))))))

(declare-fun lt!48543 () (_ BitVec 64))

(assert (=> b!96965 (= lt!48543 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48534 () (_ BitVec 64))

(assert (=> b!96965 (= lt!48534 (select (arr!2002 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) #b00000000000000000000000000000000))))

(declare-fun lt!48544 () Unit!2887)

(assert (=> b!96965 (= lt!48544 (addApplyDifferent!67 lt!48539 lt!48543 (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) lt!48534))))

(assert (=> b!96965 (= (apply!91 (+!137 lt!48539 (tuple2!2337 lt!48543 (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))))) lt!48534) (apply!91 lt!48539 lt!48534))))

(declare-fun lt!48532 () Unit!2887)

(assert (=> b!96965 (= lt!48532 lt!48544)))

(declare-fun lt!48529 () ListLongMap!1541)

(assert (=> b!96965 (= lt!48529 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (_values!2440 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (mask!6542 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 newMap!16 (_2!1179 lt!47718)))))))

(declare-fun lt!48540 () (_ BitVec 64))

(assert (=> b!96965 (= lt!48540 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48548 () (_ BitVec 64))

(assert (=> b!96965 (= lt!48548 (select (arr!2002 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) #b00000000000000000000000000000000))))

(declare-fun lt!48550 () Unit!2887)

(assert (=> b!96965 (= lt!48550 (addApplyDifferent!67 lt!48529 lt!48540 (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) lt!48548))))

(assert (=> b!96965 (= (apply!91 (+!137 lt!48529 (tuple2!2337 lt!48540 (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))))) lt!48548) (apply!91 lt!48529 lt!48548))))

(declare-fun lt!48549 () Unit!2887)

(assert (=> b!96965 (= lt!48549 lt!48550)))

(declare-fun lt!48547 () ListLongMap!1541)

(assert (=> b!96965 (= lt!48547 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (_values!2440 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (mask!6542 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 newMap!16 (_2!1179 lt!47718)))))))

(declare-fun lt!48541 () (_ BitVec 64))

(assert (=> b!96965 (= lt!48541 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48533 () (_ BitVec 64))

(assert (=> b!96965 (= lt!48533 (select (arr!2002 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) #b00000000000000000000000000000000))))

(assert (=> b!96965 (= lt!48542 (addApplyDifferent!67 lt!48547 lt!48541 (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) lt!48533))))

(assert (=> b!96965 (= (apply!91 (+!137 lt!48547 (tuple2!2337 lt!48541 (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))))) lt!48533) (apply!91 lt!48547 lt!48533))))

(declare-fun b!96966 () Bool)

(assert (=> b!96966 (= e!63207 e!63202)))

(declare-fun res!48897 () Bool)

(assert (=> b!96966 (= res!48897 call!9846)))

(assert (=> b!96966 (=> (not res!48897) (not e!63202))))

(declare-fun b!96967 () Bool)

(assert (=> b!96967 (= e!63201 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) #b00000000000000000000000000000000)))))

(declare-fun bm!9844 () Bool)

(assert (=> bm!9844 (= call!9848 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (_values!2440 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (mask!6542 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (extraKeys!2282 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) (minValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718))) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 newMap!16 (_2!1179 lt!47718)))))))

(declare-fun bm!9845 () Bool)

(assert (=> bm!9845 (= call!9846 (contains!800 lt!48538 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96968 () Bool)

(assert (=> b!96968 (= e!63212 call!9847)))

(declare-fun b!96969 () Bool)

(declare-fun e!63204 () Bool)

(assert (=> b!96969 (= e!63204 (= (apply!91 lt!48538 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 (ite c!16116 newMap!16 (_2!1179 lt!47718)))))))

(declare-fun b!96970 () Bool)

(assert (=> b!96970 (= e!63203 e!63204)))

(declare-fun res!48891 () Bool)

(assert (=> b!96970 (= res!48891 call!9842)))

(assert (=> b!96970 (=> (not res!48891) (not e!63204))))

(assert (= (and d!25827 c!16419) b!96953))

(assert (= (and d!25827 (not c!16419)) b!96950))

(assert (= (and b!96950 c!16414) b!96964))

(assert (= (and b!96950 (not c!16414)) b!96954))

(assert (= (and b!96954 c!16417) b!96968))

(assert (= (and b!96954 (not c!16417)) b!96959))

(assert (= (or b!96968 b!96959) bm!9841))

(assert (= (or b!96964 bm!9841) bm!9839))

(assert (= (or b!96964 b!96968) bm!9843))

(assert (= (or b!96953 bm!9839) bm!9844))

(assert (= (or b!96953 bm!9843) bm!9840))

(assert (= (and d!25827 res!48894) b!96956))

(assert (= (and d!25827 c!16416) b!96965))

(assert (= (and d!25827 (not c!16416)) b!96962))

(assert (= (and d!25827 res!48892) b!96955))

(assert (= (and b!96955 res!48895) b!96967))

(assert (= (and b!96955 (not res!48893)) b!96957))

(assert (= (and b!96957 res!48890) b!96961))

(assert (= (and b!96955 res!48889) b!96963))

(assert (= (and b!96963 c!16418) b!96970))

(assert (= (and b!96963 (not c!16418)) b!96960))

(assert (= (and b!96970 res!48891) b!96969))

(assert (= (or b!96970 b!96960) bm!9842))

(assert (= (and b!96963 res!48896) b!96952))

(assert (= (and b!96952 c!16415) b!96966))

(assert (= (and b!96952 (not c!16415)) b!96958))

(assert (= (and b!96966 res!48897) b!96951))

(assert (= (or b!96966 b!96958) bm!9845))

(declare-fun b_lambda!4307 () Bool)

(assert (=> (not b_lambda!4307) (not b!96961)))

(declare-fun tb!1905 () Bool)

(declare-fun t!5539 () Bool)

(assert (=> (and b!95662 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) t!5539) tb!1905))

(declare-fun result!3237 () Bool)

(assert (=> tb!1905 (= result!3237 tp_is_empty!2619)))

(assert (=> b!96961 t!5539))

(declare-fun b_and!5945 () Bool)

(assert (= b_and!5941 (and (=> t!5539 result!3237) b_and!5945)))

(declare-fun tb!1907 () Bool)

(declare-fun t!5541 () Bool)

(assert (=> (and b!95665 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (ite c!16116 newMap!16 (_2!1179 lt!47718)))) t!5541) tb!1907))

(declare-fun result!3239 () Bool)

(assert (= result!3239 result!3237))

(assert (=> b!96961 t!5541))

(declare-fun b_and!5947 () Bool)

(assert (= b_and!5943 (and (=> t!5541 result!3239) b_and!5947)))

(declare-fun m!105867 () Bool)

(assert (=> b!96957 m!105867))

(assert (=> b!96957 m!105867))

(declare-fun m!105869 () Bool)

(assert (=> b!96957 m!105869))

(declare-fun m!105871 () Bool)

(assert (=> b!96965 m!105871))

(declare-fun m!105873 () Bool)

(assert (=> b!96965 m!105873))

(declare-fun m!105875 () Bool)

(assert (=> b!96965 m!105875))

(declare-fun m!105877 () Bool)

(assert (=> b!96965 m!105877))

(declare-fun m!105879 () Bool)

(assert (=> b!96965 m!105879))

(assert (=> b!96965 m!105875))

(declare-fun m!105881 () Bool)

(assert (=> b!96965 m!105881))

(declare-fun m!105883 () Bool)

(assert (=> b!96965 m!105883))

(declare-fun m!105885 () Bool)

(assert (=> b!96965 m!105885))

(declare-fun m!105887 () Bool)

(assert (=> b!96965 m!105887))

(declare-fun m!105889 () Bool)

(assert (=> b!96965 m!105889))

(declare-fun m!105891 () Bool)

(assert (=> b!96965 m!105891))

(declare-fun m!105893 () Bool)

(assert (=> b!96965 m!105893))

(assert (=> b!96965 m!105885))

(declare-fun m!105895 () Bool)

(assert (=> b!96965 m!105895))

(assert (=> b!96965 m!105887))

(assert (=> b!96965 m!105867))

(declare-fun m!105897 () Bool)

(assert (=> b!96965 m!105897))

(assert (=> b!96965 m!105891))

(declare-fun m!105899 () Bool)

(assert (=> b!96965 m!105899))

(declare-fun m!105901 () Bool)

(assert (=> b!96965 m!105901))

(declare-fun m!105903 () Bool)

(assert (=> b!96961 m!105903))

(assert (=> b!96961 m!105867))

(declare-fun m!105905 () Bool)

(assert (=> b!96961 m!105905))

(assert (=> b!96961 m!105903))

(declare-fun m!105907 () Bool)

(assert (=> b!96961 m!105907))

(declare-fun m!105909 () Bool)

(assert (=> b!96961 m!105909))

(assert (=> b!96961 m!105867))

(assert (=> b!96961 m!105907))

(declare-fun m!105911 () Bool)

(assert (=> b!96953 m!105911))

(declare-fun m!105913 () Bool)

(assert (=> d!25827 m!105913))

(declare-fun m!105915 () Bool)

(assert (=> bm!9842 m!105915))

(assert (=> b!96956 m!105867))

(assert (=> b!96956 m!105867))

(declare-fun m!105917 () Bool)

(assert (=> b!96956 m!105917))

(declare-fun m!105919 () Bool)

(assert (=> bm!9840 m!105919))

(declare-fun m!105921 () Bool)

(assert (=> b!96969 m!105921))

(declare-fun m!105923 () Bool)

(assert (=> bm!9845 m!105923))

(declare-fun m!105925 () Bool)

(assert (=> b!96951 m!105925))

(assert (=> b!96967 m!105867))

(assert (=> b!96967 m!105867))

(assert (=> b!96967 m!105917))

(assert (=> bm!9844 m!105893))

(assert (=> d!25345 d!25827))

(declare-fun d!25829 () Bool)

(assert (=> d!25829 (isDefined!102 (getValueByKey!148 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun lt!48551 () Unit!2887)

(assert (=> d!25829 (= lt!48551 (choose!587 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun e!63214 () Bool)

(assert (=> d!25829 e!63214))

(declare-fun res!48898 () Bool)

(assert (=> d!25829 (=> (not res!48898) (not e!63214))))

(assert (=> d!25829 (= res!48898 (isStrictlySorted!298 (toList!786 call!9684)))))

(assert (=> d!25829 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) lt!48551)))

(declare-fun b!96971 () Bool)

(assert (=> b!96971 (= e!63214 (containsKey!152 (toList!786 call!9684) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (= (and d!25829 res!48898) b!96971))

(assert (=> d!25829 m!103745))

(assert (=> d!25829 m!104557))

(assert (=> d!25829 m!104557))

(assert (=> d!25829 m!104559))

(assert (=> d!25829 m!103745))

(declare-fun m!105927 () Bool)

(assert (=> d!25829 m!105927))

(declare-fun m!105929 () Bool)

(assert (=> d!25829 m!105929))

(assert (=> b!96971 m!103745))

(assert (=> b!96971 m!104553))

(assert (=> b!96332 d!25829))

(assert (=> b!96332 d!25503))

(assert (=> b!96332 d!25505))

(declare-fun lt!48552 () Bool)

(declare-fun d!25831 () Bool)

(assert (=> d!25831 (= lt!48552 (select (content!99 (toList!786 lt!47897)) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!63215 () Bool)

(assert (=> d!25831 (= lt!48552 e!63215)))

(declare-fun res!48900 () Bool)

(assert (=> d!25831 (=> (not res!48900) (not e!63215))))

(assert (=> d!25831 (= res!48900 ((_ is Cons!1599) (toList!786 lt!47897)))))

(assert (=> d!25831 (= (contains!802 (toList!786 lt!47897) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48552)))

(declare-fun b!96972 () Bool)

(declare-fun e!63216 () Bool)

(assert (=> b!96972 (= e!63215 e!63216)))

(declare-fun res!48899 () Bool)

(assert (=> b!96972 (=> res!48899 e!63216)))

(assert (=> b!96972 (= res!48899 (= (h!2192 (toList!786 lt!47897)) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!96973 () Bool)

(assert (=> b!96973 (= e!63216 (contains!802 (t!5529 (toList!786 lt!47897)) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25831 res!48900) b!96972))

(assert (= (and b!96972 (not res!48899)) b!96973))

(declare-fun m!105931 () Bool)

(assert (=> d!25831 m!105931))

(declare-fun m!105933 () Bool)

(assert (=> d!25831 m!105933))

(declare-fun m!105935 () Bool)

(assert (=> b!96973 m!105935))

(assert (=> b!96083 d!25831))

(declare-fun d!25833 () Bool)

(declare-fun res!48901 () Bool)

(declare-fun e!63217 () Bool)

(assert (=> d!25833 (=> res!48901 e!63217)))

(assert (=> d!25833 (= res!48901 (= (select (arr!2002 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25833 (= (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!63217)))

(declare-fun b!96974 () Bool)

(declare-fun e!63218 () Bool)

(assert (=> b!96974 (= e!63217 e!63218)))

(declare-fun res!48902 () Bool)

(assert (=> b!96974 (=> (not res!48902) (not e!63218))))

(assert (=> b!96974 (= res!48902 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!96975 () Bool)

(assert (=> b!96975 (= e!63218 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!25833 (not res!48901)) b!96974))

(assert (= (and b!96974 res!48902) b!96975))

(declare-fun m!105937 () Bool)

(assert (=> d!25833 m!105937))

(assert (=> b!96975 m!103745))

(declare-fun m!105939 () Bool)

(assert (=> b!96975 m!105939))

(assert (=> b!96215 d!25833))

(assert (=> b!96077 d!25453))

(assert (=> b!96077 d!25303))

(assert (=> b!96077 d!25309))

(declare-fun d!25835 () Bool)

(declare-fun lt!48553 () Bool)

(assert (=> d!25835 (= lt!48553 (select (content!99 (toList!786 lt!48121)) (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!63219 () Bool)

(assert (=> d!25835 (= lt!48553 e!63219)))

(declare-fun res!48904 () Bool)

(assert (=> d!25835 (=> (not res!48904) (not e!63219))))

(assert (=> d!25835 (= res!48904 ((_ is Cons!1599) (toList!786 lt!48121)))))

(assert (=> d!25835 (= (contains!802 (toList!786 lt!48121) (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!48553)))

(declare-fun b!96976 () Bool)

(declare-fun e!63220 () Bool)

(assert (=> b!96976 (= e!63219 e!63220)))

(declare-fun res!48903 () Bool)

(assert (=> b!96976 (=> res!48903 e!63220)))

(assert (=> b!96976 (= res!48903 (= (h!2192 (toList!786 lt!48121)) (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96977 () Bool)

(assert (=> b!96977 (= e!63220 (contains!802 (t!5529 (toList!786 lt!48121)) (ite c!16115 (ite c!16114 (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!25835 res!48904) b!96976))

(assert (= (and b!96976 (not res!48903)) b!96977))

(declare-fun m!105941 () Bool)

(assert (=> d!25835 m!105941))

(declare-fun m!105943 () Bool)

(assert (=> d!25835 m!105943))

(declare-fun m!105945 () Bool)

(assert (=> b!96977 m!105945))

(assert (=> b!96336 d!25835))

(declare-fun d!25837 () Bool)

(declare-fun res!48905 () Bool)

(declare-fun e!63221 () Bool)

(assert (=> d!25837 (=> res!48905 e!63221)))

(assert (=> d!25837 (= res!48905 (and ((_ is Cons!1599) (t!5529 (toList!786 lt!47607))) (= (_1!1178 (h!2192 (t!5529 (toList!786 lt!47607)))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (=> d!25837 (= (containsKey!152 (t!5529 (toList!786 lt!47607)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) e!63221)))

(declare-fun b!96978 () Bool)

(declare-fun e!63222 () Bool)

(assert (=> b!96978 (= e!63221 e!63222)))

(declare-fun res!48906 () Bool)

(assert (=> b!96978 (=> (not res!48906) (not e!63222))))

(assert (=> b!96978 (= res!48906 (and (or (not ((_ is Cons!1599) (t!5529 (toList!786 lt!47607)))) (bvsle (_1!1178 (h!2192 (t!5529 (toList!786 lt!47607)))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))) ((_ is Cons!1599) (t!5529 (toList!786 lt!47607))) (bvslt (_1!1178 (h!2192 (t!5529 (toList!786 lt!47607)))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(declare-fun b!96979 () Bool)

(assert (=> b!96979 (= e!63222 (containsKey!152 (t!5529 (t!5529 (toList!786 lt!47607))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (= (and d!25837 (not res!48905)) b!96978))

(assert (= (and b!96978 res!48906) b!96979))

(assert (=> b!96979 m!103745))

(declare-fun m!105947 () Bool)

(assert (=> b!96979 m!105947))

(assert (=> b!96221 d!25837))

(assert (=> b!95999 d!25605))

(assert (=> b!95999 d!25607))

(declare-fun d!25839 () Bool)

(declare-fun e!63223 () Bool)

(assert (=> d!25839 e!63223))

(declare-fun res!48907 () Bool)

(assert (=> d!25839 (=> (not res!48907) (not e!63223))))

(declare-fun lt!48556 () ListLongMap!1541)

(assert (=> d!25839 (= res!48907 (contains!800 lt!48556 (_1!1178 (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun lt!48555 () List!1603)

(assert (=> d!25839 (= lt!48556 (ListLongMap!1542 lt!48555))))

(declare-fun lt!48554 () Unit!2887)

(declare-fun lt!48557 () Unit!2887)

(assert (=> d!25839 (= lt!48554 lt!48557)))

(assert (=> d!25839 (= (getValueByKey!148 lt!48555 (_1!1178 (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25839 (= lt!48557 (lemmaContainsTupThenGetReturnValue!66 lt!48555 (_1!1178 (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1178 (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25839 (= lt!48555 (insertStrictlySorted!68 (toList!786 (ite c!16172 call!9739 (ite c!16167 call!9734 call!9736))) (_1!1178 (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1178 (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25839 (= (+!137 (ite c!16172 call!9739 (ite c!16167 call!9734 call!9736)) (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) lt!48556)))

(declare-fun b!96980 () Bool)

(declare-fun res!48908 () Bool)

(assert (=> b!96980 (=> (not res!48908) (not e!63223))))

(assert (=> b!96980 (= res!48908 (= (getValueByKey!148 (toList!786 lt!48556) (_1!1178 (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))))

(declare-fun b!96981 () Bool)

(assert (=> b!96981 (= e!63223 (contains!802 (toList!786 lt!48556) (ite (or c!16172 c!16167) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (= (and d!25839 res!48907) b!96980))

(assert (= (and b!96980 res!48908) b!96981))

(declare-fun m!105949 () Bool)

(assert (=> d!25839 m!105949))

(declare-fun m!105951 () Bool)

(assert (=> d!25839 m!105951))

(declare-fun m!105953 () Bool)

(assert (=> d!25839 m!105953))

(declare-fun m!105955 () Bool)

(assert (=> d!25839 m!105955))

(declare-fun m!105957 () Bool)

(assert (=> b!96980 m!105957))

(declare-fun m!105959 () Bool)

(assert (=> b!96981 m!105959))

(assert (=> bm!9731 d!25839))

(declare-fun d!25841 () Bool)

(declare-fun e!63225 () Bool)

(assert (=> d!25841 e!63225))

(declare-fun res!48909 () Bool)

(assert (=> d!25841 (=> res!48909 e!63225)))

(declare-fun lt!48560 () Bool)

(assert (=> d!25841 (= res!48909 (not lt!48560))))

(declare-fun lt!48558 () Bool)

(assert (=> d!25841 (= lt!48560 lt!48558)))

(declare-fun lt!48559 () Unit!2887)

(declare-fun e!63224 () Unit!2887)

(assert (=> d!25841 (= lt!48559 e!63224)))

(declare-fun c!16420 () Bool)

(assert (=> d!25841 (= c!16420 lt!48558)))

(assert (=> d!25841 (= lt!48558 (containsKey!152 (toList!786 lt!47931) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25841 (= (contains!800 lt!47931 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48560)))

(declare-fun b!96982 () Bool)

(declare-fun lt!48561 () Unit!2887)

(assert (=> b!96982 (= e!63224 lt!48561)))

(assert (=> b!96982 (= lt!48561 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47931) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96982 (isDefined!102 (getValueByKey!148 (toList!786 lt!47931) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96983 () Bool)

(declare-fun Unit!2940 () Unit!2887)

(assert (=> b!96983 (= e!63224 Unit!2940)))

(declare-fun b!96984 () Bool)

(assert (=> b!96984 (= e!63225 (isDefined!102 (getValueByKey!148 (toList!786 lt!47931) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25841 c!16420) b!96982))

(assert (= (and d!25841 (not c!16420)) b!96983))

(assert (= (and d!25841 (not res!48909)) b!96984))

(declare-fun m!105961 () Bool)

(assert (=> d!25841 m!105961))

(declare-fun m!105963 () Bool)

(assert (=> b!96982 m!105963))

(declare-fun m!105965 () Bool)

(assert (=> b!96982 m!105965))

(assert (=> b!96982 m!105965))

(declare-fun m!105967 () Bool)

(assert (=> b!96982 m!105967))

(assert (=> b!96984 m!105965))

(assert (=> b!96984 m!105965))

(assert (=> b!96984 m!105967))

(assert (=> b!96156 d!25841))

(declare-fun d!25843 () Bool)

(declare-fun e!63227 () Bool)

(assert (=> d!25843 e!63227))

(declare-fun res!48910 () Bool)

(assert (=> d!25843 (=> res!48910 e!63227)))

(declare-fun lt!48564 () Bool)

(assert (=> d!25843 (= res!48910 (not lt!48564))))

(declare-fun lt!48562 () Bool)

(assert (=> d!25843 (= lt!48564 lt!48562)))

(declare-fun lt!48563 () Unit!2887)

(declare-fun e!63226 () Unit!2887)

(assert (=> d!25843 (= lt!48563 e!63226)))

(declare-fun c!16421 () Bool)

(assert (=> d!25843 (= c!16421 lt!48562)))

(assert (=> d!25843 (= lt!48562 (containsKey!152 (toList!786 lt!47871) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25843 (= (contains!800 lt!47871 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48564)))

(declare-fun b!96985 () Bool)

(declare-fun lt!48565 () Unit!2887)

(assert (=> b!96985 (= e!63226 lt!48565)))

(assert (=> b!96985 (= lt!48565 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47871) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96985 (isDefined!102 (getValueByKey!148 (toList!786 lt!47871) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96986 () Bool)

(declare-fun Unit!2941 () Unit!2887)

(assert (=> b!96986 (= e!63226 Unit!2941)))

(declare-fun b!96987 () Bool)

(assert (=> b!96987 (= e!63227 (isDefined!102 (getValueByKey!148 (toList!786 lt!47871) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25843 c!16421) b!96985))

(assert (= (and d!25843 (not c!16421)) b!96986))

(assert (= (and d!25843 (not res!48910)) b!96987))

(declare-fun m!105969 () Bool)

(assert (=> d!25843 m!105969))

(declare-fun m!105971 () Bool)

(assert (=> b!96985 m!105971))

(assert (=> b!96985 m!105295))

(assert (=> b!96985 m!105295))

(declare-fun m!105973 () Bool)

(assert (=> b!96985 m!105973))

(assert (=> b!96987 m!105295))

(assert (=> b!96987 m!105295))

(assert (=> b!96987 m!105973))

(assert (=> bm!9736 d!25843))

(declare-fun d!25845 () Bool)

(declare-fun res!48911 () Bool)

(declare-fun e!63228 () Bool)

(assert (=> d!25845 (=> (not res!48911) (not e!63228))))

(assert (=> d!25845 (= res!48911 (simpleValid!66 (_2!1179 lt!48089)))))

(assert (=> d!25845 (= (valid!378 (_2!1179 lt!48089)) e!63228)))

(declare-fun b!96988 () Bool)

(declare-fun res!48912 () Bool)

(assert (=> b!96988 (=> (not res!48912) (not e!63228))))

(assert (=> b!96988 (= res!48912 (= (arrayCountValidKeys!0 (_keys!4143 (_2!1179 lt!48089)) #b00000000000000000000000000000000 (size!2251 (_keys!4143 (_2!1179 lt!48089)))) (_size!469 (_2!1179 lt!48089))))))

(declare-fun b!96989 () Bool)

(declare-fun res!48913 () Bool)

(assert (=> b!96989 (=> (not res!48913) (not e!63228))))

(assert (=> b!96989 (= res!48913 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 (_2!1179 lt!48089)) (mask!6542 (_2!1179 lt!48089))))))

(declare-fun b!96990 () Bool)

(assert (=> b!96990 (= e!63228 (arrayNoDuplicates!0 (_keys!4143 (_2!1179 lt!48089)) #b00000000000000000000000000000000 Nil!1599))))

(assert (= (and d!25845 res!48911) b!96988))

(assert (= (and b!96988 res!48912) b!96989))

(assert (= (and b!96989 res!48913) b!96990))

(declare-fun m!105975 () Bool)

(assert (=> d!25845 m!105975))

(declare-fun m!105977 () Bool)

(assert (=> b!96988 m!105977))

(declare-fun m!105979 () Bool)

(assert (=> b!96989 m!105979))

(declare-fun m!105981 () Bool)

(assert (=> b!96990 m!105981))

(assert (=> b!96313 d!25845))

(declare-fun d!25847 () Bool)

(declare-fun e!63229 () Bool)

(assert (=> d!25847 e!63229))

(declare-fun res!48914 () Bool)

(assert (=> d!25847 (=> (not res!48914) (not e!63229))))

(declare-fun lt!48568 () ListLongMap!1541)

(assert (=> d!25847 (= res!48914 (contains!800 lt!48568 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun lt!48567 () List!1603)

(assert (=> d!25847 (= lt!48568 (ListLongMap!1542 lt!48567))))

(declare-fun lt!48566 () Unit!2887)

(declare-fun lt!48569 () Unit!2887)

(assert (=> d!25847 (= lt!48566 lt!48569)))

(assert (=> d!25847 (= (getValueByKey!148 lt!48567 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25847 (= lt!48569 (lemmaContainsTupThenGetReturnValue!66 lt!48567 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25847 (= lt!48567 (insertStrictlySorted!68 (toList!786 call!9735) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25847 (= (+!137 call!9735 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) lt!48568)))

(declare-fun b!96991 () Bool)

(declare-fun res!48915 () Bool)

(assert (=> b!96991 (=> (not res!48915) (not e!63229))))

(assert (=> b!96991 (= res!48915 (= (getValueByKey!148 (toList!786 lt!48568) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun b!96992 () Bool)

(assert (=> b!96992 (= e!63229 (contains!802 (toList!786 lt!48568) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(assert (= (and d!25847 res!48914) b!96991))

(assert (= (and b!96991 res!48915) b!96992))

(declare-fun m!105983 () Bool)

(assert (=> d!25847 m!105983))

(declare-fun m!105985 () Bool)

(assert (=> d!25847 m!105985))

(declare-fun m!105987 () Bool)

(assert (=> d!25847 m!105987))

(declare-fun m!105989 () Bool)

(assert (=> d!25847 m!105989))

(declare-fun m!105991 () Bool)

(assert (=> b!96991 m!105991))

(declare-fun m!105993 () Bool)

(assert (=> b!96992 m!105993))

(assert (=> b!96057 d!25847))

(assert (=> b!96196 d!25435))

(assert (=> b!96160 d!25289))

(declare-fun b!96994 () Bool)

(declare-fun e!63230 () Option!154)

(declare-fun e!63231 () Option!154)

(assert (=> b!96994 (= e!63230 e!63231)))

(declare-fun c!16423 () Bool)

(assert (=> b!96994 (= c!16423 (and ((_ is Cons!1599) (toList!786 lt!47985)) (not (= (_1!1178 (h!2192 (toList!786 lt!47985))) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun d!25849 () Bool)

(declare-fun c!16422 () Bool)

(assert (=> d!25849 (= c!16422 (and ((_ is Cons!1599) (toList!786 lt!47985)) (= (_1!1178 (h!2192 (toList!786 lt!47985))) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25849 (= (getValueByKey!148 (toList!786 lt!47985) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) e!63230)))

(declare-fun b!96995 () Bool)

(assert (=> b!96995 (= e!63231 (getValueByKey!148 (t!5529 (toList!786 lt!47985)) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!96996 () Bool)

(assert (=> b!96996 (= e!63231 None!152)))

(declare-fun b!96993 () Bool)

(assert (=> b!96993 (= e!63230 (Some!153 (_2!1178 (h!2192 (toList!786 lt!47985)))))))

(assert (= (and d!25849 c!16422) b!96993))

(assert (= (and d!25849 (not c!16422)) b!96994))

(assert (= (and b!96994 c!16423) b!96995))

(assert (= (and b!96994 (not c!16423)) b!96996))

(declare-fun m!105995 () Bool)

(assert (=> b!96995 m!105995))

(assert (=> b!96238 d!25849))

(declare-fun b!96997 () Bool)

(declare-fun e!63232 () Bool)

(declare-fun e!63235 () Bool)

(assert (=> b!96997 (= e!63232 e!63235)))

(declare-fun c!16424 () Bool)

(assert (=> b!96997 (= c!16424 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!96998 () Bool)

(declare-fun call!9849 () Bool)

(assert (=> b!96998 (= e!63235 call!9849)))

(declare-fun b!96999 () Bool)

(declare-fun e!63233 () Bool)

(assert (=> b!96999 (= e!63233 (contains!801 (ite c!16183 (Cons!1598 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) Nil!1599) Nil!1599) (select (arr!2002 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!97000 () Bool)

(assert (=> b!97000 (= e!63235 call!9849)))

(declare-fun d!25851 () Bool)

(declare-fun res!48917 () Bool)

(declare-fun e!63234 () Bool)

(assert (=> d!25851 (=> res!48917 e!63234)))

(assert (=> d!25851 (= res!48917 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25851 (= (arrayNoDuplicates!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16183 (Cons!1598 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) Nil!1599) Nil!1599)) e!63234)))

(declare-fun b!97001 () Bool)

(assert (=> b!97001 (= e!63234 e!63232)))

(declare-fun res!48918 () Bool)

(assert (=> b!97001 (=> (not res!48918) (not e!63232))))

(assert (=> b!97001 (= res!48918 (not e!63233))))

(declare-fun res!48916 () Bool)

(assert (=> b!97001 (=> (not res!48916) (not e!63233))))

(assert (=> b!97001 (= res!48916 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!9846 () Bool)

(assert (=> bm!9846 (= call!9849 (arrayNoDuplicates!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16424 (Cons!1598 (select (arr!2002 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!16183 (Cons!1598 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) Nil!1599) Nil!1599)) (ite c!16183 (Cons!1598 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) Nil!1599) Nil!1599))))))

(assert (= (and d!25851 (not res!48917)) b!97001))

(assert (= (and b!97001 res!48916) b!96999))

(assert (= (and b!97001 res!48918) b!96997))

(assert (= (and b!96997 c!16424) b!96998))

(assert (= (and b!96997 (not c!16424)) b!97000))

(assert (= (or b!96998 b!97000) bm!9846))

(assert (=> b!96997 m!105937))

(assert (=> b!96997 m!105937))

(declare-fun m!105997 () Bool)

(assert (=> b!96997 m!105997))

(assert (=> b!96999 m!105937))

(assert (=> b!96999 m!105937))

(declare-fun m!105999 () Bool)

(assert (=> b!96999 m!105999))

(assert (=> b!97001 m!105937))

(assert (=> b!97001 m!105937))

(assert (=> b!97001 m!105997))

(assert (=> bm!9846 m!105937))

(declare-fun m!106001 () Bool)

(assert (=> bm!9846 m!106001))

(assert (=> bm!9738 d!25851))

(declare-fun d!25853 () Bool)

(assert (=> d!25853 (= (get!1288 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96115 d!25853))

(declare-fun d!25855 () Bool)

(declare-fun res!48919 () Bool)

(declare-fun e!63236 () Bool)

(assert (=> d!25855 (=> res!48919 e!63236)))

(assert (=> d!25855 (= res!48919 (and ((_ is Cons!1599) (toList!786 lt!47784)) (= (_1!1178 (h!2192 (toList!786 lt!47784))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!25855 (= (containsKey!152 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!63236)))

(declare-fun b!97002 () Bool)

(declare-fun e!63237 () Bool)

(assert (=> b!97002 (= e!63236 e!63237)))

(declare-fun res!48920 () Bool)

(assert (=> b!97002 (=> (not res!48920) (not e!63237))))

(assert (=> b!97002 (= res!48920 (and (or (not ((_ is Cons!1599) (toList!786 lt!47784))) (bvsle (_1!1178 (h!2192 (toList!786 lt!47784))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1599) (toList!786 lt!47784)) (bvslt (_1!1178 (h!2192 (toList!786 lt!47784))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!97003 () Bool)

(assert (=> b!97003 (= e!63237 (containsKey!152 (t!5529 (toList!786 lt!47784)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!25855 (not res!48919)) b!97002))

(assert (= (and b!97002 res!48920) b!97003))

(assert (=> b!97003 m!103887))

(declare-fun m!106003 () Bool)

(assert (=> b!97003 m!106003))

(assert (=> d!25347 d!25855))

(declare-fun b!97004 () Bool)

(declare-fun e!63238 () Bool)

(declare-fun e!63241 () Bool)

(assert (=> b!97004 (= e!63238 e!63241)))

(declare-fun c!16425 () Bool)

(assert (=> b!97004 (= c!16425 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (_2!1179 lt!47718))) #b00000000000000000000000000000000)))))

(declare-fun b!97005 () Bool)

(declare-fun call!9850 () Bool)

(assert (=> b!97005 (= e!63241 call!9850)))

(declare-fun b!97006 () Bool)

(declare-fun e!63239 () Bool)

(assert (=> b!97006 (= e!63239 (contains!801 Nil!1599 (select (arr!2002 (_keys!4143 (_2!1179 lt!47718))) #b00000000000000000000000000000000)))))

(declare-fun b!97007 () Bool)

(assert (=> b!97007 (= e!63241 call!9850)))

(declare-fun d!25857 () Bool)

(declare-fun res!48922 () Bool)

(declare-fun e!63240 () Bool)

(assert (=> d!25857 (=> res!48922 e!63240)))

(assert (=> d!25857 (= res!48922 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 (_2!1179 lt!47718)))))))

(assert (=> d!25857 (= (arrayNoDuplicates!0 (_keys!4143 (_2!1179 lt!47718)) #b00000000000000000000000000000000 Nil!1599) e!63240)))

(declare-fun b!97008 () Bool)

(assert (=> b!97008 (= e!63240 e!63238)))

(declare-fun res!48923 () Bool)

(assert (=> b!97008 (=> (not res!48923) (not e!63238))))

(assert (=> b!97008 (= res!48923 (not e!63239))))

(declare-fun res!48921 () Bool)

(assert (=> b!97008 (=> (not res!48921) (not e!63239))))

(assert (=> b!97008 (= res!48921 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (_2!1179 lt!47718))) #b00000000000000000000000000000000)))))

(declare-fun bm!9847 () Bool)

(assert (=> bm!9847 (= call!9850 (arrayNoDuplicates!0 (_keys!4143 (_2!1179 lt!47718)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16425 (Cons!1598 (select (arr!2002 (_keys!4143 (_2!1179 lt!47718))) #b00000000000000000000000000000000) Nil!1599) Nil!1599)))))

(assert (= (and d!25857 (not res!48922)) b!97008))

(assert (= (and b!97008 res!48921) b!97006))

(assert (= (and b!97008 res!48923) b!97004))

(assert (= (and b!97004 c!16425) b!97005))

(assert (= (and b!97004 (not c!16425)) b!97007))

(assert (= (or b!97005 b!97007) bm!9847))

(assert (=> b!97004 m!105219))

(assert (=> b!97004 m!105219))

(assert (=> b!97004 m!105221))

(assert (=> b!97006 m!105219))

(assert (=> b!97006 m!105219))

(declare-fun m!106005 () Bool)

(assert (=> b!97006 m!106005))

(assert (=> b!97008 m!105219))

(assert (=> b!97008 m!105219))

(assert (=> b!97008 m!105221))

(assert (=> bm!9847 m!105219))

(declare-fun m!106007 () Bool)

(assert (=> bm!9847 m!106007))

(assert (=> b!96172 d!25857))

(declare-fun bm!9848 () Bool)

(declare-fun call!9851 () (_ BitVec 32))

(assert (=> bm!9848 (= call!9851 (arrayCountValidKeys!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun b!97009 () Bool)

(declare-fun e!63242 () (_ BitVec 32))

(assert (=> b!97009 (= e!63242 #b00000000000000000000000000000000)))

(declare-fun b!97010 () Bool)

(declare-fun e!63243 () (_ BitVec 32))

(assert (=> b!97010 (= e!63243 call!9851)))

(declare-fun b!97011 () Bool)

(assert (=> b!97011 (= e!63242 e!63243)))

(declare-fun c!16426 () Bool)

(assert (=> b!97011 (= c!16426 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!97012 () Bool)

(assert (=> b!97012 (= e!63243 (bvadd #b00000000000000000000000000000001 call!9851))))

(declare-fun d!25859 () Bool)

(declare-fun lt!48570 () (_ BitVec 32))

(assert (=> d!25859 (and (bvsge lt!48570 #b00000000000000000000000000000000) (bvsle lt!48570 (bvsub (size!2251 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!25859 (= lt!48570 e!63242)))

(declare-fun c!16427 () Bool)

(assert (=> d!25859 (= c!16427 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25859 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 (_keys!4143 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2251 (_keys!4143 newMap!16)) (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25859 (= (arrayCountValidKeys!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 (_keys!4143 newMap!16))) lt!48570)))

(assert (= (and d!25859 c!16427) b!97009))

(assert (= (and d!25859 (not c!16427)) b!97011))

(assert (= (and b!97011 c!16426) b!97012))

(assert (= (and b!97011 (not c!16426)) b!97010))

(assert (= (or b!97012 b!97010) bm!9848))

(declare-fun m!106009 () Bool)

(assert (=> bm!9848 m!106009))

(assert (=> b!97011 m!105937))

(assert (=> b!97011 m!105937))

(assert (=> b!97011 m!105997))

(assert (=> bm!9741 d!25859))

(declare-fun d!25861 () Bool)

(assert (=> d!25861 (= (apply!91 lt!47820 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1289 (getValueByKey!148 (toList!786 lt!47820) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4001 () Bool)

(assert (= bs!4001 d!25861))

(declare-fun m!106011 () Bool)

(assert (=> bs!4001 m!106011))

(assert (=> bs!4001 m!106011))

(declare-fun m!106013 () Bool)

(assert (=> bs!4001 m!106013))

(assert (=> b!96025 d!25861))

(declare-fun b!97031 () Bool)

(declare-fun e!63258 () Bool)

(declare-fun e!63255 () Bool)

(assert (=> b!97031 (= e!63258 e!63255)))

(declare-fun res!48931 () Bool)

(declare-fun lt!48576 () SeekEntryResult!262)

(assert (=> b!97031 (= res!48931 (and ((_ is Intermediate!262) lt!48576) (not (undefined!1074 lt!48576)) (bvslt (x!12810 lt!48576) #b01111111111111111111111111111110) (bvsge (x!12810 lt!48576) #b00000000000000000000000000000000) (bvsge (x!12810 lt!48576) #b00000000000000000000000000000000)))))

(assert (=> b!97031 (=> (not res!48931) (not e!63255))))

(declare-fun b!97032 () Bool)

(assert (=> b!97032 (and (bvsge (index!3192 lt!48576) #b00000000000000000000000000000000) (bvslt (index!3192 lt!48576) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun res!48932 () Bool)

(assert (=> b!97032 (= res!48932 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3192 lt!48576)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun e!63254 () Bool)

(assert (=> b!97032 (=> res!48932 e!63254)))

(assert (=> b!97032 (= e!63255 e!63254)))

(declare-fun b!97033 () Bool)

(assert (=> b!97033 (and (bvsge (index!3192 lt!48576) #b00000000000000000000000000000000) (bvslt (index!3192 lt!48576) (size!2251 (_keys!4143 newMap!16))))))

(declare-fun res!48930 () Bool)

(assert (=> b!97033 (= res!48930 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3192 lt!48576)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97033 (=> res!48930 e!63254)))

(declare-fun e!63257 () SeekEntryResult!262)

(declare-fun b!97034 () Bool)

(assert (=> b!97034 (= e!63257 (Intermediate!262 true (toIndex!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (mask!6542 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!97035 () Bool)

(declare-fun e!63256 () SeekEntryResult!262)

(assert (=> b!97035 (= e!63256 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (mask!6542 newMap!16)) #b00000000000000000000000000000000 (mask!6542 newMap!16)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun d!25863 () Bool)

(assert (=> d!25863 e!63258))

(declare-fun c!16434 () Bool)

(assert (=> d!25863 (= c!16434 (and ((_ is Intermediate!262) lt!48576) (undefined!1074 lt!48576)))))

(assert (=> d!25863 (= lt!48576 e!63257)))

(declare-fun c!16436 () Bool)

(assert (=> d!25863 (= c!16436 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!48575 () (_ BitVec 64))

(assert (=> d!25863 (= lt!48575 (select (arr!2002 (_keys!4143 newMap!16)) (toIndex!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (mask!6542 newMap!16))))))

(assert (=> d!25863 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25863 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (mask!6542 newMap!16)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)) lt!48576)))

(declare-fun b!97036 () Bool)

(assert (=> b!97036 (= e!63258 (bvsge (x!12810 lt!48576) #b01111111111111111111111111111110))))

(declare-fun b!97037 () Bool)

(assert (=> b!97037 (= e!63257 e!63256)))

(declare-fun c!16435 () Bool)

(assert (=> b!97037 (= c!16435 (or (= lt!48575 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) (= (bvadd lt!48575 lt!48575) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!97038 () Bool)

(assert (=> b!97038 (= e!63256 (Intermediate!262 false (toIndex!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (mask!6542 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!97039 () Bool)

(assert (=> b!97039 (and (bvsge (index!3192 lt!48576) #b00000000000000000000000000000000) (bvslt (index!3192 lt!48576) (size!2251 (_keys!4143 newMap!16))))))

(assert (=> b!97039 (= e!63254 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3192 lt!48576)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!25863 c!16436) b!97034))

(assert (= (and d!25863 (not c!16436)) b!97037))

(assert (= (and b!97037 c!16435) b!97038))

(assert (= (and b!97037 (not c!16435)) b!97035))

(assert (= (and d!25863 c!16434) b!97036))

(assert (= (and d!25863 (not c!16434)) b!97031))

(assert (= (and b!97031 res!48931) b!97032))

(assert (= (and b!97032 (not res!48932)) b!97033))

(assert (= (and b!97033 (not res!48930)) b!97039))

(declare-fun m!106015 () Bool)

(assert (=> b!97032 m!106015))

(assert (=> b!97035 m!104207))

(declare-fun m!106017 () Bool)

(assert (=> b!97035 m!106017))

(assert (=> b!97035 m!106017))

(assert (=> b!97035 m!103745))

(declare-fun m!106019 () Bool)

(assert (=> b!97035 m!106019))

(assert (=> b!97039 m!106015))

(assert (=> d!25863 m!104207))

(declare-fun m!106021 () Bool)

(assert (=> d!25863 m!106021))

(assert (=> d!25863 m!103977))

(assert (=> b!97033 m!106015))

(assert (=> d!25319 d!25863))

(declare-fun d!25865 () Bool)

(declare-fun lt!48582 () (_ BitVec 32))

(declare-fun lt!48581 () (_ BitVec 32))

(assert (=> d!25865 (= lt!48582 (bvmul (bvxor lt!48581 (bvlshr lt!48581 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!25865 (= lt!48581 ((_ extract 31 0) (bvand (bvxor (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvlshr (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!25865 (and (bvsge (mask!6542 newMap!16) #b00000000000000000000000000000000) (let ((res!48933 (let ((h!2193 ((_ extract 31 0) (bvand (bvxor (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (bvlshr (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!12914 (bvmul (bvxor h!2193 (bvlshr h!2193 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!12914 (bvlshr x!12914 #b00000000000000000000000000001101)) (mask!6542 newMap!16)))))) (and (bvslt res!48933 (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001)) (bvsge res!48933 #b00000000000000000000000000000000))))))

(assert (=> d!25865 (= (toIndex!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (mask!6542 newMap!16)) (bvand (bvxor lt!48582 (bvlshr lt!48582 #b00000000000000000000000000001101)) (mask!6542 newMap!16)))))

(assert (=> d!25319 d!25865))

(assert (=> d!25319 d!25451))

(assert (=> d!25291 d!25319))

(declare-fun b!97056 () Bool)

(declare-fun e!63270 () Bool)

(declare-fun e!63267 () Bool)

(assert (=> b!97056 (= e!63270 e!63267)))

(declare-fun c!16442 () Bool)

(declare-fun lt!48585 () SeekEntryResult!262)

(assert (=> b!97056 (= c!16442 ((_ is MissingVacant!262) lt!48585))))

(declare-fun b!97057 () Bool)

(declare-fun res!48943 () Bool)

(declare-fun e!63268 () Bool)

(assert (=> b!97057 (=> (not res!48943) (not e!63268))))

(assert (=> b!97057 (= res!48943 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3193 lt!48585)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!16441 () Bool)

(declare-fun bm!9853 () Bool)

(declare-fun call!9857 () Bool)

(assert (=> bm!9853 (= call!9857 (inRange!0 (ite c!16441 (index!3190 lt!48585) (index!3193 lt!48585)) (mask!6542 newMap!16)))))

(declare-fun b!97058 () Bool)

(declare-fun res!48945 () Bool)

(assert (=> b!97058 (= res!48945 (= (select (arr!2002 (_keys!4143 newMap!16)) (index!3190 lt!48585)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63269 () Bool)

(assert (=> b!97058 (=> (not res!48945) (not e!63269))))

(declare-fun b!97059 () Bool)

(assert (=> b!97059 (= e!63270 e!63269)))

(declare-fun res!48944 () Bool)

(assert (=> b!97059 (= res!48944 call!9857)))

(assert (=> b!97059 (=> (not res!48944) (not e!63269))))

(declare-fun b!97061 () Bool)

(declare-fun call!9856 () Bool)

(assert (=> b!97061 (= e!63269 (not call!9856))))

(declare-fun b!97062 () Bool)

(assert (=> b!97062 (= e!63268 (not call!9856))))

(declare-fun b!97063 () Bool)

(declare-fun res!48942 () Bool)

(assert (=> b!97063 (=> (not res!48942) (not e!63268))))

(assert (=> b!97063 (= res!48942 call!9857)))

(assert (=> b!97063 (= e!63267 e!63268)))

(declare-fun bm!9854 () Bool)

(assert (=> bm!9854 (= call!9856 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun d!25867 () Bool)

(assert (=> d!25867 e!63270))

(assert (=> d!25867 (= c!16441 ((_ is MissingZero!262) lt!48585))))

(assert (=> d!25867 (= lt!48585 (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (=> d!25867 true))

(declare-fun _$34!859 () Unit!2887)

(assert (=> d!25867 (= (choose!582 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)) _$34!859)))

(declare-fun b!97060 () Bool)

(assert (=> b!97060 (= e!63267 ((_ is Undefined!262) lt!48585))))

(assert (= (and d!25867 c!16441) b!97059))

(assert (= (and d!25867 (not c!16441)) b!97056))

(assert (= (and b!97059 res!48944) b!97058))

(assert (= (and b!97058 res!48945) b!97061))

(assert (= (and b!97056 c!16442) b!97063))

(assert (= (and b!97056 (not c!16442)) b!97060))

(assert (= (and b!97063 res!48942) b!97057))

(assert (= (and b!97057 res!48943) b!97062))

(assert (= (or b!97059 b!97063) bm!9853))

(assert (= (or b!97061 b!97062) bm!9854))

(declare-fun m!106023 () Bool)

(assert (=> bm!9853 m!106023))

(assert (=> bm!9854 m!103745))

(assert (=> bm!9854 m!103831))

(declare-fun m!106025 () Bool)

(assert (=> b!97058 m!106025))

(declare-fun m!106027 () Bool)

(assert (=> b!97057 m!106027))

(assert (=> d!25867 m!103745))

(assert (=> d!25867 m!103827))

(assert (=> d!25291 d!25867))

(assert (=> d!25291 d!25451))

(assert (=> b!96023 d!25435))

(assert (=> b!96050 d!25585))

(assert (=> b!96050 d!25587))

(declare-fun d!25869 () Bool)

(assert (=> d!25869 (= (apply!91 lt!47820 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1289 (getValueByKey!148 (toList!786 lt!47820) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4002 () Bool)

(assert (= bs!4002 d!25869))

(assert (=> bs!4002 m!105237))

(assert (=> bs!4002 m!105237))

(declare-fun m!106029 () Bool)

(assert (=> bs!4002 m!106029))

(assert (=> b!96007 d!25869))

(assert (=> b!96272 d!25625))

(assert (=> b!96272 d!25627))

(assert (=> b!96245 d!25715))

(assert (=> b!96245 d!25717))

(declare-fun b!97065 () Bool)

(declare-fun e!63271 () Option!154)

(declare-fun e!63272 () Option!154)

(assert (=> b!97065 (= e!63271 e!63272)))

(declare-fun c!16444 () Bool)

(assert (=> b!97065 (= c!16444 (and ((_ is Cons!1599) (toList!786 lt!48001)) (not (= (_1!1178 (h!2192 (toList!786 lt!48001))) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun d!25871 () Bool)

(declare-fun c!16443 () Bool)

(assert (=> d!25871 (= c!16443 (and ((_ is Cons!1599) (toList!786 lt!48001)) (= (_1!1178 (h!2192 (toList!786 lt!48001))) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25871 (= (getValueByKey!148 (toList!786 lt!48001) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) e!63271)))

(declare-fun b!97066 () Bool)

(assert (=> b!97066 (= e!63272 (getValueByKey!148 (t!5529 (toList!786 lt!48001)) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!97067 () Bool)

(assert (=> b!97067 (= e!63272 None!152)))

(declare-fun b!97064 () Bool)

(assert (=> b!97064 (= e!63271 (Some!153 (_2!1178 (h!2192 (toList!786 lt!48001)))))))

(assert (= (and d!25871 c!16443) b!97064))

(assert (= (and d!25871 (not c!16443)) b!97065))

(assert (= (and b!97065 c!16444) b!97066))

(assert (= (and b!97065 (not c!16444)) b!97067))

(declare-fun m!106031 () Bool)

(assert (=> b!97066 m!106031))

(assert (=> b!96247 d!25871))

(declare-fun d!25873 () Bool)

(assert (=> d!25873 (isDefined!102 (getValueByKey!148 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!48586 () Unit!2887)

(assert (=> d!25873 (= lt!48586 (choose!587 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!63273 () Bool)

(assert (=> d!25873 e!63273))

(declare-fun res!48946 () Bool)

(assert (=> d!25873 (=> (not res!48946) (not e!63273))))

(assert (=> d!25873 (= res!48946 (isStrictlySorted!298 (toList!786 lt!47784)))))

(assert (=> d!25873 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!48586)))

(declare-fun b!97068 () Bool)

(assert (=> b!97068 (= e!63273 (containsKey!152 (toList!786 lt!47784) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!25873 res!48946) b!97068))

(assert (=> d!25873 m!103887))

(assert (=> d!25873 m!104221))

(assert (=> d!25873 m!104221))

(assert (=> d!25873 m!104285))

(assert (=> d!25873 m!103887))

(declare-fun m!106033 () Bool)

(assert (=> d!25873 m!106033))

(assert (=> d!25873 m!105209))

(assert (=> b!97068 m!103887))

(assert (=> b!97068 m!104281))

(assert (=> b!96175 d!25873))

(assert (=> b!96175 d!25659))

(assert (=> b!96175 d!25635))

(declare-fun d!25875 () Bool)

(assert (=> d!25875 (= (apply!91 lt!47842 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1289 (getValueByKey!148 (toList!786 lt!47842) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4003 () Bool)

(assert (= bs!4003 d!25875))

(assert (=> bs!4003 m!104003))

(assert (=> bs!4003 m!105479))

(assert (=> bs!4003 m!105479))

(declare-fun m!106035 () Bool)

(assert (=> bs!4003 m!106035))

(assert (=> b!96038 d!25875))

(assert (=> b!96038 d!25497))

(assert (=> b!96268 d!25731))

(declare-fun d!25877 () Bool)

(declare-fun e!63275 () Bool)

(assert (=> d!25877 e!63275))

(declare-fun res!48947 () Bool)

(assert (=> d!25877 (=> res!48947 e!63275)))

(declare-fun lt!48589 () Bool)

(assert (=> d!25877 (= res!48947 (not lt!48589))))

(declare-fun lt!48587 () Bool)

(assert (=> d!25877 (= lt!48589 lt!48587)))

(declare-fun lt!48588 () Unit!2887)

(declare-fun e!63274 () Unit!2887)

(assert (=> d!25877 (= lt!48588 e!63274)))

(declare-fun c!16445 () Bool)

(assert (=> d!25877 (= c!16445 lt!48587)))

(assert (=> d!25877 (= lt!48587 (containsKey!152 (toList!786 lt!47820) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25877 (= (contains!800 lt!47820 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48589)))

(declare-fun b!97069 () Bool)

(declare-fun lt!48590 () Unit!2887)

(assert (=> b!97069 (= e!63274 lt!48590)))

(assert (=> b!97069 (= lt!48590 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47820) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97069 (isDefined!102 (getValueByKey!148 (toList!786 lt!47820) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97070 () Bool)

(declare-fun Unit!2942 () Unit!2887)

(assert (=> b!97070 (= e!63274 Unit!2942)))

(declare-fun b!97071 () Bool)

(assert (=> b!97071 (= e!63275 (isDefined!102 (getValueByKey!148 (toList!786 lt!47820) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25877 c!16445) b!97069))

(assert (= (and d!25877 (not c!16445)) b!97070))

(assert (= (and d!25877 (not res!48947)) b!97071))

(declare-fun m!106037 () Bool)

(assert (=> d!25877 m!106037))

(declare-fun m!106039 () Bool)

(assert (=> b!97069 m!106039))

(assert (=> b!97069 m!106011))

(assert (=> b!97069 m!106011))

(declare-fun m!106041 () Bool)

(assert (=> b!97069 m!106041))

(assert (=> b!97071 m!106011))

(assert (=> b!97071 m!106011))

(assert (=> b!97071 m!106041))

(assert (=> bm!9719 d!25877))

(declare-fun b!97072 () Bool)

(assert (=> b!97072 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> b!97072 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2252 (_values!2440 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun e!63281 () Bool)

(declare-fun lt!48594 () ListLongMap!1541)

(assert (=> b!97072 (= e!63281 (= (apply!91 lt!48594 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!9855 () Bool)

(declare-fun call!9858 () ListLongMap!1541)

(assert (=> bm!9855 (= call!9858 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))))))

(declare-fun b!97073 () Bool)

(declare-fun e!63276 () Bool)

(declare-fun e!63279 () Bool)

(assert (=> b!97073 (= e!63276 e!63279)))

(declare-fun c!16447 () Bool)

(declare-fun e!63280 () Bool)

(assert (=> b!97073 (= c!16447 e!63280)))

(declare-fun res!48948 () Bool)

(assert (=> b!97073 (=> (not res!48948) (not e!63280))))

(assert (=> b!97073 (= res!48948 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!97074 () Bool)

(declare-fun e!63282 () ListLongMap!1541)

(assert (=> b!97074 (= e!63282 (ListLongMap!1542 Nil!1600))))

(declare-fun b!97075 () Bool)

(declare-fun e!63277 () Bool)

(assert (=> b!97075 (= e!63277 (isEmpty!358 lt!48594))))

(declare-fun b!97076 () Bool)

(declare-fun res!48949 () Bool)

(assert (=> b!97076 (=> (not res!48949) (not e!63276))))

(assert (=> b!97076 (= res!48949 (not (contains!800 lt!48594 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!97077 () Bool)

(assert (=> b!97077 (= e!63277 (= lt!48594 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!97078 () Bool)

(declare-fun e!63278 () ListLongMap!1541)

(assert (=> b!97078 (= e!63282 e!63278)))

(declare-fun c!16446 () Bool)

(assert (=> b!97078 (= c!16446 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!97080 () Bool)

(assert (=> b!97080 (= e!63280 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!97080 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!97081 () Bool)

(declare-fun lt!48593 () Unit!2887)

(declare-fun lt!48592 () Unit!2887)

(assert (=> b!97081 (= lt!48593 lt!48592)))

(declare-fun lt!48597 () (_ BitVec 64))

(declare-fun lt!48595 () ListLongMap!1541)

(declare-fun lt!48596 () V!3139)

(declare-fun lt!48591 () (_ BitVec 64))

(assert (=> b!97081 (not (contains!800 (+!137 lt!48595 (tuple2!2337 lt!48597 lt!48596)) lt!48591))))

(assert (=> b!97081 (= lt!48592 (addStillNotContains!41 lt!48595 lt!48597 lt!48596 lt!48591))))

(assert (=> b!97081 (= lt!48591 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!97081 (= lt!48596 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!97081 (= lt!48597 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!97081 (= lt!48595 call!9858)))

(assert (=> b!97081 (= e!63278 (+!137 call!9858 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!97082 () Bool)

(assert (=> b!97082 (= e!63279 e!63277)))

(declare-fun c!16449 () Bool)

(assert (=> b!97082 (= c!16449 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!97083 () Bool)

(assert (=> b!97083 (= e!63278 call!9858)))

(declare-fun b!97079 () Bool)

(assert (=> b!97079 (= e!63279 e!63281)))

(assert (=> b!97079 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun res!48951 () Bool)

(assert (=> b!97079 (= res!48951 (contains!800 lt!48594 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!97079 (=> (not res!48951) (not e!63281))))

(declare-fun d!25879 () Bool)

(assert (=> d!25879 e!63276))

(declare-fun res!48950 () Bool)

(assert (=> d!25879 (=> (not res!48950) (not e!63276))))

(assert (=> d!25879 (= res!48950 (not (contains!800 lt!48594 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25879 (= lt!48594 e!63282)))

(declare-fun c!16448 () Bool)

(assert (=> d!25879 (= c!16448 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> d!25879 (validMask!0 (mask!6542 (v!2779 (underlying!333 thiss!992))))))

(assert (=> d!25879 (= (getCurrentListMapNoExtraKeys!101 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (_values!2440 (v!2779 (underlying!333 thiss!992))) (mask!6542 (v!2779 (underlying!333 thiss!992))) (extraKeys!2282 (v!2779 (underlying!333 thiss!992))) (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) (minValue!2342 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992)))) lt!48594)))

(assert (= (and d!25879 c!16448) b!97074))

(assert (= (and d!25879 (not c!16448)) b!97078))

(assert (= (and b!97078 c!16446) b!97081))

(assert (= (and b!97078 (not c!16446)) b!97083))

(assert (= (or b!97081 b!97083) bm!9855))

(assert (= (and d!25879 res!48950) b!97076))

(assert (= (and b!97076 res!48949) b!97073))

(assert (= (and b!97073 res!48948) b!97080))

(assert (= (and b!97073 c!16447) b!97079))

(assert (= (and b!97073 (not c!16447)) b!97082))

(assert (= (and b!97079 res!48951) b!97072))

(assert (= (and b!97082 c!16449) b!97077))

(assert (= (and b!97082 (not c!16449)) b!97075))

(declare-fun b_lambda!4309 () Bool)

(assert (=> (not b_lambda!4309) (not b!97072)))

(assert (=> b!97072 t!5525))

(declare-fun b_and!5949 () Bool)

(assert (= b_and!5945 (and (=> t!5525 result!3219) b_and!5949)))

(assert (=> b!97072 t!5527))

(declare-fun b_and!5951 () Bool)

(assert (= b_and!5947 (and (=> t!5527 result!3223) b_and!5951)))

(declare-fun b_lambda!4311 () Bool)

(assert (=> (not b_lambda!4311) (not b!97081)))

(assert (=> b!97081 t!5525))

(declare-fun b_and!5953 () Bool)

(assert (= b_and!5949 (and (=> t!5525 result!3219) b_and!5953)))

(assert (=> b!97081 t!5527))

(declare-fun b_and!5955 () Bool)

(assert (= b_and!5951 (and (=> t!5527 result!3223) b_and!5955)))

(assert (=> b!97079 m!104191))

(assert (=> b!97079 m!104191))

(declare-fun m!106043 () Bool)

(assert (=> b!97079 m!106043))

(declare-fun m!106045 () Bool)

(assert (=> bm!9855 m!106045))

(assert (=> b!97072 m!104191))

(declare-fun m!106047 () Bool)

(assert (=> b!97072 m!106047))

(assert (=> b!97072 m!103763))

(assert (=> b!97072 m!106047))

(assert (=> b!97072 m!103763))

(declare-fun m!106049 () Bool)

(assert (=> b!97072 m!106049))

(assert (=> b!97072 m!104191))

(declare-fun m!106051 () Bool)

(assert (=> b!97072 m!106051))

(declare-fun m!106053 () Bool)

(assert (=> d!25879 m!106053))

(assert (=> d!25879 m!103733))

(declare-fun m!106055 () Bool)

(assert (=> b!97075 m!106055))

(declare-fun m!106057 () Bool)

(assert (=> b!97076 m!106057))

(assert (=> b!97078 m!104191))

(assert (=> b!97078 m!104191))

(declare-fun m!106059 () Bool)

(assert (=> b!97078 m!106059))

(assert (=> b!97077 m!106045))

(assert (=> b!97081 m!104191))

(declare-fun m!106061 () Bool)

(assert (=> b!97081 m!106061))

(declare-fun m!106063 () Bool)

(assert (=> b!97081 m!106063))

(declare-fun m!106065 () Bool)

(assert (=> b!97081 m!106065))

(assert (=> b!97081 m!106063))

(assert (=> b!97081 m!106047))

(assert (=> b!97081 m!103763))

(assert (=> b!97081 m!106047))

(assert (=> b!97081 m!103763))

(assert (=> b!97081 m!106049))

(declare-fun m!106067 () Bool)

(assert (=> b!97081 m!106067))

(assert (=> b!97080 m!104191))

(assert (=> b!97080 m!104191))

(assert (=> b!97080 m!106059))

(assert (=> bm!9744 d!25879))

(declare-fun d!25881 () Bool)

(declare-fun e!63284 () Bool)

(assert (=> d!25881 e!63284))

(declare-fun res!48952 () Bool)

(assert (=> d!25881 (=> res!48952 e!63284)))

(declare-fun lt!48600 () Bool)

(assert (=> d!25881 (= res!48952 (not lt!48600))))

(declare-fun lt!48598 () Bool)

(assert (=> d!25881 (= lt!48600 lt!48598)))

(declare-fun lt!48599 () Unit!2887)

(declare-fun e!63283 () Unit!2887)

(assert (=> d!25881 (= lt!48599 e!63283)))

(declare-fun c!16450 () Bool)

(assert (=> d!25881 (= c!16450 lt!48598)))

(assert (=> d!25881 (= lt!48598 (containsKey!152 (toList!786 lt!47985) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25881 (= (contains!800 lt!47985 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48600)))

(declare-fun b!97084 () Bool)

(declare-fun lt!48601 () Unit!2887)

(assert (=> b!97084 (= e!63283 lt!48601)))

(assert (=> b!97084 (= lt!48601 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47985) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> b!97084 (isDefined!102 (getValueByKey!148 (toList!786 lt!47985) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!97085 () Bool)

(declare-fun Unit!2943 () Unit!2887)

(assert (=> b!97085 (= e!63283 Unit!2943)))

(declare-fun b!97086 () Bool)

(assert (=> b!97086 (= e!63284 (isDefined!102 (getValueByKey!148 (toList!786 lt!47985) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (= (and d!25881 c!16450) b!97084))

(assert (= (and d!25881 (not c!16450)) b!97085))

(assert (= (and d!25881 (not res!48952)) b!97086))

(declare-fun m!106069 () Bool)

(assert (=> d!25881 m!106069))

(declare-fun m!106071 () Bool)

(assert (=> b!97084 m!106071))

(assert (=> b!97084 m!104383))

(assert (=> b!97084 m!104383))

(declare-fun m!106073 () Bool)

(assert (=> b!97084 m!106073))

(assert (=> b!97086 m!104383))

(assert (=> b!97086 m!104383))

(assert (=> b!97086 m!106073))

(assert (=> d!25375 d!25881))

(declare-fun b!97088 () Bool)

(declare-fun e!63285 () Option!154)

(declare-fun e!63286 () Option!154)

(assert (=> b!97088 (= e!63285 e!63286)))

(declare-fun c!16452 () Bool)

(assert (=> b!97088 (= c!16452 (and ((_ is Cons!1599) lt!47984) (not (= (_1!1178 (h!2192 lt!47984)) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun c!16451 () Bool)

(declare-fun d!25883 () Bool)

(assert (=> d!25883 (= c!16451 (and ((_ is Cons!1599) lt!47984) (= (_1!1178 (h!2192 lt!47984)) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25883 (= (getValueByKey!148 lt!47984 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) e!63285)))

(declare-fun b!97089 () Bool)

(assert (=> b!97089 (= e!63286 (getValueByKey!148 (t!5529 lt!47984) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!97090 () Bool)

(assert (=> b!97090 (= e!63286 None!152)))

(declare-fun b!97087 () Bool)

(assert (=> b!97087 (= e!63285 (Some!153 (_2!1178 (h!2192 lt!47984))))))

(assert (= (and d!25883 c!16451) b!97087))

(assert (= (and d!25883 (not c!16451)) b!97088))

(assert (= (and b!97088 c!16452) b!97089))

(assert (= (and b!97088 (not c!16452)) b!97090))

(declare-fun m!106075 () Bool)

(assert (=> b!97089 m!106075))

(assert (=> d!25375 d!25883))

(declare-fun d!25885 () Bool)

(assert (=> d!25885 (= (getValueByKey!148 lt!47984 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun lt!48602 () Unit!2887)

(assert (=> d!25885 (= lt!48602 (choose!591 lt!47984 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun e!63287 () Bool)

(assert (=> d!25885 e!63287))

(declare-fun res!48953 () Bool)

(assert (=> d!25885 (=> (not res!48953) (not e!63287))))

(assert (=> d!25885 (= res!48953 (isStrictlySorted!298 lt!47984))))

(assert (=> d!25885 (= (lemmaContainsTupThenGetReturnValue!66 lt!47984 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48602)))

(declare-fun b!97091 () Bool)

(declare-fun res!48954 () Bool)

(assert (=> b!97091 (=> (not res!48954) (not e!63287))))

(assert (=> b!97091 (= res!48954 (containsKey!152 lt!47984 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!97092 () Bool)

(assert (=> b!97092 (= e!63287 (contains!802 lt!47984 (tuple2!2337 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (= (and d!25885 res!48953) b!97091))

(assert (= (and b!97091 res!48954) b!97092))

(assert (=> d!25885 m!104377))

(declare-fun m!106077 () Bool)

(assert (=> d!25885 m!106077))

(declare-fun m!106079 () Bool)

(assert (=> d!25885 m!106079))

(declare-fun m!106081 () Bool)

(assert (=> b!97091 m!106081))

(declare-fun m!106083 () Bool)

(assert (=> b!97092 m!106083))

(assert (=> d!25375 d!25885))

(declare-fun e!63291 () List!1603)

(declare-fun b!97093 () Bool)

(assert (=> b!97093 (= e!63291 (insertStrictlySorted!68 (t!5529 (toList!786 lt!47793)) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!97095 () Bool)

(declare-fun e!63288 () List!1603)

(declare-fun call!9860 () List!1603)

(assert (=> b!97095 (= e!63288 call!9860)))

(declare-fun b!97096 () Bool)

(declare-fun e!63292 () List!1603)

(declare-fun call!9859 () List!1603)

(assert (=> b!97096 (= e!63292 call!9859)))

(declare-fun b!97097 () Bool)

(declare-fun e!63290 () List!1603)

(declare-fun call!9861 () List!1603)

(assert (=> b!97097 (= e!63290 call!9861)))

(declare-fun bm!9856 () Bool)

(assert (=> bm!9856 (= call!9861 call!9860)))

(declare-fun lt!48603 () List!1603)

(declare-fun e!63289 () Bool)

(declare-fun b!97098 () Bool)

(assert (=> b!97098 (= e!63289 (contains!802 lt!48603 (tuple2!2337 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun bm!9857 () Bool)

(assert (=> bm!9857 (= call!9859 call!9861)))

(declare-fun b!97099 () Bool)

(declare-fun c!16456 () Bool)

(declare-fun c!16454 () Bool)

(assert (=> b!97099 (= e!63291 (ite c!16454 (t!5529 (toList!786 lt!47793)) (ite c!16456 (Cons!1599 (h!2192 (toList!786 lt!47793)) (t!5529 (toList!786 lt!47793))) Nil!1600)))))

(declare-fun b!97094 () Bool)

(declare-fun res!48955 () Bool)

(assert (=> b!97094 (=> (not res!48955) (not e!63289))))

(assert (=> b!97094 (= res!48955 (containsKey!152 lt!48603 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun d!25887 () Bool)

(assert (=> d!25887 e!63289))

(declare-fun res!48956 () Bool)

(assert (=> d!25887 (=> (not res!48956) (not e!63289))))

(assert (=> d!25887 (= res!48956 (isStrictlySorted!298 lt!48603))))

(assert (=> d!25887 (= lt!48603 e!63288)))

(declare-fun c!16453 () Bool)

(assert (=> d!25887 (= c!16453 (and ((_ is Cons!1599) (toList!786 lt!47793)) (bvslt (_1!1178 (h!2192 (toList!786 lt!47793))) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25887 (isStrictlySorted!298 (toList!786 lt!47793))))

(assert (=> d!25887 (= (insertStrictlySorted!68 (toList!786 lt!47793) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48603)))

(declare-fun b!97100 () Bool)

(assert (=> b!97100 (= c!16456 (and ((_ is Cons!1599) (toList!786 lt!47793)) (bvsgt (_1!1178 (h!2192 (toList!786 lt!47793))) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> b!97100 (= e!63290 e!63292)))

(declare-fun bm!9858 () Bool)

(assert (=> bm!9858 (= call!9860 ($colon$colon!76 e!63291 (ite c!16453 (h!2192 (toList!786 lt!47793)) (tuple2!2337 (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun c!16455 () Bool)

(assert (=> bm!9858 (= c!16455 c!16453)))

(declare-fun b!97101 () Bool)

(assert (=> b!97101 (= e!63288 e!63290)))

(assert (=> b!97101 (= c!16454 (and ((_ is Cons!1599) (toList!786 lt!47793)) (= (_1!1178 (h!2192 (toList!786 lt!47793))) (_1!1178 (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!97102 () Bool)

(assert (=> b!97102 (= e!63292 call!9859)))

(assert (= (and d!25887 c!16453) b!97095))

(assert (= (and d!25887 (not c!16453)) b!97101))

(assert (= (and b!97101 c!16454) b!97097))

(assert (= (and b!97101 (not c!16454)) b!97100))

(assert (= (and b!97100 c!16456) b!97096))

(assert (= (and b!97100 (not c!16456)) b!97102))

(assert (= (or b!97096 b!97102) bm!9857))

(assert (= (or b!97097 bm!9857) bm!9856))

(assert (= (or b!97095 bm!9856) bm!9858))

(assert (= (and bm!9858 c!16455) b!97093))

(assert (= (and bm!9858 (not c!16455)) b!97099))

(assert (= (and d!25887 res!48956) b!97094))

(assert (= (and b!97094 res!48955) b!97098))

(declare-fun m!106085 () Bool)

(assert (=> b!97093 m!106085))

(declare-fun m!106087 () Bool)

(assert (=> d!25887 m!106087))

(declare-fun m!106089 () Bool)

(assert (=> d!25887 m!106089))

(declare-fun m!106091 () Bool)

(assert (=> b!97098 m!106091))

(declare-fun m!106093 () Bool)

(assert (=> b!97094 m!106093))

(declare-fun m!106095 () Bool)

(assert (=> bm!9858 m!106095))

(assert (=> d!25375 d!25887))

(declare-fun d!25889 () Bool)

(assert (=> d!25889 (= (inRange!0 (ite c!16235 (index!3191 lt!48097) (ite c!16232 (index!3190 lt!48081) (index!3193 lt!48081))) (mask!6542 newMap!16)) (and (bvsge (ite c!16235 (index!3191 lt!48097) (ite c!16232 (index!3190 lt!48081) (index!3193 lt!48081))) #b00000000000000000000000000000000) (bvslt (ite c!16235 (index!3191 lt!48097) (ite c!16232 (index!3190 lt!48081) (index!3193 lt!48081))) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9766 d!25889))

(declare-fun d!25891 () Bool)

(assert (=> d!25891 (= (+!137 (getCurrentListMap!467 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!467 (_keys!4143 newMap!16) (array!4217 (store (arr!2003 (_values!2440 newMap!16)) (index!3191 lt!47707) (ValueCellFull!966 (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2252 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(assert (=> d!25891 true))

(declare-fun _$5!98 () Unit!2887)

(assert (=> d!25891 (= (choose!584 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3191 lt!47707) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) from!355) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)) _$5!98)))

(declare-fun bs!4004 () Bool)

(assert (= bs!4004 d!25891))

(assert (=> bs!4004 m!103899))

(assert (=> bs!4004 m!103899))

(assert (=> bs!4004 m!104177))

(assert (=> bs!4004 m!103867))

(assert (=> bs!4004 m!103869))

(assert (=> d!25311 d!25891))

(assert (=> d!25311 d!25451))

(assert (=> bm!9728 d!25541))

(assert (=> b!96005 d!25691))

(assert (=> b!96005 d!25597))

(declare-fun d!25893 () Bool)

(declare-fun e!63305 () Bool)

(assert (=> d!25893 e!63305))

(declare-fun res!48960 () Bool)

(assert (=> d!25893 (=> (not res!48960) (not e!63305))))

(assert (=> d!25893 (= res!48960 (or (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)))))))))

(declare-fun lt!48613 () ListLongMap!1541)

(declare-fun lt!48606 () ListLongMap!1541)

(assert (=> d!25893 (= lt!48613 lt!48606)))

(declare-fun lt!48605 () Unit!2887)

(declare-fun e!63297 () Unit!2887)

(assert (=> d!25893 (= lt!48605 e!63297)))

(declare-fun c!16459 () Bool)

(declare-fun e!63302 () Bool)

(assert (=> d!25893 (= c!16459 e!63302)))

(declare-fun res!48962 () Bool)

(assert (=> d!25893 (=> (not res!48962) (not e!63302))))

(assert (=> d!25893 (= res!48962 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)))))))

(declare-fun e!63303 () ListLongMap!1541)

(assert (=> d!25893 (= lt!48606 e!63303)))

(declare-fun c!16462 () Bool)

(assert (=> d!25893 (= c!16462 (and (not (= (bvand (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25893 (validMask!0 (mask!6542 (ite c!16116 (_2!1179 lt!47718) newMap!16)))))

(assert (=> d!25893 (= (getCurrentListMap!467 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (_values!2440 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (mask!6542 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 (_2!1179 lt!47718) newMap!16))) lt!48613)))

(declare-fun b!97103 () Bool)

(declare-fun e!63300 () ListLongMap!1541)

(assert (=> b!97103 (= e!63303 e!63300)))

(declare-fun c!16457 () Bool)

(assert (=> b!97103 (= c!16457 (and (not (= (bvand (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97104 () Bool)

(declare-fun e!63294 () Bool)

(assert (=> b!97104 (= e!63294 (= (apply!91 lt!48613 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16))))))

(declare-fun b!97105 () Bool)

(declare-fun e!63299 () Bool)

(assert (=> b!97105 (= e!63305 e!63299)))

(declare-fun c!16458 () Bool)

(assert (=> b!97105 (= c!16458 (not (= (bvand (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun call!9864 () ListLongMap!1541)

(declare-fun b!97106 () Bool)

(assert (=> b!97106 (= e!63303 (+!137 call!9864 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)))))))

(declare-fun bm!9859 () Bool)

(declare-fun call!9863 () ListLongMap!1541)

(declare-fun call!9868 () ListLongMap!1541)

(assert (=> bm!9859 (= call!9863 call!9868)))

(declare-fun b!97107 () Bool)

(declare-fun c!16460 () Bool)

(assert (=> b!97107 (= c!16460 (and (not (= (bvand (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63304 () ListLongMap!1541)

(assert (=> b!97107 (= e!63300 e!63304)))

(declare-fun b!97108 () Bool)

(declare-fun res!48957 () Bool)

(assert (=> b!97108 (=> (not res!48957) (not e!63305))))

(declare-fun e!63301 () Bool)

(assert (=> b!97108 (= res!48957 e!63301)))

(declare-fun res!48961 () Bool)

(assert (=> b!97108 (=> res!48961 e!63301)))

(declare-fun e!63293 () Bool)

(assert (=> b!97108 (= res!48961 (not e!63293))))

(declare-fun res!48963 () Bool)

(assert (=> b!97108 (=> (not res!48963) (not e!63293))))

(assert (=> b!97108 (= res!48963 (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)))))))

(declare-fun bm!9860 () Bool)

(declare-fun call!9865 () ListLongMap!1541)

(assert (=> bm!9860 (= call!9864 (+!137 (ite c!16462 call!9868 (ite c!16457 call!9863 call!9865)) (ite (or c!16462 c!16457) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16))))))))

(declare-fun b!97109 () Bool)

(assert (=> b!97109 (= e!63302 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16))) #b00000000000000000000000000000000)))))

(declare-fun b!97110 () Bool)

(declare-fun e!63298 () Bool)

(assert (=> b!97110 (= e!63301 e!63298)))

(declare-fun res!48958 () Bool)

(assert (=> b!97110 (=> (not res!48958) (not e!63298))))

(assert (=> b!97110 (= res!48958 (contains!800 lt!48613 (select (arr!2002 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16))) #b00000000000000000000000000000000)))))

(assert (=> b!97110 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)))))))

(declare-fun b!97111 () Bool)

(declare-fun call!9866 () Bool)

(assert (=> b!97111 (= e!63299 (not call!9866))))

(declare-fun b!97112 () Bool)

(assert (=> b!97112 (= e!63304 call!9865)))

(declare-fun bm!9861 () Bool)

(assert (=> bm!9861 (= call!9865 call!9863)))

(declare-fun b!97113 () Bool)

(declare-fun e!63295 () Bool)

(declare-fun call!9862 () Bool)

(assert (=> b!97113 (= e!63295 (not call!9862))))

(declare-fun bm!9862 () Bool)

(assert (=> bm!9862 (= call!9862 (contains!800 lt!48613 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97114 () Bool)

(assert (=> b!97114 (= e!63298 (= (apply!91 lt!48613 (select (arr!2002 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16))) #b00000000000000000000000000000000)) (get!1286 (select (arr!2003 (_values!2440 (ite c!16116 (_2!1179 lt!47718) newMap!16))) #b00000000000000000000000000000000) (dynLambda!375 (defaultEntry!2457 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97114 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_values!2440 (ite c!16116 (_2!1179 lt!47718) newMap!16)))))))

(assert (=> b!97114 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2251 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)))))))

(declare-fun b!97115 () Bool)

(declare-fun Unit!2944 () Unit!2887)

(assert (=> b!97115 (= e!63297 Unit!2944)))

(declare-fun bm!9863 () Bool)

(declare-fun call!9867 () ListLongMap!1541)

(assert (=> bm!9863 (= call!9867 call!9864)))

(declare-fun b!97116 () Bool)

(declare-fun res!48964 () Bool)

(assert (=> b!97116 (=> (not res!48964) (not e!63305))))

(assert (=> b!97116 (= res!48964 e!63295)))

(declare-fun c!16461 () Bool)

(assert (=> b!97116 (= c!16461 (not (= (bvand (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!97117 () Bool)

(assert (=> b!97117 (= e!63300 call!9867)))

(declare-fun b!97118 () Bool)

(declare-fun lt!48617 () Unit!2887)

(assert (=> b!97118 (= e!63297 lt!48617)))

(declare-fun lt!48611 () ListLongMap!1541)

(assert (=> b!97118 (= lt!48611 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (_values!2440 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (mask!6542 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 (_2!1179 lt!47718) newMap!16))))))

(declare-fun lt!48621 () (_ BitVec 64))

(assert (=> b!97118 (= lt!48621 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48610 () (_ BitVec 64))

(assert (=> b!97118 (= lt!48610 (select (arr!2002 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16))) #b00000000000000000000000000000000))))

(declare-fun lt!48612 () Unit!2887)

(assert (=> b!97118 (= lt!48612 (addStillContains!67 lt!48611 lt!48621 (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) lt!48610))))

(assert (=> b!97118 (contains!800 (+!137 lt!48611 (tuple2!2337 lt!48621 (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)))) lt!48610)))

(declare-fun lt!48620 () Unit!2887)

(assert (=> b!97118 (= lt!48620 lt!48612)))

(declare-fun lt!48614 () ListLongMap!1541)

(assert (=> b!97118 (= lt!48614 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (_values!2440 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (mask!6542 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 (_2!1179 lt!47718) newMap!16))))))

(declare-fun lt!48618 () (_ BitVec 64))

(assert (=> b!97118 (= lt!48618 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48609 () (_ BitVec 64))

(assert (=> b!97118 (= lt!48609 (select (arr!2002 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16))) #b00000000000000000000000000000000))))

(declare-fun lt!48619 () Unit!2887)

(assert (=> b!97118 (= lt!48619 (addApplyDifferent!67 lt!48614 lt!48618 (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) lt!48609))))

(assert (=> b!97118 (= (apply!91 (+!137 lt!48614 (tuple2!2337 lt!48618 (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)))) lt!48609) (apply!91 lt!48614 lt!48609))))

(declare-fun lt!48607 () Unit!2887)

(assert (=> b!97118 (= lt!48607 lt!48619)))

(declare-fun lt!48604 () ListLongMap!1541)

(assert (=> b!97118 (= lt!48604 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (_values!2440 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (mask!6542 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 (_2!1179 lt!47718) newMap!16))))))

(declare-fun lt!48615 () (_ BitVec 64))

(assert (=> b!97118 (= lt!48615 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48623 () (_ BitVec 64))

(assert (=> b!97118 (= lt!48623 (select (arr!2002 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16))) #b00000000000000000000000000000000))))

(declare-fun lt!48625 () Unit!2887)

(assert (=> b!97118 (= lt!48625 (addApplyDifferent!67 lt!48604 lt!48615 (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) lt!48623))))

(assert (=> b!97118 (= (apply!91 (+!137 lt!48604 (tuple2!2337 lt!48615 (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)))) lt!48623) (apply!91 lt!48604 lt!48623))))

(declare-fun lt!48624 () Unit!2887)

(assert (=> b!97118 (= lt!48624 lt!48625)))

(declare-fun lt!48622 () ListLongMap!1541)

(assert (=> b!97118 (= lt!48622 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (_values!2440 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (mask!6542 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 (_2!1179 lt!47718) newMap!16))))))

(declare-fun lt!48616 () (_ BitVec 64))

(assert (=> b!97118 (= lt!48616 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48608 () (_ BitVec 64))

(assert (=> b!97118 (= lt!48608 (select (arr!2002 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16))) #b00000000000000000000000000000000))))

(assert (=> b!97118 (= lt!48617 (addApplyDifferent!67 lt!48622 lt!48616 (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) lt!48608))))

(assert (=> b!97118 (= (apply!91 (+!137 lt!48622 (tuple2!2337 lt!48616 (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)))) lt!48608) (apply!91 lt!48622 lt!48608))))

(declare-fun b!97119 () Bool)

(assert (=> b!97119 (= e!63299 e!63294)))

(declare-fun res!48965 () Bool)

(assert (=> b!97119 (= res!48965 call!9866)))

(assert (=> b!97119 (=> (not res!48965) (not e!63294))))

(declare-fun b!97120 () Bool)

(assert (=> b!97120 (= e!63293 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16))) #b00000000000000000000000000000000)))))

(declare-fun bm!9864 () Bool)

(assert (=> bm!9864 (= call!9868 (getCurrentListMapNoExtraKeys!101 (_keys!4143 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (_values!2440 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (mask!6542 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (extraKeys!2282 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) (minValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 (ite c!16116 (_2!1179 lt!47718) newMap!16))))))

(declare-fun bm!9865 () Bool)

(assert (=> bm!9865 (= call!9866 (contains!800 lt!48613 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97121 () Bool)

(assert (=> b!97121 (= e!63304 call!9867)))

(declare-fun b!97122 () Bool)

(declare-fun e!63296 () Bool)

(assert (=> b!97122 (= e!63296 (= (apply!91 lt!48613 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 (ite c!16116 (_2!1179 lt!47718) newMap!16))))))

(declare-fun b!97123 () Bool)

(assert (=> b!97123 (= e!63295 e!63296)))

(declare-fun res!48959 () Bool)

(assert (=> b!97123 (= res!48959 call!9862)))

(assert (=> b!97123 (=> (not res!48959) (not e!63296))))

(assert (= (and d!25893 c!16462) b!97106))

(assert (= (and d!25893 (not c!16462)) b!97103))

(assert (= (and b!97103 c!16457) b!97117))

(assert (= (and b!97103 (not c!16457)) b!97107))

(assert (= (and b!97107 c!16460) b!97121))

(assert (= (and b!97107 (not c!16460)) b!97112))

(assert (= (or b!97121 b!97112) bm!9861))

(assert (= (or b!97117 bm!9861) bm!9859))

(assert (= (or b!97117 b!97121) bm!9863))

(assert (= (or b!97106 bm!9859) bm!9864))

(assert (= (or b!97106 bm!9863) bm!9860))

(assert (= (and d!25893 res!48962) b!97109))

(assert (= (and d!25893 c!16459) b!97118))

(assert (= (and d!25893 (not c!16459)) b!97115))

(assert (= (and d!25893 res!48960) b!97108))

(assert (= (and b!97108 res!48963) b!97120))

(assert (= (and b!97108 (not res!48961)) b!97110))

(assert (= (and b!97110 res!48958) b!97114))

(assert (= (and b!97108 res!48957) b!97116))

(assert (= (and b!97116 c!16461) b!97123))

(assert (= (and b!97116 (not c!16461)) b!97113))

(assert (= (and b!97123 res!48959) b!97122))

(assert (= (or b!97123 b!97113) bm!9862))

(assert (= (and b!97116 res!48964) b!97105))

(assert (= (and b!97105 c!16458) b!97119))

(assert (= (and b!97105 (not c!16458)) b!97111))

(assert (= (and b!97119 res!48965) b!97104))

(assert (= (or b!97119 b!97111) bm!9865))

(declare-fun b_lambda!4313 () Bool)

(assert (=> (not b_lambda!4313) (not b!97114)))

(declare-fun tb!1909 () Bool)

(declare-fun t!5543 () Bool)

(assert (=> (and b!95662 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 (ite c!16116 (_2!1179 lt!47718) newMap!16))) t!5543) tb!1909))

(declare-fun result!3241 () Bool)

(assert (=> tb!1909 (= result!3241 tp_is_empty!2619)))

(assert (=> b!97114 t!5543))

(declare-fun b_and!5957 () Bool)

(assert (= b_and!5953 (and (=> t!5543 result!3241) b_and!5957)))

(declare-fun tb!1911 () Bool)

(declare-fun t!5545 () Bool)

(assert (=> (and b!95665 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (ite c!16116 (_2!1179 lt!47718) newMap!16))) t!5545) tb!1911))

(declare-fun result!3243 () Bool)

(assert (= result!3243 result!3241))

(assert (=> b!97114 t!5545))

(declare-fun b_and!5959 () Bool)

(assert (= b_and!5955 (and (=> t!5545 result!3243) b_and!5959)))

(declare-fun m!106097 () Bool)

(assert (=> b!97110 m!106097))

(assert (=> b!97110 m!106097))

(declare-fun m!106099 () Bool)

(assert (=> b!97110 m!106099))

(declare-fun m!106101 () Bool)

(assert (=> b!97118 m!106101))

(declare-fun m!106103 () Bool)

(assert (=> b!97118 m!106103))

(declare-fun m!106105 () Bool)

(assert (=> b!97118 m!106105))

(declare-fun m!106107 () Bool)

(assert (=> b!97118 m!106107))

(declare-fun m!106109 () Bool)

(assert (=> b!97118 m!106109))

(assert (=> b!97118 m!106105))

(declare-fun m!106111 () Bool)

(assert (=> b!97118 m!106111))

(declare-fun m!106113 () Bool)

(assert (=> b!97118 m!106113))

(declare-fun m!106115 () Bool)

(assert (=> b!97118 m!106115))

(declare-fun m!106117 () Bool)

(assert (=> b!97118 m!106117))

(declare-fun m!106119 () Bool)

(assert (=> b!97118 m!106119))

(declare-fun m!106121 () Bool)

(assert (=> b!97118 m!106121))

(declare-fun m!106123 () Bool)

(assert (=> b!97118 m!106123))

(assert (=> b!97118 m!106115))

(declare-fun m!106125 () Bool)

(assert (=> b!97118 m!106125))

(assert (=> b!97118 m!106117))

(assert (=> b!97118 m!106097))

(declare-fun m!106127 () Bool)

(assert (=> b!97118 m!106127))

(assert (=> b!97118 m!106121))

(declare-fun m!106129 () Bool)

(assert (=> b!97118 m!106129))

(declare-fun m!106131 () Bool)

(assert (=> b!97118 m!106131))

(declare-fun m!106133 () Bool)

(assert (=> b!97114 m!106133))

(assert (=> b!97114 m!106097))

(declare-fun m!106135 () Bool)

(assert (=> b!97114 m!106135))

(assert (=> b!97114 m!106133))

(declare-fun m!106137 () Bool)

(assert (=> b!97114 m!106137))

(declare-fun m!106139 () Bool)

(assert (=> b!97114 m!106139))

(assert (=> b!97114 m!106097))

(assert (=> b!97114 m!106137))

(declare-fun m!106141 () Bool)

(assert (=> b!97106 m!106141))

(declare-fun m!106143 () Bool)

(assert (=> d!25893 m!106143))

(declare-fun m!106145 () Bool)

(assert (=> bm!9862 m!106145))

(assert (=> b!97109 m!106097))

(assert (=> b!97109 m!106097))

(declare-fun m!106147 () Bool)

(assert (=> b!97109 m!106147))

(declare-fun m!106149 () Bool)

(assert (=> bm!9860 m!106149))

(declare-fun m!106151 () Bool)

(assert (=> b!97122 m!106151))

(declare-fun m!106153 () Bool)

(assert (=> bm!9865 m!106153))

(declare-fun m!106155 () Bool)

(assert (=> b!97104 m!106155))

(assert (=> b!97120 m!106097))

(assert (=> b!97120 m!106097))

(assert (=> b!97120 m!106147))

(assert (=> bm!9864 m!106123))

(assert (=> d!25339 d!25893))

(declare-fun b!97124 () Bool)

(declare-fun e!63306 () Bool)

(declare-fun e!63309 () Bool)

(assert (=> b!97124 (= e!63306 e!63309)))

(declare-fun c!16463 () Bool)

(assert (=> b!97124 (= c!16463 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!97125 () Bool)

(declare-fun call!9869 () Bool)

(assert (=> b!97125 (= e!63309 call!9869)))

(declare-fun b!97126 () Bool)

(declare-fun e!63307 () Bool)

(assert (=> b!97126 (= e!63307 (contains!801 Nil!1599 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!97127 () Bool)

(assert (=> b!97127 (= e!63309 call!9869)))

(declare-fun d!25895 () Bool)

(declare-fun res!48967 () Bool)

(declare-fun e!63308 () Bool)

(assert (=> d!25895 (=> res!48967 e!63308)))

(assert (=> d!25895 (= res!48967 (bvsge #b00000000000000000000000000000000 (size!2251 (_keys!4143 (v!2779 (underlying!333 thiss!992))))))))

(assert (=> d!25895 (= (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) #b00000000000000000000000000000000 Nil!1599) e!63308)))

(declare-fun b!97128 () Bool)

(assert (=> b!97128 (= e!63308 e!63306)))

(declare-fun res!48968 () Bool)

(assert (=> b!97128 (=> (not res!48968) (not e!63306))))

(assert (=> b!97128 (= res!48968 (not e!63307))))

(declare-fun res!48966 () Bool)

(assert (=> b!97128 (=> (not res!48966) (not e!63307))))

(assert (=> b!97128 (= res!48966 (validKeyInArray!0 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!9866 () Bool)

(assert (=> bm!9866 (= call!9869 (arrayNoDuplicates!0 (_keys!4143 (v!2779 (underlying!333 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16463 (Cons!1598 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) #b00000000000000000000000000000000) Nil!1599) Nil!1599)))))

(assert (= (and d!25895 (not res!48967)) b!97128))

(assert (= (and b!97128 res!48966) b!97126))

(assert (= (and b!97128 res!48968) b!97124))

(assert (= (and b!97124 c!16463) b!97125))

(assert (= (and b!97124 (not c!16463)) b!97127))

(assert (= (or b!97125 b!97127) bm!9866))

(assert (=> b!97124 m!105289))

(assert (=> b!97124 m!105289))

(assert (=> b!97124 m!105291))

(assert (=> b!97126 m!105289))

(assert (=> b!97126 m!105289))

(declare-fun m!106157 () Bool)

(assert (=> b!97126 m!106157))

(assert (=> b!97128 m!105289))

(assert (=> b!97128 m!105289))

(assert (=> b!97128 m!105291))

(assert (=> bm!9866 m!105289))

(declare-fun m!106159 () Bool)

(assert (=> bm!9866 m!106159))

(assert (=> b!96002 d!25895))

(assert (=> b!96213 d!25365))

(assert (=> d!25379 d!25383))

(assert (=> d!25379 d!25391))

(declare-fun d!25897 () Bool)

(assert (=> d!25897 (contains!800 (+!137 lt!47782 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47781)))

(assert (=> d!25897 true))

(declare-fun _$35!336 () Unit!2887)

(assert (=> d!25897 (= (choose!589 lt!47782 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47781) _$35!336)))

(declare-fun bs!4005 () Bool)

(assert (= bs!4005 d!25897))

(assert (=> bs!4005 m!103917))

(assert (=> bs!4005 m!103917))

(assert (=> bs!4005 m!103927))

(assert (=> d!25379 d!25897))

(declare-fun d!25899 () Bool)

(declare-fun e!63311 () Bool)

(assert (=> d!25899 e!63311))

(declare-fun res!48969 () Bool)

(assert (=> d!25899 (=> res!48969 e!63311)))

(declare-fun lt!48628 () Bool)

(assert (=> d!25899 (= res!48969 (not lt!48628))))

(declare-fun lt!48626 () Bool)

(assert (=> d!25899 (= lt!48628 lt!48626)))

(declare-fun lt!48627 () Unit!2887)

(declare-fun e!63310 () Unit!2887)

(assert (=> d!25899 (= lt!48627 e!63310)))

(declare-fun c!16464 () Bool)

(assert (=> d!25899 (= c!16464 lt!48626)))

(assert (=> d!25899 (= lt!48626 (containsKey!152 (toList!786 lt!47782) lt!47781))))

(assert (=> d!25899 (= (contains!800 lt!47782 lt!47781) lt!48628)))

(declare-fun b!97130 () Bool)

(declare-fun lt!48629 () Unit!2887)

(assert (=> b!97130 (= e!63310 lt!48629)))

(assert (=> b!97130 (= lt!48629 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47782) lt!47781))))

(assert (=> b!97130 (isDefined!102 (getValueByKey!148 (toList!786 lt!47782) lt!47781))))

(declare-fun b!97131 () Bool)

(declare-fun Unit!2945 () Unit!2887)

(assert (=> b!97131 (= e!63310 Unit!2945)))

(declare-fun b!97132 () Bool)

(assert (=> b!97132 (= e!63311 (isDefined!102 (getValueByKey!148 (toList!786 lt!47782) lt!47781)))))

(assert (= (and d!25899 c!16464) b!97130))

(assert (= (and d!25899 (not c!16464)) b!97131))

(assert (= (and d!25899 (not res!48969)) b!97132))

(declare-fun m!106161 () Bool)

(assert (=> d!25899 m!106161))

(declare-fun m!106163 () Bool)

(assert (=> b!97130 m!106163))

(declare-fun m!106165 () Bool)

(assert (=> b!97130 m!106165))

(assert (=> b!97130 m!106165))

(declare-fun m!106167 () Bool)

(assert (=> b!97130 m!106167))

(assert (=> b!97132 m!106165))

(assert (=> b!97132 m!106165))

(assert (=> b!97132 m!106167))

(assert (=> d!25379 d!25899))

(declare-fun d!25901 () Bool)

(declare-fun lt!48630 () Bool)

(assert (=> d!25901 (= lt!48630 (select (content!99 (toList!786 lt!48107)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun e!63312 () Bool)

(assert (=> d!25901 (= lt!48630 e!63312)))

(declare-fun res!48971 () Bool)

(assert (=> d!25901 (=> (not res!48971) (not e!63312))))

(assert (=> d!25901 (= res!48971 ((_ is Cons!1599) (toList!786 lt!48107)))))

(assert (=> d!25901 (= (contains!802 (toList!786 lt!48107) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!48630)))

(declare-fun b!97133 () Bool)

(declare-fun e!63313 () Bool)

(assert (=> b!97133 (= e!63312 e!63313)))

(declare-fun res!48970 () Bool)

(assert (=> b!97133 (=> res!48970 e!63313)))

(assert (=> b!97133 (= res!48970 (= (h!2192 (toList!786 lt!48107)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!97134 () Bool)

(assert (=> b!97134 (= e!63313 (contains!802 (t!5529 (toList!786 lt!48107)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(assert (= (and d!25901 res!48971) b!97133))

(assert (= (and b!97133 (not res!48970)) b!97134))

(declare-fun m!106169 () Bool)

(assert (=> d!25901 m!106169))

(declare-fun m!106171 () Bool)

(assert (=> d!25901 m!106171))

(declare-fun m!106173 () Bool)

(assert (=> b!97134 m!106173))

(assert (=> b!96325 d!25901))

(declare-fun d!25903 () Bool)

(assert (=> d!25903 (= (apply!91 lt!47872 lt!47867) (get!1289 (getValueByKey!148 (toList!786 lt!47872) lt!47867)))))

(declare-fun bs!4006 () Bool)

(assert (= bs!4006 d!25903))

(declare-fun m!106175 () Bool)

(assert (=> bs!4006 m!106175))

(assert (=> bs!4006 m!106175))

(declare-fun m!106177 () Bool)

(assert (=> bs!4006 m!106177))

(assert (=> b!96069 d!25903))

(assert (=> b!96069 d!25779))

(declare-fun d!25905 () Bool)

(assert (=> d!25905 (= (apply!91 (+!137 lt!47862 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16))) lt!47881) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47862 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16)))) lt!47881)))))

(declare-fun bs!4007 () Bool)

(assert (= bs!4007 d!25905))

(declare-fun m!106179 () Bool)

(assert (=> bs!4007 m!106179))

(assert (=> bs!4007 m!106179))

(declare-fun m!106181 () Bool)

(assert (=> bs!4007 m!106181))

(assert (=> b!96069 d!25905))

(declare-fun d!25907 () Bool)

(assert (=> d!25907 (= (apply!91 (+!137 lt!47872 (tuple2!2337 lt!47876 (minValue!2342 newMap!16))) lt!47867) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47872 (tuple2!2337 lt!47876 (minValue!2342 newMap!16)))) lt!47867)))))

(declare-fun bs!4008 () Bool)

(assert (= bs!4008 d!25907))

(declare-fun m!106183 () Bool)

(assert (=> bs!4008 m!106183))

(assert (=> bs!4008 m!106183))

(declare-fun m!106185 () Bool)

(assert (=> bs!4008 m!106185))

(assert (=> b!96069 d!25907))

(declare-fun d!25909 () Bool)

(assert (=> d!25909 (= (apply!91 (+!137 lt!47862 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16))) lt!47881) (apply!91 lt!47862 lt!47881))))

(declare-fun lt!48631 () Unit!2887)

(assert (=> d!25909 (= lt!48631 (choose!588 lt!47862 lt!47873 (zeroValue!2342 newMap!16) lt!47881))))

(declare-fun e!63314 () Bool)

(assert (=> d!25909 e!63314))

(declare-fun res!48972 () Bool)

(assert (=> d!25909 (=> (not res!48972) (not e!63314))))

(assert (=> d!25909 (= res!48972 (contains!800 lt!47862 lt!47881))))

(assert (=> d!25909 (= (addApplyDifferent!67 lt!47862 lt!47873 (zeroValue!2342 newMap!16) lt!47881) lt!48631)))

(declare-fun b!97135 () Bool)

(assert (=> b!97135 (= e!63314 (not (= lt!47881 lt!47873)))))

(assert (= (and d!25909 res!48972) b!97135))

(declare-fun m!106187 () Bool)

(assert (=> d!25909 m!106187))

(assert (=> d!25909 m!104155))

(declare-fun m!106189 () Bool)

(assert (=> d!25909 m!106189))

(assert (=> d!25909 m!104141))

(assert (=> d!25909 m!104143))

(assert (=> d!25909 m!104141))

(assert (=> b!96069 d!25909))

(declare-fun d!25911 () Bool)

(declare-fun e!63315 () Bool)

(assert (=> d!25911 e!63315))

(declare-fun res!48973 () Bool)

(assert (=> d!25911 (=> (not res!48973) (not e!63315))))

(declare-fun lt!48634 () ListLongMap!1541)

(assert (=> d!25911 (= res!48973 (contains!800 lt!48634 (_1!1178 (tuple2!2337 lt!47874 (minValue!2342 newMap!16)))))))

(declare-fun lt!48633 () List!1603)

(assert (=> d!25911 (= lt!48634 (ListLongMap!1542 lt!48633))))

(declare-fun lt!48632 () Unit!2887)

(declare-fun lt!48635 () Unit!2887)

(assert (=> d!25911 (= lt!48632 lt!48635)))

(assert (=> d!25911 (= (getValueByKey!148 lt!48633 (_1!1178 (tuple2!2337 lt!47874 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47874 (minValue!2342 newMap!16)))))))

(assert (=> d!25911 (= lt!48635 (lemmaContainsTupThenGetReturnValue!66 lt!48633 (_1!1178 (tuple2!2337 lt!47874 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47874 (minValue!2342 newMap!16)))))))

(assert (=> d!25911 (= lt!48633 (insertStrictlySorted!68 (toList!786 lt!47880) (_1!1178 (tuple2!2337 lt!47874 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47874 (minValue!2342 newMap!16)))))))

(assert (=> d!25911 (= (+!137 lt!47880 (tuple2!2337 lt!47874 (minValue!2342 newMap!16))) lt!48634)))

(declare-fun b!97136 () Bool)

(declare-fun res!48974 () Bool)

(assert (=> b!97136 (=> (not res!48974) (not e!63315))))

(assert (=> b!97136 (= res!48974 (= (getValueByKey!148 (toList!786 lt!48634) (_1!1178 (tuple2!2337 lt!47874 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47874 (minValue!2342 newMap!16))))))))

(declare-fun b!97137 () Bool)

(assert (=> b!97137 (= e!63315 (contains!802 (toList!786 lt!48634) (tuple2!2337 lt!47874 (minValue!2342 newMap!16))))))

(assert (= (and d!25911 res!48973) b!97136))

(assert (= (and b!97136 res!48974) b!97137))

(declare-fun m!106191 () Bool)

(assert (=> d!25911 m!106191))

(declare-fun m!106193 () Bool)

(assert (=> d!25911 m!106193))

(declare-fun m!106195 () Bool)

(assert (=> d!25911 m!106195))

(declare-fun m!106197 () Bool)

(assert (=> d!25911 m!106197))

(declare-fun m!106199 () Bool)

(assert (=> b!97136 m!106199))

(declare-fun m!106201 () Bool)

(assert (=> b!97137 m!106201))

(assert (=> b!96069 d!25911))

(declare-fun d!25913 () Bool)

(assert (=> d!25913 (= (apply!91 (+!137 lt!47872 (tuple2!2337 lt!47876 (minValue!2342 newMap!16))) lt!47867) (apply!91 lt!47872 lt!47867))))

(declare-fun lt!48636 () Unit!2887)

(assert (=> d!25913 (= lt!48636 (choose!588 lt!47872 lt!47876 (minValue!2342 newMap!16) lt!47867))))

(declare-fun e!63316 () Bool)

(assert (=> d!25913 e!63316))

(declare-fun res!48975 () Bool)

(assert (=> d!25913 (=> (not res!48975) (not e!63316))))

(assert (=> d!25913 (= res!48975 (contains!800 lt!47872 lt!47867))))

(assert (=> d!25913 (= (addApplyDifferent!67 lt!47872 lt!47876 (minValue!2342 newMap!16) lt!47867) lt!48636)))

(declare-fun b!97138 () Bool)

(assert (=> b!97138 (= e!63316 (not (= lt!47867 lt!47876)))))

(assert (= (and d!25913 res!48975) b!97138))

(declare-fun m!106203 () Bool)

(assert (=> d!25913 m!106203))

(assert (=> d!25913 m!104133))

(declare-fun m!106205 () Bool)

(assert (=> d!25913 m!106205))

(assert (=> d!25913 m!104145))

(assert (=> d!25913 m!104153))

(assert (=> d!25913 m!104145))

(assert (=> b!96069 d!25913))

(declare-fun d!25915 () Bool)

(declare-fun e!63317 () Bool)

(assert (=> d!25915 e!63317))

(declare-fun res!48976 () Bool)

(assert (=> d!25915 (=> (not res!48976) (not e!63317))))

(declare-fun lt!48639 () ListLongMap!1541)

(assert (=> d!25915 (= res!48976 (contains!800 lt!48639 (_1!1178 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48638 () List!1603)

(assert (=> d!25915 (= lt!48639 (ListLongMap!1542 lt!48638))))

(declare-fun lt!48637 () Unit!2887)

(declare-fun lt!48640 () Unit!2887)

(assert (=> d!25915 (= lt!48637 lt!48640)))

(assert (=> d!25915 (= (getValueByKey!148 lt!48638 (_1!1178 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25915 (= lt!48640 (lemmaContainsTupThenGetReturnValue!66 lt!48638 (_1!1178 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25915 (= lt!48638 (insertStrictlySorted!68 (toList!786 lt!47869) (_1!1178 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25915 (= (+!137 lt!47869 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16))) lt!48639)))

(declare-fun b!97139 () Bool)

(declare-fun res!48977 () Bool)

(assert (=> b!97139 (=> (not res!48977) (not e!63317))))

(assert (=> b!97139 (= res!48977 (= (getValueByKey!148 (toList!786 lt!48639) (_1!1178 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16))))))))

(declare-fun b!97140 () Bool)

(assert (=> b!97140 (= e!63317 (contains!802 (toList!786 lt!48639) (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25915 res!48976) b!97139))

(assert (= (and b!97139 res!48977) b!97140))

(declare-fun m!106207 () Bool)

(assert (=> d!25915 m!106207))

(declare-fun m!106209 () Bool)

(assert (=> d!25915 m!106209))

(declare-fun m!106211 () Bool)

(assert (=> d!25915 m!106211))

(declare-fun m!106213 () Bool)

(assert (=> d!25915 m!106213))

(declare-fun m!106215 () Bool)

(assert (=> b!97139 m!106215))

(declare-fun m!106217 () Bool)

(assert (=> b!97140 m!106217))

(assert (=> b!96069 d!25915))

(declare-fun d!25917 () Bool)

(declare-fun e!63318 () Bool)

(assert (=> d!25917 e!63318))

(declare-fun res!48978 () Bool)

(assert (=> d!25917 (=> (not res!48978) (not e!63318))))

(declare-fun lt!48643 () ListLongMap!1541)

(assert (=> d!25917 (= res!48978 (contains!800 lt!48643 (_1!1178 (tuple2!2337 lt!47876 (minValue!2342 newMap!16)))))))

(declare-fun lt!48642 () List!1603)

(assert (=> d!25917 (= lt!48643 (ListLongMap!1542 lt!48642))))

(declare-fun lt!48641 () Unit!2887)

(declare-fun lt!48644 () Unit!2887)

(assert (=> d!25917 (= lt!48641 lt!48644)))

(assert (=> d!25917 (= (getValueByKey!148 lt!48642 (_1!1178 (tuple2!2337 lt!47876 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47876 (minValue!2342 newMap!16)))))))

(assert (=> d!25917 (= lt!48644 (lemmaContainsTupThenGetReturnValue!66 lt!48642 (_1!1178 (tuple2!2337 lt!47876 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47876 (minValue!2342 newMap!16)))))))

(assert (=> d!25917 (= lt!48642 (insertStrictlySorted!68 (toList!786 lt!47872) (_1!1178 (tuple2!2337 lt!47876 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47876 (minValue!2342 newMap!16)))))))

(assert (=> d!25917 (= (+!137 lt!47872 (tuple2!2337 lt!47876 (minValue!2342 newMap!16))) lt!48643)))

(declare-fun b!97141 () Bool)

(declare-fun res!48979 () Bool)

(assert (=> b!97141 (=> (not res!48979) (not e!63318))))

(assert (=> b!97141 (= res!48979 (= (getValueByKey!148 (toList!786 lt!48643) (_1!1178 (tuple2!2337 lt!47876 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47876 (minValue!2342 newMap!16))))))))

(declare-fun b!97142 () Bool)

(assert (=> b!97142 (= e!63318 (contains!802 (toList!786 lt!48643) (tuple2!2337 lt!47876 (minValue!2342 newMap!16))))))

(assert (= (and d!25917 res!48978) b!97141))

(assert (= (and b!97141 res!48979) b!97142))

(declare-fun m!106219 () Bool)

(assert (=> d!25917 m!106219))

(declare-fun m!106221 () Bool)

(assert (=> d!25917 m!106221))

(declare-fun m!106223 () Bool)

(assert (=> d!25917 m!106223))

(declare-fun m!106225 () Bool)

(assert (=> d!25917 m!106225))

(declare-fun m!106227 () Bool)

(assert (=> b!97141 m!106227))

(declare-fun m!106229 () Bool)

(assert (=> b!97142 m!106229))

(assert (=> b!96069 d!25917))

(declare-fun d!25919 () Bool)

(declare-fun e!63320 () Bool)

(assert (=> d!25919 e!63320))

(declare-fun res!48980 () Bool)

(assert (=> d!25919 (=> res!48980 e!63320)))

(declare-fun lt!48647 () Bool)

(assert (=> d!25919 (= res!48980 (not lt!48647))))

(declare-fun lt!48645 () Bool)

(assert (=> d!25919 (= lt!48647 lt!48645)))

(declare-fun lt!48646 () Unit!2887)

(declare-fun e!63319 () Unit!2887)

(assert (=> d!25919 (= lt!48646 e!63319)))

(declare-fun c!16465 () Bool)

(assert (=> d!25919 (= c!16465 lt!48645)))

(assert (=> d!25919 (= lt!48645 (containsKey!152 (toList!786 (+!137 lt!47869 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16)))) lt!47868))))

(assert (=> d!25919 (= (contains!800 (+!137 lt!47869 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16))) lt!47868) lt!48647)))

(declare-fun b!97143 () Bool)

(declare-fun lt!48648 () Unit!2887)

(assert (=> b!97143 (= e!63319 lt!48648)))

(assert (=> b!97143 (= lt!48648 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 (+!137 lt!47869 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16)))) lt!47868))))

(assert (=> b!97143 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47869 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16)))) lt!47868))))

(declare-fun b!97144 () Bool)

(declare-fun Unit!2946 () Unit!2887)

(assert (=> b!97144 (= e!63319 Unit!2946)))

(declare-fun b!97145 () Bool)

(assert (=> b!97145 (= e!63320 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47869 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16)))) lt!47868)))))

(assert (= (and d!25919 c!16465) b!97143))

(assert (= (and d!25919 (not c!16465)) b!97144))

(assert (= (and d!25919 (not res!48980)) b!97145))

(declare-fun m!106231 () Bool)

(assert (=> d!25919 m!106231))

(declare-fun m!106233 () Bool)

(assert (=> b!97143 m!106233))

(declare-fun m!106235 () Bool)

(assert (=> b!97143 m!106235))

(assert (=> b!97143 m!106235))

(declare-fun m!106237 () Bool)

(assert (=> b!97143 m!106237))

(assert (=> b!97145 m!106235))

(assert (=> b!97145 m!106235))

(assert (=> b!97145 m!106237))

(assert (=> b!96069 d!25919))

(declare-fun d!25921 () Bool)

(assert (=> d!25921 (= (apply!91 (+!137 lt!47880 (tuple2!2337 lt!47874 (minValue!2342 newMap!16))) lt!47866) (get!1289 (getValueByKey!148 (toList!786 (+!137 lt!47880 (tuple2!2337 lt!47874 (minValue!2342 newMap!16)))) lt!47866)))))

(declare-fun bs!4009 () Bool)

(assert (= bs!4009 d!25921))

(declare-fun m!106239 () Bool)

(assert (=> bs!4009 m!106239))

(assert (=> bs!4009 m!106239))

(declare-fun m!106241 () Bool)

(assert (=> bs!4009 m!106241))

(assert (=> b!96069 d!25921))

(declare-fun d!25923 () Bool)

(assert (=> d!25923 (= (apply!91 lt!47880 lt!47866) (get!1289 (getValueByKey!148 (toList!786 lt!47880) lt!47866)))))

(declare-fun bs!4010 () Bool)

(assert (= bs!4010 d!25923))

(declare-fun m!106243 () Bool)

(assert (=> bs!4010 m!106243))

(assert (=> bs!4010 m!106243))

(declare-fun m!106245 () Bool)

(assert (=> bs!4010 m!106245))

(assert (=> b!96069 d!25923))

(declare-fun d!25925 () Bool)

(declare-fun e!63321 () Bool)

(assert (=> d!25925 e!63321))

(declare-fun res!48981 () Bool)

(assert (=> d!25925 (=> (not res!48981) (not e!63321))))

(declare-fun lt!48651 () ListLongMap!1541)

(assert (=> d!25925 (= res!48981 (contains!800 lt!48651 (_1!1178 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48650 () List!1603)

(assert (=> d!25925 (= lt!48651 (ListLongMap!1542 lt!48650))))

(declare-fun lt!48649 () Unit!2887)

(declare-fun lt!48652 () Unit!2887)

(assert (=> d!25925 (= lt!48649 lt!48652)))

(assert (=> d!25925 (= (getValueByKey!148 lt!48650 (_1!1178 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25925 (= lt!48652 (lemmaContainsTupThenGetReturnValue!66 lt!48650 (_1!1178 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25925 (= lt!48650 (insertStrictlySorted!68 (toList!786 lt!47862) (_1!1178 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16))) (_2!1178 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25925 (= (+!137 lt!47862 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16))) lt!48651)))

(declare-fun b!97146 () Bool)

(declare-fun res!48982 () Bool)

(assert (=> b!97146 (=> (not res!48982) (not e!63321))))

(assert (=> b!97146 (= res!48982 (= (getValueByKey!148 (toList!786 lt!48651) (_1!1178 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16))))))))

(declare-fun b!97147 () Bool)

(assert (=> b!97147 (= e!63321 (contains!802 (toList!786 lt!48651) (tuple2!2337 lt!47873 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25925 res!48981) b!97146))

(assert (= (and b!97146 res!48982) b!97147))

(declare-fun m!106247 () Bool)

(assert (=> d!25925 m!106247))

(declare-fun m!106249 () Bool)

(assert (=> d!25925 m!106249))

(declare-fun m!106251 () Bool)

(assert (=> d!25925 m!106251))

(declare-fun m!106253 () Bool)

(assert (=> d!25925 m!106253))

(declare-fun m!106255 () Bool)

(assert (=> b!97146 m!106255))

(declare-fun m!106257 () Bool)

(assert (=> b!97147 m!106257))

(assert (=> b!96069 d!25925))

(declare-fun d!25927 () Bool)

(assert (=> d!25927 (= (apply!91 lt!47862 lt!47881) (get!1289 (getValueByKey!148 (toList!786 lt!47862) lt!47881)))))

(declare-fun bs!4011 () Bool)

(assert (= bs!4011 d!25927))

(declare-fun m!106259 () Bool)

(assert (=> bs!4011 m!106259))

(assert (=> bs!4011 m!106259))

(declare-fun m!106261 () Bool)

(assert (=> bs!4011 m!106261))

(assert (=> b!96069 d!25927))

(declare-fun d!25929 () Bool)

(assert (=> d!25929 (contains!800 (+!137 lt!47869 (tuple2!2337 lt!47879 (zeroValue!2342 newMap!16))) lt!47868)))

(declare-fun lt!48653 () Unit!2887)

(assert (=> d!25929 (= lt!48653 (choose!589 lt!47869 lt!47879 (zeroValue!2342 newMap!16) lt!47868))))

(assert (=> d!25929 (contains!800 lt!47869 lt!47868)))

(assert (=> d!25929 (= (addStillContains!67 lt!47869 lt!47879 (zeroValue!2342 newMap!16) lt!47868) lt!48653)))

(declare-fun bs!4012 () Bool)

(assert (= bs!4012 d!25929))

(assert (=> bs!4012 m!104139))

(assert (=> bs!4012 m!104139))

(assert (=> bs!4012 m!104149))

(declare-fun m!106263 () Bool)

(assert (=> bs!4012 m!106263))

(declare-fun m!106265 () Bool)

(assert (=> bs!4012 m!106265))

(assert (=> b!96069 d!25929))

(declare-fun d!25931 () Bool)

(assert (=> d!25931 (= (apply!91 (+!137 lt!47880 (tuple2!2337 lt!47874 (minValue!2342 newMap!16))) lt!47866) (apply!91 lt!47880 lt!47866))))

(declare-fun lt!48654 () Unit!2887)

(assert (=> d!25931 (= lt!48654 (choose!588 lt!47880 lt!47874 (minValue!2342 newMap!16) lt!47866))))

(declare-fun e!63322 () Bool)

(assert (=> d!25931 e!63322))

(declare-fun res!48983 () Bool)

(assert (=> d!25931 (=> (not res!48983) (not e!63322))))

(assert (=> d!25931 (= res!48983 (contains!800 lt!47880 lt!47866))))

(assert (=> d!25931 (= (addApplyDifferent!67 lt!47880 lt!47874 (minValue!2342 newMap!16) lt!47866) lt!48654)))

(declare-fun b!97148 () Bool)

(assert (=> b!97148 (= e!63322 (not (= lt!47866 lt!47874)))))

(assert (= (and d!25931 res!48983) b!97148))

(declare-fun m!106267 () Bool)

(assert (=> d!25931 m!106267))

(assert (=> d!25931 m!104125))

(declare-fun m!106269 () Bool)

(assert (=> d!25931 m!106269))

(assert (=> d!25931 m!104129))

(assert (=> d!25931 m!104131))

(assert (=> d!25931 m!104129))

(assert (=> b!96069 d!25931))

(declare-fun d!25933 () Bool)

(assert (=> d!25933 (= (inRange!0 (ite c!16151 (index!3190 lt!47802) (index!3193 lt!47802)) (mask!6542 newMap!16)) (and (bvsge (ite c!16151 (index!3190 lt!47802) (index!3193 lt!47802)) #b00000000000000000000000000000000) (bvslt (ite c!16151 (index!3190 lt!47802) (index!3193 lt!47802)) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9715 d!25933))

(declare-fun b!97150 () Bool)

(declare-fun e!63323 () Option!154)

(declare-fun e!63324 () Option!154)

(assert (=> b!97150 (= e!63323 e!63324)))

(declare-fun c!16467 () Bool)

(assert (=> b!97150 (= c!16467 (and ((_ is Cons!1599) (t!5529 (toList!786 lt!47607))) (not (= (_1!1178 (h!2192 (t!5529 (toList!786 lt!47607)))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))))

(declare-fun c!16466 () Bool)

(declare-fun d!25935 () Bool)

(assert (=> d!25935 (= c!16466 (and ((_ is Cons!1599) (t!5529 (toList!786 lt!47607))) (= (_1!1178 (h!2192 (t!5529 (toList!786 lt!47607)))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355))))))

(assert (=> d!25935 (= (getValueByKey!148 (t!5529 (toList!786 lt!47607)) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) e!63323)))

(declare-fun b!97151 () Bool)

(assert (=> b!97151 (= e!63324 (getValueByKey!148 (t!5529 (t!5529 (toList!786 lt!47607))) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(declare-fun b!97152 () Bool)

(assert (=> b!97152 (= e!63324 None!152)))

(declare-fun b!97149 () Bool)

(assert (=> b!97149 (= e!63323 (Some!153 (_2!1178 (h!2192 (t!5529 (toList!786 lt!47607))))))))

(assert (= (and d!25935 c!16466) b!97149))

(assert (= (and d!25935 (not c!16466)) b!97150))

(assert (= (and b!97150 c!16467) b!97151))

(assert (= (and b!97150 (not c!16467)) b!97152))

(assert (=> b!97151 m!103745))

(declare-fun m!106271 () Bool)

(assert (=> b!97151 m!106271))

(assert (=> b!96188 d!25935))

(assert (=> b!96157 d!25879))

(declare-fun d!25937 () Bool)

(assert (=> d!25937 (= (apply!91 lt!47952 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1289 (getValueByKey!148 (toList!786 lt!47952) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4013 () Bool)

(assert (= bs!4013 d!25937))

(assert (=> bs!4013 m!104621))

(assert (=> bs!4013 m!104621))

(declare-fun m!106273 () Bool)

(assert (=> bs!4013 m!106273))

(assert (=> b!96209 d!25937))

(assert (=> b!96311 d!25413))

(declare-fun d!25939 () Bool)

(declare-fun lt!48655 () Bool)

(assert (=> d!25939 (= lt!48655 (select (content!98 Nil!1599) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!63326 () Bool)

(assert (=> d!25939 (= lt!48655 e!63326)))

(declare-fun res!48984 () Bool)

(assert (=> d!25939 (=> (not res!48984) (not e!63326))))

(assert (=> d!25939 (= res!48984 ((_ is Cons!1598) Nil!1599))))

(assert (=> d!25939 (= (contains!801 Nil!1599 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) lt!48655)))

(declare-fun b!97153 () Bool)

(declare-fun e!63325 () Bool)

(assert (=> b!97153 (= e!63326 e!63325)))

(declare-fun res!48985 () Bool)

(assert (=> b!97153 (=> res!48985 e!63325)))

(assert (=> b!97153 (= res!48985 (= (h!2191 Nil!1599) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97154 () Bool)

(assert (=> b!97154 (= e!63325 (contains!801 (t!5528 Nil!1599) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!25939 res!48984) b!97153))

(assert (= (and b!97153 (not res!48985)) b!97154))

(assert (=> d!25939 m!104463))

(assert (=> d!25939 m!104003))

(declare-fun m!106275 () Bool)

(assert (=> d!25939 m!106275))

(assert (=> b!97154 m!104003))

(declare-fun m!106277 () Bool)

(assert (=> b!97154 m!106277))

(assert (=> b!96111 d!25939))

(declare-fun d!25941 () Bool)

(declare-fun e!63327 () Bool)

(assert (=> d!25941 e!63327))

(declare-fun res!48986 () Bool)

(assert (=> d!25941 (=> (not res!48986) (not e!63327))))

(declare-fun lt!48658 () ListLongMap!1541)

(assert (=> d!25941 (= res!48986 (contains!800 lt!48658 (_1!1178 (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun lt!48657 () List!1603)

(assert (=> d!25941 (= lt!48658 (ListLongMap!1542 lt!48657))))

(declare-fun lt!48656 () Unit!2887)

(declare-fun lt!48659 () Unit!2887)

(assert (=> d!25941 (= lt!48656 lt!48659)))

(assert (=> d!25941 (= (getValueByKey!148 lt!48657 (_1!1178 (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25941 (= lt!48659 (lemmaContainsTupThenGetReturnValue!66 lt!48657 (_1!1178 (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1178 (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25941 (= lt!48657 (insertStrictlySorted!68 (toList!786 (ite c!16165 call!9732 (ite c!16160 call!9727 call!9729))) (_1!1178 (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1178 (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25941 (= (+!137 (ite c!16165 call!9732 (ite c!16160 call!9727 call!9729)) (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) lt!48658)))

(declare-fun b!97155 () Bool)

(declare-fun res!48987 () Bool)

(assert (=> b!97155 (=> (not res!48987) (not e!63327))))

(assert (=> b!97155 (= res!48987 (= (getValueByKey!148 (toList!786 lt!48658) (_1!1178 (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!153 (_2!1178 (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))))

(declare-fun b!97156 () Bool)

(assert (=> b!97156 (= e!63327 (contains!802 (toList!786 lt!48658) (ite (or c!16165 c!16160) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (= (and d!25941 res!48986) b!97155))

(assert (= (and b!97155 res!48987) b!97156))

(declare-fun m!106279 () Bool)

(assert (=> d!25941 m!106279))

(declare-fun m!106281 () Bool)

(assert (=> d!25941 m!106281))

(declare-fun m!106283 () Bool)

(assert (=> d!25941 m!106283))

(declare-fun m!106285 () Bool)

(assert (=> d!25941 m!106285))

(declare-fun m!106287 () Bool)

(assert (=> b!97155 m!106287))

(declare-fun m!106289 () Bool)

(assert (=> b!97156 m!106289))

(assert (=> bm!9724 d!25941))

(declare-fun d!25943 () Bool)

(declare-fun res!48989 () Bool)

(declare-fun e!63328 () Bool)

(assert (=> d!25943 (=> (not res!48989) (not e!63328))))

(assert (=> d!25943 (= res!48989 (validMask!0 (mask!6542 (_2!1179 lt!47718))))))

(assert (=> d!25943 (= (simpleValid!66 (_2!1179 lt!47718)) e!63328)))

(declare-fun b!97157 () Bool)

(declare-fun res!48991 () Bool)

(assert (=> b!97157 (=> (not res!48991) (not e!63328))))

(assert (=> b!97157 (= res!48991 (and (= (size!2252 (_values!2440 (_2!1179 lt!47718))) (bvadd (mask!6542 (_2!1179 lt!47718)) #b00000000000000000000000000000001)) (= (size!2251 (_keys!4143 (_2!1179 lt!47718))) (size!2252 (_values!2440 (_2!1179 lt!47718)))) (bvsge (_size!469 (_2!1179 lt!47718)) #b00000000000000000000000000000000) (bvsle (_size!469 (_2!1179 lt!47718)) (bvadd (mask!6542 (_2!1179 lt!47718)) #b00000000000000000000000000000001))))))

(declare-fun b!97159 () Bool)

(declare-fun res!48988 () Bool)

(assert (=> b!97159 (=> (not res!48988) (not e!63328))))

(assert (=> b!97159 (= res!48988 (= (size!2255 (_2!1179 lt!47718)) (bvadd (_size!469 (_2!1179 lt!47718)) (bvsdiv (bvadd (extraKeys!2282 (_2!1179 lt!47718)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!97160 () Bool)

(assert (=> b!97160 (= e!63328 (and (bvsge (extraKeys!2282 (_2!1179 lt!47718)) #b00000000000000000000000000000000) (bvsle (extraKeys!2282 (_2!1179 lt!47718)) #b00000000000000000000000000000011) (bvsge (_vacant!469 (_2!1179 lt!47718)) #b00000000000000000000000000000000)))))

(declare-fun b!97158 () Bool)

(declare-fun res!48990 () Bool)

(assert (=> b!97158 (=> (not res!48990) (not e!63328))))

(assert (=> b!97158 (= res!48990 (bvsge (size!2255 (_2!1179 lt!47718)) (_size!469 (_2!1179 lt!47718))))))

(assert (= (and d!25943 res!48989) b!97157))

(assert (= (and b!97157 res!48991) b!97158))

(assert (= (and b!97158 res!48990) b!97159))

(assert (= (and b!97159 res!48988) b!97160))

(declare-fun m!106291 () Bool)

(assert (=> d!25943 m!106291))

(declare-fun m!106293 () Bool)

(assert (=> b!97159 m!106293))

(assert (=> b!97158 m!106293))

(assert (=> d!25341 d!25943))

(assert (=> d!25359 d!25351))

(assert (=> d!25359 d!25353))

(declare-fun d!25945 () Bool)

(assert (=> d!25945 (isDefined!102 (getValueByKey!148 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)))))

(assert (=> d!25945 true))

(declare-fun _$12!341 () Unit!2887)

(assert (=> d!25945 (= (choose!587 (toList!786 lt!47607) (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) from!355)) _$12!341)))

(declare-fun bs!4014 () Bool)

(assert (= bs!4014 d!25945))

(assert (=> bs!4014 m!103745))

(assert (=> bs!4014 m!103817))

(assert (=> bs!4014 m!103817))

(assert (=> bs!4014 m!103819))

(assert (=> d!25359 d!25945))

(declare-fun d!25947 () Bool)

(declare-fun res!48996 () Bool)

(declare-fun e!63333 () Bool)

(assert (=> d!25947 (=> res!48996 e!63333)))

(assert (=> d!25947 (= res!48996 (or ((_ is Nil!1600) (toList!786 lt!47607)) ((_ is Nil!1600) (t!5529 (toList!786 lt!47607)))))))

(assert (=> d!25947 (= (isStrictlySorted!298 (toList!786 lt!47607)) e!63333)))

(declare-fun b!97165 () Bool)

(declare-fun e!63334 () Bool)

(assert (=> b!97165 (= e!63333 e!63334)))

(declare-fun res!48997 () Bool)

(assert (=> b!97165 (=> (not res!48997) (not e!63334))))

(assert (=> b!97165 (= res!48997 (bvslt (_1!1178 (h!2192 (toList!786 lt!47607))) (_1!1178 (h!2192 (t!5529 (toList!786 lt!47607))))))))

(declare-fun b!97166 () Bool)

(assert (=> b!97166 (= e!63334 (isStrictlySorted!298 (t!5529 (toList!786 lt!47607))))))

(assert (= (and d!25947 (not res!48996)) b!97165))

(assert (= (and b!97165 res!48997) b!97166))

(declare-fun m!106295 () Bool)

(assert (=> b!97166 m!106295))

(assert (=> d!25359 d!25947))

(declare-fun d!25949 () Bool)

(declare-fun e!63336 () Bool)

(assert (=> d!25949 e!63336))

(declare-fun res!48998 () Bool)

(assert (=> d!25949 (=> res!48998 e!63336)))

(declare-fun lt!48662 () Bool)

(assert (=> d!25949 (= res!48998 (not lt!48662))))

(declare-fun lt!48660 () Bool)

(assert (=> d!25949 (= lt!48662 lt!48660)))

(declare-fun lt!48661 () Unit!2887)

(declare-fun e!63335 () Unit!2887)

(assert (=> d!25949 (= lt!48661 e!63335)))

(declare-fun c!16468 () Bool)

(assert (=> d!25949 (= c!16468 lt!48660)))

(assert (=> d!25949 (= lt!48660 (containsKey!152 (toList!786 lt!47842) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25949 (= (contains!800 lt!47842 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48662)))

(declare-fun b!97167 () Bool)

(declare-fun lt!48663 () Unit!2887)

(assert (=> b!97167 (= e!63335 lt!48663)))

(assert (=> b!97167 (= lt!48663 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47842) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97167 (isDefined!102 (getValueByKey!148 (toList!786 lt!47842) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97168 () Bool)

(declare-fun Unit!2947 () Unit!2887)

(assert (=> b!97168 (= e!63335 Unit!2947)))

(declare-fun b!97169 () Bool)

(assert (=> b!97169 (= e!63336 (isDefined!102 (getValueByKey!148 (toList!786 lt!47842) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25949 c!16468) b!97167))

(assert (= (and d!25949 (not c!16468)) b!97168))

(assert (= (and d!25949 (not res!48998)) b!97169))

(declare-fun m!106297 () Bool)

(assert (=> d!25949 m!106297))

(declare-fun m!106299 () Bool)

(assert (=> b!97167 m!106299))

(assert (=> b!97167 m!105643))

(assert (=> b!97167 m!105643))

(declare-fun m!106301 () Bool)

(assert (=> b!97167 m!106301))

(assert (=> b!97169 m!105643))

(assert (=> b!97169 m!105643))

(assert (=> b!97169 m!106301))

(assert (=> bm!9729 d!25949))

(declare-fun d!25951 () Bool)

(declare-fun e!63337 () Bool)

(assert (=> d!25951 e!63337))

(declare-fun res!48999 () Bool)

(assert (=> d!25951 (=> (not res!48999) (not e!63337))))

(declare-fun lt!48666 () ListLongMap!1541)

(assert (=> d!25951 (= res!48999 (contains!800 lt!48666 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun lt!48665 () List!1603)

(assert (=> d!25951 (= lt!48666 (ListLongMap!1542 lt!48665))))

(declare-fun lt!48664 () Unit!2887)

(declare-fun lt!48667 () Unit!2887)

(assert (=> d!25951 (= lt!48664 lt!48667)))

(assert (=> d!25951 (= (getValueByKey!148 lt!48665 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25951 (= lt!48667 (lemmaContainsTupThenGetReturnValue!66 lt!48665 (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25951 (= lt!48665 (insertStrictlySorted!68 (toList!786 call!9728) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25951 (= (+!137 call!9728 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) lt!48666)))

(declare-fun b!97170 () Bool)

(declare-fun res!49000 () Bool)

(assert (=> b!97170 (=> (not res!49000) (not e!63337))))

(assert (=> b!97170 (= res!49000 (= (getValueByKey!148 (toList!786 lt!48666) (_1!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!153 (_2!1178 (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun b!97171 () Bool)

(assert (=> b!97171 (= e!63337 (contains!802 (toList!786 lt!48666) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(assert (= (and d!25951 res!48999) b!97170))

(assert (= (and b!97170 res!49000) b!97171))

(declare-fun m!106303 () Bool)

(assert (=> d!25951 m!106303))

(declare-fun m!106305 () Bool)

(assert (=> d!25951 m!106305))

(declare-fun m!106307 () Bool)

(assert (=> d!25951 m!106307))

(declare-fun m!106309 () Bool)

(assert (=> d!25951 m!106309))

(declare-fun m!106311 () Bool)

(assert (=> b!97170 m!106311))

(declare-fun m!106313 () Bool)

(assert (=> b!97171 m!106313))

(assert (=> b!96030 d!25951))

(declare-fun b!97173 () Bool)

(declare-fun e!63338 () Option!154)

(declare-fun e!63339 () Option!154)

(assert (=> b!97173 (= e!63338 e!63339)))

(declare-fun c!16470 () Bool)

(assert (=> b!97173 (= c!16470 (and ((_ is Cons!1599) (toList!786 lt!47937)) (not (= (_1!1178 (h!2192 (toList!786 lt!47937))) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))))

(declare-fun c!16469 () Bool)

(declare-fun d!25953 () Bool)

(assert (=> d!25953 (= c!16469 (and ((_ is Cons!1599) (toList!786 lt!47937)) (= (_1!1178 (h!2192 (toList!786 lt!47937))) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(assert (=> d!25953 (= (getValueByKey!148 (toList!786 lt!47937) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))) e!63338)))

(declare-fun b!97174 () Bool)

(assert (=> b!97174 (= e!63339 (getValueByKey!148 (t!5529 (toList!786 lt!47937)) (_1!1178 (ite (or c!16145 c!16140) (tuple2!2337 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))) (tuple2!2337 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!97175 () Bool)

(assert (=> b!97175 (= e!63339 None!152)))

(declare-fun b!97172 () Bool)

(assert (=> b!97172 (= e!63338 (Some!153 (_2!1178 (h!2192 (toList!786 lt!47937)))))))

(assert (= (and d!25953 c!16469) b!97172))

(assert (= (and d!25953 (not c!16469)) b!97173))

(assert (= (and b!97173 c!16470) b!97174))

(assert (= (and b!97173 (not c!16470)) b!97175))

(declare-fun m!106315 () Bool)

(assert (=> b!97174 m!106315))

(assert (=> b!96173 d!25953))

(declare-fun d!25955 () Bool)

(declare-fun e!63341 () Bool)

(assert (=> d!25955 e!63341))

(declare-fun res!49001 () Bool)

(assert (=> d!25955 (=> res!49001 e!63341)))

(declare-fun lt!48670 () Bool)

(assert (=> d!25955 (= res!49001 (not lt!48670))))

(declare-fun lt!48668 () Bool)

(assert (=> d!25955 (= lt!48670 lt!48668)))

(declare-fun lt!48669 () Unit!2887)

(declare-fun e!63340 () Unit!2887)

(assert (=> d!25955 (= lt!48669 e!63340)))

(declare-fun c!16471 () Bool)

(assert (=> d!25955 (= c!16471 lt!48668)))

(assert (=> d!25955 (= lt!48668 (containsKey!152 (toList!786 lt!48001) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> d!25955 (= (contains!800 lt!48001 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48670)))

(declare-fun b!97176 () Bool)

(declare-fun lt!48671 () Unit!2887)

(assert (=> b!97176 (= e!63340 lt!48671)))

(assert (=> b!97176 (= lt!48671 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!48001) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(assert (=> b!97176 (isDefined!102 (getValueByKey!148 (toList!786 lt!48001) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!97177 () Bool)

(declare-fun Unit!2948 () Unit!2887)

(assert (=> b!97177 (= e!63340 Unit!2948)))

(declare-fun b!97178 () Bool)

(assert (=> b!97178 (= e!63341 (isDefined!102 (getValueByKey!148 (toList!786 lt!48001) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (= (and d!25955 c!16471) b!97176))

(assert (= (and d!25955 (not c!16471)) b!97177))

(assert (= (and d!25955 (not res!49001)) b!97178))

(declare-fun m!106317 () Bool)

(assert (=> d!25955 m!106317))

(declare-fun m!106319 () Bool)

(assert (=> b!97176 m!106319))

(assert (=> b!97176 m!104435))

(assert (=> b!97176 m!104435))

(declare-fun m!106321 () Bool)

(assert (=> b!97176 m!106321))

(assert (=> b!97178 m!104435))

(assert (=> b!97178 m!104435))

(assert (=> b!97178 m!106321))

(assert (=> d!25391 d!25955))

(declare-fun b!97180 () Bool)

(declare-fun e!63342 () Option!154)

(declare-fun e!63343 () Option!154)

(assert (=> b!97180 (= e!63342 e!63343)))

(declare-fun c!16473 () Bool)

(assert (=> b!97180 (= c!16473 (and ((_ is Cons!1599) lt!48000) (not (= (_1!1178 (h!2192 lt!48000)) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun d!25957 () Bool)

(declare-fun c!16472 () Bool)

(assert (=> d!25957 (= c!16472 (and ((_ is Cons!1599) lt!48000) (= (_1!1178 (h!2192 lt!48000)) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25957 (= (getValueByKey!148 lt!48000 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) e!63342)))

(declare-fun b!97181 () Bool)

(assert (=> b!97181 (= e!63343 (getValueByKey!148 (t!5529 lt!48000) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!97182 () Bool)

(assert (=> b!97182 (= e!63343 None!152)))

(declare-fun b!97179 () Bool)

(assert (=> b!97179 (= e!63342 (Some!153 (_2!1178 (h!2192 lt!48000))))))

(assert (= (and d!25957 c!16472) b!97179))

(assert (= (and d!25957 (not c!16472)) b!97180))

(assert (= (and b!97180 c!16473) b!97181))

(assert (= (and b!97180 (not c!16473)) b!97182))

(declare-fun m!106323 () Bool)

(assert (=> b!97181 m!106323))

(assert (=> d!25391 d!25957))

(declare-fun d!25959 () Bool)

(assert (=> d!25959 (= (getValueByKey!148 lt!48000 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) (Some!153 (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun lt!48672 () Unit!2887)

(assert (=> d!25959 (= lt!48672 (choose!591 lt!48000 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun e!63344 () Bool)

(assert (=> d!25959 e!63344))

(declare-fun res!49002 () Bool)

(assert (=> d!25959 (=> (not res!49002) (not e!63344))))

(assert (=> d!25959 (= res!49002 (isStrictlySorted!298 lt!48000))))

(assert (=> d!25959 (= (lemmaContainsTupThenGetReturnValue!66 lt!48000 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48672)))

(declare-fun b!97183 () Bool)

(declare-fun res!49003 () Bool)

(assert (=> b!97183 (=> (not res!49003) (not e!63344))))

(assert (=> b!97183 (= res!49003 (containsKey!152 lt!48000 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!97184 () Bool)

(assert (=> b!97184 (= e!63344 (contains!802 lt!48000 (tuple2!2337 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (= (and d!25959 res!49002) b!97183))

(assert (= (and b!97183 res!49003) b!97184))

(assert (=> d!25959 m!104429))

(declare-fun m!106325 () Bool)

(assert (=> d!25959 m!106325))

(declare-fun m!106327 () Bool)

(assert (=> d!25959 m!106327))

(declare-fun m!106329 () Bool)

(assert (=> b!97183 m!106329))

(declare-fun m!106331 () Bool)

(assert (=> b!97184 m!106331))

(assert (=> d!25391 d!25959))

(declare-fun e!63348 () List!1603)

(declare-fun b!97185 () Bool)

(assert (=> b!97185 (= e!63348 (insertStrictlySorted!68 (t!5529 (toList!786 lt!47782)) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun b!97187 () Bool)

(declare-fun e!63345 () List!1603)

(declare-fun call!9871 () List!1603)

(assert (=> b!97187 (= e!63345 call!9871)))

(declare-fun b!97188 () Bool)

(declare-fun e!63349 () List!1603)

(declare-fun call!9870 () List!1603)

(assert (=> b!97188 (= e!63349 call!9870)))

(declare-fun b!97189 () Bool)

(declare-fun e!63347 () List!1603)

(declare-fun call!9872 () List!1603)

(assert (=> b!97189 (= e!63347 call!9872)))

(declare-fun bm!9867 () Bool)

(assert (=> bm!9867 (= call!9872 call!9871)))

(declare-fun lt!48673 () List!1603)

(declare-fun b!97190 () Bool)

(declare-fun e!63346 () Bool)

(assert (=> b!97190 (= e!63346 (contains!802 lt!48673 (tuple2!2337 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun bm!9868 () Bool)

(assert (=> bm!9868 (= call!9870 call!9872)))

(declare-fun c!16475 () Bool)

(declare-fun c!16477 () Bool)

(declare-fun b!97191 () Bool)

(assert (=> b!97191 (= e!63348 (ite c!16475 (t!5529 (toList!786 lt!47782)) (ite c!16477 (Cons!1599 (h!2192 (toList!786 lt!47782)) (t!5529 (toList!786 lt!47782))) Nil!1600)))))

(declare-fun b!97186 () Bool)

(declare-fun res!49004 () Bool)

(assert (=> b!97186 (=> (not res!49004) (not e!63346))))

(assert (=> b!97186 (= res!49004 (containsKey!152 lt!48673 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))

(declare-fun d!25961 () Bool)

(assert (=> d!25961 e!63346))

(declare-fun res!49005 () Bool)

(assert (=> d!25961 (=> (not res!49005) (not e!63346))))

(assert (=> d!25961 (= res!49005 (isStrictlySorted!298 lt!48673))))

(assert (=> d!25961 (= lt!48673 e!63345)))

(declare-fun c!16474 () Bool)

(assert (=> d!25961 (= c!16474 (and ((_ is Cons!1599) (toList!786 lt!47782)) (bvslt (_1!1178 (h!2192 (toList!786 lt!47782))) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> d!25961 (isStrictlySorted!298 (toList!786 lt!47782))))

(assert (=> d!25961 (= (insertStrictlySorted!68 (toList!786 lt!47782) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))) lt!48673)))

(declare-fun b!97192 () Bool)

(assert (=> b!97192 (= c!16477 (and ((_ is Cons!1599) (toList!786 lt!47782)) (bvsgt (_1!1178 (h!2192 (toList!786 lt!47782))) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(assert (=> b!97192 (= e!63347 e!63349)))

(declare-fun bm!9869 () Bool)

(assert (=> bm!9869 (= call!9871 ($colon$colon!76 e!63348 (ite c!16474 (h!2192 (toList!786 lt!47782)) (tuple2!2337 (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))) (_2!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992)))))))))))

(declare-fun c!16476 () Bool)

(assert (=> bm!9869 (= c!16476 c!16474)))

(declare-fun b!97193 () Bool)

(assert (=> b!97193 (= e!63345 e!63347)))

(assert (=> b!97193 (= c!16475 (and ((_ is Cons!1599) (toList!786 lt!47782)) (= (_1!1178 (h!2192 (toList!786 lt!47782))) (_1!1178 (tuple2!2337 lt!47792 (zeroValue!2342 (v!2779 (underlying!333 thiss!992))))))))))

(declare-fun b!97194 () Bool)

(assert (=> b!97194 (= e!63349 call!9870)))

(assert (= (and d!25961 c!16474) b!97187))

(assert (= (and d!25961 (not c!16474)) b!97193))

(assert (= (and b!97193 c!16475) b!97189))

(assert (= (and b!97193 (not c!16475)) b!97192))

(assert (= (and b!97192 c!16477) b!97188))

(assert (= (and b!97192 (not c!16477)) b!97194))

(assert (= (or b!97188 b!97194) bm!9868))

(assert (= (or b!97189 bm!9868) bm!9867))

(assert (= (or b!97187 bm!9867) bm!9869))

(assert (= (and bm!9869 c!16476) b!97185))

(assert (= (and bm!9869 (not c!16476)) b!97191))

(assert (= (and d!25961 res!49005) b!97186))

(assert (= (and b!97186 res!49004) b!97190))

(declare-fun m!106333 () Bool)

(assert (=> b!97185 m!106333))

(declare-fun m!106335 () Bool)

(assert (=> d!25961 m!106335))

(declare-fun m!106337 () Bool)

(assert (=> d!25961 m!106337))

(declare-fun m!106339 () Bool)

(assert (=> b!97190 m!106339))

(declare-fun m!106341 () Bool)

(assert (=> b!97186 m!106341))

(declare-fun m!106343 () Bool)

(assert (=> bm!9869 m!106343))

(assert (=> d!25391 d!25961))

(declare-fun d!25963 () Bool)

(assert (=> d!25963 (= (get!1289 (getValueByKey!148 (toList!786 lt!47775) lt!47794)) (v!2783 (getValueByKey!148 (toList!786 lt!47775) lt!47794)))))

(assert (=> d!25399 d!25963))

(declare-fun b!97196 () Bool)

(declare-fun e!63350 () Option!154)

(declare-fun e!63351 () Option!154)

(assert (=> b!97196 (= e!63350 e!63351)))

(declare-fun c!16479 () Bool)

(assert (=> b!97196 (= c!16479 (and ((_ is Cons!1599) (toList!786 lt!47775)) (not (= (_1!1178 (h!2192 (toList!786 lt!47775))) lt!47794))))))

(declare-fun d!25965 () Bool)

(declare-fun c!16478 () Bool)

(assert (=> d!25965 (= c!16478 (and ((_ is Cons!1599) (toList!786 lt!47775)) (= (_1!1178 (h!2192 (toList!786 lt!47775))) lt!47794)))))

(assert (=> d!25965 (= (getValueByKey!148 (toList!786 lt!47775) lt!47794) e!63350)))

(declare-fun b!97197 () Bool)

(assert (=> b!97197 (= e!63351 (getValueByKey!148 (t!5529 (toList!786 lt!47775)) lt!47794))))

(declare-fun b!97198 () Bool)

(assert (=> b!97198 (= e!63351 None!152)))

(declare-fun b!97195 () Bool)

(assert (=> b!97195 (= e!63350 (Some!153 (_2!1178 (h!2192 (toList!786 lt!47775)))))))

(assert (= (and d!25965 c!16478) b!97195))

(assert (= (and d!25965 (not c!16478)) b!97196))

(assert (= (and b!97196 c!16479) b!97197))

(assert (= (and b!97196 (not c!16479)) b!97198))

(declare-fun m!106345 () Bool)

(assert (=> b!97197 m!106345))

(assert (=> d!25399 d!25965))

(assert (=> d!25355 d!25451))

(assert (=> d!25405 d!25451))

(declare-fun d!25967 () Bool)

(declare-fun e!63353 () Bool)

(assert (=> d!25967 e!63353))

(declare-fun res!49006 () Bool)

(assert (=> d!25967 (=> res!49006 e!63353)))

(declare-fun lt!48676 () Bool)

(assert (=> d!25967 (= res!49006 (not lt!48676))))

(declare-fun lt!48674 () Bool)

(assert (=> d!25967 (= lt!48676 lt!48674)))

(declare-fun lt!48675 () Unit!2887)

(declare-fun e!63352 () Unit!2887)

(assert (=> d!25967 (= lt!48675 e!63352)))

(declare-fun c!16480 () Bool)

(assert (=> d!25967 (= c!16480 lt!48674)))

(assert (=> d!25967 (= lt!48674 (containsKey!152 (toList!786 lt!47952) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!25967 (= (contains!800 lt!47952 (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) lt!48676)))

(declare-fun b!97199 () Bool)

(declare-fun lt!48677 () Unit!2887)

(assert (=> b!97199 (= e!63352 lt!48677)))

(assert (=> b!97199 (= lt!48677 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47952) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97199 (isDefined!102 (getValueByKey!148 (toList!786 lt!47952) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97200 () Bool)

(declare-fun Unit!2949 () Unit!2887)

(assert (=> b!97200 (= e!63352 Unit!2949)))

(declare-fun b!97201 () Bool)

(assert (=> b!97201 (= e!63353 (isDefined!102 (getValueByKey!148 (toList!786 lt!47952) (select (arr!2002 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!25967 c!16480) b!97199))

(assert (= (and d!25967 (not c!16480)) b!97200))

(assert (= (and d!25967 (not res!49006)) b!97201))

(assert (=> d!25967 m!104003))

(declare-fun m!106347 () Bool)

(assert (=> d!25967 m!106347))

(assert (=> b!97199 m!104003))

(declare-fun m!106349 () Bool)

(assert (=> b!97199 m!106349))

(assert (=> b!97199 m!104003))

(assert (=> b!97199 m!105259))

(assert (=> b!97199 m!105259))

(declare-fun m!106351 () Bool)

(assert (=> b!97199 m!106351))

(assert (=> b!97201 m!104003))

(assert (=> b!97201 m!105259))

(assert (=> b!97201 m!105259))

(assert (=> b!97201 m!106351))

(assert (=> b!96197 d!25967))

(declare-fun d!25969 () Bool)

(declare-fun e!63354 () Bool)

(assert (=> d!25969 e!63354))

(declare-fun res!49007 () Bool)

(assert (=> d!25969 (=> (not res!49007) (not e!63354))))

(declare-fun lt!48680 () ListLongMap!1541)

(assert (=> d!25969 (= res!49007 (contains!800 lt!48680 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48679 () List!1603)

(assert (=> d!25969 (= lt!48680 (ListLongMap!1542 lt!48679))))

(declare-fun lt!48678 () Unit!2887)

(declare-fun lt!48681 () Unit!2887)

(assert (=> d!25969 (= lt!48678 lt!48681)))

(assert (=> d!25969 (= (getValueByKey!148 lt!48679 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25969 (= lt!48681 (lemmaContainsTupThenGetReturnValue!66 lt!48679 (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25969 (= lt!48679 (insertStrictlySorted!68 (toList!786 call!9747) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25969 (= (+!137 call!9747 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48680)))

(declare-fun b!97202 () Bool)

(declare-fun res!49008 () Bool)

(assert (=> b!97202 (=> (not res!49008) (not e!63354))))

(assert (=> b!97202 (= res!49008 (= (getValueByKey!148 (toList!786 lt!48680) (_1!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!153 (_2!1178 (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!97203 () Bool)

(assert (=> b!97203 (= e!63354 (contains!802 (toList!786 lt!48680) (tuple2!2337 (select (arr!2002 (_keys!4143 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1286 (select (arr!2003 (_values!2440 (v!2779 (underlying!333 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!375 (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25969 res!49007) b!97202))

(assert (= (and b!97202 res!49008) b!97203))

(declare-fun m!106353 () Bool)

(assert (=> d!25969 m!106353))

(declare-fun m!106355 () Bool)

(assert (=> d!25969 m!106355))

(declare-fun m!106357 () Bool)

(assert (=> d!25969 m!106357))

(declare-fun m!106359 () Bool)

(assert (=> d!25969 m!106359))

(declare-fun m!106361 () Bool)

(assert (=> b!97202 m!106361))

(declare-fun m!106363 () Bool)

(assert (=> b!97203 m!106363))

(assert (=> b!96161 d!25969))

(assert (=> b!96161 d!25325))

(declare-fun d!25971 () Bool)

(assert (=> d!25971 (not (contains!800 (+!137 lt!47932 (tuple2!2337 lt!47934 lt!47933)) lt!47928))))

(declare-fun lt!48684 () Unit!2887)

(declare-fun choose!594 (ListLongMap!1541 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2887)

(assert (=> d!25971 (= lt!48684 (choose!594 lt!47932 lt!47934 lt!47933 lt!47928))))

(declare-fun e!63357 () Bool)

(assert (=> d!25971 e!63357))

(declare-fun res!49011 () Bool)

(assert (=> d!25971 (=> (not res!49011) (not e!63357))))

(assert (=> d!25971 (= res!49011 (not (contains!800 lt!47932 lt!47928)))))

(assert (=> d!25971 (= (addStillNotContains!41 lt!47932 lt!47934 lt!47933 lt!47928) lt!48684)))

(declare-fun b!97207 () Bool)

(assert (=> b!97207 (= e!63357 (not (= lt!47934 lt!47928)))))

(assert (= (and d!25971 res!49011) b!97207))

(assert (=> d!25971 m!104251))

(assert (=> d!25971 m!104251))

(assert (=> d!25971 m!104253))

(declare-fun m!106365 () Bool)

(assert (=> d!25971 m!106365))

(declare-fun m!106367 () Bool)

(assert (=> d!25971 m!106367))

(assert (=> b!96161 d!25971))

(declare-fun d!25973 () Bool)

(declare-fun e!63359 () Bool)

(assert (=> d!25973 e!63359))

(declare-fun res!49012 () Bool)

(assert (=> d!25973 (=> res!49012 e!63359)))

(declare-fun lt!48687 () Bool)

(assert (=> d!25973 (= res!49012 (not lt!48687))))

(declare-fun lt!48685 () Bool)

(assert (=> d!25973 (= lt!48687 lt!48685)))

(declare-fun lt!48686 () Unit!2887)

(declare-fun e!63358 () Unit!2887)

(assert (=> d!25973 (= lt!48686 e!63358)))

(declare-fun c!16481 () Bool)

(assert (=> d!25973 (= c!16481 lt!48685)))

(assert (=> d!25973 (= lt!48685 (containsKey!152 (toList!786 (+!137 lt!47932 (tuple2!2337 lt!47934 lt!47933))) lt!47928))))

(assert (=> d!25973 (= (contains!800 (+!137 lt!47932 (tuple2!2337 lt!47934 lt!47933)) lt!47928) lt!48687)))

(declare-fun b!97208 () Bool)

(declare-fun lt!48688 () Unit!2887)

(assert (=> b!97208 (= e!63358 lt!48688)))

(assert (=> b!97208 (= lt!48688 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 (+!137 lt!47932 (tuple2!2337 lt!47934 lt!47933))) lt!47928))))

(assert (=> b!97208 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47932 (tuple2!2337 lt!47934 lt!47933))) lt!47928))))

(declare-fun b!97209 () Bool)

(declare-fun Unit!2950 () Unit!2887)

(assert (=> b!97209 (= e!63358 Unit!2950)))

(declare-fun b!97210 () Bool)

(assert (=> b!97210 (= e!63359 (isDefined!102 (getValueByKey!148 (toList!786 (+!137 lt!47932 (tuple2!2337 lt!47934 lt!47933))) lt!47928)))))

(assert (= (and d!25973 c!16481) b!97208))

(assert (= (and d!25973 (not c!16481)) b!97209))

(assert (= (and d!25973 (not res!49012)) b!97210))

(declare-fun m!106369 () Bool)

(assert (=> d!25973 m!106369))

(declare-fun m!106371 () Bool)

(assert (=> b!97208 m!106371))

(declare-fun m!106373 () Bool)

(assert (=> b!97208 m!106373))

(assert (=> b!97208 m!106373))

(declare-fun m!106375 () Bool)

(assert (=> b!97208 m!106375))

(assert (=> b!97210 m!106373))

(assert (=> b!97210 m!106373))

(assert (=> b!97210 m!106375))

(assert (=> b!96161 d!25973))

(declare-fun d!25975 () Bool)

(declare-fun e!63360 () Bool)

(assert (=> d!25975 e!63360))

(declare-fun res!49013 () Bool)

(assert (=> d!25975 (=> (not res!49013) (not e!63360))))

(declare-fun lt!48691 () ListLongMap!1541)

(assert (=> d!25975 (= res!49013 (contains!800 lt!48691 (_1!1178 (tuple2!2337 lt!47934 lt!47933))))))

(declare-fun lt!48690 () List!1603)

(assert (=> d!25975 (= lt!48691 (ListLongMap!1542 lt!48690))))

(declare-fun lt!48689 () Unit!2887)

(declare-fun lt!48692 () Unit!2887)

(assert (=> d!25975 (= lt!48689 lt!48692)))

(assert (=> d!25975 (= (getValueByKey!148 lt!48690 (_1!1178 (tuple2!2337 lt!47934 lt!47933))) (Some!153 (_2!1178 (tuple2!2337 lt!47934 lt!47933))))))

(assert (=> d!25975 (= lt!48692 (lemmaContainsTupThenGetReturnValue!66 lt!48690 (_1!1178 (tuple2!2337 lt!47934 lt!47933)) (_2!1178 (tuple2!2337 lt!47934 lt!47933))))))

(assert (=> d!25975 (= lt!48690 (insertStrictlySorted!68 (toList!786 lt!47932) (_1!1178 (tuple2!2337 lt!47934 lt!47933)) (_2!1178 (tuple2!2337 lt!47934 lt!47933))))))

(assert (=> d!25975 (= (+!137 lt!47932 (tuple2!2337 lt!47934 lt!47933)) lt!48691)))

(declare-fun b!97211 () Bool)

(declare-fun res!49014 () Bool)

(assert (=> b!97211 (=> (not res!49014) (not e!63360))))

(assert (=> b!97211 (= res!49014 (= (getValueByKey!148 (toList!786 lt!48691) (_1!1178 (tuple2!2337 lt!47934 lt!47933))) (Some!153 (_2!1178 (tuple2!2337 lt!47934 lt!47933)))))))

(declare-fun b!97212 () Bool)

(assert (=> b!97212 (= e!63360 (contains!802 (toList!786 lt!48691) (tuple2!2337 lt!47934 lt!47933)))))

(assert (= (and d!25975 res!49013) b!97211))

(assert (= (and b!97211 res!49014) b!97212))

(declare-fun m!106377 () Bool)

(assert (=> d!25975 m!106377))

(declare-fun m!106379 () Bool)

(assert (=> d!25975 m!106379))

(declare-fun m!106381 () Bool)

(assert (=> d!25975 m!106381))

(declare-fun m!106383 () Bool)

(assert (=> d!25975 m!106383))

(declare-fun m!106385 () Bool)

(assert (=> b!97211 m!106385))

(declare-fun m!106387 () Bool)

(assert (=> b!97212 m!106387))

(assert (=> b!96161 d!25975))

(declare-fun d!25977 () Bool)

(declare-fun lt!48693 () Bool)

(assert (=> d!25977 (= lt!48693 (select (content!99 (toList!786 lt!47985)) (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun e!63361 () Bool)

(assert (=> d!25977 (= lt!48693 e!63361)))

(declare-fun res!49016 () Bool)

(assert (=> d!25977 (=> (not res!49016) (not e!63361))))

(assert (=> d!25977 (= res!49016 ((_ is Cons!1599) (toList!786 lt!47985)))))

(assert (=> d!25977 (= (contains!802 (toList!786 lt!47985) (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!48693)))

(declare-fun b!97213 () Bool)

(declare-fun e!63362 () Bool)

(assert (=> b!97213 (= e!63361 e!63362)))

(declare-fun res!49015 () Bool)

(assert (=> b!97213 (=> res!49015 e!63362)))

(assert (=> b!97213 (= res!49015 (= (h!2192 (toList!786 lt!47985)) (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(declare-fun b!97214 () Bool)

(assert (=> b!97214 (= e!63362 (contains!802 (t!5529 (toList!786 lt!47985)) (tuple2!2337 lt!47787 (minValue!2342 (v!2779 (underlying!333 thiss!992))))))))

(assert (= (and d!25977 res!49016) b!97213))

(assert (= (and b!97213 (not res!49015)) b!97214))

(declare-fun m!106389 () Bool)

(assert (=> d!25977 m!106389))

(declare-fun m!106391 () Bool)

(assert (=> d!25977 m!106391))

(declare-fun m!106393 () Bool)

(assert (=> b!97214 m!106393))

(assert (=> b!96239 d!25977))

(assert (=> b!96060 d!25435))

(declare-fun b!97215 () Bool)

(declare-fun e!63363 () Bool)

(declare-fun call!9873 () Bool)

(assert (=> b!97215 (= e!63363 call!9873)))

(declare-fun bm!9870 () Bool)

(assert (=> bm!9870 (= call!9873 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!97216 () Bool)

(declare-fun e!63364 () Bool)

(declare-fun e!63365 () Bool)

(assert (=> b!97216 (= e!63364 e!63365)))

(declare-fun c!16482 () Bool)

(assert (=> b!97216 (= c!16482 (validKeyInArray!0 (select (arr!2002 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!97218 () Bool)

(assert (=> b!97218 (= e!63365 call!9873)))

(declare-fun b!97217 () Bool)

(assert (=> b!97217 (= e!63365 e!63363)))

(declare-fun lt!48694 () (_ BitVec 64))

(assert (=> b!97217 (= lt!48694 (select (arr!2002 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!48695 () Unit!2887)

(assert (=> b!97217 (= lt!48695 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4143 newMap!16) lt!48694 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!97217 (arrayContainsKey!0 (_keys!4143 newMap!16) lt!48694 #b00000000000000000000000000000000)))

(declare-fun lt!48696 () Unit!2887)

(assert (=> b!97217 (= lt!48696 lt!48695)))

(declare-fun res!49018 () Bool)

(assert (=> b!97217 (= res!49018 (= (seekEntryOrOpen!0 (select (arr!2002 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4143 newMap!16) (mask!6542 newMap!16)) (Found!262 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!97217 (=> (not res!49018) (not e!63363))))

(declare-fun d!25979 () Bool)

(declare-fun res!49017 () Bool)

(assert (=> d!25979 (=> res!49017 e!63364)))

(assert (=> d!25979 (= res!49017 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2251 (_keys!4143 newMap!16))))))

(assert (=> d!25979 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4143 newMap!16) (mask!6542 newMap!16)) e!63364)))

(assert (= (and d!25979 (not res!49017)) b!97216))

(assert (= (and b!97216 c!16482) b!97217))

(assert (= (and b!97216 (not c!16482)) b!97218))

(assert (= (and b!97217 res!49018) b!97215))

(assert (= (or b!97215 b!97218) bm!9870))

(declare-fun m!106395 () Bool)

(assert (=> bm!9870 m!106395))

(assert (=> b!97216 m!105937))

(assert (=> b!97216 m!105937))

(assert (=> b!97216 m!105997))

(assert (=> b!97217 m!105937))

(declare-fun m!106397 () Bool)

(assert (=> b!97217 m!106397))

(declare-fun m!106399 () Bool)

(assert (=> b!97217 m!106399))

(assert (=> b!97217 m!105937))

(declare-fun m!106401 () Bool)

(assert (=> b!97217 m!106401))

(assert (=> bm!9754 d!25979))

(assert (=> bm!9721 d!25573))

(assert (=> d!25387 d!25371))

(assert (=> d!25387 d!25385))

(declare-fun d!25981 () Bool)

(assert (=> d!25981 (= (apply!91 (+!137 lt!47785 (tuple2!2337 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))))) lt!47780) (apply!91 lt!47785 lt!47780))))

(assert (=> d!25981 true))

(declare-fun _$34!860 () Unit!2887)

(assert (=> d!25981 (= (choose!588 lt!47785 lt!47789 (minValue!2342 (v!2779 (underlying!333 thiss!992))) lt!47780) _$34!860)))

(declare-fun bs!4015 () Bool)

(assert (= bs!4015 d!25981))

(assert (=> bs!4015 m!103923))

(assert (=> bs!4015 m!103923))

(assert (=> bs!4015 m!103931))

(assert (=> bs!4015 m!103911))

(assert (=> d!25387 d!25981))

(assert (=> d!25387 d!25395))

(declare-fun d!25983 () Bool)

(declare-fun e!63367 () Bool)

(assert (=> d!25983 e!63367))

(declare-fun res!49019 () Bool)

(assert (=> d!25983 (=> res!49019 e!63367)))

(declare-fun lt!48699 () Bool)

(assert (=> d!25983 (= res!49019 (not lt!48699))))

(declare-fun lt!48697 () Bool)

(assert (=> d!25983 (= lt!48699 lt!48697)))

(declare-fun lt!48698 () Unit!2887)

(declare-fun e!63366 () Unit!2887)

(assert (=> d!25983 (= lt!48698 e!63366)))

(declare-fun c!16483 () Bool)

(assert (=> d!25983 (= c!16483 lt!48697)))

(assert (=> d!25983 (= lt!48697 (containsKey!152 (toList!786 lt!47785) lt!47780))))

(assert (=> d!25983 (= (contains!800 lt!47785 lt!47780) lt!48699)))

(declare-fun b!97219 () Bool)

(declare-fun lt!48700 () Unit!2887)

(assert (=> b!97219 (= e!63366 lt!48700)))

(assert (=> b!97219 (= lt!48700 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!786 lt!47785) lt!47780))))

(assert (=> b!97219 (isDefined!102 (getValueByKey!148 (toList!786 lt!47785) lt!47780))))

(declare-fun b!97220 () Bool)

(declare-fun Unit!2951 () Unit!2887)

(assert (=> b!97220 (= e!63366 Unit!2951)))

(declare-fun b!97221 () Bool)

(assert (=> b!97221 (= e!63367 (isDefined!102 (getValueByKey!148 (toList!786 lt!47785) lt!47780)))))

(assert (= (and d!25983 c!16483) b!97219))

(assert (= (and d!25983 (not c!16483)) b!97220))

(assert (= (and d!25983 (not res!49019)) b!97221))

(declare-fun m!106403 () Bool)

(assert (=> d!25983 m!106403))

(declare-fun m!106405 () Bool)

(assert (=> b!97219 m!106405))

(assert (=> b!97219 m!104367))

(assert (=> b!97219 m!104367))

(declare-fun m!106407 () Bool)

(assert (=> b!97219 m!106407))

(assert (=> b!97221 m!104367))

(assert (=> b!97221 m!104367))

(assert (=> b!97221 m!106407))

(assert (=> d!25387 d!25983))

(declare-fun condMapEmpty!3715 () Bool)

(declare-fun mapDefault!3715 () ValueCell!966)

(assert (=> mapNonEmpty!3713 (= condMapEmpty!3715 (= mapRest!3713 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3715)))))

(declare-fun e!63369 () Bool)

(declare-fun mapRes!3715 () Bool)

(assert (=> mapNonEmpty!3713 (= tp!9509 (and e!63369 mapRes!3715))))

(declare-fun mapNonEmpty!3715 () Bool)

(declare-fun tp!9511 () Bool)

(declare-fun e!63368 () Bool)

(assert (=> mapNonEmpty!3715 (= mapRes!3715 (and tp!9511 e!63368))))

(declare-fun mapValue!3715 () ValueCell!966)

(declare-fun mapKey!3715 () (_ BitVec 32))

(declare-fun mapRest!3715 () (Array (_ BitVec 32) ValueCell!966))

(assert (=> mapNonEmpty!3715 (= mapRest!3713 (store mapRest!3715 mapKey!3715 mapValue!3715))))

(declare-fun b!97222 () Bool)

(assert (=> b!97222 (= e!63368 tp_is_empty!2619)))

(declare-fun b!97223 () Bool)

(assert (=> b!97223 (= e!63369 tp_is_empty!2619)))

(declare-fun mapIsEmpty!3715 () Bool)

(assert (=> mapIsEmpty!3715 mapRes!3715))

(assert (= (and mapNonEmpty!3713 condMapEmpty!3715) mapIsEmpty!3715))

(assert (= (and mapNonEmpty!3713 (not condMapEmpty!3715)) mapNonEmpty!3715))

(assert (= (and mapNonEmpty!3715 ((_ is ValueCellFull!966) mapValue!3715)) b!97222))

(assert (= (and mapNonEmpty!3713 ((_ is ValueCellFull!966) mapDefault!3715)) b!97223))

(declare-fun m!106409 () Bool)

(assert (=> mapNonEmpty!3715 m!106409))

(declare-fun condMapEmpty!3716 () Bool)

(declare-fun mapDefault!3716 () ValueCell!966)

(assert (=> mapNonEmpty!3714 (= condMapEmpty!3716 (= mapRest!3714 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3716)))))

(declare-fun e!63371 () Bool)

(declare-fun mapRes!3716 () Bool)

(assert (=> mapNonEmpty!3714 (= tp!9510 (and e!63371 mapRes!3716))))

(declare-fun mapNonEmpty!3716 () Bool)

(declare-fun tp!9512 () Bool)

(declare-fun e!63370 () Bool)

(assert (=> mapNonEmpty!3716 (= mapRes!3716 (and tp!9512 e!63370))))

(declare-fun mapRest!3716 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapValue!3716 () ValueCell!966)

(declare-fun mapKey!3716 () (_ BitVec 32))

(assert (=> mapNonEmpty!3716 (= mapRest!3714 (store mapRest!3716 mapKey!3716 mapValue!3716))))

(declare-fun b!97224 () Bool)

(assert (=> b!97224 (= e!63370 tp_is_empty!2619)))

(declare-fun b!97225 () Bool)

(assert (=> b!97225 (= e!63371 tp_is_empty!2619)))

(declare-fun mapIsEmpty!3716 () Bool)

(assert (=> mapIsEmpty!3716 mapRes!3716))

(assert (= (and mapNonEmpty!3714 condMapEmpty!3716) mapIsEmpty!3716))

(assert (= (and mapNonEmpty!3714 (not condMapEmpty!3716)) mapNonEmpty!3716))

(assert (= (and mapNonEmpty!3716 ((_ is ValueCellFull!966) mapValue!3716)) b!97224))

(assert (= (and mapNonEmpty!3714 ((_ is ValueCellFull!966) mapDefault!3716)) b!97225))

(declare-fun m!106411 () Bool)

(assert (=> mapNonEmpty!3716 m!106411))

(declare-fun b_lambda!4315 () Bool)

(assert (= b_lambda!4301 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4315)))

(declare-fun b_lambda!4317 () Bool)

(assert (= b_lambda!4293 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4317)))

(declare-fun b_lambda!4319 () Bool)

(assert (= b_lambda!4309 (or (and b!95662 b_free!2405) (and b!95665 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))))) b_lambda!4319)))

(declare-fun b_lambda!4321 () Bool)

(assert (= b_lambda!4289 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4321)))

(declare-fun b_lambda!4323 () Bool)

(assert (= b_lambda!4281 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4323)))

(declare-fun b_lambda!4325 () Bool)

(assert (= b_lambda!4297 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4325)))

(declare-fun b_lambda!4327 () Bool)

(assert (= b_lambda!4287 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4327)))

(declare-fun b_lambda!4329 () Bool)

(assert (= b_lambda!4295 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4329)))

(declare-fun b_lambda!4331 () Bool)

(assert (= b_lambda!4303 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4331)))

(declare-fun b_lambda!4333 () Bool)

(assert (= b_lambda!4285 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4333)))

(declare-fun b_lambda!4335 () Bool)

(assert (= b_lambda!4311 (or (and b!95662 b_free!2405) (and b!95665 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))))) b_lambda!4335)))

(declare-fun b_lambda!4337 () Bool)

(assert (= b_lambda!4291 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4337)))

(declare-fun b_lambda!4339 () Bool)

(assert (= b_lambda!4283 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4339)))

(declare-fun b_lambda!4341 () Bool)

(assert (= b_lambda!4299 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4341)))

(declare-fun b_lambda!4343 () Bool)

(assert (= b_lambda!4305 (or (and b!95662 b_free!2405 (= (defaultEntry!2457 (v!2779 (underlying!333 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95665 b_free!2407) b_lambda!4343)))

(check-sat (not d!25955) (not b!96573) (not b!96733) (not d!25941) (not b!97171) (not b!96975) (not b!96769) (not d!25875) (not bm!9842) (not b!96391) (not d!25809) (not b!96765) (not b!97199) (not b!96805) (not bm!9816) (not b!96857) (not b!97114) (not b!97183) (not b!97069) (not b!97216) (not d!25741) (not b!97004) (not b!96781) (not d!25909) (not b!96846) (not b!96834) (not d!25747) (not d!25969) (not bm!9835) (not b!97201) (not d!25715) (not b!96414) (not bm!9802) (not b!97221) (not b!96477) (not b_lambda!4271) (not b!96605) (not b!97181) (not b!97075) (not b!96999) (not b!96742) (not d!25867) (not b!96485) (not d!25535) (not d!25943) b_and!5957 (not b!96527) (not d!25733) (not b!97146) (not b!96701) (not b!96598) (not b!96426) (not b!96508) (not d!25691) (not d!25483) (not b!96842) (not d!25477) (not b!96636) (not b!96667) (not b!96951) (not b!96709) (not bm!9853) (not b!97078) (not b!97077) (not bm!9833) (not b!97184) (not d!25645) (not b!96713) (not b!96920) (not d!25799) (not d!25789) (not d!25533) (not b!96550) (not d!25641) (not b_lambda!4255) (not b!97166) (not bm!9838) (not b!97137) (not d!25961) (not bm!9855) (not d!25421) (not b!97140) (not d!25433) (not b!96788) (not d!25493) (not b!96899) (not b!96352) (not b!97174) (not d!25609) (not b_lambda!4327) (not b!96528) (not d!25783) (not d!25439) (not d!25777) (not d!25983) (not b_lambda!4317) (not d!25563) (not b!96586) (not b!96679) (not b!96631) (not d!25551) (not b!96489) (not b!96918) (not d!25453) (not bm!9848) (not b!96881) (not b!96364) (not b!96353) (not d!25567) (not b!96471) (not d!25771) (not b!96751) (not d!25843) (not b!96800) (not b!96505) (not b!96595) (not d!25537) (not b_lambda!4321) (not b!96632) (not b!96923) (not bm!9801) (not d!25791) (not b!96581) (not d!25779) (not d!25805) (not d!25619) (not b!96534) (not d!25921) (not d!25767) (not b!96587) (not b!96770) (not b_lambda!4325) (not b!97080) (not b!97141) (not bm!9811) (not b!96591) (not b!97094) (not b!96820) (not b!96552) (not b!96734) (not b!96890) (not b_lambda!4269) (not b!96622) (not b!96824) (not d!25967) (not b!96910) (not b!96979) (not b!96473) b_and!5959 (not b!96971) (not bm!9870) (not bm!9787) (not b!97092) (not b!96518) (not b!97126) (not b!96763) (not d!25601) (not b!96548) (not d!25721) (not b!96987) (not d!25925) (not d!25491) (not d!25625) (not d!25673) (not b!96578) (not d!25553) (not d!25903) (not b_lambda!4333) (not b!96908) (not b!96816) (not b!96731) (not b!96774) (not b!97130) (not b!96692) (not b!96944) (not b!96690) (not b!97185) (not b!96601) (not b!96916) (not b!96467) (not d!25623) (not b!97186) (not b_lambda!4275) (not b!96517) (not b!96940) (not b!96590) (not bm!9798) (not b!96564) (not b!96609) (not d!25449) (not b_lambda!4337) (not d!25913) (not b!96924) (not bm!9847) (not d!25735) (not d!25815) (not d!25887) (not b_lambda!4341) (not b!96437) (not b!96732) (not b!97098) (not d!25813) (not d!25891) (not b!97072) (not bm!9797) (not bm!9806) (not d!25603) (not b!96723) (not d!25945) (not d!25911) (not d!25545) (not d!25565) (not b!96461) (not b!96897) (not b!96572) (not d!25861) (not bm!9782) (not b!96838) (not d!25729) (not b!96893) (not d!25975) (not b!96439) (not d!25703) (not d!25749) (not b!96589) (not b!96739) (not b!96965) (not b!96795) (not bm!9791) (not d!25753) (not b!96614) (not b!97145) (not b!96992) (not d!25657) (not b!96936) (not b!97001) (not d!25639) (not b!96747) (not b!96582) (not b!96717) (not bm!9784) (not b!96730) (not b!96957) (not b!96982) (not b!97071) (not b!96745) (not b!96565) (not bm!9846) (not d!25869) (not b!96658) (not d!25681) (not b!97089) (not b!96562) (not b_lambda!4273) (not b!96630) (not b!96729) (not b!96829) (not b!96896) (not d!25901) (not d!25617) (not d!25471) (not d!25599) (not b!96967) (not b!97079) (not b!96676) (not b!97066) (not b!96783) (not b_next!2405) (not d!25555) (not d!25931) (not b!96856) (not b!96922) (not b!96737) (not b!97128) (not d!25463) (not b!96725) (not b!97202) (not b!96398) (not b!96985) (not d!25531) (not d!25549) (not bm!9780) (not b!96776) (not b!97151) (not b!96560) (not bm!9831) (not b!96956) (not b!96903) (not b!97197) (not b!96431) (not b!96597) (not b!96419) (not b!96513) (not b!96818) (not b!96779) (not d!25919) (not d!25841) (not b!96926) (not d!25611) (not d!25511) (not b!96612) (not d!25427) (not b!96454) (not d!25575) (not b!97217) (not d!25519) (not b!96794) (not b!96984) (not b!96665) (not d!25503) (not b!96402) (not d!25829) (not d!25685) (not d!25795) (not d!25759) (not d!25541) (not b!96504) (not d!25659) (not d!25763) (not b!96400) (not b!96695) (not b!97159) (not b!96387) (not d!25445) (not bm!9815) (not b!96546) (not d!25787) (not d!25667) (not b!96358) (not d!25755) (not b!97084) (not b!96579) (not b!96759) (not b!96688) (not d!25695) (not d!25881) (not b!96501) (not bm!9826) (not b!96404) (not b!97003) (not b_lambda!4323) (not bm!9866) (not d!25785) (not b!96476) (not b!96559) (not b!97178) (not d!25927) (not d!25431) (not b!96863) (not bm!9844) (not d!25847) (not b!96826) (not b!96342) (not bm!9860) (not b!96921) (not b!96977) (not b!97110) (not b!96684) (not d!25827) (not b!96646) (not b!97156) (not b!96575) (not b!96577) (not b!96911) (not b!96904) (not d!25897) (not d!25831) (not b!97176) (not b_lambda!4313) (not b!96481) (not d!25773) (not b!96854) (not d!25423) (not b_lambda!4315) (not b!96403) (not d!25485) (not b!97109) (not b!96663) (not b!96849) (not b!96487) (not b!96953) (not d!25613) tp_is_empty!2619 (not bm!9830) (not b!96412) (not b!96859) (not b!97104) (not d!25929) (not b!96556) (not bm!9845) (not d!25521) (not b!96681) (not b!96961) (not d!25917) (not b!97011) (not b!96629) (not b!96615) (not b!96561) (not b!96844) (not b!96563) (not b!97147) (not b_lambda!4343) (not d!25751) (not d!25939) (not d!25569) (not b!96991) (not b!97093) (not b!97120) (not b!96495) (not bm!9796) (not b!97203) (not b!96845) (not d!25835) (not bm!9821) (not d!25577) (not b!96830) (not d!25905) (not b!96343) (not b!97136) (not b!96981) (not b!97158) (not bm!9804) (not b!96995) (not d!25699) (not d!25457) (not d!25949) (not b!96675) (not b_lambda!4331) (not b_next!2407) (not b!96791) (not d!25579) (not b!96409) (not d!25523) (not d!25447) (not d!25655) (not b!96569) (not b!97169) (not b!96624) (not b!96931) (not b!96620) (not b!96697) (not b!96905) (not bm!9789) (not b!97154) (not bm!9803) (not bm!9778) (not b!96499) (not bm!9840) (not d!25915) (not d!25803) (not b!96453) (not b!96858) (not b!97081) (not b!96746) (not b!96969) (not b!96618) (not b!97008) (not b!97219) (not b!96997) (not bm!9869) (not d!25637) (not b!96895) (not bm!9837) (not b!96545) (not b!96804) (not b!96674) (not d!25761) (not bm!9865) (not b!96720) (not b_lambda!4279) (not b!96465) (not d!25885) (not b!96654) (not b!96497) (not b_lambda!4329) (not d!25583) (not b!96594) (not d!25797) (not d!25513) (not b!96588) (not b!96809) (not b!96902) (not b_lambda!4307) (not b_lambda!4251) (not b!96756) (not b!96694) (not b!97167) (not d!25647) (not d!25977) (not b!97035) (not d!25713) (not b!96427) (not b!97142) (not b!97124) (not d!25465) (not d!25539) (not b!96549) (not b!97122) (not bm!9862) (not b!96840) (not b_lambda!4319) (not d!25571) (not b!96767) (not d!25781) (not mapNonEmpty!3715) (not b!96411) (not d!25515) (not d!25697) (not bm!9854) (not d!25899) (not b!97155) (not d!25475) (not b!96643) (not b!96822) (not d!25525) (not d!25671) (not b!96547) (not b!96456) (not b!96989) (not b!96650) (not b!96851) (not d!25487) (not b!97190) (not b!96350) (not b!96914) (not b!96662) (not b!96894) (not b!96515) (not b!96705) (not b!96507) (not d!25845) (not b!96670) (not b!97211) (not d!25479) (not b!96529) (not d!25801) (not d!25653) (not b!96660) (not d!25839) (not b!96642) (not d!25793) (not b!96554) (not d!25689) (not b!96574) (not b!96492) (not b!96990) (not d!25769) (not b!97006) (not b!96907) (not b!97210) (not b!96803) (not b!97086) (not b!96988) (not bm!9858) (not b!96551) (not bm!9823) (not d!25951) (not d!25973) (not b!96699) (not b!97143) (not bm!9792) (not b!96792) (not b!97118) (not b!96415) (not d!25559) (not d!25937) (not d!25811) (not b!96423) (not b_lambda!4277) (not b_lambda!4335) (not d!25959) (not d!25873) (not b!96585) (not b!96537) (not b!97091) (not d!25529) (not b!97139) (not b!96888) (not b!96544) (not d!25651) (not b!96761) (not b!96627) (not b!97170) (not b!96678) (not b!96531) (not d!25495) (not d!25821) (not b!96942) (not d!25907) (not b!96802) (not bm!9783) (not d!25561) (not b!96744) (not b!96435) (not bm!9825) (not d!25499) (not bm!9785) (not b!96762) (not d!25687) (not b!96785) (not d!25605) (not bm!9808) (not d!25823) (not b!96621) (not bm!9864) (not b!96887) (not d!25527) (not d!25923) (not b!96386) (not bm!9775) (not b!96496) (not d!25501) (not d!25469) (not d!25557) (not b!96355) (not b!97212) (not b!96821) (not b!96980) (not bm!9819) (not mapNonEmpty!3716) (not b!96932) (not d!25459) (not d!25573) (not b!96973) (not d!25877) (not b!96516) (not d!25817) (not d!25739) (not b!96917) (not d!25807) (not b!97106) (not b_lambda!4339) (not b!97068) (not b!96704) (not b!96510) (not d!25971) (not b!96715) (not bm!9829) (not b!96396) (not d!25893) (not bm!9810) (not b!97208) (not d!25517) (not b!96898) (not b!96728) (not d!25443) (not d!25981) (not bm!9793) (not b!97214) (not d!25819) (not b!96421) (not b!96912) (not b!96797) (not bm!9776) (not b!96443) (not b!96540) (not d!25585) (not d!25879) (not d!25863) (not b!96848) (not d!25679) (not b!97134) (not b!96928) (not b!96948) (not b!97076) (not b!97132) (not bm!9812) (not b!96522) (not b!96365) (not b!96469))
(check-sat b_and!5957 b_and!5959 (not b_next!2405) (not b_next!2407))
