; Options: -q --produce-models --incremental --print-success --lang smt2.6
(declare-fun start!135618 () Bool)

(assert start!135618)

(declare-fun res!1075766 () Bool)

(declare-fun e!878031 () Bool)

(assert (=> start!135618 (=> (not res!1075766) (not e!878031))))

(declare-fun mask!898 () (_ BitVec 32))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> start!135618 (= res!1075766 (validMask!0 mask!898))))

(assert (=> start!135618 e!878031))

(assert (=> start!135618 true))

(declare-datatypes ((array!105238 0))(
  ( (array!105239 (arr!50761 (Array (_ BitVec 32) (_ BitVec 64))) (size!51312 (_ BitVec 32))) )
))
(declare-fun _keys!605 () array!105238)

(declare-fun array_inv!39406 (array!105238) Bool)

(assert (=> start!135618 (array_inv!39406 _keys!605)))

(declare-fun b!1574334 () Bool)

(declare-fun res!1075764 () Bool)

(assert (=> b!1574334 (=> (not res!1075764) (not e!878031))))

(assert (=> b!1574334 (= res!1075764 (and (bvsge mask!898 #b00000000000000000000000000000000) (= (size!51312 _keys!605) (bvadd #b00000000000000000000000000000001 mask!898))))))

(declare-fun b!1574335 () Bool)

(declare-fun res!1075765 () Bool)

(assert (=> b!1574335 (=> (not res!1075765) (not e!878031))))

(declare-fun k!761 () (_ BitVec 64))

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!1574335 (= res!1075765 (validKeyInArray!0 k!761))))

(declare-fun b!1574336 () Bool)

(declare-fun lt!674728 () (_ BitVec 32))

(assert (=> b!1574336 (= e!878031 (or (bvslt lt!674728 #b00000000000000000000000000000000) (bvsge lt!674728 (bvadd #b00000000000000000000000000000001 mask!898))))))

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!1574336 (= lt!674728 (toIndex!0 k!761 mask!898))))

(assert (= (and start!135618 res!1075766) b!1574334))

(assert (= (and b!1574334 res!1075764) b!1574335))

(assert (= (and b!1574335 res!1075765) b!1574336))

(declare-fun m!1447615 () Bool)

(assert (=> start!135618 m!1447615))

(declare-fun m!1447617 () Bool)

(assert (=> start!135618 m!1447617))

(declare-fun m!1447619 () Bool)

(assert (=> b!1574335 m!1447619))

(declare-fun m!1447621 () Bool)

(assert (=> b!1574336 m!1447621))

(push 1)

(assert (not b!1574335))

(assert (not start!135618))

(assert (not b!1574336))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!165149 () Bool)

(assert (=> d!165149 (= (validKeyInArray!0 k!761) (and (not (= k!761 #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= k!761 #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!1574335 d!165149))

(declare-fun d!165151 () Bool)

(assert (=> d!165151 (= (validMask!0 mask!898) (and (or (= mask!898 #b00000000000000000000000000000111) (= mask!898 #b00000000000000000000000000001111) (= mask!898 #b00000000000000000000000000011111) (= mask!898 #b00000000000000000000000000111111) (= mask!898 #b00000000000000000000000001111111) (= mask!898 #b00000000000000000000000011111111) (= mask!898 #b00000000000000000000000111111111) (= mask!898 #b00000000000000000000001111111111) (= mask!898 #b00000000000000000000011111111111) (= mask!898 #b00000000000000000000111111111111) (= mask!898 #b00000000000000000001111111111111) (= mask!898 #b00000000000000000011111111111111) (= mask!898 #b00000000000000000111111111111111) (= mask!898 #b00000000000000001111111111111111) (= mask!898 #b00000000000000011111111111111111) (= mask!898 #b00000000000000111111111111111111) (= mask!898 #b00000000000001111111111111111111) (= mask!898 #b00000000000011111111111111111111) (= mask!898 #b00000000000111111111111111111111) (= mask!898 #b00000000001111111111111111111111) (= mask!898 #b00000000011111111111111111111111) (= mask!898 #b00000000111111111111111111111111) (= mask!898 #b00000001111111111111111111111111) (= mask!898 #b00000011111111111111111111111111) (= mask!898 #b00000111111111111111111111111111) (= mask!898 #b00001111111111111111111111111111) (= mask!898 #b00011111111111111111111111111111) (= mask!898 #b00111111111111111111111111111111)) (bvsle mask!898 #b00111111111111111111111111111111)))))

(assert (=> start!135618 d!165151))

(declare-fun d!165159 () Bool)

(assert (=> d!165159 (= (array_inv!39406 _keys!605) (bvsge (size!51312 _keys!605) #b00000000000000000000000000000000))))

(assert (=> start!135618 d!165159))

(declare-fun d!165161 () Bool)

(declare-fun lt!674746 () (_ BitVec 32))

(declare-fun lt!674745 () (_ BitVec 32))

(assert (=> d!165161 (= lt!674746 (bvmul (bvxor lt!674745 (bvlshr lt!674745 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!165161 (= lt!674745 ((_ extract 31 0) (bvand (bvxor k!761 (bvlshr k!761 #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!165161 (and (bvsge mask!898 #b00000000000000000000000000000000) (let ((res!1075786 (let ((h!38412 ((_ extract 31 0) (bvand (bvxor k!761 (bvlshr k!761 #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!141932 (bvmul (bvxor h!38412 (bvlshr h!38412 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!141932 (bvlshr x!141932 #b00000000000000000000000000001101)) mask!898))))) (and (bvslt res!1075786 (bvadd mask!898 #b00000000000000000000000000000001)) (bvsge res!1075786 #b00000000000000000000000000000000))))))

(assert (=> d!165161 (= (toIndex!0 k!761 mask!898) (bvand (bvxor lt!674746 (bvlshr lt!674746 #b00000000000000000000000000001101)) mask!898))))

(assert (=> b!1574336 d!165161))

(push 1)

(check-sat)

