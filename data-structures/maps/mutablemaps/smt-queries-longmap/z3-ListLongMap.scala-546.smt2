; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!14442 () Bool)

(assert start!14442)

(declare-fun b!136196 () Bool)

(declare-fun b_free!2945 () Bool)

(declare-fun b_next!2945 () Bool)

(assert (=> b!136196 (= b_free!2945 (not b_next!2945))))

(declare-fun tp!11288 () Bool)

(declare-fun b_and!8449 () Bool)

(assert (=> b!136196 (= tp!11288 b_and!8449)))

(declare-fun b!136192 () Bool)

(declare-fun b_free!2947 () Bool)

(declare-fun b_next!2947 () Bool)

(assert (=> b!136192 (= b_free!2947 (not b_next!2947))))

(declare-fun tp!11289 () Bool)

(declare-fun b_and!8451 () Bool)

(assert (=> b!136192 (= tp!11289 b_and!8451)))

(declare-fun b!136188 () Bool)

(declare-fun e!88720 () Bool)

(declare-fun tp_is_empty!2889 () Bool)

(assert (=> b!136188 (= e!88720 tp_is_empty!2889)))

(declare-fun mapIsEmpty!4689 () Bool)

(declare-fun mapRes!4689 () Bool)

(assert (=> mapIsEmpty!4689 mapRes!4689))

(declare-fun b!136189 () Bool)

(declare-fun e!88719 () Bool)

(assert (=> b!136189 (= e!88719 tp_is_empty!2889)))

(declare-fun b!136190 () Bool)

(declare-fun e!88728 () Bool)

(declare-fun e!88725 () Bool)

(assert (=> b!136190 (= e!88728 e!88725)))

(declare-fun res!65355 () Bool)

(declare-fun e!88715 () Bool)

(assert (=> start!14442 (=> (not res!65355) (not e!88715))))

(declare-datatypes ((V!3499 0))(
  ( (V!3500 (val!1489 Int)) )
))
(declare-datatypes ((array!4806 0))(
  ( (array!4807 (arr!2272 (Array (_ BitVec 32) (_ BitVec 64))) (size!2542 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!1101 0))(
  ( (ValueCellFull!1101 (v!3219 V!3499)) (EmptyCell!1101) )
))
(declare-datatypes ((array!4808 0))(
  ( (array!4809 (arr!2273 (Array (_ BitVec 32) ValueCell!1101)) (size!2543 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!1110 0))(
  ( (LongMapFixedSize!1111 (defaultEntry!2889 Int) (mask!7203 (_ BitVec 32)) (extraKeys!2650 (_ BitVec 32)) (zeroValue!2742 V!3499) (minValue!2742 V!3499) (_size!604 (_ BitVec 32)) (_keys!4642 array!4806) (_values!2872 array!4808) (_vacant!604 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!898 0))(
  ( (Cell!899 (v!3220 LongMapFixedSize!1110)) )
))
(declare-datatypes ((LongMap!898 0))(
  ( (LongMap!899 (underlying!460 Cell!898)) )
))
(declare-fun thiss!992 () LongMap!898)

(declare-fun valid!529 (LongMap!898) Bool)

(assert (=> start!14442 (= res!65355 (valid!529 thiss!992))))

(assert (=> start!14442 e!88715))

(assert (=> start!14442 e!88728))

(assert (=> start!14442 true))

(declare-fun e!88723 () Bool)

(assert (=> start!14442 e!88723))

(declare-fun b!136191 () Bool)

(declare-fun e!88716 () Bool)

(assert (=> b!136191 (= e!88715 e!88716)))

(declare-fun res!65352 () Bool)

(assert (=> b!136191 (=> (not res!65352) (not e!88716))))

(declare-datatypes ((tuple2!2622 0))(
  ( (tuple2!2623 (_1!1321 (_ BitVec 64)) (_2!1321 V!3499)) )
))
(declare-datatypes ((List!1741 0))(
  ( (Nil!1738) (Cons!1737 (h!2343 tuple2!2622) (t!6241 List!1741)) )
))
(declare-datatypes ((ListLongMap!1715 0))(
  ( (ListLongMap!1716 (toList!873 List!1741)) )
))
(declare-fun lt!71093 () ListLongMap!1715)

(declare-fun from!355 () (_ BitVec 32))

(declare-fun lt!71092 () ListLongMap!1715)

(assert (=> b!136191 (= res!65352 (and (= lt!71092 lt!71093) (not (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun newMap!16 () LongMapFixedSize!1110)

(declare-fun map!1413 (LongMapFixedSize!1110) ListLongMap!1715)

(assert (=> b!136191 (= lt!71093 (map!1413 newMap!16))))

(declare-fun getCurrentListMap!544 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 32) Int) ListLongMap!1715)

(assert (=> b!136191 (= lt!71092 (getCurrentListMap!544 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun e!88726 () Bool)

(declare-fun array_inv!1401 (array!4806) Bool)

(declare-fun array_inv!1402 (array!4808) Bool)

(assert (=> b!136192 (= e!88723 (and tp!11289 tp_is_empty!2889 (array_inv!1401 (_keys!4642 newMap!16)) (array_inv!1402 (_values!2872 newMap!16)) e!88726))))

(declare-fun b!136193 () Bool)

(declare-fun e!88727 () Bool)

(assert (=> b!136193 (= e!88727 (not (bvslt (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) #b01111111111111111111111111111111)))))

(declare-fun arrayContainsKey!0 (array!4806 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!136193 (arrayContainsKey!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-datatypes ((Unit!4291 0))(
  ( (Unit!4292) )
))
(declare-fun lt!71094 () Unit!4291)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!133 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 64) (_ BitVec 32) Int) Unit!4291)

(assert (=> b!136193 (= lt!71094 (lemmaListMapContainsThenArrayContainsFrom!133 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun b!136194 () Bool)

(declare-fun e!88714 () Bool)

(assert (=> b!136194 (= e!88714 (and e!88720 mapRes!4689))))

(declare-fun condMapEmpty!4689 () Bool)

(declare-fun mapDefault!4690 () ValueCell!1101)

(assert (=> b!136194 (= condMapEmpty!4689 (= (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!1101)) mapDefault!4690)))))

(declare-fun b!136195 () Bool)

(declare-fun e!88722 () Bool)

(assert (=> b!136195 (= e!88722 tp_is_empty!2889)))

(declare-fun mapIsEmpty!4690 () Bool)

(declare-fun mapRes!4690 () Bool)

(assert (=> mapIsEmpty!4690 mapRes!4690))

(declare-fun e!88717 () Bool)

(assert (=> b!136196 (= e!88717 (and tp!11288 tp_is_empty!2889 (array_inv!1401 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (array_inv!1402 (_values!2872 (v!3220 (underlying!460 thiss!992)))) e!88714))))

(declare-fun b!136197 () Bool)

(declare-fun res!65351 () Bool)

(assert (=> b!136197 (=> (not res!65351) (not e!88715))))

(assert (=> b!136197 (= res!65351 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun mapNonEmpty!4689 () Bool)

(declare-fun tp!11290 () Bool)

(assert (=> mapNonEmpty!4689 (= mapRes!4689 (and tp!11290 e!88719))))

(declare-fun mapKey!4690 () (_ BitVec 32))

(declare-fun mapValue!4689 () ValueCell!1101)

(declare-fun mapRest!4689 () (Array (_ BitVec 32) ValueCell!1101))

(assert (=> mapNonEmpty!4689 (= (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (store mapRest!4689 mapKey!4690 mapValue!4689))))

(declare-fun b!136198 () Bool)

(assert (=> b!136198 (= e!88725 e!88717)))

(declare-fun b!136199 () Bool)

(assert (=> b!136199 (= e!88726 (and e!88722 mapRes!4690))))

(declare-fun condMapEmpty!4690 () Bool)

(declare-fun mapDefault!4689 () ValueCell!1101)

(assert (=> b!136199 (= condMapEmpty!4690 (= (arr!2273 (_values!2872 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!1101)) mapDefault!4689)))))

(declare-fun b!136200 () Bool)

(declare-fun res!65353 () Bool)

(assert (=> b!136200 (=> (not res!65353) (not e!88715))))

(assert (=> b!136200 (= res!65353 (bvsge (bvadd #b00000000000000000000000000000001 (mask!7203 newMap!16)) (_size!604 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun mapNonEmpty!4690 () Bool)

(declare-fun tp!11287 () Bool)

(declare-fun e!88718 () Bool)

(assert (=> mapNonEmpty!4690 (= mapRes!4690 (and tp!11287 e!88718))))

(declare-fun mapRest!4690 () (Array (_ BitVec 32) ValueCell!1101))

(declare-fun mapKey!4689 () (_ BitVec 32))

(declare-fun mapValue!4690 () ValueCell!1101)

(assert (=> mapNonEmpty!4690 (= (arr!2273 (_values!2872 newMap!16)) (store mapRest!4690 mapKey!4689 mapValue!4690))))

(declare-fun b!136201 () Bool)

(assert (=> b!136201 (= e!88716 e!88727)))

(declare-fun res!65356 () Bool)

(assert (=> b!136201 (=> (not res!65356) (not e!88727))))

(declare-fun contains!901 (ListLongMap!1715 (_ BitVec 64)) Bool)

(assert (=> b!136201 (= res!65356 (contains!901 lt!71093 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-datatypes ((tuple2!2624 0))(
  ( (tuple2!2625 (_1!1322 Bool) (_2!1322 LongMapFixedSize!1110)) )
))
(declare-fun lt!71091 () tuple2!2624)

(declare-fun update!195 (LongMapFixedSize!1110 (_ BitVec 64) V!3499) tuple2!2624)

(declare-fun get!1498 (ValueCell!1101 V!3499) V!3499)

(declare-fun dynLambda!428 (Int (_ BitVec 64)) V!3499)

(assert (=> b!136201 (= lt!71091 (update!195 newMap!16 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!136202 () Bool)

(declare-fun res!65354 () Bool)

(assert (=> b!136202 (=> (not res!65354) (not e!88715))))

(declare-fun valid!530 (LongMapFixedSize!1110) Bool)

(assert (=> b!136202 (= res!65354 (valid!530 newMap!16))))

(declare-fun b!136203 () Bool)

(assert (=> b!136203 (= e!88718 tp_is_empty!2889)))

(assert (= (and start!14442 res!65355) b!136197))

(assert (= (and b!136197 res!65351) b!136202))

(assert (= (and b!136202 res!65354) b!136200))

(assert (= (and b!136200 res!65353) b!136191))

(assert (= (and b!136191 res!65352) b!136201))

(assert (= (and b!136201 res!65356) b!136193))

(assert (= (and b!136194 condMapEmpty!4689) mapIsEmpty!4689))

(assert (= (and b!136194 (not condMapEmpty!4689)) mapNonEmpty!4689))

(get-info :version)

(assert (= (and mapNonEmpty!4689 ((_ is ValueCellFull!1101) mapValue!4689)) b!136189))

(assert (= (and b!136194 ((_ is ValueCellFull!1101) mapDefault!4690)) b!136188))

(assert (= b!136196 b!136194))

(assert (= b!136198 b!136196))

(assert (= b!136190 b!136198))

(assert (= start!14442 b!136190))

(assert (= (and b!136199 condMapEmpty!4690) mapIsEmpty!4690))

(assert (= (and b!136199 (not condMapEmpty!4690)) mapNonEmpty!4690))

(assert (= (and mapNonEmpty!4690 ((_ is ValueCellFull!1101) mapValue!4690)) b!136203))

(assert (= (and b!136199 ((_ is ValueCellFull!1101) mapDefault!4689)) b!136195))

(assert (= b!136192 b!136199))

(assert (= start!14442 b!136192))

(declare-fun b_lambda!6111 () Bool)

(assert (=> (not b_lambda!6111) (not b!136201)))

(declare-fun t!6238 () Bool)

(declare-fun tb!2461 () Bool)

(assert (=> (and b!136196 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))) t!6238) tb!2461))

(declare-fun result!4045 () Bool)

(assert (=> tb!2461 (= result!4045 tp_is_empty!2889)))

(assert (=> b!136201 t!6238))

(declare-fun b_and!8453 () Bool)

(assert (= b_and!8449 (and (=> t!6238 result!4045) b_and!8453)))

(declare-fun tb!2463 () Bool)

(declare-fun t!6240 () Bool)

(assert (=> (and b!136192 (= (defaultEntry!2889 newMap!16) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))) t!6240) tb!2463))

(declare-fun result!4049 () Bool)

(assert (= result!4049 result!4045))

(assert (=> b!136201 t!6240))

(declare-fun b_and!8455 () Bool)

(assert (= b_and!8451 (and (=> t!6240 result!4049) b_and!8455)))

(declare-fun m!162513 () Bool)

(assert (=> b!136196 m!162513))

(declare-fun m!162515 () Bool)

(assert (=> b!136196 m!162515))

(declare-fun m!162517 () Bool)

(assert (=> b!136202 m!162517))

(declare-fun m!162519 () Bool)

(assert (=> b!136192 m!162519))

(declare-fun m!162521 () Bool)

(assert (=> b!136192 m!162521))

(declare-fun m!162523 () Bool)

(assert (=> b!136193 m!162523))

(assert (=> b!136193 m!162523))

(declare-fun m!162525 () Bool)

(assert (=> b!136193 m!162525))

(assert (=> b!136193 m!162523))

(declare-fun m!162527 () Bool)

(assert (=> b!136193 m!162527))

(declare-fun m!162529 () Bool)

(assert (=> mapNonEmpty!4690 m!162529))

(assert (=> b!136191 m!162523))

(declare-fun m!162531 () Bool)

(assert (=> b!136191 m!162531))

(declare-fun m!162533 () Bool)

(assert (=> b!136191 m!162533))

(declare-fun m!162535 () Bool)

(assert (=> start!14442 m!162535))

(declare-fun m!162537 () Bool)

(assert (=> mapNonEmpty!4689 m!162537))

(declare-fun m!162539 () Bool)

(assert (=> b!136201 m!162539))

(declare-fun m!162541 () Bool)

(assert (=> b!136201 m!162541))

(declare-fun m!162543 () Bool)

(assert (=> b!136201 m!162543))

(assert (=> b!136201 m!162523))

(declare-fun m!162545 () Bool)

(assert (=> b!136201 m!162545))

(assert (=> b!136201 m!162523))

(assert (=> b!136201 m!162541))

(assert (=> b!136201 m!162523))

(assert (=> b!136201 m!162543))

(declare-fun m!162547 () Bool)

(assert (=> b!136201 m!162547))

(assert (=> b!136201 m!162539))

(check-sat (not b_next!2947) (not b_next!2945) (not b!136201) (not start!14442) (not b!136196) tp_is_empty!2889 (not b_lambda!6111) b_and!8455 (not b!136193) (not mapNonEmpty!4689) b_and!8453 (not b!136192) (not b!136202) (not mapNonEmpty!4690) (not b!136191))
(check-sat b_and!8453 b_and!8455 (not b_next!2945) (not b_next!2947))
(get-model)

(declare-fun b_lambda!6115 () Bool)

(assert (= b_lambda!6111 (or (and b!136196 b_free!2945) (and b!136192 b_free!2947 (= (defaultEntry!2889 newMap!16) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))))) b_lambda!6115)))

(check-sat (not b_next!2947) (not b_next!2945) (not start!14442) (not b!136196) tp_is_empty!2889 b_and!8455 (not b!136193) (not mapNonEmpty!4689) b_and!8453 (not b!136192) (not b!136202) (not b!136201) (not b_lambda!6115) (not mapNonEmpty!4690) (not b!136191))
(check-sat b_and!8453 b_and!8455 (not b_next!2945) (not b_next!2947))
(get-model)

(declare-fun d!42535 () Bool)

(assert (=> d!42535 (= (map!1413 newMap!16) (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun bs!5719 () Bool)

(assert (= bs!5719 d!42535))

(declare-fun m!162585 () Bool)

(assert (=> bs!5719 m!162585))

(assert (=> b!136191 d!42535))

(declare-fun b!136298 () Bool)

(declare-fun e!88807 () Bool)

(declare-fun call!14949 () Bool)

(assert (=> b!136298 (= e!88807 (not call!14949))))

(declare-fun b!136299 () Bool)

(declare-fun res!65394 () Bool)

(declare-fun e!88803 () Bool)

(assert (=> b!136299 (=> (not res!65394) (not e!88803))))

(declare-fun e!88801 () Bool)

(assert (=> b!136299 (= res!65394 e!88801)))

(declare-fun res!65400 () Bool)

(assert (=> b!136299 (=> res!65400 e!88801)))

(declare-fun e!88805 () Bool)

(assert (=> b!136299 (= res!65400 (not e!88805))))

(declare-fun res!65397 () Bool)

(assert (=> b!136299 (=> (not res!65397) (not e!88805))))

(assert (=> b!136299 (= res!65397 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!136300 () Bool)

(declare-fun e!88809 () Bool)

(declare-fun e!88806 () Bool)

(assert (=> b!136300 (= e!88809 e!88806)))

(declare-fun res!65401 () Bool)

(declare-fun call!14948 () Bool)

(assert (=> b!136300 (= res!65401 call!14948)))

(assert (=> b!136300 (=> (not res!65401) (not e!88806))))

(declare-fun bm!14941 () Bool)

(declare-fun call!14947 () ListLongMap!1715)

(declare-fun call!14950 () ListLongMap!1715)

(assert (=> bm!14941 (= call!14947 call!14950)))

(declare-fun b!136301 () Bool)

(declare-fun e!88812 () Bool)

(assert (=> b!136301 (= e!88801 e!88812)))

(declare-fun res!65399 () Bool)

(assert (=> b!136301 (=> (not res!65399) (not e!88812))))

(declare-fun lt!71161 () ListLongMap!1715)

(assert (=> b!136301 (= res!65399 (contains!901 lt!71161 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!136301 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!136302 () Bool)

(declare-fun e!88808 () ListLongMap!1715)

(declare-fun e!88804 () ListLongMap!1715)

(assert (=> b!136302 (= e!88808 e!88804)))

(declare-fun c!25474 () Bool)

(assert (=> b!136302 (= c!25474 (and (not (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!14942 () Bool)

(assert (=> bm!14942 (= call!14948 (contains!901 lt!71161 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136303 () Bool)

(declare-fun apply!117 (ListLongMap!1715 (_ BitVec 64)) V!3499)

(assert (=> b!136303 (= e!88806 (= (apply!117 lt!71161 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun b!136304 () Bool)

(declare-fun e!88811 () ListLongMap!1715)

(declare-fun call!14945 () ListLongMap!1715)

(assert (=> b!136304 (= e!88811 call!14945)))

(declare-fun bm!14943 () Bool)

(declare-fun call!14946 () ListLongMap!1715)

(declare-fun call!14944 () ListLongMap!1715)

(assert (=> bm!14943 (= call!14946 call!14944)))

(declare-fun b!136305 () Bool)

(declare-fun e!88802 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!136305 (= e!88802 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!136307 () Bool)

(assert (=> b!136307 (= e!88804 call!14946)))

(declare-fun b!136308 () Bool)

(assert (=> b!136308 (= e!88805 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!136309 () Bool)

(assert (=> b!136309 (= e!88803 e!88807)))

(declare-fun c!25478 () Bool)

(assert (=> b!136309 (= c!25478 (not (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136310 () Bool)

(declare-fun e!88810 () Unit!4291)

(declare-fun lt!71155 () Unit!4291)

(assert (=> b!136310 (= e!88810 lt!71155)))

(declare-fun lt!71166 () ListLongMap!1715)

(declare-fun getCurrentListMapNoExtraKeys!138 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 32) Int) ListLongMap!1715)

(assert (=> b!136310 (= lt!71166 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun lt!71159 () (_ BitVec 64))

(assert (=> b!136310 (= lt!71159 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71156 () (_ BitVec 64))

(assert (=> b!136310 (= lt!71156 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!71157 () Unit!4291)

(declare-fun addStillContains!93 (ListLongMap!1715 (_ BitVec 64) V!3499 (_ BitVec 64)) Unit!4291)

(assert (=> b!136310 (= lt!71157 (addStillContains!93 lt!71166 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71156))))

(declare-fun +!171 (ListLongMap!1715 tuple2!2622) ListLongMap!1715)

(assert (=> b!136310 (contains!901 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71156)))

(declare-fun lt!71171 () Unit!4291)

(assert (=> b!136310 (= lt!71171 lt!71157)))

(declare-fun lt!71158 () ListLongMap!1715)

(assert (=> b!136310 (= lt!71158 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun lt!71172 () (_ BitVec 64))

(assert (=> b!136310 (= lt!71172 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71154 () (_ BitVec 64))

(assert (=> b!136310 (= lt!71154 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!71151 () Unit!4291)

(declare-fun addApplyDifferent!93 (ListLongMap!1715 (_ BitVec 64) V!3499 (_ BitVec 64)) Unit!4291)

(assert (=> b!136310 (= lt!71151 (addApplyDifferent!93 lt!71158 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71154))))

(assert (=> b!136310 (= (apply!117 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71154) (apply!117 lt!71158 lt!71154))))

(declare-fun lt!71167 () Unit!4291)

(assert (=> b!136310 (= lt!71167 lt!71151)))

(declare-fun lt!71164 () ListLongMap!1715)

(assert (=> b!136310 (= lt!71164 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun lt!71152 () (_ BitVec 64))

(assert (=> b!136310 (= lt!71152 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71153 () (_ BitVec 64))

(assert (=> b!136310 (= lt!71153 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!71160 () Unit!4291)

(assert (=> b!136310 (= lt!71160 (addApplyDifferent!93 lt!71164 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71153))))

(assert (=> b!136310 (= (apply!117 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71153) (apply!117 lt!71164 lt!71153))))

(declare-fun lt!71162 () Unit!4291)

(assert (=> b!136310 (= lt!71162 lt!71160)))

(declare-fun lt!71169 () ListLongMap!1715)

(assert (=> b!136310 (= lt!71169 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun lt!71168 () (_ BitVec 64))

(assert (=> b!136310 (= lt!71168 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71170 () (_ BitVec 64))

(assert (=> b!136310 (= lt!71170 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!136310 (= lt!71155 (addApplyDifferent!93 lt!71169 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71170))))

(assert (=> b!136310 (= (apply!117 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71170) (apply!117 lt!71169 lt!71170))))

(declare-fun b!136311 () Bool)

(assert (=> b!136311 (= e!88811 call!14946)))

(declare-fun b!136312 () Bool)

(assert (=> b!136312 (= e!88808 (+!171 call!14944 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun bm!14944 () Bool)

(assert (=> bm!14944 (= call!14950 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun b!136313 () Bool)

(declare-fun Unit!4293 () Unit!4291)

(assert (=> b!136313 (= e!88810 Unit!4293)))

(declare-fun b!136314 () Bool)

(declare-fun res!65393 () Bool)

(assert (=> b!136314 (=> (not res!65393) (not e!88803))))

(assert (=> b!136314 (= res!65393 e!88809)))

(declare-fun c!25475 () Bool)

(assert (=> b!136314 (= c!25475 (not (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!136306 () Bool)

(declare-fun e!88800 () Bool)

(assert (=> b!136306 (= e!88807 e!88800)))

(declare-fun res!65396 () Bool)

(assert (=> b!136306 (= res!65396 call!14949)))

(assert (=> b!136306 (=> (not res!65396) (not e!88800))))

(declare-fun d!42537 () Bool)

(assert (=> d!42537 e!88803))

(declare-fun res!65395 () Bool)

(assert (=> d!42537 (=> (not res!65395) (not e!88803))))

(assert (=> d!42537 (= res!65395 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun lt!71163 () ListLongMap!1715)

(assert (=> d!42537 (= lt!71161 lt!71163)))

(declare-fun lt!71165 () Unit!4291)

(assert (=> d!42537 (= lt!71165 e!88810)))

(declare-fun c!25476 () Bool)

(assert (=> d!42537 (= c!25476 e!88802)))

(declare-fun res!65398 () Bool)

(assert (=> d!42537 (=> (not res!65398) (not e!88802))))

(assert (=> d!42537 (= res!65398 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> d!42537 (= lt!71163 e!88808)))

(declare-fun c!25473 () Bool)

(assert (=> d!42537 (= c!25473 (and (not (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> d!42537 (validMask!0 (mask!7203 (v!3220 (underlying!460 thiss!992))))))

(assert (=> d!42537 (= (getCurrentListMap!544 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))) lt!71161)))

(declare-fun b!136315 () Bool)

(assert (=> b!136315 (= e!88800 (= (apply!117 lt!71161 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun bm!14945 () Bool)

(assert (=> bm!14945 (= call!14945 call!14947)))

(declare-fun b!136316 () Bool)

(assert (=> b!136316 (= e!88809 (not call!14948))))

(declare-fun bm!14946 () Bool)

(assert (=> bm!14946 (= call!14949 (contains!901 lt!71161 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136317 () Bool)

(assert (=> b!136317 (= e!88812 (= (apply!117 lt!71161 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136317 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2543 (_values!2872 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> b!136317 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun bm!14947 () Bool)

(assert (=> bm!14947 (= call!14944 (+!171 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945)) (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!136318 () Bool)

(declare-fun c!25477 () Bool)

(assert (=> b!136318 (= c!25477 (and (not (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!136318 (= e!88804 e!88811)))

(assert (= (and d!42537 c!25473) b!136312))

(assert (= (and d!42537 (not c!25473)) b!136302))

(assert (= (and b!136302 c!25474) b!136307))

(assert (= (and b!136302 (not c!25474)) b!136318))

(assert (= (and b!136318 c!25477) b!136311))

(assert (= (and b!136318 (not c!25477)) b!136304))

(assert (= (or b!136311 b!136304) bm!14945))

(assert (= (or b!136307 bm!14945) bm!14941))

(assert (= (or b!136307 b!136311) bm!14943))

(assert (= (or b!136312 bm!14941) bm!14944))

(assert (= (or b!136312 bm!14943) bm!14947))

(assert (= (and d!42537 res!65398) b!136305))

(assert (= (and d!42537 c!25476) b!136310))

(assert (= (and d!42537 (not c!25476)) b!136313))

(assert (= (and d!42537 res!65395) b!136299))

(assert (= (and b!136299 res!65397) b!136308))

(assert (= (and b!136299 (not res!65400)) b!136301))

(assert (= (and b!136301 res!65399) b!136317))

(assert (= (and b!136299 res!65394) b!136314))

(assert (= (and b!136314 c!25475) b!136300))

(assert (= (and b!136314 (not c!25475)) b!136316))

(assert (= (and b!136300 res!65401) b!136303))

(assert (= (or b!136300 b!136316) bm!14942))

(assert (= (and b!136314 res!65393) b!136309))

(assert (= (and b!136309 c!25478) b!136306))

(assert (= (and b!136309 (not c!25478)) b!136298))

(assert (= (and b!136306 res!65396) b!136315))

(assert (= (or b!136306 b!136298) bm!14946))

(declare-fun b_lambda!6117 () Bool)

(assert (=> (not b_lambda!6117) (not b!136317)))

(assert (=> b!136317 t!6238))

(declare-fun b_and!8465 () Bool)

(assert (= b_and!8453 (and (=> t!6238 result!4045) b_and!8465)))

(assert (=> b!136317 t!6240))

(declare-fun b_and!8467 () Bool)

(assert (= b_and!8455 (and (=> t!6240 result!4049) b_and!8467)))

(declare-fun m!162587 () Bool)

(assert (=> bm!14942 m!162587))

(declare-fun m!162589 () Bool)

(assert (=> b!136317 m!162589))

(declare-fun m!162591 () Bool)

(assert (=> b!136317 m!162591))

(declare-fun m!162593 () Bool)

(assert (=> b!136317 m!162593))

(assert (=> b!136317 m!162591))

(assert (=> b!136317 m!162541))

(assert (=> b!136317 m!162589))

(assert (=> b!136317 m!162541))

(declare-fun m!162595 () Bool)

(assert (=> b!136317 m!162595))

(declare-fun m!162597 () Bool)

(assert (=> b!136312 m!162597))

(declare-fun m!162599 () Bool)

(assert (=> bm!14947 m!162599))

(declare-fun m!162601 () Bool)

(assert (=> bm!14944 m!162601))

(declare-fun m!162603 () Bool)

(assert (=> b!136310 m!162603))

(declare-fun m!162605 () Bool)

(assert (=> b!136310 m!162605))

(declare-fun m!162607 () Bool)

(assert (=> b!136310 m!162607))

(declare-fun m!162609 () Bool)

(assert (=> b!136310 m!162609))

(declare-fun m!162611 () Bool)

(assert (=> b!136310 m!162611))

(declare-fun m!162613 () Bool)

(assert (=> b!136310 m!162613))

(declare-fun m!162615 () Bool)

(assert (=> b!136310 m!162615))

(declare-fun m!162617 () Bool)

(assert (=> b!136310 m!162617))

(declare-fun m!162619 () Bool)

(assert (=> b!136310 m!162619))

(declare-fun m!162621 () Bool)

(assert (=> b!136310 m!162621))

(assert (=> b!136310 m!162603))

(assert (=> b!136310 m!162611))

(assert (=> b!136310 m!162591))

(declare-fun m!162623 () Bool)

(assert (=> b!136310 m!162623))

(assert (=> b!136310 m!162601))

(assert (=> b!136310 m!162615))

(declare-fun m!162625 () Bool)

(assert (=> b!136310 m!162625))

(declare-fun m!162627 () Bool)

(assert (=> b!136310 m!162627))

(declare-fun m!162629 () Bool)

(assert (=> b!136310 m!162629))

(assert (=> b!136310 m!162627))

(declare-fun m!162631 () Bool)

(assert (=> b!136310 m!162631))

(declare-fun m!162633 () Bool)

(assert (=> bm!14946 m!162633))

(declare-fun m!162635 () Bool)

(assert (=> d!42537 m!162635))

(assert (=> b!136308 m!162591))

(assert (=> b!136308 m!162591))

(declare-fun m!162637 () Bool)

(assert (=> b!136308 m!162637))

(declare-fun m!162639 () Bool)

(assert (=> b!136315 m!162639))

(assert (=> b!136305 m!162591))

(assert (=> b!136305 m!162591))

(assert (=> b!136305 m!162637))

(declare-fun m!162641 () Bool)

(assert (=> b!136303 m!162641))

(assert (=> b!136301 m!162591))

(assert (=> b!136301 m!162591))

(declare-fun m!162643 () Bool)

(assert (=> b!136301 m!162643))

(assert (=> b!136191 d!42537))

(declare-fun d!42539 () Bool)

(assert (=> d!42539 (= (array_inv!1401 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvsge (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!136196 d!42539))

(declare-fun d!42541 () Bool)

(assert (=> d!42541 (= (array_inv!1402 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvsge (size!2543 (_values!2872 (v!3220 (underlying!460 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!136196 d!42541))

(declare-fun d!42543 () Bool)

(assert (=> d!42543 (= (valid!529 thiss!992) (valid!530 (v!3220 (underlying!460 thiss!992))))))

(declare-fun bs!5720 () Bool)

(assert (= bs!5720 d!42543))

(declare-fun m!162645 () Bool)

(assert (=> bs!5720 m!162645))

(assert (=> start!14442 d!42543))

(declare-fun d!42545 () Bool)

(assert (=> d!42545 (= (array_inv!1401 (_keys!4642 newMap!16)) (bvsge (size!2542 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136192 d!42545))

(declare-fun d!42547 () Bool)

(assert (=> d!42547 (= (array_inv!1402 (_values!2872 newMap!16)) (bvsge (size!2543 (_values!2872 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136192 d!42547))

(declare-fun d!42549 () Bool)

(declare-fun res!65406 () Bool)

(declare-fun e!88817 () Bool)

(assert (=> d!42549 (=> res!65406 e!88817)))

(assert (=> d!42549 (= res!65406 (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!42549 (= (arrayContainsKey!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!88817)))

(declare-fun b!136323 () Bool)

(declare-fun e!88818 () Bool)

(assert (=> b!136323 (= e!88817 e!88818)))

(declare-fun res!65407 () Bool)

(assert (=> b!136323 (=> (not res!65407) (not e!88818))))

(assert (=> b!136323 (= res!65407 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!136324 () Bool)

(assert (=> b!136324 (= e!88818 (arrayContainsKey!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!42549 (not res!65406)) b!136323))

(assert (= (and b!136323 res!65407) b!136324))

(assert (=> d!42549 m!162591))

(assert (=> b!136324 m!162523))

(declare-fun m!162647 () Bool)

(assert (=> b!136324 m!162647))

(assert (=> b!136193 d!42549))

(declare-fun d!42551 () Bool)

(declare-fun e!88821 () Bool)

(assert (=> d!42551 e!88821))

(declare-fun c!25481 () Bool)

(assert (=> d!42551 (= c!25481 (and (not (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!71175 () Unit!4291)

(declare-fun choose!838 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 64) (_ BitVec 32) Int) Unit!4291)

(assert (=> d!42551 (= lt!71175 (choose!838 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))))))

(assert (=> d!42551 (validMask!0 (mask!7203 (v!3220 (underlying!460 thiss!992))))))

(assert (=> d!42551 (= (lemmaListMapContainsThenArrayContainsFrom!133 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))) lt!71175)))

(declare-fun b!136329 () Bool)

(assert (=> b!136329 (= e!88821 (arrayContainsKey!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!136330 () Bool)

(assert (=> b!136330 (= e!88821 (ite (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!42551 c!25481) b!136329))

(assert (= (and d!42551 (not c!25481)) b!136330))

(assert (=> d!42551 m!162523))

(declare-fun m!162649 () Bool)

(assert (=> d!42551 m!162649))

(assert (=> d!42551 m!162635))

(assert (=> b!136329 m!162523))

(assert (=> b!136329 m!162525))

(assert (=> b!136193 d!42551))

(declare-fun d!42553 () Bool)

(declare-fun e!88827 () Bool)

(assert (=> d!42553 e!88827))

(declare-fun res!65410 () Bool)

(assert (=> d!42553 (=> res!65410 e!88827)))

(declare-fun lt!71187 () Bool)

(assert (=> d!42553 (= res!65410 (not lt!71187))))

(declare-fun lt!71186 () Bool)

(assert (=> d!42553 (= lt!71187 lt!71186)))

(declare-fun lt!71184 () Unit!4291)

(declare-fun e!88826 () Unit!4291)

(assert (=> d!42553 (= lt!71184 e!88826)))

(declare-fun c!25484 () Bool)

(assert (=> d!42553 (= c!25484 lt!71186)))

(declare-fun containsKey!176 (List!1741 (_ BitVec 64)) Bool)

(assert (=> d!42553 (= lt!71186 (containsKey!176 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!42553 (= (contains!901 lt!71093 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) lt!71187)))

(declare-fun b!136337 () Bool)

(declare-fun lt!71185 () Unit!4291)

(assert (=> b!136337 (= e!88826 lt!71185)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!125 (List!1741 (_ BitVec 64)) Unit!4291)

(assert (=> b!136337 (= lt!71185 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-datatypes ((Option!178 0))(
  ( (Some!177 (v!3224 V!3499)) (None!176) )
))
(declare-fun isDefined!126 (Option!178) Bool)

(declare-fun getValueByKey!172 (List!1741 (_ BitVec 64)) Option!178)

(assert (=> b!136337 (isDefined!126 (getValueByKey!172 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun b!136338 () Bool)

(declare-fun Unit!4294 () Unit!4291)

(assert (=> b!136338 (= e!88826 Unit!4294)))

(declare-fun b!136339 () Bool)

(assert (=> b!136339 (= e!88827 (isDefined!126 (getValueByKey!172 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(assert (= (and d!42553 c!25484) b!136337))

(assert (= (and d!42553 (not c!25484)) b!136338))

(assert (= (and d!42553 (not res!65410)) b!136339))

(assert (=> d!42553 m!162523))

(declare-fun m!162651 () Bool)

(assert (=> d!42553 m!162651))

(assert (=> b!136337 m!162523))

(declare-fun m!162653 () Bool)

(assert (=> b!136337 m!162653))

(assert (=> b!136337 m!162523))

(declare-fun m!162655 () Bool)

(assert (=> b!136337 m!162655))

(assert (=> b!136337 m!162655))

(declare-fun m!162657 () Bool)

(assert (=> b!136337 m!162657))

(assert (=> b!136339 m!162523))

(assert (=> b!136339 m!162655))

(assert (=> b!136339 m!162655))

(assert (=> b!136339 m!162657))

(assert (=> b!136201 d!42553))

(declare-fun b!136420 () Bool)

(declare-fun c!25513 () Bool)

(declare-datatypes ((SeekEntryResult!286 0))(
  ( (MissingZero!286 (index!3305 (_ BitVec 32))) (Found!286 (index!3306 (_ BitVec 32))) (Intermediate!286 (undefined!1098 Bool) (index!3307 (_ BitVec 32)) (x!15814 (_ BitVec 32))) (Undefined!286) (MissingVacant!286 (index!3308 (_ BitVec 32))) )
))
(declare-fun lt!71245 () SeekEntryResult!286)

(assert (=> b!136420 (= c!25513 ((_ is MissingVacant!286) lt!71245))))

(declare-fun e!88880 () Bool)

(declare-fun e!88884 () Bool)

(assert (=> b!136420 (= e!88880 e!88884)))

(declare-fun bm!14996 () Bool)

(declare-fun call!15007 () Bool)

(declare-fun call!15002 () Bool)

(assert (=> bm!14996 (= call!15007 call!15002)))

(declare-fun lt!71257 () SeekEntryResult!286)

(declare-fun c!25511 () Bool)

(declare-fun bm!14997 () Bool)

(declare-fun call!15022 () tuple2!2624)

(declare-fun updateHelperNewKey!62 (LongMapFixedSize!1110 (_ BitVec 64) V!3499 (_ BitVec 32)) tuple2!2624)

(assert (=> bm!14997 (= call!15022 (updateHelperNewKey!62 newMap!16 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257))))))

(declare-fun b!136421 () Bool)

(assert (=> b!136421 (= c!25511 ((_ is MissingVacant!286) lt!71257))))

(declare-fun e!88886 () tuple2!2624)

(declare-fun e!88875 () tuple2!2624)

(assert (=> b!136421 (= e!88886 e!88875)))

(declare-fun call!15011 () ListLongMap!1715)

(declare-fun bm!14998 () Bool)

(declare-fun c!25521 () Bool)

(assert (=> bm!14998 (= call!15011 (getCurrentListMap!544 (_keys!4642 newMap!16) (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun b!136422 () Bool)

(declare-fun e!88888 () Bool)

(declare-fun call!15000 () ListLongMap!1715)

(declare-fun call!14999 () ListLongMap!1715)

(assert (=> b!136422 (= e!88888 (= call!15000 call!14999))))

(declare-fun b!136423 () Bool)

(declare-fun res!65443 () Bool)

(declare-fun e!88882 () Bool)

(assert (=> b!136423 (=> (not res!65443) (not e!88882))))

(assert (=> b!136423 (= res!65443 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3305 lt!71245)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136424 () Bool)

(declare-fun e!88876 () ListLongMap!1715)

(assert (=> b!136424 (= e!88876 call!15011)))

(declare-fun b!136425 () Bool)

(declare-fun e!88887 () Bool)

(declare-fun call!15015 () Bool)

(assert (=> b!136425 (= e!88887 (not call!15015))))

(declare-fun b!136426 () Bool)

(declare-fun e!88883 () Bool)

(assert (=> b!136426 (= e!88884 e!88883)))

(declare-fun res!65441 () Bool)

(declare-fun call!15008 () Bool)

(assert (=> b!136426 (= res!65441 call!15008)))

(assert (=> b!136426 (=> (not res!65441) (not e!88883))))

(declare-fun b!136427 () Bool)

(declare-fun e!88879 () Bool)

(assert (=> b!136427 (= e!88879 (not call!15015))))

(declare-fun bm!15000 () Bool)

(declare-fun call!15009 () Bool)

(assert (=> bm!15000 (= call!15009 call!15002)))

(declare-fun b!136428 () Bool)

(declare-fun e!88881 () Bool)

(assert (=> b!136428 (= e!88881 e!88879)))

(declare-fun res!65439 () Bool)

(declare-fun call!15012 () Bool)

(assert (=> b!136428 (= res!65439 call!15012)))

(assert (=> b!136428 (=> (not res!65439) (not e!88879))))

(declare-fun bm!15001 () Bool)

(assert (=> bm!15001 (= call!14999 (map!1413 newMap!16))))

(declare-fun call!15021 () ListLongMap!1715)

(declare-fun bm!15002 () Bool)

(declare-fun c!25514 () Bool)

(declare-fun lt!71242 () (_ BitVec 32))

(declare-fun c!25512 () Bool)

(assert (=> bm!15002 (= call!15021 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun call!15014 () SeekEntryResult!286)

(declare-fun bm!15003 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4806 (_ BitVec 32)) SeekEntryResult!286)

(assert (=> bm!15003 (= call!15014 (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(declare-fun b!136429 () Bool)

(declare-fun e!88878 () Unit!4291)

(declare-fun lt!71243 () Unit!4291)

(assert (=> b!136429 (= e!88878 lt!71243)))

(declare-fun call!15006 () Unit!4291)

(assert (=> b!136429 (= lt!71243 call!15006)))

(declare-fun lt!71253 () SeekEntryResult!286)

(declare-fun call!15016 () SeekEntryResult!286)

(assert (=> b!136429 (= lt!71253 call!15016)))

(declare-fun res!65440 () Bool)

(assert (=> b!136429 (= res!65440 ((_ is Found!286) lt!71253))))

(declare-fun e!88885 () Bool)

(assert (=> b!136429 (=> (not res!65440) (not e!88885))))

(assert (=> b!136429 e!88885))

(declare-fun b!136430 () Bool)

(declare-fun lt!71246 () SeekEntryResult!286)

(assert (=> b!136430 (= e!88881 ((_ is Undefined!286) lt!71246))))

(declare-fun bm!15004 () Bool)

(declare-fun lt!71264 () tuple2!2624)

(assert (=> bm!15004 (= call!15000 (map!1413 (_2!1322 lt!71264)))))

(declare-fun b!136431 () Bool)

(declare-fun e!88870 () tuple2!2624)

(assert (=> b!136431 (= e!88875 e!88870)))

(declare-fun c!25515 () Bool)

(assert (=> b!136431 (= c!25515 ((_ is MissingZero!286) lt!71257))))

(declare-fun b!136432 () Bool)

(declare-fun c!25523 () Bool)

(assert (=> b!136432 (= c!25523 ((_ is MissingVacant!286) lt!71246))))

(declare-fun e!88877 () Bool)

(assert (=> b!136432 (= e!88877 e!88881)))

(declare-fun b!136433 () Bool)

(declare-fun e!88890 () Bool)

(assert (=> b!136433 (= e!88888 e!88890)))

(declare-fun res!65447 () Bool)

(assert (=> b!136433 (= res!65447 (contains!901 call!15000 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> b!136433 (=> (not res!65447) (not e!88890))))

(declare-fun b!136434 () Bool)

(declare-fun res!65445 () Bool)

(assert (=> b!136434 (=> (not res!65445) (not e!88882))))

(assert (=> b!136434 (= res!65445 call!15008)))

(assert (=> b!136434 (= e!88880 e!88882)))

(declare-fun b!136435 () Bool)

(declare-fun call!15001 () ListLongMap!1715)

(assert (=> b!136435 (= e!88876 call!15001)))

(declare-fun bm!15005 () Bool)

(declare-fun c!25522 () Bool)

(assert (=> bm!15005 (= c!25522 c!25521)))

(declare-fun call!15017 () Bool)

(assert (=> bm!15005 (= call!15017 (contains!901 e!88876 (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))

(declare-fun b!136436 () Bool)

(declare-fun res!65444 () Bool)

(assert (=> b!136436 (=> (not res!65444) (not e!88887))))

(assert (=> b!136436 (= res!65444 call!15012)))

(assert (=> b!136436 (= e!88877 e!88887)))

(declare-fun bm!15006 () Bool)

(declare-fun call!15018 () SeekEntryResult!286)

(assert (=> bm!15006 (= call!15018 call!15014)))

(declare-fun b!136437 () Bool)

(declare-fun res!65451 () Bool)

(assert (=> b!136437 (=> (not res!65451) (not e!88887))))

(assert (=> b!136437 (= res!65451 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3305 lt!71246)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15007 () Bool)

(declare-fun call!15004 () Bool)

(assert (=> bm!15007 (= call!15015 call!15004)))

(declare-fun b!136438 () Bool)

(declare-fun Unit!4295 () Unit!4291)

(assert (=> b!136438 (= e!88878 Unit!4295)))

(declare-fun lt!71249 () Unit!4291)

(declare-fun call!15020 () Unit!4291)

(assert (=> b!136438 (= lt!71249 call!15020)))

(assert (=> b!136438 (= lt!71245 call!15016)))

(declare-fun c!25520 () Bool)

(assert (=> b!136438 (= c!25520 ((_ is MissingZero!286) lt!71245))))

(assert (=> b!136438 e!88880))

(declare-fun lt!71255 () Unit!4291)

(assert (=> b!136438 (= lt!71255 lt!71249)))

(assert (=> b!136438 false))

(declare-fun b!136439 () Bool)

(declare-fun e!88871 () Unit!4291)

(declare-fun Unit!4296 () Unit!4291)

(assert (=> b!136439 (= e!88871 Unit!4296)))

(declare-fun lt!71258 () Unit!4291)

(assert (=> b!136439 (= lt!71258 call!15006)))

(declare-fun lt!71244 () SeekEntryResult!286)

(assert (=> b!136439 (= lt!71244 call!15018)))

(declare-fun res!65448 () Bool)

(assert (=> b!136439 (= res!65448 ((_ is Found!286) lt!71244))))

(declare-fun e!88872 () Bool)

(assert (=> b!136439 (=> (not res!65448) (not e!88872))))

(assert (=> b!136439 e!88872))

(declare-fun lt!71265 () Unit!4291)

(assert (=> b!136439 (= lt!71265 lt!71258)))

(assert (=> b!136439 false))

(declare-fun bm!15008 () Bool)

(assert (=> bm!15008 (= call!15004 (arrayContainsKey!0 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!15009 () Bool)

(assert (=> bm!15009 (= call!15016 call!15014)))

(declare-fun bm!15010 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!62 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 64) Int) Unit!4291)

(assert (=> bm!15010 (= call!15006 (lemmaInListMapThenSeekEntryOrOpenFindsIt!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (defaultEntry!2889 newMap!16)))))

(declare-fun b!136440 () Bool)

(declare-fun res!65446 () Bool)

(assert (=> b!136440 (= res!65446 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3308 lt!71245)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136440 (=> (not res!65446) (not e!88883))))

(declare-fun b!136441 () Bool)

(assert (=> b!136441 (= e!88890 (= call!15000 (+!171 call!14999 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!15011 () Bool)

(declare-fun call!15005 () Bool)

(assert (=> bm!15011 (= call!15005 call!15004)))

(declare-fun b!136442 () Bool)

(declare-fun res!65442 () Bool)

(assert (=> b!136442 (= res!65442 call!15007)))

(assert (=> b!136442 (=> (not res!65442) (not e!88872))))

(declare-fun b!136443 () Bool)

(declare-fun lt!71266 () Unit!4291)

(assert (=> b!136443 (= e!88871 lt!71266)))

(assert (=> b!136443 (= lt!71266 call!15020)))

(assert (=> b!136443 (= lt!71246 call!15018)))

(declare-fun c!25517 () Bool)

(assert (=> b!136443 (= c!25517 ((_ is MissingZero!286) lt!71246))))

(assert (=> b!136443 e!88877))

(declare-fun bm!15012 () Bool)

(assert (=> bm!15012 (= call!15012 call!15007)))

(declare-fun bm!15013 () Bool)

(assert (=> bm!15013 (= call!15008 call!15009)))

(declare-fun b!136444 () Bool)

(declare-fun lt!71247 () Unit!4291)

(declare-fun lt!71254 () Unit!4291)

(assert (=> b!136444 (= lt!71247 lt!71254)))

(declare-fun call!15019 () ListLongMap!1715)

(declare-fun call!15013 () ListLongMap!1715)

(assert (=> b!136444 (= call!15019 call!15013)))

(declare-fun lt!71262 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!62 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 V!3499 Int) Unit!4291)

(assert (=> b!136444 (= lt!71254 (lemmaChangeLongMinValueKeyThenAddPairToListMap!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2889 newMap!16)))))

(assert (=> b!136444 (= lt!71262 (bvor (extraKeys!2650 newMap!16) #b00000000000000000000000000000010))))

(declare-fun e!88874 () tuple2!2624)

(assert (=> b!136444 (= e!88874 (tuple2!2625 true (LongMapFixedSize!1111 (defaultEntry!2889 newMap!16) (mask!7203 newMap!16) (bvor (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!604 newMap!16) (_keys!4642 newMap!16) (_values!2872 newMap!16) (_vacant!604 newMap!16))))))

(declare-fun b!136445 () Bool)

(declare-fun lt!71259 () Unit!4291)

(assert (=> b!136445 (= lt!71259 e!88871)))

(declare-fun c!25519 () Bool)

(assert (=> b!136445 (= c!25519 call!15017)))

(assert (=> b!136445 (= e!88886 (tuple2!2625 false newMap!16))))

(declare-fun b!136446 () Bool)

(assert (=> b!136446 (= e!88884 ((_ is Undefined!286) lt!71245))))

(declare-fun b!136447 () Bool)

(declare-fun lt!71260 () Unit!4291)

(declare-fun lt!71251 () Unit!4291)

(assert (=> b!136447 (= lt!71260 lt!71251)))

(assert (=> b!136447 call!15017))

(declare-fun lt!71250 () array!4808)

(declare-fun lemmaValidKeyInArrayIsInListMap!120 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 32) Int) Unit!4291)

(assert (=> b!136447 (= lt!71251 (lemmaValidKeyInArrayIsInListMap!120 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (index!3306 lt!71257) (defaultEntry!2889 newMap!16)))))

(assert (=> b!136447 (= lt!71250 (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))))

(declare-fun lt!71261 () Unit!4291)

(declare-fun lt!71256 () Unit!4291)

(assert (=> b!136447 (= lt!71261 lt!71256)))

(declare-fun call!15003 () ListLongMap!1715)

(assert (=> b!136447 (= call!15003 call!15011)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!62 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 32) (_ BitVec 64) V!3499 Int) Unit!4291)

(assert (=> b!136447 (= lt!71256 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (index!3306 lt!71257) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71263 () Unit!4291)

(assert (=> b!136447 (= lt!71263 e!88878)))

(declare-fun c!25516 () Bool)

(assert (=> b!136447 (= c!25516 (contains!901 call!15021 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> b!136447 (= e!88870 (tuple2!2625 true (LongMapFixedSize!1111 (defaultEntry!2889 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (_size!604 newMap!16) (_keys!4642 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (_vacant!604 newMap!16))))))

(declare-fun b!136448 () Bool)

(declare-fun res!65450 () Bool)

(assert (=> b!136448 (= res!65450 call!15009)))

(assert (=> b!136448 (=> (not res!65450) (not e!88885))))

(declare-fun bm!15014 () Bool)

(assert (=> bm!15014 (= call!15013 call!15001)))

(declare-fun b!136449 () Bool)

(assert (=> b!136449 (= e!88883 (not call!15005))))

(declare-fun d!42555 () Bool)

(declare-fun e!88889 () Bool)

(assert (=> d!42555 e!88889))

(declare-fun res!65449 () Bool)

(assert (=> d!42555 (=> (not res!65449) (not e!88889))))

(assert (=> d!42555 (= res!65449 (valid!530 (_2!1322 lt!71264)))))

(declare-fun e!88873 () tuple2!2624)

(assert (=> d!42555 (= lt!71264 e!88873)))

(assert (=> d!42555 (= c!25512 (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvneg (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(assert (=> d!42555 (valid!530 newMap!16)))

(assert (=> d!42555 (= (update!195 newMap!16 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!71264)))

(declare-fun bm!14999 () Bool)

(declare-fun call!15010 () ListLongMap!1715)

(assert (=> bm!14999 (= call!15010 call!15021)))

(declare-fun b!136450 () Bool)

(declare-fun lt!71252 () tuple2!2624)

(assert (=> b!136450 (= lt!71252 call!15022)))

(assert (=> b!136450 (= e!88870 (tuple2!2625 (_1!1322 lt!71252) (_2!1322 lt!71252)))))

(declare-fun bm!15015 () Bool)

(assert (=> bm!15015 (= call!15019 call!15003)))

(declare-fun b!136451 () Bool)

(assert (=> b!136451 (= e!88873 e!88874)))

(assert (=> b!136451 (= c!25514 (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!15016 () Bool)

(assert (=> bm!15016 (= call!15001 (getCurrentListMap!544 (_keys!4642 newMap!16) (ite c!25512 (_values!2872 newMap!16) lt!71250) (mask!7203 newMap!16) (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) (zeroValue!2742 newMap!16) (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun bm!15017 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!15017 (= call!15002 (inRange!0 (ite c!25521 (ite c!25519 (index!3306 lt!71244) (ite c!25517 (index!3305 lt!71246) (index!3308 lt!71246))) (ite c!25516 (index!3306 lt!71253) (ite c!25520 (index!3305 lt!71245) (index!3308 lt!71245)))) (mask!7203 newMap!16)))))

(declare-fun bm!15018 () Bool)

(assert (=> bm!15018 (= call!15003 (+!171 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021) (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!15019 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!62 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 64) Int) Unit!4291)

(assert (=> bm!15019 (= call!15020 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (defaultEntry!2889 newMap!16)))))

(declare-fun b!136452 () Bool)

(assert (=> b!136452 (= e!88872 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71244)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun b!136453 () Bool)

(assert (=> b!136453 (= e!88882 (not call!15005))))

(declare-fun b!136454 () Bool)

(declare-fun lt!71248 () Unit!4291)

(declare-fun lt!71267 () Unit!4291)

(assert (=> b!136454 (= lt!71248 lt!71267)))

(assert (=> b!136454 (= call!15019 call!15010)))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!62 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 V!3499 Int) Unit!4291)

(assert (=> b!136454 (= lt!71267 (lemmaChangeZeroKeyThenAddPairToListMap!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) lt!71242 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) (defaultEntry!2889 newMap!16)))))

(assert (=> b!136454 (= lt!71242 (bvor (extraKeys!2650 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!136454 (= e!88874 (tuple2!2625 true (LongMapFixedSize!1111 (defaultEntry!2889 newMap!16) (mask!7203 newMap!16) (bvor (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) (_size!604 newMap!16) (_keys!4642 newMap!16) (_values!2872 newMap!16) (_vacant!604 newMap!16))))))

(declare-fun b!136455 () Bool)

(assert (=> b!136455 (= e!88889 e!88888)))

(declare-fun c!25518 () Bool)

(assert (=> b!136455 (= c!25518 (_1!1322 lt!71264))))

(declare-fun b!136456 () Bool)

(assert (=> b!136456 (= e!88873 e!88886)))

(assert (=> b!136456 (= lt!71257 (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(assert (=> b!136456 (= c!25521 ((_ is Undefined!286) lt!71257))))

(declare-fun b!136457 () Bool)

(declare-fun lt!71268 () tuple2!2624)

(assert (=> b!136457 (= e!88875 (tuple2!2625 (_1!1322 lt!71268) (_2!1322 lt!71268)))))

(assert (=> b!136457 (= lt!71268 call!15022)))

(declare-fun b!136458 () Bool)

(declare-fun res!65452 () Bool)

(assert (=> b!136458 (= res!65452 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3308 lt!71246)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136458 (=> (not res!65452) (not e!88879))))

(declare-fun b!136459 () Bool)

(assert (=> b!136459 (= e!88885 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71253)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (= (and d!42555 c!25512) b!136451))

(assert (= (and d!42555 (not c!25512)) b!136456))

(assert (= (and b!136451 c!25514) b!136454))

(assert (= (and b!136451 (not c!25514)) b!136444))

(assert (= (or b!136454 b!136444) bm!15014))

(assert (= (or b!136454 b!136444) bm!14999))

(assert (= (or b!136454 b!136444) bm!15015))

(assert (= (and b!136456 c!25521) b!136445))

(assert (= (and b!136456 (not c!25521)) b!136421))

(assert (= (and b!136445 c!25519) b!136439))

(assert (= (and b!136445 (not c!25519)) b!136443))

(assert (= (and b!136439 res!65448) b!136442))

(assert (= (and b!136442 res!65442) b!136452))

(assert (= (and b!136443 c!25517) b!136436))

(assert (= (and b!136443 (not c!25517)) b!136432))

(assert (= (and b!136436 res!65444) b!136437))

(assert (= (and b!136437 res!65451) b!136425))

(assert (= (and b!136432 c!25523) b!136428))

(assert (= (and b!136432 (not c!25523)) b!136430))

(assert (= (and b!136428 res!65439) b!136458))

(assert (= (and b!136458 res!65452) b!136427))

(assert (= (or b!136436 b!136428) bm!15012))

(assert (= (or b!136425 b!136427) bm!15007))

(assert (= (or b!136442 bm!15012) bm!14996))

(assert (= (or b!136439 b!136443) bm!15006))

(assert (= (and b!136421 c!25511) b!136457))

(assert (= (and b!136421 (not c!25511)) b!136431))

(assert (= (and b!136431 c!25515) b!136450))

(assert (= (and b!136431 (not c!25515)) b!136447))

(assert (= (and b!136447 c!25516) b!136429))

(assert (= (and b!136447 (not c!25516)) b!136438))

(assert (= (and b!136429 res!65440) b!136448))

(assert (= (and b!136448 res!65450) b!136459))

(assert (= (and b!136438 c!25520) b!136434))

(assert (= (and b!136438 (not c!25520)) b!136420))

(assert (= (and b!136434 res!65445) b!136423))

(assert (= (and b!136423 res!65443) b!136453))

(assert (= (and b!136420 c!25513) b!136426))

(assert (= (and b!136420 (not c!25513)) b!136446))

(assert (= (and b!136426 res!65441) b!136440))

(assert (= (and b!136440 res!65446) b!136449))

(assert (= (or b!136434 b!136426) bm!15013))

(assert (= (or b!136453 b!136449) bm!15011))

(assert (= (or b!136448 bm!15013) bm!15000))

(assert (= (or b!136429 b!136438) bm!15009))

(assert (= (or b!136457 b!136450) bm!14997))

(assert (= (or bm!15006 bm!15009) bm!15003))

(assert (= (or bm!14996 bm!15000) bm!15017))

(assert (= (or b!136439 b!136429) bm!15010))

(assert (= (or b!136443 b!136438) bm!15019))

(assert (= (or b!136445 b!136447) bm!14998))

(assert (= (or bm!15007 bm!15011) bm!15008))

(assert (= (or b!136445 b!136447) bm!15005))

(assert (= (and bm!15005 c!25522) b!136424))

(assert (= (and bm!15005 (not c!25522)) b!136435))

(assert (= (or bm!15014 b!136435) bm!15016))

(assert (= (or bm!14999 b!136447) bm!15002))

(assert (= (or bm!15015 b!136447) bm!15018))

(assert (= (and d!42555 res!65449) b!136455))

(assert (= (and b!136455 c!25518) b!136433))

(assert (= (and b!136455 (not c!25518)) b!136422))

(assert (= (and b!136433 res!65447) b!136441))

(assert (= (or b!136441 b!136422) bm!15001))

(assert (= (or b!136433 b!136441 b!136422) bm!15004))

(declare-fun m!162659 () Bool)

(assert (=> b!136423 m!162659))

(assert (=> bm!15008 m!162523))

(declare-fun m!162661 () Bool)

(assert (=> bm!15008 m!162661))

(assert (=> bm!15010 m!162523))

(declare-fun m!162663 () Bool)

(assert (=> bm!15010 m!162663))

(declare-fun m!162665 () Bool)

(assert (=> bm!15002 m!162665))

(declare-fun m!162667 () Bool)

(assert (=> b!136440 m!162667))

(declare-fun m!162669 () Bool)

(assert (=> bm!15018 m!162669))

(assert (=> b!136456 m!162523))

(declare-fun m!162671 () Bool)

(assert (=> b!136456 m!162671))

(declare-fun m!162673 () Bool)

(assert (=> b!136437 m!162673))

(declare-fun m!162675 () Bool)

(assert (=> bm!14998 m!162675))

(declare-fun m!162677 () Bool)

(assert (=> bm!14998 m!162677))

(assert (=> b!136454 m!162543))

(declare-fun m!162679 () Bool)

(assert (=> b!136454 m!162679))

(assert (=> bm!14997 m!162523))

(assert (=> bm!14997 m!162543))

(declare-fun m!162681 () Bool)

(assert (=> bm!14997 m!162681))

(declare-fun m!162683 () Bool)

(assert (=> bm!15016 m!162683))

(declare-fun m!162685 () Bool)

(assert (=> d!42555 m!162685))

(assert (=> d!42555 m!162517))

(assert (=> bm!15001 m!162531))

(declare-fun m!162687 () Bool)

(assert (=> bm!15017 m!162687))

(declare-fun m!162689 () Bool)

(assert (=> b!136441 m!162689))

(assert (=> bm!15003 m!162523))

(assert (=> bm!15003 m!162671))

(declare-fun m!162691 () Bool)

(assert (=> bm!15004 m!162691))

(assert (=> bm!15019 m!162523))

(declare-fun m!162693 () Bool)

(assert (=> bm!15019 m!162693))

(assert (=> b!136444 m!162543))

(declare-fun m!162695 () Bool)

(assert (=> b!136444 m!162695))

(declare-fun m!162697 () Bool)

(assert (=> b!136447 m!162697))

(assert (=> b!136447 m!162675))

(assert (=> b!136447 m!162523))

(assert (=> b!136447 m!162543))

(declare-fun m!162699 () Bool)

(assert (=> b!136447 m!162699))

(assert (=> b!136447 m!162523))

(declare-fun m!162701 () Bool)

(assert (=> b!136447 m!162701))

(declare-fun m!162703 () Bool)

(assert (=> b!136459 m!162703))

(declare-fun m!162705 () Bool)

(assert (=> bm!15005 m!162705))

(declare-fun m!162707 () Bool)

(assert (=> bm!15005 m!162707))

(assert (=> b!136433 m!162523))

(declare-fun m!162709 () Bool)

(assert (=> b!136433 m!162709))

(declare-fun m!162711 () Bool)

(assert (=> b!136458 m!162711))

(declare-fun m!162713 () Bool)

(assert (=> b!136452 m!162713))

(assert (=> b!136201 d!42555))

(declare-fun d!42557 () Bool)

(declare-fun c!25526 () Bool)

(assert (=> d!42557 (= c!25526 ((_ is ValueCellFull!1101) (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun e!88893 () V!3499)

(assert (=> d!42557 (= (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!88893)))

(declare-fun b!136464 () Bool)

(declare-fun get!1500 (ValueCell!1101 V!3499) V!3499)

(assert (=> b!136464 (= e!88893 (get!1500 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!136465 () Bool)

(declare-fun get!1501 (ValueCell!1101 V!3499) V!3499)

(assert (=> b!136465 (= e!88893 (get!1501 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42557 c!25526) b!136464))

(assert (= (and d!42557 (not c!25526)) b!136465))

(assert (=> b!136464 m!162539))

(assert (=> b!136464 m!162541))

(declare-fun m!162715 () Bool)

(assert (=> b!136464 m!162715))

(assert (=> b!136465 m!162539))

(assert (=> b!136465 m!162541))

(declare-fun m!162717 () Bool)

(assert (=> b!136465 m!162717))

(assert (=> b!136201 d!42557))

(declare-fun d!42559 () Bool)

(declare-fun res!65459 () Bool)

(declare-fun e!88896 () Bool)

(assert (=> d!42559 (=> (not res!65459) (not e!88896))))

(declare-fun simpleValid!92 (LongMapFixedSize!1110) Bool)

(assert (=> d!42559 (= res!65459 (simpleValid!92 newMap!16))))

(assert (=> d!42559 (= (valid!530 newMap!16) e!88896)))

(declare-fun b!136472 () Bool)

(declare-fun res!65460 () Bool)

(assert (=> b!136472 (=> (not res!65460) (not e!88896))))

(declare-fun arrayCountValidKeys!0 (array!4806 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!136472 (= res!65460 (= (arrayCountValidKeys!0 (_keys!4642 newMap!16) #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (_size!604 newMap!16)))))

(declare-fun b!136473 () Bool)

(declare-fun res!65461 () Bool)

(assert (=> b!136473 (=> (not res!65461) (not e!88896))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4806 (_ BitVec 32)) Bool)

(assert (=> b!136473 (= res!65461 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(declare-fun b!136474 () Bool)

(declare-datatypes ((List!1743 0))(
  ( (Nil!1740) (Cons!1739 (h!2345 (_ BitVec 64)) (t!6247 List!1743)) )
))
(declare-fun arrayNoDuplicates!0 (array!4806 (_ BitVec 32) List!1743) Bool)

(assert (=> b!136474 (= e!88896 (arrayNoDuplicates!0 (_keys!4642 newMap!16) #b00000000000000000000000000000000 Nil!1740))))

(assert (= (and d!42559 res!65459) b!136472))

(assert (= (and b!136472 res!65460) b!136473))

(assert (= (and b!136473 res!65461) b!136474))

(declare-fun m!162719 () Bool)

(assert (=> d!42559 m!162719))

(declare-fun m!162721 () Bool)

(assert (=> b!136472 m!162721))

(declare-fun m!162723 () Bool)

(assert (=> b!136473 m!162723))

(declare-fun m!162725 () Bool)

(assert (=> b!136474 m!162725))

(assert (=> b!136202 d!42559))

(declare-fun condMapEmpty!4699 () Bool)

(declare-fun mapDefault!4699 () ValueCell!1101)

(assert (=> mapNonEmpty!4690 (= condMapEmpty!4699 (= mapRest!4690 ((as const (Array (_ BitVec 32) ValueCell!1101)) mapDefault!4699)))))

(declare-fun e!88902 () Bool)

(declare-fun mapRes!4699 () Bool)

(assert (=> mapNonEmpty!4690 (= tp!11287 (and e!88902 mapRes!4699))))

(declare-fun mapNonEmpty!4699 () Bool)

(declare-fun tp!11305 () Bool)

(declare-fun e!88901 () Bool)

(assert (=> mapNonEmpty!4699 (= mapRes!4699 (and tp!11305 e!88901))))

(declare-fun mapKey!4699 () (_ BitVec 32))

(declare-fun mapRest!4699 () (Array (_ BitVec 32) ValueCell!1101))

(declare-fun mapValue!4699 () ValueCell!1101)

(assert (=> mapNonEmpty!4699 (= mapRest!4690 (store mapRest!4699 mapKey!4699 mapValue!4699))))

(declare-fun mapIsEmpty!4699 () Bool)

(assert (=> mapIsEmpty!4699 mapRes!4699))

(declare-fun b!136482 () Bool)

(assert (=> b!136482 (= e!88902 tp_is_empty!2889)))

(declare-fun b!136481 () Bool)

(assert (=> b!136481 (= e!88901 tp_is_empty!2889)))

(assert (= (and mapNonEmpty!4690 condMapEmpty!4699) mapIsEmpty!4699))

(assert (= (and mapNonEmpty!4690 (not condMapEmpty!4699)) mapNonEmpty!4699))

(assert (= (and mapNonEmpty!4699 ((_ is ValueCellFull!1101) mapValue!4699)) b!136481))

(assert (= (and mapNonEmpty!4690 ((_ is ValueCellFull!1101) mapDefault!4699)) b!136482))

(declare-fun m!162727 () Bool)

(assert (=> mapNonEmpty!4699 m!162727))

(declare-fun condMapEmpty!4700 () Bool)

(declare-fun mapDefault!4700 () ValueCell!1101)

(assert (=> mapNonEmpty!4689 (= condMapEmpty!4700 (= mapRest!4689 ((as const (Array (_ BitVec 32) ValueCell!1101)) mapDefault!4700)))))

(declare-fun e!88904 () Bool)

(declare-fun mapRes!4700 () Bool)

(assert (=> mapNonEmpty!4689 (= tp!11290 (and e!88904 mapRes!4700))))

(declare-fun mapNonEmpty!4700 () Bool)

(declare-fun tp!11306 () Bool)

(declare-fun e!88903 () Bool)

(assert (=> mapNonEmpty!4700 (= mapRes!4700 (and tp!11306 e!88903))))

(declare-fun mapKey!4700 () (_ BitVec 32))

(declare-fun mapValue!4700 () ValueCell!1101)

(declare-fun mapRest!4700 () (Array (_ BitVec 32) ValueCell!1101))

(assert (=> mapNonEmpty!4700 (= mapRest!4689 (store mapRest!4700 mapKey!4700 mapValue!4700))))

(declare-fun mapIsEmpty!4700 () Bool)

(assert (=> mapIsEmpty!4700 mapRes!4700))

(declare-fun b!136484 () Bool)

(assert (=> b!136484 (= e!88904 tp_is_empty!2889)))

(declare-fun b!136483 () Bool)

(assert (=> b!136483 (= e!88903 tp_is_empty!2889)))

(assert (= (and mapNonEmpty!4689 condMapEmpty!4700) mapIsEmpty!4700))

(assert (= (and mapNonEmpty!4689 (not condMapEmpty!4700)) mapNonEmpty!4700))

(assert (= (and mapNonEmpty!4700 ((_ is ValueCellFull!1101) mapValue!4700)) b!136483))

(assert (= (and mapNonEmpty!4689 ((_ is ValueCellFull!1101) mapDefault!4700)) b!136484))

(declare-fun m!162729 () Bool)

(assert (=> mapNonEmpty!4700 m!162729))

(declare-fun b_lambda!6119 () Bool)

(assert (= b_lambda!6117 (or (and b!136196 b_free!2945) (and b!136192 b_free!2947 (= (defaultEntry!2889 newMap!16) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))))) b_lambda!6119)))

(check-sat (not b_next!2947) (not b_lambda!6119) (not b!136456) (not b_lambda!6115) (not mapNonEmpty!4699) (not b!136454) (not d!42555) (not b!136324) (not d!42535) (not b!136310) (not bm!15008) (not d!42543) (not b_next!2945) (not d!42551) (not b!136465) (not bm!15003) (not bm!14997) (not bm!15001) (not b!136308) (not mapNonEmpty!4700) (not b!136315) (not b!136444) (not bm!14998) (not bm!14946) tp_is_empty!2889 (not d!42553) (not bm!14947) (not b!136301) (not b!136433) (not bm!14942) (not b!136312) (not bm!15004) (not b!136473) (not b!136464) (not b!136474) (not bm!15010) (not b!136339) (not bm!15017) (not b!136303) (not d!42537) (not b!136472) (not b!136337) (not bm!15019) (not bm!14944) (not b!136447) b_and!8465 (not bm!15005) b_and!8467 (not b!136441) (not d!42559) (not bm!15016) (not b!136305) (not b!136317) (not bm!15002) (not b!136329) (not bm!15018))
(check-sat b_and!8465 b_and!8467 (not b_next!2945) (not b_next!2947))
(get-model)

(declare-fun b!136495 () Bool)

(declare-fun e!88913 () Bool)

(declare-fun contains!903 (List!1743 (_ BitVec 64)) Bool)

(assert (=> b!136495 (= e!88913 (contains!903 Nil!1740 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136496 () Bool)

(declare-fun e!88916 () Bool)

(declare-fun e!88914 () Bool)

(assert (=> b!136496 (= e!88916 e!88914)))

(declare-fun res!65470 () Bool)

(assert (=> b!136496 (=> (not res!65470) (not e!88914))))

(assert (=> b!136496 (= res!65470 (not e!88913))))

(declare-fun res!65468 () Bool)

(assert (=> b!136496 (=> (not res!65468) (not e!88913))))

(assert (=> b!136496 (= res!65468 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136497 () Bool)

(declare-fun e!88915 () Bool)

(declare-fun call!15025 () Bool)

(assert (=> b!136497 (= e!88915 call!15025)))

(declare-fun b!136498 () Bool)

(assert (=> b!136498 (= e!88915 call!15025)))

(declare-fun b!136499 () Bool)

(assert (=> b!136499 (= e!88914 e!88915)))

(declare-fun c!25529 () Bool)

(assert (=> b!136499 (= c!25529 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!42561 () Bool)

(declare-fun res!65469 () Bool)

(assert (=> d!42561 (=> res!65469 e!88916)))

(assert (=> d!42561 (= res!65469 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42561 (= (arrayNoDuplicates!0 (_keys!4642 newMap!16) #b00000000000000000000000000000000 Nil!1740) e!88916)))

(declare-fun bm!15022 () Bool)

(assert (=> bm!15022 (= call!15025 (arrayNoDuplicates!0 (_keys!4642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!25529 (Cons!1739 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) Nil!1740) Nil!1740)))))

(assert (= (and d!42561 (not res!65469)) b!136496))

(assert (= (and b!136496 res!65468) b!136495))

(assert (= (and b!136496 res!65470) b!136499))

(assert (= (and b!136499 c!25529) b!136498))

(assert (= (and b!136499 (not c!25529)) b!136497))

(assert (= (or b!136498 b!136497) bm!15022))

(declare-fun m!162731 () Bool)

(assert (=> b!136495 m!162731))

(assert (=> b!136495 m!162731))

(declare-fun m!162733 () Bool)

(assert (=> b!136495 m!162733))

(assert (=> b!136496 m!162731))

(assert (=> b!136496 m!162731))

(declare-fun m!162735 () Bool)

(assert (=> b!136496 m!162735))

(assert (=> b!136499 m!162731))

(assert (=> b!136499 m!162731))

(assert (=> b!136499 m!162735))

(assert (=> bm!15022 m!162731))

(declare-fun m!162737 () Bool)

(assert (=> bm!15022 m!162737))

(assert (=> b!136474 d!42561))

(declare-fun b!136512 () Bool)

(declare-fun e!88923 () SeekEntryResult!286)

(declare-fun lt!71276 () SeekEntryResult!286)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4806 (_ BitVec 32)) SeekEntryResult!286)

(assert (=> b!136512 (= e!88923 (seekKeyOrZeroReturnVacant!0 (x!15814 lt!71276) (index!3307 lt!71276) (index!3307 lt!71276) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(declare-fun lt!71277 () SeekEntryResult!286)

(declare-fun d!42563 () Bool)

(assert (=> d!42563 (and (or ((_ is Undefined!286) lt!71277) (not ((_ is Found!286) lt!71277)) (and (bvsge (index!3306 lt!71277) #b00000000000000000000000000000000) (bvslt (index!3306 lt!71277) (size!2542 (_keys!4642 newMap!16))))) (or ((_ is Undefined!286) lt!71277) ((_ is Found!286) lt!71277) (not ((_ is MissingZero!286) lt!71277)) (and (bvsge (index!3305 lt!71277) #b00000000000000000000000000000000) (bvslt (index!3305 lt!71277) (size!2542 (_keys!4642 newMap!16))))) (or ((_ is Undefined!286) lt!71277) ((_ is Found!286) lt!71277) ((_ is MissingZero!286) lt!71277) (not ((_ is MissingVacant!286) lt!71277)) (and (bvsge (index!3308 lt!71277) #b00000000000000000000000000000000) (bvslt (index!3308 lt!71277) (size!2542 (_keys!4642 newMap!16))))) (or ((_ is Undefined!286) lt!71277) (ite ((_ is Found!286) lt!71277) (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71277)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (ite ((_ is MissingZero!286) lt!71277) (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3305 lt!71277)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!286) lt!71277) (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3308 lt!71277)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!88925 () SeekEntryResult!286)

(assert (=> d!42563 (= lt!71277 e!88925)))

(declare-fun c!25536 () Bool)

(assert (=> d!42563 (= c!25536 (and ((_ is Intermediate!286) lt!71276) (undefined!1098 lt!71276)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4806 (_ BitVec 32)) SeekEntryResult!286)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!42563 (= lt!71276 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (mask!7203 newMap!16)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(assert (=> d!42563 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42563 (= (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)) lt!71277)))

(declare-fun b!136513 () Bool)

(assert (=> b!136513 (= e!88925 Undefined!286)))

(declare-fun b!136514 () Bool)

(declare-fun e!88924 () SeekEntryResult!286)

(assert (=> b!136514 (= e!88924 (Found!286 (index!3307 lt!71276)))))

(declare-fun b!136515 () Bool)

(assert (=> b!136515 (= e!88923 (MissingZero!286 (index!3307 lt!71276)))))

(declare-fun b!136516 () Bool)

(declare-fun c!25538 () Bool)

(declare-fun lt!71275 () (_ BitVec 64))

(assert (=> b!136516 (= c!25538 (= lt!71275 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136516 (= e!88924 e!88923)))

(declare-fun b!136517 () Bool)

(assert (=> b!136517 (= e!88925 e!88924)))

(assert (=> b!136517 (= lt!71275 (select (arr!2272 (_keys!4642 newMap!16)) (index!3307 lt!71276)))))

(declare-fun c!25537 () Bool)

(assert (=> b!136517 (= c!25537 (= lt!71275 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (= (and d!42563 c!25536) b!136513))

(assert (= (and d!42563 (not c!25536)) b!136517))

(assert (= (and b!136517 c!25537) b!136514))

(assert (= (and b!136517 (not c!25537)) b!136516))

(assert (= (and b!136516 c!25538) b!136515))

(assert (= (and b!136516 (not c!25538)) b!136512))

(assert (=> b!136512 m!162523))

(declare-fun m!162739 () Bool)

(assert (=> b!136512 m!162739))

(assert (=> d!42563 m!162523))

(declare-fun m!162741 () Bool)

(assert (=> d!42563 m!162741))

(assert (=> d!42563 m!162741))

(assert (=> d!42563 m!162523))

(declare-fun m!162743 () Bool)

(assert (=> d!42563 m!162743))

(declare-fun m!162745 () Bool)

(assert (=> d!42563 m!162745))

(declare-fun m!162747 () Bool)

(assert (=> d!42563 m!162747))

(declare-fun m!162749 () Bool)

(assert (=> d!42563 m!162749))

(declare-fun m!162751 () Bool)

(assert (=> d!42563 m!162751))

(declare-fun m!162753 () Bool)

(assert (=> b!136517 m!162753))

(assert (=> b!136456 d!42563))

(declare-fun d!42565 () Bool)

(declare-fun e!88927 () Bool)

(assert (=> d!42565 e!88927))

(declare-fun res!65471 () Bool)

(assert (=> d!42565 (=> res!65471 e!88927)))

(declare-fun lt!71281 () Bool)

(assert (=> d!42565 (= res!65471 (not lt!71281))))

(declare-fun lt!71280 () Bool)

(assert (=> d!42565 (= lt!71281 lt!71280)))

(declare-fun lt!71278 () Unit!4291)

(declare-fun e!88926 () Unit!4291)

(assert (=> d!42565 (= lt!71278 e!88926)))

(declare-fun c!25539 () Bool)

(assert (=> d!42565 (= c!25539 lt!71280)))

(assert (=> d!42565 (= lt!71280 (containsKey!176 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42565 (= (contains!901 lt!71161 #b0000000000000000000000000000000000000000000000000000000000000000) lt!71281)))

(declare-fun b!136518 () Bool)

(declare-fun lt!71279 () Unit!4291)

(assert (=> b!136518 (= e!88926 lt!71279)))

(assert (=> b!136518 (= lt!71279 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136518 (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136519 () Bool)

(declare-fun Unit!4297 () Unit!4291)

(assert (=> b!136519 (= e!88926 Unit!4297)))

(declare-fun b!136520 () Bool)

(assert (=> b!136520 (= e!88927 (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42565 c!25539) b!136518))

(assert (= (and d!42565 (not c!25539)) b!136519))

(assert (= (and d!42565 (not res!65471)) b!136520))

(declare-fun m!162755 () Bool)

(assert (=> d!42565 m!162755))

(declare-fun m!162757 () Bool)

(assert (=> b!136518 m!162757))

(declare-fun m!162759 () Bool)

(assert (=> b!136518 m!162759))

(assert (=> b!136518 m!162759))

(declare-fun m!162761 () Bool)

(assert (=> b!136518 m!162761))

(assert (=> b!136520 m!162759))

(assert (=> b!136520 m!162759))

(assert (=> b!136520 m!162761))

(assert (=> bm!14942 d!42565))

(declare-fun d!42567 () Bool)

(declare-fun res!65472 () Bool)

(declare-fun e!88928 () Bool)

(assert (=> d!42567 (=> (not res!65472) (not e!88928))))

(assert (=> d!42567 (= res!65472 (simpleValid!92 (_2!1322 lt!71264)))))

(assert (=> d!42567 (= (valid!530 (_2!1322 lt!71264)) e!88928)))

(declare-fun b!136521 () Bool)

(declare-fun res!65473 () Bool)

(assert (=> b!136521 (=> (not res!65473) (not e!88928))))

(assert (=> b!136521 (= res!65473 (= (arrayCountValidKeys!0 (_keys!4642 (_2!1322 lt!71264)) #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))) (_size!604 (_2!1322 lt!71264))))))

(declare-fun b!136522 () Bool)

(declare-fun res!65474 () Bool)

(assert (=> b!136522 (=> (not res!65474) (not e!88928))))

(assert (=> b!136522 (= res!65474 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4642 (_2!1322 lt!71264)) (mask!7203 (_2!1322 lt!71264))))))

(declare-fun b!136523 () Bool)

(assert (=> b!136523 (= e!88928 (arrayNoDuplicates!0 (_keys!4642 (_2!1322 lt!71264)) #b00000000000000000000000000000000 Nil!1740))))

(assert (= (and d!42567 res!65472) b!136521))

(assert (= (and b!136521 res!65473) b!136522))

(assert (= (and b!136522 res!65474) b!136523))

(declare-fun m!162763 () Bool)

(assert (=> d!42567 m!162763))

(declare-fun m!162765 () Bool)

(assert (=> b!136521 m!162765))

(declare-fun m!162767 () Bool)

(assert (=> b!136522 m!162767))

(declare-fun m!162769 () Bool)

(assert (=> b!136523 m!162769))

(assert (=> d!42555 d!42567))

(assert (=> d!42555 d!42559))

(declare-fun b!136532 () Bool)

(declare-fun e!88937 () Bool)

(declare-fun call!15028 () Bool)

(assert (=> b!136532 (= e!88937 call!15028)))

(declare-fun bm!15025 () Bool)

(assert (=> bm!15025 (= call!15028 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(declare-fun d!42569 () Bool)

(declare-fun res!65479 () Bool)

(declare-fun e!88936 () Bool)

(assert (=> d!42569 (=> res!65479 e!88936)))

(assert (=> d!42569 (= res!65479 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42569 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4642 newMap!16) (mask!7203 newMap!16)) e!88936)))

(declare-fun b!136533 () Bool)

(declare-fun e!88935 () Bool)

(assert (=> b!136533 (= e!88936 e!88935)))

(declare-fun c!25542 () Bool)

(assert (=> b!136533 (= c!25542 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136534 () Bool)

(assert (=> b!136534 (= e!88935 call!15028)))

(declare-fun b!136535 () Bool)

(assert (=> b!136535 (= e!88935 e!88937)))

(declare-fun lt!71288 () (_ BitVec 64))

(assert (=> b!136535 (= lt!71288 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71289 () Unit!4291)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4806 (_ BitVec 64) (_ BitVec 32)) Unit!4291)

(assert (=> b!136535 (= lt!71289 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4642 newMap!16) lt!71288 #b00000000000000000000000000000000))))

(assert (=> b!136535 (arrayContainsKey!0 (_keys!4642 newMap!16) lt!71288 #b00000000000000000000000000000000)))

(declare-fun lt!71290 () Unit!4291)

(assert (=> b!136535 (= lt!71290 lt!71289)))

(declare-fun res!65480 () Bool)

(assert (=> b!136535 (= res!65480 (= (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) (_keys!4642 newMap!16) (mask!7203 newMap!16)) (Found!286 #b00000000000000000000000000000000)))))

(assert (=> b!136535 (=> (not res!65480) (not e!88937))))

(assert (= (and d!42569 (not res!65479)) b!136533))

(assert (= (and b!136533 c!25542) b!136535))

(assert (= (and b!136533 (not c!25542)) b!136534))

(assert (= (and b!136535 res!65480) b!136532))

(assert (= (or b!136532 b!136534) bm!15025))

(declare-fun m!162771 () Bool)

(assert (=> bm!15025 m!162771))

(assert (=> b!136533 m!162731))

(assert (=> b!136533 m!162731))

(assert (=> b!136533 m!162735))

(assert (=> b!136535 m!162731))

(declare-fun m!162773 () Bool)

(assert (=> b!136535 m!162773))

(declare-fun m!162775 () Bool)

(assert (=> b!136535 m!162775))

(assert (=> b!136535 m!162731))

(declare-fun m!162777 () Bool)

(assert (=> b!136535 m!162777))

(assert (=> b!136473 d!42569))

(assert (=> bm!15003 d!42563))

(declare-fun d!42571 () Bool)

(declare-fun e!88940 () Bool)

(assert (=> d!42571 e!88940))

(declare-fun res!65486 () Bool)

(assert (=> d!42571 (=> (not res!65486) (not e!88940))))

(declare-fun lt!71302 () ListLongMap!1715)

(assert (=> d!42571 (= res!65486 (contains!901 lt!71302 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun lt!71299 () List!1741)

(assert (=> d!42571 (= lt!71302 (ListLongMap!1716 lt!71299))))

(declare-fun lt!71300 () Unit!4291)

(declare-fun lt!71301 () Unit!4291)

(assert (=> d!42571 (= lt!71300 lt!71301)))

(assert (=> d!42571 (= (getValueByKey!172 lt!71299 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) (Some!177 (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!89 (List!1741 (_ BitVec 64) V!3499) Unit!4291)

(assert (=> d!42571 (= lt!71301 (lemmaContainsTupThenGetReturnValue!89 lt!71299 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun insertStrictlySorted!91 (List!1741 (_ BitVec 64) V!3499) List!1741)

(assert (=> d!42571 (= lt!71299 (insertStrictlySorted!91 (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945))) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> d!42571 (= (+!171 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945)) (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71302)))

(declare-fun b!136540 () Bool)

(declare-fun res!65485 () Bool)

(assert (=> b!136540 (=> (not res!65485) (not e!88940))))

(assert (=> b!136540 (= res!65485 (= (getValueByKey!172 (toList!873 lt!71302) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) (Some!177 (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(declare-fun b!136541 () Bool)

(declare-fun contains!904 (List!1741 tuple2!2622) Bool)

(assert (=> b!136541 (= e!88940 (contains!904 (toList!873 lt!71302) (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (= (and d!42571 res!65486) b!136540))

(assert (= (and b!136540 res!65485) b!136541))

(declare-fun m!162779 () Bool)

(assert (=> d!42571 m!162779))

(declare-fun m!162781 () Bool)

(assert (=> d!42571 m!162781))

(declare-fun m!162783 () Bool)

(assert (=> d!42571 m!162783))

(declare-fun m!162785 () Bool)

(assert (=> d!42571 m!162785))

(declare-fun m!162787 () Bool)

(assert (=> b!136540 m!162787))

(declare-fun m!162789 () Bool)

(assert (=> b!136541 m!162789))

(assert (=> bm!14947 d!42571))

(declare-fun b!136550 () Bool)

(declare-fun e!88946 () (_ BitVec 32))

(declare-fun call!15031 () (_ BitVec 32))

(assert (=> b!136550 (= e!88946 (bvadd #b00000000000000000000000000000001 call!15031))))

(declare-fun bm!15028 () Bool)

(assert (=> bm!15028 (= call!15031 (arrayCountValidKeys!0 (_keys!4642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136551 () Bool)

(declare-fun e!88945 () (_ BitVec 32))

(assert (=> b!136551 (= e!88945 #b00000000000000000000000000000000)))

(declare-fun d!42573 () Bool)

(declare-fun lt!71305 () (_ BitVec 32))

(assert (=> d!42573 (and (bvsge lt!71305 #b00000000000000000000000000000000) (bvsle lt!71305 (bvsub (size!2542 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!42573 (= lt!71305 e!88945)))

(declare-fun c!25548 () Bool)

(assert (=> d!42573 (= c!25548 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42573 (and (bvsle #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2542 (_keys!4642 newMap!16)) (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42573 (= (arrayCountValidKeys!0 (_keys!4642 newMap!16) #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) lt!71305)))

(declare-fun b!136552 () Bool)

(assert (=> b!136552 (= e!88945 e!88946)))

(declare-fun c!25547 () Bool)

(assert (=> b!136552 (= c!25547 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136553 () Bool)

(assert (=> b!136553 (= e!88946 call!15031)))

(assert (= (and d!42573 c!25548) b!136551))

(assert (= (and d!42573 (not c!25548)) b!136552))

(assert (= (and b!136552 c!25547) b!136550))

(assert (= (and b!136552 (not c!25547)) b!136553))

(assert (= (or b!136550 b!136553) bm!15028))

(declare-fun m!162791 () Bool)

(assert (=> bm!15028 m!162791))

(assert (=> b!136552 m!162731))

(assert (=> b!136552 m!162731))

(assert (=> b!136552 m!162735))

(assert (=> b!136472 d!42573))

(declare-fun d!42575 () Bool)

(assert (=> d!42575 (= (+!171 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71242 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71308 () Unit!4291)

(declare-fun choose!839 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 V!3499 Int) Unit!4291)

(assert (=> d!42575 (= lt!71308 (choose!839 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) lt!71242 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) (defaultEntry!2889 newMap!16)))))

(assert (=> d!42575 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42575 (= (lemmaChangeZeroKeyThenAddPairToListMap!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) lt!71242 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) (defaultEntry!2889 newMap!16)) lt!71308)))

(declare-fun bs!5721 () Bool)

(assert (= bs!5721 d!42575))

(assert (=> bs!5721 m!162585))

(declare-fun m!162793 () Bool)

(assert (=> bs!5721 m!162793))

(assert (=> bs!5721 m!162543))

(declare-fun m!162795 () Bool)

(assert (=> bs!5721 m!162795))

(assert (=> bs!5721 m!162751))

(assert (=> bs!5721 m!162585))

(assert (=> bs!5721 m!162543))

(declare-fun m!162797 () Bool)

(assert (=> bs!5721 m!162797))

(assert (=> b!136454 d!42575))

(declare-fun d!42577 () Bool)

(declare-fun e!88948 () Bool)

(assert (=> d!42577 e!88948))

(declare-fun res!65487 () Bool)

(assert (=> d!42577 (=> res!65487 e!88948)))

(declare-fun lt!71312 () Bool)

(assert (=> d!42577 (= res!65487 (not lt!71312))))

(declare-fun lt!71311 () Bool)

(assert (=> d!42577 (= lt!71312 lt!71311)))

(declare-fun lt!71309 () Unit!4291)

(declare-fun e!88947 () Unit!4291)

(assert (=> d!42577 (= lt!71309 e!88947)))

(declare-fun c!25549 () Bool)

(assert (=> d!42577 (= c!25549 lt!71311)))

(assert (=> d!42577 (= lt!71311 (containsKey!176 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!42577 (= (contains!901 lt!71161 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!71312)))

(declare-fun b!136554 () Bool)

(declare-fun lt!71310 () Unit!4291)

(assert (=> b!136554 (= e!88947 lt!71310)))

(assert (=> b!136554 (= lt!71310 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!136554 (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!136555 () Bool)

(declare-fun Unit!4298 () Unit!4291)

(assert (=> b!136555 (= e!88947 Unit!4298)))

(declare-fun b!136556 () Bool)

(assert (=> b!136556 (= e!88948 (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!42577 c!25549) b!136554))

(assert (= (and d!42577 (not c!25549)) b!136555))

(assert (= (and d!42577 (not res!65487)) b!136556))

(assert (=> d!42577 m!162591))

(declare-fun m!162799 () Bool)

(assert (=> d!42577 m!162799))

(assert (=> b!136554 m!162591))

(declare-fun m!162801 () Bool)

(assert (=> b!136554 m!162801))

(assert (=> b!136554 m!162591))

(declare-fun m!162803 () Bool)

(assert (=> b!136554 m!162803))

(assert (=> b!136554 m!162803))

(declare-fun m!162805 () Bool)

(assert (=> b!136554 m!162805))

(assert (=> b!136556 m!162591))

(assert (=> b!136556 m!162803))

(assert (=> b!136556 m!162803))

(assert (=> b!136556 m!162805))

(assert (=> b!136301 d!42577))

(declare-fun d!42579 () Bool)

(declare-fun res!65497 () Bool)

(declare-fun e!88951 () Bool)

(assert (=> d!42579 (=> (not res!65497) (not e!88951))))

(assert (=> d!42579 (= res!65497 (validMask!0 (mask!7203 newMap!16)))))

(assert (=> d!42579 (= (simpleValid!92 newMap!16) e!88951)))

(declare-fun b!136565 () Bool)

(declare-fun res!65496 () Bool)

(assert (=> b!136565 (=> (not res!65496) (not e!88951))))

(assert (=> b!136565 (= res!65496 (and (= (size!2543 (_values!2872 newMap!16)) (bvadd (mask!7203 newMap!16) #b00000000000000000000000000000001)) (= (size!2542 (_keys!4642 newMap!16)) (size!2543 (_values!2872 newMap!16))) (bvsge (_size!604 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!604 newMap!16) (bvadd (mask!7203 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!136568 () Bool)

(assert (=> b!136568 (= e!88951 (and (bvsge (extraKeys!2650 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2650 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!604 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!136566 () Bool)

(declare-fun res!65498 () Bool)

(assert (=> b!136566 (=> (not res!65498) (not e!88951))))

(declare-fun size!2546 (LongMapFixedSize!1110) (_ BitVec 32))

(assert (=> b!136566 (= res!65498 (bvsge (size!2546 newMap!16) (_size!604 newMap!16)))))

(declare-fun b!136567 () Bool)

(declare-fun res!65499 () Bool)

(assert (=> b!136567 (=> (not res!65499) (not e!88951))))

(assert (=> b!136567 (= res!65499 (= (size!2546 newMap!16) (bvadd (_size!604 newMap!16) (bvsdiv (bvadd (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!42579 res!65497) b!136565))

(assert (= (and b!136565 res!65496) b!136566))

(assert (= (and b!136566 res!65498) b!136567))

(assert (= (and b!136567 res!65499) b!136568))

(assert (=> d!42579 m!162751))

(declare-fun m!162807 () Bool)

(assert (=> b!136566 m!162807))

(assert (=> b!136567 m!162807))

(assert (=> d!42559 d!42579))

(declare-fun b!136569 () Bool)

(declare-fun e!88959 () Bool)

(declare-fun call!15037 () Bool)

(assert (=> b!136569 (= e!88959 (not call!15037))))

(declare-fun b!136570 () Bool)

(declare-fun res!65501 () Bool)

(declare-fun e!88955 () Bool)

(assert (=> b!136570 (=> (not res!65501) (not e!88955))))

(declare-fun e!88953 () Bool)

(assert (=> b!136570 (= res!65501 e!88953)))

(declare-fun res!65507 () Bool)

(assert (=> b!136570 (=> res!65507 e!88953)))

(declare-fun e!88957 () Bool)

(assert (=> b!136570 (= res!65507 (not e!88957))))

(declare-fun res!65504 () Bool)

(assert (=> b!136570 (=> (not res!65504) (not e!88957))))

(assert (=> b!136570 (= res!65504 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136571 () Bool)

(declare-fun e!88961 () Bool)

(declare-fun e!88958 () Bool)

(assert (=> b!136571 (= e!88961 e!88958)))

(declare-fun res!65508 () Bool)

(declare-fun call!15036 () Bool)

(assert (=> b!136571 (= res!65508 call!15036)))

(assert (=> b!136571 (=> (not res!65508) (not e!88958))))

(declare-fun bm!15029 () Bool)

(declare-fun call!15035 () ListLongMap!1715)

(declare-fun call!15038 () ListLongMap!1715)

(assert (=> bm!15029 (= call!15035 call!15038)))

(declare-fun b!136572 () Bool)

(declare-fun e!88964 () Bool)

(assert (=> b!136572 (= e!88953 e!88964)))

(declare-fun res!65506 () Bool)

(assert (=> b!136572 (=> (not res!65506) (not e!88964))))

(declare-fun lt!71323 () ListLongMap!1715)

(assert (=> b!136572 (= res!65506 (contains!901 lt!71323 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!136572 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136573 () Bool)

(declare-fun e!88960 () ListLongMap!1715)

(declare-fun e!88956 () ListLongMap!1715)

(assert (=> b!136573 (= e!88960 e!88956)))

(declare-fun c!25551 () Bool)

(assert (=> b!136573 (= c!25551 (and (not (= (bvand (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!15030 () Bool)

(assert (=> bm!15030 (= call!15036 (contains!901 lt!71323 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136574 () Bool)

(assert (=> b!136574 (= e!88958 (= (apply!117 lt!71323 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))))

(declare-fun b!136575 () Bool)

(declare-fun e!88963 () ListLongMap!1715)

(declare-fun call!15033 () ListLongMap!1715)

(assert (=> b!136575 (= e!88963 call!15033)))

(declare-fun bm!15031 () Bool)

(declare-fun call!15034 () ListLongMap!1715)

(declare-fun call!15032 () ListLongMap!1715)

(assert (=> bm!15031 (= call!15034 call!15032)))

(declare-fun b!136576 () Bool)

(declare-fun e!88954 () Bool)

(assert (=> b!136576 (= e!88954 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136578 () Bool)

(assert (=> b!136578 (= e!88956 call!15034)))

(declare-fun b!136579 () Bool)

(assert (=> b!136579 (= e!88957 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136580 () Bool)

(assert (=> b!136580 (= e!88955 e!88959)))

(declare-fun c!25555 () Bool)

(assert (=> b!136580 (= c!25555 (not (= (bvand (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136581 () Bool)

(declare-fun e!88962 () Unit!4291)

(declare-fun lt!71317 () Unit!4291)

(assert (=> b!136581 (= e!88962 lt!71317)))

(declare-fun lt!71328 () ListLongMap!1715)

(assert (=> b!136581 (= lt!71328 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71321 () (_ BitVec 64))

(assert (=> b!136581 (= lt!71321 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71318 () (_ BitVec 64))

(assert (=> b!136581 (= lt!71318 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71319 () Unit!4291)

(assert (=> b!136581 (= lt!71319 (addStillContains!93 lt!71328 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) lt!71318))))

(assert (=> b!136581 (contains!901 (+!171 lt!71328 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) lt!71318)))

(declare-fun lt!71333 () Unit!4291)

(assert (=> b!136581 (= lt!71333 lt!71319)))

(declare-fun lt!71320 () ListLongMap!1715)

(assert (=> b!136581 (= lt!71320 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71334 () (_ BitVec 64))

(assert (=> b!136581 (= lt!71334 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71316 () (_ BitVec 64))

(assert (=> b!136581 (= lt!71316 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71313 () Unit!4291)

(assert (=> b!136581 (= lt!71313 (addApplyDifferent!93 lt!71320 lt!71334 (minValue!2742 newMap!16) lt!71316))))

(assert (=> b!136581 (= (apply!117 (+!171 lt!71320 (tuple2!2623 lt!71334 (minValue!2742 newMap!16))) lt!71316) (apply!117 lt!71320 lt!71316))))

(declare-fun lt!71329 () Unit!4291)

(assert (=> b!136581 (= lt!71329 lt!71313)))

(declare-fun lt!71326 () ListLongMap!1715)

(assert (=> b!136581 (= lt!71326 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71314 () (_ BitVec 64))

(assert (=> b!136581 (= lt!71314 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71315 () (_ BitVec 64))

(assert (=> b!136581 (= lt!71315 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71322 () Unit!4291)

(assert (=> b!136581 (= lt!71322 (addApplyDifferent!93 lt!71326 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) lt!71315))))

(assert (=> b!136581 (= (apply!117 (+!171 lt!71326 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) lt!71315) (apply!117 lt!71326 lt!71315))))

(declare-fun lt!71324 () Unit!4291)

(assert (=> b!136581 (= lt!71324 lt!71322)))

(declare-fun lt!71331 () ListLongMap!1715)

(assert (=> b!136581 (= lt!71331 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71330 () (_ BitVec 64))

(assert (=> b!136581 (= lt!71330 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71332 () (_ BitVec 64))

(assert (=> b!136581 (= lt!71332 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136581 (= lt!71317 (addApplyDifferent!93 lt!71331 lt!71330 (minValue!2742 newMap!16) lt!71332))))

(assert (=> b!136581 (= (apply!117 (+!171 lt!71331 (tuple2!2623 lt!71330 (minValue!2742 newMap!16))) lt!71332) (apply!117 lt!71331 lt!71332))))

(declare-fun b!136582 () Bool)

(assert (=> b!136582 (= e!88963 call!15034)))

(declare-fun b!136583 () Bool)

(assert (=> b!136583 (= e!88960 (+!171 call!15032 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))

(declare-fun bm!15032 () Bool)

(assert (=> bm!15032 (= call!15038 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun b!136584 () Bool)

(declare-fun Unit!4299 () Unit!4291)

(assert (=> b!136584 (= e!88962 Unit!4299)))

(declare-fun b!136585 () Bool)

(declare-fun res!65500 () Bool)

(assert (=> b!136585 (=> (not res!65500) (not e!88955))))

(assert (=> b!136585 (= res!65500 e!88961)))

(declare-fun c!25552 () Bool)

(assert (=> b!136585 (= c!25552 (not (= (bvand (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!136577 () Bool)

(declare-fun e!88952 () Bool)

(assert (=> b!136577 (= e!88959 e!88952)))

(declare-fun res!65503 () Bool)

(assert (=> b!136577 (= res!65503 call!15037)))

(assert (=> b!136577 (=> (not res!65503) (not e!88952))))

(declare-fun d!42581 () Bool)

(assert (=> d!42581 e!88955))

(declare-fun res!65502 () Bool)

(assert (=> d!42581 (=> (not res!65502) (not e!88955))))

(assert (=> d!42581 (= res!65502 (or (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))))

(declare-fun lt!71325 () ListLongMap!1715)

(assert (=> d!42581 (= lt!71323 lt!71325)))

(declare-fun lt!71327 () Unit!4291)

(assert (=> d!42581 (= lt!71327 e!88962)))

(declare-fun c!25553 () Bool)

(assert (=> d!42581 (= c!25553 e!88954)))

(declare-fun res!65505 () Bool)

(assert (=> d!42581 (=> (not res!65505) (not e!88954))))

(assert (=> d!42581 (= res!65505 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42581 (= lt!71325 e!88960)))

(declare-fun c!25550 () Bool)

(assert (=> d!42581 (= c!25550 (and (not (= (bvand (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42581 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42581 (= (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!71323)))

(declare-fun b!136586 () Bool)

(assert (=> b!136586 (= e!88952 (= (apply!117 lt!71323 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2742 newMap!16)))))

(declare-fun bm!15033 () Bool)

(assert (=> bm!15033 (= call!15033 call!15035)))

(declare-fun b!136587 () Bool)

(assert (=> b!136587 (= e!88961 (not call!15036))))

(declare-fun bm!15034 () Bool)

(assert (=> bm!15034 (= call!15037 (contains!901 lt!71323 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136588 () Bool)

(assert (=> b!136588 (= e!88964 (= (apply!117 lt!71323 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136588 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (_values!2872 newMap!16))))))

(assert (=> b!136588 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun bm!15035 () Bool)

(assert (=> bm!15035 (= call!15032 (+!171 (ite c!25550 call!15038 (ite c!25551 call!15035 call!15033)) (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(declare-fun c!25554 () Bool)

(declare-fun b!136589 () Bool)

(assert (=> b!136589 (= c!25554 (and (not (= (bvand (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!136589 (= e!88956 e!88963)))

(assert (= (and d!42581 c!25550) b!136583))

(assert (= (and d!42581 (not c!25550)) b!136573))

(assert (= (and b!136573 c!25551) b!136578))

(assert (= (and b!136573 (not c!25551)) b!136589))

(assert (= (and b!136589 c!25554) b!136582))

(assert (= (and b!136589 (not c!25554)) b!136575))

(assert (= (or b!136582 b!136575) bm!15033))

(assert (= (or b!136578 bm!15033) bm!15029))

(assert (= (or b!136578 b!136582) bm!15031))

(assert (= (or b!136583 bm!15029) bm!15032))

(assert (= (or b!136583 bm!15031) bm!15035))

(assert (= (and d!42581 res!65505) b!136576))

(assert (= (and d!42581 c!25553) b!136581))

(assert (= (and d!42581 (not c!25553)) b!136584))

(assert (= (and d!42581 res!65502) b!136570))

(assert (= (and b!136570 res!65504) b!136579))

(assert (= (and b!136570 (not res!65507)) b!136572))

(assert (= (and b!136572 res!65506) b!136588))

(assert (= (and b!136570 res!65501) b!136585))

(assert (= (and b!136585 c!25552) b!136571))

(assert (= (and b!136585 (not c!25552)) b!136587))

(assert (= (and b!136571 res!65508) b!136574))

(assert (= (or b!136571 b!136587) bm!15030))

(assert (= (and b!136585 res!65500) b!136580))

(assert (= (and b!136580 c!25555) b!136577))

(assert (= (and b!136580 (not c!25555)) b!136569))

(assert (= (and b!136577 res!65503) b!136586))

(assert (= (or b!136577 b!136569) bm!15034))

(declare-fun b_lambda!6121 () Bool)

(assert (=> (not b_lambda!6121) (not b!136588)))

(declare-fun tb!2469 () Bool)

(declare-fun t!6249 () Bool)

(assert (=> (and b!136196 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16)) t!6249) tb!2469))

(declare-fun result!4059 () Bool)

(assert (=> tb!2469 (= result!4059 tp_is_empty!2889)))

(assert (=> b!136588 t!6249))

(declare-fun b_and!8469 () Bool)

(assert (= b_and!8465 (and (=> t!6249 result!4059) b_and!8469)))

(declare-fun t!6251 () Bool)

(declare-fun tb!2471 () Bool)

(assert (=> (and b!136192 (= (defaultEntry!2889 newMap!16) (defaultEntry!2889 newMap!16)) t!6251) tb!2471))

(declare-fun result!4061 () Bool)

(assert (= result!4061 result!4059))

(assert (=> b!136588 t!6251))

(declare-fun b_and!8471 () Bool)

(assert (= b_and!8467 (and (=> t!6251 result!4061) b_and!8471)))

(declare-fun m!162809 () Bool)

(assert (=> bm!15030 m!162809))

(declare-fun m!162811 () Bool)

(assert (=> b!136588 m!162811))

(assert (=> b!136588 m!162731))

(declare-fun m!162813 () Bool)

(assert (=> b!136588 m!162813))

(assert (=> b!136588 m!162731))

(declare-fun m!162815 () Bool)

(assert (=> b!136588 m!162815))

(assert (=> b!136588 m!162811))

(assert (=> b!136588 m!162815))

(declare-fun m!162817 () Bool)

(assert (=> b!136588 m!162817))

(declare-fun m!162819 () Bool)

(assert (=> b!136583 m!162819))

(declare-fun m!162821 () Bool)

(assert (=> bm!15035 m!162821))

(declare-fun m!162823 () Bool)

(assert (=> bm!15032 m!162823))

(declare-fun m!162825 () Bool)

(assert (=> b!136581 m!162825))

(declare-fun m!162827 () Bool)

(assert (=> b!136581 m!162827))

(declare-fun m!162829 () Bool)

(assert (=> b!136581 m!162829))

(declare-fun m!162831 () Bool)

(assert (=> b!136581 m!162831))

(declare-fun m!162833 () Bool)

(assert (=> b!136581 m!162833))

(declare-fun m!162835 () Bool)

(assert (=> b!136581 m!162835))

(declare-fun m!162837 () Bool)

(assert (=> b!136581 m!162837))

(declare-fun m!162839 () Bool)

(assert (=> b!136581 m!162839))

(declare-fun m!162841 () Bool)

(assert (=> b!136581 m!162841))

(declare-fun m!162843 () Bool)

(assert (=> b!136581 m!162843))

(assert (=> b!136581 m!162825))

(assert (=> b!136581 m!162833))

(assert (=> b!136581 m!162731))

(declare-fun m!162845 () Bool)

(assert (=> b!136581 m!162845))

(assert (=> b!136581 m!162823))

(assert (=> b!136581 m!162837))

(declare-fun m!162847 () Bool)

(assert (=> b!136581 m!162847))

(declare-fun m!162849 () Bool)

(assert (=> b!136581 m!162849))

(declare-fun m!162851 () Bool)

(assert (=> b!136581 m!162851))

(assert (=> b!136581 m!162849))

(declare-fun m!162853 () Bool)

(assert (=> b!136581 m!162853))

(declare-fun m!162855 () Bool)

(assert (=> bm!15034 m!162855))

(assert (=> d!42581 m!162751))

(assert (=> b!136579 m!162731))

(assert (=> b!136579 m!162731))

(assert (=> b!136579 m!162735))

(declare-fun m!162857 () Bool)

(assert (=> b!136586 m!162857))

(assert (=> b!136576 m!162731))

(assert (=> b!136576 m!162731))

(assert (=> b!136576 m!162735))

(declare-fun m!162859 () Bool)

(assert (=> b!136574 m!162859))

(assert (=> b!136572 m!162731))

(assert (=> b!136572 m!162731))

(declare-fun m!162861 () Bool)

(assert (=> b!136572 m!162861))

(assert (=> bm!15002 d!42581))

(declare-fun d!42583 () Bool)

(declare-fun get!1502 (Option!178) V!3499)

(assert (=> d!42583 (= (apply!117 lt!71161 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1502 (getValueByKey!172 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!5722 () Bool)

(assert (= bs!5722 d!42583))

(assert (=> bs!5722 m!162591))

(assert (=> bs!5722 m!162803))

(assert (=> bs!5722 m!162803))

(declare-fun m!162863 () Bool)

(assert (=> bs!5722 m!162863))

(assert (=> b!136317 d!42583))

(declare-fun d!42585 () Bool)

(declare-fun c!25556 () Bool)

(assert (=> d!42585 (= c!25556 ((_ is ValueCellFull!1101) (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!88965 () V!3499)

(assert (=> d!42585 (= (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!88965)))

(declare-fun b!136590 () Bool)

(assert (=> b!136590 (= e!88965 (get!1500 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!136591 () Bool)

(assert (=> b!136591 (= e!88965 (get!1501 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42585 c!25556) b!136590))

(assert (= (and d!42585 (not c!25556)) b!136591))

(assert (=> b!136590 m!162589))

(assert (=> b!136590 m!162541))

(declare-fun m!162865 () Bool)

(assert (=> b!136590 m!162865))

(assert (=> b!136591 m!162589))

(assert (=> b!136591 m!162541))

(declare-fun m!162867 () Bool)

(assert (=> b!136591 m!162867))

(assert (=> b!136317 d!42585))

(declare-fun d!42587 () Bool)

(declare-fun e!88966 () Bool)

(assert (=> d!42587 e!88966))

(declare-fun res!65510 () Bool)

(assert (=> d!42587 (=> (not res!65510) (not e!88966))))

(declare-fun lt!71338 () ListLongMap!1715)

(assert (=> d!42587 (= res!65510 (contains!901 lt!71338 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!71335 () List!1741)

(assert (=> d!42587 (= lt!71338 (ListLongMap!1716 lt!71335))))

(declare-fun lt!71336 () Unit!4291)

(declare-fun lt!71337 () Unit!4291)

(assert (=> d!42587 (= lt!71336 lt!71337)))

(assert (=> d!42587 (= (getValueByKey!172 lt!71335 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42587 (= lt!71337 (lemmaContainsTupThenGetReturnValue!89 lt!71335 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42587 (= lt!71335 (insertStrictlySorted!91 (toList!873 call!14999) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42587 (= (+!171 call!14999 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71338)))

(declare-fun b!136592 () Bool)

(declare-fun res!65509 () Bool)

(assert (=> b!136592 (=> (not res!65509) (not e!88966))))

(assert (=> b!136592 (= res!65509 (= (getValueByKey!172 (toList!873 lt!71338) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!136593 () Bool)

(assert (=> b!136593 (= e!88966 (contains!904 (toList!873 lt!71338) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!42587 res!65510) b!136592))

(assert (= (and b!136592 res!65509) b!136593))

(declare-fun m!162869 () Bool)

(assert (=> d!42587 m!162869))

(declare-fun m!162871 () Bool)

(assert (=> d!42587 m!162871))

(declare-fun m!162873 () Bool)

(assert (=> d!42587 m!162873))

(declare-fun m!162875 () Bool)

(assert (=> d!42587 m!162875))

(declare-fun m!162877 () Bool)

(assert (=> b!136592 m!162877))

(declare-fun m!162879 () Bool)

(assert (=> b!136593 m!162879))

(assert (=> b!136441 d!42587))

(declare-fun b!136594 () Bool)

(declare-fun e!88974 () Bool)

(declare-fun call!15044 () Bool)

(assert (=> b!136594 (= e!88974 (not call!15044))))

(declare-fun b!136595 () Bool)

(declare-fun res!65512 () Bool)

(declare-fun e!88970 () Bool)

(assert (=> b!136595 (=> (not res!65512) (not e!88970))))

(declare-fun e!88968 () Bool)

(assert (=> b!136595 (= res!65512 e!88968)))

(declare-fun res!65518 () Bool)

(assert (=> b!136595 (=> res!65518 e!88968)))

(declare-fun e!88972 () Bool)

(assert (=> b!136595 (= res!65518 (not e!88972))))

(declare-fun res!65515 () Bool)

(assert (=> b!136595 (=> (not res!65515) (not e!88972))))

(assert (=> b!136595 (= res!65515 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136596 () Bool)

(declare-fun e!88976 () Bool)

(declare-fun e!88973 () Bool)

(assert (=> b!136596 (= e!88976 e!88973)))

(declare-fun res!65519 () Bool)

(declare-fun call!15043 () Bool)

(assert (=> b!136596 (= res!65519 call!15043)))

(assert (=> b!136596 (=> (not res!65519) (not e!88973))))

(declare-fun bm!15036 () Bool)

(declare-fun call!15042 () ListLongMap!1715)

(declare-fun call!15045 () ListLongMap!1715)

(assert (=> bm!15036 (= call!15042 call!15045)))

(declare-fun b!136597 () Bool)

(declare-fun e!88979 () Bool)

(assert (=> b!136597 (= e!88968 e!88979)))

(declare-fun res!65517 () Bool)

(assert (=> b!136597 (=> (not res!65517) (not e!88979))))

(declare-fun lt!71349 () ListLongMap!1715)

(assert (=> b!136597 (= res!65517 (contains!901 lt!71349 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!136597 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136598 () Bool)

(declare-fun e!88975 () ListLongMap!1715)

(declare-fun e!88971 () ListLongMap!1715)

(assert (=> b!136598 (= e!88975 e!88971)))

(declare-fun c!25558 () Bool)

(assert (=> b!136598 (= c!25558 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!15037 () Bool)

(assert (=> bm!15037 (= call!15043 (contains!901 lt!71349 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136599 () Bool)

(assert (=> b!136599 (= e!88973 (= (apply!117 lt!71349 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2742 newMap!16)))))

(declare-fun b!136600 () Bool)

(declare-fun e!88978 () ListLongMap!1715)

(declare-fun call!15040 () ListLongMap!1715)

(assert (=> b!136600 (= e!88978 call!15040)))

(declare-fun bm!15038 () Bool)

(declare-fun call!15041 () ListLongMap!1715)

(declare-fun call!15039 () ListLongMap!1715)

(assert (=> bm!15038 (= call!15041 call!15039)))

(declare-fun b!136601 () Bool)

(declare-fun e!88969 () Bool)

(assert (=> b!136601 (= e!88969 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136603 () Bool)

(assert (=> b!136603 (= e!88971 call!15041)))

(declare-fun b!136604 () Bool)

(assert (=> b!136604 (= e!88972 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136605 () Bool)

(assert (=> b!136605 (= e!88970 e!88974)))

(declare-fun c!25562 () Bool)

(assert (=> b!136605 (= c!25562 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136606 () Bool)

(declare-fun e!88977 () Unit!4291)

(declare-fun lt!71343 () Unit!4291)

(assert (=> b!136606 (= e!88977 lt!71343)))

(declare-fun lt!71354 () ListLongMap!1715)

(assert (=> b!136606 (= lt!71354 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71347 () (_ BitVec 64))

(assert (=> b!136606 (= lt!71347 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71344 () (_ BitVec 64))

(assert (=> b!136606 (= lt!71344 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71345 () Unit!4291)

(assert (=> b!136606 (= lt!71345 (addStillContains!93 lt!71354 lt!71347 (zeroValue!2742 newMap!16) lt!71344))))

(assert (=> b!136606 (contains!901 (+!171 lt!71354 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16))) lt!71344)))

(declare-fun lt!71359 () Unit!4291)

(assert (=> b!136606 (= lt!71359 lt!71345)))

(declare-fun lt!71346 () ListLongMap!1715)

(assert (=> b!136606 (= lt!71346 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71360 () (_ BitVec 64))

(assert (=> b!136606 (= lt!71360 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71342 () (_ BitVec 64))

(assert (=> b!136606 (= lt!71342 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71339 () Unit!4291)

(assert (=> b!136606 (= lt!71339 (addApplyDifferent!93 lt!71346 lt!71360 (minValue!2742 newMap!16) lt!71342))))

(assert (=> b!136606 (= (apply!117 (+!171 lt!71346 (tuple2!2623 lt!71360 (minValue!2742 newMap!16))) lt!71342) (apply!117 lt!71346 lt!71342))))

(declare-fun lt!71355 () Unit!4291)

(assert (=> b!136606 (= lt!71355 lt!71339)))

(declare-fun lt!71352 () ListLongMap!1715)

(assert (=> b!136606 (= lt!71352 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71340 () (_ BitVec 64))

(assert (=> b!136606 (= lt!71340 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71341 () (_ BitVec 64))

(assert (=> b!136606 (= lt!71341 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71348 () Unit!4291)

(assert (=> b!136606 (= lt!71348 (addApplyDifferent!93 lt!71352 lt!71340 (zeroValue!2742 newMap!16) lt!71341))))

(assert (=> b!136606 (= (apply!117 (+!171 lt!71352 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16))) lt!71341) (apply!117 lt!71352 lt!71341))))

(declare-fun lt!71350 () Unit!4291)

(assert (=> b!136606 (= lt!71350 lt!71348)))

(declare-fun lt!71357 () ListLongMap!1715)

(assert (=> b!136606 (= lt!71357 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71356 () (_ BitVec 64))

(assert (=> b!136606 (= lt!71356 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71358 () (_ BitVec 64))

(assert (=> b!136606 (= lt!71358 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136606 (= lt!71343 (addApplyDifferent!93 lt!71357 lt!71356 (minValue!2742 newMap!16) lt!71358))))

(assert (=> b!136606 (= (apply!117 (+!171 lt!71357 (tuple2!2623 lt!71356 (minValue!2742 newMap!16))) lt!71358) (apply!117 lt!71357 lt!71358))))

(declare-fun b!136607 () Bool)

(assert (=> b!136607 (= e!88978 call!15041)))

(declare-fun b!136608 () Bool)

(assert (=> b!136608 (= e!88975 (+!171 call!15039 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))

(declare-fun bm!15039 () Bool)

(assert (=> bm!15039 (= call!15045 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun b!136609 () Bool)

(declare-fun Unit!4300 () Unit!4291)

(assert (=> b!136609 (= e!88977 Unit!4300)))

(declare-fun b!136610 () Bool)

(declare-fun res!65511 () Bool)

(assert (=> b!136610 (=> (not res!65511) (not e!88970))))

(assert (=> b!136610 (= res!65511 e!88976)))

(declare-fun c!25559 () Bool)

(assert (=> b!136610 (= c!25559 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!136602 () Bool)

(declare-fun e!88967 () Bool)

(assert (=> b!136602 (= e!88974 e!88967)))

(declare-fun res!65514 () Bool)

(assert (=> b!136602 (= res!65514 call!15044)))

(assert (=> b!136602 (=> (not res!65514) (not e!88967))))

(declare-fun d!42589 () Bool)

(assert (=> d!42589 e!88970))

(declare-fun res!65513 () Bool)

(assert (=> d!42589 (=> (not res!65513) (not e!88970))))

(assert (=> d!42589 (= res!65513 (or (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))))

(declare-fun lt!71351 () ListLongMap!1715)

(assert (=> d!42589 (= lt!71349 lt!71351)))

(declare-fun lt!71353 () Unit!4291)

(assert (=> d!42589 (= lt!71353 e!88977)))

(declare-fun c!25560 () Bool)

(assert (=> d!42589 (= c!25560 e!88969)))

(declare-fun res!65516 () Bool)

(assert (=> d!42589 (=> (not res!65516) (not e!88969))))

(assert (=> d!42589 (= res!65516 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42589 (= lt!71351 e!88975)))

(declare-fun c!25557 () Bool)

(assert (=> d!42589 (= c!25557 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42589 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42589 (= (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!71349)))

(declare-fun b!136611 () Bool)

(assert (=> b!136611 (= e!88967 (= (apply!117 lt!71349 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2742 newMap!16)))))

(declare-fun bm!15040 () Bool)

(assert (=> bm!15040 (= call!15040 call!15042)))

(declare-fun b!136612 () Bool)

(assert (=> b!136612 (= e!88976 (not call!15043))))

(declare-fun bm!15041 () Bool)

(assert (=> bm!15041 (= call!15044 (contains!901 lt!71349 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136613 () Bool)

(assert (=> b!136613 (= e!88979 (= (apply!117 lt!71349 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136613 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (_values!2872 newMap!16))))))

(assert (=> b!136613 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun bm!15042 () Bool)

(assert (=> bm!15042 (= call!15039 (+!171 (ite c!25557 call!15045 (ite c!25558 call!15042 call!15040)) (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(declare-fun b!136614 () Bool)

(declare-fun c!25561 () Bool)

(assert (=> b!136614 (= c!25561 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!136614 (= e!88971 e!88978)))

(assert (= (and d!42589 c!25557) b!136608))

(assert (= (and d!42589 (not c!25557)) b!136598))

(assert (= (and b!136598 c!25558) b!136603))

(assert (= (and b!136598 (not c!25558)) b!136614))

(assert (= (and b!136614 c!25561) b!136607))

(assert (= (and b!136614 (not c!25561)) b!136600))

(assert (= (or b!136607 b!136600) bm!15040))

(assert (= (or b!136603 bm!15040) bm!15036))

(assert (= (or b!136603 b!136607) bm!15038))

(assert (= (or b!136608 bm!15036) bm!15039))

(assert (= (or b!136608 bm!15038) bm!15042))

(assert (= (and d!42589 res!65516) b!136601))

(assert (= (and d!42589 c!25560) b!136606))

(assert (= (and d!42589 (not c!25560)) b!136609))

(assert (= (and d!42589 res!65513) b!136595))

(assert (= (and b!136595 res!65515) b!136604))

(assert (= (and b!136595 (not res!65518)) b!136597))

(assert (= (and b!136597 res!65517) b!136613))

(assert (= (and b!136595 res!65512) b!136610))

(assert (= (and b!136610 c!25559) b!136596))

(assert (= (and b!136610 (not c!25559)) b!136612))

(assert (= (and b!136596 res!65519) b!136599))

(assert (= (or b!136596 b!136612) bm!15037))

(assert (= (and b!136610 res!65511) b!136605))

(assert (= (and b!136605 c!25562) b!136602))

(assert (= (and b!136605 (not c!25562)) b!136594))

(assert (= (and b!136602 res!65514) b!136611))

(assert (= (or b!136602 b!136594) bm!15041))

(declare-fun b_lambda!6123 () Bool)

(assert (=> (not b_lambda!6123) (not b!136613)))

(assert (=> b!136613 t!6249))

(declare-fun b_and!8473 () Bool)

(assert (= b_and!8469 (and (=> t!6249 result!4059) b_and!8473)))

(assert (=> b!136613 t!6251))

(declare-fun b_and!8475 () Bool)

(assert (= b_and!8471 (and (=> t!6251 result!4061) b_and!8475)))

(declare-fun m!162881 () Bool)

(assert (=> bm!15037 m!162881))

(assert (=> b!136613 m!162811))

(assert (=> b!136613 m!162731))

(declare-fun m!162883 () Bool)

(assert (=> b!136613 m!162883))

(assert (=> b!136613 m!162731))

(assert (=> b!136613 m!162815))

(assert (=> b!136613 m!162811))

(assert (=> b!136613 m!162815))

(assert (=> b!136613 m!162817))

(declare-fun m!162885 () Bool)

(assert (=> b!136608 m!162885))

(declare-fun m!162887 () Bool)

(assert (=> bm!15042 m!162887))

(declare-fun m!162889 () Bool)

(assert (=> bm!15039 m!162889))

(declare-fun m!162891 () Bool)

(assert (=> b!136606 m!162891))

(declare-fun m!162893 () Bool)

(assert (=> b!136606 m!162893))

(declare-fun m!162895 () Bool)

(assert (=> b!136606 m!162895))

(declare-fun m!162897 () Bool)

(assert (=> b!136606 m!162897))

(declare-fun m!162899 () Bool)

(assert (=> b!136606 m!162899))

(declare-fun m!162901 () Bool)

(assert (=> b!136606 m!162901))

(declare-fun m!162903 () Bool)

(assert (=> b!136606 m!162903))

(declare-fun m!162905 () Bool)

(assert (=> b!136606 m!162905))

(declare-fun m!162907 () Bool)

(assert (=> b!136606 m!162907))

(declare-fun m!162909 () Bool)

(assert (=> b!136606 m!162909))

(assert (=> b!136606 m!162891))

(assert (=> b!136606 m!162899))

(assert (=> b!136606 m!162731))

(declare-fun m!162911 () Bool)

(assert (=> b!136606 m!162911))

(assert (=> b!136606 m!162889))

(assert (=> b!136606 m!162903))

(declare-fun m!162913 () Bool)

(assert (=> b!136606 m!162913))

(declare-fun m!162915 () Bool)

(assert (=> b!136606 m!162915))

(declare-fun m!162917 () Bool)

(assert (=> b!136606 m!162917))

(assert (=> b!136606 m!162915))

(declare-fun m!162919 () Bool)

(assert (=> b!136606 m!162919))

(declare-fun m!162921 () Bool)

(assert (=> bm!15041 m!162921))

(assert (=> d!42589 m!162751))

(assert (=> b!136604 m!162731))

(assert (=> b!136604 m!162731))

(assert (=> b!136604 m!162735))

(declare-fun m!162923 () Bool)

(assert (=> b!136611 m!162923))

(assert (=> b!136601 m!162731))

(assert (=> b!136601 m!162731))

(assert (=> b!136601 m!162735))

(declare-fun m!162925 () Bool)

(assert (=> b!136599 m!162925))

(assert (=> b!136597 m!162731))

(assert (=> b!136597 m!162731))

(declare-fun m!162927 () Bool)

(assert (=> b!136597 m!162927))

(assert (=> d!42535 d!42589))

(assert (=> bm!15001 d!42535))

(declare-fun d!42591 () Bool)

(declare-fun e!88981 () Bool)

(assert (=> d!42591 e!88981))

(declare-fun res!65520 () Bool)

(assert (=> d!42591 (=> res!65520 e!88981)))

(declare-fun lt!71364 () Bool)

(assert (=> d!42591 (= res!65520 (not lt!71364))))

(declare-fun lt!71363 () Bool)

(assert (=> d!42591 (= lt!71364 lt!71363)))

(declare-fun lt!71361 () Unit!4291)

(declare-fun e!88980 () Unit!4291)

(assert (=> d!42591 (= lt!71361 e!88980)))

(declare-fun c!25563 () Bool)

(assert (=> d!42591 (= c!25563 lt!71363)))

(assert (=> d!42591 (= lt!71363 (containsKey!176 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42591 (= (contains!901 lt!71161 #b1000000000000000000000000000000000000000000000000000000000000000) lt!71364)))

(declare-fun b!136615 () Bool)

(declare-fun lt!71362 () Unit!4291)

(assert (=> b!136615 (= e!88980 lt!71362)))

(assert (=> b!136615 (= lt!71362 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136615 (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136616 () Bool)

(declare-fun Unit!4301 () Unit!4291)

(assert (=> b!136616 (= e!88980 Unit!4301)))

(declare-fun b!136617 () Bool)

(assert (=> b!136617 (= e!88981 (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42591 c!25563) b!136615))

(assert (= (and d!42591 (not c!25563)) b!136616))

(assert (= (and d!42591 (not res!65520)) b!136617))

(declare-fun m!162929 () Bool)

(assert (=> d!42591 m!162929))

(declare-fun m!162931 () Bool)

(assert (=> b!136615 m!162931))

(declare-fun m!162933 () Bool)

(assert (=> b!136615 m!162933))

(assert (=> b!136615 m!162933))

(declare-fun m!162935 () Bool)

(assert (=> b!136615 m!162935))

(assert (=> b!136617 m!162933))

(assert (=> b!136617 m!162933))

(assert (=> b!136617 m!162935))

(assert (=> bm!14946 d!42591))

(declare-fun d!42593 () Bool)

(declare-fun e!88984 () Bool)

(assert (=> d!42593 e!88984))

(declare-fun res!65525 () Bool)

(assert (=> d!42593 (=> (not res!65525) (not e!88984))))

(declare-fun lt!71370 () SeekEntryResult!286)

(assert (=> d!42593 (= res!65525 ((_ is Found!286) lt!71370))))

(assert (=> d!42593 (= lt!71370 (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(declare-fun lt!71369 () Unit!4291)

(declare-fun choose!840 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 64) Int) Unit!4291)

(assert (=> d!42593 (= lt!71369 (choose!840 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (defaultEntry!2889 newMap!16)))))

(assert (=> d!42593 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42593 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (defaultEntry!2889 newMap!16)) lt!71369)))

(declare-fun b!136622 () Bool)

(declare-fun res!65526 () Bool)

(assert (=> b!136622 (=> (not res!65526) (not e!88984))))

(assert (=> b!136622 (= res!65526 (inRange!0 (index!3306 lt!71370) (mask!7203 newMap!16)))))

(declare-fun b!136623 () Bool)

(assert (=> b!136623 (= e!88984 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71370)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> b!136623 (and (bvsge (index!3306 lt!71370) #b00000000000000000000000000000000) (bvslt (index!3306 lt!71370) (size!2542 (_keys!4642 newMap!16))))))

(assert (= (and d!42593 res!65525) b!136622))

(assert (= (and b!136622 res!65526) b!136623))

(assert (=> d!42593 m!162523))

(assert (=> d!42593 m!162671))

(assert (=> d!42593 m!162523))

(declare-fun m!162937 () Bool)

(assert (=> d!42593 m!162937))

(assert (=> d!42593 m!162751))

(declare-fun m!162939 () Bool)

(assert (=> b!136622 m!162939))

(declare-fun m!162941 () Bool)

(assert (=> b!136623 m!162941))

(assert (=> bm!15010 d!42593))

(declare-fun d!42595 () Bool)

(declare-fun res!65531 () Bool)

(declare-fun e!88989 () Bool)

(assert (=> d!42595 (=> res!65531 e!88989)))

(assert (=> d!42595 (= res!65531 (and ((_ is Cons!1737) (toList!873 lt!71093)) (= (_1!1321 (h!2343 (toList!873 lt!71093))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(assert (=> d!42595 (= (containsKey!176 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) e!88989)))

(declare-fun b!136628 () Bool)

(declare-fun e!88990 () Bool)

(assert (=> b!136628 (= e!88989 e!88990)))

(declare-fun res!65532 () Bool)

(assert (=> b!136628 (=> (not res!65532) (not e!88990))))

(assert (=> b!136628 (= res!65532 (and (or (not ((_ is Cons!1737) (toList!873 lt!71093))) (bvsle (_1!1321 (h!2343 (toList!873 lt!71093))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))) ((_ is Cons!1737) (toList!873 lt!71093)) (bvslt (_1!1321 (h!2343 (toList!873 lt!71093))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(declare-fun b!136629 () Bool)

(assert (=> b!136629 (= e!88990 (containsKey!176 (t!6241 (toList!873 lt!71093)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (= (and d!42595 (not res!65531)) b!136628))

(assert (= (and b!136628 res!65532) b!136629))

(assert (=> b!136629 m!162523))

(declare-fun m!162943 () Bool)

(assert (=> b!136629 m!162943))

(assert (=> d!42553 d!42595))

(declare-fun d!42597 () Bool)

(declare-fun e!89001 () Bool)

(assert (=> d!42597 e!89001))

(declare-fun c!25568 () Bool)

(declare-fun lt!71376 () SeekEntryResult!286)

(assert (=> d!42597 (= c!25568 ((_ is MissingZero!286) lt!71376))))

(assert (=> d!42597 (= lt!71376 (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(declare-fun lt!71375 () Unit!4291)

(declare-fun choose!841 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 64) Int) Unit!4291)

(assert (=> d!42597 (= lt!71375 (choose!841 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (defaultEntry!2889 newMap!16)))))

(assert (=> d!42597 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42597 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (defaultEntry!2889 newMap!16)) lt!71375)))

(declare-fun b!136646 () Bool)

(assert (=> b!136646 (and (bvsge (index!3305 lt!71376) #b00000000000000000000000000000000) (bvslt (index!3305 lt!71376) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun res!65542 () Bool)

(assert (=> b!136646 (= res!65542 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3305 lt!71376)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!89002 () Bool)

(assert (=> b!136646 (=> (not res!65542) (not e!89002))))

(declare-fun b!136647 () Bool)

(declare-fun e!89000 () Bool)

(declare-fun call!15050 () Bool)

(assert (=> b!136647 (= e!89000 (not call!15050))))

(declare-fun b!136648 () Bool)

(assert (=> b!136648 (= e!89002 (not call!15050))))

(declare-fun bm!15047 () Bool)

(assert (=> bm!15047 (= call!15050 (arrayContainsKey!0 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!136649 () Bool)

(declare-fun res!65541 () Bool)

(assert (=> b!136649 (=> (not res!65541) (not e!89000))))

(assert (=> b!136649 (= res!65541 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3308 lt!71376)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136649 (and (bvsge (index!3308 lt!71376) #b00000000000000000000000000000000) (bvslt (index!3308 lt!71376) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136650 () Bool)

(declare-fun res!65544 () Bool)

(assert (=> b!136650 (=> (not res!65544) (not e!89000))))

(declare-fun call!15051 () Bool)

(assert (=> b!136650 (= res!65544 call!15051)))

(declare-fun e!88999 () Bool)

(assert (=> b!136650 (= e!88999 e!89000)))

(declare-fun b!136651 () Bool)

(assert (=> b!136651 (= e!89001 e!89002)))

(declare-fun res!65543 () Bool)

(assert (=> b!136651 (= res!65543 call!15051)))

(assert (=> b!136651 (=> (not res!65543) (not e!89002))))

(declare-fun b!136652 () Bool)

(assert (=> b!136652 (= e!89001 e!88999)))

(declare-fun c!25569 () Bool)

(assert (=> b!136652 (= c!25569 ((_ is MissingVacant!286) lt!71376))))

(declare-fun bm!15048 () Bool)

(assert (=> bm!15048 (= call!15051 (inRange!0 (ite c!25568 (index!3305 lt!71376) (index!3308 lt!71376)) (mask!7203 newMap!16)))))

(declare-fun b!136653 () Bool)

(assert (=> b!136653 (= e!88999 ((_ is Undefined!286) lt!71376))))

(assert (= (and d!42597 c!25568) b!136651))

(assert (= (and d!42597 (not c!25568)) b!136652))

(assert (= (and b!136651 res!65543) b!136646))

(assert (= (and b!136646 res!65542) b!136648))

(assert (= (and b!136652 c!25569) b!136650))

(assert (= (and b!136652 (not c!25569)) b!136653))

(assert (= (and b!136650 res!65544) b!136649))

(assert (= (and b!136649 res!65541) b!136647))

(assert (= (or b!136651 b!136650) bm!15048))

(assert (= (or b!136648 b!136647) bm!15047))

(declare-fun m!162945 () Bool)

(assert (=> b!136649 m!162945))

(declare-fun m!162947 () Bool)

(assert (=> b!136646 m!162947))

(declare-fun m!162949 () Bool)

(assert (=> bm!15048 m!162949))

(assert (=> bm!15047 m!162523))

(assert (=> bm!15047 m!162661))

(assert (=> d!42597 m!162523))

(assert (=> d!42597 m!162671))

(assert (=> d!42597 m!162523))

(declare-fun m!162951 () Bool)

(assert (=> d!42597 m!162951))

(assert (=> d!42597 m!162751))

(assert (=> bm!15019 d!42597))

(declare-fun d!42599 () Bool)

(declare-fun e!89003 () Bool)

(assert (=> d!42599 e!89003))

(declare-fun res!65546 () Bool)

(assert (=> d!42599 (=> (not res!65546) (not e!89003))))

(declare-fun lt!71380 () ListLongMap!1715)

(assert (=> d!42599 (= res!65546 (contains!901 lt!71380 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!71377 () List!1741)

(assert (=> d!42599 (= lt!71380 (ListLongMap!1716 lt!71377))))

(declare-fun lt!71378 () Unit!4291)

(declare-fun lt!71379 () Unit!4291)

(assert (=> d!42599 (= lt!71378 lt!71379)))

(assert (=> d!42599 (= (getValueByKey!172 lt!71377 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!177 (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!42599 (= lt!71379 (lemmaContainsTupThenGetReturnValue!89 lt!71377 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!42599 (= lt!71377 (insertStrictlySorted!91 (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021)) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!42599 (= (+!171 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021) (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!71380)))

(declare-fun b!136654 () Bool)

(declare-fun res!65545 () Bool)

(assert (=> b!136654 (=> (not res!65545) (not e!89003))))

(assert (=> b!136654 (= res!65545 (= (getValueByKey!172 (toList!873 lt!71380) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!177 (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!136655 () Bool)

(assert (=> b!136655 (= e!89003 (contains!904 (toList!873 lt!71380) (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!42599 res!65546) b!136654))

(assert (= (and b!136654 res!65545) b!136655))

(declare-fun m!162953 () Bool)

(assert (=> d!42599 m!162953))

(declare-fun m!162955 () Bool)

(assert (=> d!42599 m!162955))

(declare-fun m!162957 () Bool)

(assert (=> d!42599 m!162957))

(declare-fun m!162959 () Bool)

(assert (=> d!42599 m!162959))

(declare-fun m!162961 () Bool)

(assert (=> b!136654 m!162961))

(declare-fun m!162963 () Bool)

(assert (=> b!136655 m!162963))

(assert (=> bm!15018 d!42599))

(declare-fun d!42601 () Bool)

(assert (=> d!42601 (= (apply!117 lt!71161 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!172 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5723 () Bool)

(assert (= bs!5723 d!42601))

(assert (=> bs!5723 m!162933))

(assert (=> bs!5723 m!162933))

(declare-fun m!162965 () Bool)

(assert (=> bs!5723 m!162965))

(assert (=> b!136315 d!42601))

(declare-fun d!42603 () Bool)

(declare-fun res!65547 () Bool)

(declare-fun e!89004 () Bool)

(assert (=> d!42603 (=> res!65547 e!89004)))

(assert (=> d!42603 (= res!65547 (= (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!42603 (= (arrayContainsKey!0 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000) e!89004)))

(declare-fun b!136656 () Bool)

(declare-fun e!89005 () Bool)

(assert (=> b!136656 (= e!89004 e!89005)))

(declare-fun res!65548 () Bool)

(assert (=> b!136656 (=> (not res!65548) (not e!89005))))

(assert (=> b!136656 (= res!65548 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136657 () Bool)

(assert (=> b!136657 (= e!89005 (arrayContainsKey!0 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!42603 (not res!65547)) b!136656))

(assert (= (and b!136656 res!65548) b!136657))

(assert (=> d!42603 m!162731))

(assert (=> b!136657 m!162523))

(declare-fun m!162967 () Bool)

(assert (=> b!136657 m!162967))

(assert (=> bm!15008 d!42603))

(declare-fun d!42605 () Bool)

(assert (=> d!42605 (= (inRange!0 (ite c!25521 (ite c!25519 (index!3306 lt!71244) (ite c!25517 (index!3305 lt!71246) (index!3308 lt!71246))) (ite c!25516 (index!3306 lt!71253) (ite c!25520 (index!3305 lt!71245) (index!3308 lt!71245)))) (mask!7203 newMap!16)) (and (bvsge (ite c!25521 (ite c!25519 (index!3306 lt!71244) (ite c!25517 (index!3305 lt!71246) (index!3308 lt!71246))) (ite c!25516 (index!3306 lt!71253) (ite c!25520 (index!3305 lt!71245) (index!3308 lt!71245)))) #b00000000000000000000000000000000) (bvslt (ite c!25521 (ite c!25519 (index!3306 lt!71244) (ite c!25517 (index!3305 lt!71246) (index!3308 lt!71246))) (ite c!25516 (index!3306 lt!71253) (ite c!25520 (index!3305 lt!71245) (index!3308 lt!71245)))) (bvadd (mask!7203 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!15017 d!42605))

(declare-fun b!136658 () Bool)

(declare-fun e!89013 () Bool)

(declare-fun call!15057 () Bool)

(assert (=> b!136658 (= e!89013 (not call!15057))))

(declare-fun b!136659 () Bool)

(declare-fun res!65550 () Bool)

(declare-fun e!89009 () Bool)

(assert (=> b!136659 (=> (not res!65550) (not e!89009))))

(declare-fun e!89007 () Bool)

(assert (=> b!136659 (= res!65550 e!89007)))

(declare-fun res!65556 () Bool)

(assert (=> b!136659 (=> res!65556 e!89007)))

(declare-fun e!89011 () Bool)

(assert (=> b!136659 (= res!65556 (not e!89011))))

(declare-fun res!65553 () Bool)

(assert (=> b!136659 (=> (not res!65553) (not e!89011))))

(assert (=> b!136659 (= res!65553 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136660 () Bool)

(declare-fun e!89015 () Bool)

(declare-fun e!89012 () Bool)

(assert (=> b!136660 (= e!89015 e!89012)))

(declare-fun res!65557 () Bool)

(declare-fun call!15056 () Bool)

(assert (=> b!136660 (= res!65557 call!15056)))

(assert (=> b!136660 (=> (not res!65557) (not e!89012))))

(declare-fun bm!15049 () Bool)

(declare-fun call!15055 () ListLongMap!1715)

(declare-fun call!15058 () ListLongMap!1715)

(assert (=> bm!15049 (= call!15055 call!15058)))

(declare-fun b!136661 () Bool)

(declare-fun e!89018 () Bool)

(assert (=> b!136661 (= e!89007 e!89018)))

(declare-fun res!65555 () Bool)

(assert (=> b!136661 (=> (not res!65555) (not e!89018))))

(declare-fun lt!71391 () ListLongMap!1715)

(assert (=> b!136661 (= res!65555 (contains!901 lt!71391 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!136661 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136662 () Bool)

(declare-fun e!89014 () ListLongMap!1715)

(declare-fun e!89010 () ListLongMap!1715)

(assert (=> b!136662 (= e!89014 e!89010)))

(declare-fun c!25571 () Bool)

(assert (=> b!136662 (= c!25571 (and (not (= (bvand (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!15050 () Bool)

(assert (=> bm!15050 (= call!15056 (contains!901 lt!71391 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136663 () Bool)

(assert (=> b!136663 (= e!89012 (= (apply!117 lt!71391 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2742 newMap!16)))))

(declare-fun b!136664 () Bool)

(declare-fun e!89017 () ListLongMap!1715)

(declare-fun call!15053 () ListLongMap!1715)

(assert (=> b!136664 (= e!89017 call!15053)))

(declare-fun bm!15051 () Bool)

(declare-fun call!15054 () ListLongMap!1715)

(declare-fun call!15052 () ListLongMap!1715)

(assert (=> bm!15051 (= call!15054 call!15052)))

(declare-fun b!136665 () Bool)

(declare-fun e!89008 () Bool)

(assert (=> b!136665 (= e!89008 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136667 () Bool)

(assert (=> b!136667 (= e!89010 call!15054)))

(declare-fun b!136668 () Bool)

(assert (=> b!136668 (= e!89011 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136669 () Bool)

(assert (=> b!136669 (= e!89009 e!89013)))

(declare-fun c!25575 () Bool)

(assert (=> b!136669 (= c!25575 (not (= (bvand (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136670 () Bool)

(declare-fun e!89016 () Unit!4291)

(declare-fun lt!71385 () Unit!4291)

(assert (=> b!136670 (= e!89016 lt!71385)))

(declare-fun lt!71396 () ListLongMap!1715)

(assert (=> b!136670 (= lt!71396 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25512 (_values!2872 newMap!16) lt!71250) (mask!7203 newMap!16) (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) (zeroValue!2742 newMap!16) (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71389 () (_ BitVec 64))

(assert (=> b!136670 (= lt!71389 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71386 () (_ BitVec 64))

(assert (=> b!136670 (= lt!71386 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71387 () Unit!4291)

(assert (=> b!136670 (= lt!71387 (addStillContains!93 lt!71396 lt!71389 (zeroValue!2742 newMap!16) lt!71386))))

(assert (=> b!136670 (contains!901 (+!171 lt!71396 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16))) lt!71386)))

(declare-fun lt!71401 () Unit!4291)

(assert (=> b!136670 (= lt!71401 lt!71387)))

(declare-fun lt!71388 () ListLongMap!1715)

(assert (=> b!136670 (= lt!71388 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25512 (_values!2872 newMap!16) lt!71250) (mask!7203 newMap!16) (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) (zeroValue!2742 newMap!16) (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71402 () (_ BitVec 64))

(assert (=> b!136670 (= lt!71402 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71384 () (_ BitVec 64))

(assert (=> b!136670 (= lt!71384 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71381 () Unit!4291)

(assert (=> b!136670 (= lt!71381 (addApplyDifferent!93 lt!71388 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) lt!71384))))

(assert (=> b!136670 (= (apply!117 (+!171 lt!71388 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) lt!71384) (apply!117 lt!71388 lt!71384))))

(declare-fun lt!71397 () Unit!4291)

(assert (=> b!136670 (= lt!71397 lt!71381)))

(declare-fun lt!71394 () ListLongMap!1715)

(assert (=> b!136670 (= lt!71394 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25512 (_values!2872 newMap!16) lt!71250) (mask!7203 newMap!16) (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) (zeroValue!2742 newMap!16) (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71382 () (_ BitVec 64))

(assert (=> b!136670 (= lt!71382 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71383 () (_ BitVec 64))

(assert (=> b!136670 (= lt!71383 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71390 () Unit!4291)

(assert (=> b!136670 (= lt!71390 (addApplyDifferent!93 lt!71394 lt!71382 (zeroValue!2742 newMap!16) lt!71383))))

(assert (=> b!136670 (= (apply!117 (+!171 lt!71394 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16))) lt!71383) (apply!117 lt!71394 lt!71383))))

(declare-fun lt!71392 () Unit!4291)

(assert (=> b!136670 (= lt!71392 lt!71390)))

(declare-fun lt!71399 () ListLongMap!1715)

(assert (=> b!136670 (= lt!71399 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25512 (_values!2872 newMap!16) lt!71250) (mask!7203 newMap!16) (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) (zeroValue!2742 newMap!16) (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71398 () (_ BitVec 64))

(assert (=> b!136670 (= lt!71398 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71400 () (_ BitVec 64))

(assert (=> b!136670 (= lt!71400 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136670 (= lt!71385 (addApplyDifferent!93 lt!71399 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) lt!71400))))

(assert (=> b!136670 (= (apply!117 (+!171 lt!71399 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) lt!71400) (apply!117 lt!71399 lt!71400))))

(declare-fun b!136671 () Bool)

(assert (=> b!136671 (= e!89017 call!15054)))

(declare-fun b!136672 () Bool)

(assert (=> b!136672 (= e!89014 (+!171 call!15052 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))))

(declare-fun bm!15052 () Bool)

(assert (=> bm!15052 (= call!15058 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25512 (_values!2872 newMap!16) lt!71250) (mask!7203 newMap!16) (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) (zeroValue!2742 newMap!16) (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun b!136673 () Bool)

(declare-fun Unit!4302 () Unit!4291)

(assert (=> b!136673 (= e!89016 Unit!4302)))

(declare-fun b!136674 () Bool)

(declare-fun res!65549 () Bool)

(assert (=> b!136674 (=> (not res!65549) (not e!89009))))

(assert (=> b!136674 (= res!65549 e!89015)))

(declare-fun c!25572 () Bool)

(assert (=> b!136674 (= c!25572 (not (= (bvand (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!136666 () Bool)

(declare-fun e!89006 () Bool)

(assert (=> b!136666 (= e!89013 e!89006)))

(declare-fun res!65552 () Bool)

(assert (=> b!136666 (= res!65552 call!15057)))

(assert (=> b!136666 (=> (not res!65552) (not e!89006))))

(declare-fun d!42607 () Bool)

(assert (=> d!42607 e!89009))

(declare-fun res!65551 () Bool)

(assert (=> d!42607 (=> (not res!65551) (not e!89009))))

(assert (=> d!42607 (= res!65551 (or (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))))

(declare-fun lt!71393 () ListLongMap!1715)

(assert (=> d!42607 (= lt!71391 lt!71393)))

(declare-fun lt!71395 () Unit!4291)

(assert (=> d!42607 (= lt!71395 e!89016)))

(declare-fun c!25573 () Bool)

(assert (=> d!42607 (= c!25573 e!89008)))

(declare-fun res!65554 () Bool)

(assert (=> d!42607 (=> (not res!65554) (not e!89008))))

(assert (=> d!42607 (= res!65554 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42607 (= lt!71393 e!89014)))

(declare-fun c!25570 () Bool)

(assert (=> d!42607 (= c!25570 (and (not (= (bvand (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42607 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42607 (= (getCurrentListMap!544 (_keys!4642 newMap!16) (ite c!25512 (_values!2872 newMap!16) lt!71250) (mask!7203 newMap!16) (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) (zeroValue!2742 newMap!16) (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!71391)))

(declare-fun b!136675 () Bool)

(assert (=> b!136675 (= e!89006 (= (apply!117 lt!71391 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))

(declare-fun bm!15053 () Bool)

(assert (=> bm!15053 (= call!15053 call!15055)))

(declare-fun b!136676 () Bool)

(assert (=> b!136676 (= e!89015 (not call!15056))))

(declare-fun bm!15054 () Bool)

(assert (=> bm!15054 (= call!15057 (contains!901 lt!71391 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136677 () Bool)

(assert (=> b!136677 (= e!89018 (= (apply!117 lt!71391 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (ite c!25512 (_values!2872 newMap!16) lt!71250)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136677 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (ite c!25512 (_values!2872 newMap!16) lt!71250))))))

(assert (=> b!136677 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun bm!15055 () Bool)

(assert (=> bm!15055 (= call!15052 (+!171 (ite c!25570 call!15058 (ite c!25571 call!15055 call!15053)) (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(declare-fun c!25574 () Bool)

(declare-fun b!136678 () Bool)

(assert (=> b!136678 (= c!25574 (and (not (= (bvand (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!136678 (= e!89010 e!89017)))

(assert (= (and d!42607 c!25570) b!136672))

(assert (= (and d!42607 (not c!25570)) b!136662))

(assert (= (and b!136662 c!25571) b!136667))

(assert (= (and b!136662 (not c!25571)) b!136678))

(assert (= (and b!136678 c!25574) b!136671))

(assert (= (and b!136678 (not c!25574)) b!136664))

(assert (= (or b!136671 b!136664) bm!15053))

(assert (= (or b!136667 bm!15053) bm!15049))

(assert (= (or b!136667 b!136671) bm!15051))

(assert (= (or b!136672 bm!15049) bm!15052))

(assert (= (or b!136672 bm!15051) bm!15055))

(assert (= (and d!42607 res!65554) b!136665))

(assert (= (and d!42607 c!25573) b!136670))

(assert (= (and d!42607 (not c!25573)) b!136673))

(assert (= (and d!42607 res!65551) b!136659))

(assert (= (and b!136659 res!65553) b!136668))

(assert (= (and b!136659 (not res!65556)) b!136661))

(assert (= (and b!136661 res!65555) b!136677))

(assert (= (and b!136659 res!65550) b!136674))

(assert (= (and b!136674 c!25572) b!136660))

(assert (= (and b!136674 (not c!25572)) b!136676))

(assert (= (and b!136660 res!65557) b!136663))

(assert (= (or b!136660 b!136676) bm!15050))

(assert (= (and b!136674 res!65549) b!136669))

(assert (= (and b!136669 c!25575) b!136666))

(assert (= (and b!136669 (not c!25575)) b!136658))

(assert (= (and b!136666 res!65552) b!136675))

(assert (= (or b!136666 b!136658) bm!15054))

(declare-fun b_lambda!6125 () Bool)

(assert (=> (not b_lambda!6125) (not b!136677)))

(assert (=> b!136677 t!6249))

(declare-fun b_and!8477 () Bool)

(assert (= b_and!8473 (and (=> t!6249 result!4059) b_and!8477)))

(assert (=> b!136677 t!6251))

(declare-fun b_and!8479 () Bool)

(assert (= b_and!8475 (and (=> t!6251 result!4061) b_and!8479)))

(declare-fun m!162969 () Bool)

(assert (=> bm!15050 m!162969))

(declare-fun m!162971 () Bool)

(assert (=> b!136677 m!162971))

(assert (=> b!136677 m!162731))

(declare-fun m!162973 () Bool)

(assert (=> b!136677 m!162973))

(assert (=> b!136677 m!162731))

(assert (=> b!136677 m!162815))

(assert (=> b!136677 m!162971))

(assert (=> b!136677 m!162815))

(declare-fun m!162975 () Bool)

(assert (=> b!136677 m!162975))

(declare-fun m!162977 () Bool)

(assert (=> b!136672 m!162977))

(declare-fun m!162979 () Bool)

(assert (=> bm!15055 m!162979))

(declare-fun m!162981 () Bool)

(assert (=> bm!15052 m!162981))

(declare-fun m!162983 () Bool)

(assert (=> b!136670 m!162983))

(declare-fun m!162985 () Bool)

(assert (=> b!136670 m!162985))

(declare-fun m!162987 () Bool)

(assert (=> b!136670 m!162987))

(declare-fun m!162989 () Bool)

(assert (=> b!136670 m!162989))

(declare-fun m!162991 () Bool)

(assert (=> b!136670 m!162991))

(declare-fun m!162993 () Bool)

(assert (=> b!136670 m!162993))

(declare-fun m!162995 () Bool)

(assert (=> b!136670 m!162995))

(declare-fun m!162997 () Bool)

(assert (=> b!136670 m!162997))

(declare-fun m!162999 () Bool)

(assert (=> b!136670 m!162999))

(declare-fun m!163001 () Bool)

(assert (=> b!136670 m!163001))

(assert (=> b!136670 m!162983))

(assert (=> b!136670 m!162991))

(assert (=> b!136670 m!162731))

(declare-fun m!163003 () Bool)

(assert (=> b!136670 m!163003))

(assert (=> b!136670 m!162981))

(assert (=> b!136670 m!162995))

(declare-fun m!163005 () Bool)

(assert (=> b!136670 m!163005))

(declare-fun m!163007 () Bool)

(assert (=> b!136670 m!163007))

(declare-fun m!163009 () Bool)

(assert (=> b!136670 m!163009))

(assert (=> b!136670 m!163007))

(declare-fun m!163011 () Bool)

(assert (=> b!136670 m!163011))

(declare-fun m!163013 () Bool)

(assert (=> bm!15054 m!163013))

(assert (=> d!42607 m!162751))

(assert (=> b!136668 m!162731))

(assert (=> b!136668 m!162731))

(assert (=> b!136668 m!162735))

(declare-fun m!163015 () Bool)

(assert (=> b!136675 m!163015))

(assert (=> b!136665 m!162731))

(assert (=> b!136665 m!162731))

(assert (=> b!136665 m!162735))

(declare-fun m!163017 () Bool)

(assert (=> b!136663 m!163017))

(assert (=> b!136661 m!162731))

(assert (=> b!136661 m!162731))

(declare-fun m!163019 () Bool)

(assert (=> b!136661 m!163019))

(assert (=> bm!15016 d!42607))

(declare-fun d!42609 () Bool)

(assert (=> d!42609 (= (get!1501 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136465 d!42609))

(declare-fun d!42611 () Bool)

(assert (=> d!42611 (= (get!1500 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!3219 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> b!136464 d!42611))

(declare-fun bm!15058 () Bool)

(declare-fun call!15061 () ListLongMap!1715)

(assert (=> bm!15058 (= call!15061 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun b!136703 () Bool)

(declare-fun e!89039 () Bool)

(declare-fun e!89037 () Bool)

(assert (=> b!136703 (= e!89039 e!89037)))

(declare-fun c!25585 () Bool)

(declare-fun e!89036 () Bool)

(assert (=> b!136703 (= c!25585 e!89036)))

(declare-fun res!65569 () Bool)

(assert (=> b!136703 (=> (not res!65569) (not e!89036))))

(assert (=> b!136703 (= res!65569 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!136704 () Bool)

(declare-fun e!89034 () Bool)

(assert (=> b!136704 (= e!89037 e!89034)))

(assert (=> b!136704 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun lt!71420 () ListLongMap!1715)

(declare-fun res!65567 () Bool)

(assert (=> b!136704 (= res!65567 (contains!901 lt!71420 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!136704 (=> (not res!65567) (not e!89034))))

(declare-fun b!136705 () Bool)

(declare-fun lt!71419 () Unit!4291)

(declare-fun lt!71418 () Unit!4291)

(assert (=> b!136705 (= lt!71419 lt!71418)))

(declare-fun lt!71423 () (_ BitVec 64))

(declare-fun lt!71421 () ListLongMap!1715)

(declare-fun lt!71422 () V!3499)

(declare-fun lt!71417 () (_ BitVec 64))

(assert (=> b!136705 (not (contains!901 (+!171 lt!71421 (tuple2!2623 lt!71417 lt!71422)) lt!71423))))

(declare-fun addStillNotContains!64 (ListLongMap!1715 (_ BitVec 64) V!3499 (_ BitVec 64)) Unit!4291)

(assert (=> b!136705 (= lt!71418 (addStillNotContains!64 lt!71421 lt!71417 lt!71422 lt!71423))))

(assert (=> b!136705 (= lt!71423 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!136705 (= lt!71422 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!136705 (= lt!71417 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!136705 (= lt!71421 call!15061)))

(declare-fun e!89035 () ListLongMap!1715)

(assert (=> b!136705 (= e!89035 (+!171 call!15061 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!136706 () Bool)

(assert (=> b!136706 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> b!136706 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2543 (_values!2872 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> b!136706 (= e!89034 (= (apply!117 lt!71420 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!136707 () Bool)

(declare-fun e!89033 () Bool)

(declare-fun isEmpty!417 (ListLongMap!1715) Bool)

(assert (=> b!136707 (= e!89033 (isEmpty!417 lt!71420))))

(declare-fun b!136708 () Bool)

(assert (=> b!136708 (= e!89036 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!136708 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun d!42613 () Bool)

(assert (=> d!42613 e!89039))

(declare-fun res!65568 () Bool)

(assert (=> d!42613 (=> (not res!65568) (not e!89039))))

(assert (=> d!42613 (= res!65568 (not (contains!901 lt!71420 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!89038 () ListLongMap!1715)

(assert (=> d!42613 (= lt!71420 e!89038)))

(declare-fun c!25586 () Bool)

(assert (=> d!42613 (= c!25586 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> d!42613 (validMask!0 (mask!7203 (v!3220 (underlying!460 thiss!992))))))

(assert (=> d!42613 (= (getCurrentListMapNoExtraKeys!138 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))) lt!71420)))

(declare-fun b!136709 () Bool)

(assert (=> b!136709 (= e!89038 e!89035)))

(declare-fun c!25584 () Bool)

(assert (=> b!136709 (= c!25584 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!136710 () Bool)

(assert (=> b!136710 (= e!89037 e!89033)))

(declare-fun c!25587 () Bool)

(assert (=> b!136710 (= c!25587 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!136711 () Bool)

(assert (=> b!136711 (= e!89038 (ListLongMap!1716 Nil!1738))))

(declare-fun b!136712 () Bool)

(assert (=> b!136712 (= e!89035 call!15061)))

(declare-fun b!136713 () Bool)

(assert (=> b!136713 (= e!89033 (= lt!71420 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!136714 () Bool)

(declare-fun res!65566 () Bool)

(assert (=> b!136714 (=> (not res!65566) (not e!89039))))

(assert (=> b!136714 (= res!65566 (not (contains!901 lt!71420 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42613 c!25586) b!136711))

(assert (= (and d!42613 (not c!25586)) b!136709))

(assert (= (and b!136709 c!25584) b!136705))

(assert (= (and b!136709 (not c!25584)) b!136712))

(assert (= (or b!136705 b!136712) bm!15058))

(assert (= (and d!42613 res!65568) b!136714))

(assert (= (and b!136714 res!65566) b!136703))

(assert (= (and b!136703 res!65569) b!136708))

(assert (= (and b!136703 c!25585) b!136704))

(assert (= (and b!136703 (not c!25585)) b!136710))

(assert (= (and b!136704 res!65567) b!136706))

(assert (= (and b!136710 c!25587) b!136713))

(assert (= (and b!136710 (not c!25587)) b!136707))

(declare-fun b_lambda!6127 () Bool)

(assert (=> (not b_lambda!6127) (not b!136705)))

(assert (=> b!136705 t!6238))

(declare-fun b_and!8481 () Bool)

(assert (= b_and!8477 (and (=> t!6238 result!4045) b_and!8481)))

(assert (=> b!136705 t!6240))

(declare-fun b_and!8483 () Bool)

(assert (= b_and!8479 (and (=> t!6240 result!4049) b_and!8483)))

(declare-fun b_lambda!6129 () Bool)

(assert (=> (not b_lambda!6129) (not b!136706)))

(assert (=> b!136706 t!6238))

(declare-fun b_and!8485 () Bool)

(assert (= b_and!8481 (and (=> t!6238 result!4045) b_and!8485)))

(assert (=> b!136706 t!6240))

(declare-fun b_and!8487 () Bool)

(assert (= b_and!8483 (and (=> t!6240 result!4049) b_and!8487)))

(assert (=> b!136708 m!162591))

(assert (=> b!136708 m!162591))

(assert (=> b!136708 m!162637))

(declare-fun m!163021 () Bool)

(assert (=> b!136705 m!163021))

(assert (=> b!136705 m!162541))

(assert (=> b!136705 m!162589))

(declare-fun m!163023 () Bool)

(assert (=> b!136705 m!163023))

(declare-fun m!163025 () Bool)

(assert (=> b!136705 m!163025))

(assert (=> b!136705 m!163025))

(declare-fun m!163027 () Bool)

(assert (=> b!136705 m!163027))

(assert (=> b!136705 m!162589))

(assert (=> b!136705 m!162541))

(assert (=> b!136705 m!162595))

(assert (=> b!136705 m!162591))

(declare-fun m!163029 () Bool)

(assert (=> b!136714 m!163029))

(declare-fun m!163031 () Bool)

(assert (=> bm!15058 m!163031))

(assert (=> b!136704 m!162591))

(assert (=> b!136704 m!162591))

(declare-fun m!163033 () Bool)

(assert (=> b!136704 m!163033))

(assert (=> b!136713 m!163031))

(assert (=> b!136706 m!162541))

(assert (=> b!136706 m!162589))

(assert (=> b!136706 m!162591))

(declare-fun m!163035 () Bool)

(assert (=> b!136706 m!163035))

(assert (=> b!136706 m!162589))

(assert (=> b!136706 m!162541))

(assert (=> b!136706 m!162595))

(assert (=> b!136706 m!162591))

(declare-fun m!163037 () Bool)

(assert (=> d!42613 m!163037))

(assert (=> d!42613 m!162635))

(assert (=> b!136709 m!162591))

(assert (=> b!136709 m!162591))

(assert (=> b!136709 m!162637))

(declare-fun m!163039 () Bool)

(assert (=> b!136707 m!163039))

(assert (=> bm!14944 d!42613))

(declare-fun d!42615 () Bool)

(declare-fun res!65570 () Bool)

(declare-fun e!89040 () Bool)

(assert (=> d!42615 (=> (not res!65570) (not e!89040))))

(assert (=> d!42615 (= res!65570 (simpleValid!92 (v!3220 (underlying!460 thiss!992))))))

(assert (=> d!42615 (= (valid!530 (v!3220 (underlying!460 thiss!992))) e!89040)))

(declare-fun b!136715 () Bool)

(declare-fun res!65571 () Bool)

(assert (=> b!136715 (=> (not res!65571) (not e!89040))))

(assert (=> b!136715 (= res!65571 (= (arrayCountValidKeys!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000000 (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))) (_size!604 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun b!136716 () Bool)

(declare-fun res!65572 () Bool)

(assert (=> b!136716 (=> (not res!65572) (not e!89040))))

(assert (=> b!136716 (= res!65572 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun b!136717 () Bool)

(assert (=> b!136717 (= e!89040 (arrayNoDuplicates!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000000 Nil!1740))))

(assert (= (and d!42615 res!65570) b!136715))

(assert (= (and b!136715 res!65571) b!136716))

(assert (= (and b!136716 res!65572) b!136717))

(declare-fun m!163041 () Bool)

(assert (=> d!42615 m!163041))

(declare-fun m!163043 () Bool)

(assert (=> b!136715 m!163043))

(declare-fun m!163045 () Bool)

(assert (=> b!136716 m!163045))

(declare-fun m!163047 () Bool)

(assert (=> b!136717 m!163047))

(assert (=> d!42543 d!42615))

(assert (=> b!136329 d!42549))

(declare-fun d!42617 () Bool)

(declare-fun isEmpty!418 (Option!178) Bool)

(assert (=> d!42617 (= (isDefined!126 (getValueByKey!172 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))) (not (isEmpty!418 (getValueByKey!172 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))))

(declare-fun bs!5724 () Bool)

(assert (= bs!5724 d!42617))

(assert (=> bs!5724 m!162655))

(declare-fun m!163049 () Bool)

(assert (=> bs!5724 m!163049))

(assert (=> b!136339 d!42617))

(declare-fun c!25592 () Bool)

(declare-fun d!42619 () Bool)

(assert (=> d!42619 (= c!25592 (and ((_ is Cons!1737) (toList!873 lt!71093)) (= (_1!1321 (h!2343 (toList!873 lt!71093))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(declare-fun e!89045 () Option!178)

(assert (=> d!42619 (= (getValueByKey!172 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) e!89045)))

(declare-fun e!89046 () Option!178)

(declare-fun b!136728 () Bool)

(assert (=> b!136728 (= e!89046 (getValueByKey!172 (t!6241 (toList!873 lt!71093)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun b!136726 () Bool)

(assert (=> b!136726 (= e!89045 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71093)))))))

(declare-fun b!136729 () Bool)

(assert (=> b!136729 (= e!89046 None!176)))

(declare-fun b!136727 () Bool)

(assert (=> b!136727 (= e!89045 e!89046)))

(declare-fun c!25593 () Bool)

(assert (=> b!136727 (= c!25593 (and ((_ is Cons!1737) (toList!873 lt!71093)) (not (= (_1!1321 (h!2343 (toList!873 lt!71093))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))))

(assert (= (and d!42619 c!25592) b!136726))

(assert (= (and d!42619 (not c!25592)) b!136727))

(assert (= (and b!136727 c!25593) b!136728))

(assert (= (and b!136727 (not c!25593)) b!136729))

(assert (=> b!136728 m!162523))

(declare-fun m!163051 () Bool)

(assert (=> b!136728 m!163051))

(assert (=> b!136339 d!42619))

(declare-fun d!42621 () Bool)

(declare-fun e!89047 () Bool)

(assert (=> d!42621 e!89047))

(declare-fun res!65574 () Bool)

(assert (=> d!42621 (=> (not res!65574) (not e!89047))))

(declare-fun lt!71427 () ListLongMap!1715)

(assert (=> d!42621 (= res!65574 (contains!901 lt!71427 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun lt!71424 () List!1741)

(assert (=> d!42621 (= lt!71427 (ListLongMap!1716 lt!71424))))

(declare-fun lt!71425 () Unit!4291)

(declare-fun lt!71426 () Unit!4291)

(assert (=> d!42621 (= lt!71425 lt!71426)))

(assert (=> d!42621 (= (getValueByKey!172 lt!71424 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42621 (= lt!71426 (lemmaContainsTupThenGetReturnValue!89 lt!71424 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42621 (= lt!71424 (insertStrictlySorted!91 (toList!873 call!14944) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42621 (= (+!171 call!14944 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71427)))

(declare-fun b!136730 () Bool)

(declare-fun res!65573 () Bool)

(assert (=> b!136730 (=> (not res!65573) (not e!89047))))

(assert (=> b!136730 (= res!65573 (= (getValueByKey!172 (toList!873 lt!71427) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!136731 () Bool)

(assert (=> b!136731 (= e!89047 (contains!904 (toList!873 lt!71427) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(assert (= (and d!42621 res!65574) b!136730))

(assert (= (and b!136730 res!65573) b!136731))

(declare-fun m!163053 () Bool)

(assert (=> d!42621 m!163053))

(declare-fun m!163055 () Bool)

(assert (=> d!42621 m!163055))

(declare-fun m!163057 () Bool)

(assert (=> d!42621 m!163057))

(declare-fun m!163059 () Bool)

(assert (=> d!42621 m!163059))

(declare-fun m!163061 () Bool)

(assert (=> b!136730 m!163061))

(declare-fun m!163063 () Bool)

(assert (=> b!136731 m!163063))

(assert (=> b!136312 d!42621))

(declare-fun d!42623 () Bool)

(assert (=> d!42623 (= (validMask!0 (mask!7203 (v!3220 (underlying!460 thiss!992)))) (and (or (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000001111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000011111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000001111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000011111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000001111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000011111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000001111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000011111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000001111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000011111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000001111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000011111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000111111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000001111111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000011111111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000111111111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000001111111111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000011111111111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000111111111111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00001111111111111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00011111111111111111111111111111) (= (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> d!42537 d!42623))

(declare-fun d!42625 () Bool)

(assert (=> d!42625 (isDefined!126 (getValueByKey!172 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun lt!71430 () Unit!4291)

(declare-fun choose!842 (List!1741 (_ BitVec 64)) Unit!4291)

(assert (=> d!42625 (= lt!71430 (choose!842 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun e!89050 () Bool)

(assert (=> d!42625 e!89050))

(declare-fun res!65577 () Bool)

(assert (=> d!42625 (=> (not res!65577) (not e!89050))))

(declare-fun isStrictlySorted!318 (List!1741) Bool)

(assert (=> d!42625 (= res!65577 (isStrictlySorted!318 (toList!873 lt!71093)))))

(assert (=> d!42625 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) lt!71430)))

(declare-fun b!136734 () Bool)

(assert (=> b!136734 (= e!89050 (containsKey!176 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (= (and d!42625 res!65577) b!136734))

(assert (=> d!42625 m!162523))

(assert (=> d!42625 m!162655))

(assert (=> d!42625 m!162655))

(assert (=> d!42625 m!162657))

(assert (=> d!42625 m!162523))

(declare-fun m!163065 () Bool)

(assert (=> d!42625 m!163065))

(declare-fun m!163067 () Bool)

(assert (=> d!42625 m!163067))

(assert (=> b!136734 m!162523))

(assert (=> b!136734 m!162651))

(assert (=> b!136337 d!42625))

(assert (=> b!136337 d!42617))

(assert (=> b!136337 d!42619))

(declare-fun d!42627 () Bool)

(declare-fun e!89051 () Bool)

(assert (=> d!42627 e!89051))

(declare-fun res!65579 () Bool)

(assert (=> d!42627 (=> (not res!65579) (not e!89051))))

(declare-fun lt!71434 () ListLongMap!1715)

(assert (=> d!42627 (= res!65579 (contains!901 lt!71434 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun lt!71431 () List!1741)

(assert (=> d!42627 (= lt!71434 (ListLongMap!1716 lt!71431))))

(declare-fun lt!71432 () Unit!4291)

(declare-fun lt!71433 () Unit!4291)

(assert (=> d!42627 (= lt!71432 lt!71433)))

(assert (=> d!42627 (= (getValueByKey!172 lt!71431 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42627 (= lt!71433 (lemmaContainsTupThenGetReturnValue!89 lt!71431 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42627 (= lt!71431 (insertStrictlySorted!91 (toList!873 lt!71158) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42627 (= (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71434)))

(declare-fun b!136735 () Bool)

(declare-fun res!65578 () Bool)

(assert (=> b!136735 (=> (not res!65578) (not e!89051))))

(assert (=> b!136735 (= res!65578 (= (getValueByKey!172 (toList!873 lt!71434) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!136736 () Bool)

(assert (=> b!136736 (= e!89051 (contains!904 (toList!873 lt!71434) (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(assert (= (and d!42627 res!65579) b!136735))

(assert (= (and b!136735 res!65578) b!136736))

(declare-fun m!163069 () Bool)

(assert (=> d!42627 m!163069))

(declare-fun m!163071 () Bool)

(assert (=> d!42627 m!163071))

(declare-fun m!163073 () Bool)

(assert (=> d!42627 m!163073))

(declare-fun m!163075 () Bool)

(assert (=> d!42627 m!163075))

(declare-fun m!163077 () Bool)

(assert (=> b!136735 m!163077))

(declare-fun m!163079 () Bool)

(assert (=> b!136736 m!163079))

(assert (=> b!136310 d!42627))

(declare-fun d!42629 () Bool)

(declare-fun e!89052 () Bool)

(assert (=> d!42629 e!89052))

(declare-fun res!65581 () Bool)

(assert (=> d!42629 (=> (not res!65581) (not e!89052))))

(declare-fun lt!71438 () ListLongMap!1715)

(assert (=> d!42629 (= res!65581 (contains!901 lt!71438 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun lt!71435 () List!1741)

(assert (=> d!42629 (= lt!71438 (ListLongMap!1716 lt!71435))))

(declare-fun lt!71436 () Unit!4291)

(declare-fun lt!71437 () Unit!4291)

(assert (=> d!42629 (= lt!71436 lt!71437)))

(assert (=> d!42629 (= (getValueByKey!172 lt!71435 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42629 (= lt!71437 (lemmaContainsTupThenGetReturnValue!89 lt!71435 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42629 (= lt!71435 (insertStrictlySorted!91 (toList!873 lt!71169) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42629 (= (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71438)))

(declare-fun b!136737 () Bool)

(declare-fun res!65580 () Bool)

(assert (=> b!136737 (=> (not res!65580) (not e!89052))))

(assert (=> b!136737 (= res!65580 (= (getValueByKey!172 (toList!873 lt!71438) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!136738 () Bool)

(assert (=> b!136738 (= e!89052 (contains!904 (toList!873 lt!71438) (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(assert (= (and d!42629 res!65581) b!136737))

(assert (= (and b!136737 res!65580) b!136738))

(declare-fun m!163081 () Bool)

(assert (=> d!42629 m!163081))

(declare-fun m!163083 () Bool)

(assert (=> d!42629 m!163083))

(declare-fun m!163085 () Bool)

(assert (=> d!42629 m!163085))

(declare-fun m!163087 () Bool)

(assert (=> d!42629 m!163087))

(declare-fun m!163089 () Bool)

(assert (=> b!136737 m!163089))

(declare-fun m!163091 () Bool)

(assert (=> b!136738 m!163091))

(assert (=> b!136310 d!42629))

(declare-fun d!42631 () Bool)

(declare-fun e!89053 () Bool)

(assert (=> d!42631 e!89053))

(declare-fun res!65583 () Bool)

(assert (=> d!42631 (=> (not res!65583) (not e!89053))))

(declare-fun lt!71442 () ListLongMap!1715)

(assert (=> d!42631 (= res!65583 (contains!901 lt!71442 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun lt!71439 () List!1741)

(assert (=> d!42631 (= lt!71442 (ListLongMap!1716 lt!71439))))

(declare-fun lt!71440 () Unit!4291)

(declare-fun lt!71441 () Unit!4291)

(assert (=> d!42631 (= lt!71440 lt!71441)))

(assert (=> d!42631 (= (getValueByKey!172 lt!71439 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42631 (= lt!71441 (lemmaContainsTupThenGetReturnValue!89 lt!71439 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42631 (= lt!71439 (insertStrictlySorted!91 (toList!873 lt!71166) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42631 (= (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71442)))

(declare-fun b!136739 () Bool)

(declare-fun res!65582 () Bool)

(assert (=> b!136739 (=> (not res!65582) (not e!89053))))

(assert (=> b!136739 (= res!65582 (= (getValueByKey!172 (toList!873 lt!71442) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!136740 () Bool)

(assert (=> b!136740 (= e!89053 (contains!904 (toList!873 lt!71442) (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(assert (= (and d!42631 res!65583) b!136739))

(assert (= (and b!136739 res!65582) b!136740))

(declare-fun m!163093 () Bool)

(assert (=> d!42631 m!163093))

(declare-fun m!163095 () Bool)

(assert (=> d!42631 m!163095))

(declare-fun m!163097 () Bool)

(assert (=> d!42631 m!163097))

(declare-fun m!163099 () Bool)

(assert (=> d!42631 m!163099))

(declare-fun m!163101 () Bool)

(assert (=> b!136739 m!163101))

(declare-fun m!163103 () Bool)

(assert (=> b!136740 m!163103))

(assert (=> b!136310 d!42631))

(assert (=> b!136310 d!42613))

(declare-fun d!42633 () Bool)

(assert (=> d!42633 (contains!901 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71156)))

(declare-fun lt!71445 () Unit!4291)

(declare-fun choose!843 (ListLongMap!1715 (_ BitVec 64) V!3499 (_ BitVec 64)) Unit!4291)

(assert (=> d!42633 (= lt!71445 (choose!843 lt!71166 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71156))))

(assert (=> d!42633 (contains!901 lt!71166 lt!71156)))

(assert (=> d!42633 (= (addStillContains!93 lt!71166 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71156) lt!71445)))

(declare-fun bs!5725 () Bool)

(assert (= bs!5725 d!42633))

(assert (=> bs!5725 m!162615))

(assert (=> bs!5725 m!162615))

(assert (=> bs!5725 m!162625))

(declare-fun m!163105 () Bool)

(assert (=> bs!5725 m!163105))

(declare-fun m!163107 () Bool)

(assert (=> bs!5725 m!163107))

(assert (=> b!136310 d!42633))

(declare-fun d!42635 () Bool)

(assert (=> d!42635 (= (apply!117 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71153) (apply!117 lt!71164 lt!71153))))

(declare-fun lt!71448 () Unit!4291)

(declare-fun choose!844 (ListLongMap!1715 (_ BitVec 64) V!3499 (_ BitVec 64)) Unit!4291)

(assert (=> d!42635 (= lt!71448 (choose!844 lt!71164 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71153))))

(declare-fun e!89056 () Bool)

(assert (=> d!42635 e!89056))

(declare-fun res!65586 () Bool)

(assert (=> d!42635 (=> (not res!65586) (not e!89056))))

(assert (=> d!42635 (= res!65586 (contains!901 lt!71164 lt!71153))))

(assert (=> d!42635 (= (addApplyDifferent!93 lt!71164 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71153) lt!71448)))

(declare-fun b!136745 () Bool)

(assert (=> b!136745 (= e!89056 (not (= lt!71153 lt!71152)))))

(assert (= (and d!42635 res!65586) b!136745))

(assert (=> d!42635 m!162627))

(assert (=> d!42635 m!162629))

(declare-fun m!163109 () Bool)

(assert (=> d!42635 m!163109))

(assert (=> d!42635 m!162627))

(declare-fun m!163111 () Bool)

(assert (=> d!42635 m!163111))

(assert (=> d!42635 m!162619))

(assert (=> b!136310 d!42635))

(declare-fun d!42637 () Bool)

(assert (=> d!42637 (= (apply!117 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71154) (apply!117 lt!71158 lt!71154))))

(declare-fun lt!71449 () Unit!4291)

(assert (=> d!42637 (= lt!71449 (choose!844 lt!71158 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71154))))

(declare-fun e!89057 () Bool)

(assert (=> d!42637 e!89057))

(declare-fun res!65587 () Bool)

(assert (=> d!42637 (=> (not res!65587) (not e!89057))))

(assert (=> d!42637 (= res!65587 (contains!901 lt!71158 lt!71154))))

(assert (=> d!42637 (= (addApplyDifferent!93 lt!71158 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71154) lt!71449)))

(declare-fun b!136746 () Bool)

(assert (=> b!136746 (= e!89057 (not (= lt!71154 lt!71172)))))

(assert (= (and d!42637 res!65587) b!136746))

(assert (=> d!42637 m!162611))

(assert (=> d!42637 m!162613))

(declare-fun m!163113 () Bool)

(assert (=> d!42637 m!163113))

(assert (=> d!42637 m!162611))

(declare-fun m!163115 () Bool)

(assert (=> d!42637 m!163115))

(assert (=> d!42637 m!162623))

(assert (=> b!136310 d!42637))

(declare-fun d!42639 () Bool)

(assert (=> d!42639 (= (apply!117 lt!71158 lt!71154) (get!1502 (getValueByKey!172 (toList!873 lt!71158) lt!71154)))))

(declare-fun bs!5726 () Bool)

(assert (= bs!5726 d!42639))

(declare-fun m!163117 () Bool)

(assert (=> bs!5726 m!163117))

(assert (=> bs!5726 m!163117))

(declare-fun m!163119 () Bool)

(assert (=> bs!5726 m!163119))

(assert (=> b!136310 d!42639))

(declare-fun d!42641 () Bool)

(declare-fun e!89059 () Bool)

(assert (=> d!42641 e!89059))

(declare-fun res!65588 () Bool)

(assert (=> d!42641 (=> res!65588 e!89059)))

(declare-fun lt!71453 () Bool)

(assert (=> d!42641 (= res!65588 (not lt!71453))))

(declare-fun lt!71452 () Bool)

(assert (=> d!42641 (= lt!71453 lt!71452)))

(declare-fun lt!71450 () Unit!4291)

(declare-fun e!89058 () Unit!4291)

(assert (=> d!42641 (= lt!71450 e!89058)))

(declare-fun c!25594 () Bool)

(assert (=> d!42641 (= c!25594 lt!71452)))

(assert (=> d!42641 (= lt!71452 (containsKey!176 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156))))

(assert (=> d!42641 (= (contains!901 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71156) lt!71453)))

(declare-fun b!136747 () Bool)

(declare-fun lt!71451 () Unit!4291)

(assert (=> b!136747 (= e!89058 lt!71451)))

(assert (=> b!136747 (= lt!71451 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156))))

(assert (=> b!136747 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156))))

(declare-fun b!136748 () Bool)

(declare-fun Unit!4303 () Unit!4291)

(assert (=> b!136748 (= e!89058 Unit!4303)))

(declare-fun b!136749 () Bool)

(assert (=> b!136749 (= e!89059 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156)))))

(assert (= (and d!42641 c!25594) b!136747))

(assert (= (and d!42641 (not c!25594)) b!136748))

(assert (= (and d!42641 (not res!65588)) b!136749))

(declare-fun m!163121 () Bool)

(assert (=> d!42641 m!163121))

(declare-fun m!163123 () Bool)

(assert (=> b!136747 m!163123))

(declare-fun m!163125 () Bool)

(assert (=> b!136747 m!163125))

(assert (=> b!136747 m!163125))

(declare-fun m!163127 () Bool)

(assert (=> b!136747 m!163127))

(assert (=> b!136749 m!163125))

(assert (=> b!136749 m!163125))

(assert (=> b!136749 m!163127))

(assert (=> b!136310 d!42641))

(declare-fun d!42643 () Bool)

(assert (=> d!42643 (= (apply!117 lt!71164 lt!71153) (get!1502 (getValueByKey!172 (toList!873 lt!71164) lt!71153)))))

(declare-fun bs!5727 () Bool)

(assert (= bs!5727 d!42643))

(declare-fun m!163129 () Bool)

(assert (=> bs!5727 m!163129))

(assert (=> bs!5727 m!163129))

(declare-fun m!163131 () Bool)

(assert (=> bs!5727 m!163131))

(assert (=> b!136310 d!42643))

(declare-fun d!42645 () Bool)

(assert (=> d!42645 (= (apply!117 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71170) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71170)))))

(declare-fun bs!5728 () Bool)

(assert (= bs!5728 d!42645))

(declare-fun m!163133 () Bool)

(assert (=> bs!5728 m!163133))

(assert (=> bs!5728 m!163133))

(declare-fun m!163135 () Bool)

(assert (=> bs!5728 m!163135))

(assert (=> b!136310 d!42645))

(declare-fun d!42647 () Bool)

(declare-fun e!89060 () Bool)

(assert (=> d!42647 e!89060))

(declare-fun res!65590 () Bool)

(assert (=> d!42647 (=> (not res!65590) (not e!89060))))

(declare-fun lt!71457 () ListLongMap!1715)

(assert (=> d!42647 (= res!65590 (contains!901 lt!71457 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun lt!71454 () List!1741)

(assert (=> d!42647 (= lt!71457 (ListLongMap!1716 lt!71454))))

(declare-fun lt!71455 () Unit!4291)

(declare-fun lt!71456 () Unit!4291)

(assert (=> d!42647 (= lt!71455 lt!71456)))

(assert (=> d!42647 (= (getValueByKey!172 lt!71454 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42647 (= lt!71456 (lemmaContainsTupThenGetReturnValue!89 lt!71454 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42647 (= lt!71454 (insertStrictlySorted!91 (toList!873 lt!71164) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42647 (= (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71457)))

(declare-fun b!136750 () Bool)

(declare-fun res!65589 () Bool)

(assert (=> b!136750 (=> (not res!65589) (not e!89060))))

(assert (=> b!136750 (= res!65589 (= (getValueByKey!172 (toList!873 lt!71457) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!136751 () Bool)

(assert (=> b!136751 (= e!89060 (contains!904 (toList!873 lt!71457) (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(assert (= (and d!42647 res!65590) b!136750))

(assert (= (and b!136750 res!65589) b!136751))

(declare-fun m!163137 () Bool)

(assert (=> d!42647 m!163137))

(declare-fun m!163139 () Bool)

(assert (=> d!42647 m!163139))

(declare-fun m!163141 () Bool)

(assert (=> d!42647 m!163141))

(declare-fun m!163143 () Bool)

(assert (=> d!42647 m!163143))

(declare-fun m!163145 () Bool)

(assert (=> b!136750 m!163145))

(declare-fun m!163147 () Bool)

(assert (=> b!136751 m!163147))

(assert (=> b!136310 d!42647))

(declare-fun d!42649 () Bool)

(assert (=> d!42649 (= (apply!117 lt!71169 lt!71170) (get!1502 (getValueByKey!172 (toList!873 lt!71169) lt!71170)))))

(declare-fun bs!5729 () Bool)

(assert (= bs!5729 d!42649))

(declare-fun m!163149 () Bool)

(assert (=> bs!5729 m!163149))

(assert (=> bs!5729 m!163149))

(declare-fun m!163151 () Bool)

(assert (=> bs!5729 m!163151))

(assert (=> b!136310 d!42649))

(declare-fun d!42651 () Bool)

(assert (=> d!42651 (= (apply!117 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71153) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71153)))))

(declare-fun bs!5730 () Bool)

(assert (= bs!5730 d!42651))

(declare-fun m!163153 () Bool)

(assert (=> bs!5730 m!163153))

(assert (=> bs!5730 m!163153))

(declare-fun m!163155 () Bool)

(assert (=> bs!5730 m!163155))

(assert (=> b!136310 d!42651))

(declare-fun d!42653 () Bool)

(assert (=> d!42653 (= (apply!117 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71170) (apply!117 lt!71169 lt!71170))))

(declare-fun lt!71458 () Unit!4291)

(assert (=> d!42653 (= lt!71458 (choose!844 lt!71169 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71170))))

(declare-fun e!89061 () Bool)

(assert (=> d!42653 e!89061))

(declare-fun res!65591 () Bool)

(assert (=> d!42653 (=> (not res!65591) (not e!89061))))

(assert (=> d!42653 (= res!65591 (contains!901 lt!71169 lt!71170))))

(assert (=> d!42653 (= (addApplyDifferent!93 lt!71169 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71170) lt!71458)))

(declare-fun b!136752 () Bool)

(assert (=> b!136752 (= e!89061 (not (= lt!71170 lt!71168)))))

(assert (= (and d!42653 res!65591) b!136752))

(assert (=> d!42653 m!162603))

(assert (=> d!42653 m!162605))

(declare-fun m!163157 () Bool)

(assert (=> d!42653 m!163157))

(assert (=> d!42653 m!162603))

(declare-fun m!163159 () Bool)

(assert (=> d!42653 m!163159))

(assert (=> d!42653 m!162631))

(assert (=> b!136310 d!42653))

(declare-fun d!42655 () Bool)

(assert (=> d!42655 (= (apply!117 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71154) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71154)))))

(declare-fun bs!5731 () Bool)

(assert (= bs!5731 d!42655))

(declare-fun m!163161 () Bool)

(assert (=> bs!5731 m!163161))

(assert (=> bs!5731 m!163161))

(declare-fun m!163163 () Bool)

(assert (=> bs!5731 m!163163))

(assert (=> b!136310 d!42655))

(declare-fun b!136753 () Bool)

(declare-fun e!89069 () Bool)

(declare-fun call!15067 () Bool)

(assert (=> b!136753 (= e!89069 (not call!15067))))

(declare-fun b!136754 () Bool)

(declare-fun res!65593 () Bool)

(declare-fun e!89065 () Bool)

(assert (=> b!136754 (=> (not res!65593) (not e!89065))))

(declare-fun e!89063 () Bool)

(assert (=> b!136754 (= res!65593 e!89063)))

(declare-fun res!65599 () Bool)

(assert (=> b!136754 (=> res!65599 e!89063)))

(declare-fun e!89067 () Bool)

(assert (=> b!136754 (= res!65599 (not e!89067))))

(declare-fun res!65596 () Bool)

(assert (=> b!136754 (=> (not res!65596) (not e!89067))))

(assert (=> b!136754 (= res!65596 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136755 () Bool)

(declare-fun e!89071 () Bool)

(declare-fun e!89068 () Bool)

(assert (=> b!136755 (= e!89071 e!89068)))

(declare-fun res!65600 () Bool)

(declare-fun call!15066 () Bool)

(assert (=> b!136755 (= res!65600 call!15066)))

(assert (=> b!136755 (=> (not res!65600) (not e!89068))))

(declare-fun bm!15059 () Bool)

(declare-fun call!15065 () ListLongMap!1715)

(declare-fun call!15068 () ListLongMap!1715)

(assert (=> bm!15059 (= call!15065 call!15068)))

(declare-fun b!136756 () Bool)

(declare-fun e!89074 () Bool)

(assert (=> b!136756 (= e!89063 e!89074)))

(declare-fun res!65598 () Bool)

(assert (=> b!136756 (=> (not res!65598) (not e!89074))))

(declare-fun lt!71469 () ListLongMap!1715)

(assert (=> b!136756 (= res!65598 (contains!901 lt!71469 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!136756 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136757 () Bool)

(declare-fun e!89070 () ListLongMap!1715)

(declare-fun e!89066 () ListLongMap!1715)

(assert (=> b!136757 (= e!89070 e!89066)))

(declare-fun c!25596 () Bool)

(assert (=> b!136757 (= c!25596 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!15060 () Bool)

(assert (=> bm!15060 (= call!15066 (contains!901 lt!71469 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136758 () Bool)

(assert (=> b!136758 (= e!89068 (= (apply!117 lt!71469 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2742 newMap!16)))))

(declare-fun b!136759 () Bool)

(declare-fun e!89073 () ListLongMap!1715)

(declare-fun call!15063 () ListLongMap!1715)

(assert (=> b!136759 (= e!89073 call!15063)))

(declare-fun bm!15061 () Bool)

(declare-fun call!15064 () ListLongMap!1715)

(declare-fun call!15062 () ListLongMap!1715)

(assert (=> bm!15061 (= call!15064 call!15062)))

(declare-fun b!136760 () Bool)

(declare-fun e!89064 () Bool)

(assert (=> b!136760 (= e!89064 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136762 () Bool)

(assert (=> b!136762 (= e!89066 call!15064)))

(declare-fun b!136763 () Bool)

(assert (=> b!136763 (= e!89067 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136764 () Bool)

(assert (=> b!136764 (= e!89065 e!89069)))

(declare-fun c!25600 () Bool)

(assert (=> b!136764 (= c!25600 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136765 () Bool)

(declare-fun e!89072 () Unit!4291)

(declare-fun lt!71463 () Unit!4291)

(assert (=> b!136765 (= e!89072 lt!71463)))

(declare-fun lt!71474 () ListLongMap!1715)

(assert (=> b!136765 (= lt!71474 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71467 () (_ BitVec 64))

(assert (=> b!136765 (= lt!71467 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71464 () (_ BitVec 64))

(assert (=> b!136765 (= lt!71464 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71465 () Unit!4291)

(assert (=> b!136765 (= lt!71465 (addStillContains!93 lt!71474 lt!71467 (zeroValue!2742 newMap!16) lt!71464))))

(assert (=> b!136765 (contains!901 (+!171 lt!71474 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16))) lt!71464)))

(declare-fun lt!71479 () Unit!4291)

(assert (=> b!136765 (= lt!71479 lt!71465)))

(declare-fun lt!71466 () ListLongMap!1715)

(assert (=> b!136765 (= lt!71466 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71480 () (_ BitVec 64))

(assert (=> b!136765 (= lt!71480 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71462 () (_ BitVec 64))

(assert (=> b!136765 (= lt!71462 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71459 () Unit!4291)

(assert (=> b!136765 (= lt!71459 (addApplyDifferent!93 lt!71466 lt!71480 (minValue!2742 newMap!16) lt!71462))))

(assert (=> b!136765 (= (apply!117 (+!171 lt!71466 (tuple2!2623 lt!71480 (minValue!2742 newMap!16))) lt!71462) (apply!117 lt!71466 lt!71462))))

(declare-fun lt!71475 () Unit!4291)

(assert (=> b!136765 (= lt!71475 lt!71459)))

(declare-fun lt!71472 () ListLongMap!1715)

(assert (=> b!136765 (= lt!71472 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71460 () (_ BitVec 64))

(assert (=> b!136765 (= lt!71460 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71461 () (_ BitVec 64))

(assert (=> b!136765 (= lt!71461 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71468 () Unit!4291)

(assert (=> b!136765 (= lt!71468 (addApplyDifferent!93 lt!71472 lt!71460 (zeroValue!2742 newMap!16) lt!71461))))

(assert (=> b!136765 (= (apply!117 (+!171 lt!71472 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16))) lt!71461) (apply!117 lt!71472 lt!71461))))

(declare-fun lt!71470 () Unit!4291)

(assert (=> b!136765 (= lt!71470 lt!71468)))

(declare-fun lt!71477 () ListLongMap!1715)

(assert (=> b!136765 (= lt!71477 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71476 () (_ BitVec 64))

(assert (=> b!136765 (= lt!71476 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71478 () (_ BitVec 64))

(assert (=> b!136765 (= lt!71478 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136765 (= lt!71463 (addApplyDifferent!93 lt!71477 lt!71476 (minValue!2742 newMap!16) lt!71478))))

(assert (=> b!136765 (= (apply!117 (+!171 lt!71477 (tuple2!2623 lt!71476 (minValue!2742 newMap!16))) lt!71478) (apply!117 lt!71477 lt!71478))))

(declare-fun b!136766 () Bool)

(assert (=> b!136766 (= e!89073 call!15064)))

(declare-fun b!136767 () Bool)

(assert (=> b!136767 (= e!89070 (+!171 call!15062 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))

(declare-fun bm!15062 () Bool)

(assert (=> bm!15062 (= call!15068 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun b!136768 () Bool)

(declare-fun Unit!4304 () Unit!4291)

(assert (=> b!136768 (= e!89072 Unit!4304)))

(declare-fun b!136769 () Bool)

(declare-fun res!65592 () Bool)

(assert (=> b!136769 (=> (not res!65592) (not e!89065))))

(assert (=> b!136769 (= res!65592 e!89071)))

(declare-fun c!25597 () Bool)

(assert (=> b!136769 (= c!25597 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!136761 () Bool)

(declare-fun e!89062 () Bool)

(assert (=> b!136761 (= e!89069 e!89062)))

(declare-fun res!65595 () Bool)

(assert (=> b!136761 (= res!65595 call!15067)))

(assert (=> b!136761 (=> (not res!65595) (not e!89062))))

(declare-fun d!42657 () Bool)

(assert (=> d!42657 e!89065))

(declare-fun res!65594 () Bool)

(assert (=> d!42657 (=> (not res!65594) (not e!89065))))

(assert (=> d!42657 (= res!65594 (or (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))))

(declare-fun lt!71471 () ListLongMap!1715)

(assert (=> d!42657 (= lt!71469 lt!71471)))

(declare-fun lt!71473 () Unit!4291)

(assert (=> d!42657 (= lt!71473 e!89072)))

(declare-fun c!25598 () Bool)

(assert (=> d!42657 (= c!25598 e!89064)))

(declare-fun res!65597 () Bool)

(assert (=> d!42657 (=> (not res!65597) (not e!89064))))

(assert (=> d!42657 (= res!65597 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42657 (= lt!71471 e!89070)))

(declare-fun c!25595 () Bool)

(assert (=> d!42657 (= c!25595 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42657 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42657 (= (getCurrentListMap!544 (_keys!4642 newMap!16) (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!71469)))

(declare-fun b!136770 () Bool)

(assert (=> b!136770 (= e!89062 (= (apply!117 lt!71469 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2742 newMap!16)))))

(declare-fun bm!15063 () Bool)

(assert (=> bm!15063 (= call!15063 call!15065)))

(declare-fun b!136771 () Bool)

(assert (=> b!136771 (= e!89071 (not call!15066))))

(declare-fun bm!15064 () Bool)

(assert (=> bm!15064 (= call!15067 (contains!901 lt!71469 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136772 () Bool)

(assert (=> b!136772 (= e!89074 (= (apply!117 lt!71469 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136772 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))))))))

(assert (=> b!136772 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun bm!15065 () Bool)

(assert (=> bm!15065 (= call!15062 (+!171 (ite c!25595 call!15068 (ite c!25596 call!15065 call!15063)) (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(declare-fun b!136773 () Bool)

(declare-fun c!25599 () Bool)

(assert (=> b!136773 (= c!25599 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!136773 (= e!89066 e!89073)))

(assert (= (and d!42657 c!25595) b!136767))

(assert (= (and d!42657 (not c!25595)) b!136757))

(assert (= (and b!136757 c!25596) b!136762))

(assert (= (and b!136757 (not c!25596)) b!136773))

(assert (= (and b!136773 c!25599) b!136766))

(assert (= (and b!136773 (not c!25599)) b!136759))

(assert (= (or b!136766 b!136759) bm!15063))

(assert (= (or b!136762 bm!15063) bm!15059))

(assert (= (or b!136762 b!136766) bm!15061))

(assert (= (or b!136767 bm!15059) bm!15062))

(assert (= (or b!136767 bm!15061) bm!15065))

(assert (= (and d!42657 res!65597) b!136760))

(assert (= (and d!42657 c!25598) b!136765))

(assert (= (and d!42657 (not c!25598)) b!136768))

(assert (= (and d!42657 res!65594) b!136754))

(assert (= (and b!136754 res!65596) b!136763))

(assert (= (and b!136754 (not res!65599)) b!136756))

(assert (= (and b!136756 res!65598) b!136772))

(assert (= (and b!136754 res!65593) b!136769))

(assert (= (and b!136769 c!25597) b!136755))

(assert (= (and b!136769 (not c!25597)) b!136771))

(assert (= (and b!136755 res!65600) b!136758))

(assert (= (or b!136755 b!136771) bm!15060))

(assert (= (and b!136769 res!65592) b!136764))

(assert (= (and b!136764 c!25600) b!136761))

(assert (= (and b!136764 (not c!25600)) b!136753))

(assert (= (and b!136761 res!65595) b!136770))

(assert (= (or b!136761 b!136753) bm!15064))

(declare-fun b_lambda!6131 () Bool)

(assert (=> (not b_lambda!6131) (not b!136772)))

(assert (=> b!136772 t!6249))

(declare-fun b_and!8489 () Bool)

(assert (= b_and!8485 (and (=> t!6249 result!4059) b_and!8489)))

(assert (=> b!136772 t!6251))

(declare-fun b_and!8491 () Bool)

(assert (= b_and!8487 (and (=> t!6251 result!4061) b_and!8491)))

(declare-fun m!163165 () Bool)

(assert (=> bm!15060 m!163165))

(declare-fun m!163167 () Bool)

(assert (=> b!136772 m!163167))

(assert (=> b!136772 m!162731))

(declare-fun m!163169 () Bool)

(assert (=> b!136772 m!163169))

(assert (=> b!136772 m!162731))

(assert (=> b!136772 m!162815))

(assert (=> b!136772 m!163167))

(assert (=> b!136772 m!162815))

(declare-fun m!163171 () Bool)

(assert (=> b!136772 m!163171))

(declare-fun m!163173 () Bool)

(assert (=> b!136767 m!163173))

(declare-fun m!163175 () Bool)

(assert (=> bm!15065 m!163175))

(declare-fun m!163177 () Bool)

(assert (=> bm!15062 m!163177))

(declare-fun m!163179 () Bool)

(assert (=> b!136765 m!163179))

(declare-fun m!163181 () Bool)

(assert (=> b!136765 m!163181))

(declare-fun m!163183 () Bool)

(assert (=> b!136765 m!163183))

(declare-fun m!163185 () Bool)

(assert (=> b!136765 m!163185))

(declare-fun m!163187 () Bool)

(assert (=> b!136765 m!163187))

(declare-fun m!163189 () Bool)

(assert (=> b!136765 m!163189))

(declare-fun m!163191 () Bool)

(assert (=> b!136765 m!163191))

(declare-fun m!163193 () Bool)

(assert (=> b!136765 m!163193))

(declare-fun m!163195 () Bool)

(assert (=> b!136765 m!163195))

(declare-fun m!163197 () Bool)

(assert (=> b!136765 m!163197))

(assert (=> b!136765 m!163179))

(assert (=> b!136765 m!163187))

(assert (=> b!136765 m!162731))

(declare-fun m!163199 () Bool)

(assert (=> b!136765 m!163199))

(assert (=> b!136765 m!163177))

(assert (=> b!136765 m!163191))

(declare-fun m!163201 () Bool)

(assert (=> b!136765 m!163201))

(declare-fun m!163203 () Bool)

(assert (=> b!136765 m!163203))

(declare-fun m!163205 () Bool)

(assert (=> b!136765 m!163205))

(assert (=> b!136765 m!163203))

(declare-fun m!163207 () Bool)

(assert (=> b!136765 m!163207))

(declare-fun m!163209 () Bool)

(assert (=> bm!15064 m!163209))

(assert (=> d!42657 m!162751))

(assert (=> b!136763 m!162731))

(assert (=> b!136763 m!162731))

(assert (=> b!136763 m!162735))

(declare-fun m!163211 () Bool)

(assert (=> b!136770 m!163211))

(assert (=> b!136760 m!162731))

(assert (=> b!136760 m!162731))

(assert (=> b!136760 m!162735))

(declare-fun m!163213 () Bool)

(assert (=> b!136758 m!163213))

(assert (=> b!136756 m!162731))

(assert (=> b!136756 m!162731))

(declare-fun m!163215 () Bool)

(assert (=> b!136756 m!163215))

(assert (=> bm!14998 d!42657))

(declare-fun d!42659 () Bool)

(declare-fun e!89077 () Bool)

(assert (=> d!42659 e!89077))

(declare-fun c!25603 () Bool)

(assert (=> d!42659 (= c!25603 (and (not (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!42659 true))

(declare-fun _$29!159 () Unit!4291)

(assert (=> d!42659 (= (choose!838 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))) _$29!159)))

(declare-fun b!136778 () Bool)

(assert (=> b!136778 (= e!89077 (arrayContainsKey!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!136779 () Bool)

(assert (=> b!136779 (= e!89077 (ite (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!42659 c!25603) b!136778))

(assert (= (and d!42659 (not c!25603)) b!136779))

(assert (=> b!136778 m!162523))

(assert (=> b!136778 m!162525))

(assert (=> d!42551 d!42659))

(assert (=> d!42551 d!42623))

(declare-fun d!42661 () Bool)

(declare-fun e!89079 () Bool)

(assert (=> d!42661 e!89079))

(declare-fun res!65601 () Bool)

(assert (=> d!42661 (=> res!65601 e!89079)))

(declare-fun lt!71484 () Bool)

(assert (=> d!42661 (= res!65601 (not lt!71484))))

(declare-fun lt!71483 () Bool)

(assert (=> d!42661 (= lt!71484 lt!71483)))

(declare-fun lt!71481 () Unit!4291)

(declare-fun e!89078 () Unit!4291)

(assert (=> d!42661 (= lt!71481 e!89078)))

(declare-fun c!25604 () Bool)

(assert (=> d!42661 (= c!25604 lt!71483)))

(assert (=> d!42661 (= lt!71483 (containsKey!176 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))

(assert (=> d!42661 (= (contains!901 e!88876 (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))) lt!71484)))

(declare-fun b!136780 () Bool)

(declare-fun lt!71482 () Unit!4291)

(assert (=> b!136780 (= e!89078 lt!71482)))

(assert (=> b!136780 (= lt!71482 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))

(assert (=> b!136780 (isDefined!126 (getValueByKey!172 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))

(declare-fun b!136781 () Bool)

(declare-fun Unit!4305 () Unit!4291)

(assert (=> b!136781 (= e!89078 Unit!4305)))

(declare-fun b!136782 () Bool)

(assert (=> b!136782 (= e!89079 (isDefined!126 (getValueByKey!172 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257))))))))

(assert (= (and d!42661 c!25604) b!136780))

(assert (= (and d!42661 (not c!25604)) b!136781))

(assert (= (and d!42661 (not res!65601)) b!136782))

(declare-fun m!163217 () Bool)

(assert (=> d!42661 m!163217))

(declare-fun m!163219 () Bool)

(assert (=> b!136780 m!163219))

(declare-fun m!163221 () Bool)

(assert (=> b!136780 m!163221))

(assert (=> b!136780 m!163221))

(declare-fun m!163223 () Bool)

(assert (=> b!136780 m!163223))

(assert (=> b!136782 m!163221))

(assert (=> b!136782 m!163221))

(assert (=> b!136782 m!163223))

(assert (=> bm!15005 d!42661))

(declare-fun d!42663 () Bool)

(assert (=> d!42663 (= (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136308 d!42663))

(declare-fun d!42665 () Bool)

(declare-fun e!89082 () Bool)

(assert (=> d!42665 e!89082))

(declare-fun res!65604 () Bool)

(assert (=> d!42665 (=> (not res!65604) (not e!89082))))

(assert (=> d!42665 (= res!65604 (and (bvsge (index!3306 lt!71257) #b00000000000000000000000000000000) (bvslt (index!3306 lt!71257) (size!2542 (_keys!4642 newMap!16)))))))

(declare-fun lt!71487 () Unit!4291)

(declare-fun choose!845 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 32) Int) Unit!4291)

(assert (=> d!42665 (= lt!71487 (choose!845 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (index!3306 lt!71257) (defaultEntry!2889 newMap!16)))))

(assert (=> d!42665 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42665 (= (lemmaValidKeyInArrayIsInListMap!120 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (index!3306 lt!71257) (defaultEntry!2889 newMap!16)) lt!71487)))

(declare-fun b!136785 () Bool)

(assert (=> b!136785 (= e!89082 (contains!901 (getCurrentListMap!544 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257))))))

(assert (= (and d!42665 res!65604) b!136785))

(declare-fun m!163225 () Bool)

(assert (=> d!42665 m!163225))

(assert (=> d!42665 m!162751))

(declare-fun m!163227 () Bool)

(assert (=> b!136785 m!163227))

(assert (=> b!136785 m!162705))

(assert (=> b!136785 m!163227))

(assert (=> b!136785 m!162705))

(declare-fun m!163229 () Bool)

(assert (=> b!136785 m!163229))

(assert (=> b!136447 d!42665))

(declare-fun d!42667 () Bool)

(declare-fun e!89085 () Bool)

(assert (=> d!42667 e!89085))

(declare-fun res!65607 () Bool)

(assert (=> d!42667 (=> (not res!65607) (not e!89085))))

(assert (=> d!42667 (= res!65607 (and (bvsge (index!3306 lt!71257) #b00000000000000000000000000000000) (bvslt (index!3306 lt!71257) (size!2543 (_values!2872 newMap!16)))))))

(declare-fun lt!71490 () Unit!4291)

(declare-fun choose!846 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 32) (_ BitVec 64) V!3499 Int) Unit!4291)

(assert (=> d!42667 (= lt!71490 (choose!846 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (index!3306 lt!71257) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2889 newMap!16)))))

(assert (=> d!42667 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42667 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (index!3306 lt!71257) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2889 newMap!16)) lt!71490)))

(declare-fun b!136788 () Bool)

(assert (=> b!136788 (= e!89085 (= (+!171 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!544 (_keys!4642 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))))))

(assert (= (and d!42667 res!65607) b!136788))

(assert (=> d!42667 m!162523))

(assert (=> d!42667 m!162543))

(declare-fun m!163231 () Bool)

(assert (=> d!42667 m!163231))

(assert (=> d!42667 m!162751))

(assert (=> b!136788 m!162585))

(assert (=> b!136788 m!162585))

(declare-fun m!163233 () Bool)

(assert (=> b!136788 m!163233))

(assert (=> b!136788 m!162675))

(declare-fun m!163235 () Bool)

(assert (=> b!136788 m!163235))

(assert (=> b!136447 d!42667))

(declare-fun d!42669 () Bool)

(declare-fun e!89087 () Bool)

(assert (=> d!42669 e!89087))

(declare-fun res!65608 () Bool)

(assert (=> d!42669 (=> res!65608 e!89087)))

(declare-fun lt!71494 () Bool)

(assert (=> d!42669 (= res!65608 (not lt!71494))))

(declare-fun lt!71493 () Bool)

(assert (=> d!42669 (= lt!71494 lt!71493)))

(declare-fun lt!71491 () Unit!4291)

(declare-fun e!89086 () Unit!4291)

(assert (=> d!42669 (= lt!71491 e!89086)))

(declare-fun c!25605 () Bool)

(assert (=> d!42669 (= c!25605 lt!71493)))

(assert (=> d!42669 (= lt!71493 (containsKey!176 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!42669 (= (contains!901 call!15021 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) lt!71494)))

(declare-fun b!136789 () Bool)

(declare-fun lt!71492 () Unit!4291)

(assert (=> b!136789 (= e!89086 lt!71492)))

(assert (=> b!136789 (= lt!71492 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> b!136789 (isDefined!126 (getValueByKey!172 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun b!136790 () Bool)

(declare-fun Unit!4306 () Unit!4291)

(assert (=> b!136790 (= e!89086 Unit!4306)))

(declare-fun b!136791 () Bool)

(assert (=> b!136791 (= e!89087 (isDefined!126 (getValueByKey!172 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(assert (= (and d!42669 c!25605) b!136789))

(assert (= (and d!42669 (not c!25605)) b!136790))

(assert (= (and d!42669 (not res!65608)) b!136791))

(assert (=> d!42669 m!162523))

(declare-fun m!163237 () Bool)

(assert (=> d!42669 m!163237))

(assert (=> b!136789 m!162523))

(declare-fun m!163239 () Bool)

(assert (=> b!136789 m!163239))

(assert (=> b!136789 m!162523))

(declare-fun m!163241 () Bool)

(assert (=> b!136789 m!163241))

(assert (=> b!136789 m!163241))

(declare-fun m!163243 () Bool)

(assert (=> b!136789 m!163243))

(assert (=> b!136791 m!162523))

(assert (=> b!136791 m!163241))

(assert (=> b!136791 m!163241))

(assert (=> b!136791 m!163243))

(assert (=> b!136447 d!42669))

(declare-fun b!136826 () Bool)

(declare-fun res!65629 () Bool)

(declare-fun e!89106 () Bool)

(assert (=> b!136826 (=> (not res!65629) (not e!89106))))

(declare-fun call!15077 () Bool)

(assert (=> b!136826 (= res!65629 call!15077)))

(declare-fun e!89111 () Bool)

(assert (=> b!136826 (= e!89111 e!89106)))

(declare-fun b!136827 () Bool)

(declare-fun lt!71556 () tuple2!2624)

(declare-fun e!89109 () Bool)

(assert (=> b!136827 (= e!89109 (= (map!1413 (_2!1322 lt!71556)) (+!171 (map!1413 newMap!16) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!136828 () Bool)

(declare-fun call!15078 () Bool)

(assert (=> b!136828 (= e!89106 (not call!15078))))

(declare-fun d!42671 () Bool)

(assert (=> d!42671 e!89109))

(declare-fun res!65632 () Bool)

(assert (=> d!42671 (=> (not res!65632) (not e!89109))))

(assert (=> d!42671 (= res!65632 (_1!1322 lt!71556))))

(assert (=> d!42671 (= lt!71556 (tuple2!2625 true (LongMapFixedSize!1111 (defaultEntry!2889 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (bvadd (_size!604 newMap!16) #b00000000000000000000000000000001) (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (_vacant!604 newMap!16))))))

(declare-fun lt!71558 () Unit!4291)

(declare-fun lt!71570 () Unit!4291)

(assert (=> d!42671 (= lt!71558 lt!71570)))

(declare-fun lt!71571 () array!4806)

(declare-fun lt!71561 () array!4808)

(assert (=> d!42671 (contains!901 (getCurrentListMap!544 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (select (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257))))))

(assert (=> d!42671 (= lt!71570 (lemmaValidKeyInArrayIsInListMap!120 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (defaultEntry!2889 newMap!16)))))

(assert (=> d!42671 (= lt!71561 (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))))

(assert (=> d!42671 (= lt!71571 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun lt!71581 () Unit!4291)

(declare-fun lt!71573 () Unit!4291)

(assert (=> d!42671 (= lt!71581 lt!71573)))

(declare-fun lt!71567 () array!4806)

(assert (=> d!42671 (= (arrayCountValidKeys!0 lt!71567 (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (bvadd (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4806 (_ BitVec 32)) Unit!4291)

(assert (=> d!42671 (= lt!71573 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!71567 (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257))))))

(assert (=> d!42671 (= lt!71567 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun lt!71584 () Unit!4291)

(declare-fun lt!71560 () Unit!4291)

(assert (=> d!42671 (= lt!71584 lt!71560)))

(declare-fun lt!71555 () array!4806)

(assert (=> d!42671 (arrayContainsKey!0 lt!71555 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!42671 (= lt!71560 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!71555 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257))))))

(assert (=> d!42671 (= lt!71555 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun lt!71559 () Unit!4291)

(declare-fun lt!71572 () Unit!4291)

(assert (=> d!42671 (= lt!71559 lt!71572)))

(assert (=> d!42671 (= (+!171 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!544 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!43 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 32) (_ BitVec 64) V!3499 Int) Unit!4291)

(assert (=> d!42671 (= lt!71572 (lemmaAddValidKeyToArrayThenAddPairToListMap!43 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71578 () Unit!4291)

(declare-fun lt!71569 () Unit!4291)

(assert (=> d!42671 (= lt!71578 lt!71569)))

(assert (=> d!42671 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (mask!7203 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4806 (_ BitVec 32) (_ BitVec 32)) Unit!4291)

(assert (=> d!42671 (= lt!71569 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (mask!7203 newMap!16)))))

(declare-fun lt!71580 () Unit!4291)

(declare-fun lt!71565 () Unit!4291)

(assert (=> d!42671 (= lt!71580 lt!71565)))

(assert (=> d!42671 (= (arrayCountValidKeys!0 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4642 newMap!16) #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4806 (_ BitVec 32) (_ BitVec 64)) Unit!4291)

(assert (=> d!42671 (= lt!71565 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4642 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun lt!71583 () Unit!4291)

(declare-fun lt!71575 () Unit!4291)

(assert (=> d!42671 (= lt!71583 lt!71575)))

(declare-fun lt!71566 () (_ BitVec 32))

(declare-fun lt!71562 () List!1743)

(assert (=> d!42671 (arrayNoDuplicates!0 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) lt!71566 lt!71562)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4806 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1743) Unit!4291)

(assert (=> d!42671 (= lt!71575 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) lt!71566 lt!71562))))

(assert (=> d!42671 (= lt!71562 Nil!1740)))

(assert (=> d!42671 (= lt!71566 #b00000000000000000000000000000000)))

(declare-fun lt!71568 () Unit!4291)

(declare-fun e!89110 () Unit!4291)

(assert (=> d!42671 (= lt!71568 e!89110)))

(declare-fun c!25614 () Bool)

(assert (=> d!42671 (= c!25614 (arrayContainsKey!0 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!71576 () Unit!4291)

(declare-fun e!89104 () Unit!4291)

(assert (=> d!42671 (= lt!71576 e!89104)))

(declare-fun c!25615 () Bool)

(assert (=> d!42671 (= c!25615 (contains!901 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!42671 (valid!530 newMap!16)))

(assert (=> d!42671 (= (updateHelperNewKey!62 newMap!16 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257))) lt!71556)))

(declare-fun b!136829 () Bool)

(declare-fun Unit!4307 () Unit!4291)

(assert (=> b!136829 (= e!89110 Unit!4307)))

(declare-fun lt!71579 () Unit!4291)

(declare-fun lemmaArrayContainsKeyThenInListMap!43 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 64) (_ BitVec 32) Int) Unit!4291)

(assert (=> b!136829 (= lt!71579 (lemmaArrayContainsKeyThenInListMap!43 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(assert (=> b!136829 (contains!901 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))

(declare-fun lt!71557 () Unit!4291)

(assert (=> b!136829 (= lt!71557 lt!71579)))

(assert (=> b!136829 false))

(declare-fun b!136830 () Bool)

(declare-fun c!25617 () Bool)

(declare-fun lt!71564 () SeekEntryResult!286)

(assert (=> b!136830 (= c!25617 ((_ is MissingVacant!286) lt!71564))))

(declare-fun e!89107 () Bool)

(assert (=> b!136830 (= e!89111 e!89107)))

(declare-fun call!15079 () SeekEntryResult!286)

(declare-fun bm!15074 () Bool)

(assert (=> bm!15074 (= call!15079 (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(declare-fun b!136831 () Bool)

(declare-fun res!65634 () Bool)

(assert (=> b!136831 (=> (not res!65634) (not e!89109))))

(assert (=> b!136831 (= res!65634 (contains!901 (map!1413 (_2!1322 lt!71556)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun bm!15075 () Bool)

(declare-fun call!15080 () Bool)

(assert (=> bm!15075 (= call!15077 call!15080)))

(declare-fun b!136832 () Bool)

(declare-fun Unit!4308 () Unit!4291)

(assert (=> b!136832 (= e!89110 Unit!4308)))

(declare-fun b!136833 () Bool)

(declare-fun e!89108 () Bool)

(assert (=> b!136833 (= e!89108 (not call!15078))))

(declare-fun b!136834 () Bool)

(declare-fun res!65633 () Bool)

(assert (=> b!136834 (= res!65633 call!15080)))

(declare-fun e!89105 () Bool)

(assert (=> b!136834 (=> (not res!65633) (not e!89105))))

(declare-fun b!136835 () Bool)

(declare-fun Unit!4309 () Unit!4291)

(assert (=> b!136835 (= e!89104 Unit!4309)))

(declare-fun lt!71577 () Unit!4291)

(assert (=> b!136835 (= lt!71577 (lemmaInListMapThenSeekEntryOrOpenFindsIt!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71582 () SeekEntryResult!286)

(assert (=> b!136835 (= lt!71582 call!15079)))

(declare-fun res!65631 () Bool)

(assert (=> b!136835 (= res!65631 ((_ is Found!286) lt!71582))))

(assert (=> b!136835 (=> (not res!65631) (not e!89105))))

(assert (=> b!136835 e!89105))

(declare-fun lt!71563 () Unit!4291)

(assert (=> b!136835 (= lt!71563 lt!71577)))

(assert (=> b!136835 false))

(declare-fun b!136836 () Bool)

(declare-fun res!65635 () Bool)

(assert (=> b!136836 (=> (not res!65635) (not e!89109))))

(assert (=> b!136836 (= res!65635 (valid!530 (_2!1322 lt!71556)))))

(declare-fun b!136837 () Bool)

(declare-fun res!65628 () Bool)

(assert (=> b!136837 (=> (not res!65628) (not e!89106))))

(assert (=> b!136837 (= res!65628 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3305 lt!71564)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136838 () Bool)

(declare-fun res!65630 () Bool)

(assert (=> b!136838 (= res!65630 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3308 lt!71564)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136838 (=> (not res!65630) (not e!89108))))

(declare-fun b!136839 () Bool)

(assert (=> b!136839 (= e!89107 e!89108)))

(declare-fun res!65627 () Bool)

(assert (=> b!136839 (= res!65627 call!15077)))

(assert (=> b!136839 (=> (not res!65627) (not e!89108))))

(declare-fun b!136840 () Bool)

(assert (=> b!136840 (= e!89105 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71582)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun b!136841 () Bool)

(assert (=> b!136841 (= e!89107 ((_ is Undefined!286) lt!71564))))

(declare-fun bm!15076 () Bool)

(assert (=> bm!15076 (= call!15078 (arrayContainsKey!0 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!15077 () Bool)

(declare-fun c!25616 () Bool)

(assert (=> bm!15077 (= call!15080 (inRange!0 (ite c!25615 (index!3306 lt!71582) (ite c!25616 (index!3305 lt!71564) (index!3308 lt!71564))) (mask!7203 newMap!16)))))

(declare-fun b!136842 () Bool)

(declare-fun lt!71574 () Unit!4291)

(assert (=> b!136842 (= e!89104 lt!71574)))

(assert (=> b!136842 (= lt!71574 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (defaultEntry!2889 newMap!16)))))

(assert (=> b!136842 (= lt!71564 call!15079)))

(assert (=> b!136842 (= c!25616 ((_ is MissingZero!286) lt!71564))))

(assert (=> b!136842 e!89111))

(assert (= (and d!42671 c!25615) b!136835))

(assert (= (and d!42671 (not c!25615)) b!136842))

(assert (= (and b!136835 res!65631) b!136834))

(assert (= (and b!136834 res!65633) b!136840))

(assert (= (and b!136842 c!25616) b!136826))

(assert (= (and b!136842 (not c!25616)) b!136830))

(assert (= (and b!136826 res!65629) b!136837))

(assert (= (and b!136837 res!65628) b!136828))

(assert (= (and b!136830 c!25617) b!136839))

(assert (= (and b!136830 (not c!25617)) b!136841))

(assert (= (and b!136839 res!65627) b!136838))

(assert (= (and b!136838 res!65630) b!136833))

(assert (= (or b!136826 b!136839) bm!15075))

(assert (= (or b!136828 b!136833) bm!15076))

(assert (= (or b!136834 bm!15075) bm!15077))

(assert (= (or b!136835 b!136842) bm!15074))

(assert (= (and d!42671 c!25614) b!136829))

(assert (= (and d!42671 (not c!25614)) b!136832))

(assert (= (and d!42671 res!65632) b!136836))

(assert (= (and b!136836 res!65635) b!136831))

(assert (= (and b!136831 res!65634) b!136827))

(assert (=> b!136835 m!162523))

(assert (=> b!136835 m!162663))

(assert (=> bm!15074 m!162523))

(assert (=> bm!15074 m!162671))

(declare-fun m!163245 () Bool)

(assert (=> b!136836 m!163245))

(assert (=> bm!15076 m!162523))

(assert (=> bm!15076 m!162661))

(declare-fun m!163247 () Bool)

(assert (=> b!136838 m!163247))

(declare-fun m!163249 () Bool)

(assert (=> b!136837 m!163249))

(assert (=> d!42671 m!162517))

(declare-fun m!163251 () Bool)

(assert (=> d!42671 m!163251))

(declare-fun m!163253 () Bool)

(assert (=> d!42671 m!163253))

(declare-fun m!163255 () Bool)

(assert (=> d!42671 m!163255))

(declare-fun m!163257 () Bool)

(assert (=> d!42671 m!163257))

(declare-fun m!163259 () Bool)

(assert (=> d!42671 m!163259))

(assert (=> d!42671 m!162585))

(assert (=> d!42671 m!163233))

(declare-fun m!163261 () Bool)

(assert (=> d!42671 m!163261))

(assert (=> d!42671 m!163251))

(assert (=> d!42671 m!162523))

(declare-fun m!163263 () Bool)

(assert (=> d!42671 m!163263))

(assert (=> d!42671 m!162523))

(declare-fun m!163265 () Bool)

(assert (=> d!42671 m!163265))

(assert (=> d!42671 m!162523))

(declare-fun m!163267 () Bool)

(assert (=> d!42671 m!163267))

(assert (=> d!42671 m!162523))

(assert (=> d!42671 m!162661))

(assert (=> d!42671 m!162585))

(assert (=> d!42671 m!162523))

(declare-fun m!163269 () Bool)

(assert (=> d!42671 m!163269))

(declare-fun m!163271 () Bool)

(assert (=> d!42671 m!163271))

(assert (=> d!42671 m!162523))

(declare-fun m!163273 () Bool)

(assert (=> d!42671 m!163273))

(assert (=> d!42671 m!162721))

(assert (=> d!42671 m!163253))

(assert (=> d!42671 m!162585))

(assert (=> d!42671 m!162523))

(declare-fun m!163275 () Bool)

(assert (=> d!42671 m!163275))

(declare-fun m!163277 () Bool)

(assert (=> d!42671 m!163277))

(declare-fun m!163279 () Bool)

(assert (=> d!42671 m!163279))

(declare-fun m!163281 () Bool)

(assert (=> d!42671 m!163281))

(declare-fun m!163283 () Bool)

(assert (=> d!42671 m!163283))

(assert (=> d!42671 m!162523))

(assert (=> d!42671 m!162543))

(declare-fun m!163285 () Bool)

(assert (=> d!42671 m!163285))

(declare-fun m!163287 () Bool)

(assert (=> d!42671 m!163287))

(declare-fun m!163289 () Bool)

(assert (=> b!136827 m!163289))

(assert (=> b!136827 m!162531))

(assert (=> b!136827 m!162531))

(declare-fun m!163291 () Bool)

(assert (=> b!136827 m!163291))

(assert (=> b!136831 m!163289))

(assert (=> b!136831 m!163289))

(assert (=> b!136831 m!162523))

(declare-fun m!163293 () Bool)

(assert (=> b!136831 m!163293))

(assert (=> b!136829 m!162523))

(declare-fun m!163295 () Bool)

(assert (=> b!136829 m!163295))

(assert (=> b!136829 m!162585))

(assert (=> b!136829 m!162585))

(assert (=> b!136829 m!162523))

(assert (=> b!136829 m!163269))

(declare-fun m!163297 () Bool)

(assert (=> bm!15077 m!163297))

(declare-fun m!163299 () Bool)

(assert (=> b!136840 m!163299))

(assert (=> b!136842 m!162523))

(assert (=> b!136842 m!162693))

(assert (=> bm!14997 d!42671))

(declare-fun d!42673 () Bool)

(declare-fun e!89113 () Bool)

(assert (=> d!42673 e!89113))

(declare-fun res!65636 () Bool)

(assert (=> d!42673 (=> res!65636 e!89113)))

(declare-fun lt!71588 () Bool)

(assert (=> d!42673 (= res!65636 (not lt!71588))))

(declare-fun lt!71587 () Bool)

(assert (=> d!42673 (= lt!71588 lt!71587)))

(declare-fun lt!71585 () Unit!4291)

(declare-fun e!89112 () Unit!4291)

(assert (=> d!42673 (= lt!71585 e!89112)))

(declare-fun c!25618 () Bool)

(assert (=> d!42673 (= c!25618 lt!71587)))

(assert (=> d!42673 (= lt!71587 (containsKey!176 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!42673 (= (contains!901 call!15000 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) lt!71588)))

(declare-fun b!136843 () Bool)

(declare-fun lt!71586 () Unit!4291)

(assert (=> b!136843 (= e!89112 lt!71586)))

(assert (=> b!136843 (= lt!71586 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> b!136843 (isDefined!126 (getValueByKey!172 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun b!136844 () Bool)

(declare-fun Unit!4310 () Unit!4291)

(assert (=> b!136844 (= e!89112 Unit!4310)))

(declare-fun b!136845 () Bool)

(assert (=> b!136845 (= e!89113 (isDefined!126 (getValueByKey!172 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(assert (= (and d!42673 c!25618) b!136843))

(assert (= (and d!42673 (not c!25618)) b!136844))

(assert (= (and d!42673 (not res!65636)) b!136845))

(assert (=> d!42673 m!162523))

(declare-fun m!163301 () Bool)

(assert (=> d!42673 m!163301))

(assert (=> b!136843 m!162523))

(declare-fun m!163303 () Bool)

(assert (=> b!136843 m!163303))

(assert (=> b!136843 m!162523))

(declare-fun m!163305 () Bool)

(assert (=> b!136843 m!163305))

(assert (=> b!136843 m!163305))

(declare-fun m!163307 () Bool)

(assert (=> b!136843 m!163307))

(assert (=> b!136845 m!162523))

(assert (=> b!136845 m!163305))

(assert (=> b!136845 m!163305))

(assert (=> b!136845 m!163307))

(assert (=> b!136433 d!42673))

(declare-fun d!42675 () Bool)

(declare-fun res!65637 () Bool)

(declare-fun e!89114 () Bool)

(assert (=> d!42675 (=> res!65637 e!89114)))

(assert (=> d!42675 (= res!65637 (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!42675 (= (arrayContainsKey!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!89114)))

(declare-fun b!136846 () Bool)

(declare-fun e!89115 () Bool)

(assert (=> b!136846 (= e!89114 e!89115)))

(declare-fun res!65638 () Bool)

(assert (=> b!136846 (=> (not res!65638) (not e!89115))))

(assert (=> b!136846 (= res!65638 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!136847 () Bool)

(assert (=> b!136847 (= e!89115 (arrayContainsKey!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!42675 (not res!65637)) b!136846))

(assert (= (and b!136846 res!65638) b!136847))

(declare-fun m!163309 () Bool)

(assert (=> d!42675 m!163309))

(assert (=> b!136847 m!162523))

(declare-fun m!163311 () Bool)

(assert (=> b!136847 m!163311))

(assert (=> b!136324 d!42675))

(assert (=> b!136305 d!42663))

(declare-fun d!42677 () Bool)

(assert (=> d!42677 (= (+!171 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71591 () Unit!4291)

(declare-fun choose!847 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 V!3499 Int) Unit!4291)

(assert (=> d!42677 (= lt!71591 (choose!847 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2889 newMap!16)))))

(assert (=> d!42677 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42677 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!62 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2889 newMap!16)) lt!71591)))

(declare-fun bs!5732 () Bool)

(assert (= bs!5732 d!42677))

(assert (=> bs!5732 m!162543))

(declare-fun m!163313 () Bool)

(assert (=> bs!5732 m!163313))

(assert (=> bs!5732 m!162543))

(declare-fun m!163315 () Bool)

(assert (=> bs!5732 m!163315))

(assert (=> bs!5732 m!162585))

(assert (=> bs!5732 m!162585))

(declare-fun m!163317 () Bool)

(assert (=> bs!5732 m!163317))

(assert (=> bs!5732 m!162751))

(assert (=> b!136444 d!42677))

(declare-fun d!42679 () Bool)

(assert (=> d!42679 (= (map!1413 (_2!1322 lt!71264)) (getCurrentListMap!544 (_keys!4642 (_2!1322 lt!71264)) (_values!2872 (_2!1322 lt!71264)) (mask!7203 (_2!1322 lt!71264)) (extraKeys!2650 (_2!1322 lt!71264)) (zeroValue!2742 (_2!1322 lt!71264)) (minValue!2742 (_2!1322 lt!71264)) #b00000000000000000000000000000000 (defaultEntry!2889 (_2!1322 lt!71264))))))

(declare-fun bs!5733 () Bool)

(assert (= bs!5733 d!42679))

(declare-fun m!163319 () Bool)

(assert (=> bs!5733 m!163319))

(assert (=> bm!15004 d!42679))

(declare-fun d!42681 () Bool)

(assert (=> d!42681 (= (apply!117 lt!71161 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!172 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5734 () Bool)

(assert (= bs!5734 d!42681))

(assert (=> bs!5734 m!162759))

(assert (=> bs!5734 m!162759))

(declare-fun m!163321 () Bool)

(assert (=> bs!5734 m!163321))

(assert (=> b!136303 d!42681))

(declare-fun condMapEmpty!4701 () Bool)

(declare-fun mapDefault!4701 () ValueCell!1101)

(assert (=> mapNonEmpty!4699 (= condMapEmpty!4701 (= mapRest!4699 ((as const (Array (_ BitVec 32) ValueCell!1101)) mapDefault!4701)))))

(declare-fun e!89117 () Bool)

(declare-fun mapRes!4701 () Bool)

(assert (=> mapNonEmpty!4699 (= tp!11305 (and e!89117 mapRes!4701))))

(declare-fun mapNonEmpty!4701 () Bool)

(declare-fun tp!11307 () Bool)

(declare-fun e!89116 () Bool)

(assert (=> mapNonEmpty!4701 (= mapRes!4701 (and tp!11307 e!89116))))

(declare-fun mapRest!4701 () (Array (_ BitVec 32) ValueCell!1101))

(declare-fun mapValue!4701 () ValueCell!1101)

(declare-fun mapKey!4701 () (_ BitVec 32))

(assert (=> mapNonEmpty!4701 (= mapRest!4699 (store mapRest!4701 mapKey!4701 mapValue!4701))))

(declare-fun mapIsEmpty!4701 () Bool)

(assert (=> mapIsEmpty!4701 mapRes!4701))

(declare-fun b!136849 () Bool)

(assert (=> b!136849 (= e!89117 tp_is_empty!2889)))

(declare-fun b!136848 () Bool)

(assert (=> b!136848 (= e!89116 tp_is_empty!2889)))

(assert (= (and mapNonEmpty!4699 condMapEmpty!4701) mapIsEmpty!4701))

(assert (= (and mapNonEmpty!4699 (not condMapEmpty!4701)) mapNonEmpty!4701))

(assert (= (and mapNonEmpty!4701 ((_ is ValueCellFull!1101) mapValue!4701)) b!136848))

(assert (= (and mapNonEmpty!4699 ((_ is ValueCellFull!1101) mapDefault!4701)) b!136849))

(declare-fun m!163323 () Bool)

(assert (=> mapNonEmpty!4701 m!163323))

(declare-fun condMapEmpty!4702 () Bool)

(declare-fun mapDefault!4702 () ValueCell!1101)

(assert (=> mapNonEmpty!4700 (= condMapEmpty!4702 (= mapRest!4700 ((as const (Array (_ BitVec 32) ValueCell!1101)) mapDefault!4702)))))

(declare-fun e!89119 () Bool)

(declare-fun mapRes!4702 () Bool)

(assert (=> mapNonEmpty!4700 (= tp!11306 (and e!89119 mapRes!4702))))

(declare-fun mapNonEmpty!4702 () Bool)

(declare-fun tp!11308 () Bool)

(declare-fun e!89118 () Bool)

(assert (=> mapNonEmpty!4702 (= mapRes!4702 (and tp!11308 e!89118))))

(declare-fun mapRest!4702 () (Array (_ BitVec 32) ValueCell!1101))

(declare-fun mapValue!4702 () ValueCell!1101)

(declare-fun mapKey!4702 () (_ BitVec 32))

(assert (=> mapNonEmpty!4702 (= mapRest!4700 (store mapRest!4702 mapKey!4702 mapValue!4702))))

(declare-fun mapIsEmpty!4702 () Bool)

(assert (=> mapIsEmpty!4702 mapRes!4702))

(declare-fun b!136851 () Bool)

(assert (=> b!136851 (= e!89119 tp_is_empty!2889)))

(declare-fun b!136850 () Bool)

(assert (=> b!136850 (= e!89118 tp_is_empty!2889)))

(assert (= (and mapNonEmpty!4700 condMapEmpty!4702) mapIsEmpty!4702))

(assert (= (and mapNonEmpty!4700 (not condMapEmpty!4702)) mapNonEmpty!4702))

(assert (= (and mapNonEmpty!4702 ((_ is ValueCellFull!1101) mapValue!4702)) b!136850))

(assert (= (and mapNonEmpty!4700 ((_ is ValueCellFull!1101) mapDefault!4702)) b!136851))

(declare-fun m!163325 () Bool)

(assert (=> mapNonEmpty!4702 m!163325))

(declare-fun b_lambda!6133 () Bool)

(assert (= b_lambda!6131 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6133)))

(declare-fun b_lambda!6135 () Bool)

(assert (= b_lambda!6123 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6135)))

(declare-fun b_lambda!6137 () Bool)

(assert (= b_lambda!6127 (or (and b!136196 b_free!2945) (and b!136192 b_free!2947 (= (defaultEntry!2889 newMap!16) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))))) b_lambda!6137)))

(declare-fun b_lambda!6139 () Bool)

(assert (= b_lambda!6125 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6139)))

(declare-fun b_lambda!6141 () Bool)

(assert (= b_lambda!6129 (or (and b!136196 b_free!2945) (and b!136192 b_free!2947 (= (defaultEntry!2889 newMap!16) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))))) b_lambda!6141)))

(declare-fun b_lambda!6143 () Bool)

(assert (= b_lambda!6121 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6143)))

(check-sat (not d!42631) (not bm!15034) (not b!136704) (not b!136713) (not bm!15054) (not b_next!2947) (not b_next!2945) (not b!136765) (not d!42637) (not b!136593) (not d!42615) (not d!42579) (not d!42627) (not bm!15022) (not b!136611) (not b!136512) (not b_lambda!6119) (not b!136778) (not d!42625) (not bm!15062) (not b!136829) (not d!42617) (not bm!15058) (not d!42607) (not b_lambda!6115) (not bm!15065) (not b_lambda!6135) (not bm!15041) b_and!8489 (not b!136533) (not b_lambda!6133) (not b!136772) (not d!42597) (not b!136604) (not b!136731) (not b!136842) (not b!136583) (not b!136622) (not b!136715) (not d!42613) (not d!42575) (not b!136579) (not b!136617) (not b!136791) (not d!42639) (not b!136591) (not b!136831) (not b!136706) (not d!42647) (not b!136739) (not d!42577) (not b!136758) (not b!136581) (not bm!15039) (not b!136736) (not d!42629) (not bm!15074) (not b!136835) (not b!136499) (not d!42657) (not b!136836) (not b!136574) (not b!136665) (not b!136740) (not b!136756) (not bm!15077) (not bm!15050) (not b!136709) (not d!42593) (not b!136672) (not b!136770) (not b!136554) (not b!136735) (not mapNonEmpty!4702) (not bm!15047) (not d!42563) (not d!42671) (not b!136675) (not bm!15028) (not mapNonEmpty!4701) (not bm!15055) (not b!136760) (not d!42661) (not b!136705) (not d!42571) tp_is_empty!2889 (not bm!15025) (not b!136654) (not d!42621) (not b!136763) (not d!42679) (not b!136714) (not bm!15060) (not b!136708) (not b!136747) (not d!42635) (not bm!15030) (not b!136556) (not b!136590) (not d!42565) (not d!42669) (not b!136540) (not b!136613) (not bm!15037) (not b!136597) (not b!136780) (not b!136663) (not b!136730) (not b!136572) (not b!136657) (not b_lambda!6139) (not b!136751) (not d!42673) (not b!136737) (not b!136521) (not b!136668) (not b!136535) (not bm!15048) (not b!136738) (not b!136749) (not b!136707) (not d!42649) (not d!42665) (not d!42677) (not b!136717) (not b!136608) (not b!136767) (not b!136750) (not d!42601) (not b!136522) (not b_lambda!6143) (not b!136552) (not d!42641) (not b!136788) (not d!42651) (not b!136847) (not d!42567) (not b!136566) b_and!8491 (not b!136496) (not b!136576) (not d!42681) (not d!42599) (not bm!15042) (not d!42645) (not b!136601) (not b!136782) (not b!136785) (not d!42583) (not b!136495) (not b!136599) (not d!42653) (not bm!15076) (not d!42643) (not b!136789) (not b!136661) (not b!136716) (not b!136670) (not b!136827) (not b!136586) (not d!42589) (not bm!15052) (not b!136728) (not b!136588) (not b!136843) (not d!42633) (not bm!15035) (not b!136567) (not d!42587) (not b_lambda!6137) (not bm!15064) (not b!136518) (not b!136520) (not b!136677) (not d!42581) (not b!136655) (not d!42667) (not b_lambda!6141) (not d!42591) (not bm!15032) (not b!136734) (not b!136615) (not b!136523) (not d!42655) (not b!136541) (not b!136592) (not b!136606) (not b!136845) (not b!136629))
(check-sat b_and!8489 b_and!8491 (not b_next!2945) (not b_next!2947))
(get-model)

(declare-fun c!25619 () Bool)

(declare-fun d!42683 () Bool)

(assert (=> d!42683 (= c!25619 (and ((_ is Cons!1737) (toList!873 lt!71442)) (= (_1!1321 (h!2343 (toList!873 lt!71442))) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89120 () Option!178)

(assert (=> d!42683 (= (getValueByKey!172 (toList!873 lt!71442) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) e!89120)))

(declare-fun e!89121 () Option!178)

(declare-fun b!136854 () Bool)

(assert (=> b!136854 (= e!89121 (getValueByKey!172 (t!6241 (toList!873 lt!71442)) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!136852 () Bool)

(assert (=> b!136852 (= e!89120 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71442)))))))

(declare-fun b!136855 () Bool)

(assert (=> b!136855 (= e!89121 None!176)))

(declare-fun b!136853 () Bool)

(assert (=> b!136853 (= e!89120 e!89121)))

(declare-fun c!25620 () Bool)

(assert (=> b!136853 (= c!25620 (and ((_ is Cons!1737) (toList!873 lt!71442)) (not (= (_1!1321 (h!2343 (toList!873 lt!71442))) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42683 c!25619) b!136852))

(assert (= (and d!42683 (not c!25619)) b!136853))

(assert (= (and b!136853 c!25620) b!136854))

(assert (= (and b!136853 (not c!25620)) b!136855))

(declare-fun m!163327 () Bool)

(assert (=> b!136854 m!163327))

(assert (=> b!136739 d!42683))

(declare-fun d!42685 () Bool)

(assert (=> d!42685 (= (isDefined!126 (getValueByKey!172 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))) (not (isEmpty!418 (getValueByKey!172 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))))

(declare-fun bs!5735 () Bool)

(assert (= bs!5735 d!42685))

(assert (=> bs!5735 m!163305))

(declare-fun m!163329 () Bool)

(assert (=> bs!5735 m!163329))

(assert (=> b!136845 d!42685))

(declare-fun c!25621 () Bool)

(declare-fun d!42687 () Bool)

(assert (=> d!42687 (= c!25621 (and ((_ is Cons!1737) (toList!873 call!15000)) (= (_1!1321 (h!2343 (toList!873 call!15000))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(declare-fun e!89122 () Option!178)

(assert (=> d!42687 (= (getValueByKey!172 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) e!89122)))

(declare-fun b!136858 () Bool)

(declare-fun e!89123 () Option!178)

(assert (=> b!136858 (= e!89123 (getValueByKey!172 (t!6241 (toList!873 call!15000)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun b!136856 () Bool)

(assert (=> b!136856 (= e!89122 (Some!177 (_2!1321 (h!2343 (toList!873 call!15000)))))))

(declare-fun b!136859 () Bool)

(assert (=> b!136859 (= e!89123 None!176)))

(declare-fun b!136857 () Bool)

(assert (=> b!136857 (= e!89122 e!89123)))

(declare-fun c!25622 () Bool)

(assert (=> b!136857 (= c!25622 (and ((_ is Cons!1737) (toList!873 call!15000)) (not (= (_1!1321 (h!2343 (toList!873 call!15000))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))))

(assert (= (and d!42687 c!25621) b!136856))

(assert (= (and d!42687 (not c!25621)) b!136857))

(assert (= (and b!136857 c!25622) b!136858))

(assert (= (and b!136857 (not c!25622)) b!136859))

(assert (=> b!136858 m!162523))

(declare-fun m!163331 () Bool)

(assert (=> b!136858 m!163331))

(assert (=> b!136845 d!42687))

(declare-fun d!42689 () Bool)

(assert (=> d!42689 (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!71592 () Unit!4291)

(assert (=> d!42689 (= lt!71592 (choose!842 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!89124 () Bool)

(assert (=> d!42689 e!89124))

(declare-fun res!65639 () Bool)

(assert (=> d!42689 (=> (not res!65639) (not e!89124))))

(assert (=> d!42689 (= res!65639 (isStrictlySorted!318 (toList!873 lt!71161)))))

(assert (=> d!42689 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000) lt!71592)))

(declare-fun b!136860 () Bool)

(assert (=> b!136860 (= e!89124 (containsKey!176 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!42689 res!65639) b!136860))

(assert (=> d!42689 m!162933))

(assert (=> d!42689 m!162933))

(assert (=> d!42689 m!162935))

(declare-fun m!163333 () Bool)

(assert (=> d!42689 m!163333))

(declare-fun m!163335 () Bool)

(assert (=> d!42689 m!163335))

(assert (=> b!136860 m!162929))

(assert (=> b!136615 d!42689))

(declare-fun d!42691 () Bool)

(assert (=> d!42691 (= (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!418 (getValueByKey!172 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!5736 () Bool)

(assert (= bs!5736 d!42691))

(assert (=> bs!5736 m!162933))

(declare-fun m!163337 () Bool)

(assert (=> bs!5736 m!163337))

(assert (=> b!136615 d!42691))

(declare-fun d!42693 () Bool)

(declare-fun c!25623 () Bool)

(assert (=> d!42693 (= c!25623 (and ((_ is Cons!1737) (toList!873 lt!71161)) (= (_1!1321 (h!2343 (toList!873 lt!71161))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!89125 () Option!178)

(assert (=> d!42693 (= (getValueByKey!172 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000) e!89125)))

(declare-fun b!136863 () Bool)

(declare-fun e!89126 () Option!178)

(assert (=> b!136863 (= e!89126 (getValueByKey!172 (t!6241 (toList!873 lt!71161)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136861 () Bool)

(assert (=> b!136861 (= e!89125 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71161)))))))

(declare-fun b!136864 () Bool)

(assert (=> b!136864 (= e!89126 None!176)))

(declare-fun b!136862 () Bool)

(assert (=> b!136862 (= e!89125 e!89126)))

(declare-fun c!25624 () Bool)

(assert (=> b!136862 (= c!25624 (and ((_ is Cons!1737) (toList!873 lt!71161)) (not (= (_1!1321 (h!2343 (toList!873 lt!71161))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!42693 c!25623) b!136861))

(assert (= (and d!42693 (not c!25623)) b!136862))

(assert (= (and b!136862 c!25624) b!136863))

(assert (= (and b!136862 (not c!25624)) b!136864))

(declare-fun m!163339 () Bool)

(assert (=> b!136863 m!163339))

(assert (=> b!136615 d!42693))

(declare-fun d!42695 () Bool)

(declare-fun e!89128 () Bool)

(assert (=> d!42695 e!89128))

(declare-fun res!65640 () Bool)

(assert (=> d!42695 (=> res!65640 e!89128)))

(declare-fun lt!71596 () Bool)

(assert (=> d!42695 (= res!65640 (not lt!71596))))

(declare-fun lt!71595 () Bool)

(assert (=> d!42695 (= lt!71596 lt!71595)))

(declare-fun lt!71593 () Unit!4291)

(declare-fun e!89127 () Unit!4291)

(assert (=> d!42695 (= lt!71593 e!89127)))

(declare-fun c!25625 () Bool)

(assert (=> d!42695 (= c!25625 lt!71595)))

(assert (=> d!42695 (= lt!71595 (containsKey!176 (toList!873 (getCurrentListMap!544 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257))))))

(assert (=> d!42695 (= (contains!901 (getCurrentListMap!544 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257))) lt!71596)))

(declare-fun b!136865 () Bool)

(declare-fun lt!71594 () Unit!4291)

(assert (=> b!136865 (= e!89127 lt!71594)))

(assert (=> b!136865 (= lt!71594 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 (getCurrentListMap!544 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257))))))

(assert (=> b!136865 (isDefined!126 (getValueByKey!172 (toList!873 (getCurrentListMap!544 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257))))))

(declare-fun b!136866 () Bool)

(declare-fun Unit!4311 () Unit!4291)

(assert (=> b!136866 (= e!89127 Unit!4311)))

(declare-fun b!136867 () Bool)

(assert (=> b!136867 (= e!89128 (isDefined!126 (getValueByKey!172 (toList!873 (getCurrentListMap!544 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))

(assert (= (and d!42695 c!25625) b!136865))

(assert (= (and d!42695 (not c!25625)) b!136866))

(assert (= (and d!42695 (not res!65640)) b!136867))

(assert (=> d!42695 m!162705))

(declare-fun m!163341 () Bool)

(assert (=> d!42695 m!163341))

(assert (=> b!136865 m!162705))

(declare-fun m!163343 () Bool)

(assert (=> b!136865 m!163343))

(assert (=> b!136865 m!162705))

(declare-fun m!163345 () Bool)

(assert (=> b!136865 m!163345))

(assert (=> b!136865 m!163345))

(declare-fun m!163347 () Bool)

(assert (=> b!136865 m!163347))

(assert (=> b!136867 m!162705))

(assert (=> b!136867 m!163345))

(assert (=> b!136867 m!163345))

(assert (=> b!136867 m!163347))

(assert (=> b!136785 d!42695))

(declare-fun b!136868 () Bool)

(declare-fun e!89136 () Bool)

(declare-fun call!15086 () Bool)

(assert (=> b!136868 (= e!89136 (not call!15086))))

(declare-fun b!136869 () Bool)

(declare-fun res!65642 () Bool)

(declare-fun e!89132 () Bool)

(assert (=> b!136869 (=> (not res!65642) (not e!89132))))

(declare-fun e!89130 () Bool)

(assert (=> b!136869 (= res!65642 e!89130)))

(declare-fun res!65648 () Bool)

(assert (=> b!136869 (=> res!65648 e!89130)))

(declare-fun e!89134 () Bool)

(assert (=> b!136869 (= res!65648 (not e!89134))))

(declare-fun res!65645 () Bool)

(assert (=> b!136869 (=> (not res!65645) (not e!89134))))

(assert (=> b!136869 (= res!65645 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136870 () Bool)

(declare-fun e!89138 () Bool)

(declare-fun e!89135 () Bool)

(assert (=> b!136870 (= e!89138 e!89135)))

(declare-fun res!65649 () Bool)

(declare-fun call!15085 () Bool)

(assert (=> b!136870 (= res!65649 call!15085)))

(assert (=> b!136870 (=> (not res!65649) (not e!89135))))

(declare-fun bm!15078 () Bool)

(declare-fun call!15084 () ListLongMap!1715)

(declare-fun call!15087 () ListLongMap!1715)

(assert (=> bm!15078 (= call!15084 call!15087)))

(declare-fun b!136871 () Bool)

(declare-fun e!89141 () Bool)

(assert (=> b!136871 (= e!89130 e!89141)))

(declare-fun res!65647 () Bool)

(assert (=> b!136871 (=> (not res!65647) (not e!89141))))

(declare-fun lt!71607 () ListLongMap!1715)

(assert (=> b!136871 (= res!65647 (contains!901 lt!71607 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!136871 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136872 () Bool)

(declare-fun e!89137 () ListLongMap!1715)

(declare-fun e!89133 () ListLongMap!1715)

(assert (=> b!136872 (= e!89137 e!89133)))

(declare-fun c!25627 () Bool)

(assert (=> b!136872 (= c!25627 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!15079 () Bool)

(assert (=> bm!15079 (= call!15085 (contains!901 lt!71607 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136873 () Bool)

(assert (=> b!136873 (= e!89135 (= (apply!117 lt!71607 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2742 newMap!16)))))

(declare-fun b!136874 () Bool)

(declare-fun e!89140 () ListLongMap!1715)

(declare-fun call!15082 () ListLongMap!1715)

(assert (=> b!136874 (= e!89140 call!15082)))

(declare-fun bm!15080 () Bool)

(declare-fun call!15083 () ListLongMap!1715)

(declare-fun call!15081 () ListLongMap!1715)

(assert (=> bm!15080 (= call!15083 call!15081)))

(declare-fun b!136875 () Bool)

(declare-fun e!89131 () Bool)

(assert (=> b!136875 (= e!89131 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136877 () Bool)

(assert (=> b!136877 (= e!89133 call!15083)))

(declare-fun b!136878 () Bool)

(assert (=> b!136878 (= e!89134 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136879 () Bool)

(assert (=> b!136879 (= e!89132 e!89136)))

(declare-fun c!25631 () Bool)

(assert (=> b!136879 (= c!25631 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!136880 () Bool)

(declare-fun e!89139 () Unit!4291)

(declare-fun lt!71601 () Unit!4291)

(assert (=> b!136880 (= e!89139 lt!71601)))

(declare-fun lt!71612 () ListLongMap!1715)

(assert (=> b!136880 (= lt!71612 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71605 () (_ BitVec 64))

(assert (=> b!136880 (= lt!71605 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71602 () (_ BitVec 64))

(assert (=> b!136880 (= lt!71602 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71603 () Unit!4291)

(assert (=> b!136880 (= lt!71603 (addStillContains!93 lt!71612 lt!71605 (zeroValue!2742 newMap!16) lt!71602))))

(assert (=> b!136880 (contains!901 (+!171 lt!71612 (tuple2!2623 lt!71605 (zeroValue!2742 newMap!16))) lt!71602)))

(declare-fun lt!71617 () Unit!4291)

(assert (=> b!136880 (= lt!71617 lt!71603)))

(declare-fun lt!71604 () ListLongMap!1715)

(assert (=> b!136880 (= lt!71604 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71618 () (_ BitVec 64))

(assert (=> b!136880 (= lt!71618 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71600 () (_ BitVec 64))

(assert (=> b!136880 (= lt!71600 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71597 () Unit!4291)

(assert (=> b!136880 (= lt!71597 (addApplyDifferent!93 lt!71604 lt!71618 (minValue!2742 newMap!16) lt!71600))))

(assert (=> b!136880 (= (apply!117 (+!171 lt!71604 (tuple2!2623 lt!71618 (minValue!2742 newMap!16))) lt!71600) (apply!117 lt!71604 lt!71600))))

(declare-fun lt!71613 () Unit!4291)

(assert (=> b!136880 (= lt!71613 lt!71597)))

(declare-fun lt!71610 () ListLongMap!1715)

(assert (=> b!136880 (= lt!71610 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71598 () (_ BitVec 64))

(assert (=> b!136880 (= lt!71598 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71599 () (_ BitVec 64))

(assert (=> b!136880 (= lt!71599 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71606 () Unit!4291)

(assert (=> b!136880 (= lt!71606 (addApplyDifferent!93 lt!71610 lt!71598 (zeroValue!2742 newMap!16) lt!71599))))

(assert (=> b!136880 (= (apply!117 (+!171 lt!71610 (tuple2!2623 lt!71598 (zeroValue!2742 newMap!16))) lt!71599) (apply!117 lt!71610 lt!71599))))

(declare-fun lt!71608 () Unit!4291)

(assert (=> b!136880 (= lt!71608 lt!71606)))

(declare-fun lt!71615 () ListLongMap!1715)

(assert (=> b!136880 (= lt!71615 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71614 () (_ BitVec 64))

(assert (=> b!136880 (= lt!71614 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71616 () (_ BitVec 64))

(assert (=> b!136880 (= lt!71616 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!136880 (= lt!71601 (addApplyDifferent!93 lt!71615 lt!71614 (minValue!2742 newMap!16) lt!71616))))

(assert (=> b!136880 (= (apply!117 (+!171 lt!71615 (tuple2!2623 lt!71614 (minValue!2742 newMap!16))) lt!71616) (apply!117 lt!71615 lt!71616))))

(declare-fun b!136881 () Bool)

(assert (=> b!136881 (= e!89140 call!15083)))

(declare-fun b!136882 () Bool)

(assert (=> b!136882 (= e!89137 (+!171 call!15081 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))

(declare-fun bm!15081 () Bool)

(assert (=> bm!15081 (= call!15087 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun b!136883 () Bool)

(declare-fun Unit!4312 () Unit!4291)

(assert (=> b!136883 (= e!89139 Unit!4312)))

(declare-fun b!136884 () Bool)

(declare-fun res!65641 () Bool)

(assert (=> b!136884 (=> (not res!65641) (not e!89132))))

(assert (=> b!136884 (= res!65641 e!89138)))

(declare-fun c!25628 () Bool)

(assert (=> b!136884 (= c!25628 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!136876 () Bool)

(declare-fun e!89129 () Bool)

(assert (=> b!136876 (= e!89136 e!89129)))

(declare-fun res!65644 () Bool)

(assert (=> b!136876 (= res!65644 call!15086)))

(assert (=> b!136876 (=> (not res!65644) (not e!89129))))

(declare-fun d!42697 () Bool)

(assert (=> d!42697 e!89132))

(declare-fun res!65643 () Bool)

(assert (=> d!42697 (=> (not res!65643) (not e!89132))))

(assert (=> d!42697 (= res!65643 (or (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))))

(declare-fun lt!71609 () ListLongMap!1715)

(assert (=> d!42697 (= lt!71607 lt!71609)))

(declare-fun lt!71611 () Unit!4291)

(assert (=> d!42697 (= lt!71611 e!89139)))

(declare-fun c!25629 () Bool)

(assert (=> d!42697 (= c!25629 e!89131)))

(declare-fun res!65646 () Bool)

(assert (=> d!42697 (=> (not res!65646) (not e!89131))))

(assert (=> d!42697 (= res!65646 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42697 (= lt!71609 e!89137)))

(declare-fun c!25626 () Bool)

(assert (=> d!42697 (= c!25626 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42697 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42697 (= (getCurrentListMap!544 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!71607)))

(declare-fun b!136885 () Bool)

(assert (=> b!136885 (= e!89129 (= (apply!117 lt!71607 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2742 newMap!16)))))

(declare-fun bm!15082 () Bool)

(assert (=> bm!15082 (= call!15082 call!15084)))

(declare-fun b!136886 () Bool)

(assert (=> b!136886 (= e!89138 (not call!15085))))

(declare-fun bm!15083 () Bool)

(assert (=> bm!15083 (= call!15086 (contains!901 lt!71607 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136887 () Bool)

(assert (=> b!136887 (= e!89141 (= (apply!117 lt!71607 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 lt!71250) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136887 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 lt!71250)))))

(assert (=> b!136887 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun bm!15084 () Bool)

(assert (=> bm!15084 (= call!15081 (+!171 (ite c!25626 call!15087 (ite c!25627 call!15084 call!15082)) (ite (or c!25626 c!25627) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(declare-fun b!136888 () Bool)

(declare-fun c!25630 () Bool)

(assert (=> b!136888 (= c!25630 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!136888 (= e!89133 e!89140)))

(assert (= (and d!42697 c!25626) b!136882))

(assert (= (and d!42697 (not c!25626)) b!136872))

(assert (= (and b!136872 c!25627) b!136877))

(assert (= (and b!136872 (not c!25627)) b!136888))

(assert (= (and b!136888 c!25630) b!136881))

(assert (= (and b!136888 (not c!25630)) b!136874))

(assert (= (or b!136881 b!136874) bm!15082))

(assert (= (or b!136877 bm!15082) bm!15078))

(assert (= (or b!136877 b!136881) bm!15080))

(assert (= (or b!136882 bm!15078) bm!15081))

(assert (= (or b!136882 bm!15080) bm!15084))

(assert (= (and d!42697 res!65646) b!136875))

(assert (= (and d!42697 c!25629) b!136880))

(assert (= (and d!42697 (not c!25629)) b!136883))

(assert (= (and d!42697 res!65643) b!136869))

(assert (= (and b!136869 res!65645) b!136878))

(assert (= (and b!136869 (not res!65648)) b!136871))

(assert (= (and b!136871 res!65647) b!136887))

(assert (= (and b!136869 res!65642) b!136884))

(assert (= (and b!136884 c!25628) b!136870))

(assert (= (and b!136884 (not c!25628)) b!136886))

(assert (= (and b!136870 res!65649) b!136873))

(assert (= (or b!136870 b!136886) bm!15079))

(assert (= (and b!136884 res!65641) b!136879))

(assert (= (and b!136879 c!25631) b!136876))

(assert (= (and b!136879 (not c!25631)) b!136868))

(assert (= (and b!136876 res!65644) b!136885))

(assert (= (or b!136876 b!136868) bm!15083))

(declare-fun b_lambda!6145 () Bool)

(assert (=> (not b_lambda!6145) (not b!136887)))

(assert (=> b!136887 t!6249))

(declare-fun b_and!8493 () Bool)

(assert (= b_and!8489 (and (=> t!6249 result!4059) b_and!8493)))

(assert (=> b!136887 t!6251))

(declare-fun b_and!8495 () Bool)

(assert (= b_and!8491 (and (=> t!6251 result!4061) b_and!8495)))

(declare-fun m!163349 () Bool)

(assert (=> bm!15079 m!163349))

(declare-fun m!163351 () Bool)

(assert (=> b!136887 m!163351))

(assert (=> b!136887 m!162731))

(declare-fun m!163353 () Bool)

(assert (=> b!136887 m!163353))

(assert (=> b!136887 m!162731))

(assert (=> b!136887 m!162815))

(assert (=> b!136887 m!163351))

(assert (=> b!136887 m!162815))

(declare-fun m!163355 () Bool)

(assert (=> b!136887 m!163355))

(declare-fun m!163357 () Bool)

(assert (=> b!136882 m!163357))

(declare-fun m!163359 () Bool)

(assert (=> bm!15084 m!163359))

(declare-fun m!163361 () Bool)

(assert (=> bm!15081 m!163361))

(declare-fun m!163363 () Bool)

(assert (=> b!136880 m!163363))

(declare-fun m!163365 () Bool)

(assert (=> b!136880 m!163365))

(declare-fun m!163367 () Bool)

(assert (=> b!136880 m!163367))

(declare-fun m!163369 () Bool)

(assert (=> b!136880 m!163369))

(declare-fun m!163371 () Bool)

(assert (=> b!136880 m!163371))

(declare-fun m!163373 () Bool)

(assert (=> b!136880 m!163373))

(declare-fun m!163375 () Bool)

(assert (=> b!136880 m!163375))

(declare-fun m!163377 () Bool)

(assert (=> b!136880 m!163377))

(declare-fun m!163379 () Bool)

(assert (=> b!136880 m!163379))

(declare-fun m!163381 () Bool)

(assert (=> b!136880 m!163381))

(assert (=> b!136880 m!163363))

(assert (=> b!136880 m!163371))

(assert (=> b!136880 m!162731))

(declare-fun m!163383 () Bool)

(assert (=> b!136880 m!163383))

(assert (=> b!136880 m!163361))

(assert (=> b!136880 m!163375))

(declare-fun m!163385 () Bool)

(assert (=> b!136880 m!163385))

(declare-fun m!163387 () Bool)

(assert (=> b!136880 m!163387))

(declare-fun m!163389 () Bool)

(assert (=> b!136880 m!163389))

(assert (=> b!136880 m!163387))

(declare-fun m!163391 () Bool)

(assert (=> b!136880 m!163391))

(declare-fun m!163393 () Bool)

(assert (=> bm!15083 m!163393))

(assert (=> d!42697 m!162751))

(assert (=> b!136878 m!162731))

(assert (=> b!136878 m!162731))

(assert (=> b!136878 m!162735))

(declare-fun m!163395 () Bool)

(assert (=> b!136885 m!163395))

(assert (=> b!136875 m!162731))

(assert (=> b!136875 m!162731))

(assert (=> b!136875 m!162735))

(declare-fun m!163397 () Bool)

(assert (=> b!136873 m!163397))

(assert (=> b!136871 m!162731))

(assert (=> b!136871 m!162731))

(declare-fun m!163399 () Bool)

(assert (=> b!136871 m!163399))

(assert (=> b!136785 d!42697))

(declare-fun d!42699 () Bool)

(assert (=> d!42699 (= (inRange!0 (index!3306 lt!71370) (mask!7203 newMap!16)) (and (bvsge (index!3306 lt!71370) #b00000000000000000000000000000000) (bvslt (index!3306 lt!71370) (bvadd (mask!7203 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!136622 d!42699))

(declare-fun d!42701 () Bool)

(declare-fun e!89143 () Bool)

(assert (=> d!42701 e!89143))

(declare-fun res!65650 () Bool)

(assert (=> d!42701 (=> res!65650 e!89143)))

(declare-fun lt!71622 () Bool)

(assert (=> d!42701 (= res!65650 (not lt!71622))))

(declare-fun lt!71621 () Bool)

(assert (=> d!42701 (= lt!71622 lt!71621)))

(declare-fun lt!71619 () Unit!4291)

(declare-fun e!89142 () Unit!4291)

(assert (=> d!42701 (= lt!71619 e!89142)))

(declare-fun c!25632 () Bool)

(assert (=> d!42701 (= c!25632 lt!71621)))

(assert (=> d!42701 (= lt!71621 (containsKey!176 (toList!873 lt!71391) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42701 (= (contains!901 lt!71391 #b0000000000000000000000000000000000000000000000000000000000000000) lt!71622)))

(declare-fun b!136889 () Bool)

(declare-fun lt!71620 () Unit!4291)

(assert (=> b!136889 (= e!89142 lt!71620)))

(assert (=> b!136889 (= lt!71620 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71391) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136889 (isDefined!126 (getValueByKey!172 (toList!873 lt!71391) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!136890 () Bool)

(declare-fun Unit!4313 () Unit!4291)

(assert (=> b!136890 (= e!89142 Unit!4313)))

(declare-fun b!136891 () Bool)

(assert (=> b!136891 (= e!89143 (isDefined!126 (getValueByKey!172 (toList!873 lt!71391) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42701 c!25632) b!136889))

(assert (= (and d!42701 (not c!25632)) b!136890))

(assert (= (and d!42701 (not res!65650)) b!136891))

(declare-fun m!163401 () Bool)

(assert (=> d!42701 m!163401))

(declare-fun m!163403 () Bool)

(assert (=> b!136889 m!163403))

(declare-fun m!163405 () Bool)

(assert (=> b!136889 m!163405))

(assert (=> b!136889 m!163405))

(declare-fun m!163407 () Bool)

(assert (=> b!136889 m!163407))

(assert (=> b!136891 m!163405))

(assert (=> b!136891 m!163405))

(assert (=> b!136891 m!163407))

(assert (=> bm!15050 d!42701))

(declare-fun c!25633 () Bool)

(declare-fun d!42703 () Bool)

(assert (=> d!42703 (= c!25633 (and ((_ is Cons!1737) (toList!873 lt!71434)) (= (_1!1321 (h!2343 (toList!873 lt!71434))) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89144 () Option!178)

(assert (=> d!42703 (= (getValueByKey!172 (toList!873 lt!71434) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) e!89144)))

(declare-fun b!136894 () Bool)

(declare-fun e!89145 () Option!178)

(assert (=> b!136894 (= e!89145 (getValueByKey!172 (t!6241 (toList!873 lt!71434)) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!136892 () Bool)

(assert (=> b!136892 (= e!89144 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71434)))))))

(declare-fun b!136895 () Bool)

(assert (=> b!136895 (= e!89145 None!176)))

(declare-fun b!136893 () Bool)

(assert (=> b!136893 (= e!89144 e!89145)))

(declare-fun c!25634 () Bool)

(assert (=> b!136893 (= c!25634 (and ((_ is Cons!1737) (toList!873 lt!71434)) (not (= (_1!1321 (h!2343 (toList!873 lt!71434))) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42703 c!25633) b!136892))

(assert (= (and d!42703 (not c!25633)) b!136893))

(assert (= (and b!136893 c!25634) b!136894))

(assert (= (and b!136893 (not c!25634)) b!136895))

(declare-fun m!163409 () Bool)

(assert (=> b!136894 m!163409))

(assert (=> b!136735 d!42703))

(declare-fun d!42705 () Bool)

(assert (=> d!42705 (= (map!1413 (_2!1322 lt!71556)) (getCurrentListMap!544 (_keys!4642 (_2!1322 lt!71556)) (_values!2872 (_2!1322 lt!71556)) (mask!7203 (_2!1322 lt!71556)) (extraKeys!2650 (_2!1322 lt!71556)) (zeroValue!2742 (_2!1322 lt!71556)) (minValue!2742 (_2!1322 lt!71556)) #b00000000000000000000000000000000 (defaultEntry!2889 (_2!1322 lt!71556))))))

(declare-fun bs!5737 () Bool)

(assert (= bs!5737 d!42705))

(declare-fun m!163411 () Bool)

(assert (=> bs!5737 m!163411))

(assert (=> b!136827 d!42705))

(declare-fun d!42707 () Bool)

(declare-fun e!89146 () Bool)

(assert (=> d!42707 e!89146))

(declare-fun res!65652 () Bool)

(assert (=> d!42707 (=> (not res!65652) (not e!89146))))

(declare-fun lt!71626 () ListLongMap!1715)

(assert (=> d!42707 (= res!65652 (contains!901 lt!71626 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!71623 () List!1741)

(assert (=> d!42707 (= lt!71626 (ListLongMap!1716 lt!71623))))

(declare-fun lt!71624 () Unit!4291)

(declare-fun lt!71625 () Unit!4291)

(assert (=> d!42707 (= lt!71624 lt!71625)))

(assert (=> d!42707 (= (getValueByKey!172 lt!71623 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42707 (= lt!71625 (lemmaContainsTupThenGetReturnValue!89 lt!71623 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42707 (= lt!71623 (insertStrictlySorted!91 (toList!873 (map!1413 newMap!16)) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42707 (= (+!171 (map!1413 newMap!16) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71626)))

(declare-fun b!136896 () Bool)

(declare-fun res!65651 () Bool)

(assert (=> b!136896 (=> (not res!65651) (not e!89146))))

(assert (=> b!136896 (= res!65651 (= (getValueByKey!172 (toList!873 lt!71626) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!136897 () Bool)

(assert (=> b!136897 (= e!89146 (contains!904 (toList!873 lt!71626) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!42707 res!65652) b!136896))

(assert (= (and b!136896 res!65651) b!136897))

(declare-fun m!163413 () Bool)

(assert (=> d!42707 m!163413))

(declare-fun m!163415 () Bool)

(assert (=> d!42707 m!163415))

(declare-fun m!163417 () Bool)

(assert (=> d!42707 m!163417))

(declare-fun m!163419 () Bool)

(assert (=> d!42707 m!163419))

(declare-fun m!163421 () Bool)

(assert (=> b!136896 m!163421))

(declare-fun m!163423 () Bool)

(assert (=> b!136897 m!163423))

(assert (=> b!136827 d!42707))

(assert (=> b!136827 d!42535))

(declare-fun c!25635 () Bool)

(declare-fun d!42709 () Bool)

(assert (=> d!42709 (= c!25635 (and ((_ is Cons!1737) (t!6241 (toList!873 lt!71093))) (= (_1!1321 (h!2343 (t!6241 (toList!873 lt!71093)))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(declare-fun e!89147 () Option!178)

(assert (=> d!42709 (= (getValueByKey!172 (t!6241 (toList!873 lt!71093)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) e!89147)))

(declare-fun b!136900 () Bool)

(declare-fun e!89148 () Option!178)

(assert (=> b!136900 (= e!89148 (getValueByKey!172 (t!6241 (t!6241 (toList!873 lt!71093))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun b!136898 () Bool)

(assert (=> b!136898 (= e!89147 (Some!177 (_2!1321 (h!2343 (t!6241 (toList!873 lt!71093))))))))

(declare-fun b!136901 () Bool)

(assert (=> b!136901 (= e!89148 None!176)))

(declare-fun b!136899 () Bool)

(assert (=> b!136899 (= e!89147 e!89148)))

(declare-fun c!25636 () Bool)

(assert (=> b!136899 (= c!25636 (and ((_ is Cons!1737) (t!6241 (toList!873 lt!71093))) (not (= (_1!1321 (h!2343 (t!6241 (toList!873 lt!71093)))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))))

(assert (= (and d!42709 c!25635) b!136898))

(assert (= (and d!42709 (not c!25635)) b!136899))

(assert (= (and b!136899 c!25636) b!136900))

(assert (= (and b!136899 (not c!25636)) b!136901))

(assert (=> b!136900 m!162523))

(declare-fun m!163425 () Bool)

(assert (=> b!136900 m!163425))

(assert (=> b!136728 d!42709))

(declare-fun d!42711 () Bool)

(declare-fun e!89150 () Bool)

(assert (=> d!42711 e!89150))

(declare-fun res!65653 () Bool)

(assert (=> d!42711 (=> res!65653 e!89150)))

(declare-fun lt!71630 () Bool)

(assert (=> d!42711 (= res!65653 (not lt!71630))))

(declare-fun lt!71629 () Bool)

(assert (=> d!42711 (= lt!71630 lt!71629)))

(declare-fun lt!71627 () Unit!4291)

(declare-fun e!89149 () Unit!4291)

(assert (=> d!42711 (= lt!71627 e!89149)))

(declare-fun c!25637 () Bool)

(assert (=> d!42711 (= c!25637 lt!71629)))

(assert (=> d!42711 (= lt!71629 (containsKey!176 (toList!873 lt!71349) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!42711 (= (contains!901 lt!71349 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) lt!71630)))

(declare-fun b!136902 () Bool)

(declare-fun lt!71628 () Unit!4291)

(assert (=> b!136902 (= e!89149 lt!71628)))

(assert (=> b!136902 (= lt!71628 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71349) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!136902 (isDefined!126 (getValueByKey!172 (toList!873 lt!71349) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!136903 () Bool)

(declare-fun Unit!4314 () Unit!4291)

(assert (=> b!136903 (= e!89149 Unit!4314)))

(declare-fun b!136904 () Bool)

(assert (=> b!136904 (= e!89150 (isDefined!126 (getValueByKey!172 (toList!873 lt!71349) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!42711 c!25637) b!136902))

(assert (= (and d!42711 (not c!25637)) b!136903))

(assert (= (and d!42711 (not res!65653)) b!136904))

(assert (=> d!42711 m!162731))

(declare-fun m!163427 () Bool)

(assert (=> d!42711 m!163427))

(assert (=> b!136902 m!162731))

(declare-fun m!163429 () Bool)

(assert (=> b!136902 m!163429))

(assert (=> b!136902 m!162731))

(declare-fun m!163431 () Bool)

(assert (=> b!136902 m!163431))

(assert (=> b!136902 m!163431))

(declare-fun m!163433 () Bool)

(assert (=> b!136902 m!163433))

(assert (=> b!136904 m!162731))

(assert (=> b!136904 m!163431))

(assert (=> b!136904 m!163431))

(assert (=> b!136904 m!163433))

(assert (=> b!136597 d!42711))

(declare-fun d!42713 () Bool)

(assert (=> d!42713 (= (apply!117 lt!71349 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1502 (getValueByKey!172 (toList!873 lt!71349) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!5738 () Bool)

(assert (= bs!5738 d!42713))

(assert (=> bs!5738 m!162731))

(assert (=> bs!5738 m!163431))

(assert (=> bs!5738 m!163431))

(declare-fun m!163435 () Bool)

(assert (=> bs!5738 m!163435))

(assert (=> b!136613 d!42713))

(declare-fun d!42715 () Bool)

(declare-fun c!25638 () Bool)

(assert (=> d!42715 (= c!25638 ((_ is ValueCellFull!1101) (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!89151 () V!3499)

(assert (=> d!42715 (= (get!1498 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!89151)))

(declare-fun b!136905 () Bool)

(assert (=> b!136905 (= e!89151 (get!1500 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!136906 () Bool)

(assert (=> b!136906 (= e!89151 (get!1501 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42715 c!25638) b!136905))

(assert (= (and d!42715 (not c!25638)) b!136906))

(assert (=> b!136905 m!162811))

(assert (=> b!136905 m!162815))

(declare-fun m!163437 () Bool)

(assert (=> b!136905 m!163437))

(assert (=> b!136906 m!162811))

(assert (=> b!136906 m!162815))

(declare-fun m!163439 () Bool)

(assert (=> b!136906 m!163439))

(assert (=> b!136613 d!42715))

(declare-fun d!42717 () Bool)

(declare-fun e!89153 () Bool)

(assert (=> d!42717 e!89153))

(declare-fun res!65654 () Bool)

(assert (=> d!42717 (=> res!65654 e!89153)))

(declare-fun lt!71634 () Bool)

(assert (=> d!42717 (= res!65654 (not lt!71634))))

(declare-fun lt!71633 () Bool)

(assert (=> d!42717 (= lt!71634 lt!71633)))

(declare-fun lt!71631 () Unit!4291)

(declare-fun e!89152 () Unit!4291)

(assert (=> d!42717 (= lt!71631 e!89152)))

(declare-fun c!25639 () Bool)

(assert (=> d!42717 (= c!25639 lt!71633)))

(assert (=> d!42717 (= lt!71633 (containsKey!176 (toList!873 lt!71302) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> d!42717 (= (contains!901 lt!71302 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) lt!71634)))

(declare-fun b!136907 () Bool)

(declare-fun lt!71632 () Unit!4291)

(assert (=> b!136907 (= e!89152 lt!71632)))

(assert (=> b!136907 (= lt!71632 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71302) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> b!136907 (isDefined!126 (getValueByKey!172 (toList!873 lt!71302) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!136908 () Bool)

(declare-fun Unit!4315 () Unit!4291)

(assert (=> b!136908 (= e!89152 Unit!4315)))

(declare-fun b!136909 () Bool)

(assert (=> b!136909 (= e!89153 (isDefined!126 (getValueByKey!172 (toList!873 lt!71302) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42717 c!25639) b!136907))

(assert (= (and d!42717 (not c!25639)) b!136908))

(assert (= (and d!42717 (not res!65654)) b!136909))

(declare-fun m!163441 () Bool)

(assert (=> d!42717 m!163441))

(declare-fun m!163443 () Bool)

(assert (=> b!136907 m!163443))

(assert (=> b!136907 m!162787))

(assert (=> b!136907 m!162787))

(declare-fun m!163445 () Bool)

(assert (=> b!136907 m!163445))

(assert (=> b!136909 m!162787))

(assert (=> b!136909 m!162787))

(assert (=> b!136909 m!163445))

(assert (=> d!42571 d!42717))

(declare-fun d!42719 () Bool)

(declare-fun c!25640 () Bool)

(assert (=> d!42719 (= c!25640 (and ((_ is Cons!1737) lt!71299) (= (_1!1321 (h!2343 lt!71299)) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(declare-fun e!89154 () Option!178)

(assert (=> d!42719 (= (getValueByKey!172 lt!71299 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) e!89154)))

(declare-fun b!136912 () Bool)

(declare-fun e!89155 () Option!178)

(assert (=> b!136912 (= e!89155 (getValueByKey!172 (t!6241 lt!71299) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!136910 () Bool)

(assert (=> b!136910 (= e!89154 (Some!177 (_2!1321 (h!2343 lt!71299))))))

(declare-fun b!136913 () Bool)

(assert (=> b!136913 (= e!89155 None!176)))

(declare-fun b!136911 () Bool)

(assert (=> b!136911 (= e!89154 e!89155)))

(declare-fun c!25641 () Bool)

(assert (=> b!136911 (= c!25641 (and ((_ is Cons!1737) lt!71299) (not (= (_1!1321 (h!2343 lt!71299)) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))))

(assert (= (and d!42719 c!25640) b!136910))

(assert (= (and d!42719 (not c!25640)) b!136911))

(assert (= (and b!136911 c!25641) b!136912))

(assert (= (and b!136911 (not c!25641)) b!136913))

(declare-fun m!163447 () Bool)

(assert (=> b!136912 m!163447))

(assert (=> d!42571 d!42719))

(declare-fun d!42721 () Bool)

(assert (=> d!42721 (= (getValueByKey!172 lt!71299 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) (Some!177 (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun lt!71637 () Unit!4291)

(declare-fun choose!848 (List!1741 (_ BitVec 64) V!3499) Unit!4291)

(assert (=> d!42721 (= lt!71637 (choose!848 lt!71299 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89158 () Bool)

(assert (=> d!42721 e!89158))

(declare-fun res!65659 () Bool)

(assert (=> d!42721 (=> (not res!65659) (not e!89158))))

(assert (=> d!42721 (= res!65659 (isStrictlySorted!318 lt!71299))))

(assert (=> d!42721 (= (lemmaContainsTupThenGetReturnValue!89 lt!71299 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) lt!71637)))

(declare-fun b!136918 () Bool)

(declare-fun res!65660 () Bool)

(assert (=> b!136918 (=> (not res!65660) (not e!89158))))

(assert (=> b!136918 (= res!65660 (containsKey!176 lt!71299 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!136919 () Bool)

(assert (=> b!136919 (= e!89158 (contains!904 lt!71299 (tuple2!2623 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42721 res!65659) b!136918))

(assert (= (and b!136918 res!65660) b!136919))

(assert (=> d!42721 m!162781))

(declare-fun m!163449 () Bool)

(assert (=> d!42721 m!163449))

(declare-fun m!163451 () Bool)

(assert (=> d!42721 m!163451))

(declare-fun m!163453 () Bool)

(assert (=> b!136918 m!163453))

(declare-fun m!163455 () Bool)

(assert (=> b!136919 m!163455))

(assert (=> d!42571 d!42721))

(declare-fun b!136940 () Bool)

(declare-fun e!89172 () List!1741)

(declare-fun call!15095 () List!1741)

(assert (=> b!136940 (= e!89172 call!15095)))

(declare-fun lt!71640 () List!1741)

(declare-fun b!136941 () Bool)

(declare-fun e!89170 () Bool)

(assert (=> b!136941 (= e!89170 (contains!904 lt!71640 (tuple2!2623 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(declare-fun b!136942 () Bool)

(declare-fun e!89169 () List!1741)

(declare-fun call!15096 () List!1741)

(assert (=> b!136942 (= e!89169 call!15096)))

(declare-fun b!136943 () Bool)

(declare-fun e!89171 () List!1741)

(assert (=> b!136943 (= e!89171 e!89172)))

(declare-fun c!25650 () Bool)

(assert (=> b!136943 (= c!25650 (and ((_ is Cons!1737) (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945)))) (= (_1!1321 (h!2343 (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945))))) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(declare-fun call!15094 () List!1741)

(declare-fun bm!15091 () Bool)

(declare-fun c!25653 () Bool)

(declare-fun e!89173 () List!1741)

(declare-fun $colon$colon!92 (List!1741 tuple2!2622) List!1741)

(assert (=> bm!15091 (= call!15094 ($colon$colon!92 e!89173 (ite c!25653 (h!2343 (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945)))) (tuple2!2623 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))))

(declare-fun c!25652 () Bool)

(assert (=> bm!15091 (= c!25652 c!25653)))

(declare-fun b!136944 () Bool)

(assert (=> b!136944 (= e!89169 call!15096)))

(declare-fun bm!15092 () Bool)

(assert (=> bm!15092 (= call!15096 call!15095)))

(declare-fun d!42723 () Bool)

(assert (=> d!42723 e!89170))

(declare-fun res!65666 () Bool)

(assert (=> d!42723 (=> (not res!65666) (not e!89170))))

(assert (=> d!42723 (= res!65666 (isStrictlySorted!318 lt!71640))))

(assert (=> d!42723 (= lt!71640 e!89171)))

(assert (=> d!42723 (= c!25653 (and ((_ is Cons!1737) (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945)))) (bvslt (_1!1321 (h!2343 (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945))))) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (=> d!42723 (isStrictlySorted!318 (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945))))))

(assert (=> d!42723 (= (insertStrictlySorted!91 (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945))) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) lt!71640)))

(declare-fun c!25651 () Bool)

(declare-fun b!136945 () Bool)

(assert (=> b!136945 (= e!89173 (ite c!25650 (t!6241 (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945)))) (ite c!25651 (Cons!1737 (h!2343 (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945)))) (t!6241 (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945))))) Nil!1738)))))

(declare-fun b!136946 () Bool)

(declare-fun res!65665 () Bool)

(assert (=> b!136946 (=> (not res!65665) (not e!89170))))

(assert (=> b!136946 (= res!65665 (containsKey!176 lt!71640 (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!136947 () Bool)

(assert (=> b!136947 (= c!25651 (and ((_ is Cons!1737) (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945)))) (bvsgt (_1!1321 (h!2343 (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945))))) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (=> b!136947 (= e!89172 e!89169)))

(declare-fun bm!15093 () Bool)

(assert (=> bm!15093 (= call!15095 call!15094)))

(declare-fun b!136948 () Bool)

(assert (=> b!136948 (= e!89171 call!15094)))

(declare-fun b!136949 () Bool)

(assert (=> b!136949 (= e!89173 (insertStrictlySorted!91 (t!6241 (toList!873 (ite c!25473 call!14950 (ite c!25474 call!14947 call!14945)))) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (_2!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (= (and d!42723 c!25653) b!136948))

(assert (= (and d!42723 (not c!25653)) b!136943))

(assert (= (and b!136943 c!25650) b!136940))

(assert (= (and b!136943 (not c!25650)) b!136947))

(assert (= (and b!136947 c!25651) b!136942))

(assert (= (and b!136947 (not c!25651)) b!136944))

(assert (= (or b!136942 b!136944) bm!15092))

(assert (= (or b!136940 bm!15092) bm!15093))

(assert (= (or b!136948 bm!15093) bm!15091))

(assert (= (and bm!15091 c!25652) b!136949))

(assert (= (and bm!15091 (not c!25652)) b!136945))

(assert (= (and d!42723 res!65666) b!136946))

(assert (= (and b!136946 res!65665) b!136941))

(declare-fun m!163457 () Bool)

(assert (=> b!136949 m!163457))

(declare-fun m!163459 () Bool)

(assert (=> b!136946 m!163459))

(declare-fun m!163461 () Bool)

(assert (=> d!42723 m!163461))

(declare-fun m!163463 () Bool)

(assert (=> d!42723 m!163463))

(declare-fun m!163465 () Bool)

(assert (=> b!136941 m!163465))

(declare-fun m!163467 () Bool)

(assert (=> bm!15091 m!163467))

(assert (=> d!42571 d!42723))

(declare-fun b!136950 () Bool)

(declare-fun e!89176 () Bool)

(declare-fun call!15097 () Bool)

(assert (=> b!136950 (= e!89176 call!15097)))

(declare-fun bm!15094 () Bool)

(assert (=> bm!15094 (= call!15097 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4642 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun d!42725 () Bool)

(declare-fun res!65667 () Bool)

(declare-fun e!89175 () Bool)

(assert (=> d!42725 (=> res!65667 e!89175)))

(assert (=> d!42725 (= res!65667 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> d!42725 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992)))) e!89175)))

(declare-fun b!136951 () Bool)

(declare-fun e!89174 () Bool)

(assert (=> b!136951 (= e!89175 e!89174)))

(declare-fun c!25654 () Bool)

(assert (=> b!136951 (= c!25654 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!136952 () Bool)

(assert (=> b!136952 (= e!89174 call!15097)))

(declare-fun b!136953 () Bool)

(assert (=> b!136953 (= e!89174 e!89176)))

(declare-fun lt!71641 () (_ BitVec 64))

(assert (=> b!136953 (= lt!71641 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!71642 () Unit!4291)

(assert (=> b!136953 (= lt!71642 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) lt!71641 #b00000000000000000000000000000000))))

(assert (=> b!136953 (arrayContainsKey!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) lt!71641 #b00000000000000000000000000000000)))

(declare-fun lt!71643 () Unit!4291)

(assert (=> b!136953 (= lt!71643 lt!71642)))

(declare-fun res!65668 () Bool)

(assert (=> b!136953 (= res!65668 (= (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) #b00000000000000000000000000000000) (_keys!4642 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992)))) (Found!286 #b00000000000000000000000000000000)))))

(assert (=> b!136953 (=> (not res!65668) (not e!89176))))

(assert (= (and d!42725 (not res!65667)) b!136951))

(assert (= (and b!136951 c!25654) b!136953))

(assert (= (and b!136951 (not c!25654)) b!136952))

(assert (= (and b!136953 res!65668) b!136950))

(assert (= (or b!136950 b!136952) bm!15094))

(declare-fun m!163469 () Bool)

(assert (=> bm!15094 m!163469))

(declare-fun m!163471 () Bool)

(assert (=> b!136951 m!163471))

(assert (=> b!136951 m!163471))

(declare-fun m!163473 () Bool)

(assert (=> b!136951 m!163473))

(assert (=> b!136953 m!163471))

(declare-fun m!163475 () Bool)

(assert (=> b!136953 m!163475))

(declare-fun m!163477 () Bool)

(assert (=> b!136953 m!163477))

(assert (=> b!136953 m!163471))

(declare-fun m!163479 () Bool)

(assert (=> b!136953 m!163479))

(assert (=> b!136716 d!42725))

(assert (=> bm!15076 d!42603))

(declare-fun d!42727 () Bool)

(assert (=> d!42727 (= (apply!117 lt!71349 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!172 (toList!873 lt!71349) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5739 () Bool)

(assert (= bs!5739 d!42727))

(declare-fun m!163481 () Bool)

(assert (=> bs!5739 m!163481))

(assert (=> bs!5739 m!163481))

(declare-fun m!163483 () Bool)

(assert (=> bs!5739 m!163483))

(assert (=> b!136611 d!42727))

(declare-fun d!42729 () Bool)

(declare-fun e!89178 () Bool)

(assert (=> d!42729 e!89178))

(declare-fun res!65669 () Bool)

(assert (=> d!42729 (=> res!65669 e!89178)))

(declare-fun lt!71647 () Bool)

(assert (=> d!42729 (= res!65669 (not lt!71647))))

(declare-fun lt!71646 () Bool)

(assert (=> d!42729 (= lt!71647 lt!71646)))

(declare-fun lt!71644 () Unit!4291)

(declare-fun e!89177 () Unit!4291)

(assert (=> d!42729 (= lt!71644 e!89177)))

(declare-fun c!25655 () Bool)

(assert (=> d!42729 (= c!25655 lt!71646)))

(assert (=> d!42729 (= lt!71646 (containsKey!176 (toList!873 lt!71442) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42729 (= (contains!901 lt!71442 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71647)))

(declare-fun b!136954 () Bool)

(declare-fun lt!71645 () Unit!4291)

(assert (=> b!136954 (= e!89177 lt!71645)))

(assert (=> b!136954 (= lt!71645 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71442) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> b!136954 (isDefined!126 (getValueByKey!172 (toList!873 lt!71442) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!136955 () Bool)

(declare-fun Unit!4316 () Unit!4291)

(assert (=> b!136955 (= e!89177 Unit!4316)))

(declare-fun b!136956 () Bool)

(assert (=> b!136956 (= e!89178 (isDefined!126 (getValueByKey!172 (toList!873 lt!71442) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (= (and d!42729 c!25655) b!136954))

(assert (= (and d!42729 (not c!25655)) b!136955))

(assert (= (and d!42729 (not res!65669)) b!136956))

(declare-fun m!163485 () Bool)

(assert (=> d!42729 m!163485))

(declare-fun m!163487 () Bool)

(assert (=> b!136954 m!163487))

(assert (=> b!136954 m!163101))

(assert (=> b!136954 m!163101))

(declare-fun m!163489 () Bool)

(assert (=> b!136954 m!163489))

(assert (=> b!136956 m!163101))

(assert (=> b!136956 m!163101))

(assert (=> b!136956 m!163489))

(assert (=> d!42631 d!42729))

(declare-fun c!25656 () Bool)

(declare-fun d!42731 () Bool)

(assert (=> d!42731 (= c!25656 (and ((_ is Cons!1737) lt!71439) (= (_1!1321 (h!2343 lt!71439)) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89179 () Option!178)

(assert (=> d!42731 (= (getValueByKey!172 lt!71439 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) e!89179)))

(declare-fun e!89180 () Option!178)

(declare-fun b!136959 () Bool)

(assert (=> b!136959 (= e!89180 (getValueByKey!172 (t!6241 lt!71439) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!136957 () Bool)

(assert (=> b!136957 (= e!89179 (Some!177 (_2!1321 (h!2343 lt!71439))))))

(declare-fun b!136960 () Bool)

(assert (=> b!136960 (= e!89180 None!176)))

(declare-fun b!136958 () Bool)

(assert (=> b!136958 (= e!89179 e!89180)))

(declare-fun c!25657 () Bool)

(assert (=> b!136958 (= c!25657 (and ((_ is Cons!1737) lt!71439) (not (= (_1!1321 (h!2343 lt!71439)) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42731 c!25656) b!136957))

(assert (= (and d!42731 (not c!25656)) b!136958))

(assert (= (and b!136958 c!25657) b!136959))

(assert (= (and b!136958 (not c!25657)) b!136960))

(declare-fun m!163491 () Bool)

(assert (=> b!136959 m!163491))

(assert (=> d!42631 d!42731))

(declare-fun d!42733 () Bool)

(assert (=> d!42733 (= (getValueByKey!172 lt!71439 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun lt!71648 () Unit!4291)

(assert (=> d!42733 (= lt!71648 (choose!848 lt!71439 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun e!89181 () Bool)

(assert (=> d!42733 e!89181))

(declare-fun res!65670 () Bool)

(assert (=> d!42733 (=> (not res!65670) (not e!89181))))

(assert (=> d!42733 (= res!65670 (isStrictlySorted!318 lt!71439))))

(assert (=> d!42733 (= (lemmaContainsTupThenGetReturnValue!89 lt!71439 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71648)))

(declare-fun b!136961 () Bool)

(declare-fun res!65671 () Bool)

(assert (=> b!136961 (=> (not res!65671) (not e!89181))))

(assert (=> b!136961 (= res!65671 (containsKey!176 lt!71439 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!136962 () Bool)

(assert (=> b!136962 (= e!89181 (contains!904 lt!71439 (tuple2!2623 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (= (and d!42733 res!65670) b!136961))

(assert (= (and b!136961 res!65671) b!136962))

(assert (=> d!42733 m!163095))

(declare-fun m!163493 () Bool)

(assert (=> d!42733 m!163493))

(declare-fun m!163495 () Bool)

(assert (=> d!42733 m!163495))

(declare-fun m!163497 () Bool)

(assert (=> b!136961 m!163497))

(declare-fun m!163499 () Bool)

(assert (=> b!136962 m!163499))

(assert (=> d!42631 d!42733))

(declare-fun b!136963 () Bool)

(declare-fun e!89185 () List!1741)

(declare-fun call!15099 () List!1741)

(assert (=> b!136963 (= e!89185 call!15099)))

(declare-fun e!89183 () Bool)

(declare-fun lt!71649 () List!1741)

(declare-fun b!136964 () Bool)

(assert (=> b!136964 (= e!89183 (contains!904 lt!71649 (tuple2!2623 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!136965 () Bool)

(declare-fun e!89182 () List!1741)

(declare-fun call!15100 () List!1741)

(assert (=> b!136965 (= e!89182 call!15100)))

(declare-fun b!136966 () Bool)

(declare-fun e!89184 () List!1741)

(assert (=> b!136966 (= e!89184 e!89185)))

(declare-fun c!25658 () Bool)

(assert (=> b!136966 (= c!25658 (and ((_ is Cons!1737) (toList!873 lt!71166)) (= (_1!1321 (h!2343 (toList!873 lt!71166))) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun bm!15095 () Bool)

(declare-fun c!25661 () Bool)

(declare-fun e!89186 () List!1741)

(declare-fun call!15098 () List!1741)

(assert (=> bm!15095 (= call!15098 ($colon$colon!92 e!89186 (ite c!25661 (h!2343 (toList!873 lt!71166)) (tuple2!2623 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(declare-fun c!25660 () Bool)

(assert (=> bm!15095 (= c!25660 c!25661)))

(declare-fun b!136967 () Bool)

(assert (=> b!136967 (= e!89182 call!15100)))

(declare-fun bm!15096 () Bool)

(assert (=> bm!15096 (= call!15100 call!15099)))

(declare-fun d!42735 () Bool)

(assert (=> d!42735 e!89183))

(declare-fun res!65673 () Bool)

(assert (=> d!42735 (=> (not res!65673) (not e!89183))))

(assert (=> d!42735 (= res!65673 (isStrictlySorted!318 lt!71649))))

(assert (=> d!42735 (= lt!71649 e!89184)))

(assert (=> d!42735 (= c!25661 (and ((_ is Cons!1737) (toList!873 lt!71166)) (bvslt (_1!1321 (h!2343 (toList!873 lt!71166))) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> d!42735 (isStrictlySorted!318 (toList!873 lt!71166))))

(assert (=> d!42735 (= (insertStrictlySorted!91 (toList!873 lt!71166) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71649)))

(declare-fun b!136968 () Bool)

(declare-fun c!25659 () Bool)

(assert (=> b!136968 (= e!89186 (ite c!25658 (t!6241 (toList!873 lt!71166)) (ite c!25659 (Cons!1737 (h!2343 (toList!873 lt!71166)) (t!6241 (toList!873 lt!71166))) Nil!1738)))))

(declare-fun b!136969 () Bool)

(declare-fun res!65672 () Bool)

(assert (=> b!136969 (=> (not res!65672) (not e!89183))))

(assert (=> b!136969 (= res!65672 (containsKey!176 lt!71649 (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!136970 () Bool)

(assert (=> b!136970 (= c!25659 (and ((_ is Cons!1737) (toList!873 lt!71166)) (bvsgt (_1!1321 (h!2343 (toList!873 lt!71166))) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> b!136970 (= e!89185 e!89182)))

(declare-fun bm!15097 () Bool)

(assert (=> bm!15097 (= call!15099 call!15098)))

(declare-fun b!136971 () Bool)

(assert (=> b!136971 (= e!89184 call!15098)))

(declare-fun b!136972 () Bool)

(assert (=> b!136972 (= e!89186 (insertStrictlySorted!91 (t!6241 (toList!873 lt!71166)) (_1!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (= (and d!42735 c!25661) b!136971))

(assert (= (and d!42735 (not c!25661)) b!136966))

(assert (= (and b!136966 c!25658) b!136963))

(assert (= (and b!136966 (not c!25658)) b!136970))

(assert (= (and b!136970 c!25659) b!136965))

(assert (= (and b!136970 (not c!25659)) b!136967))

(assert (= (or b!136965 b!136967) bm!15096))

(assert (= (or b!136963 bm!15096) bm!15097))

(assert (= (or b!136971 bm!15097) bm!15095))

(assert (= (and bm!15095 c!25660) b!136972))

(assert (= (and bm!15095 (not c!25660)) b!136968))

(assert (= (and d!42735 res!65673) b!136969))

(assert (= (and b!136969 res!65672) b!136964))

(declare-fun m!163501 () Bool)

(assert (=> b!136972 m!163501))

(declare-fun m!163503 () Bool)

(assert (=> b!136969 m!163503))

(declare-fun m!163505 () Bool)

(assert (=> d!42735 m!163505))

(declare-fun m!163507 () Bool)

(assert (=> d!42735 m!163507))

(declare-fun m!163509 () Bool)

(assert (=> b!136964 m!163509))

(declare-fun m!163511 () Bool)

(assert (=> bm!15095 m!163511))

(assert (=> d!42631 d!42735))

(assert (=> d!42637 d!42627))

(declare-fun d!42737 () Bool)

(declare-fun e!89188 () Bool)

(assert (=> d!42737 e!89188))

(declare-fun res!65674 () Bool)

(assert (=> d!42737 (=> res!65674 e!89188)))

(declare-fun lt!71653 () Bool)

(assert (=> d!42737 (= res!65674 (not lt!71653))))

(declare-fun lt!71652 () Bool)

(assert (=> d!42737 (= lt!71653 lt!71652)))

(declare-fun lt!71650 () Unit!4291)

(declare-fun e!89187 () Unit!4291)

(assert (=> d!42737 (= lt!71650 e!89187)))

(declare-fun c!25662 () Bool)

(assert (=> d!42737 (= c!25662 lt!71652)))

(assert (=> d!42737 (= lt!71652 (containsKey!176 (toList!873 lt!71158) lt!71154))))

(assert (=> d!42737 (= (contains!901 lt!71158 lt!71154) lt!71653)))

(declare-fun b!136973 () Bool)

(declare-fun lt!71651 () Unit!4291)

(assert (=> b!136973 (= e!89187 lt!71651)))

(assert (=> b!136973 (= lt!71651 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71158) lt!71154))))

(assert (=> b!136973 (isDefined!126 (getValueByKey!172 (toList!873 lt!71158) lt!71154))))

(declare-fun b!136974 () Bool)

(declare-fun Unit!4317 () Unit!4291)

(assert (=> b!136974 (= e!89187 Unit!4317)))

(declare-fun b!136975 () Bool)

(assert (=> b!136975 (= e!89188 (isDefined!126 (getValueByKey!172 (toList!873 lt!71158) lt!71154)))))

(assert (= (and d!42737 c!25662) b!136973))

(assert (= (and d!42737 (not c!25662)) b!136974))

(assert (= (and d!42737 (not res!65674)) b!136975))

(declare-fun m!163513 () Bool)

(assert (=> d!42737 m!163513))

(declare-fun m!163515 () Bool)

(assert (=> b!136973 m!163515))

(assert (=> b!136973 m!163117))

(assert (=> b!136973 m!163117))

(declare-fun m!163517 () Bool)

(assert (=> b!136973 m!163517))

(assert (=> b!136975 m!163117))

(assert (=> b!136975 m!163117))

(assert (=> b!136975 m!163517))

(assert (=> d!42637 d!42737))

(assert (=> d!42637 d!42639))

(declare-fun d!42739 () Bool)

(assert (=> d!42739 (= (apply!117 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71154) (apply!117 lt!71158 lt!71154))))

(assert (=> d!42739 true))

(declare-fun _$34!988 () Unit!4291)

(assert (=> d!42739 (= (choose!844 lt!71158 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71154) _$34!988)))

(declare-fun bs!5740 () Bool)

(assert (= bs!5740 d!42739))

(assert (=> bs!5740 m!162611))

(assert (=> bs!5740 m!162611))

(assert (=> bs!5740 m!162613))

(assert (=> bs!5740 m!162623))

(assert (=> d!42637 d!42739))

(assert (=> d!42637 d!42655))

(assert (=> b!136708 d!42663))

(declare-fun d!42741 () Bool)

(assert (=> d!42741 (= (get!1500 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!3219 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!136590 d!42741))

(declare-fun b!136977 () Bool)

(declare-fun e!89190 () (_ BitVec 32))

(declare-fun call!15101 () (_ BitVec 32))

(assert (=> b!136977 (= e!89190 (bvadd #b00000000000000000000000000000001 call!15101))))

(declare-fun bm!15098 () Bool)

(assert (=> bm!15098 (= call!15101 (arrayCountValidKeys!0 (_keys!4642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!136978 () Bool)

(declare-fun e!89189 () (_ BitVec 32))

(assert (=> b!136978 (= e!89189 #b00000000000000000000000000000000)))

(declare-fun d!42743 () Bool)

(declare-fun lt!71654 () (_ BitVec 32))

(assert (=> d!42743 (and (bvsge lt!71654 #b00000000000000000000000000000000) (bvsle lt!71654 (bvsub (size!2542 (_keys!4642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!42743 (= lt!71654 e!89189)))

(declare-fun c!25664 () Bool)

(assert (=> d!42743 (= c!25664 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42743 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 (_keys!4642 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2542 (_keys!4642 newMap!16)) (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42743 (= (arrayCountValidKeys!0 (_keys!4642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 (_keys!4642 newMap!16))) lt!71654)))

(declare-fun b!136979 () Bool)

(assert (=> b!136979 (= e!89189 e!89190)))

(declare-fun c!25663 () Bool)

(assert (=> b!136979 (= c!25663 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!136980 () Bool)

(assert (=> b!136980 (= e!89190 call!15101)))

(assert (= (and d!42743 c!25664) b!136978))

(assert (= (and d!42743 (not c!25664)) b!136979))

(assert (= (and b!136979 c!25663) b!136977))

(assert (= (and b!136979 (not c!25663)) b!136980))

(assert (= (or b!136977 b!136980) bm!15098))

(declare-fun m!163519 () Bool)

(assert (=> bm!15098 m!163519))

(declare-fun m!163521 () Bool)

(assert (=> b!136979 m!163521))

(assert (=> b!136979 m!163521))

(declare-fun m!163523 () Bool)

(assert (=> b!136979 m!163523))

(assert (=> bm!15028 d!42743))

(declare-fun d!42745 () Bool)

(declare-fun e!89192 () Bool)

(assert (=> d!42745 e!89192))

(declare-fun res!65675 () Bool)

(assert (=> d!42745 (=> res!65675 e!89192)))

(declare-fun lt!71658 () Bool)

(assert (=> d!42745 (= res!65675 (not lt!71658))))

(declare-fun lt!71657 () Bool)

(assert (=> d!42745 (= lt!71658 lt!71657)))

(declare-fun lt!71655 () Unit!4291)

(declare-fun e!89191 () Unit!4291)

(assert (=> d!42745 (= lt!71655 e!89191)))

(declare-fun c!25665 () Bool)

(assert (=> d!42745 (= c!25665 lt!71657)))

(assert (=> d!42745 (= lt!71657 (containsKey!176 (toList!873 lt!71434) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42745 (= (contains!901 lt!71434 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71658)))

(declare-fun b!136981 () Bool)

(declare-fun lt!71656 () Unit!4291)

(assert (=> b!136981 (= e!89191 lt!71656)))

(assert (=> b!136981 (= lt!71656 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71434) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> b!136981 (isDefined!126 (getValueByKey!172 (toList!873 lt!71434) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!136982 () Bool)

(declare-fun Unit!4318 () Unit!4291)

(assert (=> b!136982 (= e!89191 Unit!4318)))

(declare-fun b!136983 () Bool)

(assert (=> b!136983 (= e!89192 (isDefined!126 (getValueByKey!172 (toList!873 lt!71434) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (= (and d!42745 c!25665) b!136981))

(assert (= (and d!42745 (not c!25665)) b!136982))

(assert (= (and d!42745 (not res!65675)) b!136983))

(declare-fun m!163525 () Bool)

(assert (=> d!42745 m!163525))

(declare-fun m!163527 () Bool)

(assert (=> b!136981 m!163527))

(assert (=> b!136981 m!163077))

(assert (=> b!136981 m!163077))

(declare-fun m!163529 () Bool)

(assert (=> b!136981 m!163529))

(assert (=> b!136983 m!163077))

(assert (=> b!136983 m!163077))

(assert (=> b!136983 m!163529))

(assert (=> d!42627 d!42745))

(declare-fun c!25666 () Bool)

(declare-fun d!42747 () Bool)

(assert (=> d!42747 (= c!25666 (and ((_ is Cons!1737) lt!71431) (= (_1!1321 (h!2343 lt!71431)) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89193 () Option!178)

(assert (=> d!42747 (= (getValueByKey!172 lt!71431 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) e!89193)))

(declare-fun e!89194 () Option!178)

(declare-fun b!136986 () Bool)

(assert (=> b!136986 (= e!89194 (getValueByKey!172 (t!6241 lt!71431) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!136984 () Bool)

(assert (=> b!136984 (= e!89193 (Some!177 (_2!1321 (h!2343 lt!71431))))))

(declare-fun b!136987 () Bool)

(assert (=> b!136987 (= e!89194 None!176)))

(declare-fun b!136985 () Bool)

(assert (=> b!136985 (= e!89193 e!89194)))

(declare-fun c!25667 () Bool)

(assert (=> b!136985 (= c!25667 (and ((_ is Cons!1737) lt!71431) (not (= (_1!1321 (h!2343 lt!71431)) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42747 c!25666) b!136984))

(assert (= (and d!42747 (not c!25666)) b!136985))

(assert (= (and b!136985 c!25667) b!136986))

(assert (= (and b!136985 (not c!25667)) b!136987))

(declare-fun m!163531 () Bool)

(assert (=> b!136986 m!163531))

(assert (=> d!42627 d!42747))

(declare-fun d!42749 () Bool)

(assert (=> d!42749 (= (getValueByKey!172 lt!71431 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun lt!71659 () Unit!4291)

(assert (=> d!42749 (= lt!71659 (choose!848 lt!71431 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun e!89195 () Bool)

(assert (=> d!42749 e!89195))

(declare-fun res!65676 () Bool)

(assert (=> d!42749 (=> (not res!65676) (not e!89195))))

(assert (=> d!42749 (= res!65676 (isStrictlySorted!318 lt!71431))))

(assert (=> d!42749 (= (lemmaContainsTupThenGetReturnValue!89 lt!71431 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71659)))

(declare-fun b!136988 () Bool)

(declare-fun res!65677 () Bool)

(assert (=> b!136988 (=> (not res!65677) (not e!89195))))

(assert (=> b!136988 (= res!65677 (containsKey!176 lt!71431 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!136989 () Bool)

(assert (=> b!136989 (= e!89195 (contains!904 lt!71431 (tuple2!2623 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (= (and d!42749 res!65676) b!136988))

(assert (= (and b!136988 res!65677) b!136989))

(assert (=> d!42749 m!163071))

(declare-fun m!163533 () Bool)

(assert (=> d!42749 m!163533))

(declare-fun m!163535 () Bool)

(assert (=> d!42749 m!163535))

(declare-fun m!163537 () Bool)

(assert (=> b!136988 m!163537))

(declare-fun m!163539 () Bool)

(assert (=> b!136989 m!163539))

(assert (=> d!42627 d!42749))

(declare-fun b!136990 () Bool)

(declare-fun e!89199 () List!1741)

(declare-fun call!15103 () List!1741)

(assert (=> b!136990 (= e!89199 call!15103)))

(declare-fun b!136991 () Bool)

(declare-fun lt!71660 () List!1741)

(declare-fun e!89197 () Bool)

(assert (=> b!136991 (= e!89197 (contains!904 lt!71660 (tuple2!2623 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!136992 () Bool)

(declare-fun e!89196 () List!1741)

(declare-fun call!15104 () List!1741)

(assert (=> b!136992 (= e!89196 call!15104)))

(declare-fun b!136993 () Bool)

(declare-fun e!89198 () List!1741)

(assert (=> b!136993 (= e!89198 e!89199)))

(declare-fun c!25668 () Bool)

(assert (=> b!136993 (= c!25668 (and ((_ is Cons!1737) (toList!873 lt!71158)) (= (_1!1321 (h!2343 (toList!873 lt!71158))) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun bm!15099 () Bool)

(declare-fun call!15102 () List!1741)

(declare-fun e!89200 () List!1741)

(declare-fun c!25671 () Bool)

(assert (=> bm!15099 (= call!15102 ($colon$colon!92 e!89200 (ite c!25671 (h!2343 (toList!873 lt!71158)) (tuple2!2623 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(declare-fun c!25670 () Bool)

(assert (=> bm!15099 (= c!25670 c!25671)))

(declare-fun b!136994 () Bool)

(assert (=> b!136994 (= e!89196 call!15104)))

(declare-fun bm!15100 () Bool)

(assert (=> bm!15100 (= call!15104 call!15103)))

(declare-fun d!42751 () Bool)

(assert (=> d!42751 e!89197))

(declare-fun res!65679 () Bool)

(assert (=> d!42751 (=> (not res!65679) (not e!89197))))

(assert (=> d!42751 (= res!65679 (isStrictlySorted!318 lt!71660))))

(assert (=> d!42751 (= lt!71660 e!89198)))

(assert (=> d!42751 (= c!25671 (and ((_ is Cons!1737) (toList!873 lt!71158)) (bvslt (_1!1321 (h!2343 (toList!873 lt!71158))) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> d!42751 (isStrictlySorted!318 (toList!873 lt!71158))))

(assert (=> d!42751 (= (insertStrictlySorted!91 (toList!873 lt!71158) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71660)))

(declare-fun b!136995 () Bool)

(declare-fun c!25669 () Bool)

(assert (=> b!136995 (= e!89200 (ite c!25668 (t!6241 (toList!873 lt!71158)) (ite c!25669 (Cons!1737 (h!2343 (toList!873 lt!71158)) (t!6241 (toList!873 lt!71158))) Nil!1738)))))

(declare-fun b!136996 () Bool)

(declare-fun res!65678 () Bool)

(assert (=> b!136996 (=> (not res!65678) (not e!89197))))

(assert (=> b!136996 (= res!65678 (containsKey!176 lt!71660 (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!136997 () Bool)

(assert (=> b!136997 (= c!25669 (and ((_ is Cons!1737) (toList!873 lt!71158)) (bvsgt (_1!1321 (h!2343 (toList!873 lt!71158))) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> b!136997 (= e!89199 e!89196)))

(declare-fun bm!15101 () Bool)

(assert (=> bm!15101 (= call!15103 call!15102)))

(declare-fun b!136998 () Bool)

(assert (=> b!136998 (= e!89198 call!15102)))

(declare-fun b!136999 () Bool)

(assert (=> b!136999 (= e!89200 (insertStrictlySorted!91 (t!6241 (toList!873 lt!71158)) (_1!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (= (and d!42751 c!25671) b!136998))

(assert (= (and d!42751 (not c!25671)) b!136993))

(assert (= (and b!136993 c!25668) b!136990))

(assert (= (and b!136993 (not c!25668)) b!136997))

(assert (= (and b!136997 c!25669) b!136992))

(assert (= (and b!136997 (not c!25669)) b!136994))

(assert (= (or b!136992 b!136994) bm!15100))

(assert (= (or b!136990 bm!15100) bm!15101))

(assert (= (or b!136998 bm!15101) bm!15099))

(assert (= (and bm!15099 c!25670) b!136999))

(assert (= (and bm!15099 (not c!25670)) b!136995))

(assert (= (and d!42751 res!65679) b!136996))

(assert (= (and b!136996 res!65678) b!136991))

(declare-fun m!163541 () Bool)

(assert (=> b!136999 m!163541))

(declare-fun m!163543 () Bool)

(assert (=> b!136996 m!163543))

(declare-fun m!163545 () Bool)

(assert (=> d!42751 m!163545))

(declare-fun m!163547 () Bool)

(assert (=> d!42751 m!163547))

(declare-fun m!163549 () Bool)

(assert (=> b!136991 m!163549))

(declare-fun m!163551 () Bool)

(assert (=> bm!15099 m!163551))

(assert (=> d!42627 d!42751))

(declare-fun d!42753 () Bool)

(declare-fun c!25672 () Bool)

(assert (=> d!42753 (= c!25672 (and ((_ is Cons!1737) (toList!873 lt!71427)) (= (_1!1321 (h!2343 (toList!873 lt!71427))) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89201 () Option!178)

(assert (=> d!42753 (= (getValueByKey!172 (toList!873 lt!71427) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) e!89201)))

(declare-fun b!137002 () Bool)

(declare-fun e!89202 () Option!178)

(assert (=> b!137002 (= e!89202 (getValueByKey!172 (t!6241 (toList!873 lt!71427)) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137000 () Bool)

(assert (=> b!137000 (= e!89201 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71427)))))))

(declare-fun b!137003 () Bool)

(assert (=> b!137003 (= e!89202 None!176)))

(declare-fun b!137001 () Bool)

(assert (=> b!137001 (= e!89201 e!89202)))

(declare-fun c!25673 () Bool)

(assert (=> b!137001 (= c!25673 (and ((_ is Cons!1737) (toList!873 lt!71427)) (not (= (_1!1321 (h!2343 (toList!873 lt!71427))) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42753 c!25672) b!137000))

(assert (= (and d!42753 (not c!25672)) b!137001))

(assert (= (and b!137001 c!25673) b!137002))

(assert (= (and b!137001 (not c!25673)) b!137003))

(declare-fun m!163553 () Bool)

(assert (=> b!137002 m!163553))

(assert (=> b!136730 d!42753))

(declare-fun d!42755 () Bool)

(declare-fun e!89204 () Bool)

(assert (=> d!42755 e!89204))

(declare-fun res!65680 () Bool)

(assert (=> d!42755 (=> res!65680 e!89204)))

(declare-fun lt!71664 () Bool)

(assert (=> d!42755 (= res!65680 (not lt!71664))))

(declare-fun lt!71663 () Bool)

(assert (=> d!42755 (= lt!71664 lt!71663)))

(declare-fun lt!71661 () Unit!4291)

(declare-fun e!89203 () Unit!4291)

(assert (=> d!42755 (= lt!71661 e!89203)))

(declare-fun c!25674 () Bool)

(assert (=> d!42755 (= c!25674 lt!71663)))

(assert (=> d!42755 (= lt!71663 (containsKey!176 (toList!873 lt!71469) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!42755 (= (contains!901 lt!71469 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) lt!71664)))

(declare-fun b!137004 () Bool)

(declare-fun lt!71662 () Unit!4291)

(assert (=> b!137004 (= e!89203 lt!71662)))

(assert (=> b!137004 (= lt!71662 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71469) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137004 (isDefined!126 (getValueByKey!172 (toList!873 lt!71469) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137005 () Bool)

(declare-fun Unit!4319 () Unit!4291)

(assert (=> b!137005 (= e!89203 Unit!4319)))

(declare-fun b!137006 () Bool)

(assert (=> b!137006 (= e!89204 (isDefined!126 (getValueByKey!172 (toList!873 lt!71469) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!42755 c!25674) b!137004))

(assert (= (and d!42755 (not c!25674)) b!137005))

(assert (= (and d!42755 (not res!65680)) b!137006))

(assert (=> d!42755 m!162731))

(declare-fun m!163555 () Bool)

(assert (=> d!42755 m!163555))

(assert (=> b!137004 m!162731))

(declare-fun m!163557 () Bool)

(assert (=> b!137004 m!163557))

(assert (=> b!137004 m!162731))

(declare-fun m!163559 () Bool)

(assert (=> b!137004 m!163559))

(assert (=> b!137004 m!163559))

(declare-fun m!163561 () Bool)

(assert (=> b!137004 m!163561))

(assert (=> b!137006 m!162731))

(assert (=> b!137006 m!163559))

(assert (=> b!137006 m!163559))

(assert (=> b!137006 m!163561))

(assert (=> b!136756 d!42755))

(declare-fun d!42757 () Bool)

(declare-fun e!89205 () Bool)

(assert (=> d!42757 e!89205))

(declare-fun res!65682 () Bool)

(assert (=> d!42757 (=> (not res!65682) (not e!89205))))

(declare-fun lt!71668 () ListLongMap!1715)

(assert (=> d!42757 (= res!65682 (contains!901 lt!71668 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(declare-fun lt!71665 () List!1741)

(assert (=> d!42757 (= lt!71668 (ListLongMap!1716 lt!71665))))

(declare-fun lt!71666 () Unit!4291)

(declare-fun lt!71667 () Unit!4291)

(assert (=> d!42757 (= lt!71666 lt!71667)))

(assert (=> d!42757 (= (getValueByKey!172 lt!71665 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (=> d!42757 (= lt!71667 (lemmaContainsTupThenGetReturnValue!89 lt!71665 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (=> d!42757 (= lt!71665 (insertStrictlySorted!91 (toList!873 call!15039) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (=> d!42757 (= (+!171 call!15039 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))) lt!71668)))

(declare-fun b!137007 () Bool)

(declare-fun res!65681 () Bool)

(assert (=> b!137007 (=> (not res!65681) (not e!89205))))

(assert (=> b!137007 (= res!65681 (= (getValueByKey!172 (toList!873 lt!71668) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(declare-fun b!137008 () Bool)

(assert (=> b!137008 (= e!89205 (contains!904 (toList!873 lt!71668) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))

(assert (= (and d!42757 res!65682) b!137007))

(assert (= (and b!137007 res!65681) b!137008))

(declare-fun m!163563 () Bool)

(assert (=> d!42757 m!163563))

(declare-fun m!163565 () Bool)

(assert (=> d!42757 m!163565))

(declare-fun m!163567 () Bool)

(assert (=> d!42757 m!163567))

(declare-fun m!163569 () Bool)

(assert (=> d!42757 m!163569))

(declare-fun m!163571 () Bool)

(assert (=> b!137007 m!163571))

(declare-fun m!163573 () Bool)

(assert (=> b!137008 m!163573))

(assert (=> b!136608 d!42757))

(declare-fun b!137009 () Bool)

(declare-fun e!89208 () Bool)

(declare-fun call!15105 () Bool)

(assert (=> b!137009 (= e!89208 call!15105)))

(declare-fun bm!15102 () Bool)

(assert (=> bm!15102 (= call!15105 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4642 (_2!1322 lt!71264)) (mask!7203 (_2!1322 lt!71264))))))

(declare-fun d!42759 () Bool)

(declare-fun res!65683 () Bool)

(declare-fun e!89207 () Bool)

(assert (=> d!42759 (=> res!65683 e!89207)))

(assert (=> d!42759 (= res!65683 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))))))

(assert (=> d!42759 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4642 (_2!1322 lt!71264)) (mask!7203 (_2!1322 lt!71264))) e!89207)))

(declare-fun b!137010 () Bool)

(declare-fun e!89206 () Bool)

(assert (=> b!137010 (= e!89207 e!89206)))

(declare-fun c!25675 () Bool)

(assert (=> b!137010 (= c!25675 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000)))))

(declare-fun b!137011 () Bool)

(assert (=> b!137011 (= e!89206 call!15105)))

(declare-fun b!137012 () Bool)

(assert (=> b!137012 (= e!89206 e!89208)))

(declare-fun lt!71669 () (_ BitVec 64))

(assert (=> b!137012 (= lt!71669 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000))))

(declare-fun lt!71670 () Unit!4291)

(assert (=> b!137012 (= lt!71670 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4642 (_2!1322 lt!71264)) lt!71669 #b00000000000000000000000000000000))))

(assert (=> b!137012 (arrayContainsKey!0 (_keys!4642 (_2!1322 lt!71264)) lt!71669 #b00000000000000000000000000000000)))

(declare-fun lt!71671 () Unit!4291)

(assert (=> b!137012 (= lt!71671 lt!71670)))

(declare-fun res!65684 () Bool)

(assert (=> b!137012 (= res!65684 (= (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000) (_keys!4642 (_2!1322 lt!71264)) (mask!7203 (_2!1322 lt!71264))) (Found!286 #b00000000000000000000000000000000)))))

(assert (=> b!137012 (=> (not res!65684) (not e!89208))))

(assert (= (and d!42759 (not res!65683)) b!137010))

(assert (= (and b!137010 c!25675) b!137012))

(assert (= (and b!137010 (not c!25675)) b!137011))

(assert (= (and b!137012 res!65684) b!137009))

(assert (= (or b!137009 b!137011) bm!15102))

(declare-fun m!163575 () Bool)

(assert (=> bm!15102 m!163575))

(declare-fun m!163577 () Bool)

(assert (=> b!137010 m!163577))

(assert (=> b!137010 m!163577))

(declare-fun m!163579 () Bool)

(assert (=> b!137010 m!163579))

(assert (=> b!137012 m!163577))

(declare-fun m!163581 () Bool)

(assert (=> b!137012 m!163581))

(declare-fun m!163583 () Bool)

(assert (=> b!137012 m!163583))

(assert (=> b!137012 m!163577))

(declare-fun m!163585 () Bool)

(assert (=> b!137012 m!163585))

(assert (=> b!136522 d!42759))

(declare-fun d!42761 () Bool)

(assert (=> d!42761 (= (apply!117 lt!71469 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1502 (getValueByKey!172 (toList!873 lt!71469) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!5741 () Bool)

(assert (= bs!5741 d!42761))

(assert (=> bs!5741 m!162731))

(assert (=> bs!5741 m!163559))

(assert (=> bs!5741 m!163559))

(declare-fun m!163587 () Bool)

(assert (=> bs!5741 m!163587))

(assert (=> b!136772 d!42761))

(declare-fun d!42763 () Bool)

(declare-fun c!25676 () Bool)

(assert (=> d!42763 (= c!25676 ((_ is ValueCellFull!1101) (select (arr!2273 (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!89209 () V!3499)

(assert (=> d!42763 (= (get!1498 (select (arr!2273 (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!89209)))

(declare-fun b!137013 () Bool)

(assert (=> b!137013 (= e!89209 (get!1500 (select (arr!2273 (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137014 () Bool)

(assert (=> b!137014 (= e!89209 (get!1501 (select (arr!2273 (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42763 c!25676) b!137013))

(assert (= (and d!42763 (not c!25676)) b!137014))

(assert (=> b!137013 m!163167))

(assert (=> b!137013 m!162815))

(declare-fun m!163589 () Bool)

(assert (=> b!137013 m!163589))

(assert (=> b!137014 m!163167))

(assert (=> b!137014 m!162815))

(declare-fun m!163591 () Bool)

(assert (=> b!137014 m!163591))

(assert (=> b!136772 d!42763))

(declare-fun d!42765 () Bool)

(assert (=> d!42765 (= (apply!117 lt!71323 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1502 (getValueByKey!172 (toList!873 lt!71323) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!5742 () Bool)

(assert (= bs!5742 d!42765))

(assert (=> bs!5742 m!162731))

(declare-fun m!163593 () Bool)

(assert (=> bs!5742 m!163593))

(assert (=> bs!5742 m!163593))

(declare-fun m!163595 () Bool)

(assert (=> bs!5742 m!163595))

(assert (=> b!136588 d!42765))

(assert (=> b!136588 d!42715))

(declare-fun d!42767 () Bool)

(assert (=> d!42767 (= (get!1502 (getValueByKey!172 (toList!873 lt!71164) lt!71153)) (v!3224 (getValueByKey!172 (toList!873 lt!71164) lt!71153)))))

(assert (=> d!42643 d!42767))

(declare-fun d!42769 () Bool)

(declare-fun c!25677 () Bool)

(assert (=> d!42769 (= c!25677 (and ((_ is Cons!1737) (toList!873 lt!71164)) (= (_1!1321 (h!2343 (toList!873 lt!71164))) lt!71153)))))

(declare-fun e!89210 () Option!178)

(assert (=> d!42769 (= (getValueByKey!172 (toList!873 lt!71164) lt!71153) e!89210)))

(declare-fun b!137017 () Bool)

(declare-fun e!89211 () Option!178)

(assert (=> b!137017 (= e!89211 (getValueByKey!172 (t!6241 (toList!873 lt!71164)) lt!71153))))

(declare-fun b!137015 () Bool)

(assert (=> b!137015 (= e!89210 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71164)))))))

(declare-fun b!137018 () Bool)

(assert (=> b!137018 (= e!89211 None!176)))

(declare-fun b!137016 () Bool)

(assert (=> b!137016 (= e!89210 e!89211)))

(declare-fun c!25678 () Bool)

(assert (=> b!137016 (= c!25678 (and ((_ is Cons!1737) (toList!873 lt!71164)) (not (= (_1!1321 (h!2343 (toList!873 lt!71164))) lt!71153))))))

(assert (= (and d!42769 c!25677) b!137015))

(assert (= (and d!42769 (not c!25677)) b!137016))

(assert (= (and b!137016 c!25678) b!137017))

(assert (= (and b!137016 (not c!25678)) b!137018))

(declare-fun m!163597 () Bool)

(assert (=> b!137017 m!163597))

(assert (=> d!42643 d!42769))

(declare-fun d!42771 () Bool)

(declare-fun e!89213 () Bool)

(assert (=> d!42771 e!89213))

(declare-fun res!65685 () Bool)

(assert (=> d!42771 (=> res!65685 e!89213)))

(declare-fun lt!71675 () Bool)

(assert (=> d!42771 (= res!65685 (not lt!71675))))

(declare-fun lt!71674 () Bool)

(assert (=> d!42771 (= lt!71675 lt!71674)))

(declare-fun lt!71672 () Unit!4291)

(declare-fun e!89212 () Unit!4291)

(assert (=> d!42771 (= lt!71672 e!89212)))

(declare-fun c!25679 () Bool)

(assert (=> d!42771 (= c!25679 lt!71674)))

(assert (=> d!42771 (= lt!71674 (containsKey!176 (toList!873 lt!71323) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!42771 (= (contains!901 lt!71323 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) lt!71675)))

(declare-fun b!137019 () Bool)

(declare-fun lt!71673 () Unit!4291)

(assert (=> b!137019 (= e!89212 lt!71673)))

(assert (=> b!137019 (= lt!71673 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71323) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137019 (isDefined!126 (getValueByKey!172 (toList!873 lt!71323) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137020 () Bool)

(declare-fun Unit!4320 () Unit!4291)

(assert (=> b!137020 (= e!89212 Unit!4320)))

(declare-fun b!137021 () Bool)

(assert (=> b!137021 (= e!89213 (isDefined!126 (getValueByKey!172 (toList!873 lt!71323) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!42771 c!25679) b!137019))

(assert (= (and d!42771 (not c!25679)) b!137020))

(assert (= (and d!42771 (not res!65685)) b!137021))

(assert (=> d!42771 m!162731))

(declare-fun m!163599 () Bool)

(assert (=> d!42771 m!163599))

(assert (=> b!137019 m!162731))

(declare-fun m!163601 () Bool)

(assert (=> b!137019 m!163601))

(assert (=> b!137019 m!162731))

(assert (=> b!137019 m!163593))

(assert (=> b!137019 m!163593))

(declare-fun m!163603 () Bool)

(assert (=> b!137019 m!163603))

(assert (=> b!137021 m!162731))

(assert (=> b!137021 m!163593))

(assert (=> b!137021 m!163593))

(assert (=> b!137021 m!163603))

(assert (=> b!136572 d!42771))

(declare-fun d!42773 () Bool)

(assert (=> d!42773 (= (apply!117 lt!71394 lt!71383) (get!1502 (getValueByKey!172 (toList!873 lt!71394) lt!71383)))))

(declare-fun bs!5743 () Bool)

(assert (= bs!5743 d!42773))

(declare-fun m!163605 () Bool)

(assert (=> bs!5743 m!163605))

(assert (=> bs!5743 m!163605))

(declare-fun m!163607 () Bool)

(assert (=> bs!5743 m!163607))

(assert (=> b!136670 d!42773))

(declare-fun d!42775 () Bool)

(declare-fun e!89214 () Bool)

(assert (=> d!42775 e!89214))

(declare-fun res!65687 () Bool)

(assert (=> d!42775 (=> (not res!65687) (not e!89214))))

(declare-fun lt!71679 () ListLongMap!1715)

(assert (=> d!42775 (= res!65687 (contains!901 lt!71679 (_1!1321 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(declare-fun lt!71676 () List!1741)

(assert (=> d!42775 (= lt!71679 (ListLongMap!1716 lt!71676))))

(declare-fun lt!71677 () Unit!4291)

(declare-fun lt!71678 () Unit!4291)

(assert (=> d!42775 (= lt!71677 lt!71678)))

(assert (=> d!42775 (= (getValueByKey!172 lt!71676 (_1!1321 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(assert (=> d!42775 (= lt!71678 (lemmaContainsTupThenGetReturnValue!89 lt!71676 (_1!1321 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) (_2!1321 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(assert (=> d!42775 (= lt!71676 (insertStrictlySorted!91 (toList!873 lt!71399) (_1!1321 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) (_2!1321 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(assert (=> d!42775 (= (+!171 lt!71399 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) lt!71679)))

(declare-fun b!137022 () Bool)

(declare-fun res!65686 () Bool)

(assert (=> b!137022 (=> (not res!65686) (not e!89214))))

(assert (=> b!137022 (= res!65686 (= (getValueByKey!172 (toList!873 lt!71679) (_1!1321 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))))))

(declare-fun b!137023 () Bool)

(assert (=> b!137023 (= e!89214 (contains!904 (toList!873 lt!71679) (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))))

(assert (= (and d!42775 res!65687) b!137022))

(assert (= (and b!137022 res!65686) b!137023))

(declare-fun m!163609 () Bool)

(assert (=> d!42775 m!163609))

(declare-fun m!163611 () Bool)

(assert (=> d!42775 m!163611))

(declare-fun m!163613 () Bool)

(assert (=> d!42775 m!163613))

(declare-fun m!163615 () Bool)

(assert (=> d!42775 m!163615))

(declare-fun m!163617 () Bool)

(assert (=> b!137022 m!163617))

(declare-fun m!163619 () Bool)

(assert (=> b!137023 m!163619))

(assert (=> b!136670 d!42775))

(declare-fun d!42777 () Bool)

(assert (=> d!42777 (= (apply!117 lt!71388 lt!71384) (get!1502 (getValueByKey!172 (toList!873 lt!71388) lt!71384)))))

(declare-fun bs!5744 () Bool)

(assert (= bs!5744 d!42777))

(declare-fun m!163621 () Bool)

(assert (=> bs!5744 m!163621))

(assert (=> bs!5744 m!163621))

(declare-fun m!163623 () Bool)

(assert (=> bs!5744 m!163623))

(assert (=> b!136670 d!42777))

(declare-fun d!42779 () Bool)

(assert (=> d!42779 (= (apply!117 (+!171 lt!71399 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) lt!71400) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71399 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))) lt!71400)))))

(declare-fun bs!5745 () Bool)

(assert (= bs!5745 d!42779))

(declare-fun m!163625 () Bool)

(assert (=> bs!5745 m!163625))

(assert (=> bs!5745 m!163625))

(declare-fun m!163627 () Bool)

(assert (=> bs!5745 m!163627))

(assert (=> b!136670 d!42779))

(declare-fun d!42781 () Bool)

(declare-fun e!89215 () Bool)

(assert (=> d!42781 e!89215))

(declare-fun res!65689 () Bool)

(assert (=> d!42781 (=> (not res!65689) (not e!89215))))

(declare-fun lt!71683 () ListLongMap!1715)

(assert (=> d!42781 (= res!65689 (contains!901 lt!71683 (_1!1321 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16)))))))

(declare-fun lt!71680 () List!1741)

(assert (=> d!42781 (= lt!71683 (ListLongMap!1716 lt!71680))))

(declare-fun lt!71681 () Unit!4291)

(declare-fun lt!71682 () Unit!4291)

(assert (=> d!42781 (= lt!71681 lt!71682)))

(assert (=> d!42781 (= (getValueByKey!172 lt!71680 (_1!1321 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16)))))))

(assert (=> d!42781 (= lt!71682 (lemmaContainsTupThenGetReturnValue!89 lt!71680 (_1!1321 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16)))))))

(assert (=> d!42781 (= lt!71680 (insertStrictlySorted!91 (toList!873 lt!71394) (_1!1321 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16)))))))

(assert (=> d!42781 (= (+!171 lt!71394 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16))) lt!71683)))

(declare-fun b!137024 () Bool)

(declare-fun res!65688 () Bool)

(assert (=> b!137024 (=> (not res!65688) (not e!89215))))

(assert (=> b!137024 (= res!65688 (= (getValueByKey!172 (toList!873 lt!71683) (_1!1321 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16))))))))

(declare-fun b!137025 () Bool)

(assert (=> b!137025 (= e!89215 (contains!904 (toList!873 lt!71683) (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16))))))

(assert (= (and d!42781 res!65689) b!137024))

(assert (= (and b!137024 res!65688) b!137025))

(declare-fun m!163629 () Bool)

(assert (=> d!42781 m!163629))

(declare-fun m!163631 () Bool)

(assert (=> d!42781 m!163631))

(declare-fun m!163633 () Bool)

(assert (=> d!42781 m!163633))

(declare-fun m!163635 () Bool)

(assert (=> d!42781 m!163635))

(declare-fun m!163637 () Bool)

(assert (=> b!137024 m!163637))

(declare-fun m!163639 () Bool)

(assert (=> b!137025 m!163639))

(assert (=> b!136670 d!42781))

(declare-fun d!42783 () Bool)

(assert (=> d!42783 (= (apply!117 (+!171 lt!71399 (tuple2!2623 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) lt!71400) (apply!117 lt!71399 lt!71400))))

(declare-fun lt!71684 () Unit!4291)

(assert (=> d!42783 (= lt!71684 (choose!844 lt!71399 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) lt!71400))))

(declare-fun e!89216 () Bool)

(assert (=> d!42783 e!89216))

(declare-fun res!65690 () Bool)

(assert (=> d!42783 (=> (not res!65690) (not e!89216))))

(assert (=> d!42783 (= res!65690 (contains!901 lt!71399 lt!71400))))

(assert (=> d!42783 (= (addApplyDifferent!93 lt!71399 lt!71398 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) lt!71400) lt!71684)))

(declare-fun b!137026 () Bool)

(assert (=> b!137026 (= e!89216 (not (= lt!71400 lt!71398)))))

(assert (= (and d!42783 res!65690) b!137026))

(assert (=> d!42783 m!162983))

(assert (=> d!42783 m!162985))

(declare-fun m!163641 () Bool)

(assert (=> d!42783 m!163641))

(assert (=> d!42783 m!162983))

(declare-fun m!163643 () Bool)

(assert (=> d!42783 m!163643))

(assert (=> d!42783 m!163011))

(assert (=> b!136670 d!42783))

(declare-fun d!42785 () Bool)

(assert (=> d!42785 (= (apply!117 lt!71399 lt!71400) (get!1502 (getValueByKey!172 (toList!873 lt!71399) lt!71400)))))

(declare-fun bs!5746 () Bool)

(assert (= bs!5746 d!42785))

(declare-fun m!163645 () Bool)

(assert (=> bs!5746 m!163645))

(assert (=> bs!5746 m!163645))

(declare-fun m!163647 () Bool)

(assert (=> bs!5746 m!163647))

(assert (=> b!136670 d!42785))

(declare-fun d!42787 () Bool)

(assert (=> d!42787 (= (apply!117 (+!171 lt!71388 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) lt!71384) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71388 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))) lt!71384)))))

(declare-fun bs!5747 () Bool)

(assert (= bs!5747 d!42787))

(declare-fun m!163649 () Bool)

(assert (=> bs!5747 m!163649))

(assert (=> bs!5747 m!163649))

(declare-fun m!163651 () Bool)

(assert (=> bs!5747 m!163651))

(assert (=> b!136670 d!42787))

(declare-fun d!42789 () Bool)

(declare-fun e!89218 () Bool)

(assert (=> d!42789 e!89218))

(declare-fun res!65691 () Bool)

(assert (=> d!42789 (=> res!65691 e!89218)))

(declare-fun lt!71688 () Bool)

(assert (=> d!42789 (= res!65691 (not lt!71688))))

(declare-fun lt!71687 () Bool)

(assert (=> d!42789 (= lt!71688 lt!71687)))

(declare-fun lt!71685 () Unit!4291)

(declare-fun e!89217 () Unit!4291)

(assert (=> d!42789 (= lt!71685 e!89217)))

(declare-fun c!25680 () Bool)

(assert (=> d!42789 (= c!25680 lt!71687)))

(assert (=> d!42789 (= lt!71687 (containsKey!176 (toList!873 (+!171 lt!71396 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16)))) lt!71386))))

(assert (=> d!42789 (= (contains!901 (+!171 lt!71396 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16))) lt!71386) lt!71688)))

(declare-fun b!137027 () Bool)

(declare-fun lt!71686 () Unit!4291)

(assert (=> b!137027 (= e!89217 lt!71686)))

(assert (=> b!137027 (= lt!71686 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 (+!171 lt!71396 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16)))) lt!71386))))

(assert (=> b!137027 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71396 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16)))) lt!71386))))

(declare-fun b!137028 () Bool)

(declare-fun Unit!4321 () Unit!4291)

(assert (=> b!137028 (= e!89217 Unit!4321)))

(declare-fun b!137029 () Bool)

(assert (=> b!137029 (= e!89218 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71396 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16)))) lt!71386)))))

(assert (= (and d!42789 c!25680) b!137027))

(assert (= (and d!42789 (not c!25680)) b!137028))

(assert (= (and d!42789 (not res!65691)) b!137029))

(declare-fun m!163653 () Bool)

(assert (=> d!42789 m!163653))

(declare-fun m!163655 () Bool)

(assert (=> b!137027 m!163655))

(declare-fun m!163657 () Bool)

(assert (=> b!137027 m!163657))

(assert (=> b!137027 m!163657))

(declare-fun m!163659 () Bool)

(assert (=> b!137027 m!163659))

(assert (=> b!137029 m!163657))

(assert (=> b!137029 m!163657))

(assert (=> b!137029 m!163659))

(assert (=> b!136670 d!42789))

(declare-fun d!42791 () Bool)

(assert (=> d!42791 (= (apply!117 (+!171 lt!71388 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) lt!71384) (apply!117 lt!71388 lt!71384))))

(declare-fun lt!71689 () Unit!4291)

(assert (=> d!42791 (= lt!71689 (choose!844 lt!71388 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) lt!71384))))

(declare-fun e!89219 () Bool)

(assert (=> d!42791 e!89219))

(declare-fun res!65692 () Bool)

(assert (=> d!42791 (=> (not res!65692) (not e!89219))))

(assert (=> d!42791 (= res!65692 (contains!901 lt!71388 lt!71384))))

(assert (=> d!42791 (= (addApplyDifferent!93 lt!71388 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) lt!71384) lt!71689)))

(declare-fun b!137030 () Bool)

(assert (=> b!137030 (= e!89219 (not (= lt!71384 lt!71402)))))

(assert (= (and d!42791 res!65692) b!137030))

(assert (=> d!42791 m!162991))

(assert (=> d!42791 m!162993))

(declare-fun m!163661 () Bool)

(assert (=> d!42791 m!163661))

(assert (=> d!42791 m!162991))

(declare-fun m!163663 () Bool)

(assert (=> d!42791 m!163663))

(assert (=> d!42791 m!163003))

(assert (=> b!136670 d!42791))

(declare-fun d!42793 () Bool)

(assert (=> d!42793 (= (apply!117 (+!171 lt!71394 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16))) lt!71383) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71394 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16)))) lt!71383)))))

(declare-fun bs!5748 () Bool)

(assert (= bs!5748 d!42793))

(declare-fun m!163665 () Bool)

(assert (=> bs!5748 m!163665))

(assert (=> bs!5748 m!163665))

(declare-fun m!163667 () Bool)

(assert (=> bs!5748 m!163667))

(assert (=> b!136670 d!42793))

(declare-fun d!42795 () Bool)

(assert (=> d!42795 (contains!901 (+!171 lt!71396 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16))) lt!71386)))

(declare-fun lt!71690 () Unit!4291)

(assert (=> d!42795 (= lt!71690 (choose!843 lt!71396 lt!71389 (zeroValue!2742 newMap!16) lt!71386))))

(assert (=> d!42795 (contains!901 lt!71396 lt!71386)))

(assert (=> d!42795 (= (addStillContains!93 lt!71396 lt!71389 (zeroValue!2742 newMap!16) lt!71386) lt!71690)))

(declare-fun bs!5749 () Bool)

(assert (= bs!5749 d!42795))

(assert (=> bs!5749 m!162995))

(assert (=> bs!5749 m!162995))

(assert (=> bs!5749 m!163005))

(declare-fun m!163669 () Bool)

(assert (=> bs!5749 m!163669))

(declare-fun m!163671 () Bool)

(assert (=> bs!5749 m!163671))

(assert (=> b!136670 d!42795))

(declare-fun d!42797 () Bool)

(assert (=> d!42797 (= (apply!117 (+!171 lt!71394 (tuple2!2623 lt!71382 (zeroValue!2742 newMap!16))) lt!71383) (apply!117 lt!71394 lt!71383))))

(declare-fun lt!71691 () Unit!4291)

(assert (=> d!42797 (= lt!71691 (choose!844 lt!71394 lt!71382 (zeroValue!2742 newMap!16) lt!71383))))

(declare-fun e!89220 () Bool)

(assert (=> d!42797 e!89220))

(declare-fun res!65693 () Bool)

(assert (=> d!42797 (=> (not res!65693) (not e!89220))))

(assert (=> d!42797 (= res!65693 (contains!901 lt!71394 lt!71383))))

(assert (=> d!42797 (= (addApplyDifferent!93 lt!71394 lt!71382 (zeroValue!2742 newMap!16) lt!71383) lt!71691)))

(declare-fun b!137031 () Bool)

(assert (=> b!137031 (= e!89220 (not (= lt!71383 lt!71382)))))

(assert (= (and d!42797 res!65693) b!137031))

(assert (=> d!42797 m!163007))

(assert (=> d!42797 m!163009))

(declare-fun m!163673 () Bool)

(assert (=> d!42797 m!163673))

(assert (=> d!42797 m!163007))

(declare-fun m!163675 () Bool)

(assert (=> d!42797 m!163675))

(assert (=> d!42797 m!162999))

(assert (=> b!136670 d!42797))

(declare-fun d!42799 () Bool)

(declare-fun e!89221 () Bool)

(assert (=> d!42799 e!89221))

(declare-fun res!65695 () Bool)

(assert (=> d!42799 (=> (not res!65695) (not e!89221))))

(declare-fun lt!71695 () ListLongMap!1715)

(assert (=> d!42799 (= res!65695 (contains!901 lt!71695 (_1!1321 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16)))))))

(declare-fun lt!71692 () List!1741)

(assert (=> d!42799 (= lt!71695 (ListLongMap!1716 lt!71692))))

(declare-fun lt!71693 () Unit!4291)

(declare-fun lt!71694 () Unit!4291)

(assert (=> d!42799 (= lt!71693 lt!71694)))

(assert (=> d!42799 (= (getValueByKey!172 lt!71692 (_1!1321 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16)))))))

(assert (=> d!42799 (= lt!71694 (lemmaContainsTupThenGetReturnValue!89 lt!71692 (_1!1321 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16)))))))

(assert (=> d!42799 (= lt!71692 (insertStrictlySorted!91 (toList!873 lt!71396) (_1!1321 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16)))))))

(assert (=> d!42799 (= (+!171 lt!71396 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16))) lt!71695)))

(declare-fun b!137032 () Bool)

(declare-fun res!65694 () Bool)

(assert (=> b!137032 (=> (not res!65694) (not e!89221))))

(assert (=> b!137032 (= res!65694 (= (getValueByKey!172 (toList!873 lt!71695) (_1!1321 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16))))))))

(declare-fun b!137033 () Bool)

(assert (=> b!137033 (= e!89221 (contains!904 (toList!873 lt!71695) (tuple2!2623 lt!71389 (zeroValue!2742 newMap!16))))))

(assert (= (and d!42799 res!65695) b!137032))

(assert (= (and b!137032 res!65694) b!137033))

(declare-fun m!163677 () Bool)

(assert (=> d!42799 m!163677))

(declare-fun m!163679 () Bool)

(assert (=> d!42799 m!163679))

(declare-fun m!163681 () Bool)

(assert (=> d!42799 m!163681))

(declare-fun m!163683 () Bool)

(assert (=> d!42799 m!163683))

(declare-fun m!163685 () Bool)

(assert (=> b!137032 m!163685))

(declare-fun m!163687 () Bool)

(assert (=> b!137033 m!163687))

(assert (=> b!136670 d!42799))

(declare-fun call!15106 () ListLongMap!1715)

(declare-fun bm!15103 () Bool)

(assert (=> bm!15103 (= call!15106 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25512 (_values!2872 newMap!16) lt!71250) (mask!7203 newMap!16) (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) (zeroValue!2742 newMap!16) (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2889 newMap!16)))))

(declare-fun b!137034 () Bool)

(declare-fun e!89228 () Bool)

(declare-fun e!89226 () Bool)

(assert (=> b!137034 (= e!89228 e!89226)))

(declare-fun c!25682 () Bool)

(declare-fun e!89225 () Bool)

(assert (=> b!137034 (= c!25682 e!89225)))

(declare-fun res!65699 () Bool)

(assert (=> b!137034 (=> (not res!65699) (not e!89225))))

(assert (=> b!137034 (= res!65699 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137035 () Bool)

(declare-fun e!89223 () Bool)

(assert (=> b!137035 (= e!89226 e!89223)))

(assert (=> b!137035 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun res!65697 () Bool)

(declare-fun lt!71699 () ListLongMap!1715)

(assert (=> b!137035 (= res!65697 (contains!901 lt!71699 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137035 (=> (not res!65697) (not e!89223))))

(declare-fun b!137036 () Bool)

(declare-fun lt!71698 () Unit!4291)

(declare-fun lt!71697 () Unit!4291)

(assert (=> b!137036 (= lt!71698 lt!71697)))

(declare-fun lt!71700 () ListLongMap!1715)

(declare-fun lt!71702 () (_ BitVec 64))

(declare-fun lt!71701 () V!3499)

(declare-fun lt!71696 () (_ BitVec 64))

(assert (=> b!137036 (not (contains!901 (+!171 lt!71700 (tuple2!2623 lt!71696 lt!71701)) lt!71702))))

(assert (=> b!137036 (= lt!71697 (addStillNotContains!64 lt!71700 lt!71696 lt!71701 lt!71702))))

(assert (=> b!137036 (= lt!71702 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!137036 (= lt!71701 (get!1498 (select (arr!2273 (ite c!25512 (_values!2872 newMap!16) lt!71250)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!137036 (= lt!71696 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137036 (= lt!71700 call!15106)))

(declare-fun e!89224 () ListLongMap!1715)

(assert (=> b!137036 (= e!89224 (+!171 call!15106 (tuple2!2623 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) (get!1498 (select (arr!2273 (ite c!25512 (_values!2872 newMap!16) lt!71250)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!137037 () Bool)

(assert (=> b!137037 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> b!137037 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (ite c!25512 (_values!2872 newMap!16) lt!71250))))))

(assert (=> b!137037 (= e!89223 (= (apply!117 lt!71699 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (ite c!25512 (_values!2872 newMap!16) lt!71250)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137038 () Bool)

(declare-fun e!89222 () Bool)

(assert (=> b!137038 (= e!89222 (isEmpty!417 lt!71699))))

(declare-fun b!137039 () Bool)

(assert (=> b!137039 (= e!89225 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137039 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!42801 () Bool)

(assert (=> d!42801 e!89228))

(declare-fun res!65698 () Bool)

(assert (=> d!42801 (=> (not res!65698) (not e!89228))))

(assert (=> d!42801 (= res!65698 (not (contains!901 lt!71699 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!89227 () ListLongMap!1715)

(assert (=> d!42801 (= lt!71699 e!89227)))

(declare-fun c!25683 () Bool)

(assert (=> d!42801 (= c!25683 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42801 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42801 (= (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25512 (_values!2872 newMap!16) lt!71250) (mask!7203 newMap!16) (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) (zeroValue!2742 newMap!16) (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!71699)))

(declare-fun b!137040 () Bool)

(assert (=> b!137040 (= e!89227 e!89224)))

(declare-fun c!25681 () Bool)

(assert (=> b!137040 (= c!25681 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137041 () Bool)

(assert (=> b!137041 (= e!89226 e!89222)))

(declare-fun c!25684 () Bool)

(assert (=> b!137041 (= c!25684 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137042 () Bool)

(assert (=> b!137042 (= e!89227 (ListLongMap!1716 Nil!1738))))

(declare-fun b!137043 () Bool)

(assert (=> b!137043 (= e!89224 call!15106)))

(declare-fun b!137044 () Bool)

(assert (=> b!137044 (= e!89222 (= lt!71699 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25512 (_values!2872 newMap!16) lt!71250) (mask!7203 newMap!16) (ite c!25512 (ite c!25514 (extraKeys!2650 newMap!16) lt!71262) (extraKeys!2650 newMap!16)) (zeroValue!2742 newMap!16) (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2889 newMap!16))))))

(declare-fun b!137045 () Bool)

(declare-fun res!65696 () Bool)

(assert (=> b!137045 (=> (not res!65696) (not e!89228))))

(assert (=> b!137045 (= res!65696 (not (contains!901 lt!71699 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42801 c!25683) b!137042))

(assert (= (and d!42801 (not c!25683)) b!137040))

(assert (= (and b!137040 c!25681) b!137036))

(assert (= (and b!137040 (not c!25681)) b!137043))

(assert (= (or b!137036 b!137043) bm!15103))

(assert (= (and d!42801 res!65698) b!137045))

(assert (= (and b!137045 res!65696) b!137034))

(assert (= (and b!137034 res!65699) b!137039))

(assert (= (and b!137034 c!25682) b!137035))

(assert (= (and b!137034 (not c!25682)) b!137041))

(assert (= (and b!137035 res!65697) b!137037))

(assert (= (and b!137041 c!25684) b!137044))

(assert (= (and b!137041 (not c!25684)) b!137038))

(declare-fun b_lambda!6147 () Bool)

(assert (=> (not b_lambda!6147) (not b!137036)))

(assert (=> b!137036 t!6249))

(declare-fun b_and!8497 () Bool)

(assert (= b_and!8493 (and (=> t!6249 result!4059) b_and!8497)))

(assert (=> b!137036 t!6251))

(declare-fun b_and!8499 () Bool)

(assert (= b_and!8495 (and (=> t!6251 result!4061) b_and!8499)))

(declare-fun b_lambda!6149 () Bool)

(assert (=> (not b_lambda!6149) (not b!137037)))

(assert (=> b!137037 t!6249))

(declare-fun b_and!8501 () Bool)

(assert (= b_and!8497 (and (=> t!6249 result!4059) b_and!8501)))

(assert (=> b!137037 t!6251))

(declare-fun b_and!8503 () Bool)

(assert (= b_and!8499 (and (=> t!6251 result!4061) b_and!8503)))

(assert (=> b!137039 m!162731))

(assert (=> b!137039 m!162731))

(assert (=> b!137039 m!162735))

(declare-fun m!163689 () Bool)

(assert (=> b!137036 m!163689))

(assert (=> b!137036 m!162815))

(assert (=> b!137036 m!162971))

(declare-fun m!163691 () Bool)

(assert (=> b!137036 m!163691))

(declare-fun m!163693 () Bool)

(assert (=> b!137036 m!163693))

(assert (=> b!137036 m!163693))

(declare-fun m!163695 () Bool)

(assert (=> b!137036 m!163695))

(assert (=> b!137036 m!162971))

(assert (=> b!137036 m!162815))

(assert (=> b!137036 m!162975))

(assert (=> b!137036 m!162731))

(declare-fun m!163697 () Bool)

(assert (=> b!137045 m!163697))

(declare-fun m!163699 () Bool)

(assert (=> bm!15103 m!163699))

(assert (=> b!137035 m!162731))

(assert (=> b!137035 m!162731))

(declare-fun m!163701 () Bool)

(assert (=> b!137035 m!163701))

(assert (=> b!137044 m!163699))

(assert (=> b!137037 m!162815))

(assert (=> b!137037 m!162971))

(assert (=> b!137037 m!162731))

(declare-fun m!163703 () Bool)

(assert (=> b!137037 m!163703))

(assert (=> b!137037 m!162971))

(assert (=> b!137037 m!162815))

(assert (=> b!137037 m!162975))

(assert (=> b!137037 m!162731))

(declare-fun m!163705 () Bool)

(assert (=> d!42801 m!163705))

(assert (=> d!42801 m!162751))

(assert (=> b!137040 m!162731))

(assert (=> b!137040 m!162731))

(assert (=> b!137040 m!162735))

(declare-fun m!163707 () Bool)

(assert (=> b!137038 m!163707))

(assert (=> b!136670 d!42801))

(declare-fun d!42803 () Bool)

(declare-fun e!89229 () Bool)

(assert (=> d!42803 e!89229))

(declare-fun res!65701 () Bool)

(assert (=> d!42803 (=> (not res!65701) (not e!89229))))

(declare-fun lt!71706 () ListLongMap!1715)

(assert (=> d!42803 (= res!65701 (contains!901 lt!71706 (_1!1321 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(declare-fun lt!71703 () List!1741)

(assert (=> d!42803 (= lt!71706 (ListLongMap!1716 lt!71703))))

(declare-fun lt!71704 () Unit!4291)

(declare-fun lt!71705 () Unit!4291)

(assert (=> d!42803 (= lt!71704 lt!71705)))

(assert (=> d!42803 (= (getValueByKey!172 lt!71703 (_1!1321 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(assert (=> d!42803 (= lt!71705 (lemmaContainsTupThenGetReturnValue!89 lt!71703 (_1!1321 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) (_2!1321 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(assert (=> d!42803 (= lt!71703 (insertStrictlySorted!91 (toList!873 lt!71388) (_1!1321 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) (_2!1321 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(assert (=> d!42803 (= (+!171 lt!71388 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) lt!71706)))

(declare-fun b!137046 () Bool)

(declare-fun res!65700 () Bool)

(assert (=> b!137046 (=> (not res!65700) (not e!89229))))

(assert (=> b!137046 (= res!65700 (= (getValueByKey!172 (toList!873 lt!71706) (_1!1321 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))))))

(declare-fun b!137047 () Bool)

(assert (=> b!137047 (= e!89229 (contains!904 (toList!873 lt!71706) (tuple2!2623 lt!71402 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))))

(assert (= (and d!42803 res!65701) b!137046))

(assert (= (and b!137046 res!65700) b!137047))

(declare-fun m!163709 () Bool)

(assert (=> d!42803 m!163709))

(declare-fun m!163711 () Bool)

(assert (=> d!42803 m!163711))

(declare-fun m!163713 () Bool)

(assert (=> d!42803 m!163713))

(declare-fun m!163715 () Bool)

(assert (=> d!42803 m!163715))

(declare-fun m!163717 () Bool)

(assert (=> b!137046 m!163717))

(declare-fun m!163719 () Bool)

(assert (=> b!137047 m!163719))

(assert (=> b!136670 d!42803))

(declare-fun d!42805 () Bool)

(declare-fun e!89231 () Bool)

(assert (=> d!42805 e!89231))

(declare-fun res!65702 () Bool)

(assert (=> d!42805 (=> res!65702 e!89231)))

(declare-fun lt!71710 () Bool)

(assert (=> d!42805 (= res!65702 (not lt!71710))))

(declare-fun lt!71709 () Bool)

(assert (=> d!42805 (= lt!71710 lt!71709)))

(declare-fun lt!71707 () Unit!4291)

(declare-fun e!89230 () Unit!4291)

(assert (=> d!42805 (= lt!71707 e!89230)))

(declare-fun c!25685 () Bool)

(assert (=> d!42805 (= c!25685 lt!71709)))

(assert (=> d!42805 (= lt!71709 (containsKey!176 (toList!873 lt!71420) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!42805 (= (contains!901 lt!71420 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!71710)))

(declare-fun b!137048 () Bool)

(declare-fun lt!71708 () Unit!4291)

(assert (=> b!137048 (= e!89230 lt!71708)))

(assert (=> b!137048 (= lt!71708 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71420) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!137048 (isDefined!126 (getValueByKey!172 (toList!873 lt!71420) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!137049 () Bool)

(declare-fun Unit!4322 () Unit!4291)

(assert (=> b!137049 (= e!89230 Unit!4322)))

(declare-fun b!137050 () Bool)

(assert (=> b!137050 (= e!89231 (isDefined!126 (getValueByKey!172 (toList!873 lt!71420) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!42805 c!25685) b!137048))

(assert (= (and d!42805 (not c!25685)) b!137049))

(assert (= (and d!42805 (not res!65702)) b!137050))

(assert (=> d!42805 m!162591))

(declare-fun m!163721 () Bool)

(assert (=> d!42805 m!163721))

(assert (=> b!137048 m!162591))

(declare-fun m!163723 () Bool)

(assert (=> b!137048 m!163723))

(assert (=> b!137048 m!162591))

(declare-fun m!163725 () Bool)

(assert (=> b!137048 m!163725))

(assert (=> b!137048 m!163725))

(declare-fun m!163727 () Bool)

(assert (=> b!137048 m!163727))

(assert (=> b!137050 m!162591))

(assert (=> b!137050 m!163725))

(assert (=> b!137050 m!163725))

(assert (=> b!137050 m!163727))

(assert (=> b!136704 d!42805))

(declare-fun d!42807 () Bool)

(declare-fun res!65703 () Bool)

(declare-fun e!89232 () Bool)

(assert (=> d!42807 (=> res!65703 e!89232)))

(assert (=> d!42807 (= res!65703 (and ((_ is Cons!1737) (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))) (= (_1!1321 (h!2343 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))) lt!71156)))))

(assert (=> d!42807 (= (containsKey!176 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156) e!89232)))

(declare-fun b!137051 () Bool)

(declare-fun e!89233 () Bool)

(assert (=> b!137051 (= e!89232 e!89233)))

(declare-fun res!65704 () Bool)

(assert (=> b!137051 (=> (not res!65704) (not e!89233))))

(assert (=> b!137051 (= res!65704 (and (or (not ((_ is Cons!1737) (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))) (bvsle (_1!1321 (h!2343 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))) lt!71156)) ((_ is Cons!1737) (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))) (bvslt (_1!1321 (h!2343 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))) lt!71156)))))

(declare-fun b!137052 () Bool)

(assert (=> b!137052 (= e!89233 (containsKey!176 (t!6241 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))) lt!71156))))

(assert (= (and d!42807 (not res!65703)) b!137051))

(assert (= (and b!137051 res!65704) b!137052))

(declare-fun m!163729 () Bool)

(assert (=> b!137052 m!163729))

(assert (=> d!42641 d!42807))

(declare-fun d!42809 () Bool)

(assert (=> d!42809 (= (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!136499 d!42809))

(declare-fun d!42811 () Bool)

(declare-fun e!89235 () Bool)

(assert (=> d!42811 e!89235))

(declare-fun res!65705 () Bool)

(assert (=> d!42811 (=> res!65705 e!89235)))

(declare-fun lt!71714 () Bool)

(assert (=> d!42811 (= res!65705 (not lt!71714))))

(declare-fun lt!71713 () Bool)

(assert (=> d!42811 (= lt!71714 lt!71713)))

(declare-fun lt!71711 () Unit!4291)

(declare-fun e!89234 () Unit!4291)

(assert (=> d!42811 (= lt!71711 e!89234)))

(declare-fun c!25686 () Bool)

(assert (=> d!42811 (= c!25686 lt!71713)))

(assert (=> d!42811 (= lt!71713 (containsKey!176 (toList!873 lt!71420) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42811 (= (contains!901 lt!71420 #b0000000000000000000000000000000000000000000000000000000000000000) lt!71714)))

(declare-fun b!137053 () Bool)

(declare-fun lt!71712 () Unit!4291)

(assert (=> b!137053 (= e!89234 lt!71712)))

(assert (=> b!137053 (= lt!71712 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71420) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137053 (isDefined!126 (getValueByKey!172 (toList!873 lt!71420) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137054 () Bool)

(declare-fun Unit!4323 () Unit!4291)

(assert (=> b!137054 (= e!89234 Unit!4323)))

(declare-fun b!137055 () Bool)

(assert (=> b!137055 (= e!89235 (isDefined!126 (getValueByKey!172 (toList!873 lt!71420) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42811 c!25686) b!137053))

(assert (= (and d!42811 (not c!25686)) b!137054))

(assert (= (and d!42811 (not res!65705)) b!137055))

(declare-fun m!163731 () Bool)

(assert (=> d!42811 m!163731))

(declare-fun m!163733 () Bool)

(assert (=> b!137053 m!163733))

(declare-fun m!163735 () Bool)

(assert (=> b!137053 m!163735))

(assert (=> b!137053 m!163735))

(declare-fun m!163737 () Bool)

(assert (=> b!137053 m!163737))

(assert (=> b!137055 m!163735))

(assert (=> b!137055 m!163735))

(assert (=> b!137055 m!163737))

(assert (=> d!42613 d!42811))

(assert (=> d!42613 d!42623))

(declare-fun d!42813 () Bool)

(assert (=> d!42813 (= (size!2546 newMap!16) (bvadd (_size!604 newMap!16) (bvsdiv (bvadd (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!136567 d!42813))

(declare-fun c!25687 () Bool)

(declare-fun d!42815 () Bool)

(assert (=> d!42815 (= c!25687 (and ((_ is Cons!1737) (toList!873 lt!71380)) (= (_1!1321 (h!2343 (toList!873 lt!71380))) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!89236 () Option!178)

(assert (=> d!42815 (= (getValueByKey!172 (toList!873 lt!71380) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!89236)))

(declare-fun e!89237 () Option!178)

(declare-fun b!137058 () Bool)

(assert (=> b!137058 (= e!89237 (getValueByKey!172 (t!6241 (toList!873 lt!71380)) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137056 () Bool)

(assert (=> b!137056 (= e!89236 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71380)))))))

(declare-fun b!137059 () Bool)

(assert (=> b!137059 (= e!89237 None!176)))

(declare-fun b!137057 () Bool)

(assert (=> b!137057 (= e!89236 e!89237)))

(declare-fun c!25688 () Bool)

(assert (=> b!137057 (= c!25688 (and ((_ is Cons!1737) (toList!873 lt!71380)) (not (= (_1!1321 (h!2343 (toList!873 lt!71380))) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(assert (= (and d!42815 c!25687) b!137056))

(assert (= (and d!42815 (not c!25687)) b!137057))

(assert (= (and b!137057 c!25688) b!137058))

(assert (= (and b!137057 (not c!25688)) b!137059))

(declare-fun m!163739 () Bool)

(assert (=> b!137058 m!163739))

(assert (=> b!136654 d!42815))

(assert (=> b!136604 d!42809))

(declare-fun d!42817 () Bool)

(assert (=> d!42817 (= (apply!117 lt!71469 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!172 (toList!873 lt!71469) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5750 () Bool)

(assert (= bs!5750 d!42817))

(declare-fun m!163741 () Bool)

(assert (=> bs!5750 m!163741))

(assert (=> bs!5750 m!163741))

(declare-fun m!163743 () Bool)

(assert (=> bs!5750 m!163743))

(assert (=> b!136770 d!42817))

(declare-fun d!42819 () Bool)

(assert (=> d!42819 (= (apply!117 lt!71323 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!172 (toList!873 lt!71323) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5751 () Bool)

(assert (= bs!5751 d!42819))

(declare-fun m!163745 () Bool)

(assert (=> bs!5751 m!163745))

(assert (=> bs!5751 m!163745))

(declare-fun m!163747 () Bool)

(assert (=> bs!5751 m!163747))

(assert (=> b!136586 d!42819))

(assert (=> b!136533 d!42809))

(declare-fun d!42821 () Bool)

(assert (=> d!42821 (= (isDefined!126 (getValueByKey!172 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257))))) (not (isEmpty!418 (getValueByKey!172 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))))

(declare-fun bs!5752 () Bool)

(assert (= bs!5752 d!42821))

(assert (=> bs!5752 m!163221))

(declare-fun m!163749 () Bool)

(assert (=> bs!5752 m!163749))

(assert (=> b!136782 d!42821))

(declare-fun c!25689 () Bool)

(declare-fun d!42823 () Bool)

(assert (=> d!42823 (= c!25689 (and ((_ is Cons!1737) (toList!873 e!88876)) (= (_1!1321 (h!2343 (toList!873 e!88876))) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257))))))))

(declare-fun e!89238 () Option!178)

(assert (=> d!42823 (= (getValueByKey!172 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))) e!89238)))

(declare-fun e!89239 () Option!178)

(declare-fun b!137062 () Bool)

(assert (=> b!137062 (= e!89239 (getValueByKey!172 (t!6241 (toList!873 e!88876)) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))

(declare-fun b!137060 () Bool)

(assert (=> b!137060 (= e!89238 (Some!177 (_2!1321 (h!2343 (toList!873 e!88876)))))))

(declare-fun b!137063 () Bool)

(assert (=> b!137063 (= e!89239 None!176)))

(declare-fun b!137061 () Bool)

(assert (=> b!137061 (= e!89238 e!89239)))

(declare-fun c!25690 () Bool)

(assert (=> b!137061 (= c!25690 (and ((_ is Cons!1737) (toList!873 e!88876)) (not (= (_1!1321 (h!2343 (toList!873 e!88876))) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))))

(assert (= (and d!42823 c!25689) b!137060))

(assert (= (and d!42823 (not c!25689)) b!137061))

(assert (= (and b!137061 c!25690) b!137062))

(assert (= (and b!137061 (not c!25690)) b!137063))

(declare-fun m!163751 () Bool)

(assert (=> b!137062 m!163751))

(assert (=> b!136782 d!42823))

(declare-fun c!25691 () Bool)

(declare-fun d!42825 () Bool)

(assert (=> d!42825 (= c!25691 (and ((_ is Cons!1737) (toList!873 lt!71302)) (= (_1!1321 (h!2343 (toList!873 lt!71302))) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(declare-fun e!89240 () Option!178)

(assert (=> d!42825 (= (getValueByKey!172 (toList!873 lt!71302) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) e!89240)))

(declare-fun b!137066 () Bool)

(declare-fun e!89241 () Option!178)

(assert (=> b!137066 (= e!89241 (getValueByKey!172 (t!6241 (toList!873 lt!71302)) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!137064 () Bool)

(assert (=> b!137064 (= e!89240 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71302)))))))

(declare-fun b!137067 () Bool)

(assert (=> b!137067 (= e!89241 None!176)))

(declare-fun b!137065 () Bool)

(assert (=> b!137065 (= e!89240 e!89241)))

(declare-fun c!25692 () Bool)

(assert (=> b!137065 (= c!25692 (and ((_ is Cons!1737) (toList!873 lt!71302)) (not (= (_1!1321 (h!2343 (toList!873 lt!71302))) (_1!1321 (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))))

(assert (= (and d!42825 c!25691) b!137064))

(assert (= (and d!42825 (not c!25691)) b!137065))

(assert (= (and b!137065 c!25692) b!137066))

(assert (= (and b!137065 (not c!25692)) b!137067))

(declare-fun m!163753 () Bool)

(assert (=> b!137066 m!163753))

(assert (=> b!136540 d!42825))

(declare-fun d!42827 () Bool)

(declare-fun lt!71717 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!133 (List!1743) (InoxSet (_ BitVec 64)))

(assert (=> d!42827 (= lt!71717 (select (content!133 Nil!1740) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!89247 () Bool)

(assert (=> d!42827 (= lt!71717 e!89247)))

(declare-fun res!65711 () Bool)

(assert (=> d!42827 (=> (not res!65711) (not e!89247))))

(assert (=> d!42827 (= res!65711 ((_ is Cons!1739) Nil!1740))))

(assert (=> d!42827 (= (contains!903 Nil!1740 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) lt!71717)))

(declare-fun b!137072 () Bool)

(declare-fun e!89246 () Bool)

(assert (=> b!137072 (= e!89247 e!89246)))

(declare-fun res!65710 () Bool)

(assert (=> b!137072 (=> res!65710 e!89246)))

(assert (=> b!137072 (= res!65710 (= (h!2345 Nil!1740) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137073 () Bool)

(assert (=> b!137073 (= e!89246 (contains!903 (t!6247 Nil!1740) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!42827 res!65711) b!137072))

(assert (= (and b!137072 (not res!65710)) b!137073))

(declare-fun m!163755 () Bool)

(assert (=> d!42827 m!163755))

(assert (=> d!42827 m!162731))

(declare-fun m!163757 () Bool)

(assert (=> d!42827 m!163757))

(assert (=> b!137073 m!162731))

(declare-fun m!163759 () Bool)

(assert (=> b!137073 m!163759))

(assert (=> b!136495 d!42827))

(declare-fun d!42829 () Bool)

(declare-fun e!89249 () Bool)

(assert (=> d!42829 e!89249))

(declare-fun res!65712 () Bool)

(assert (=> d!42829 (=> res!65712 e!89249)))

(declare-fun lt!71721 () Bool)

(assert (=> d!42829 (= res!65712 (not lt!71721))))

(declare-fun lt!71720 () Bool)

(assert (=> d!42829 (= lt!71721 lt!71720)))

(declare-fun lt!71718 () Unit!4291)

(declare-fun e!89248 () Unit!4291)

(assert (=> d!42829 (= lt!71718 e!89248)))

(declare-fun c!25693 () Bool)

(assert (=> d!42829 (= c!25693 lt!71720)))

(assert (=> d!42829 (= lt!71720 (containsKey!176 (toList!873 (map!1413 (_2!1322 lt!71556))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!42829 (= (contains!901 (map!1413 (_2!1322 lt!71556)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) lt!71721)))

(declare-fun b!137074 () Bool)

(declare-fun lt!71719 () Unit!4291)

(assert (=> b!137074 (= e!89248 lt!71719)))

(assert (=> b!137074 (= lt!71719 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 (map!1413 (_2!1322 lt!71556))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> b!137074 (isDefined!126 (getValueByKey!172 (toList!873 (map!1413 (_2!1322 lt!71556))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun b!137075 () Bool)

(declare-fun Unit!4324 () Unit!4291)

(assert (=> b!137075 (= e!89248 Unit!4324)))

(declare-fun b!137076 () Bool)

(assert (=> b!137076 (= e!89249 (isDefined!126 (getValueByKey!172 (toList!873 (map!1413 (_2!1322 lt!71556))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(assert (= (and d!42829 c!25693) b!137074))

(assert (= (and d!42829 (not c!25693)) b!137075))

(assert (= (and d!42829 (not res!65712)) b!137076))

(assert (=> d!42829 m!162523))

(declare-fun m!163761 () Bool)

(assert (=> d!42829 m!163761))

(assert (=> b!137074 m!162523))

(declare-fun m!163763 () Bool)

(assert (=> b!137074 m!163763))

(assert (=> b!137074 m!162523))

(declare-fun m!163765 () Bool)

(assert (=> b!137074 m!163765))

(assert (=> b!137074 m!163765))

(declare-fun m!163767 () Bool)

(assert (=> b!137074 m!163767))

(assert (=> b!137076 m!162523))

(assert (=> b!137076 m!163765))

(assert (=> b!137076 m!163765))

(assert (=> b!137076 m!163767))

(assert (=> b!136831 d!42829))

(assert (=> b!136831 d!42705))

(declare-fun d!42831 () Bool)

(declare-fun e!89251 () Bool)

(assert (=> d!42831 e!89251))

(declare-fun res!65713 () Bool)

(assert (=> d!42831 (=> res!65713 e!89251)))

(declare-fun lt!71725 () Bool)

(assert (=> d!42831 (= res!65713 (not lt!71725))))

(declare-fun lt!71724 () Bool)

(assert (=> d!42831 (= lt!71725 lt!71724)))

(declare-fun lt!71722 () Unit!4291)

(declare-fun e!89250 () Unit!4291)

(assert (=> d!42831 (= lt!71722 e!89250)))

(declare-fun c!25694 () Bool)

(assert (=> d!42831 (= c!25694 lt!71724)))

(assert (=> d!42831 (= lt!71724 (containsKey!176 (toList!873 lt!71427) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42831 (= (contains!901 lt!71427 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71725)))

(declare-fun b!137077 () Bool)

(declare-fun lt!71723 () Unit!4291)

(assert (=> b!137077 (= e!89250 lt!71723)))

(assert (=> b!137077 (= lt!71723 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71427) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> b!137077 (isDefined!126 (getValueByKey!172 (toList!873 lt!71427) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137078 () Bool)

(declare-fun Unit!4325 () Unit!4291)

(assert (=> b!137078 (= e!89250 Unit!4325)))

(declare-fun b!137079 () Bool)

(assert (=> b!137079 (= e!89251 (isDefined!126 (getValueByKey!172 (toList!873 lt!71427) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (= (and d!42831 c!25694) b!137077))

(assert (= (and d!42831 (not c!25694)) b!137078))

(assert (= (and d!42831 (not res!65713)) b!137079))

(declare-fun m!163769 () Bool)

(assert (=> d!42831 m!163769))

(declare-fun m!163771 () Bool)

(assert (=> b!137077 m!163771))

(assert (=> b!137077 m!163061))

(assert (=> b!137077 m!163061))

(declare-fun m!163773 () Bool)

(assert (=> b!137077 m!163773))

(assert (=> b!137079 m!163061))

(assert (=> b!137079 m!163061))

(assert (=> b!137079 m!163773))

(assert (=> d!42621 d!42831))

(declare-fun d!42833 () Bool)

(declare-fun c!25695 () Bool)

(assert (=> d!42833 (= c!25695 (and ((_ is Cons!1737) lt!71424) (= (_1!1321 (h!2343 lt!71424)) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89252 () Option!178)

(assert (=> d!42833 (= (getValueByKey!172 lt!71424 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) e!89252)))

(declare-fun b!137082 () Bool)

(declare-fun e!89253 () Option!178)

(assert (=> b!137082 (= e!89253 (getValueByKey!172 (t!6241 lt!71424) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137080 () Bool)

(assert (=> b!137080 (= e!89252 (Some!177 (_2!1321 (h!2343 lt!71424))))))

(declare-fun b!137083 () Bool)

(assert (=> b!137083 (= e!89253 None!176)))

(declare-fun b!137081 () Bool)

(assert (=> b!137081 (= e!89252 e!89253)))

(declare-fun c!25696 () Bool)

(assert (=> b!137081 (= c!25696 (and ((_ is Cons!1737) lt!71424) (not (= (_1!1321 (h!2343 lt!71424)) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42833 c!25695) b!137080))

(assert (= (and d!42833 (not c!25695)) b!137081))

(assert (= (and b!137081 c!25696) b!137082))

(assert (= (and b!137081 (not c!25696)) b!137083))

(declare-fun m!163775 () Bool)

(assert (=> b!137082 m!163775))

(assert (=> d!42621 d!42833))

(declare-fun d!42835 () Bool)

(assert (=> d!42835 (= (getValueByKey!172 lt!71424 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun lt!71726 () Unit!4291)

(assert (=> d!42835 (= lt!71726 (choose!848 lt!71424 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun e!89254 () Bool)

(assert (=> d!42835 e!89254))

(declare-fun res!65714 () Bool)

(assert (=> d!42835 (=> (not res!65714) (not e!89254))))

(assert (=> d!42835 (= res!65714 (isStrictlySorted!318 lt!71424))))

(assert (=> d!42835 (= (lemmaContainsTupThenGetReturnValue!89 lt!71424 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71726)))

(declare-fun b!137084 () Bool)

(declare-fun res!65715 () Bool)

(assert (=> b!137084 (=> (not res!65715) (not e!89254))))

(assert (=> b!137084 (= res!65715 (containsKey!176 lt!71424 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137085 () Bool)

(assert (=> b!137085 (= e!89254 (contains!904 lt!71424 (tuple2!2623 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (= (and d!42835 res!65714) b!137084))

(assert (= (and b!137084 res!65715) b!137085))

(assert (=> d!42835 m!163055))

(declare-fun m!163777 () Bool)

(assert (=> d!42835 m!163777))

(declare-fun m!163779 () Bool)

(assert (=> d!42835 m!163779))

(declare-fun m!163781 () Bool)

(assert (=> b!137084 m!163781))

(declare-fun m!163783 () Bool)

(assert (=> b!137085 m!163783))

(assert (=> d!42621 d!42835))

(declare-fun b!137086 () Bool)

(declare-fun e!89258 () List!1741)

(declare-fun call!15108 () List!1741)

(assert (=> b!137086 (= e!89258 call!15108)))

(declare-fun b!137087 () Bool)

(declare-fun e!89256 () Bool)

(declare-fun lt!71727 () List!1741)

(assert (=> b!137087 (= e!89256 (contains!904 lt!71727 (tuple2!2623 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!137088 () Bool)

(declare-fun e!89255 () List!1741)

(declare-fun call!15109 () List!1741)

(assert (=> b!137088 (= e!89255 call!15109)))

(declare-fun b!137089 () Bool)

(declare-fun e!89257 () List!1741)

(assert (=> b!137089 (= e!89257 e!89258)))

(declare-fun c!25697 () Bool)

(assert (=> b!137089 (= c!25697 (and ((_ is Cons!1737) (toList!873 call!14944)) (= (_1!1321 (h!2343 (toList!873 call!14944))) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89259 () List!1741)

(declare-fun c!25700 () Bool)

(declare-fun bm!15104 () Bool)

(declare-fun call!15107 () List!1741)

(assert (=> bm!15104 (= call!15107 ($colon$colon!92 e!89259 (ite c!25700 (h!2343 (toList!873 call!14944)) (tuple2!2623 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(declare-fun c!25699 () Bool)

(assert (=> bm!15104 (= c!25699 c!25700)))

(declare-fun b!137090 () Bool)

(assert (=> b!137090 (= e!89255 call!15109)))

(declare-fun bm!15105 () Bool)

(assert (=> bm!15105 (= call!15109 call!15108)))

(declare-fun d!42837 () Bool)

(assert (=> d!42837 e!89256))

(declare-fun res!65717 () Bool)

(assert (=> d!42837 (=> (not res!65717) (not e!89256))))

(assert (=> d!42837 (= res!65717 (isStrictlySorted!318 lt!71727))))

(assert (=> d!42837 (= lt!71727 e!89257)))

(assert (=> d!42837 (= c!25700 (and ((_ is Cons!1737) (toList!873 call!14944)) (bvslt (_1!1321 (h!2343 (toList!873 call!14944))) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> d!42837 (isStrictlySorted!318 (toList!873 call!14944))))

(assert (=> d!42837 (= (insertStrictlySorted!91 (toList!873 call!14944) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71727)))

(declare-fun c!25698 () Bool)

(declare-fun b!137091 () Bool)

(assert (=> b!137091 (= e!89259 (ite c!25697 (t!6241 (toList!873 call!14944)) (ite c!25698 (Cons!1737 (h!2343 (toList!873 call!14944)) (t!6241 (toList!873 call!14944))) Nil!1738)))))

(declare-fun b!137092 () Bool)

(declare-fun res!65716 () Bool)

(assert (=> b!137092 (=> (not res!65716) (not e!89256))))

(assert (=> b!137092 (= res!65716 (containsKey!176 lt!71727 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137093 () Bool)

(assert (=> b!137093 (= c!25698 (and ((_ is Cons!1737) (toList!873 call!14944)) (bvsgt (_1!1321 (h!2343 (toList!873 call!14944))) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> b!137093 (= e!89258 e!89255)))

(declare-fun bm!15106 () Bool)

(assert (=> bm!15106 (= call!15108 call!15107)))

(declare-fun b!137094 () Bool)

(assert (=> b!137094 (= e!89257 call!15107)))

(declare-fun b!137095 () Bool)

(assert (=> b!137095 (= e!89259 (insertStrictlySorted!91 (t!6241 (toList!873 call!14944)) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (= (and d!42837 c!25700) b!137094))

(assert (= (and d!42837 (not c!25700)) b!137089))

(assert (= (and b!137089 c!25697) b!137086))

(assert (= (and b!137089 (not c!25697)) b!137093))

(assert (= (and b!137093 c!25698) b!137088))

(assert (= (and b!137093 (not c!25698)) b!137090))

(assert (= (or b!137088 b!137090) bm!15105))

(assert (= (or b!137086 bm!15105) bm!15106))

(assert (= (or b!137094 bm!15106) bm!15104))

(assert (= (and bm!15104 c!25699) b!137095))

(assert (= (and bm!15104 (not c!25699)) b!137091))

(assert (= (and d!42837 res!65717) b!137092))

(assert (= (and b!137092 res!65716) b!137087))

(declare-fun m!163785 () Bool)

(assert (=> b!137095 m!163785))

(declare-fun m!163787 () Bool)

(assert (=> b!137092 m!163787))

(declare-fun m!163789 () Bool)

(assert (=> d!42837 m!163789))

(declare-fun m!163791 () Bool)

(assert (=> d!42837 m!163791))

(declare-fun m!163793 () Bool)

(assert (=> b!137087 m!163793))

(declare-fun m!163795 () Bool)

(assert (=> bm!15104 m!163795))

(assert (=> d!42621 d!42837))

(declare-fun lt!71730 () Bool)

(declare-fun d!42839 () Bool)

(declare-fun content!134 (List!1741) (InoxSet tuple2!2622))

(assert (=> d!42839 (= lt!71730 (select (content!134 (toList!873 lt!71442)) (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun e!89265 () Bool)

(assert (=> d!42839 (= lt!71730 e!89265)))

(declare-fun res!65722 () Bool)

(assert (=> d!42839 (=> (not res!65722) (not e!89265))))

(assert (=> d!42839 (= res!65722 ((_ is Cons!1737) (toList!873 lt!71442)))))

(assert (=> d!42839 (= (contains!904 (toList!873 lt!71442) (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71730)))

(declare-fun b!137100 () Bool)

(declare-fun e!89264 () Bool)

(assert (=> b!137100 (= e!89265 e!89264)))

(declare-fun res!65723 () Bool)

(assert (=> b!137100 (=> res!65723 e!89264)))

(assert (=> b!137100 (= res!65723 (= (h!2343 (toList!873 lt!71442)) (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!137101 () Bool)

(assert (=> b!137101 (= e!89264 (contains!904 (t!6241 (toList!873 lt!71442)) (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(assert (= (and d!42839 res!65722) b!137100))

(assert (= (and b!137100 (not res!65723)) b!137101))

(declare-fun m!163797 () Bool)

(assert (=> d!42839 m!163797))

(declare-fun m!163799 () Bool)

(assert (=> d!42839 m!163799))

(declare-fun m!163801 () Bool)

(assert (=> b!137101 m!163801))

(assert (=> b!136740 d!42839))

(declare-fun b!137114 () Bool)

(declare-fun e!89272 () SeekEntryResult!286)

(assert (=> b!137114 (= e!89272 (Found!286 (index!3307 lt!71276)))))

(declare-fun b!137115 () Bool)

(declare-fun e!89274 () SeekEntryResult!286)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!137115 (= e!89274 (seekKeyOrZeroReturnVacant!0 (bvadd (x!15814 lt!71276) #b00000000000000000000000000000001) (nextIndex!0 (index!3307 lt!71276) (x!15814 lt!71276) (mask!7203 newMap!16)) (index!3307 lt!71276) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(declare-fun b!137116 () Bool)

(assert (=> b!137116 (= e!89274 (MissingVacant!286 (index!3307 lt!71276)))))

(declare-fun b!137117 () Bool)

(declare-fun c!25708 () Bool)

(declare-fun lt!71735 () (_ BitVec 64))

(assert (=> b!137117 (= c!25708 (= lt!71735 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137117 (= e!89272 e!89274)))

(declare-fun lt!71736 () SeekEntryResult!286)

(declare-fun d!42841 () Bool)

(assert (=> d!42841 (and (or ((_ is Undefined!286) lt!71736) (not ((_ is Found!286) lt!71736)) (and (bvsge (index!3306 lt!71736) #b00000000000000000000000000000000) (bvslt (index!3306 lt!71736) (size!2542 (_keys!4642 newMap!16))))) (or ((_ is Undefined!286) lt!71736) ((_ is Found!286) lt!71736) (not ((_ is MissingVacant!286) lt!71736)) (not (= (index!3308 lt!71736) (index!3307 lt!71276))) (and (bvsge (index!3308 lt!71736) #b00000000000000000000000000000000) (bvslt (index!3308 lt!71736) (size!2542 (_keys!4642 newMap!16))))) (or ((_ is Undefined!286) lt!71736) (ite ((_ is Found!286) lt!71736) (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71736)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (and ((_ is MissingVacant!286) lt!71736) (= (index!3308 lt!71736) (index!3307 lt!71276)) (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3308 lt!71736)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!89273 () SeekEntryResult!286)

(assert (=> d!42841 (= lt!71736 e!89273)))

(declare-fun c!25707 () Bool)

(assert (=> d!42841 (= c!25707 (bvsge (x!15814 lt!71276) #b01111111111111111111111111111110))))

(assert (=> d!42841 (= lt!71735 (select (arr!2272 (_keys!4642 newMap!16)) (index!3307 lt!71276)))))

(assert (=> d!42841 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42841 (= (seekKeyOrZeroReturnVacant!0 (x!15814 lt!71276) (index!3307 lt!71276) (index!3307 lt!71276) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)) lt!71736)))

(declare-fun b!137118 () Bool)

(assert (=> b!137118 (= e!89273 Undefined!286)))

(declare-fun b!137119 () Bool)

(assert (=> b!137119 (= e!89273 e!89272)))

(declare-fun c!25709 () Bool)

(assert (=> b!137119 (= c!25709 (= lt!71735 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (= (and d!42841 c!25707) b!137118))

(assert (= (and d!42841 (not c!25707)) b!137119))

(assert (= (and b!137119 c!25709) b!137114))

(assert (= (and b!137119 (not c!25709)) b!137117))

(assert (= (and b!137117 c!25708) b!137116))

(assert (= (and b!137117 (not c!25708)) b!137115))

(declare-fun m!163803 () Bool)

(assert (=> b!137115 m!163803))

(assert (=> b!137115 m!163803))

(assert (=> b!137115 m!162523))

(declare-fun m!163805 () Bool)

(assert (=> b!137115 m!163805))

(declare-fun m!163807 () Bool)

(assert (=> d!42841 m!163807))

(declare-fun m!163809 () Bool)

(assert (=> d!42841 m!163809))

(assert (=> d!42841 m!162753))

(assert (=> d!42841 m!162751))

(assert (=> b!136512 d!42841))

(declare-fun d!42843 () Bool)

(declare-fun e!89275 () Bool)

(assert (=> d!42843 e!89275))

(declare-fun res!65725 () Bool)

(assert (=> d!42843 (=> (not res!65725) (not e!89275))))

(declare-fun lt!71740 () ListLongMap!1715)

(assert (=> d!42843 (= res!65725 (contains!901 lt!71740 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!71737 () List!1741)

(assert (=> d!42843 (= lt!71740 (ListLongMap!1716 lt!71737))))

(declare-fun lt!71738 () Unit!4291)

(declare-fun lt!71739 () Unit!4291)

(assert (=> d!42843 (= lt!71738 lt!71739)))

(assert (=> d!42843 (= (getValueByKey!172 lt!71737 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42843 (= lt!71739 (lemmaContainsTupThenGetReturnValue!89 lt!71737 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42843 (= lt!71737 (insertStrictlySorted!91 (toList!873 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42843 (= (+!171 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71740)))

(declare-fun b!137120 () Bool)

(declare-fun res!65724 () Bool)

(assert (=> b!137120 (=> (not res!65724) (not e!89275))))

(assert (=> b!137120 (= res!65724 (= (getValueByKey!172 (toList!873 lt!71740) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137121 () Bool)

(assert (=> b!137121 (= e!89275 (contains!904 (toList!873 lt!71740) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!42843 res!65725) b!137120))

(assert (= (and b!137120 res!65724) b!137121))

(declare-fun m!163811 () Bool)

(assert (=> d!42843 m!163811))

(declare-fun m!163813 () Bool)

(assert (=> d!42843 m!163813))

(declare-fun m!163815 () Bool)

(assert (=> d!42843 m!163815))

(declare-fun m!163817 () Bool)

(assert (=> d!42843 m!163817))

(declare-fun m!163819 () Bool)

(assert (=> b!137120 m!163819))

(declare-fun m!163821 () Bool)

(assert (=> b!137121 m!163821))

(assert (=> d!42677 d!42843))

(declare-fun b!137122 () Bool)

(declare-fun e!89283 () Bool)

(declare-fun call!15115 () Bool)

(assert (=> b!137122 (= e!89283 (not call!15115))))

(declare-fun b!137123 () Bool)

(declare-fun res!65727 () Bool)

(declare-fun e!89279 () Bool)

(assert (=> b!137123 (=> (not res!65727) (not e!89279))))

(declare-fun e!89277 () Bool)

(assert (=> b!137123 (= res!65727 e!89277)))

(declare-fun res!65733 () Bool)

(assert (=> b!137123 (=> res!65733 e!89277)))

(declare-fun e!89281 () Bool)

(assert (=> b!137123 (= res!65733 (not e!89281))))

(declare-fun res!65730 () Bool)

(assert (=> b!137123 (=> (not res!65730) (not e!89281))))

(assert (=> b!137123 (= res!65730 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137124 () Bool)

(declare-fun e!89285 () Bool)

(declare-fun e!89282 () Bool)

(assert (=> b!137124 (= e!89285 e!89282)))

(declare-fun res!65734 () Bool)

(declare-fun call!15114 () Bool)

(assert (=> b!137124 (= res!65734 call!15114)))

(assert (=> b!137124 (=> (not res!65734) (not e!89282))))

(declare-fun bm!15107 () Bool)

(declare-fun call!15113 () ListLongMap!1715)

(declare-fun call!15116 () ListLongMap!1715)

(assert (=> bm!15107 (= call!15113 call!15116)))

(declare-fun b!137125 () Bool)

(declare-fun e!89288 () Bool)

(assert (=> b!137125 (= e!89277 e!89288)))

(declare-fun res!65732 () Bool)

(assert (=> b!137125 (=> (not res!65732) (not e!89288))))

(declare-fun lt!71751 () ListLongMap!1715)

(assert (=> b!137125 (= res!65732 (contains!901 lt!71751 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137125 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137126 () Bool)

(declare-fun e!89284 () ListLongMap!1715)

(declare-fun e!89280 () ListLongMap!1715)

(assert (=> b!137126 (= e!89284 e!89280)))

(declare-fun c!25711 () Bool)

(assert (=> b!137126 (= c!25711 (and (not (= (bvand lt!71262 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!71262 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!15108 () Bool)

(assert (=> bm!15108 (= call!15114 (contains!901 lt!71751 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137127 () Bool)

(assert (=> b!137127 (= e!89282 (= (apply!117 lt!71751 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2742 newMap!16)))))

(declare-fun b!137128 () Bool)

(declare-fun e!89287 () ListLongMap!1715)

(declare-fun call!15111 () ListLongMap!1715)

(assert (=> b!137128 (= e!89287 call!15111)))

(declare-fun bm!15109 () Bool)

(declare-fun call!15112 () ListLongMap!1715)

(declare-fun call!15110 () ListLongMap!1715)

(assert (=> bm!15109 (= call!15112 call!15110)))

(declare-fun b!137129 () Bool)

(declare-fun e!89278 () Bool)

(assert (=> b!137129 (= e!89278 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137131 () Bool)

(assert (=> b!137131 (= e!89280 call!15112)))

(declare-fun b!137132 () Bool)

(assert (=> b!137132 (= e!89281 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137133 () Bool)

(assert (=> b!137133 (= e!89279 e!89283)))

(declare-fun c!25715 () Bool)

(assert (=> b!137133 (= c!25715 (not (= (bvand lt!71262 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137134 () Bool)

(declare-fun e!89286 () Unit!4291)

(declare-fun lt!71745 () Unit!4291)

(assert (=> b!137134 (= e!89286 lt!71745)))

(declare-fun lt!71756 () ListLongMap!1715)

(assert (=> b!137134 (= lt!71756 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71749 () (_ BitVec 64))

(assert (=> b!137134 (= lt!71749 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71746 () (_ BitVec 64))

(assert (=> b!137134 (= lt!71746 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71747 () Unit!4291)

(assert (=> b!137134 (= lt!71747 (addStillContains!93 lt!71756 lt!71749 (zeroValue!2742 newMap!16) lt!71746))))

(assert (=> b!137134 (contains!901 (+!171 lt!71756 (tuple2!2623 lt!71749 (zeroValue!2742 newMap!16))) lt!71746)))

(declare-fun lt!71761 () Unit!4291)

(assert (=> b!137134 (= lt!71761 lt!71747)))

(declare-fun lt!71748 () ListLongMap!1715)

(assert (=> b!137134 (= lt!71748 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71762 () (_ BitVec 64))

(assert (=> b!137134 (= lt!71762 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71744 () (_ BitVec 64))

(assert (=> b!137134 (= lt!71744 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71741 () Unit!4291)

(assert (=> b!137134 (= lt!71741 (addApplyDifferent!93 lt!71748 lt!71762 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!71744))))

(assert (=> b!137134 (= (apply!117 (+!171 lt!71748 (tuple2!2623 lt!71762 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71744) (apply!117 lt!71748 lt!71744))))

(declare-fun lt!71757 () Unit!4291)

(assert (=> b!137134 (= lt!71757 lt!71741)))

(declare-fun lt!71754 () ListLongMap!1715)

(assert (=> b!137134 (= lt!71754 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71742 () (_ BitVec 64))

(assert (=> b!137134 (= lt!71742 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71743 () (_ BitVec 64))

(assert (=> b!137134 (= lt!71743 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!71750 () Unit!4291)

(assert (=> b!137134 (= lt!71750 (addApplyDifferent!93 lt!71754 lt!71742 (zeroValue!2742 newMap!16) lt!71743))))

(assert (=> b!137134 (= (apply!117 (+!171 lt!71754 (tuple2!2623 lt!71742 (zeroValue!2742 newMap!16))) lt!71743) (apply!117 lt!71754 lt!71743))))

(declare-fun lt!71752 () Unit!4291)

(assert (=> b!137134 (= lt!71752 lt!71750)))

(declare-fun lt!71759 () ListLongMap!1715)

(assert (=> b!137134 (= lt!71759 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!71758 () (_ BitVec 64))

(assert (=> b!137134 (= lt!71758 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71760 () (_ BitVec 64))

(assert (=> b!137134 (= lt!71760 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137134 (= lt!71745 (addApplyDifferent!93 lt!71759 lt!71758 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!71760))))

(assert (=> b!137134 (= (apply!117 (+!171 lt!71759 (tuple2!2623 lt!71758 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71760) (apply!117 lt!71759 lt!71760))))

(declare-fun b!137135 () Bool)

(assert (=> b!137135 (= e!89287 call!15112)))

(declare-fun b!137136 () Bool)

(assert (=> b!137136 (= e!89284 (+!171 call!15110 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!15110 () Bool)

(assert (=> bm!15110 (= call!15116 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun b!137137 () Bool)

(declare-fun Unit!4326 () Unit!4291)

(assert (=> b!137137 (= e!89286 Unit!4326)))

(declare-fun b!137138 () Bool)

(declare-fun res!65726 () Bool)

(assert (=> b!137138 (=> (not res!65726) (not e!89279))))

(assert (=> b!137138 (= res!65726 e!89285)))

(declare-fun c!25712 () Bool)

(assert (=> b!137138 (= c!25712 (not (= (bvand lt!71262 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!137130 () Bool)

(declare-fun e!89276 () Bool)

(assert (=> b!137130 (= e!89283 e!89276)))

(declare-fun res!65729 () Bool)

(assert (=> b!137130 (= res!65729 call!15115)))

(assert (=> b!137130 (=> (not res!65729) (not e!89276))))

(declare-fun d!42845 () Bool)

(assert (=> d!42845 e!89279))

(declare-fun res!65728 () Bool)

(assert (=> d!42845 (=> (not res!65728) (not e!89279))))

(assert (=> d!42845 (= res!65728 (or (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))))

(declare-fun lt!71753 () ListLongMap!1715)

(assert (=> d!42845 (= lt!71751 lt!71753)))

(declare-fun lt!71755 () Unit!4291)

(assert (=> d!42845 (= lt!71755 e!89286)))

(declare-fun c!25713 () Bool)

(assert (=> d!42845 (= c!25713 e!89278)))

(declare-fun res!65731 () Bool)

(assert (=> d!42845 (=> (not res!65731) (not e!89278))))

(assert (=> d!42845 (= res!65731 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42845 (= lt!71753 e!89284)))

(declare-fun c!25710 () Bool)

(assert (=> d!42845 (= c!25710 (and (not (= (bvand lt!71262 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!71262 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!42845 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42845 (= (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!71751)))

(declare-fun b!137139 () Bool)

(assert (=> b!137139 (= e!89276 (= (apply!117 lt!71751 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!15111 () Bool)

(assert (=> bm!15111 (= call!15111 call!15113)))

(declare-fun b!137140 () Bool)

(assert (=> b!137140 (= e!89285 (not call!15114))))

(declare-fun bm!15112 () Bool)

(assert (=> bm!15112 (= call!15115 (contains!901 lt!71751 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137141 () Bool)

(assert (=> b!137141 (= e!89288 (= (apply!117 lt!71751 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!137141 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (_values!2872 newMap!16))))))

(assert (=> b!137141 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun bm!15113 () Bool)

(assert (=> bm!15113 (= call!15110 (+!171 (ite c!25710 call!15116 (ite c!25711 call!15113 call!15111)) (ite (or c!25710 c!25711) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137142 () Bool)

(declare-fun c!25714 () Bool)

(assert (=> b!137142 (= c!25714 (and (not (= (bvand lt!71262 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!71262 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!137142 (= e!89280 e!89287)))

(assert (= (and d!42845 c!25710) b!137136))

(assert (= (and d!42845 (not c!25710)) b!137126))

(assert (= (and b!137126 c!25711) b!137131))

(assert (= (and b!137126 (not c!25711)) b!137142))

(assert (= (and b!137142 c!25714) b!137135))

(assert (= (and b!137142 (not c!25714)) b!137128))

(assert (= (or b!137135 b!137128) bm!15111))

(assert (= (or b!137131 bm!15111) bm!15107))

(assert (= (or b!137131 b!137135) bm!15109))

(assert (= (or b!137136 bm!15107) bm!15110))

(assert (= (or b!137136 bm!15109) bm!15113))

(assert (= (and d!42845 res!65731) b!137129))

(assert (= (and d!42845 c!25713) b!137134))

(assert (= (and d!42845 (not c!25713)) b!137137))

(assert (= (and d!42845 res!65728) b!137123))

(assert (= (and b!137123 res!65730) b!137132))

(assert (= (and b!137123 (not res!65733)) b!137125))

(assert (= (and b!137125 res!65732) b!137141))

(assert (= (and b!137123 res!65727) b!137138))

(assert (= (and b!137138 c!25712) b!137124))

(assert (= (and b!137138 (not c!25712)) b!137140))

(assert (= (and b!137124 res!65734) b!137127))

(assert (= (or b!137124 b!137140) bm!15108))

(assert (= (and b!137138 res!65726) b!137133))

(assert (= (and b!137133 c!25715) b!137130))

(assert (= (and b!137133 (not c!25715)) b!137122))

(assert (= (and b!137130 res!65729) b!137139))

(assert (= (or b!137130 b!137122) bm!15112))

(declare-fun b_lambda!6151 () Bool)

(assert (=> (not b_lambda!6151) (not b!137141)))

(assert (=> b!137141 t!6249))

(declare-fun b_and!8505 () Bool)

(assert (= b_and!8501 (and (=> t!6249 result!4059) b_and!8505)))

(assert (=> b!137141 t!6251))

(declare-fun b_and!8507 () Bool)

(assert (= b_and!8503 (and (=> t!6251 result!4061) b_and!8507)))

(declare-fun m!163823 () Bool)

(assert (=> bm!15108 m!163823))

(assert (=> b!137141 m!162811))

(assert (=> b!137141 m!162731))

(declare-fun m!163825 () Bool)

(assert (=> b!137141 m!163825))

(assert (=> b!137141 m!162731))

(assert (=> b!137141 m!162815))

(assert (=> b!137141 m!162811))

(assert (=> b!137141 m!162815))

(assert (=> b!137141 m!162817))

(declare-fun m!163827 () Bool)

(assert (=> b!137136 m!163827))

(declare-fun m!163829 () Bool)

(assert (=> bm!15113 m!163829))

(assert (=> bm!15110 m!162543))

(declare-fun m!163831 () Bool)

(assert (=> bm!15110 m!163831))

(declare-fun m!163833 () Bool)

(assert (=> b!137134 m!163833))

(declare-fun m!163835 () Bool)

(assert (=> b!137134 m!163835))

(declare-fun m!163837 () Bool)

(assert (=> b!137134 m!163837))

(assert (=> b!137134 m!162543))

(declare-fun m!163839 () Bool)

(assert (=> b!137134 m!163839))

(declare-fun m!163841 () Bool)

(assert (=> b!137134 m!163841))

(declare-fun m!163843 () Bool)

(assert (=> b!137134 m!163843))

(declare-fun m!163845 () Bool)

(assert (=> b!137134 m!163845))

(declare-fun m!163847 () Bool)

(assert (=> b!137134 m!163847))

(declare-fun m!163849 () Bool)

(assert (=> b!137134 m!163849))

(assert (=> b!137134 m!162543))

(declare-fun m!163851 () Bool)

(assert (=> b!137134 m!163851))

(assert (=> b!137134 m!163833))

(assert (=> b!137134 m!163841))

(assert (=> b!137134 m!162731))

(declare-fun m!163853 () Bool)

(assert (=> b!137134 m!163853))

(assert (=> b!137134 m!162543))

(assert (=> b!137134 m!163831))

(assert (=> b!137134 m!163845))

(declare-fun m!163855 () Bool)

(assert (=> b!137134 m!163855))

(declare-fun m!163857 () Bool)

(assert (=> b!137134 m!163857))

(declare-fun m!163859 () Bool)

(assert (=> b!137134 m!163859))

(assert (=> b!137134 m!163857))

(declare-fun m!163861 () Bool)

(assert (=> b!137134 m!163861))

(declare-fun m!163863 () Bool)

(assert (=> bm!15112 m!163863))

(assert (=> d!42845 m!162751))

(assert (=> b!137132 m!162731))

(assert (=> b!137132 m!162731))

(assert (=> b!137132 m!162735))

(declare-fun m!163865 () Bool)

(assert (=> b!137139 m!163865))

(assert (=> b!137129 m!162731))

(assert (=> b!137129 m!162731))

(assert (=> b!137129 m!162735))

(declare-fun m!163867 () Bool)

(assert (=> b!137127 m!163867))

(assert (=> b!137125 m!162731))

(assert (=> b!137125 m!162731))

(declare-fun m!163869 () Bool)

(assert (=> b!137125 m!163869))

(assert (=> d!42677 d!42845))

(assert (=> d!42677 d!42589))

(declare-fun d!42847 () Bool)

(assert (=> d!42847 (= (validMask!0 (mask!7203 newMap!16)) (and (or (= (mask!7203 newMap!16) #b00000000000000000000000000000111) (= (mask!7203 newMap!16) #b00000000000000000000000000001111) (= (mask!7203 newMap!16) #b00000000000000000000000000011111) (= (mask!7203 newMap!16) #b00000000000000000000000000111111) (= (mask!7203 newMap!16) #b00000000000000000000000001111111) (= (mask!7203 newMap!16) #b00000000000000000000000011111111) (= (mask!7203 newMap!16) #b00000000000000000000000111111111) (= (mask!7203 newMap!16) #b00000000000000000000001111111111) (= (mask!7203 newMap!16) #b00000000000000000000011111111111) (= (mask!7203 newMap!16) #b00000000000000000000111111111111) (= (mask!7203 newMap!16) #b00000000000000000001111111111111) (= (mask!7203 newMap!16) #b00000000000000000011111111111111) (= (mask!7203 newMap!16) #b00000000000000000111111111111111) (= (mask!7203 newMap!16) #b00000000000000001111111111111111) (= (mask!7203 newMap!16) #b00000000000000011111111111111111) (= (mask!7203 newMap!16) #b00000000000000111111111111111111) (= (mask!7203 newMap!16) #b00000000000001111111111111111111) (= (mask!7203 newMap!16) #b00000000000011111111111111111111) (= (mask!7203 newMap!16) #b00000000000111111111111111111111) (= (mask!7203 newMap!16) #b00000000001111111111111111111111) (= (mask!7203 newMap!16) #b00000000011111111111111111111111) (= (mask!7203 newMap!16) #b00000000111111111111111111111111) (= (mask!7203 newMap!16) #b00000001111111111111111111111111) (= (mask!7203 newMap!16) #b00000011111111111111111111111111) (= (mask!7203 newMap!16) #b00000111111111111111111111111111) (= (mask!7203 newMap!16) #b00001111111111111111111111111111) (= (mask!7203 newMap!16) #b00011111111111111111111111111111) (= (mask!7203 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!7203 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!42677 d!42847))

(declare-fun d!42849 () Bool)

(assert (=> d!42849 (= (+!171 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(assert (=> d!42849 true))

(declare-fun _$8!121 () Unit!4291)

(assert (=> d!42849 (= (choose!847 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) lt!71262 (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2889 newMap!16)) _$8!121)))

(declare-fun bs!5753 () Bool)

(assert (= bs!5753 d!42849))

(assert (=> bs!5753 m!162585))

(assert (=> bs!5753 m!162585))

(assert (=> bs!5753 m!163317))

(assert (=> bs!5753 m!162543))

(assert (=> bs!5753 m!163315))

(assert (=> d!42677 d!42849))

(declare-fun d!42851 () Bool)

(declare-fun e!89289 () Bool)

(assert (=> d!42851 e!89289))

(declare-fun res!65736 () Bool)

(assert (=> d!42851 (=> (not res!65736) (not e!89289))))

(declare-fun lt!71766 () ListLongMap!1715)

(assert (=> d!42851 (= res!65736 (contains!901 lt!71766 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(declare-fun lt!71763 () List!1741)

(assert (=> d!42851 (= lt!71766 (ListLongMap!1716 lt!71763))))

(declare-fun lt!71764 () Unit!4291)

(declare-fun lt!71765 () Unit!4291)

(assert (=> d!42851 (= lt!71764 lt!71765)))

(assert (=> d!42851 (= (getValueByKey!172 lt!71763 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (=> d!42851 (= lt!71765 (lemmaContainsTupThenGetReturnValue!89 lt!71763 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (=> d!42851 (= lt!71763 (insertStrictlySorted!91 (toList!873 call!15062) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (=> d!42851 (= (+!171 call!15062 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))) lt!71766)))

(declare-fun b!137143 () Bool)

(declare-fun res!65735 () Bool)

(assert (=> b!137143 (=> (not res!65735) (not e!89289))))

(assert (=> b!137143 (= res!65735 (= (getValueByKey!172 (toList!873 lt!71766) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(declare-fun b!137144 () Bool)

(assert (=> b!137144 (= e!89289 (contains!904 (toList!873 lt!71766) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))

(assert (= (and d!42851 res!65736) b!137143))

(assert (= (and b!137143 res!65735) b!137144))

(declare-fun m!163871 () Bool)

(assert (=> d!42851 m!163871))

(declare-fun m!163873 () Bool)

(assert (=> d!42851 m!163873))

(declare-fun m!163875 () Bool)

(assert (=> d!42851 m!163875))

(declare-fun m!163877 () Bool)

(assert (=> d!42851 m!163877))

(declare-fun m!163879 () Bool)

(assert (=> b!137143 m!163879))

(declare-fun m!163881 () Bool)

(assert (=> b!137144 m!163881))

(assert (=> b!136767 d!42851))

(declare-fun d!42853 () Bool)

(declare-fun e!89290 () Bool)

(assert (=> d!42853 e!89290))

(declare-fun res!65738 () Bool)

(assert (=> d!42853 (=> (not res!65738) (not e!89290))))

(declare-fun lt!71770 () ListLongMap!1715)

(assert (=> d!42853 (= res!65738 (contains!901 lt!71770 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(declare-fun lt!71767 () List!1741)

(assert (=> d!42853 (= lt!71770 (ListLongMap!1716 lt!71767))))

(declare-fun lt!71768 () Unit!4291)

(declare-fun lt!71769 () Unit!4291)

(assert (=> d!42853 (= lt!71768 lt!71769)))

(assert (=> d!42853 (= (getValueByKey!172 lt!71767 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (=> d!42853 (= lt!71769 (lemmaContainsTupThenGetReturnValue!89 lt!71767 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (=> d!42853 (= lt!71767 (insertStrictlySorted!91 (toList!873 call!15032) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (=> d!42853 (= (+!171 call!15032 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))) lt!71770)))

(declare-fun b!137145 () Bool)

(declare-fun res!65737 () Bool)

(assert (=> b!137145 (=> (not res!65737) (not e!89290))))

(assert (=> b!137145 (= res!65737 (= (getValueByKey!172 (toList!873 lt!71770) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(declare-fun b!137146 () Bool)

(assert (=> b!137146 (= e!89290 (contains!904 (toList!873 lt!71770) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))

(assert (= (and d!42853 res!65738) b!137145))

(assert (= (and b!137145 res!65737) b!137146))

(declare-fun m!163883 () Bool)

(assert (=> d!42853 m!163883))

(declare-fun m!163885 () Bool)

(assert (=> d!42853 m!163885))

(declare-fun m!163887 () Bool)

(assert (=> d!42853 m!163887))

(declare-fun m!163889 () Bool)

(assert (=> d!42853 m!163889))

(declare-fun m!163891 () Bool)

(assert (=> b!137145 m!163891))

(declare-fun m!163893 () Bool)

(assert (=> b!137146 m!163893))

(assert (=> b!136583 d!42853))

(declare-fun d!42855 () Bool)

(assert (=> d!42855 (= (apply!117 lt!71391 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!172 (toList!873 lt!71391) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5754 () Bool)

(assert (= bs!5754 d!42855))

(assert (=> bs!5754 m!163405))

(assert (=> bs!5754 m!163405))

(declare-fun m!163895 () Bool)

(assert (=> bs!5754 m!163895))

(assert (=> b!136663 d!42855))

(declare-fun d!42857 () Bool)

(assert (=> d!42857 (= (get!1502 (getValueByKey!172 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!3224 (getValueByKey!172 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!42583 d!42857))

(declare-fun c!25716 () Bool)

(declare-fun d!42859 () Bool)

(assert (=> d!42859 (= c!25716 (and ((_ is Cons!1737) (toList!873 lt!71161)) (= (_1!1321 (h!2343 (toList!873 lt!71161))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun e!89291 () Option!178)

(assert (=> d!42859 (= (getValueByKey!172 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!89291)))

(declare-fun b!137149 () Bool)

(declare-fun e!89292 () Option!178)

(assert (=> b!137149 (= e!89292 (getValueByKey!172 (t!6241 (toList!873 lt!71161)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!137147 () Bool)

(assert (=> b!137147 (= e!89291 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71161)))))))

(declare-fun b!137150 () Bool)

(assert (=> b!137150 (= e!89292 None!176)))

(declare-fun b!137148 () Bool)

(assert (=> b!137148 (= e!89291 e!89292)))

(declare-fun c!25717 () Bool)

(assert (=> b!137148 (= c!25717 (and ((_ is Cons!1737) (toList!873 lt!71161)) (not (= (_1!1321 (h!2343 (toList!873 lt!71161))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(assert (= (and d!42859 c!25716) b!137147))

(assert (= (and d!42859 (not c!25716)) b!137148))

(assert (= (and b!137148 c!25717) b!137149))

(assert (= (and b!137148 (not c!25717)) b!137150))

(assert (=> b!137149 m!162591))

(declare-fun m!163897 () Bool)

(assert (=> b!137149 m!163897))

(assert (=> d!42583 d!42859))

(assert (=> d!42589 d!42847))

(declare-fun d!42861 () Bool)

(declare-fun res!65739 () Bool)

(declare-fun e!89293 () Bool)

(assert (=> d!42861 (=> res!65739 e!89293)))

(assert (=> d!42861 (= res!65739 (and ((_ is Cons!1737) (toList!873 lt!71161)) (= (_1!1321 (h!2343 (toList!873 lt!71161))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!42861 (= (containsKey!176 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!89293)))

(declare-fun b!137151 () Bool)

(declare-fun e!89294 () Bool)

(assert (=> b!137151 (= e!89293 e!89294)))

(declare-fun res!65740 () Bool)

(assert (=> b!137151 (=> (not res!65740) (not e!89294))))

(assert (=> b!137151 (= res!65740 (and (or (not ((_ is Cons!1737) (toList!873 lt!71161))) (bvsle (_1!1321 (h!2343 (toList!873 lt!71161))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1737) (toList!873 lt!71161)) (bvslt (_1!1321 (h!2343 (toList!873 lt!71161))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!137152 () Bool)

(assert (=> b!137152 (= e!89294 (containsKey!176 (t!6241 (toList!873 lt!71161)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!42861 (not res!65739)) b!137151))

(assert (= (and b!137151 res!65740) b!137152))

(assert (=> b!137152 m!162591))

(declare-fun m!163899 () Bool)

(assert (=> b!137152 m!163899))

(assert (=> d!42577 d!42861))

(assert (=> d!42579 d!42847))

(declare-fun d!42863 () Bool)

(declare-fun e!89295 () Bool)

(assert (=> d!42863 e!89295))

(declare-fun res!65742 () Bool)

(assert (=> d!42863 (=> (not res!65742) (not e!89295))))

(declare-fun lt!71774 () ListLongMap!1715)

(assert (=> d!42863 (= res!65742 (contains!901 lt!71774 (_1!1321 (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(declare-fun lt!71771 () List!1741)

(assert (=> d!42863 (= lt!71774 (ListLongMap!1716 lt!71771))))

(declare-fun lt!71772 () Unit!4291)

(declare-fun lt!71773 () Unit!4291)

(assert (=> d!42863 (= lt!71772 lt!71773)))

(assert (=> d!42863 (= (getValueByKey!172 lt!71771 (_1!1321 (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(assert (=> d!42863 (= lt!71773 (lemmaContainsTupThenGetReturnValue!89 lt!71771 (_1!1321 (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (_2!1321 (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(assert (=> d!42863 (= lt!71771 (insertStrictlySorted!91 (toList!873 (ite c!25557 call!15045 (ite c!25558 call!15042 call!15040))) (_1!1321 (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (_2!1321 (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(assert (=> d!42863 (= (+!171 (ite c!25557 call!15045 (ite c!25558 call!15042 call!15040)) (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) lt!71774)))

(declare-fun b!137153 () Bool)

(declare-fun res!65741 () Bool)

(assert (=> b!137153 (=> (not res!65741) (not e!89295))))

(assert (=> b!137153 (= res!65741 (= (getValueByKey!172 (toList!873 lt!71774) (_1!1321 (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))))

(declare-fun b!137154 () Bool)

(assert (=> b!137154 (= e!89295 (contains!904 (toList!873 lt!71774) (ite (or c!25557 c!25558) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (= (and d!42863 res!65742) b!137153))

(assert (= (and b!137153 res!65741) b!137154))

(declare-fun m!163901 () Bool)

(assert (=> d!42863 m!163901))

(declare-fun m!163903 () Bool)

(assert (=> d!42863 m!163903))

(declare-fun m!163905 () Bool)

(assert (=> d!42863 m!163905))

(declare-fun m!163907 () Bool)

(assert (=> d!42863 m!163907))

(declare-fun m!163909 () Bool)

(assert (=> b!137153 m!163909))

(declare-fun m!163911 () Bool)

(assert (=> b!137154 m!163911))

(assert (=> bm!15042 d!42863))

(declare-fun lt!71775 () Bool)

(declare-fun d!42865 () Bool)

(assert (=> d!42865 (= lt!71775 (select (content!134 (toList!873 lt!71434)) (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun e!89297 () Bool)

(assert (=> d!42865 (= lt!71775 e!89297)))

(declare-fun res!65743 () Bool)

(assert (=> d!42865 (=> (not res!65743) (not e!89297))))

(assert (=> d!42865 (= res!65743 ((_ is Cons!1737) (toList!873 lt!71434)))))

(assert (=> d!42865 (= (contains!904 (toList!873 lt!71434) (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71775)))

(declare-fun b!137155 () Bool)

(declare-fun e!89296 () Bool)

(assert (=> b!137155 (= e!89297 e!89296)))

(declare-fun res!65744 () Bool)

(assert (=> b!137155 (=> res!65744 e!89296)))

(assert (=> b!137155 (= res!65744 (= (h!2343 (toList!873 lt!71434)) (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!137156 () Bool)

(assert (=> b!137156 (= e!89296 (contains!904 (t!6241 (toList!873 lt!71434)) (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(assert (= (and d!42865 res!65743) b!137155))

(assert (= (and b!137155 (not res!65744)) b!137156))

(declare-fun m!163913 () Bool)

(assert (=> d!42865 m!163913))

(declare-fun m!163915 () Bool)

(assert (=> d!42865 m!163915))

(declare-fun m!163917 () Bool)

(assert (=> b!137156 m!163917))

(assert (=> b!136736 d!42865))

(declare-fun d!42867 () Bool)

(declare-fun e!89299 () Bool)

(assert (=> d!42867 e!89299))

(declare-fun res!65745 () Bool)

(assert (=> d!42867 (=> res!65745 e!89299)))

(declare-fun lt!71779 () Bool)

(assert (=> d!42867 (= res!65745 (not lt!71779))))

(declare-fun lt!71778 () Bool)

(assert (=> d!42867 (= lt!71779 lt!71778)))

(declare-fun lt!71776 () Unit!4291)

(declare-fun e!89298 () Unit!4291)

(assert (=> d!42867 (= lt!71776 e!89298)))

(declare-fun c!25718 () Bool)

(assert (=> d!42867 (= c!25718 lt!71778)))

(assert (=> d!42867 (= lt!71778 (containsKey!176 (toList!873 lt!71380) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!42867 (= (contains!901 lt!71380 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!71779)))

(declare-fun b!137157 () Bool)

(declare-fun lt!71777 () Unit!4291)

(assert (=> b!137157 (= e!89298 lt!71777)))

(assert (=> b!137157 (= lt!71777 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71380) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!137157 (isDefined!126 (getValueByKey!172 (toList!873 lt!71380) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137158 () Bool)

(declare-fun Unit!4327 () Unit!4291)

(assert (=> b!137158 (= e!89298 Unit!4327)))

(declare-fun b!137159 () Bool)

(assert (=> b!137159 (= e!89299 (isDefined!126 (getValueByKey!172 (toList!873 lt!71380) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!42867 c!25718) b!137157))

(assert (= (and d!42867 (not c!25718)) b!137158))

(assert (= (and d!42867 (not res!65745)) b!137159))

(declare-fun m!163919 () Bool)

(assert (=> d!42867 m!163919))

(declare-fun m!163921 () Bool)

(assert (=> b!137157 m!163921))

(assert (=> b!137157 m!162961))

(assert (=> b!137157 m!162961))

(declare-fun m!163923 () Bool)

(assert (=> b!137157 m!163923))

(assert (=> b!137159 m!162961))

(assert (=> b!137159 m!162961))

(assert (=> b!137159 m!163923))

(assert (=> d!42599 d!42867))

(declare-fun d!42869 () Bool)

(declare-fun c!25719 () Bool)

(assert (=> d!42869 (= c!25719 (and ((_ is Cons!1737) lt!71377) (= (_1!1321 (h!2343 lt!71377)) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!89300 () Option!178)

(assert (=> d!42869 (= (getValueByKey!172 lt!71377 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!89300)))

(declare-fun e!89301 () Option!178)

(declare-fun b!137162 () Bool)

(assert (=> b!137162 (= e!89301 (getValueByKey!172 (t!6241 lt!71377) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137160 () Bool)

(assert (=> b!137160 (= e!89300 (Some!177 (_2!1321 (h!2343 lt!71377))))))

(declare-fun b!137163 () Bool)

(assert (=> b!137163 (= e!89301 None!176)))

(declare-fun b!137161 () Bool)

(assert (=> b!137161 (= e!89300 e!89301)))

(declare-fun c!25720 () Bool)

(assert (=> b!137161 (= c!25720 (and ((_ is Cons!1737) lt!71377) (not (= (_1!1321 (h!2343 lt!71377)) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(assert (= (and d!42869 c!25719) b!137160))

(assert (= (and d!42869 (not c!25719)) b!137161))

(assert (= (and b!137161 c!25720) b!137162))

(assert (= (and b!137161 (not c!25720)) b!137163))

(declare-fun m!163925 () Bool)

(assert (=> b!137162 m!163925))

(assert (=> d!42599 d!42869))

(declare-fun d!42871 () Bool)

(assert (=> d!42871 (= (getValueByKey!172 lt!71377 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!177 (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!71780 () Unit!4291)

(assert (=> d!42871 (= lt!71780 (choose!848 lt!71377 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!89302 () Bool)

(assert (=> d!42871 e!89302))

(declare-fun res!65746 () Bool)

(assert (=> d!42871 (=> (not res!65746) (not e!89302))))

(assert (=> d!42871 (= res!65746 (isStrictlySorted!318 lt!71377))))

(assert (=> d!42871 (= (lemmaContainsTupThenGetReturnValue!89 lt!71377 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!71780)))

(declare-fun b!137164 () Bool)

(declare-fun res!65747 () Bool)

(assert (=> b!137164 (=> (not res!65747) (not e!89302))))

(assert (=> b!137164 (= res!65747 (containsKey!176 lt!71377 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137165 () Bool)

(assert (=> b!137165 (= e!89302 (contains!904 lt!71377 (tuple2!2623 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!42871 res!65746) b!137164))

(assert (= (and b!137164 res!65747) b!137165))

(assert (=> d!42871 m!162955))

(declare-fun m!163927 () Bool)

(assert (=> d!42871 m!163927))

(declare-fun m!163929 () Bool)

(assert (=> d!42871 m!163929))

(declare-fun m!163931 () Bool)

(assert (=> b!137164 m!163931))

(declare-fun m!163933 () Bool)

(assert (=> b!137165 m!163933))

(assert (=> d!42599 d!42871))

(declare-fun b!137166 () Bool)

(declare-fun e!89306 () List!1741)

(declare-fun call!15118 () List!1741)

(assert (=> b!137166 (= e!89306 call!15118)))

(declare-fun e!89304 () Bool)

(declare-fun lt!71781 () List!1741)

(declare-fun b!137167 () Bool)

(assert (=> b!137167 (= e!89304 (contains!904 lt!71781 (tuple2!2623 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!137168 () Bool)

(declare-fun e!89303 () List!1741)

(declare-fun call!15119 () List!1741)

(assert (=> b!137168 (= e!89303 call!15119)))

(declare-fun b!137169 () Bool)

(declare-fun e!89305 () List!1741)

(assert (=> b!137169 (= e!89305 e!89306)))

(declare-fun c!25721 () Bool)

(assert (=> b!137169 (= c!25721 (and ((_ is Cons!1737) (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021))) (= (_1!1321 (h!2343 (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021)))) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!25724 () Bool)

(declare-fun bm!15114 () Bool)

(declare-fun e!89307 () List!1741)

(declare-fun call!15117 () List!1741)

(assert (=> bm!15114 (= call!15117 ($colon$colon!92 e!89307 (ite c!25724 (h!2343 (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021))) (tuple2!2623 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!25723 () Bool)

(assert (=> bm!15114 (= c!25723 c!25724)))

(declare-fun b!137170 () Bool)

(assert (=> b!137170 (= e!89303 call!15119)))

(declare-fun bm!15115 () Bool)

(assert (=> bm!15115 (= call!15119 call!15118)))

(declare-fun d!42873 () Bool)

(assert (=> d!42873 e!89304))

(declare-fun res!65749 () Bool)

(assert (=> d!42873 (=> (not res!65749) (not e!89304))))

(assert (=> d!42873 (= res!65749 (isStrictlySorted!318 lt!71781))))

(assert (=> d!42873 (= lt!71781 e!89305)))

(assert (=> d!42873 (= c!25724 (and ((_ is Cons!1737) (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021))) (bvslt (_1!1321 (h!2343 (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021)))) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!42873 (isStrictlySorted!318 (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021)))))

(assert (=> d!42873 (= (insertStrictlySorted!91 (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021)) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!71781)))

(declare-fun c!25722 () Bool)

(declare-fun b!137171 () Bool)

(assert (=> b!137171 (= e!89307 (ite c!25721 (t!6241 (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021))) (ite c!25722 (Cons!1737 (h!2343 (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021))) (t!6241 (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021)))) Nil!1738)))))

(declare-fun b!137172 () Bool)

(declare-fun res!65748 () Bool)

(assert (=> b!137172 (=> (not res!65748) (not e!89304))))

(assert (=> b!137172 (= res!65748 (containsKey!176 lt!71781 (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137173 () Bool)

(assert (=> b!137173 (= c!25722 (and ((_ is Cons!1737) (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021))) (bvsgt (_1!1321 (h!2343 (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021)))) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!137173 (= e!89306 e!89303)))

(declare-fun bm!15116 () Bool)

(assert (=> bm!15116 (= call!15118 call!15117)))

(declare-fun b!137174 () Bool)

(assert (=> b!137174 (= e!89305 call!15117)))

(declare-fun b!137175 () Bool)

(assert (=> b!137175 (= e!89307 (insertStrictlySorted!91 (t!6241 (toList!873 (ite c!25512 (ite c!25514 call!15013 call!15010) call!15021))) (_1!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1321 (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!42873 c!25724) b!137174))

(assert (= (and d!42873 (not c!25724)) b!137169))

(assert (= (and b!137169 c!25721) b!137166))

(assert (= (and b!137169 (not c!25721)) b!137173))

(assert (= (and b!137173 c!25722) b!137168))

(assert (= (and b!137173 (not c!25722)) b!137170))

(assert (= (or b!137168 b!137170) bm!15115))

(assert (= (or b!137166 bm!15115) bm!15116))

(assert (= (or b!137174 bm!15116) bm!15114))

(assert (= (and bm!15114 c!25723) b!137175))

(assert (= (and bm!15114 (not c!25723)) b!137171))

(assert (= (and d!42873 res!65749) b!137172))

(assert (= (and b!137172 res!65748) b!137167))

(declare-fun m!163935 () Bool)

(assert (=> b!137175 m!163935))

(declare-fun m!163937 () Bool)

(assert (=> b!137172 m!163937))

(declare-fun m!163939 () Bool)

(assert (=> d!42873 m!163939))

(declare-fun m!163941 () Bool)

(assert (=> d!42873 m!163941))

(declare-fun m!163943 () Bool)

(assert (=> b!137167 m!163943))

(declare-fun m!163945 () Bool)

(assert (=> bm!15114 m!163945))

(assert (=> d!42599 d!42873))

(assert (=> b!136763 d!42809))

(assert (=> b!136579 d!42809))

(declare-fun d!42875 () Bool)

(assert (=> d!42875 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156))))

(declare-fun lt!71782 () Unit!4291)

(assert (=> d!42875 (= lt!71782 (choose!842 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156))))

(declare-fun e!89308 () Bool)

(assert (=> d!42875 e!89308))

(declare-fun res!65750 () Bool)

(assert (=> d!42875 (=> (not res!65750) (not e!89308))))

(assert (=> d!42875 (= res!65750 (isStrictlySorted!318 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> d!42875 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156) lt!71782)))

(declare-fun b!137176 () Bool)

(assert (=> b!137176 (= e!89308 (containsKey!176 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156))))

(assert (= (and d!42875 res!65750) b!137176))

(assert (=> d!42875 m!163125))

(assert (=> d!42875 m!163125))

(assert (=> d!42875 m!163127))

(declare-fun m!163947 () Bool)

(assert (=> d!42875 m!163947))

(declare-fun m!163949 () Bool)

(assert (=> d!42875 m!163949))

(assert (=> b!137176 m!163121))

(assert (=> b!136747 d!42875))

(declare-fun d!42877 () Bool)

(assert (=> d!42877 (= (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156)) (not (isEmpty!418 (getValueByKey!172 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156))))))

(declare-fun bs!5755 () Bool)

(assert (= bs!5755 d!42877))

(assert (=> bs!5755 m!163125))

(declare-fun m!163951 () Bool)

(assert (=> bs!5755 m!163951))

(assert (=> b!136747 d!42877))

(declare-fun c!25725 () Bool)

(declare-fun d!42879 () Bool)

(assert (=> d!42879 (= c!25725 (and ((_ is Cons!1737) (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))) (= (_1!1321 (h!2343 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))) lt!71156)))))

(declare-fun e!89309 () Option!178)

(assert (=> d!42879 (= (getValueByKey!172 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71156) e!89309)))

(declare-fun e!89310 () Option!178)

(declare-fun b!137179 () Bool)

(assert (=> b!137179 (= e!89310 (getValueByKey!172 (t!6241 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))) lt!71156))))

(declare-fun b!137177 () Bool)

(assert (=> b!137177 (= e!89309 (Some!177 (_2!1321 (h!2343 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))))

(declare-fun b!137180 () Bool)

(assert (=> b!137180 (= e!89310 None!176)))

(declare-fun b!137178 () Bool)

(assert (=> b!137178 (= e!89309 e!89310)))

(declare-fun c!25726 () Bool)

(assert (=> b!137178 (= c!25726 (and ((_ is Cons!1737) (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))) (not (= (_1!1321 (h!2343 (toList!873 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))) lt!71156))))))

(assert (= (and d!42879 c!25725) b!137177))

(assert (= (and d!42879 (not c!25725)) b!137178))

(assert (= (and b!137178 c!25726) b!137179))

(assert (= (and b!137178 (not c!25726)) b!137180))

(declare-fun m!163953 () Bool)

(assert (=> b!137179 m!163953))

(assert (=> b!136747 d!42879))

(declare-fun b!137181 () Bool)

(declare-fun e!89311 () Bool)

(assert (=> b!137181 (= e!89311 (contains!903 Nil!1740 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!137182 () Bool)

(declare-fun e!89314 () Bool)

(declare-fun e!89312 () Bool)

(assert (=> b!137182 (= e!89314 e!89312)))

(declare-fun res!65753 () Bool)

(assert (=> b!137182 (=> (not res!65753) (not e!89312))))

(assert (=> b!137182 (= res!65753 (not e!89311))))

(declare-fun res!65751 () Bool)

(assert (=> b!137182 (=> (not res!65751) (not e!89311))))

(assert (=> b!137182 (= res!65751 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!137183 () Bool)

(declare-fun e!89313 () Bool)

(declare-fun call!15120 () Bool)

(assert (=> b!137183 (= e!89313 call!15120)))

(declare-fun b!137184 () Bool)

(assert (=> b!137184 (= e!89313 call!15120)))

(declare-fun b!137185 () Bool)

(assert (=> b!137185 (= e!89312 e!89313)))

(declare-fun c!25727 () Bool)

(assert (=> b!137185 (= c!25727 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!42881 () Bool)

(declare-fun res!65752 () Bool)

(assert (=> d!42881 (=> res!65752 e!89314)))

(assert (=> d!42881 (= res!65752 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> d!42881 (= (arrayNoDuplicates!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000000 Nil!1740) e!89314)))

(declare-fun bm!15117 () Bool)

(assert (=> bm!15117 (= call!15120 (arrayNoDuplicates!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!25727 (Cons!1739 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) #b00000000000000000000000000000000) Nil!1740) Nil!1740)))))

(assert (= (and d!42881 (not res!65752)) b!137182))

(assert (= (and b!137182 res!65751) b!137181))

(assert (= (and b!137182 res!65753) b!137185))

(assert (= (and b!137185 c!25727) b!137184))

(assert (= (and b!137185 (not c!25727)) b!137183))

(assert (= (or b!137184 b!137183) bm!15117))

(assert (=> b!137181 m!163471))

(assert (=> b!137181 m!163471))

(declare-fun m!163955 () Bool)

(assert (=> b!137181 m!163955))

(assert (=> b!137182 m!163471))

(assert (=> b!137182 m!163471))

(assert (=> b!137182 m!163473))

(assert (=> b!137185 m!163471))

(assert (=> b!137185 m!163471))

(assert (=> b!137185 m!163473))

(assert (=> bm!15117 m!163471))

(declare-fun m!163957 () Bool)

(assert (=> bm!15117 m!163957))

(assert (=> b!136717 d!42881))

(declare-fun bm!15118 () Bool)

(declare-fun call!15121 () ListLongMap!1715)

(assert (=> bm!15118 (= call!15121 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun b!137186 () Bool)

(declare-fun e!89321 () Bool)

(declare-fun e!89319 () Bool)

(assert (=> b!137186 (= e!89321 e!89319)))

(declare-fun c!25729 () Bool)

(declare-fun e!89318 () Bool)

(assert (=> b!137186 (= c!25729 e!89318)))

(declare-fun res!65757 () Bool)

(assert (=> b!137186 (=> (not res!65757) (not e!89318))))

(assert (=> b!137186 (= res!65757 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!137187 () Bool)

(declare-fun e!89316 () Bool)

(assert (=> b!137187 (= e!89319 e!89316)))

(assert (=> b!137187 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun res!65755 () Bool)

(declare-fun lt!71786 () ListLongMap!1715)

(assert (=> b!137187 (= res!65755 (contains!901 lt!71786 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!137187 (=> (not res!65755) (not e!89316))))

(declare-fun b!137188 () Bool)

(declare-fun lt!71785 () Unit!4291)

(declare-fun lt!71784 () Unit!4291)

(assert (=> b!137188 (= lt!71785 lt!71784)))

(declare-fun lt!71787 () ListLongMap!1715)

(declare-fun lt!71789 () (_ BitVec 64))

(declare-fun lt!71783 () (_ BitVec 64))

(declare-fun lt!71788 () V!3499)

(assert (=> b!137188 (not (contains!901 (+!171 lt!71787 (tuple2!2623 lt!71783 lt!71788)) lt!71789))))

(assert (=> b!137188 (= lt!71784 (addStillNotContains!64 lt!71787 lt!71783 lt!71788 lt!71789))))

(assert (=> b!137188 (= lt!71789 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!137188 (= lt!71788 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!137188 (= lt!71783 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!137188 (= lt!71787 call!15121)))

(declare-fun e!89317 () ListLongMap!1715)

(assert (=> b!137188 (= e!89317 (+!171 call!15121 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!137189 () Bool)

(assert (=> b!137189 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> b!137189 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2543 (_values!2872 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> b!137189 (= e!89316 (= (apply!117 lt!71786 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137190 () Bool)

(declare-fun e!89315 () Bool)

(assert (=> b!137190 (= e!89315 (isEmpty!417 lt!71786))))

(declare-fun b!137191 () Bool)

(assert (=> b!137191 (= e!89318 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!137191 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun d!42883 () Bool)

(assert (=> d!42883 e!89321))

(declare-fun res!65756 () Bool)

(assert (=> d!42883 (=> (not res!65756) (not e!89321))))

(assert (=> d!42883 (= res!65756 (not (contains!901 lt!71786 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!89320 () ListLongMap!1715)

(assert (=> d!42883 (= lt!71786 e!89320)))

(declare-fun c!25730 () Bool)

(assert (=> d!42883 (= c!25730 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> d!42883 (validMask!0 (mask!7203 (v!3220 (underlying!460 thiss!992))))))

(assert (=> d!42883 (= (getCurrentListMapNoExtraKeys!138 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992)))) lt!71786)))

(declare-fun b!137192 () Bool)

(assert (=> b!137192 (= e!89320 e!89317)))

(declare-fun c!25728 () Bool)

(assert (=> b!137192 (= c!25728 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!137193 () Bool)

(assert (=> b!137193 (= e!89319 e!89315)))

(declare-fun c!25731 () Bool)

(assert (=> b!137193 (= c!25731 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!137194 () Bool)

(assert (=> b!137194 (= e!89320 (ListLongMap!1716 Nil!1738))))

(declare-fun b!137195 () Bool)

(assert (=> b!137195 (= e!89317 call!15121)))

(declare-fun b!137196 () Bool)

(assert (=> b!137196 (= e!89315 (= lt!71786 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (_values!2872 (v!3220 (underlying!460 thiss!992))) (mask!7203 (v!3220 (underlying!460 thiss!992))) (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) (minValue!2742 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!137197 () Bool)

(declare-fun res!65754 () Bool)

(assert (=> b!137197 (=> (not res!65754) (not e!89321))))

(assert (=> b!137197 (= res!65754 (not (contains!901 lt!71786 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42883 c!25730) b!137194))

(assert (= (and d!42883 (not c!25730)) b!137192))

(assert (= (and b!137192 c!25728) b!137188))

(assert (= (and b!137192 (not c!25728)) b!137195))

(assert (= (or b!137188 b!137195) bm!15118))

(assert (= (and d!42883 res!65756) b!137197))

(assert (= (and b!137197 res!65754) b!137186))

(assert (= (and b!137186 res!65757) b!137191))

(assert (= (and b!137186 c!25729) b!137187))

(assert (= (and b!137186 (not c!25729)) b!137193))

(assert (= (and b!137187 res!65755) b!137189))

(assert (= (and b!137193 c!25731) b!137196))

(assert (= (and b!137193 (not c!25731)) b!137190))

(declare-fun b_lambda!6153 () Bool)

(assert (=> (not b_lambda!6153) (not b!137188)))

(assert (=> b!137188 t!6238))

(declare-fun b_and!8509 () Bool)

(assert (= b_and!8505 (and (=> t!6238 result!4045) b_and!8509)))

(assert (=> b!137188 t!6240))

(declare-fun b_and!8511 () Bool)

(assert (= b_and!8507 (and (=> t!6240 result!4049) b_and!8511)))

(declare-fun b_lambda!6155 () Bool)

(assert (=> (not b_lambda!6155) (not b!137189)))

(assert (=> b!137189 t!6238))

(declare-fun b_and!8513 () Bool)

(assert (= b_and!8509 (and (=> t!6238 result!4045) b_and!8513)))

(assert (=> b!137189 t!6240))

(declare-fun b_and!8515 () Bool)

(assert (= b_and!8511 (and (=> t!6240 result!4049) b_and!8515)))

(assert (=> b!137191 m!163309))

(assert (=> b!137191 m!163309))

(declare-fun m!163959 () Bool)

(assert (=> b!137191 m!163959))

(declare-fun m!163961 () Bool)

(assert (=> b!137188 m!163961))

(assert (=> b!137188 m!162541))

(declare-fun m!163963 () Bool)

(assert (=> b!137188 m!163963))

(declare-fun m!163965 () Bool)

(assert (=> b!137188 m!163965))

(declare-fun m!163967 () Bool)

(assert (=> b!137188 m!163967))

(assert (=> b!137188 m!163967))

(declare-fun m!163969 () Bool)

(assert (=> b!137188 m!163969))

(assert (=> b!137188 m!163963))

(assert (=> b!137188 m!162541))

(declare-fun m!163971 () Bool)

(assert (=> b!137188 m!163971))

(assert (=> b!137188 m!163309))

(declare-fun m!163973 () Bool)

(assert (=> b!137197 m!163973))

(declare-fun m!163975 () Bool)

(assert (=> bm!15118 m!163975))

(assert (=> b!137187 m!163309))

(assert (=> b!137187 m!163309))

(declare-fun m!163977 () Bool)

(assert (=> b!137187 m!163977))

(assert (=> b!137196 m!163975))

(assert (=> b!137189 m!162541))

(assert (=> b!137189 m!163963))

(assert (=> b!137189 m!163309))

(declare-fun m!163979 () Bool)

(assert (=> b!137189 m!163979))

(assert (=> b!137189 m!163963))

(assert (=> b!137189 m!162541))

(assert (=> b!137189 m!163971))

(assert (=> b!137189 m!163309))

(declare-fun m!163981 () Bool)

(assert (=> d!42883 m!163981))

(assert (=> d!42883 m!162635))

(assert (=> b!137192 m!163309))

(assert (=> b!137192 m!163309))

(assert (=> b!137192 m!163959))

(declare-fun m!163983 () Bool)

(assert (=> b!137190 m!163983))

(assert (=> b!136713 d!42883))

(declare-fun d!42885 () Bool)

(assert (=> d!42885 (= (inRange!0 (ite c!25615 (index!3306 lt!71582) (ite c!25616 (index!3305 lt!71564) (index!3308 lt!71564))) (mask!7203 newMap!16)) (and (bvsge (ite c!25615 (index!3306 lt!71582) (ite c!25616 (index!3305 lt!71564) (index!3308 lt!71564))) #b00000000000000000000000000000000) (bvslt (ite c!25615 (index!3306 lt!71582) (ite c!25616 (index!3305 lt!71564) (index!3308 lt!71564))) (bvadd (mask!7203 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!15077 d!42885))

(declare-fun d!42887 () Bool)

(declare-fun e!89323 () Bool)

(assert (=> d!42887 e!89323))

(declare-fun res!65758 () Bool)

(assert (=> d!42887 (=> res!65758 e!89323)))

(declare-fun lt!71793 () Bool)

(assert (=> d!42887 (= res!65758 (not lt!71793))))

(declare-fun lt!71792 () Bool)

(assert (=> d!42887 (= lt!71793 lt!71792)))

(declare-fun lt!71790 () Unit!4291)

(declare-fun e!89322 () Unit!4291)

(assert (=> d!42887 (= lt!71790 e!89322)))

(declare-fun c!25732 () Bool)

(assert (=> d!42887 (= c!25732 lt!71792)))

(assert (=> d!42887 (= lt!71792 (containsKey!176 (toList!873 lt!71391) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42887 (= (contains!901 lt!71391 #b1000000000000000000000000000000000000000000000000000000000000000) lt!71793)))

(declare-fun b!137198 () Bool)

(declare-fun lt!71791 () Unit!4291)

(assert (=> b!137198 (= e!89322 lt!71791)))

(assert (=> b!137198 (= lt!71791 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71391) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137198 (isDefined!126 (getValueByKey!172 (toList!873 lt!71391) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137199 () Bool)

(declare-fun Unit!4328 () Unit!4291)

(assert (=> b!137199 (= e!89322 Unit!4328)))

(declare-fun b!137200 () Bool)

(assert (=> b!137200 (= e!89323 (isDefined!126 (getValueByKey!172 (toList!873 lt!71391) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42887 c!25732) b!137198))

(assert (= (and d!42887 (not c!25732)) b!137199))

(assert (= (and d!42887 (not res!65758)) b!137200))

(declare-fun m!163985 () Bool)

(assert (=> d!42887 m!163985))

(declare-fun m!163987 () Bool)

(assert (=> b!137198 m!163987))

(declare-fun m!163989 () Bool)

(assert (=> b!137198 m!163989))

(assert (=> b!137198 m!163989))

(declare-fun m!163991 () Bool)

(assert (=> b!137198 m!163991))

(assert (=> b!137200 m!163989))

(assert (=> b!137200 m!163989))

(assert (=> b!137200 m!163991))

(assert (=> bm!15054 d!42887))

(assert (=> d!42653 d!42629))

(declare-fun d!42889 () Bool)

(assert (=> d!42889 (= (apply!117 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71170) (apply!117 lt!71169 lt!71170))))

(assert (=> d!42889 true))

(declare-fun _$34!989 () Unit!4291)

(assert (=> d!42889 (= (choose!844 lt!71169 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71170) _$34!989)))

(declare-fun bs!5756 () Bool)

(assert (= bs!5756 d!42889))

(assert (=> bs!5756 m!162603))

(assert (=> bs!5756 m!162603))

(assert (=> bs!5756 m!162605))

(assert (=> bs!5756 m!162631))

(assert (=> d!42653 d!42889))

(assert (=> d!42653 d!42649))

(declare-fun d!42891 () Bool)

(declare-fun e!89325 () Bool)

(assert (=> d!42891 e!89325))

(declare-fun res!65759 () Bool)

(assert (=> d!42891 (=> res!65759 e!89325)))

(declare-fun lt!71797 () Bool)

(assert (=> d!42891 (= res!65759 (not lt!71797))))

(declare-fun lt!71796 () Bool)

(assert (=> d!42891 (= lt!71797 lt!71796)))

(declare-fun lt!71794 () Unit!4291)

(declare-fun e!89324 () Unit!4291)

(assert (=> d!42891 (= lt!71794 e!89324)))

(declare-fun c!25733 () Bool)

(assert (=> d!42891 (= c!25733 lt!71796)))

(assert (=> d!42891 (= lt!71796 (containsKey!176 (toList!873 lt!71169) lt!71170))))

(assert (=> d!42891 (= (contains!901 lt!71169 lt!71170) lt!71797)))

(declare-fun b!137201 () Bool)

(declare-fun lt!71795 () Unit!4291)

(assert (=> b!137201 (= e!89324 lt!71795)))

(assert (=> b!137201 (= lt!71795 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71169) lt!71170))))

(assert (=> b!137201 (isDefined!126 (getValueByKey!172 (toList!873 lt!71169) lt!71170))))

(declare-fun b!137202 () Bool)

(declare-fun Unit!4329 () Unit!4291)

(assert (=> b!137202 (= e!89324 Unit!4329)))

(declare-fun b!137203 () Bool)

(assert (=> b!137203 (= e!89325 (isDefined!126 (getValueByKey!172 (toList!873 lt!71169) lt!71170)))))

(assert (= (and d!42891 c!25733) b!137201))

(assert (= (and d!42891 (not c!25733)) b!137202))

(assert (= (and d!42891 (not res!65759)) b!137203))

(declare-fun m!163993 () Bool)

(assert (=> d!42891 m!163993))

(declare-fun m!163995 () Bool)

(assert (=> b!137201 m!163995))

(assert (=> b!137201 m!163149))

(assert (=> b!137201 m!163149))

(declare-fun m!163997 () Bool)

(assert (=> b!137201 m!163997))

(assert (=> b!137203 m!163149))

(assert (=> b!137203 m!163149))

(assert (=> b!137203 m!163997))

(assert (=> d!42653 d!42891))

(assert (=> d!42653 d!42645))

(declare-fun d!42893 () Bool)

(assert (=> d!42893 (= (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!418 (getValueByKey!172 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!5757 () Bool)

(assert (= bs!5757 d!42893))

(assert (=> bs!5757 m!162759))

(declare-fun m!163999 () Bool)

(assert (=> bs!5757 m!163999))

(assert (=> b!136520 d!42893))

(declare-fun d!42895 () Bool)

(declare-fun c!25734 () Bool)

(assert (=> d!42895 (= c!25734 (and ((_ is Cons!1737) (toList!873 lt!71161)) (= (_1!1321 (h!2343 (toList!873 lt!71161))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!89326 () Option!178)

(assert (=> d!42895 (= (getValueByKey!172 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000) e!89326)))

(declare-fun b!137206 () Bool)

(declare-fun e!89327 () Option!178)

(assert (=> b!137206 (= e!89327 (getValueByKey!172 (t!6241 (toList!873 lt!71161)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137204 () Bool)

(assert (=> b!137204 (= e!89326 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71161)))))))

(declare-fun b!137207 () Bool)

(assert (=> b!137207 (= e!89327 None!176)))

(declare-fun b!137205 () Bool)

(assert (=> b!137205 (= e!89326 e!89327)))

(declare-fun c!25735 () Bool)

(assert (=> b!137205 (= c!25735 (and ((_ is Cons!1737) (toList!873 lt!71161)) (not (= (_1!1321 (h!2343 (toList!873 lt!71161))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!42895 c!25734) b!137204))

(assert (= (and d!42895 (not c!25734)) b!137205))

(assert (= (and b!137205 c!25735) b!137206))

(assert (= (and b!137205 (not c!25735)) b!137207))

(declare-fun m!164001 () Bool)

(assert (=> b!137206 m!164001))

(assert (=> b!136520 d!42895))

(assert (=> b!136709 d!42663))

(assert (=> d!42657 d!42847))

(declare-fun d!42897 () Bool)

(declare-fun lt!71798 () Bool)

(assert (=> d!42897 (= lt!71798 (select (content!134 (toList!873 lt!71427)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun e!89329 () Bool)

(assert (=> d!42897 (= lt!71798 e!89329)))

(declare-fun res!65760 () Bool)

(assert (=> d!42897 (=> (not res!65760) (not e!89329))))

(assert (=> d!42897 (= res!65760 ((_ is Cons!1737) (toList!873 lt!71427)))))

(assert (=> d!42897 (= (contains!904 (toList!873 lt!71427) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71798)))

(declare-fun b!137208 () Bool)

(declare-fun e!89328 () Bool)

(assert (=> b!137208 (= e!89329 e!89328)))

(declare-fun res!65761 () Bool)

(assert (=> b!137208 (=> res!65761 e!89328)))

(assert (=> b!137208 (= res!65761 (= (h!2343 (toList!873 lt!71427)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!137209 () Bool)

(assert (=> b!137209 (= e!89328 (contains!904 (t!6241 (toList!873 lt!71427)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(assert (= (and d!42897 res!65760) b!137208))

(assert (= (and b!137208 (not res!65761)) b!137209))

(declare-fun m!164003 () Bool)

(assert (=> d!42897 m!164003))

(declare-fun m!164005 () Bool)

(assert (=> d!42897 m!164005))

(declare-fun m!164007 () Bool)

(assert (=> b!137209 m!164007))

(assert (=> b!136731 d!42897))

(assert (=> d!42597 d!42563))

(declare-fun b!137226 () Bool)

(declare-fun e!89341 () Bool)

(declare-fun e!89339 () Bool)

(assert (=> b!137226 (= e!89341 e!89339)))

(declare-fun res!65771 () Bool)

(declare-fun call!15127 () Bool)

(assert (=> b!137226 (= res!65771 call!15127)))

(assert (=> b!137226 (=> (not res!65771) (not e!89339))))

(declare-fun b!137227 () Bool)

(declare-fun e!89340 () Bool)

(declare-fun call!15126 () Bool)

(assert (=> b!137227 (= e!89340 (not call!15126))))

(declare-fun b!137228 () Bool)

(assert (=> b!137228 (= e!89339 (not call!15126))))

(declare-fun d!42899 () Bool)

(assert (=> d!42899 e!89341))

(declare-fun c!25741 () Bool)

(declare-fun lt!71801 () SeekEntryResult!286)

(assert (=> d!42899 (= c!25741 ((_ is MissingZero!286) lt!71801))))

(assert (=> d!42899 (= lt!71801 (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(assert (=> d!42899 true))

(declare-fun _$34!992 () Unit!4291)

(assert (=> d!42899 (= (choose!841 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (defaultEntry!2889 newMap!16)) _$34!992)))

(declare-fun b!137229 () Bool)

(declare-fun res!65770 () Bool)

(assert (=> b!137229 (=> (not res!65770) (not e!89340))))

(assert (=> b!137229 (= res!65770 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3308 lt!71801)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137230 () Bool)

(declare-fun e!89338 () Bool)

(assert (=> b!137230 (= e!89341 e!89338)))

(declare-fun c!25740 () Bool)

(assert (=> b!137230 (= c!25740 ((_ is MissingVacant!286) lt!71801))))

(declare-fun b!137231 () Bool)

(declare-fun res!65773 () Bool)

(assert (=> b!137231 (= res!65773 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3305 lt!71801)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137231 (=> (not res!65773) (not e!89339))))

(declare-fun b!137232 () Bool)

(declare-fun res!65772 () Bool)

(assert (=> b!137232 (=> (not res!65772) (not e!89340))))

(assert (=> b!137232 (= res!65772 call!15127)))

(assert (=> b!137232 (= e!89338 e!89340)))

(declare-fun bm!15123 () Bool)

(assert (=> bm!15123 (= call!15127 (inRange!0 (ite c!25741 (index!3305 lt!71801) (index!3308 lt!71801)) (mask!7203 newMap!16)))))

(declare-fun b!137233 () Bool)

(assert (=> b!137233 (= e!89338 ((_ is Undefined!286) lt!71801))))

(declare-fun bm!15124 () Bool)

(assert (=> bm!15124 (= call!15126 (arrayContainsKey!0 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(assert (= (and d!42899 c!25741) b!137226))

(assert (= (and d!42899 (not c!25741)) b!137230))

(assert (= (and b!137226 res!65771) b!137231))

(assert (= (and b!137231 res!65773) b!137228))

(assert (= (and b!137230 c!25740) b!137232))

(assert (= (and b!137230 (not c!25740)) b!137233))

(assert (= (and b!137232 res!65772) b!137229))

(assert (= (and b!137229 res!65770) b!137227))

(assert (= (or b!137226 b!137232) bm!15123))

(assert (= (or b!137228 b!137227) bm!15124))

(declare-fun m!164009 () Bool)

(assert (=> b!137229 m!164009))

(declare-fun m!164011 () Bool)

(assert (=> b!137231 m!164011))

(assert (=> d!42899 m!162523))

(assert (=> d!42899 m!162671))

(assert (=> bm!15124 m!162523))

(assert (=> bm!15124 m!162661))

(declare-fun m!164013 () Bool)

(assert (=> bm!15123 m!164013))

(assert (=> d!42597 d!42899))

(assert (=> d!42597 d!42847))

(declare-fun d!42901 () Bool)

(assert (=> d!42901 (= (get!1501 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!136591 d!42901))

(declare-fun d!42903 () Bool)

(declare-fun e!89342 () Bool)

(assert (=> d!42903 e!89342))

(declare-fun res!65775 () Bool)

(assert (=> d!42903 (=> (not res!65775) (not e!89342))))

(declare-fun lt!71805 () ListLongMap!1715)

(assert (=> d!42903 (= res!65775 (contains!901 lt!71805 (_1!1321 (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(declare-fun lt!71802 () List!1741)

(assert (=> d!42903 (= lt!71805 (ListLongMap!1716 lt!71802))))

(declare-fun lt!71803 () Unit!4291)

(declare-fun lt!71804 () Unit!4291)

(assert (=> d!42903 (= lt!71803 lt!71804)))

(assert (=> d!42903 (= (getValueByKey!172 lt!71802 (_1!1321 (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(assert (=> d!42903 (= lt!71804 (lemmaContainsTupThenGetReturnValue!89 lt!71802 (_1!1321 (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (_2!1321 (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(assert (=> d!42903 (= lt!71802 (insertStrictlySorted!91 (toList!873 (ite c!25595 call!15068 (ite c!25596 call!15065 call!15063))) (_1!1321 (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (_2!1321 (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(assert (=> d!42903 (= (+!171 (ite c!25595 call!15068 (ite c!25596 call!15065 call!15063)) (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) lt!71805)))

(declare-fun b!137234 () Bool)

(declare-fun res!65774 () Bool)

(assert (=> b!137234 (=> (not res!65774) (not e!89342))))

(assert (=> b!137234 (= res!65774 (= (getValueByKey!172 (toList!873 lt!71805) (_1!1321 (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))))

(declare-fun b!137235 () Bool)

(assert (=> b!137235 (= e!89342 (contains!904 (toList!873 lt!71805) (ite (or c!25595 c!25596) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (= (and d!42903 res!65775) b!137234))

(assert (= (and b!137234 res!65774) b!137235))

(declare-fun m!164015 () Bool)

(assert (=> d!42903 m!164015))

(declare-fun m!164017 () Bool)

(assert (=> d!42903 m!164017))

(declare-fun m!164019 () Bool)

(assert (=> d!42903 m!164019))

(declare-fun m!164021 () Bool)

(assert (=> d!42903 m!164021))

(declare-fun m!164023 () Bool)

(assert (=> b!137234 m!164023))

(declare-fun m!164025 () Bool)

(assert (=> b!137235 m!164025))

(assert (=> bm!15065 d!42903))

(declare-fun bm!15125 () Bool)

(declare-fun call!15128 () ListLongMap!1715)

(assert (=> bm!15125 (= call!15128 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2889 newMap!16)))))

(declare-fun b!137236 () Bool)

(declare-fun e!89349 () Bool)

(declare-fun e!89347 () Bool)

(assert (=> b!137236 (= e!89349 e!89347)))

(declare-fun c!25743 () Bool)

(declare-fun e!89346 () Bool)

(assert (=> b!137236 (= c!25743 e!89346)))

(declare-fun res!65779 () Bool)

(assert (=> b!137236 (=> (not res!65779) (not e!89346))))

(assert (=> b!137236 (= res!65779 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137237 () Bool)

(declare-fun e!89344 () Bool)

(assert (=> b!137237 (= e!89347 e!89344)))

(assert (=> b!137237 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun res!65777 () Bool)

(declare-fun lt!71809 () ListLongMap!1715)

(assert (=> b!137237 (= res!65777 (contains!901 lt!71809 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137237 (=> (not res!65777) (not e!89344))))

(declare-fun b!137238 () Bool)

(declare-fun lt!71808 () Unit!4291)

(declare-fun lt!71807 () Unit!4291)

(assert (=> b!137238 (= lt!71808 lt!71807)))

(declare-fun lt!71810 () ListLongMap!1715)

(declare-fun lt!71811 () V!3499)

(declare-fun lt!71812 () (_ BitVec 64))

(declare-fun lt!71806 () (_ BitVec 64))

(assert (=> b!137238 (not (contains!901 (+!171 lt!71810 (tuple2!2623 lt!71806 lt!71811)) lt!71812))))

(assert (=> b!137238 (= lt!71807 (addStillNotContains!64 lt!71810 lt!71806 lt!71811 lt!71812))))

(assert (=> b!137238 (= lt!71812 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!137238 (= lt!71811 (get!1498 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!137238 (= lt!71806 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137238 (= lt!71810 call!15128)))

(declare-fun e!89345 () ListLongMap!1715)

(assert (=> b!137238 (= e!89345 (+!171 call!15128 (tuple2!2623 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) (get!1498 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!137239 () Bool)

(assert (=> b!137239 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> b!137239 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (_values!2872 newMap!16))))))

(assert (=> b!137239 (= e!89344 (= (apply!117 lt!71809 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137240 () Bool)

(declare-fun e!89343 () Bool)

(assert (=> b!137240 (= e!89343 (isEmpty!417 lt!71809))))

(declare-fun b!137241 () Bool)

(assert (=> b!137241 (= e!89346 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137241 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!42905 () Bool)

(assert (=> d!42905 e!89349))

(declare-fun res!65778 () Bool)

(assert (=> d!42905 (=> (not res!65778) (not e!89349))))

(assert (=> d!42905 (= res!65778 (not (contains!901 lt!71809 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!89348 () ListLongMap!1715)

(assert (=> d!42905 (= lt!71809 e!89348)))

(declare-fun c!25744 () Bool)

(assert (=> d!42905 (= c!25744 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42905 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42905 (= (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!71809)))

(declare-fun b!137242 () Bool)

(assert (=> b!137242 (= e!89348 e!89345)))

(declare-fun c!25742 () Bool)

(assert (=> b!137242 (= c!25742 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137243 () Bool)

(assert (=> b!137243 (= e!89347 e!89343)))

(declare-fun c!25745 () Bool)

(assert (=> b!137243 (= c!25745 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137244 () Bool)

(assert (=> b!137244 (= e!89348 (ListLongMap!1716 Nil!1738))))

(declare-fun b!137245 () Bool)

(assert (=> b!137245 (= e!89345 call!15128)))

(declare-fun b!137246 () Bool)

(assert (=> b!137246 (= e!89343 (= lt!71809 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2889 newMap!16))))))

(declare-fun b!137247 () Bool)

(declare-fun res!65776 () Bool)

(assert (=> b!137247 (=> (not res!65776) (not e!89349))))

(assert (=> b!137247 (= res!65776 (not (contains!901 lt!71809 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42905 c!25744) b!137244))

(assert (= (and d!42905 (not c!25744)) b!137242))

(assert (= (and b!137242 c!25742) b!137238))

(assert (= (and b!137242 (not c!25742)) b!137245))

(assert (= (or b!137238 b!137245) bm!15125))

(assert (= (and d!42905 res!65778) b!137247))

(assert (= (and b!137247 res!65776) b!137236))

(assert (= (and b!137236 res!65779) b!137241))

(assert (= (and b!137236 c!25743) b!137237))

(assert (= (and b!137236 (not c!25743)) b!137243))

(assert (= (and b!137237 res!65777) b!137239))

(assert (= (and b!137243 c!25745) b!137246))

(assert (= (and b!137243 (not c!25745)) b!137240))

(declare-fun b_lambda!6157 () Bool)

(assert (=> (not b_lambda!6157) (not b!137238)))

(assert (=> b!137238 t!6249))

(declare-fun b_and!8517 () Bool)

(assert (= b_and!8513 (and (=> t!6249 result!4059) b_and!8517)))

(assert (=> b!137238 t!6251))

(declare-fun b_and!8519 () Bool)

(assert (= b_and!8515 (and (=> t!6251 result!4061) b_and!8519)))

(declare-fun b_lambda!6159 () Bool)

(assert (=> (not b_lambda!6159) (not b!137239)))

(assert (=> b!137239 t!6249))

(declare-fun b_and!8521 () Bool)

(assert (= b_and!8517 (and (=> t!6249 result!4059) b_and!8521)))

(assert (=> b!137239 t!6251))

(declare-fun b_and!8523 () Bool)

(assert (= b_and!8519 (and (=> t!6251 result!4061) b_and!8523)))

(assert (=> b!137241 m!162731))

(assert (=> b!137241 m!162731))

(assert (=> b!137241 m!162735))

(declare-fun m!164027 () Bool)

(assert (=> b!137238 m!164027))

(assert (=> b!137238 m!162815))

(assert (=> b!137238 m!162811))

(declare-fun m!164029 () Bool)

(assert (=> b!137238 m!164029))

(declare-fun m!164031 () Bool)

(assert (=> b!137238 m!164031))

(assert (=> b!137238 m!164031))

(declare-fun m!164033 () Bool)

(assert (=> b!137238 m!164033))

(assert (=> b!137238 m!162811))

(assert (=> b!137238 m!162815))

(assert (=> b!137238 m!162817))

(assert (=> b!137238 m!162731))

(declare-fun m!164035 () Bool)

(assert (=> b!137247 m!164035))

(declare-fun m!164037 () Bool)

(assert (=> bm!15125 m!164037))

(assert (=> b!137237 m!162731))

(assert (=> b!137237 m!162731))

(declare-fun m!164039 () Bool)

(assert (=> b!137237 m!164039))

(assert (=> b!137246 m!164037))

(assert (=> b!137239 m!162815))

(assert (=> b!137239 m!162811))

(assert (=> b!137239 m!162731))

(declare-fun m!164041 () Bool)

(assert (=> b!137239 m!164041))

(assert (=> b!137239 m!162811))

(assert (=> b!137239 m!162815))

(assert (=> b!137239 m!162817))

(assert (=> b!137239 m!162731))

(declare-fun m!164043 () Bool)

(assert (=> d!42905 m!164043))

(assert (=> d!42905 m!162751))

(assert (=> b!137242 m!162731))

(assert (=> b!137242 m!162731))

(assert (=> b!137242 m!162735))

(declare-fun m!164045 () Bool)

(assert (=> b!137240 m!164045))

(assert (=> bm!15039 d!42905))

(declare-fun b!137248 () Bool)

(declare-fun e!89350 () Bool)

(assert (=> b!137248 (= e!89350 (contains!903 Nil!1740 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000)))))

(declare-fun b!137249 () Bool)

(declare-fun e!89353 () Bool)

(declare-fun e!89351 () Bool)

(assert (=> b!137249 (= e!89353 e!89351)))

(declare-fun res!65782 () Bool)

(assert (=> b!137249 (=> (not res!65782) (not e!89351))))

(assert (=> b!137249 (= res!65782 (not e!89350))))

(declare-fun res!65780 () Bool)

(assert (=> b!137249 (=> (not res!65780) (not e!89350))))

(assert (=> b!137249 (= res!65780 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000)))))

(declare-fun b!137250 () Bool)

(declare-fun e!89352 () Bool)

(declare-fun call!15129 () Bool)

(assert (=> b!137250 (= e!89352 call!15129)))

(declare-fun b!137251 () Bool)

(assert (=> b!137251 (= e!89352 call!15129)))

(declare-fun b!137252 () Bool)

(assert (=> b!137252 (= e!89351 e!89352)))

(declare-fun c!25746 () Bool)

(assert (=> b!137252 (= c!25746 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000)))))

(declare-fun d!42907 () Bool)

(declare-fun res!65781 () Bool)

(assert (=> d!42907 (=> res!65781 e!89353)))

(assert (=> d!42907 (= res!65781 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))))))

(assert (=> d!42907 (= (arrayNoDuplicates!0 (_keys!4642 (_2!1322 lt!71264)) #b00000000000000000000000000000000 Nil!1740) e!89353)))

(declare-fun bm!15126 () Bool)

(assert (=> bm!15126 (= call!15129 (arrayNoDuplicates!0 (_keys!4642 (_2!1322 lt!71264)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!25746 (Cons!1739 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000) Nil!1740) Nil!1740)))))

(assert (= (and d!42907 (not res!65781)) b!137249))

(assert (= (and b!137249 res!65780) b!137248))

(assert (= (and b!137249 res!65782) b!137252))

(assert (= (and b!137252 c!25746) b!137251))

(assert (= (and b!137252 (not c!25746)) b!137250))

(assert (= (or b!137251 b!137250) bm!15126))

(assert (=> b!137248 m!163577))

(assert (=> b!137248 m!163577))

(declare-fun m!164047 () Bool)

(assert (=> b!137248 m!164047))

(assert (=> b!137249 m!163577))

(assert (=> b!137249 m!163577))

(assert (=> b!137249 m!163579))

(assert (=> b!137252 m!163577))

(assert (=> b!137252 m!163577))

(assert (=> b!137252 m!163579))

(assert (=> bm!15126 m!163577))

(declare-fun m!164049 () Bool)

(assert (=> bm!15126 m!164049))

(assert (=> b!136523 d!42907))

(declare-fun d!42909 () Bool)

(declare-fun res!65783 () Bool)

(declare-fun e!89354 () Bool)

(assert (=> d!42909 (=> res!65783 e!89354)))

(assert (=> d!42909 (= res!65783 (and ((_ is Cons!1737) (toList!873 call!15000)) (= (_1!1321 (h!2343 (toList!873 call!15000))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(assert (=> d!42909 (= (containsKey!176 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) e!89354)))

(declare-fun b!137253 () Bool)

(declare-fun e!89355 () Bool)

(assert (=> b!137253 (= e!89354 e!89355)))

(declare-fun res!65784 () Bool)

(assert (=> b!137253 (=> (not res!65784) (not e!89355))))

(assert (=> b!137253 (= res!65784 (and (or (not ((_ is Cons!1737) (toList!873 call!15000))) (bvsle (_1!1321 (h!2343 (toList!873 call!15000))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))) ((_ is Cons!1737) (toList!873 call!15000)) (bvslt (_1!1321 (h!2343 (toList!873 call!15000))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(declare-fun b!137254 () Bool)

(assert (=> b!137254 (= e!89355 (containsKey!176 (t!6241 (toList!873 call!15000)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (= (and d!42909 (not res!65783)) b!137253))

(assert (= (and b!137253 res!65784) b!137254))

(assert (=> b!137254 m!162523))

(declare-fun m!164051 () Bool)

(assert (=> b!137254 m!164051))

(assert (=> d!42673 d!42909))

(assert (=> d!42581 d!42847))

(declare-fun d!42911 () Bool)

(declare-fun res!65785 () Bool)

(declare-fun e!89356 () Bool)

(assert (=> d!42911 (=> res!65785 e!89356)))

(assert (=> d!42911 (= res!65785 (= (select (arr!2272 (_keys!4642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!42911 (= (arrayContainsKey!0 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!89356)))

(declare-fun b!137255 () Bool)

(declare-fun e!89357 () Bool)

(assert (=> b!137255 (= e!89356 e!89357)))

(declare-fun res!65786 () Bool)

(assert (=> b!137255 (=> (not res!65786) (not e!89357))))

(assert (=> b!137255 (= res!65786 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137256 () Bool)

(assert (=> b!137256 (= e!89357 (arrayContainsKey!0 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!42911 (not res!65785)) b!137255))

(assert (= (and b!137255 res!65786) b!137256))

(assert (=> d!42911 m!163521))

(assert (=> b!137256 m!162523))

(declare-fun m!164053 () Bool)

(assert (=> b!137256 m!164053))

(assert (=> b!136657 d!42911))

(declare-fun d!42913 () Bool)

(assert (=> d!42913 (= (apply!117 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71153) (apply!117 lt!71164 lt!71153))))

(assert (=> d!42913 true))

(declare-fun _$34!993 () Unit!4291)

(assert (=> d!42913 (= (choose!844 lt!71164 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71153) _$34!993)))

(declare-fun bs!5758 () Bool)

(assert (= bs!5758 d!42913))

(assert (=> bs!5758 m!162627))

(assert (=> bs!5758 m!162627))

(assert (=> bs!5758 m!162629))

(assert (=> bs!5758 m!162619))

(assert (=> d!42635 d!42913))

(declare-fun d!42915 () Bool)

(declare-fun e!89359 () Bool)

(assert (=> d!42915 e!89359))

(declare-fun res!65787 () Bool)

(assert (=> d!42915 (=> res!65787 e!89359)))

(declare-fun lt!71816 () Bool)

(assert (=> d!42915 (= res!65787 (not lt!71816))))

(declare-fun lt!71815 () Bool)

(assert (=> d!42915 (= lt!71816 lt!71815)))

(declare-fun lt!71813 () Unit!4291)

(declare-fun e!89358 () Unit!4291)

(assert (=> d!42915 (= lt!71813 e!89358)))

(declare-fun c!25747 () Bool)

(assert (=> d!42915 (= c!25747 lt!71815)))

(assert (=> d!42915 (= lt!71815 (containsKey!176 (toList!873 lt!71164) lt!71153))))

(assert (=> d!42915 (= (contains!901 lt!71164 lt!71153) lt!71816)))

(declare-fun b!137257 () Bool)

(declare-fun lt!71814 () Unit!4291)

(assert (=> b!137257 (= e!89358 lt!71814)))

(assert (=> b!137257 (= lt!71814 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71164) lt!71153))))

(assert (=> b!137257 (isDefined!126 (getValueByKey!172 (toList!873 lt!71164) lt!71153))))

(declare-fun b!137258 () Bool)

(declare-fun Unit!4330 () Unit!4291)

(assert (=> b!137258 (= e!89358 Unit!4330)))

(declare-fun b!137259 () Bool)

(assert (=> b!137259 (= e!89359 (isDefined!126 (getValueByKey!172 (toList!873 lt!71164) lt!71153)))))

(assert (= (and d!42915 c!25747) b!137257))

(assert (= (and d!42915 (not c!25747)) b!137258))

(assert (= (and d!42915 (not res!65787)) b!137259))

(declare-fun m!164055 () Bool)

(assert (=> d!42915 m!164055))

(declare-fun m!164057 () Bool)

(assert (=> b!137257 m!164057))

(assert (=> b!137257 m!163129))

(assert (=> b!137257 m!163129))

(declare-fun m!164059 () Bool)

(assert (=> b!137257 m!164059))

(assert (=> b!137259 m!163129))

(assert (=> b!137259 m!163129))

(assert (=> b!137259 m!164059))

(assert (=> d!42635 d!42915))

(assert (=> d!42635 d!42643))

(assert (=> d!42635 d!42647))

(assert (=> d!42635 d!42651))

(declare-fun d!42917 () Bool)

(declare-fun e!89360 () Bool)

(assert (=> d!42917 e!89360))

(declare-fun res!65789 () Bool)

(assert (=> d!42917 (=> (not res!65789) (not e!89360))))

(declare-fun lt!71820 () ListLongMap!1715)

(assert (=> d!42917 (= res!65789 (contains!901 lt!71820 (_1!1321 (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(declare-fun lt!71817 () List!1741)

(assert (=> d!42917 (= lt!71820 (ListLongMap!1716 lt!71817))))

(declare-fun lt!71818 () Unit!4291)

(declare-fun lt!71819 () Unit!4291)

(assert (=> d!42917 (= lt!71818 lt!71819)))

(assert (=> d!42917 (= (getValueByKey!172 lt!71817 (_1!1321 (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(assert (=> d!42917 (= lt!71819 (lemmaContainsTupThenGetReturnValue!89 lt!71817 (_1!1321 (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (_2!1321 (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(assert (=> d!42917 (= lt!71817 (insertStrictlySorted!91 (toList!873 (ite c!25550 call!15038 (ite c!25551 call!15035 call!15033))) (_1!1321 (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) (_2!1321 (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))))

(assert (=> d!42917 (= (+!171 (ite c!25550 call!15038 (ite c!25551 call!15035 call!15033)) (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))) lt!71820)))

(declare-fun b!137260 () Bool)

(declare-fun res!65788 () Bool)

(assert (=> b!137260 (=> (not res!65788) (not e!89360))))

(assert (=> b!137260 (= res!65788 (= (getValueByKey!172 (toList!873 lt!71820) (_1!1321 (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))))

(declare-fun b!137261 () Bool)

(assert (=> b!137261 (= e!89360 (contains!904 (toList!873 lt!71820) (ite (or c!25550 c!25551) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(assert (= (and d!42917 res!65789) b!137260))

(assert (= (and b!137260 res!65788) b!137261))

(declare-fun m!164061 () Bool)

(assert (=> d!42917 m!164061))

(declare-fun m!164063 () Bool)

(assert (=> d!42917 m!164063))

(declare-fun m!164065 () Bool)

(assert (=> d!42917 m!164065))

(declare-fun m!164067 () Bool)

(assert (=> d!42917 m!164067))

(declare-fun m!164069 () Bool)

(assert (=> b!137260 m!164069))

(declare-fun m!164071 () Bool)

(assert (=> b!137261 m!164071))

(assert (=> bm!15035 d!42917))

(declare-fun d!42919 () Bool)

(declare-fun e!89361 () Bool)

(assert (=> d!42919 e!89361))

(declare-fun res!65791 () Bool)

(assert (=> d!42919 (=> (not res!65791) (not e!89361))))

(declare-fun lt!71824 () ListLongMap!1715)

(assert (=> d!42919 (= res!65791 (contains!901 lt!71824 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!71821 () List!1741)

(assert (=> d!42919 (= lt!71824 (ListLongMap!1716 lt!71821))))

(declare-fun lt!71822 () Unit!4291)

(declare-fun lt!71823 () Unit!4291)

(assert (=> d!42919 (= lt!71822 lt!71823)))

(assert (=> d!42919 (= (getValueByKey!172 lt!71821 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42919 (= lt!71823 (lemmaContainsTupThenGetReturnValue!89 lt!71821 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42919 (= lt!71821 (insertStrictlySorted!91 (toList!873 call!15061) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!42919 (= (+!171 call!15061 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!71824)))

(declare-fun b!137262 () Bool)

(declare-fun res!65790 () Bool)

(assert (=> b!137262 (=> (not res!65790) (not e!89361))))

(assert (=> b!137262 (= res!65790 (= (getValueByKey!172 (toList!873 lt!71824) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137263 () Bool)

(assert (=> b!137263 (= e!89361 (contains!904 (toList!873 lt!71824) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!42919 res!65791) b!137262))

(assert (= (and b!137262 res!65790) b!137263))

(declare-fun m!164073 () Bool)

(assert (=> d!42919 m!164073))

(declare-fun m!164075 () Bool)

(assert (=> d!42919 m!164075))

(declare-fun m!164077 () Bool)

(assert (=> d!42919 m!164077))

(declare-fun m!164079 () Bool)

(assert (=> d!42919 m!164079))

(declare-fun m!164081 () Bool)

(assert (=> b!137262 m!164081))

(declare-fun m!164083 () Bool)

(assert (=> b!137263 m!164083))

(assert (=> b!136705 d!42919))

(assert (=> b!136705 d!42585))

(declare-fun d!42921 () Bool)

(assert (=> d!42921 (not (contains!901 (+!171 lt!71421 (tuple2!2623 lt!71417 lt!71422)) lt!71423))))

(declare-fun lt!71827 () Unit!4291)

(declare-fun choose!849 (ListLongMap!1715 (_ BitVec 64) V!3499 (_ BitVec 64)) Unit!4291)

(assert (=> d!42921 (= lt!71827 (choose!849 lt!71421 lt!71417 lt!71422 lt!71423))))

(declare-fun e!89364 () Bool)

(assert (=> d!42921 e!89364))

(declare-fun res!65794 () Bool)

(assert (=> d!42921 (=> (not res!65794) (not e!89364))))

(assert (=> d!42921 (= res!65794 (not (contains!901 lt!71421 lt!71423)))))

(assert (=> d!42921 (= (addStillNotContains!64 lt!71421 lt!71417 lt!71422 lt!71423) lt!71827)))

(declare-fun b!137267 () Bool)

(assert (=> b!137267 (= e!89364 (not (= lt!71417 lt!71423)))))

(assert (= (and d!42921 res!65794) b!137267))

(assert (=> d!42921 m!163025))

(assert (=> d!42921 m!163025))

(assert (=> d!42921 m!163027))

(declare-fun m!164085 () Bool)

(assert (=> d!42921 m!164085))

(declare-fun m!164087 () Bool)

(assert (=> d!42921 m!164087))

(assert (=> b!136705 d!42921))

(declare-fun d!42923 () Bool)

(declare-fun e!89366 () Bool)

(assert (=> d!42923 e!89366))

(declare-fun res!65795 () Bool)

(assert (=> d!42923 (=> res!65795 e!89366)))

(declare-fun lt!71831 () Bool)

(assert (=> d!42923 (= res!65795 (not lt!71831))))

(declare-fun lt!71830 () Bool)

(assert (=> d!42923 (= lt!71831 lt!71830)))

(declare-fun lt!71828 () Unit!4291)

(declare-fun e!89365 () Unit!4291)

(assert (=> d!42923 (= lt!71828 e!89365)))

(declare-fun c!25748 () Bool)

(assert (=> d!42923 (= c!25748 lt!71830)))

(assert (=> d!42923 (= lt!71830 (containsKey!176 (toList!873 (+!171 lt!71421 (tuple2!2623 lt!71417 lt!71422))) lt!71423))))

(assert (=> d!42923 (= (contains!901 (+!171 lt!71421 (tuple2!2623 lt!71417 lt!71422)) lt!71423) lt!71831)))

(declare-fun b!137268 () Bool)

(declare-fun lt!71829 () Unit!4291)

(assert (=> b!137268 (= e!89365 lt!71829)))

(assert (=> b!137268 (= lt!71829 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 (+!171 lt!71421 (tuple2!2623 lt!71417 lt!71422))) lt!71423))))

(assert (=> b!137268 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71421 (tuple2!2623 lt!71417 lt!71422))) lt!71423))))

(declare-fun b!137269 () Bool)

(declare-fun Unit!4331 () Unit!4291)

(assert (=> b!137269 (= e!89365 Unit!4331)))

(declare-fun b!137270 () Bool)

(assert (=> b!137270 (= e!89366 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71421 (tuple2!2623 lt!71417 lt!71422))) lt!71423)))))

(assert (= (and d!42923 c!25748) b!137268))

(assert (= (and d!42923 (not c!25748)) b!137269))

(assert (= (and d!42923 (not res!65795)) b!137270))

(declare-fun m!164089 () Bool)

(assert (=> d!42923 m!164089))

(declare-fun m!164091 () Bool)

(assert (=> b!137268 m!164091))

(declare-fun m!164093 () Bool)

(assert (=> b!137268 m!164093))

(assert (=> b!137268 m!164093))

(declare-fun m!164095 () Bool)

(assert (=> b!137268 m!164095))

(assert (=> b!137270 m!164093))

(assert (=> b!137270 m!164093))

(assert (=> b!137270 m!164095))

(assert (=> b!136705 d!42923))

(declare-fun d!42925 () Bool)

(declare-fun e!89367 () Bool)

(assert (=> d!42925 e!89367))

(declare-fun res!65797 () Bool)

(assert (=> d!42925 (=> (not res!65797) (not e!89367))))

(declare-fun lt!71835 () ListLongMap!1715)

(assert (=> d!42925 (= res!65797 (contains!901 lt!71835 (_1!1321 (tuple2!2623 lt!71417 lt!71422))))))

(declare-fun lt!71832 () List!1741)

(assert (=> d!42925 (= lt!71835 (ListLongMap!1716 lt!71832))))

(declare-fun lt!71833 () Unit!4291)

(declare-fun lt!71834 () Unit!4291)

(assert (=> d!42925 (= lt!71833 lt!71834)))

(assert (=> d!42925 (= (getValueByKey!172 lt!71832 (_1!1321 (tuple2!2623 lt!71417 lt!71422))) (Some!177 (_2!1321 (tuple2!2623 lt!71417 lt!71422))))))

(assert (=> d!42925 (= lt!71834 (lemmaContainsTupThenGetReturnValue!89 lt!71832 (_1!1321 (tuple2!2623 lt!71417 lt!71422)) (_2!1321 (tuple2!2623 lt!71417 lt!71422))))))

(assert (=> d!42925 (= lt!71832 (insertStrictlySorted!91 (toList!873 lt!71421) (_1!1321 (tuple2!2623 lt!71417 lt!71422)) (_2!1321 (tuple2!2623 lt!71417 lt!71422))))))

(assert (=> d!42925 (= (+!171 lt!71421 (tuple2!2623 lt!71417 lt!71422)) lt!71835)))

(declare-fun b!137271 () Bool)

(declare-fun res!65796 () Bool)

(assert (=> b!137271 (=> (not res!65796) (not e!89367))))

(assert (=> b!137271 (= res!65796 (= (getValueByKey!172 (toList!873 lt!71835) (_1!1321 (tuple2!2623 lt!71417 lt!71422))) (Some!177 (_2!1321 (tuple2!2623 lt!71417 lt!71422)))))))

(declare-fun b!137272 () Bool)

(assert (=> b!137272 (= e!89367 (contains!904 (toList!873 lt!71835) (tuple2!2623 lt!71417 lt!71422)))))

(assert (= (and d!42925 res!65797) b!137271))

(assert (= (and b!137271 res!65796) b!137272))

(declare-fun m!164097 () Bool)

(assert (=> d!42925 m!164097))

(declare-fun m!164099 () Bool)

(assert (=> d!42925 m!164099))

(declare-fun m!164101 () Bool)

(assert (=> d!42925 m!164101))

(declare-fun m!164103 () Bool)

(assert (=> d!42925 m!164103))

(declare-fun m!164105 () Bool)

(assert (=> b!137271 m!164105))

(declare-fun m!164107 () Bool)

(assert (=> b!137272 m!164107))

(assert (=> b!136705 d!42925))

(assert (=> b!136835 d!42593))

(declare-fun d!42927 () Bool)

(assert (=> d!42927 (= (isDefined!126 (getValueByKey!172 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))) (not (isEmpty!418 (getValueByKey!172 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))))

(declare-fun bs!5759 () Bool)

(assert (= bs!5759 d!42927))

(assert (=> bs!5759 m!163241))

(declare-fun m!164109 () Bool)

(assert (=> bs!5759 m!164109))

(assert (=> b!136791 d!42927))

(declare-fun d!42929 () Bool)

(declare-fun c!25749 () Bool)

(assert (=> d!42929 (= c!25749 (and ((_ is Cons!1737) (toList!873 call!15021)) (= (_1!1321 (h!2343 (toList!873 call!15021))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(declare-fun e!89368 () Option!178)

(assert (=> d!42929 (= (getValueByKey!172 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) e!89368)))

(declare-fun e!89369 () Option!178)

(declare-fun b!137275 () Bool)

(assert (=> b!137275 (= e!89369 (getValueByKey!172 (t!6241 (toList!873 call!15021)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun b!137273 () Bool)

(assert (=> b!137273 (= e!89368 (Some!177 (_2!1321 (h!2343 (toList!873 call!15021)))))))

(declare-fun b!137276 () Bool)

(assert (=> b!137276 (= e!89369 None!176)))

(declare-fun b!137274 () Bool)

(assert (=> b!137274 (= e!89368 e!89369)))

(declare-fun c!25750 () Bool)

(assert (=> b!137274 (= c!25750 (and ((_ is Cons!1737) (toList!873 call!15021)) (not (= (_1!1321 (h!2343 (toList!873 call!15021))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))))

(assert (= (and d!42929 c!25749) b!137273))

(assert (= (and d!42929 (not c!25749)) b!137274))

(assert (= (and b!137274 c!25750) b!137275))

(assert (= (and b!137274 (not c!25750)) b!137276))

(assert (=> b!137275 m!162523))

(declare-fun m!164111 () Bool)

(assert (=> b!137275 m!164111))

(assert (=> b!136791 d!42929))

(declare-fun c!25751 () Bool)

(declare-fun d!42931 () Bool)

(assert (=> d!42931 (= c!25751 (and ((_ is Cons!1737) (toList!873 lt!71457)) (= (_1!1321 (h!2343 (toList!873 lt!71457))) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89370 () Option!178)

(assert (=> d!42931 (= (getValueByKey!172 (toList!873 lt!71457) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) e!89370)))

(declare-fun e!89371 () Option!178)

(declare-fun b!137279 () Bool)

(assert (=> b!137279 (= e!89371 (getValueByKey!172 (t!6241 (toList!873 lt!71457)) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137277 () Bool)

(assert (=> b!137277 (= e!89370 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71457)))))))

(declare-fun b!137280 () Bool)

(assert (=> b!137280 (= e!89371 None!176)))

(declare-fun b!137278 () Bool)

(assert (=> b!137278 (= e!89370 e!89371)))

(declare-fun c!25752 () Bool)

(assert (=> b!137278 (= c!25752 (and ((_ is Cons!1737) (toList!873 lt!71457)) (not (= (_1!1321 (h!2343 (toList!873 lt!71457))) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42931 c!25751) b!137277))

(assert (= (and d!42931 (not c!25751)) b!137278))

(assert (= (and b!137278 c!25752) b!137279))

(assert (= (and b!137278 (not c!25752)) b!137280))

(declare-fun m!164113 () Bool)

(assert (=> b!137279 m!164113))

(assert (=> b!136750 d!42931))

(declare-fun d!42933 () Bool)

(declare-fun res!65798 () Bool)

(declare-fun e!89372 () Bool)

(assert (=> d!42933 (=> res!65798 e!89372)))

(assert (=> d!42933 (= res!65798 (and ((_ is Cons!1737) (t!6241 (toList!873 lt!71093))) (= (_1!1321 (h!2343 (t!6241 (toList!873 lt!71093)))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(assert (=> d!42933 (= (containsKey!176 (t!6241 (toList!873 lt!71093)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) e!89372)))

(declare-fun b!137281 () Bool)

(declare-fun e!89373 () Bool)

(assert (=> b!137281 (= e!89372 e!89373)))

(declare-fun res!65799 () Bool)

(assert (=> b!137281 (=> (not res!65799) (not e!89373))))

(assert (=> b!137281 (= res!65799 (and (or (not ((_ is Cons!1737) (t!6241 (toList!873 lt!71093)))) (bvsle (_1!1321 (h!2343 (t!6241 (toList!873 lt!71093)))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))) ((_ is Cons!1737) (t!6241 (toList!873 lt!71093))) (bvslt (_1!1321 (h!2343 (t!6241 (toList!873 lt!71093)))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(declare-fun b!137282 () Bool)

(assert (=> b!137282 (= e!89373 (containsKey!176 (t!6241 (t!6241 (toList!873 lt!71093))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (= (and d!42933 (not res!65798)) b!137281))

(assert (= (and b!137281 res!65799) b!137282))

(assert (=> b!137282 m!162523))

(declare-fun m!164115 () Bool)

(assert (=> b!137282 m!164115))

(assert (=> b!136629 d!42933))

(declare-fun b!137283 () Bool)

(declare-fun e!89374 () Bool)

(assert (=> b!137283 (= e!89374 (contains!903 (ite c!25529 (Cons!1739 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) Nil!1740) Nil!1740) (select (arr!2272 (_keys!4642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!137284 () Bool)

(declare-fun e!89377 () Bool)

(declare-fun e!89375 () Bool)

(assert (=> b!137284 (= e!89377 e!89375)))

(declare-fun res!65802 () Bool)

(assert (=> b!137284 (=> (not res!65802) (not e!89375))))

(assert (=> b!137284 (= res!65802 (not e!89374))))

(declare-fun res!65800 () Bool)

(assert (=> b!137284 (=> (not res!65800) (not e!89374))))

(assert (=> b!137284 (= res!65800 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!137285 () Bool)

(declare-fun e!89376 () Bool)

(declare-fun call!15130 () Bool)

(assert (=> b!137285 (= e!89376 call!15130)))

(declare-fun b!137286 () Bool)

(assert (=> b!137286 (= e!89376 call!15130)))

(declare-fun b!137287 () Bool)

(assert (=> b!137287 (= e!89375 e!89376)))

(declare-fun c!25753 () Bool)

(assert (=> b!137287 (= c!25753 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!42935 () Bool)

(declare-fun res!65801 () Bool)

(assert (=> d!42935 (=> res!65801 e!89377)))

(assert (=> d!42935 (= res!65801 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42935 (= (arrayNoDuplicates!0 (_keys!4642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!25529 (Cons!1739 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) Nil!1740) Nil!1740)) e!89377)))

(declare-fun bm!15127 () Bool)

(assert (=> bm!15127 (= call!15130 (arrayNoDuplicates!0 (_keys!4642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!25753 (Cons!1739 (select (arr!2272 (_keys!4642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!25529 (Cons!1739 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) Nil!1740) Nil!1740)) (ite c!25529 (Cons!1739 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) Nil!1740) Nil!1740))))))

(assert (= (and d!42935 (not res!65801)) b!137284))

(assert (= (and b!137284 res!65800) b!137283))

(assert (= (and b!137284 res!65802) b!137287))

(assert (= (and b!137287 c!25753) b!137286))

(assert (= (and b!137287 (not c!25753)) b!137285))

(assert (= (or b!137286 b!137285) bm!15127))

(assert (=> b!137283 m!163521))

(assert (=> b!137283 m!163521))

(declare-fun m!164117 () Bool)

(assert (=> b!137283 m!164117))

(assert (=> b!137284 m!163521))

(assert (=> b!137284 m!163521))

(assert (=> b!137284 m!163523))

(assert (=> b!137287 m!163521))

(assert (=> b!137287 m!163521))

(assert (=> b!137287 m!163523))

(assert (=> bm!15127 m!163521))

(declare-fun m!164119 () Bool)

(assert (=> bm!15127 m!164119))

(assert (=> bm!15022 d!42935))

(declare-fun d!42937 () Bool)

(assert (=> d!42937 (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!71836 () Unit!4291)

(assert (=> d!42937 (= lt!71836 (choose!842 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!89378 () Bool)

(assert (=> d!42937 e!89378))

(declare-fun res!65803 () Bool)

(assert (=> d!42937 (=> (not res!65803) (not e!89378))))

(assert (=> d!42937 (= res!65803 (isStrictlySorted!318 (toList!873 lt!71161)))))

(assert (=> d!42937 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!71836)))

(declare-fun b!137288 () Bool)

(assert (=> b!137288 (= e!89378 (containsKey!176 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!42937 res!65803) b!137288))

(assert (=> d!42937 m!162591))

(assert (=> d!42937 m!162803))

(assert (=> d!42937 m!162803))

(assert (=> d!42937 m!162805))

(assert (=> d!42937 m!162591))

(declare-fun m!164121 () Bool)

(assert (=> d!42937 m!164121))

(assert (=> d!42937 m!163335))

(assert (=> b!137288 m!162591))

(assert (=> b!137288 m!162799))

(assert (=> b!136554 d!42937))

(declare-fun d!42939 () Bool)

(assert (=> d!42939 (= (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!418 (getValueByKey!172 (toList!873 lt!71161) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!5760 () Bool)

(assert (= bs!5760 d!42939))

(assert (=> bs!5760 m!162803))

(declare-fun m!164123 () Bool)

(assert (=> bs!5760 m!164123))

(assert (=> b!136554 d!42939))

(assert (=> b!136554 d!42859))

(declare-fun d!42941 () Bool)

(declare-fun lt!71837 () Bool)

(assert (=> d!42941 (= lt!71837 (select (content!134 (toList!873 lt!71380)) (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!89380 () Bool)

(assert (=> d!42941 (= lt!71837 e!89380)))

(declare-fun res!65804 () Bool)

(assert (=> d!42941 (=> (not res!65804) (not e!89380))))

(assert (=> d!42941 (= res!65804 ((_ is Cons!1737) (toList!873 lt!71380)))))

(assert (=> d!42941 (= (contains!904 (toList!873 lt!71380) (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!71837)))

(declare-fun b!137289 () Bool)

(declare-fun e!89379 () Bool)

(assert (=> b!137289 (= e!89380 e!89379)))

(declare-fun res!65805 () Bool)

(assert (=> b!137289 (=> res!65805 e!89379)))

(assert (=> b!137289 (= res!65805 (= (h!2343 (toList!873 lt!71380)) (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137290 () Bool)

(assert (=> b!137290 (= e!89379 (contains!904 (t!6241 (toList!873 lt!71380)) (ite c!25512 (ite c!25514 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!42941 res!65804) b!137289))

(assert (= (and b!137289 (not res!65805)) b!137290))

(declare-fun m!164125 () Bool)

(assert (=> d!42941 m!164125))

(declare-fun m!164127 () Bool)

(assert (=> d!42941 m!164127))

(declare-fun m!164129 () Bool)

(assert (=> b!137290 m!164129))

(assert (=> b!136655 d!42941))

(declare-fun lt!71838 () Bool)

(declare-fun d!42943 () Bool)

(assert (=> d!42943 (= lt!71838 (select (content!134 (toList!873 lt!71302)) (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun e!89382 () Bool)

(assert (=> d!42943 (= lt!71838 e!89382)))

(declare-fun res!65806 () Bool)

(assert (=> d!42943 (=> (not res!65806) (not e!89382))))

(assert (=> d!42943 (= res!65806 ((_ is Cons!1737) (toList!873 lt!71302)))))

(assert (=> d!42943 (= (contains!904 (toList!873 lt!71302) (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71838)))

(declare-fun b!137291 () Bool)

(declare-fun e!89381 () Bool)

(assert (=> b!137291 (= e!89382 e!89381)))

(declare-fun res!65807 () Bool)

(assert (=> b!137291 (=> res!65807 e!89381)))

(assert (=> b!137291 (= res!65807 (= (h!2343 (toList!873 lt!71302)) (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137292 () Bool)

(assert (=> b!137292 (= e!89381 (contains!904 (t!6241 (toList!873 lt!71302)) (ite (or c!25473 c!25474) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (= (and d!42943 res!65806) b!137291))

(assert (= (and b!137291 (not res!65807)) b!137292))

(declare-fun m!164131 () Bool)

(assert (=> d!42943 m!164131))

(declare-fun m!164133 () Bool)

(assert (=> d!42943 m!164133))

(declare-fun m!164135 () Bool)

(assert (=> b!137292 m!164135))

(assert (=> b!136541 d!42943))

(assert (=> b!136496 d!42809))

(declare-fun bm!15128 () Bool)

(declare-fun call!15131 () ListLongMap!1715)

(assert (=> bm!15128 (= call!15131 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2889 newMap!16)))))

(declare-fun b!137293 () Bool)

(declare-fun e!89389 () Bool)

(declare-fun e!89387 () Bool)

(assert (=> b!137293 (= e!89389 e!89387)))

(declare-fun c!25755 () Bool)

(declare-fun e!89386 () Bool)

(assert (=> b!137293 (= c!25755 e!89386)))

(declare-fun res!65811 () Bool)

(assert (=> b!137293 (=> (not res!65811) (not e!89386))))

(assert (=> b!137293 (= res!65811 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137294 () Bool)

(declare-fun e!89384 () Bool)

(assert (=> b!137294 (= e!89387 e!89384)))

(assert (=> b!137294 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun res!65809 () Bool)

(declare-fun lt!71842 () ListLongMap!1715)

(assert (=> b!137294 (= res!65809 (contains!901 lt!71842 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137294 (=> (not res!65809) (not e!89384))))

(declare-fun b!137295 () Bool)

(declare-fun lt!71841 () Unit!4291)

(declare-fun lt!71840 () Unit!4291)

(assert (=> b!137295 (= lt!71841 lt!71840)))

(declare-fun lt!71844 () V!3499)

(declare-fun lt!71843 () ListLongMap!1715)

(declare-fun lt!71845 () (_ BitVec 64))

(declare-fun lt!71839 () (_ BitVec 64))

(assert (=> b!137295 (not (contains!901 (+!171 lt!71843 (tuple2!2623 lt!71839 lt!71844)) lt!71845))))

(assert (=> b!137295 (= lt!71840 (addStillNotContains!64 lt!71843 lt!71839 lt!71844 lt!71845))))

(assert (=> b!137295 (= lt!71845 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!137295 (= lt!71844 (get!1498 (select (arr!2273 (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!137295 (= lt!71839 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137295 (= lt!71843 call!15131)))

(declare-fun e!89385 () ListLongMap!1715)

(assert (=> b!137295 (= e!89385 (+!171 call!15131 (tuple2!2623 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) (get!1498 (select (arr!2273 (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!137296 () Bool)

(assert (=> b!137296 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> b!137296 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))))))))

(assert (=> b!137296 (= e!89384 (= (apply!117 lt!71842 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137297 () Bool)

(declare-fun e!89383 () Bool)

(assert (=> b!137297 (= e!89383 (isEmpty!417 lt!71842))))

(declare-fun b!137298 () Bool)

(assert (=> b!137298 (= e!89386 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137298 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!42945 () Bool)

(assert (=> d!42945 e!89389))

(declare-fun res!65810 () Bool)

(assert (=> d!42945 (=> (not res!65810) (not e!89389))))

(assert (=> d!42945 (= res!65810 (not (contains!901 lt!71842 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!89388 () ListLongMap!1715)

(assert (=> d!42945 (= lt!71842 e!89388)))

(declare-fun c!25756 () Bool)

(assert (=> d!42945 (= c!25756 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42945 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42945 (= (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!71842)))

(declare-fun b!137299 () Bool)

(assert (=> b!137299 (= e!89388 e!89385)))

(declare-fun c!25754 () Bool)

(assert (=> b!137299 (= c!25754 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137300 () Bool)

(assert (=> b!137300 (= e!89387 e!89383)))

(declare-fun c!25757 () Bool)

(assert (=> b!137300 (= c!25757 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137301 () Bool)

(assert (=> b!137301 (= e!89388 (ListLongMap!1716 Nil!1738))))

(declare-fun b!137302 () Bool)

(assert (=> b!137302 (= e!89385 call!15131)))

(declare-fun b!137303 () Bool)

(assert (=> b!137303 (= e!89383 (= lt!71842 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (ite c!25521 (_values!2872 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2889 newMap!16))))))

(declare-fun b!137304 () Bool)

(declare-fun res!65808 () Bool)

(assert (=> b!137304 (=> (not res!65808) (not e!89389))))

(assert (=> b!137304 (= res!65808 (not (contains!901 lt!71842 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42945 c!25756) b!137301))

(assert (= (and d!42945 (not c!25756)) b!137299))

(assert (= (and b!137299 c!25754) b!137295))

(assert (= (and b!137299 (not c!25754)) b!137302))

(assert (= (or b!137295 b!137302) bm!15128))

(assert (= (and d!42945 res!65810) b!137304))

(assert (= (and b!137304 res!65808) b!137293))

(assert (= (and b!137293 res!65811) b!137298))

(assert (= (and b!137293 c!25755) b!137294))

(assert (= (and b!137293 (not c!25755)) b!137300))

(assert (= (and b!137294 res!65809) b!137296))

(assert (= (and b!137300 c!25757) b!137303))

(assert (= (and b!137300 (not c!25757)) b!137297))

(declare-fun b_lambda!6161 () Bool)

(assert (=> (not b_lambda!6161) (not b!137295)))

(assert (=> b!137295 t!6249))

(declare-fun b_and!8525 () Bool)

(assert (= b_and!8521 (and (=> t!6249 result!4059) b_and!8525)))

(assert (=> b!137295 t!6251))

(declare-fun b_and!8527 () Bool)

(assert (= b_and!8523 (and (=> t!6251 result!4061) b_and!8527)))

(declare-fun b_lambda!6163 () Bool)

(assert (=> (not b_lambda!6163) (not b!137296)))

(assert (=> b!137296 t!6249))

(declare-fun b_and!8529 () Bool)

(assert (= b_and!8525 (and (=> t!6249 result!4059) b_and!8529)))

(assert (=> b!137296 t!6251))

(declare-fun b_and!8531 () Bool)

(assert (= b_and!8527 (and (=> t!6251 result!4061) b_and!8531)))

(assert (=> b!137298 m!162731))

(assert (=> b!137298 m!162731))

(assert (=> b!137298 m!162735))

(declare-fun m!164137 () Bool)

(assert (=> b!137295 m!164137))

(assert (=> b!137295 m!162815))

(assert (=> b!137295 m!163167))

(declare-fun m!164139 () Bool)

(assert (=> b!137295 m!164139))

(declare-fun m!164141 () Bool)

(assert (=> b!137295 m!164141))

(assert (=> b!137295 m!164141))

(declare-fun m!164143 () Bool)

(assert (=> b!137295 m!164143))

(assert (=> b!137295 m!163167))

(assert (=> b!137295 m!162815))

(assert (=> b!137295 m!163171))

(assert (=> b!137295 m!162731))

(declare-fun m!164145 () Bool)

(assert (=> b!137304 m!164145))

(declare-fun m!164147 () Bool)

(assert (=> bm!15128 m!164147))

(assert (=> b!137294 m!162731))

(assert (=> b!137294 m!162731))

(declare-fun m!164149 () Bool)

(assert (=> b!137294 m!164149))

(assert (=> b!137303 m!164147))

(assert (=> b!137296 m!162815))

(assert (=> b!137296 m!163167))

(assert (=> b!137296 m!162731))

(declare-fun m!164151 () Bool)

(assert (=> b!137296 m!164151))

(assert (=> b!137296 m!163167))

(assert (=> b!137296 m!162815))

(assert (=> b!137296 m!163171))

(assert (=> b!137296 m!162731))

(declare-fun m!164153 () Bool)

(assert (=> d!42945 m!164153))

(assert (=> d!42945 m!162751))

(assert (=> b!137299 m!162731))

(assert (=> b!137299 m!162731))

(assert (=> b!137299 m!162735))

(declare-fun m!164155 () Bool)

(assert (=> b!137297 m!164155))

(assert (=> bm!15062 d!42945))

(assert (=> b!136601 d!42809))

(assert (=> bm!15047 d!42603))

(declare-fun d!42947 () Bool)

(assert (=> d!42947 (= (get!1502 (getValueByKey!172 (toList!873 lt!71158) lt!71154)) (v!3224 (getValueByKey!172 (toList!873 lt!71158) lt!71154)))))

(assert (=> d!42639 d!42947))

(declare-fun d!42949 () Bool)

(declare-fun c!25758 () Bool)

(assert (=> d!42949 (= c!25758 (and ((_ is Cons!1737) (toList!873 lt!71158)) (= (_1!1321 (h!2343 (toList!873 lt!71158))) lt!71154)))))

(declare-fun e!89390 () Option!178)

(assert (=> d!42949 (= (getValueByKey!172 (toList!873 lt!71158) lt!71154) e!89390)))

(declare-fun b!137307 () Bool)

(declare-fun e!89391 () Option!178)

(assert (=> b!137307 (= e!89391 (getValueByKey!172 (t!6241 (toList!873 lt!71158)) lt!71154))))

(declare-fun b!137305 () Bool)

(assert (=> b!137305 (= e!89390 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71158)))))))

(declare-fun b!137308 () Bool)

(assert (=> b!137308 (= e!89391 None!176)))

(declare-fun b!137306 () Bool)

(assert (=> b!137306 (= e!89390 e!89391)))

(declare-fun c!25759 () Bool)

(assert (=> b!137306 (= c!25759 (and ((_ is Cons!1737) (toList!873 lt!71158)) (not (= (_1!1321 (h!2343 (toList!873 lt!71158))) lt!71154))))))

(assert (= (and d!42949 c!25758) b!137305))

(assert (= (and d!42949 (not c!25758)) b!137306))

(assert (= (and b!137306 c!25759) b!137307))

(assert (= (and b!137306 (not c!25759)) b!137308))

(declare-fun m!164157 () Bool)

(assert (=> b!137307 m!164157))

(assert (=> d!42639 d!42949))

(assert (=> b!136617 d!42691))

(assert (=> b!136617 d!42693))

(declare-fun bm!15129 () Bool)

(declare-fun call!15132 () ListLongMap!1715)

(assert (=> bm!15129 (= call!15132 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) (minValue!2742 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2889 newMap!16)))))

(declare-fun b!137309 () Bool)

(declare-fun e!89398 () Bool)

(declare-fun e!89396 () Bool)

(assert (=> b!137309 (= e!89398 e!89396)))

(declare-fun c!25761 () Bool)

(declare-fun e!89395 () Bool)

(assert (=> b!137309 (= c!25761 e!89395)))

(declare-fun res!65815 () Bool)

(assert (=> b!137309 (=> (not res!65815) (not e!89395))))

(assert (=> b!137309 (= res!65815 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137310 () Bool)

(declare-fun e!89393 () Bool)

(assert (=> b!137310 (= e!89396 e!89393)))

(assert (=> b!137310 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun res!65813 () Bool)

(declare-fun lt!71849 () ListLongMap!1715)

(assert (=> b!137310 (= res!65813 (contains!901 lt!71849 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137310 (=> (not res!65813) (not e!89393))))

(declare-fun b!137311 () Bool)

(declare-fun lt!71848 () Unit!4291)

(declare-fun lt!71847 () Unit!4291)

(assert (=> b!137311 (= lt!71848 lt!71847)))

(declare-fun lt!71851 () V!3499)

(declare-fun lt!71850 () ListLongMap!1715)

(declare-fun lt!71846 () (_ BitVec 64))

(declare-fun lt!71852 () (_ BitVec 64))

(assert (=> b!137311 (not (contains!901 (+!171 lt!71850 (tuple2!2623 lt!71846 lt!71851)) lt!71852))))

(assert (=> b!137311 (= lt!71847 (addStillNotContains!64 lt!71850 lt!71846 lt!71851 lt!71852))))

(assert (=> b!137311 (= lt!71852 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!137311 (= lt!71851 (get!1498 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!137311 (= lt!71846 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137311 (= lt!71850 call!15132)))

(declare-fun e!89394 () ListLongMap!1715)

(assert (=> b!137311 (= e!89394 (+!171 call!15132 (tuple2!2623 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) (get!1498 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!137312 () Bool)

(assert (=> b!137312 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> b!137312 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (_values!2872 newMap!16))))))

(assert (=> b!137312 (= e!89393 (= (apply!117 lt!71849 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137313 () Bool)

(declare-fun e!89392 () Bool)

(assert (=> b!137313 (= e!89392 (isEmpty!417 lt!71849))))

(declare-fun b!137314 () Bool)

(assert (=> b!137314 (= e!89395 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137314 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun d!42951 () Bool)

(assert (=> d!42951 e!89398))

(declare-fun res!65814 () Bool)

(assert (=> d!42951 (=> (not res!65814) (not e!89398))))

(assert (=> d!42951 (= res!65814 (not (contains!901 lt!71849 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!89397 () ListLongMap!1715)

(assert (=> d!42951 (= lt!71849 e!89397)))

(declare-fun c!25762 () Bool)

(assert (=> d!42951 (= c!25762 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!42951 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42951 (= (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!71849)))

(declare-fun b!137315 () Bool)

(assert (=> b!137315 (= e!89397 e!89394)))

(declare-fun c!25760 () Bool)

(assert (=> b!137315 (= c!25760 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137316 () Bool)

(assert (=> b!137316 (= e!89396 e!89392)))

(declare-fun c!25763 () Bool)

(assert (=> b!137316 (= c!25763 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137317 () Bool)

(assert (=> b!137317 (= e!89397 (ListLongMap!1716 Nil!1738))))

(declare-fun b!137318 () Bool)

(assert (=> b!137318 (= e!89394 call!15132)))

(declare-fun b!137319 () Bool)

(assert (=> b!137319 (= e!89392 (= lt!71849 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (ite (and c!25512 c!25514) lt!71242 (extraKeys!2650 newMap!16)) (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) (minValue!2742 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2889 newMap!16))))))

(declare-fun b!137320 () Bool)

(declare-fun res!65812 () Bool)

(assert (=> b!137320 (=> (not res!65812) (not e!89398))))

(assert (=> b!137320 (= res!65812 (not (contains!901 lt!71849 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42951 c!25762) b!137317))

(assert (= (and d!42951 (not c!25762)) b!137315))

(assert (= (and b!137315 c!25760) b!137311))

(assert (= (and b!137315 (not c!25760)) b!137318))

(assert (= (or b!137311 b!137318) bm!15129))

(assert (= (and d!42951 res!65814) b!137320))

(assert (= (and b!137320 res!65812) b!137309))

(assert (= (and b!137309 res!65815) b!137314))

(assert (= (and b!137309 c!25761) b!137310))

(assert (= (and b!137309 (not c!25761)) b!137316))

(assert (= (and b!137310 res!65813) b!137312))

(assert (= (and b!137316 c!25763) b!137319))

(assert (= (and b!137316 (not c!25763)) b!137313))

(declare-fun b_lambda!6165 () Bool)

(assert (=> (not b_lambda!6165) (not b!137311)))

(assert (=> b!137311 t!6249))

(declare-fun b_and!8533 () Bool)

(assert (= b_and!8529 (and (=> t!6249 result!4059) b_and!8533)))

(assert (=> b!137311 t!6251))

(declare-fun b_and!8535 () Bool)

(assert (= b_and!8531 (and (=> t!6251 result!4061) b_and!8535)))

(declare-fun b_lambda!6167 () Bool)

(assert (=> (not b_lambda!6167) (not b!137312)))

(assert (=> b!137312 t!6249))

(declare-fun b_and!8537 () Bool)

(assert (= b_and!8533 (and (=> t!6249 result!4059) b_and!8537)))

(assert (=> b!137312 t!6251))

(declare-fun b_and!8539 () Bool)

(assert (= b_and!8535 (and (=> t!6251 result!4061) b_and!8539)))

(assert (=> b!137314 m!162731))

(assert (=> b!137314 m!162731))

(assert (=> b!137314 m!162735))

(declare-fun m!164159 () Bool)

(assert (=> b!137311 m!164159))

(assert (=> b!137311 m!162815))

(assert (=> b!137311 m!162811))

(declare-fun m!164161 () Bool)

(assert (=> b!137311 m!164161))

(declare-fun m!164163 () Bool)

(assert (=> b!137311 m!164163))

(assert (=> b!137311 m!164163))

(declare-fun m!164165 () Bool)

(assert (=> b!137311 m!164165))

(assert (=> b!137311 m!162811))

(assert (=> b!137311 m!162815))

(assert (=> b!137311 m!162817))

(assert (=> b!137311 m!162731))

(declare-fun m!164167 () Bool)

(assert (=> b!137320 m!164167))

(declare-fun m!164169 () Bool)

(assert (=> bm!15129 m!164169))

(assert (=> b!137310 m!162731))

(assert (=> b!137310 m!162731))

(declare-fun m!164171 () Bool)

(assert (=> b!137310 m!164171))

(assert (=> b!137319 m!164169))

(assert (=> b!137312 m!162815))

(assert (=> b!137312 m!162811))

(assert (=> b!137312 m!162731))

(declare-fun m!164173 () Bool)

(assert (=> b!137312 m!164173))

(assert (=> b!137312 m!162811))

(assert (=> b!137312 m!162815))

(assert (=> b!137312 m!162817))

(assert (=> b!137312 m!162731))

(declare-fun m!164175 () Bool)

(assert (=> d!42951 m!164175))

(assert (=> d!42951 m!162751))

(assert (=> b!137315 m!162731))

(assert (=> b!137315 m!162731))

(assert (=> b!137315 m!162735))

(declare-fun m!164177 () Bool)

(assert (=> b!137313 m!164177))

(assert (=> bm!15032 d!42951))

(declare-fun d!42953 () Bool)

(assert (=> d!42953 (contains!901 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))

(declare-fun lt!71855 () Unit!4291)

(declare-fun choose!850 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 64) (_ BitVec 32) Int) Unit!4291)

(assert (=> d!42953 (= lt!71855 (choose!850 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(assert (=> d!42953 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!42953 (= (lemmaArrayContainsKeyThenInListMap!43 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!71855)))

(declare-fun bs!5761 () Bool)

(assert (= bs!5761 d!42953))

(assert (=> bs!5761 m!162585))

(assert (=> bs!5761 m!162585))

(assert (=> bs!5761 m!162523))

(assert (=> bs!5761 m!163269))

(assert (=> bs!5761 m!162523))

(declare-fun m!164179 () Bool)

(assert (=> bs!5761 m!164179))

(assert (=> bs!5761 m!162751))

(assert (=> b!136829 d!42953))

(declare-fun d!42955 () Bool)

(declare-fun e!89400 () Bool)

(assert (=> d!42955 e!89400))

(declare-fun res!65816 () Bool)

(assert (=> d!42955 (=> res!65816 e!89400)))

(declare-fun lt!71859 () Bool)

(assert (=> d!42955 (= res!65816 (not lt!71859))))

(declare-fun lt!71858 () Bool)

(assert (=> d!42955 (= lt!71859 lt!71858)))

(declare-fun lt!71856 () Unit!4291)

(declare-fun e!89399 () Unit!4291)

(assert (=> d!42955 (= lt!71856 e!89399)))

(declare-fun c!25764 () Bool)

(assert (=> d!42955 (= c!25764 lt!71858)))

(assert (=> d!42955 (= lt!71858 (containsKey!176 (toList!873 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!42955 (= (contains!901 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) lt!71859)))

(declare-fun b!137321 () Bool)

(declare-fun lt!71857 () Unit!4291)

(assert (=> b!137321 (= e!89399 lt!71857)))

(assert (=> b!137321 (= lt!71857 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> b!137321 (isDefined!126 (getValueByKey!172 (toList!873 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun b!137322 () Bool)

(declare-fun Unit!4332 () Unit!4291)

(assert (=> b!137322 (= e!89399 Unit!4332)))

(declare-fun b!137323 () Bool)

(assert (=> b!137323 (= e!89400 (isDefined!126 (getValueByKey!172 (toList!873 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(assert (= (and d!42955 c!25764) b!137321))

(assert (= (and d!42955 (not c!25764)) b!137322))

(assert (= (and d!42955 (not res!65816)) b!137323))

(assert (=> d!42955 m!162523))

(declare-fun m!164181 () Bool)

(assert (=> d!42955 m!164181))

(assert (=> b!137321 m!162523))

(declare-fun m!164183 () Bool)

(assert (=> b!137321 m!164183))

(assert (=> b!137321 m!162523))

(declare-fun m!164185 () Bool)

(assert (=> b!137321 m!164185))

(assert (=> b!137321 m!164185))

(declare-fun m!164187 () Bool)

(assert (=> b!137321 m!164187))

(assert (=> b!137323 m!162523))

(assert (=> b!137323 m!164185))

(assert (=> b!137323 m!164185))

(assert (=> b!137323 m!164187))

(assert (=> b!136829 d!42955))

(assert (=> b!136829 d!42589))

(declare-fun d!42957 () Bool)

(declare-fun e!89402 () Bool)

(assert (=> d!42957 e!89402))

(declare-fun res!65817 () Bool)

(assert (=> d!42957 (=> res!65817 e!89402)))

(declare-fun lt!71863 () Bool)

(assert (=> d!42957 (= res!65817 (not lt!71863))))

(declare-fun lt!71862 () Bool)

(assert (=> d!42957 (= lt!71863 lt!71862)))

(declare-fun lt!71860 () Unit!4291)

(declare-fun e!89401 () Unit!4291)

(assert (=> d!42957 (= lt!71860 e!89401)))

(declare-fun c!25765 () Bool)

(assert (=> d!42957 (= c!25765 lt!71862)))

(assert (=> d!42957 (= lt!71862 (containsKey!176 (toList!873 lt!71457) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42957 (= (contains!901 lt!71457 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71863)))

(declare-fun b!137324 () Bool)

(declare-fun lt!71861 () Unit!4291)

(assert (=> b!137324 (= e!89401 lt!71861)))

(assert (=> b!137324 (= lt!71861 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71457) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> b!137324 (isDefined!126 (getValueByKey!172 (toList!873 lt!71457) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137325 () Bool)

(declare-fun Unit!4333 () Unit!4291)

(assert (=> b!137325 (= e!89401 Unit!4333)))

(declare-fun b!137326 () Bool)

(assert (=> b!137326 (= e!89402 (isDefined!126 (getValueByKey!172 (toList!873 lt!71457) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (= (and d!42957 c!25765) b!137324))

(assert (= (and d!42957 (not c!25765)) b!137325))

(assert (= (and d!42957 (not res!65817)) b!137326))

(declare-fun m!164189 () Bool)

(assert (=> d!42957 m!164189))

(declare-fun m!164191 () Bool)

(assert (=> b!137324 m!164191))

(assert (=> b!137324 m!163145))

(assert (=> b!137324 m!163145))

(declare-fun m!164193 () Bool)

(assert (=> b!137324 m!164193))

(assert (=> b!137326 m!163145))

(assert (=> b!137326 m!163145))

(assert (=> b!137326 m!164193))

(assert (=> d!42647 d!42957))

(declare-fun c!25766 () Bool)

(declare-fun d!42959 () Bool)

(assert (=> d!42959 (= c!25766 (and ((_ is Cons!1737) lt!71454) (= (_1!1321 (h!2343 lt!71454)) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89403 () Option!178)

(assert (=> d!42959 (= (getValueByKey!172 lt!71454 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) e!89403)))

(declare-fun e!89404 () Option!178)

(declare-fun b!137329 () Bool)

(assert (=> b!137329 (= e!89404 (getValueByKey!172 (t!6241 lt!71454) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137327 () Bool)

(assert (=> b!137327 (= e!89403 (Some!177 (_2!1321 (h!2343 lt!71454))))))

(declare-fun b!137330 () Bool)

(assert (=> b!137330 (= e!89404 None!176)))

(declare-fun b!137328 () Bool)

(assert (=> b!137328 (= e!89403 e!89404)))

(declare-fun c!25767 () Bool)

(assert (=> b!137328 (= c!25767 (and ((_ is Cons!1737) lt!71454) (not (= (_1!1321 (h!2343 lt!71454)) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42959 c!25766) b!137327))

(assert (= (and d!42959 (not c!25766)) b!137328))

(assert (= (and b!137328 c!25767) b!137329))

(assert (= (and b!137328 (not c!25767)) b!137330))

(declare-fun m!164195 () Bool)

(assert (=> b!137329 m!164195))

(assert (=> d!42647 d!42959))

(declare-fun d!42961 () Bool)

(assert (=> d!42961 (= (getValueByKey!172 lt!71454 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun lt!71864 () Unit!4291)

(assert (=> d!42961 (= lt!71864 (choose!848 lt!71454 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun e!89405 () Bool)

(assert (=> d!42961 e!89405))

(declare-fun res!65818 () Bool)

(assert (=> d!42961 (=> (not res!65818) (not e!89405))))

(assert (=> d!42961 (= res!65818 (isStrictlySorted!318 lt!71454))))

(assert (=> d!42961 (= (lemmaContainsTupThenGetReturnValue!89 lt!71454 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71864)))

(declare-fun b!137331 () Bool)

(declare-fun res!65819 () Bool)

(assert (=> b!137331 (=> (not res!65819) (not e!89405))))

(assert (=> b!137331 (= res!65819 (containsKey!176 lt!71454 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137332 () Bool)

(assert (=> b!137332 (= e!89405 (contains!904 lt!71454 (tuple2!2623 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (= (and d!42961 res!65818) b!137331))

(assert (= (and b!137331 res!65819) b!137332))

(assert (=> d!42961 m!163139))

(declare-fun m!164197 () Bool)

(assert (=> d!42961 m!164197))

(declare-fun m!164199 () Bool)

(assert (=> d!42961 m!164199))

(declare-fun m!164201 () Bool)

(assert (=> b!137331 m!164201))

(declare-fun m!164203 () Bool)

(assert (=> b!137332 m!164203))

(assert (=> d!42647 d!42961))

(declare-fun b!137333 () Bool)

(declare-fun e!89409 () List!1741)

(declare-fun call!15134 () List!1741)

(assert (=> b!137333 (= e!89409 call!15134)))

(declare-fun e!89407 () Bool)

(declare-fun b!137334 () Bool)

(declare-fun lt!71865 () List!1741)

(assert (=> b!137334 (= e!89407 (contains!904 lt!71865 (tuple2!2623 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!137335 () Bool)

(declare-fun e!89406 () List!1741)

(declare-fun call!15135 () List!1741)

(assert (=> b!137335 (= e!89406 call!15135)))

(declare-fun b!137336 () Bool)

(declare-fun e!89408 () List!1741)

(assert (=> b!137336 (= e!89408 e!89409)))

(declare-fun c!25768 () Bool)

(assert (=> b!137336 (= c!25768 (and ((_ is Cons!1737) (toList!873 lt!71164)) (= (_1!1321 (h!2343 (toList!873 lt!71164))) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun bm!15130 () Bool)

(declare-fun c!25771 () Bool)

(declare-fun call!15133 () List!1741)

(declare-fun e!89410 () List!1741)

(assert (=> bm!15130 (= call!15133 ($colon$colon!92 e!89410 (ite c!25771 (h!2343 (toList!873 lt!71164)) (tuple2!2623 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(declare-fun c!25770 () Bool)

(assert (=> bm!15130 (= c!25770 c!25771)))

(declare-fun b!137337 () Bool)

(assert (=> b!137337 (= e!89406 call!15135)))

(declare-fun bm!15131 () Bool)

(assert (=> bm!15131 (= call!15135 call!15134)))

(declare-fun d!42963 () Bool)

(assert (=> d!42963 e!89407))

(declare-fun res!65821 () Bool)

(assert (=> d!42963 (=> (not res!65821) (not e!89407))))

(assert (=> d!42963 (= res!65821 (isStrictlySorted!318 lt!71865))))

(assert (=> d!42963 (= lt!71865 e!89408)))

(assert (=> d!42963 (= c!25771 (and ((_ is Cons!1737) (toList!873 lt!71164)) (bvslt (_1!1321 (h!2343 (toList!873 lt!71164))) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> d!42963 (isStrictlySorted!318 (toList!873 lt!71164))))

(assert (=> d!42963 (= (insertStrictlySorted!91 (toList!873 lt!71164) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71865)))

(declare-fun c!25769 () Bool)

(declare-fun b!137338 () Bool)

(assert (=> b!137338 (= e!89410 (ite c!25768 (t!6241 (toList!873 lt!71164)) (ite c!25769 (Cons!1737 (h!2343 (toList!873 lt!71164)) (t!6241 (toList!873 lt!71164))) Nil!1738)))))

(declare-fun b!137339 () Bool)

(declare-fun res!65820 () Bool)

(assert (=> b!137339 (=> (not res!65820) (not e!89407))))

(assert (=> b!137339 (= res!65820 (containsKey!176 lt!71865 (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137340 () Bool)

(assert (=> b!137340 (= c!25769 (and ((_ is Cons!1737) (toList!873 lt!71164)) (bvsgt (_1!1321 (h!2343 (toList!873 lt!71164))) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> b!137340 (= e!89409 e!89406)))

(declare-fun bm!15132 () Bool)

(assert (=> bm!15132 (= call!15134 call!15133)))

(declare-fun b!137341 () Bool)

(assert (=> b!137341 (= e!89408 call!15133)))

(declare-fun b!137342 () Bool)

(assert (=> b!137342 (= e!89410 (insertStrictlySorted!91 (t!6241 (toList!873 lt!71164)) (_1!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (= (and d!42963 c!25771) b!137341))

(assert (= (and d!42963 (not c!25771)) b!137336))

(assert (= (and b!137336 c!25768) b!137333))

(assert (= (and b!137336 (not c!25768)) b!137340))

(assert (= (and b!137340 c!25769) b!137335))

(assert (= (and b!137340 (not c!25769)) b!137337))

(assert (= (or b!137335 b!137337) bm!15131))

(assert (= (or b!137333 bm!15131) bm!15132))

(assert (= (or b!137341 bm!15132) bm!15130))

(assert (= (and bm!15130 c!25770) b!137342))

(assert (= (and bm!15130 (not c!25770)) b!137338))

(assert (= (and d!42963 res!65821) b!137339))

(assert (= (and b!137339 res!65820) b!137334))

(declare-fun m!164205 () Bool)

(assert (=> b!137342 m!164205))

(declare-fun m!164207 () Bool)

(assert (=> b!137339 m!164207))

(declare-fun m!164209 () Bool)

(assert (=> d!42963 m!164209))

(declare-fun m!164211 () Bool)

(assert (=> d!42963 m!164211))

(declare-fun m!164213 () Bool)

(assert (=> b!137334 m!164213))

(declare-fun m!164215 () Bool)

(assert (=> bm!15130 m!164215))

(assert (=> d!42647 d!42963))

(declare-fun d!42965 () Bool)

(declare-fun c!25772 () Bool)

(assert (=> d!42965 (= c!25772 (and ((_ is Cons!1737) (toList!873 lt!71438)) (= (_1!1321 (h!2343 (toList!873 lt!71438))) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89411 () Option!178)

(assert (=> d!42965 (= (getValueByKey!172 (toList!873 lt!71438) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) e!89411)))

(declare-fun b!137345 () Bool)

(declare-fun e!89412 () Option!178)

(assert (=> b!137345 (= e!89412 (getValueByKey!172 (t!6241 (toList!873 lt!71438)) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137343 () Bool)

(assert (=> b!137343 (= e!89411 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71438)))))))

(declare-fun b!137346 () Bool)

(assert (=> b!137346 (= e!89412 None!176)))

(declare-fun b!137344 () Bool)

(assert (=> b!137344 (= e!89411 e!89412)))

(declare-fun c!25773 () Bool)

(assert (=> b!137344 (= c!25773 (and ((_ is Cons!1737) (toList!873 lt!71438)) (not (= (_1!1321 (h!2343 (toList!873 lt!71438))) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42965 c!25772) b!137343))

(assert (= (and d!42965 (not c!25772)) b!137344))

(assert (= (and b!137344 c!25773) b!137345))

(assert (= (and b!137344 (not c!25773)) b!137346))

(declare-fun m!164217 () Bool)

(assert (=> b!137345 m!164217))

(assert (=> b!136737 d!42965))

(declare-fun d!42967 () Bool)

(assert (=> d!42967 (isDefined!126 (getValueByKey!172 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun lt!71866 () Unit!4291)

(assert (=> d!42967 (= lt!71866 (choose!842 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun e!89413 () Bool)

(assert (=> d!42967 e!89413))

(declare-fun res!65822 () Bool)

(assert (=> d!42967 (=> (not res!65822) (not e!89413))))

(assert (=> d!42967 (= res!65822 (isStrictlySorted!318 (toList!873 call!15000)))))

(assert (=> d!42967 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) lt!71866)))

(declare-fun b!137347 () Bool)

(assert (=> b!137347 (= e!89413 (containsKey!176 (toList!873 call!15000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (= (and d!42967 res!65822) b!137347))

(assert (=> d!42967 m!162523))

(assert (=> d!42967 m!163305))

(assert (=> d!42967 m!163305))

(assert (=> d!42967 m!163307))

(assert (=> d!42967 m!162523))

(declare-fun m!164219 () Bool)

(assert (=> d!42967 m!164219))

(declare-fun m!164221 () Bool)

(assert (=> d!42967 m!164221))

(assert (=> b!137347 m!162523))

(assert (=> b!137347 m!163301))

(assert (=> b!136843 d!42967))

(assert (=> b!136843 d!42685))

(assert (=> b!136843 d!42687))

(declare-fun d!42969 () Bool)

(declare-fun e!89415 () Bool)

(assert (=> d!42969 e!89415))

(declare-fun res!65823 () Bool)

(assert (=> d!42969 (=> res!65823 e!89415)))

(declare-fun lt!71870 () Bool)

(assert (=> d!42969 (= res!65823 (not lt!71870))))

(declare-fun lt!71869 () Bool)

(assert (=> d!42969 (= lt!71870 lt!71869)))

(declare-fun lt!71867 () Unit!4291)

(declare-fun e!89414 () Unit!4291)

(assert (=> d!42969 (= lt!71867 e!89414)))

(declare-fun c!25774 () Bool)

(assert (=> d!42969 (= c!25774 lt!71869)))

(assert (=> d!42969 (= lt!71869 (containsKey!176 (toList!873 lt!71349) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42969 (= (contains!901 lt!71349 #b0000000000000000000000000000000000000000000000000000000000000000) lt!71870)))

(declare-fun b!137348 () Bool)

(declare-fun lt!71868 () Unit!4291)

(assert (=> b!137348 (= e!89414 lt!71868)))

(assert (=> b!137348 (= lt!71868 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71349) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137348 (isDefined!126 (getValueByKey!172 (toList!873 lt!71349) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137349 () Bool)

(declare-fun Unit!4334 () Unit!4291)

(assert (=> b!137349 (= e!89414 Unit!4334)))

(declare-fun b!137350 () Bool)

(assert (=> b!137350 (= e!89415 (isDefined!126 (getValueByKey!172 (toList!873 lt!71349) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42969 c!25774) b!137348))

(assert (= (and d!42969 (not c!25774)) b!137349))

(assert (= (and d!42969 (not res!65823)) b!137350))

(declare-fun m!164223 () Bool)

(assert (=> d!42969 m!164223))

(declare-fun m!164225 () Bool)

(assert (=> b!137348 m!164225))

(declare-fun m!164227 () Bool)

(assert (=> b!137348 m!164227))

(assert (=> b!137348 m!164227))

(declare-fun m!164229 () Bool)

(assert (=> b!137348 m!164229))

(assert (=> b!137350 m!164227))

(assert (=> b!137350 m!164227))

(assert (=> b!137350 m!164229))

(assert (=> bm!15037 d!42969))

(declare-fun d!42971 () Bool)

(declare-fun e!89417 () Bool)

(assert (=> d!42971 e!89417))

(declare-fun res!65824 () Bool)

(assert (=> d!42971 (=> res!65824 e!89417)))

(declare-fun lt!71874 () Bool)

(assert (=> d!42971 (= res!65824 (not lt!71874))))

(declare-fun lt!71873 () Bool)

(assert (=> d!42971 (= lt!71874 lt!71873)))

(declare-fun lt!71871 () Unit!4291)

(declare-fun e!89416 () Unit!4291)

(assert (=> d!42971 (= lt!71871 e!89416)))

(declare-fun c!25775 () Bool)

(assert (=> d!42971 (= c!25775 lt!71873)))

(assert (=> d!42971 (= lt!71873 (containsKey!176 (toList!873 lt!71420) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42971 (= (contains!901 lt!71420 #b1000000000000000000000000000000000000000000000000000000000000000) lt!71874)))

(declare-fun b!137351 () Bool)

(declare-fun lt!71872 () Unit!4291)

(assert (=> b!137351 (= e!89416 lt!71872)))

(assert (=> b!137351 (= lt!71872 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71420) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137351 (isDefined!126 (getValueByKey!172 (toList!873 lt!71420) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137352 () Bool)

(declare-fun Unit!4335 () Unit!4291)

(assert (=> b!137352 (= e!89416 Unit!4335)))

(declare-fun b!137353 () Bool)

(assert (=> b!137353 (= e!89417 (isDefined!126 (getValueByKey!172 (toList!873 lt!71420) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42971 c!25775) b!137351))

(assert (= (and d!42971 (not c!25775)) b!137352))

(assert (= (and d!42971 (not res!65824)) b!137353))

(declare-fun m!164231 () Bool)

(assert (=> d!42971 m!164231))

(declare-fun m!164233 () Bool)

(assert (=> b!137351 m!164233))

(declare-fun m!164235 () Bool)

(assert (=> b!137351 m!164235))

(assert (=> b!137351 m!164235))

(declare-fun m!164237 () Bool)

(assert (=> b!137351 m!164237))

(assert (=> b!137353 m!164235))

(assert (=> b!137353 m!164235))

(assert (=> b!137353 m!164237))

(assert (=> b!136714 d!42971))

(declare-fun d!42973 () Bool)

(assert (=> d!42973 (= (apply!117 lt!71391 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1502 (getValueByKey!172 (toList!873 lt!71391) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!5762 () Bool)

(assert (= bs!5762 d!42973))

(assert (=> bs!5762 m!162731))

(declare-fun m!164239 () Bool)

(assert (=> bs!5762 m!164239))

(assert (=> bs!5762 m!164239))

(declare-fun m!164241 () Bool)

(assert (=> bs!5762 m!164241))

(assert (=> b!136677 d!42973))

(declare-fun d!42975 () Bool)

(declare-fun c!25776 () Bool)

(assert (=> d!42975 (= c!25776 ((_ is ValueCellFull!1101) (select (arr!2273 (ite c!25512 (_values!2872 newMap!16) lt!71250)) #b00000000000000000000000000000000)))))

(declare-fun e!89418 () V!3499)

(assert (=> d!42975 (= (get!1498 (select (arr!2273 (ite c!25512 (_values!2872 newMap!16) lt!71250)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!89418)))

(declare-fun b!137354 () Bool)

(assert (=> b!137354 (= e!89418 (get!1500 (select (arr!2273 (ite c!25512 (_values!2872 newMap!16) lt!71250)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137355 () Bool)

(assert (=> b!137355 (= e!89418 (get!1501 (select (arr!2273 (ite c!25512 (_values!2872 newMap!16) lt!71250)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42975 c!25776) b!137354))

(assert (= (and d!42975 (not c!25776)) b!137355))

(assert (=> b!137354 m!162971))

(assert (=> b!137354 m!162815))

(declare-fun m!164243 () Bool)

(assert (=> b!137354 m!164243))

(assert (=> b!137355 m!162971))

(assert (=> b!137355 m!162815))

(declare-fun m!164245 () Bool)

(assert (=> b!137355 m!164245))

(assert (=> b!136677 d!42975))

(declare-fun d!42977 () Bool)

(declare-fun e!89420 () Bool)

(assert (=> d!42977 e!89420))

(declare-fun res!65825 () Bool)

(assert (=> d!42977 (=> res!65825 e!89420)))

(declare-fun lt!71878 () Bool)

(assert (=> d!42977 (= res!65825 (not lt!71878))))

(declare-fun lt!71877 () Bool)

(assert (=> d!42977 (= lt!71878 lt!71877)))

(declare-fun lt!71875 () Unit!4291)

(declare-fun e!89419 () Unit!4291)

(assert (=> d!42977 (= lt!71875 e!89419)))

(declare-fun c!25777 () Bool)

(assert (=> d!42977 (= c!25777 lt!71877)))

(assert (=> d!42977 (= lt!71877 (containsKey!176 (toList!873 lt!71391) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!42977 (= (contains!901 lt!71391 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) lt!71878)))

(declare-fun b!137356 () Bool)

(declare-fun lt!71876 () Unit!4291)

(assert (=> b!137356 (= e!89419 lt!71876)))

(assert (=> b!137356 (= lt!71876 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71391) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137356 (isDefined!126 (getValueByKey!172 (toList!873 lt!71391) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137357 () Bool)

(declare-fun Unit!4336 () Unit!4291)

(assert (=> b!137357 (= e!89419 Unit!4336)))

(declare-fun b!137358 () Bool)

(assert (=> b!137358 (= e!89420 (isDefined!126 (getValueByKey!172 (toList!873 lt!71391) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!42977 c!25777) b!137356))

(assert (= (and d!42977 (not c!25777)) b!137357))

(assert (= (and d!42977 (not res!65825)) b!137358))

(assert (=> d!42977 m!162731))

(declare-fun m!164247 () Bool)

(assert (=> d!42977 m!164247))

(assert (=> b!137356 m!162731))

(declare-fun m!164249 () Bool)

(assert (=> b!137356 m!164249))

(assert (=> b!137356 m!162731))

(assert (=> b!137356 m!164239))

(assert (=> b!137356 m!164239))

(declare-fun m!164251 () Bool)

(assert (=> b!137356 m!164251))

(assert (=> b!137358 m!162731))

(assert (=> b!137358 m!164239))

(assert (=> b!137358 m!164239))

(assert (=> b!137358 m!164251))

(assert (=> b!136661 d!42977))

(assert (=> b!136842 d!42597))

(assert (=> b!136760 d!42809))

(declare-fun d!42979 () Bool)

(declare-fun res!65826 () Bool)

(declare-fun e!89421 () Bool)

(assert (=> d!42979 (=> res!65826 e!89421)))

(assert (=> d!42979 (= res!65826 (and ((_ is Cons!1737) (toList!873 e!88876)) (= (_1!1321 (h!2343 (toList!873 e!88876))) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257))))))))

(assert (=> d!42979 (= (containsKey!176 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))) e!89421)))

(declare-fun b!137359 () Bool)

(declare-fun e!89422 () Bool)

(assert (=> b!137359 (= e!89421 e!89422)))

(declare-fun res!65827 () Bool)

(assert (=> b!137359 (=> (not res!65827) (not e!89422))))

(assert (=> b!137359 (= res!65827 (and (or (not ((_ is Cons!1737) (toList!873 e!88876))) (bvsle (_1!1321 (h!2343 (toList!873 e!88876))) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257))))) ((_ is Cons!1737) (toList!873 e!88876)) (bvslt (_1!1321 (h!2343 (toList!873 e!88876))) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257))))))))

(declare-fun b!137360 () Bool)

(assert (=> b!137360 (= e!89422 (containsKey!176 (t!6241 (toList!873 e!88876)) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))

(assert (= (and d!42979 (not res!65826)) b!137359))

(assert (= (and b!137359 res!65827) b!137360))

(declare-fun m!164253 () Bool)

(assert (=> b!137360 m!164253))

(assert (=> d!42661 d!42979))

(assert (=> d!42633 d!42641))

(assert (=> d!42633 d!42631))

(declare-fun d!42981 () Bool)

(assert (=> d!42981 (contains!901 (+!171 lt!71166 (tuple2!2623 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71156)))

(assert (=> d!42981 true))

(declare-fun _$35!386 () Unit!4291)

(assert (=> d!42981 (= (choose!843 lt!71166 lt!71159 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))) lt!71156) _$35!386)))

(declare-fun bs!5763 () Bool)

(assert (= bs!5763 d!42981))

(assert (=> bs!5763 m!162615))

(assert (=> bs!5763 m!162615))

(assert (=> bs!5763 m!162625))

(assert (=> d!42633 d!42981))

(declare-fun d!42983 () Bool)

(declare-fun e!89424 () Bool)

(assert (=> d!42983 e!89424))

(declare-fun res!65828 () Bool)

(assert (=> d!42983 (=> res!65828 e!89424)))

(declare-fun lt!71882 () Bool)

(assert (=> d!42983 (= res!65828 (not lt!71882))))

(declare-fun lt!71881 () Bool)

(assert (=> d!42983 (= lt!71882 lt!71881)))

(declare-fun lt!71879 () Unit!4291)

(declare-fun e!89423 () Unit!4291)

(assert (=> d!42983 (= lt!71879 e!89423)))

(declare-fun c!25778 () Bool)

(assert (=> d!42983 (= c!25778 lt!71881)))

(assert (=> d!42983 (= lt!71881 (containsKey!176 (toList!873 lt!71166) lt!71156))))

(assert (=> d!42983 (= (contains!901 lt!71166 lt!71156) lt!71882)))

(declare-fun b!137362 () Bool)

(declare-fun lt!71880 () Unit!4291)

(assert (=> b!137362 (= e!89423 lt!71880)))

(assert (=> b!137362 (= lt!71880 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71166) lt!71156))))

(assert (=> b!137362 (isDefined!126 (getValueByKey!172 (toList!873 lt!71166) lt!71156))))

(declare-fun b!137363 () Bool)

(declare-fun Unit!4337 () Unit!4291)

(assert (=> b!137363 (= e!89423 Unit!4337)))

(declare-fun b!137364 () Bool)

(assert (=> b!137364 (= e!89424 (isDefined!126 (getValueByKey!172 (toList!873 lt!71166) lt!71156)))))

(assert (= (and d!42983 c!25778) b!137362))

(assert (= (and d!42983 (not c!25778)) b!137363))

(assert (= (and d!42983 (not res!65828)) b!137364))

(declare-fun m!164255 () Bool)

(assert (=> d!42983 m!164255))

(declare-fun m!164257 () Bool)

(assert (=> b!137362 m!164257))

(declare-fun m!164259 () Bool)

(assert (=> b!137362 m!164259))

(assert (=> b!137362 m!164259))

(declare-fun m!164261 () Bool)

(assert (=> b!137362 m!164261))

(assert (=> b!137364 m!164259))

(assert (=> b!137364 m!164259))

(assert (=> b!137364 m!164261))

(assert (=> d!42633 d!42983))

(assert (=> b!136576 d!42809))

(declare-fun d!42985 () Bool)

(assert (=> d!42985 (= (apply!117 lt!71391 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!172 (toList!873 lt!71391) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5764 () Bool)

(assert (= bs!5764 d!42985))

(assert (=> bs!5764 m!163989))

(assert (=> bs!5764 m!163989))

(declare-fun m!164263 () Bool)

(assert (=> bs!5764 m!164263))

(assert (=> b!136675 d!42985))

(assert (=> b!136552 d!42809))

(declare-fun d!42987 () Bool)

(declare-fun e!89426 () Bool)

(assert (=> d!42987 e!89426))

(declare-fun res!65829 () Bool)

(assert (=> d!42987 (=> res!65829 e!89426)))

(declare-fun lt!71886 () Bool)

(assert (=> d!42987 (= res!65829 (not lt!71886))))

(declare-fun lt!71885 () Bool)

(assert (=> d!42987 (= lt!71886 lt!71885)))

(declare-fun lt!71883 () Unit!4291)

(declare-fun e!89425 () Unit!4291)

(assert (=> d!42987 (= lt!71883 e!89425)))

(declare-fun c!25779 () Bool)

(assert (=> d!42987 (= c!25779 lt!71885)))

(assert (=> d!42987 (= lt!71885 (containsKey!176 (toList!873 lt!71469) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42987 (= (contains!901 lt!71469 #b0000000000000000000000000000000000000000000000000000000000000000) lt!71886)))

(declare-fun b!137365 () Bool)

(declare-fun lt!71884 () Unit!4291)

(assert (=> b!137365 (= e!89425 lt!71884)))

(assert (=> b!137365 (= lt!71884 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71469) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137365 (isDefined!126 (getValueByKey!172 (toList!873 lt!71469) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137366 () Bool)

(declare-fun Unit!4338 () Unit!4291)

(assert (=> b!137366 (= e!89425 Unit!4338)))

(declare-fun b!137367 () Bool)

(assert (=> b!137367 (= e!89426 (isDefined!126 (getValueByKey!172 (toList!873 lt!71469) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42987 c!25779) b!137365))

(assert (= (and d!42987 (not c!25779)) b!137366))

(assert (= (and d!42987 (not res!65829)) b!137367))

(declare-fun m!164265 () Bool)

(assert (=> d!42987 m!164265))

(declare-fun m!164267 () Bool)

(assert (=> b!137365 m!164267))

(declare-fun m!164269 () Bool)

(assert (=> b!137365 m!164269))

(assert (=> b!137365 m!164269))

(declare-fun m!164271 () Bool)

(assert (=> b!137365 m!164271))

(assert (=> b!137367 m!164269))

(assert (=> b!137367 m!164269))

(assert (=> b!137367 m!164271))

(assert (=> bm!15060 d!42987))

(declare-fun d!42989 () Bool)

(declare-fun e!89428 () Bool)

(assert (=> d!42989 e!89428))

(declare-fun res!65830 () Bool)

(assert (=> d!42989 (=> res!65830 e!89428)))

(declare-fun lt!71890 () Bool)

(assert (=> d!42989 (= res!65830 (not lt!71890))))

(declare-fun lt!71889 () Bool)

(assert (=> d!42989 (= lt!71890 lt!71889)))

(declare-fun lt!71887 () Unit!4291)

(declare-fun e!89427 () Unit!4291)

(assert (=> d!42989 (= lt!71887 e!89427)))

(declare-fun c!25780 () Bool)

(assert (=> d!42989 (= c!25780 lt!71889)))

(assert (=> d!42989 (= lt!71889 (containsKey!176 (toList!873 lt!71438) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> d!42989 (= (contains!901 lt!71438 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71890)))

(declare-fun b!137368 () Bool)

(declare-fun lt!71888 () Unit!4291)

(assert (=> b!137368 (= e!89427 lt!71888)))

(assert (=> b!137368 (= lt!71888 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71438) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (=> b!137368 (isDefined!126 (getValueByKey!172 (toList!873 lt!71438) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137369 () Bool)

(declare-fun Unit!4339 () Unit!4291)

(assert (=> b!137369 (= e!89427 Unit!4339)))

(declare-fun b!137370 () Bool)

(assert (=> b!137370 (= e!89428 (isDefined!126 (getValueByKey!172 (toList!873 lt!71438) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (= (and d!42989 c!25780) b!137368))

(assert (= (and d!42989 (not c!25780)) b!137369))

(assert (= (and d!42989 (not res!65830)) b!137370))

(declare-fun m!164273 () Bool)

(assert (=> d!42989 m!164273))

(declare-fun m!164275 () Bool)

(assert (=> b!137368 m!164275))

(assert (=> b!137368 m!163089))

(assert (=> b!137368 m!163089))

(declare-fun m!164277 () Bool)

(assert (=> b!137368 m!164277))

(assert (=> b!137370 m!163089))

(assert (=> b!137370 m!163089))

(assert (=> b!137370 m!164277))

(assert (=> d!42629 d!42989))

(declare-fun c!25781 () Bool)

(declare-fun d!42991 () Bool)

(assert (=> d!42991 (= c!25781 (and ((_ is Cons!1737) lt!71435) (= (_1!1321 (h!2343 lt!71435)) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun e!89429 () Option!178)

(assert (=> d!42991 (= (getValueByKey!172 lt!71435 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) e!89429)))

(declare-fun b!137373 () Bool)

(declare-fun e!89430 () Option!178)

(assert (=> b!137373 (= e!89430 (getValueByKey!172 (t!6241 lt!71435) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137371 () Bool)

(assert (=> b!137371 (= e!89429 (Some!177 (_2!1321 (h!2343 lt!71435))))))

(declare-fun b!137374 () Bool)

(assert (=> b!137374 (= e!89430 None!176)))

(declare-fun b!137372 () Bool)

(assert (=> b!137372 (= e!89429 e!89430)))

(declare-fun c!25782 () Bool)

(assert (=> b!137372 (= c!25782 (and ((_ is Cons!1737) lt!71435) (not (= (_1!1321 (h!2343 lt!71435)) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(assert (= (and d!42991 c!25781) b!137371))

(assert (= (and d!42991 (not c!25781)) b!137372))

(assert (= (and b!137372 c!25782) b!137373))

(assert (= (and b!137372 (not c!25782)) b!137374))

(declare-fun m!164279 () Bool)

(assert (=> b!137373 m!164279))

(assert (=> d!42629 d!42991))

(declare-fun d!42993 () Bool)

(assert (=> d!42993 (= (getValueByKey!172 lt!71435 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) (Some!177 (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun lt!71891 () Unit!4291)

(assert (=> d!42993 (= lt!71891 (choose!848 lt!71435 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun e!89431 () Bool)

(assert (=> d!42993 e!89431))

(declare-fun res!65831 () Bool)

(assert (=> d!42993 (=> (not res!65831) (not e!89431))))

(assert (=> d!42993 (= res!65831 (isStrictlySorted!318 lt!71435))))

(assert (=> d!42993 (= (lemmaContainsTupThenGetReturnValue!89 lt!71435 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71891)))

(declare-fun b!137375 () Bool)

(declare-fun res!65832 () Bool)

(assert (=> b!137375 (=> (not res!65832) (not e!89431))))

(assert (=> b!137375 (= res!65832 (containsKey!176 lt!71435 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137376 () Bool)

(assert (=> b!137376 (= e!89431 (contains!904 lt!71435 (tuple2!2623 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (= (and d!42993 res!65831) b!137375))

(assert (= (and b!137375 res!65832) b!137376))

(assert (=> d!42993 m!163083))

(declare-fun m!164281 () Bool)

(assert (=> d!42993 m!164281))

(declare-fun m!164283 () Bool)

(assert (=> d!42993 m!164283))

(declare-fun m!164285 () Bool)

(assert (=> b!137375 m!164285))

(declare-fun m!164287 () Bool)

(assert (=> b!137376 m!164287))

(assert (=> d!42629 d!42993))

(declare-fun b!137377 () Bool)

(declare-fun e!89435 () List!1741)

(declare-fun call!15137 () List!1741)

(assert (=> b!137377 (= e!89435 call!15137)))

(declare-fun b!137378 () Bool)

(declare-fun lt!71892 () List!1741)

(declare-fun e!89433 () Bool)

(assert (=> b!137378 (= e!89433 (contains!904 lt!71892 (tuple2!2623 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun b!137379 () Bool)

(declare-fun e!89432 () List!1741)

(declare-fun call!15138 () List!1741)

(assert (=> b!137379 (= e!89432 call!15138)))

(declare-fun b!137380 () Bool)

(declare-fun e!89434 () List!1741)

(assert (=> b!137380 (= e!89434 e!89435)))

(declare-fun c!25783 () Bool)

(assert (=> b!137380 (= c!25783 (and ((_ is Cons!1737) (toList!873 lt!71169)) (= (_1!1321 (h!2343 (toList!873 lt!71169))) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(declare-fun c!25786 () Bool)

(declare-fun call!15136 () List!1741)

(declare-fun e!89436 () List!1741)

(declare-fun bm!15133 () Bool)

(assert (=> bm!15133 (= call!15136 ($colon$colon!92 e!89436 (ite c!25786 (h!2343 (toList!873 lt!71169)) (tuple2!2623 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))))

(declare-fun c!25785 () Bool)

(assert (=> bm!15133 (= c!25785 c!25786)))

(declare-fun b!137381 () Bool)

(assert (=> b!137381 (= e!89432 call!15138)))

(declare-fun bm!15134 () Bool)

(assert (=> bm!15134 (= call!15138 call!15137)))

(declare-fun d!42995 () Bool)

(assert (=> d!42995 e!89433))

(declare-fun res!65834 () Bool)

(assert (=> d!42995 (=> (not res!65834) (not e!89433))))

(assert (=> d!42995 (= res!65834 (isStrictlySorted!318 lt!71892))))

(assert (=> d!42995 (= lt!71892 e!89434)))

(assert (=> d!42995 (= c!25786 (and ((_ is Cons!1737) (toList!873 lt!71169)) (bvslt (_1!1321 (h!2343 (toList!873 lt!71169))) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> d!42995 (isStrictlySorted!318 (toList!873 lt!71169))))

(assert (=> d!42995 (= (insertStrictlySorted!91 (toList!873 lt!71169) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71892)))

(declare-fun b!137382 () Bool)

(declare-fun c!25784 () Bool)

(assert (=> b!137382 (= e!89436 (ite c!25783 (t!6241 (toList!873 lt!71169)) (ite c!25784 (Cons!1737 (h!2343 (toList!873 lt!71169)) (t!6241 (toList!873 lt!71169))) Nil!1738)))))

(declare-fun b!137383 () Bool)

(declare-fun res!65833 () Bool)

(assert (=> b!137383 (=> (not res!65833) (not e!89433))))

(assert (=> b!137383 (= res!65833 (containsKey!176 lt!71892 (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(declare-fun b!137384 () Bool)

(assert (=> b!137384 (= c!25784 (and ((_ is Cons!1737) (toList!873 lt!71169)) (bvsgt (_1!1321 (h!2343 (toList!873 lt!71169))) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))

(assert (=> b!137384 (= e!89435 e!89432)))

(declare-fun bm!15135 () Bool)

(assert (=> bm!15135 (= call!15137 call!15136)))

(declare-fun b!137385 () Bool)

(assert (=> b!137385 (= e!89434 call!15136)))

(declare-fun b!137386 () Bool)

(assert (=> b!137386 (= e!89436 (insertStrictlySorted!91 (t!6241 (toList!873 lt!71169)) (_1!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) (_2!1321 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))))

(assert (= (and d!42995 c!25786) b!137385))

(assert (= (and d!42995 (not c!25786)) b!137380))

(assert (= (and b!137380 c!25783) b!137377))

(assert (= (and b!137380 (not c!25783)) b!137384))

(assert (= (and b!137384 c!25784) b!137379))

(assert (= (and b!137384 (not c!25784)) b!137381))

(assert (= (or b!137379 b!137381) bm!15134))

(assert (= (or b!137377 bm!15134) bm!15135))

(assert (= (or b!137385 bm!15135) bm!15133))

(assert (= (and bm!15133 c!25785) b!137386))

(assert (= (and bm!15133 (not c!25785)) b!137382))

(assert (= (and d!42995 res!65834) b!137383))

(assert (= (and b!137383 res!65833) b!137378))

(declare-fun m!164289 () Bool)

(assert (=> b!137386 m!164289))

(declare-fun m!164291 () Bool)

(assert (=> b!137383 m!164291))

(declare-fun m!164293 () Bool)

(assert (=> d!42995 m!164293))

(declare-fun m!164295 () Bool)

(assert (=> d!42995 m!164295))

(declare-fun m!164297 () Bool)

(assert (=> b!137378 m!164297))

(declare-fun m!164299 () Bool)

(assert (=> bm!15133 m!164299))

(assert (=> d!42629 d!42995))

(declare-fun d!42997 () Bool)

(assert (=> d!42997 (= (apply!117 lt!71420 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1502 (getValueByKey!172 (toList!873 lt!71420) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!5765 () Bool)

(assert (= bs!5765 d!42997))

(assert (=> bs!5765 m!162591))

(assert (=> bs!5765 m!163725))

(assert (=> bs!5765 m!163725))

(declare-fun m!164301 () Bool)

(assert (=> bs!5765 m!164301))

(assert (=> b!136706 d!42997))

(assert (=> b!136706 d!42585))

(declare-fun d!42999 () Bool)

(declare-fun e!89438 () Bool)

(assert (=> d!42999 e!89438))

(declare-fun res!65835 () Bool)

(assert (=> d!42999 (=> res!65835 e!89438)))

(declare-fun lt!71896 () Bool)

(assert (=> d!42999 (= res!65835 (not lt!71896))))

(declare-fun lt!71895 () Bool)

(assert (=> d!42999 (= lt!71896 lt!71895)))

(declare-fun lt!71893 () Unit!4291)

(declare-fun e!89437 () Unit!4291)

(assert (=> d!42999 (= lt!71893 e!89437)))

(declare-fun c!25787 () Bool)

(assert (=> d!42999 (= c!25787 lt!71895)))

(assert (=> d!42999 (= lt!71895 (containsKey!176 (toList!873 lt!71323) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!42999 (= (contains!901 lt!71323 #b0000000000000000000000000000000000000000000000000000000000000000) lt!71896)))

(declare-fun b!137387 () Bool)

(declare-fun lt!71894 () Unit!4291)

(assert (=> b!137387 (= e!89437 lt!71894)))

(assert (=> b!137387 (= lt!71894 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71323) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137387 (isDefined!126 (getValueByKey!172 (toList!873 lt!71323) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137388 () Bool)

(declare-fun Unit!4340 () Unit!4291)

(assert (=> b!137388 (= e!89437 Unit!4340)))

(declare-fun b!137389 () Bool)

(assert (=> b!137389 (= e!89438 (isDefined!126 (getValueByKey!172 (toList!873 lt!71323) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!42999 c!25787) b!137387))

(assert (= (and d!42999 (not c!25787)) b!137388))

(assert (= (and d!42999 (not res!65835)) b!137389))

(declare-fun m!164303 () Bool)

(assert (=> d!42999 m!164303))

(declare-fun m!164305 () Bool)

(assert (=> b!137387 m!164305))

(declare-fun m!164307 () Bool)

(assert (=> b!137387 m!164307))

(assert (=> b!137387 m!164307))

(declare-fun m!164309 () Bool)

(assert (=> b!137387 m!164309))

(assert (=> b!137389 m!164307))

(assert (=> b!137389 m!164307))

(assert (=> b!137389 m!164309))

(assert (=> bm!15030 d!42999))

(declare-fun d!43001 () Bool)

(declare-fun e!89439 () Bool)

(assert (=> d!43001 e!89439))

(declare-fun res!65837 () Bool)

(assert (=> d!43001 (=> (not res!65837) (not e!89439))))

(declare-fun lt!71900 () ListLongMap!1715)

(assert (=> d!43001 (= res!65837 (contains!901 lt!71900 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(declare-fun lt!71897 () List!1741)

(assert (=> d!43001 (= lt!71900 (ListLongMap!1716 lt!71897))))

(declare-fun lt!71898 () Unit!4291)

(declare-fun lt!71899 () Unit!4291)

(assert (=> d!43001 (= lt!71898 lt!71899)))

(assert (=> d!43001 (= (getValueByKey!172 lt!71897 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(assert (=> d!43001 (= lt!71899 (lemmaContainsTupThenGetReturnValue!89 lt!71897 (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(assert (=> d!43001 (= lt!71897 (insertStrictlySorted!91 (toList!873 call!15052) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(assert (=> d!43001 (= (+!171 call!15052 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))) lt!71900)))

(declare-fun b!137390 () Bool)

(declare-fun res!65836 () Bool)

(assert (=> b!137390 (=> (not res!65836) (not e!89439))))

(assert (=> b!137390 (= res!65836 (= (getValueByKey!172 (toList!873 lt!71900) (_1!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))) (Some!177 (_2!1321 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))))))

(declare-fun b!137391 () Bool)

(assert (=> b!137391 (= e!89439 (contains!904 (toList!873 lt!71900) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))))

(assert (= (and d!43001 res!65837) b!137390))

(assert (= (and b!137390 res!65836) b!137391))

(declare-fun m!164311 () Bool)

(assert (=> d!43001 m!164311))

(declare-fun m!164313 () Bool)

(assert (=> d!43001 m!164313))

(declare-fun m!164315 () Bool)

(assert (=> d!43001 m!164315))

(declare-fun m!164317 () Bool)

(assert (=> d!43001 m!164317))

(declare-fun m!164319 () Bool)

(assert (=> b!137390 m!164319))

(declare-fun m!164321 () Bool)

(assert (=> b!137391 m!164321))

(assert (=> b!136672 d!43001))

(declare-fun d!43003 () Bool)

(assert (=> d!43003 (= (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71153)) (v!3224 (getValueByKey!172 (toList!873 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71153)))))

(assert (=> d!42651 d!43003))

(declare-fun c!25788 () Bool)

(declare-fun d!43005 () Bool)

(assert (=> d!43005 (= c!25788 (and ((_ is Cons!1737) (toList!873 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))) (= (_1!1321 (h!2343 (toList!873 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))) lt!71153)))))

(declare-fun e!89440 () Option!178)

(assert (=> d!43005 (= (getValueByKey!172 (toList!873 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71153) e!89440)))

(declare-fun b!137394 () Bool)

(declare-fun e!89441 () Option!178)

(assert (=> b!137394 (= e!89441 (getValueByKey!172 (t!6241 (toList!873 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))) lt!71153))))

(declare-fun b!137392 () Bool)

(assert (=> b!137392 (= e!89440 (Some!177 (_2!1321 (h!2343 (toList!873 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))))))

(declare-fun b!137395 () Bool)

(assert (=> b!137395 (= e!89441 None!176)))

(declare-fun b!137393 () Bool)

(assert (=> b!137393 (= e!89440 e!89441)))

(declare-fun c!25789 () Bool)

(assert (=> b!137393 (= c!25789 (and ((_ is Cons!1737) (toList!873 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))) (not (= (_1!1321 (h!2343 (toList!873 (+!171 lt!71164 (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992)))))))) lt!71153))))))

(assert (= (and d!43005 c!25788) b!137392))

(assert (= (and d!43005 (not c!25788)) b!137393))

(assert (= (and b!137393 c!25789) b!137394))

(assert (= (and b!137393 (not c!25789)) b!137395))

(declare-fun m!164323 () Bool)

(assert (=> b!137394 m!164323))

(assert (=> d!42651 d!43005))

(declare-fun d!43007 () Bool)

(declare-fun res!65838 () Bool)

(declare-fun e!89442 () Bool)

(assert (=> d!43007 (=> (not res!65838) (not e!89442))))

(assert (=> d!43007 (= res!65838 (simpleValid!92 (_2!1322 lt!71556)))))

(assert (=> d!43007 (= (valid!530 (_2!1322 lt!71556)) e!89442)))

(declare-fun b!137396 () Bool)

(declare-fun res!65839 () Bool)

(assert (=> b!137396 (=> (not res!65839) (not e!89442))))

(assert (=> b!137396 (= res!65839 (= (arrayCountValidKeys!0 (_keys!4642 (_2!1322 lt!71556)) #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71556)))) (_size!604 (_2!1322 lt!71556))))))

(declare-fun b!137397 () Bool)

(declare-fun res!65840 () Bool)

(assert (=> b!137397 (=> (not res!65840) (not e!89442))))

(assert (=> b!137397 (= res!65840 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4642 (_2!1322 lt!71556)) (mask!7203 (_2!1322 lt!71556))))))

(declare-fun b!137398 () Bool)

(assert (=> b!137398 (= e!89442 (arrayNoDuplicates!0 (_keys!4642 (_2!1322 lt!71556)) #b00000000000000000000000000000000 Nil!1740))))

(assert (= (and d!43007 res!65838) b!137396))

(assert (= (and b!137396 res!65839) b!137397))

(assert (= (and b!137397 res!65840) b!137398))

(declare-fun m!164325 () Bool)

(assert (=> d!43007 m!164325))

(declare-fun m!164327 () Bool)

(assert (=> b!137396 m!164327))

(declare-fun m!164329 () Bool)

(assert (=> b!137397 m!164329))

(declare-fun m!164331 () Bool)

(assert (=> b!137398 m!164331))

(assert (=> b!136836 d!43007))

(declare-fun d!43009 () Bool)

(declare-fun res!65842 () Bool)

(declare-fun e!89443 () Bool)

(assert (=> d!43009 (=> (not res!65842) (not e!89443))))

(assert (=> d!43009 (= res!65842 (validMask!0 (mask!7203 (v!3220 (underlying!460 thiss!992)))))))

(assert (=> d!43009 (= (simpleValid!92 (v!3220 (underlying!460 thiss!992))) e!89443)))

(declare-fun b!137399 () Bool)

(declare-fun res!65841 () Bool)

(assert (=> b!137399 (=> (not res!65841) (not e!89443))))

(assert (=> b!137399 (= res!65841 (and (= (size!2543 (_values!2872 (v!3220 (underlying!460 thiss!992)))) (bvadd (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000001)) (= (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (size!2543 (_values!2872 (v!3220 (underlying!460 thiss!992))))) (bvsge (_size!604 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!604 (v!3220 (underlying!460 thiss!992))) (bvadd (mask!7203 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!137402 () Bool)

(assert (=> b!137402 (= e!89443 (and (bvsge (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!604 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!137400 () Bool)

(declare-fun res!65843 () Bool)

(assert (=> b!137400 (=> (not res!65843) (not e!89443))))

(assert (=> b!137400 (= res!65843 (bvsge (size!2546 (v!3220 (underlying!460 thiss!992))) (_size!604 (v!3220 (underlying!460 thiss!992)))))))

(declare-fun b!137401 () Bool)

(declare-fun res!65844 () Bool)

(assert (=> b!137401 (=> (not res!65844) (not e!89443))))

(assert (=> b!137401 (= res!65844 (= (size!2546 (v!3220 (underlying!460 thiss!992))) (bvadd (_size!604 (v!3220 (underlying!460 thiss!992))) (bvsdiv (bvadd (extraKeys!2650 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!43009 res!65842) b!137399))

(assert (= (and b!137399 res!65841) b!137400))

(assert (= (and b!137400 res!65843) b!137401))

(assert (= (and b!137401 res!65844) b!137402))

(assert (=> d!43009 m!162635))

(declare-fun m!164333 () Bool)

(assert (=> b!137400 m!164333))

(assert (=> b!137401 m!164333))

(assert (=> d!42615 d!43009))

(declare-fun d!43011 () Bool)

(declare-fun lt!71901 () Bool)

(assert (=> d!43011 (= lt!71901 (select (content!134 (toList!873 lt!71457)) (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun e!89445 () Bool)

(assert (=> d!43011 (= lt!71901 e!89445)))

(declare-fun res!65845 () Bool)

(assert (=> d!43011 (=> (not res!65845) (not e!89445))))

(assert (=> d!43011 (= res!65845 ((_ is Cons!1737) (toList!873 lt!71457)))))

(assert (=> d!43011 (= (contains!904 (toList!873 lt!71457) (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71901)))

(declare-fun b!137403 () Bool)

(declare-fun e!89444 () Bool)

(assert (=> b!137403 (= e!89445 e!89444)))

(declare-fun res!65846 () Bool)

(assert (=> b!137403 (=> res!65846 e!89444)))

(assert (=> b!137403 (= res!65846 (= (h!2343 (toList!873 lt!71457)) (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!137404 () Bool)

(assert (=> b!137404 (= e!89444 (contains!904 (t!6241 (toList!873 lt!71457)) (tuple2!2623 lt!71152 (zeroValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(assert (= (and d!43011 res!65845) b!137403))

(assert (= (and b!137403 (not res!65846)) b!137404))

(declare-fun m!164335 () Bool)

(assert (=> d!43011 m!164335))

(declare-fun m!164337 () Bool)

(assert (=> d!43011 m!164337))

(declare-fun m!164339 () Bool)

(assert (=> b!137404 m!164339))

(assert (=> b!136751 d!43011))

(declare-fun d!43013 () Bool)

(assert (=> d!43013 (= (inRange!0 (ite c!25568 (index!3305 lt!71376) (index!3308 lt!71376)) (mask!7203 newMap!16)) (and (bvsge (ite c!25568 (index!3305 lt!71376) (index!3308 lt!71376)) #b00000000000000000000000000000000) (bvslt (ite c!25568 (index!3305 lt!71376) (index!3308 lt!71376)) (bvadd (mask!7203 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!15048 d!43013))

(assert (=> bm!15058 d!42883))

(declare-fun d!43015 () Bool)

(assert (=> d!43015 (= (apply!117 (+!171 lt!71352 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16))) lt!71341) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71352 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16)))) lt!71341)))))

(declare-fun bs!5766 () Bool)

(assert (= bs!5766 d!43015))

(declare-fun m!164341 () Bool)

(assert (=> bs!5766 m!164341))

(assert (=> bs!5766 m!164341))

(declare-fun m!164343 () Bool)

(assert (=> bs!5766 m!164343))

(assert (=> b!136606 d!43015))

(declare-fun d!43017 () Bool)

(assert (=> d!43017 (contains!901 (+!171 lt!71354 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16))) lt!71344)))

(declare-fun lt!71902 () Unit!4291)

(assert (=> d!43017 (= lt!71902 (choose!843 lt!71354 lt!71347 (zeroValue!2742 newMap!16) lt!71344))))

(assert (=> d!43017 (contains!901 lt!71354 lt!71344)))

(assert (=> d!43017 (= (addStillContains!93 lt!71354 lt!71347 (zeroValue!2742 newMap!16) lt!71344) lt!71902)))

(declare-fun bs!5767 () Bool)

(assert (= bs!5767 d!43017))

(assert (=> bs!5767 m!162903))

(assert (=> bs!5767 m!162903))

(assert (=> bs!5767 m!162913))

(declare-fun m!164345 () Bool)

(assert (=> bs!5767 m!164345))

(declare-fun m!164347 () Bool)

(assert (=> bs!5767 m!164347))

(assert (=> b!136606 d!43017))

(declare-fun d!43019 () Bool)

(assert (=> d!43019 (= (apply!117 (+!171 lt!71352 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16))) lt!71341) (apply!117 lt!71352 lt!71341))))

(declare-fun lt!71903 () Unit!4291)

(assert (=> d!43019 (= lt!71903 (choose!844 lt!71352 lt!71340 (zeroValue!2742 newMap!16) lt!71341))))

(declare-fun e!89446 () Bool)

(assert (=> d!43019 e!89446))

(declare-fun res!65847 () Bool)

(assert (=> d!43019 (=> (not res!65847) (not e!89446))))

(assert (=> d!43019 (= res!65847 (contains!901 lt!71352 lt!71341))))

(assert (=> d!43019 (= (addApplyDifferent!93 lt!71352 lt!71340 (zeroValue!2742 newMap!16) lt!71341) lt!71903)))

(declare-fun b!137405 () Bool)

(assert (=> b!137405 (= e!89446 (not (= lt!71341 lt!71340)))))

(assert (= (and d!43019 res!65847) b!137405))

(assert (=> d!43019 m!162915))

(assert (=> d!43019 m!162917))

(declare-fun m!164349 () Bool)

(assert (=> d!43019 m!164349))

(assert (=> d!43019 m!162915))

(declare-fun m!164351 () Bool)

(assert (=> d!43019 m!164351))

(assert (=> d!43019 m!162907))

(assert (=> b!136606 d!43019))

(declare-fun d!43021 () Bool)

(declare-fun e!89447 () Bool)

(assert (=> d!43021 e!89447))

(declare-fun res!65849 () Bool)

(assert (=> d!43021 (=> (not res!65849) (not e!89447))))

(declare-fun lt!71907 () ListLongMap!1715)

(assert (=> d!43021 (= res!65849 (contains!901 lt!71907 (_1!1321 (tuple2!2623 lt!71356 (minValue!2742 newMap!16)))))))

(declare-fun lt!71904 () List!1741)

(assert (=> d!43021 (= lt!71907 (ListLongMap!1716 lt!71904))))

(declare-fun lt!71905 () Unit!4291)

(declare-fun lt!71906 () Unit!4291)

(assert (=> d!43021 (= lt!71905 lt!71906)))

(assert (=> d!43021 (= (getValueByKey!172 lt!71904 (_1!1321 (tuple2!2623 lt!71356 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71356 (minValue!2742 newMap!16)))))))

(assert (=> d!43021 (= lt!71906 (lemmaContainsTupThenGetReturnValue!89 lt!71904 (_1!1321 (tuple2!2623 lt!71356 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71356 (minValue!2742 newMap!16)))))))

(assert (=> d!43021 (= lt!71904 (insertStrictlySorted!91 (toList!873 lt!71357) (_1!1321 (tuple2!2623 lt!71356 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71356 (minValue!2742 newMap!16)))))))

(assert (=> d!43021 (= (+!171 lt!71357 (tuple2!2623 lt!71356 (minValue!2742 newMap!16))) lt!71907)))

(declare-fun b!137406 () Bool)

(declare-fun res!65848 () Bool)

(assert (=> b!137406 (=> (not res!65848) (not e!89447))))

(assert (=> b!137406 (= res!65848 (= (getValueByKey!172 (toList!873 lt!71907) (_1!1321 (tuple2!2623 lt!71356 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71356 (minValue!2742 newMap!16))))))))

(declare-fun b!137407 () Bool)

(assert (=> b!137407 (= e!89447 (contains!904 (toList!873 lt!71907) (tuple2!2623 lt!71356 (minValue!2742 newMap!16))))))

(assert (= (and d!43021 res!65849) b!137406))

(assert (= (and b!137406 res!65848) b!137407))

(declare-fun m!164353 () Bool)

(assert (=> d!43021 m!164353))

(declare-fun m!164355 () Bool)

(assert (=> d!43021 m!164355))

(declare-fun m!164357 () Bool)

(assert (=> d!43021 m!164357))

(declare-fun m!164359 () Bool)

(assert (=> d!43021 m!164359))

(declare-fun m!164361 () Bool)

(assert (=> b!137406 m!164361))

(declare-fun m!164363 () Bool)

(assert (=> b!137407 m!164363))

(assert (=> b!136606 d!43021))

(declare-fun d!43023 () Bool)

(declare-fun e!89448 () Bool)

(assert (=> d!43023 e!89448))

(declare-fun res!65851 () Bool)

(assert (=> d!43023 (=> (not res!65851) (not e!89448))))

(declare-fun lt!71911 () ListLongMap!1715)

(assert (=> d!43023 (= res!65851 (contains!901 lt!71911 (_1!1321 (tuple2!2623 lt!71360 (minValue!2742 newMap!16)))))))

(declare-fun lt!71908 () List!1741)

(assert (=> d!43023 (= lt!71911 (ListLongMap!1716 lt!71908))))

(declare-fun lt!71909 () Unit!4291)

(declare-fun lt!71910 () Unit!4291)

(assert (=> d!43023 (= lt!71909 lt!71910)))

(assert (=> d!43023 (= (getValueByKey!172 lt!71908 (_1!1321 (tuple2!2623 lt!71360 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71360 (minValue!2742 newMap!16)))))))

(assert (=> d!43023 (= lt!71910 (lemmaContainsTupThenGetReturnValue!89 lt!71908 (_1!1321 (tuple2!2623 lt!71360 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71360 (minValue!2742 newMap!16)))))))

(assert (=> d!43023 (= lt!71908 (insertStrictlySorted!91 (toList!873 lt!71346) (_1!1321 (tuple2!2623 lt!71360 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71360 (minValue!2742 newMap!16)))))))

(assert (=> d!43023 (= (+!171 lt!71346 (tuple2!2623 lt!71360 (minValue!2742 newMap!16))) lt!71911)))

(declare-fun b!137408 () Bool)

(declare-fun res!65850 () Bool)

(assert (=> b!137408 (=> (not res!65850) (not e!89448))))

(assert (=> b!137408 (= res!65850 (= (getValueByKey!172 (toList!873 lt!71911) (_1!1321 (tuple2!2623 lt!71360 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71360 (minValue!2742 newMap!16))))))))

(declare-fun b!137409 () Bool)

(assert (=> b!137409 (= e!89448 (contains!904 (toList!873 lt!71911) (tuple2!2623 lt!71360 (minValue!2742 newMap!16))))))

(assert (= (and d!43023 res!65851) b!137408))

(assert (= (and b!137408 res!65850) b!137409))

(declare-fun m!164365 () Bool)

(assert (=> d!43023 m!164365))

(declare-fun m!164367 () Bool)

(assert (=> d!43023 m!164367))

(declare-fun m!164369 () Bool)

(assert (=> d!43023 m!164369))

(declare-fun m!164371 () Bool)

(assert (=> d!43023 m!164371))

(declare-fun m!164373 () Bool)

(assert (=> b!137408 m!164373))

(declare-fun m!164375 () Bool)

(assert (=> b!137409 m!164375))

(assert (=> b!136606 d!43023))

(assert (=> b!136606 d!42905))

(declare-fun d!43025 () Bool)

(assert (=> d!43025 (= (apply!117 lt!71352 lt!71341) (get!1502 (getValueByKey!172 (toList!873 lt!71352) lt!71341)))))

(declare-fun bs!5768 () Bool)

(assert (= bs!5768 d!43025))

(declare-fun m!164377 () Bool)

(assert (=> bs!5768 m!164377))

(assert (=> bs!5768 m!164377))

(declare-fun m!164379 () Bool)

(assert (=> bs!5768 m!164379))

(assert (=> b!136606 d!43025))

(declare-fun d!43027 () Bool)

(declare-fun e!89449 () Bool)

(assert (=> d!43027 e!89449))

(declare-fun res!65853 () Bool)

(assert (=> d!43027 (=> (not res!65853) (not e!89449))))

(declare-fun lt!71915 () ListLongMap!1715)

(assert (=> d!43027 (= res!65853 (contains!901 lt!71915 (_1!1321 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16)))))))

(declare-fun lt!71912 () List!1741)

(assert (=> d!43027 (= lt!71915 (ListLongMap!1716 lt!71912))))

(declare-fun lt!71913 () Unit!4291)

(declare-fun lt!71914 () Unit!4291)

(assert (=> d!43027 (= lt!71913 lt!71914)))

(assert (=> d!43027 (= (getValueByKey!172 lt!71912 (_1!1321 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43027 (= lt!71914 (lemmaContainsTupThenGetReturnValue!89 lt!71912 (_1!1321 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43027 (= lt!71912 (insertStrictlySorted!91 (toList!873 lt!71352) (_1!1321 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43027 (= (+!171 lt!71352 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16))) lt!71915)))

(declare-fun b!137410 () Bool)

(declare-fun res!65852 () Bool)

(assert (=> b!137410 (=> (not res!65852) (not e!89449))))

(assert (=> b!137410 (= res!65852 (= (getValueByKey!172 (toList!873 lt!71915) (_1!1321 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16))))))))

(declare-fun b!137411 () Bool)

(assert (=> b!137411 (= e!89449 (contains!904 (toList!873 lt!71915) (tuple2!2623 lt!71340 (zeroValue!2742 newMap!16))))))

(assert (= (and d!43027 res!65853) b!137410))

(assert (= (and b!137410 res!65852) b!137411))

(declare-fun m!164381 () Bool)

(assert (=> d!43027 m!164381))

(declare-fun m!164383 () Bool)

(assert (=> d!43027 m!164383))

(declare-fun m!164385 () Bool)

(assert (=> d!43027 m!164385))

(declare-fun m!164387 () Bool)

(assert (=> d!43027 m!164387))

(declare-fun m!164389 () Bool)

(assert (=> b!137410 m!164389))

(declare-fun m!164391 () Bool)

(assert (=> b!137411 m!164391))

(assert (=> b!136606 d!43027))

(declare-fun d!43029 () Bool)

(assert (=> d!43029 (= (apply!117 lt!71346 lt!71342) (get!1502 (getValueByKey!172 (toList!873 lt!71346) lt!71342)))))

(declare-fun bs!5769 () Bool)

(assert (= bs!5769 d!43029))

(declare-fun m!164393 () Bool)

(assert (=> bs!5769 m!164393))

(assert (=> bs!5769 m!164393))

(declare-fun m!164395 () Bool)

(assert (=> bs!5769 m!164395))

(assert (=> b!136606 d!43029))

(declare-fun d!43031 () Bool)

(declare-fun e!89450 () Bool)

(assert (=> d!43031 e!89450))

(declare-fun res!65855 () Bool)

(assert (=> d!43031 (=> (not res!65855) (not e!89450))))

(declare-fun lt!71919 () ListLongMap!1715)

(assert (=> d!43031 (= res!65855 (contains!901 lt!71919 (_1!1321 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16)))))))

(declare-fun lt!71916 () List!1741)

(assert (=> d!43031 (= lt!71919 (ListLongMap!1716 lt!71916))))

(declare-fun lt!71917 () Unit!4291)

(declare-fun lt!71918 () Unit!4291)

(assert (=> d!43031 (= lt!71917 lt!71918)))

(assert (=> d!43031 (= (getValueByKey!172 lt!71916 (_1!1321 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43031 (= lt!71918 (lemmaContainsTupThenGetReturnValue!89 lt!71916 (_1!1321 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43031 (= lt!71916 (insertStrictlySorted!91 (toList!873 lt!71354) (_1!1321 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43031 (= (+!171 lt!71354 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16))) lt!71919)))

(declare-fun b!137412 () Bool)

(declare-fun res!65854 () Bool)

(assert (=> b!137412 (=> (not res!65854) (not e!89450))))

(assert (=> b!137412 (= res!65854 (= (getValueByKey!172 (toList!873 lt!71919) (_1!1321 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16))))))))

(declare-fun b!137413 () Bool)

(assert (=> b!137413 (= e!89450 (contains!904 (toList!873 lt!71919) (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16))))))

(assert (= (and d!43031 res!65855) b!137412))

(assert (= (and b!137412 res!65854) b!137413))

(declare-fun m!164397 () Bool)

(assert (=> d!43031 m!164397))

(declare-fun m!164399 () Bool)

(assert (=> d!43031 m!164399))

(declare-fun m!164401 () Bool)

(assert (=> d!43031 m!164401))

(declare-fun m!164403 () Bool)

(assert (=> d!43031 m!164403))

(declare-fun m!164405 () Bool)

(assert (=> b!137412 m!164405))

(declare-fun m!164407 () Bool)

(assert (=> b!137413 m!164407))

(assert (=> b!136606 d!43031))

(declare-fun d!43033 () Bool)

(assert (=> d!43033 (= (apply!117 (+!171 lt!71346 (tuple2!2623 lt!71360 (minValue!2742 newMap!16))) lt!71342) (apply!117 lt!71346 lt!71342))))

(declare-fun lt!71920 () Unit!4291)

(assert (=> d!43033 (= lt!71920 (choose!844 lt!71346 lt!71360 (minValue!2742 newMap!16) lt!71342))))

(declare-fun e!89451 () Bool)

(assert (=> d!43033 e!89451))

(declare-fun res!65856 () Bool)

(assert (=> d!43033 (=> (not res!65856) (not e!89451))))

(assert (=> d!43033 (= res!65856 (contains!901 lt!71346 lt!71342))))

(assert (=> d!43033 (= (addApplyDifferent!93 lt!71346 lt!71360 (minValue!2742 newMap!16) lt!71342) lt!71920)))

(declare-fun b!137414 () Bool)

(assert (=> b!137414 (= e!89451 (not (= lt!71342 lt!71360)))))

(assert (= (and d!43033 res!65856) b!137414))

(assert (=> d!43033 m!162899))

(assert (=> d!43033 m!162901))

(declare-fun m!164409 () Bool)

(assert (=> d!43033 m!164409))

(assert (=> d!43033 m!162899))

(declare-fun m!164411 () Bool)

(assert (=> d!43033 m!164411))

(assert (=> d!43033 m!162911))

(assert (=> b!136606 d!43033))

(declare-fun d!43035 () Bool)

(declare-fun e!89453 () Bool)

(assert (=> d!43035 e!89453))

(declare-fun res!65857 () Bool)

(assert (=> d!43035 (=> res!65857 e!89453)))

(declare-fun lt!71924 () Bool)

(assert (=> d!43035 (= res!65857 (not lt!71924))))

(declare-fun lt!71923 () Bool)

(assert (=> d!43035 (= lt!71924 lt!71923)))

(declare-fun lt!71921 () Unit!4291)

(declare-fun e!89452 () Unit!4291)

(assert (=> d!43035 (= lt!71921 e!89452)))

(declare-fun c!25790 () Bool)

(assert (=> d!43035 (= c!25790 lt!71923)))

(assert (=> d!43035 (= lt!71923 (containsKey!176 (toList!873 (+!171 lt!71354 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16)))) lt!71344))))

(assert (=> d!43035 (= (contains!901 (+!171 lt!71354 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16))) lt!71344) lt!71924)))

(declare-fun b!137415 () Bool)

(declare-fun lt!71922 () Unit!4291)

(assert (=> b!137415 (= e!89452 lt!71922)))

(assert (=> b!137415 (= lt!71922 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 (+!171 lt!71354 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16)))) lt!71344))))

(assert (=> b!137415 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71354 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16)))) lt!71344))))

(declare-fun b!137416 () Bool)

(declare-fun Unit!4341 () Unit!4291)

(assert (=> b!137416 (= e!89452 Unit!4341)))

(declare-fun b!137417 () Bool)

(assert (=> b!137417 (= e!89453 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71354 (tuple2!2623 lt!71347 (zeroValue!2742 newMap!16)))) lt!71344)))))

(assert (= (and d!43035 c!25790) b!137415))

(assert (= (and d!43035 (not c!25790)) b!137416))

(assert (= (and d!43035 (not res!65857)) b!137417))

(declare-fun m!164413 () Bool)

(assert (=> d!43035 m!164413))

(declare-fun m!164415 () Bool)

(assert (=> b!137415 m!164415))

(declare-fun m!164417 () Bool)

(assert (=> b!137415 m!164417))

(assert (=> b!137415 m!164417))

(declare-fun m!164419 () Bool)

(assert (=> b!137415 m!164419))

(assert (=> b!137417 m!164417))

(assert (=> b!137417 m!164417))

(assert (=> b!137417 m!164419))

(assert (=> b!136606 d!43035))

(declare-fun d!43037 () Bool)

(assert (=> d!43037 (= (apply!117 (+!171 lt!71357 (tuple2!2623 lt!71356 (minValue!2742 newMap!16))) lt!71358) (apply!117 lt!71357 lt!71358))))

(declare-fun lt!71925 () Unit!4291)

(assert (=> d!43037 (= lt!71925 (choose!844 lt!71357 lt!71356 (minValue!2742 newMap!16) lt!71358))))

(declare-fun e!89454 () Bool)

(assert (=> d!43037 e!89454))

(declare-fun res!65858 () Bool)

(assert (=> d!43037 (=> (not res!65858) (not e!89454))))

(assert (=> d!43037 (= res!65858 (contains!901 lt!71357 lt!71358))))

(assert (=> d!43037 (= (addApplyDifferent!93 lt!71357 lt!71356 (minValue!2742 newMap!16) lt!71358) lt!71925)))

(declare-fun b!137418 () Bool)

(assert (=> b!137418 (= e!89454 (not (= lt!71358 lt!71356)))))

(assert (= (and d!43037 res!65858) b!137418))

(assert (=> d!43037 m!162891))

(assert (=> d!43037 m!162893))

(declare-fun m!164421 () Bool)

(assert (=> d!43037 m!164421))

(assert (=> d!43037 m!162891))

(declare-fun m!164423 () Bool)

(assert (=> d!43037 m!164423))

(assert (=> d!43037 m!162919))

(assert (=> b!136606 d!43037))

(declare-fun d!43039 () Bool)

(assert (=> d!43039 (= (apply!117 (+!171 lt!71346 (tuple2!2623 lt!71360 (minValue!2742 newMap!16))) lt!71342) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71346 (tuple2!2623 lt!71360 (minValue!2742 newMap!16)))) lt!71342)))))

(declare-fun bs!5770 () Bool)

(assert (= bs!5770 d!43039))

(declare-fun m!164425 () Bool)

(assert (=> bs!5770 m!164425))

(assert (=> bs!5770 m!164425))

(declare-fun m!164427 () Bool)

(assert (=> bs!5770 m!164427))

(assert (=> b!136606 d!43039))

(declare-fun d!43041 () Bool)

(assert (=> d!43041 (= (apply!117 lt!71357 lt!71358) (get!1502 (getValueByKey!172 (toList!873 lt!71357) lt!71358)))))

(declare-fun bs!5771 () Bool)

(assert (= bs!5771 d!43041))

(declare-fun m!164429 () Bool)

(assert (=> bs!5771 m!164429))

(assert (=> bs!5771 m!164429))

(declare-fun m!164431 () Bool)

(assert (=> bs!5771 m!164431))

(assert (=> b!136606 d!43041))

(declare-fun d!43043 () Bool)

(assert (=> d!43043 (= (apply!117 (+!171 lt!71357 (tuple2!2623 lt!71356 (minValue!2742 newMap!16))) lt!71358) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71357 (tuple2!2623 lt!71356 (minValue!2742 newMap!16)))) lt!71358)))))

(declare-fun bs!5772 () Bool)

(assert (= bs!5772 d!43043))

(declare-fun m!164433 () Bool)

(assert (=> bs!5772 m!164433))

(assert (=> bs!5772 m!164433))

(declare-fun m!164435 () Bool)

(assert (=> bs!5772 m!164435))

(assert (=> b!136606 d!43043))

(declare-fun d!43045 () Bool)

(assert (=> d!43045 (arrayContainsKey!0 (_keys!4642 newMap!16) lt!71288 #b00000000000000000000000000000000)))

(declare-fun lt!71928 () Unit!4291)

(declare-fun choose!13 (array!4806 (_ BitVec 64) (_ BitVec 32)) Unit!4291)

(assert (=> d!43045 (= lt!71928 (choose!13 (_keys!4642 newMap!16) lt!71288 #b00000000000000000000000000000000))))

(assert (=> d!43045 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!43045 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4642 newMap!16) lt!71288 #b00000000000000000000000000000000) lt!71928)))

(declare-fun bs!5773 () Bool)

(assert (= bs!5773 d!43045))

(assert (=> bs!5773 m!162775))

(declare-fun m!164437 () Bool)

(assert (=> bs!5773 m!164437))

(assert (=> b!136535 d!43045))

(declare-fun d!43047 () Bool)

(declare-fun res!65859 () Bool)

(declare-fun e!89455 () Bool)

(assert (=> d!43047 (=> res!65859 e!89455)))

(assert (=> d!43047 (= res!65859 (= (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) lt!71288))))

(assert (=> d!43047 (= (arrayContainsKey!0 (_keys!4642 newMap!16) lt!71288 #b00000000000000000000000000000000) e!89455)))

(declare-fun b!137419 () Bool)

(declare-fun e!89456 () Bool)

(assert (=> b!137419 (= e!89455 e!89456)))

(declare-fun res!65860 () Bool)

(assert (=> b!137419 (=> (not res!65860) (not e!89456))))

(assert (=> b!137419 (= res!65860 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137420 () Bool)

(assert (=> b!137420 (= e!89456 (arrayContainsKey!0 (_keys!4642 newMap!16) lt!71288 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!43047 (not res!65859)) b!137419))

(assert (= (and b!137419 res!65860) b!137420))

(assert (=> d!43047 m!162731))

(declare-fun m!164439 () Bool)

(assert (=> b!137420 m!164439))

(assert (=> b!136535 d!43047))

(declare-fun b!137421 () Bool)

(declare-fun e!89457 () SeekEntryResult!286)

(declare-fun lt!71930 () SeekEntryResult!286)

(assert (=> b!137421 (= e!89457 (seekKeyOrZeroReturnVacant!0 (x!15814 lt!71930) (index!3307 lt!71930) (index!3307 lt!71930) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(declare-fun d!43049 () Bool)

(declare-fun lt!71931 () SeekEntryResult!286)

(assert (=> d!43049 (and (or ((_ is Undefined!286) lt!71931) (not ((_ is Found!286) lt!71931)) (and (bvsge (index!3306 lt!71931) #b00000000000000000000000000000000) (bvslt (index!3306 lt!71931) (size!2542 (_keys!4642 newMap!16))))) (or ((_ is Undefined!286) lt!71931) ((_ is Found!286) lt!71931) (not ((_ is MissingZero!286) lt!71931)) (and (bvsge (index!3305 lt!71931) #b00000000000000000000000000000000) (bvslt (index!3305 lt!71931) (size!2542 (_keys!4642 newMap!16))))) (or ((_ is Undefined!286) lt!71931) ((_ is Found!286) lt!71931) ((_ is MissingZero!286) lt!71931) (not ((_ is MissingVacant!286) lt!71931)) (and (bvsge (index!3308 lt!71931) #b00000000000000000000000000000000) (bvslt (index!3308 lt!71931) (size!2542 (_keys!4642 newMap!16))))) (or ((_ is Undefined!286) lt!71931) (ite ((_ is Found!286) lt!71931) (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71931)) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!286) lt!71931) (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3305 lt!71931)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!286) lt!71931) (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3308 lt!71931)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!89459 () SeekEntryResult!286)

(assert (=> d!43049 (= lt!71931 e!89459)))

(declare-fun c!25791 () Bool)

(assert (=> d!43049 (= c!25791 (and ((_ is Intermediate!286) lt!71930) (undefined!1098 lt!71930)))))

(assert (=> d!43049 (= lt!71930 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) (mask!7203 newMap!16)) (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(assert (=> d!43049 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!43049 (= (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000) (_keys!4642 newMap!16) (mask!7203 newMap!16)) lt!71931)))

(declare-fun b!137422 () Bool)

(assert (=> b!137422 (= e!89459 Undefined!286)))

(declare-fun b!137423 () Bool)

(declare-fun e!89458 () SeekEntryResult!286)

(assert (=> b!137423 (= e!89458 (Found!286 (index!3307 lt!71930)))))

(declare-fun b!137424 () Bool)

(assert (=> b!137424 (= e!89457 (MissingZero!286 (index!3307 lt!71930)))))

(declare-fun b!137425 () Bool)

(declare-fun c!25793 () Bool)

(declare-fun lt!71929 () (_ BitVec 64))

(assert (=> b!137425 (= c!25793 (= lt!71929 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137425 (= e!89458 e!89457)))

(declare-fun b!137426 () Bool)

(assert (=> b!137426 (= e!89459 e!89458)))

(assert (=> b!137426 (= lt!71929 (select (arr!2272 (_keys!4642 newMap!16)) (index!3307 lt!71930)))))

(declare-fun c!25792 () Bool)

(assert (=> b!137426 (= c!25792 (= lt!71929 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!43049 c!25791) b!137422))

(assert (= (and d!43049 (not c!25791)) b!137426))

(assert (= (and b!137426 c!25792) b!137423))

(assert (= (and b!137426 (not c!25792)) b!137425))

(assert (= (and b!137425 c!25793) b!137424))

(assert (= (and b!137425 (not c!25793)) b!137421))

(assert (=> b!137421 m!162731))

(declare-fun m!164441 () Bool)

(assert (=> b!137421 m!164441))

(assert (=> d!43049 m!162731))

(declare-fun m!164443 () Bool)

(assert (=> d!43049 m!164443))

(assert (=> d!43049 m!164443))

(assert (=> d!43049 m!162731))

(declare-fun m!164445 () Bool)

(assert (=> d!43049 m!164445))

(declare-fun m!164447 () Bool)

(assert (=> d!43049 m!164447))

(declare-fun m!164449 () Bool)

(assert (=> d!43049 m!164449))

(declare-fun m!164451 () Bool)

(assert (=> d!43049 m!164451))

(assert (=> d!43049 m!162751))

(declare-fun m!164453 () Bool)

(assert (=> b!137426 m!164453))

(assert (=> b!136535 d!43049))

(assert (=> b!136668 d!42809))

(declare-fun d!43051 () Bool)

(assert (=> d!43051 (= (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71154)) (v!3224 (getValueByKey!172 (toList!873 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71154)))))

(assert (=> d!42655 d!43051))

(declare-fun c!25794 () Bool)

(declare-fun d!43053 () Bool)

(assert (=> d!43053 (= c!25794 (and ((_ is Cons!1737) (toList!873 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) (= (_1!1321 (h!2343 (toList!873 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))) lt!71154)))))

(declare-fun e!89460 () Option!178)

(assert (=> d!43053 (= (getValueByKey!172 (toList!873 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71154) e!89460)))

(declare-fun b!137429 () Bool)

(declare-fun e!89461 () Option!178)

(assert (=> b!137429 (= e!89461 (getValueByKey!172 (t!6241 (toList!873 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) lt!71154))))

(declare-fun b!137427 () Bool)

(assert (=> b!137427 (= e!89460 (Some!177 (_2!1321 (h!2343 (toList!873 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))))

(declare-fun b!137430 () Bool)

(assert (=> b!137430 (= e!89461 None!176)))

(declare-fun b!137428 () Bool)

(assert (=> b!137428 (= e!89460 e!89461)))

(declare-fun c!25795 () Bool)

(assert (=> b!137428 (= c!25795 (and ((_ is Cons!1737) (toList!873 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) (not (= (_1!1321 (h!2343 (toList!873 (+!171 lt!71158 (tuple2!2623 lt!71172 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))) lt!71154))))))

(assert (= (and d!43053 c!25794) b!137427))

(assert (= (and d!43053 (not c!25794)) b!137428))

(assert (= (and b!137428 c!25795) b!137429))

(assert (= (and b!137428 (not c!25795)) b!137430))

(declare-fun m!164455 () Bool)

(assert (=> b!137429 m!164455))

(assert (=> d!42655 d!43053))

(declare-fun d!43055 () Bool)

(assert (=> d!43055 (= (isEmpty!418 (getValueByKey!172 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))) (not ((_ is Some!177) (getValueByKey!172 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))))

(assert (=> d!42617 d!43055))

(declare-fun d!43057 () Bool)

(declare-fun c!25796 () Bool)

(assert (=> d!43057 (= c!25796 (and ((_ is Cons!1737) (toList!873 lt!71338)) (= (_1!1321 (h!2343 (toList!873 lt!71338))) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!89462 () Option!178)

(assert (=> d!43057 (= (getValueByKey!172 (toList!873 lt!71338) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!89462)))

(declare-fun b!137433 () Bool)

(declare-fun e!89463 () Option!178)

(assert (=> b!137433 (= e!89463 (getValueByKey!172 (t!6241 (toList!873 lt!71338)) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137431 () Bool)

(assert (=> b!137431 (= e!89462 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71338)))))))

(declare-fun b!137434 () Bool)

(assert (=> b!137434 (= e!89463 None!176)))

(declare-fun b!137432 () Bool)

(assert (=> b!137432 (= e!89462 e!89463)))

(declare-fun c!25797 () Bool)

(assert (=> b!137432 (= c!25797 (and ((_ is Cons!1737) (toList!873 lt!71338)) (not (= (_1!1321 (h!2343 (toList!873 lt!71338))) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!43057 c!25796) b!137431))

(assert (= (and d!43057 (not c!25796)) b!137432))

(assert (= (and b!137432 c!25797) b!137433))

(assert (= (and b!137432 (not c!25797)) b!137434))

(declare-fun m!164457 () Bool)

(assert (=> b!137433 m!164457))

(assert (=> b!136592 d!43057))

(declare-fun d!43059 () Bool)

(declare-fun res!65861 () Bool)

(declare-fun e!89464 () Bool)

(assert (=> d!43059 (=> res!65861 e!89464)))

(assert (=> d!43059 (= res!65861 (and ((_ is Cons!1737) (toList!873 lt!71161)) (= (_1!1321 (h!2343 (toList!873 lt!71161))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!43059 (= (containsKey!176 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000) e!89464)))

(declare-fun b!137435 () Bool)

(declare-fun e!89465 () Bool)

(assert (=> b!137435 (= e!89464 e!89465)))

(declare-fun res!65862 () Bool)

(assert (=> b!137435 (=> (not res!65862) (not e!89465))))

(assert (=> b!137435 (= res!65862 (and (or (not ((_ is Cons!1737) (toList!873 lt!71161))) (bvsle (_1!1321 (h!2343 (toList!873 lt!71161))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1737) (toList!873 lt!71161)) (bvslt (_1!1321 (h!2343 (toList!873 lt!71161))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137436 () Bool)

(assert (=> b!137436 (= e!89465 (containsKey!176 (t!6241 (toList!873 lt!71161)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!43059 (not res!65861)) b!137435))

(assert (= (and b!137435 res!65862) b!137436))

(declare-fun m!164459 () Bool)

(assert (=> b!137436 m!164459))

(assert (=> d!42565 d!43059))

(assert (=> b!136734 d!42595))

(declare-fun d!43061 () Bool)

(declare-fun res!65864 () Bool)

(declare-fun e!89466 () Bool)

(assert (=> d!43061 (=> (not res!65864) (not e!89466))))

(assert (=> d!43061 (= res!65864 (validMask!0 (mask!7203 (_2!1322 lt!71264))))))

(assert (=> d!43061 (= (simpleValid!92 (_2!1322 lt!71264)) e!89466)))

(declare-fun b!137437 () Bool)

(declare-fun res!65863 () Bool)

(assert (=> b!137437 (=> (not res!65863) (not e!89466))))

(assert (=> b!137437 (= res!65863 (and (= (size!2543 (_values!2872 (_2!1322 lt!71264))) (bvadd (mask!7203 (_2!1322 lt!71264)) #b00000000000000000000000000000001)) (= (size!2542 (_keys!4642 (_2!1322 lt!71264))) (size!2543 (_values!2872 (_2!1322 lt!71264)))) (bvsge (_size!604 (_2!1322 lt!71264)) #b00000000000000000000000000000000) (bvsle (_size!604 (_2!1322 lt!71264)) (bvadd (mask!7203 (_2!1322 lt!71264)) #b00000000000000000000000000000001))))))

(declare-fun b!137440 () Bool)

(assert (=> b!137440 (= e!89466 (and (bvsge (extraKeys!2650 (_2!1322 lt!71264)) #b00000000000000000000000000000000) (bvsle (extraKeys!2650 (_2!1322 lt!71264)) #b00000000000000000000000000000011) (bvsge (_vacant!604 (_2!1322 lt!71264)) #b00000000000000000000000000000000)))))

(declare-fun b!137438 () Bool)

(declare-fun res!65865 () Bool)

(assert (=> b!137438 (=> (not res!65865) (not e!89466))))

(assert (=> b!137438 (= res!65865 (bvsge (size!2546 (_2!1322 lt!71264)) (_size!604 (_2!1322 lt!71264))))))

(declare-fun b!137439 () Bool)

(declare-fun res!65866 () Bool)

(assert (=> b!137439 (=> (not res!65866) (not e!89466))))

(assert (=> b!137439 (= res!65866 (= (size!2546 (_2!1322 lt!71264)) (bvadd (_size!604 (_2!1322 lt!71264)) (bvsdiv (bvadd (extraKeys!2650 (_2!1322 lt!71264)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!43061 res!65864) b!137437))

(assert (= (and b!137437 res!65863) b!137438))

(assert (= (and b!137438 res!65865) b!137439))

(assert (= (and b!137439 res!65866) b!137440))

(declare-fun m!164461 () Bool)

(assert (=> d!43061 m!164461))

(declare-fun m!164463 () Bool)

(assert (=> b!137438 m!164463))

(assert (=> b!137439 m!164463))

(assert (=> d!42567 d!43061))

(declare-fun b!137441 () Bool)

(declare-fun e!89474 () Bool)

(declare-fun call!15144 () Bool)

(assert (=> b!137441 (= e!89474 (not call!15144))))

(declare-fun b!137442 () Bool)

(declare-fun res!65868 () Bool)

(declare-fun e!89470 () Bool)

(assert (=> b!137442 (=> (not res!65868) (not e!89470))))

(declare-fun e!89468 () Bool)

(assert (=> b!137442 (= res!65868 e!89468)))

(declare-fun res!65874 () Bool)

(assert (=> b!137442 (=> res!65874 e!89468)))

(declare-fun e!89472 () Bool)

(assert (=> b!137442 (= res!65874 (not e!89472))))

(declare-fun res!65871 () Bool)

(assert (=> b!137442 (=> (not res!65871) (not e!89472))))

(assert (=> b!137442 (= res!65871 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))))))

(declare-fun b!137443 () Bool)

(declare-fun e!89476 () Bool)

(declare-fun e!89473 () Bool)

(assert (=> b!137443 (= e!89476 e!89473)))

(declare-fun res!65875 () Bool)

(declare-fun call!15143 () Bool)

(assert (=> b!137443 (= res!65875 call!15143)))

(assert (=> b!137443 (=> (not res!65875) (not e!89473))))

(declare-fun bm!15136 () Bool)

(declare-fun call!15142 () ListLongMap!1715)

(declare-fun call!15145 () ListLongMap!1715)

(assert (=> bm!15136 (= call!15142 call!15145)))

(declare-fun b!137444 () Bool)

(declare-fun e!89479 () Bool)

(assert (=> b!137444 (= e!89468 e!89479)))

(declare-fun res!65873 () Bool)

(assert (=> b!137444 (=> (not res!65873) (not e!89479))))

(declare-fun lt!71942 () ListLongMap!1715)

(assert (=> b!137444 (= res!65873 (contains!901 lt!71942 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000)))))

(assert (=> b!137444 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))))))

(declare-fun b!137445 () Bool)

(declare-fun e!89475 () ListLongMap!1715)

(declare-fun e!89471 () ListLongMap!1715)

(assert (=> b!137445 (= e!89475 e!89471)))

(declare-fun c!25799 () Bool)

(assert (=> b!137445 (= c!25799 (and (not (= (bvand (extraKeys!2650 (_2!1322 lt!71264)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 (_2!1322 lt!71264)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!15137 () Bool)

(assert (=> bm!15137 (= call!15143 (contains!901 lt!71942 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137446 () Bool)

(assert (=> b!137446 (= e!89473 (= (apply!117 lt!71942 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2742 (_2!1322 lt!71264))))))

(declare-fun b!137447 () Bool)

(declare-fun e!89478 () ListLongMap!1715)

(declare-fun call!15140 () ListLongMap!1715)

(assert (=> b!137447 (= e!89478 call!15140)))

(declare-fun bm!15138 () Bool)

(declare-fun call!15141 () ListLongMap!1715)

(declare-fun call!15139 () ListLongMap!1715)

(assert (=> bm!15138 (= call!15141 call!15139)))

(declare-fun b!137448 () Bool)

(declare-fun e!89469 () Bool)

(assert (=> b!137448 (= e!89469 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000)))))

(declare-fun b!137450 () Bool)

(assert (=> b!137450 (= e!89471 call!15141)))

(declare-fun b!137451 () Bool)

(assert (=> b!137451 (= e!89472 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000)))))

(declare-fun b!137452 () Bool)

(assert (=> b!137452 (= e!89470 e!89474)))

(declare-fun c!25803 () Bool)

(assert (=> b!137452 (= c!25803 (not (= (bvand (extraKeys!2650 (_2!1322 lt!71264)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137453 () Bool)

(declare-fun e!89477 () Unit!4291)

(declare-fun lt!71936 () Unit!4291)

(assert (=> b!137453 (= e!89477 lt!71936)))

(declare-fun lt!71947 () ListLongMap!1715)

(assert (=> b!137453 (= lt!71947 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (_2!1322 lt!71264)) (_values!2872 (_2!1322 lt!71264)) (mask!7203 (_2!1322 lt!71264)) (extraKeys!2650 (_2!1322 lt!71264)) (zeroValue!2742 (_2!1322 lt!71264)) (minValue!2742 (_2!1322 lt!71264)) #b00000000000000000000000000000000 (defaultEntry!2889 (_2!1322 lt!71264))))))

(declare-fun lt!71940 () (_ BitVec 64))

(assert (=> b!137453 (= lt!71940 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71937 () (_ BitVec 64))

(assert (=> b!137453 (= lt!71937 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000))))

(declare-fun lt!71938 () Unit!4291)

(assert (=> b!137453 (= lt!71938 (addStillContains!93 lt!71947 lt!71940 (zeroValue!2742 (_2!1322 lt!71264)) lt!71937))))

(assert (=> b!137453 (contains!901 (+!171 lt!71947 (tuple2!2623 lt!71940 (zeroValue!2742 (_2!1322 lt!71264)))) lt!71937)))

(declare-fun lt!71952 () Unit!4291)

(assert (=> b!137453 (= lt!71952 lt!71938)))

(declare-fun lt!71939 () ListLongMap!1715)

(assert (=> b!137453 (= lt!71939 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (_2!1322 lt!71264)) (_values!2872 (_2!1322 lt!71264)) (mask!7203 (_2!1322 lt!71264)) (extraKeys!2650 (_2!1322 lt!71264)) (zeroValue!2742 (_2!1322 lt!71264)) (minValue!2742 (_2!1322 lt!71264)) #b00000000000000000000000000000000 (defaultEntry!2889 (_2!1322 lt!71264))))))

(declare-fun lt!71953 () (_ BitVec 64))

(assert (=> b!137453 (= lt!71953 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71935 () (_ BitVec 64))

(assert (=> b!137453 (= lt!71935 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000))))

(declare-fun lt!71932 () Unit!4291)

(assert (=> b!137453 (= lt!71932 (addApplyDifferent!93 lt!71939 lt!71953 (minValue!2742 (_2!1322 lt!71264)) lt!71935))))

(assert (=> b!137453 (= (apply!117 (+!171 lt!71939 (tuple2!2623 lt!71953 (minValue!2742 (_2!1322 lt!71264)))) lt!71935) (apply!117 lt!71939 lt!71935))))

(declare-fun lt!71948 () Unit!4291)

(assert (=> b!137453 (= lt!71948 lt!71932)))

(declare-fun lt!71945 () ListLongMap!1715)

(assert (=> b!137453 (= lt!71945 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (_2!1322 lt!71264)) (_values!2872 (_2!1322 lt!71264)) (mask!7203 (_2!1322 lt!71264)) (extraKeys!2650 (_2!1322 lt!71264)) (zeroValue!2742 (_2!1322 lt!71264)) (minValue!2742 (_2!1322 lt!71264)) #b00000000000000000000000000000000 (defaultEntry!2889 (_2!1322 lt!71264))))))

(declare-fun lt!71933 () (_ BitVec 64))

(assert (=> b!137453 (= lt!71933 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71934 () (_ BitVec 64))

(assert (=> b!137453 (= lt!71934 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000))))

(declare-fun lt!71941 () Unit!4291)

(assert (=> b!137453 (= lt!71941 (addApplyDifferent!93 lt!71945 lt!71933 (zeroValue!2742 (_2!1322 lt!71264)) lt!71934))))

(assert (=> b!137453 (= (apply!117 (+!171 lt!71945 (tuple2!2623 lt!71933 (zeroValue!2742 (_2!1322 lt!71264)))) lt!71934) (apply!117 lt!71945 lt!71934))))

(declare-fun lt!71943 () Unit!4291)

(assert (=> b!137453 (= lt!71943 lt!71941)))

(declare-fun lt!71950 () ListLongMap!1715)

(assert (=> b!137453 (= lt!71950 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (_2!1322 lt!71264)) (_values!2872 (_2!1322 lt!71264)) (mask!7203 (_2!1322 lt!71264)) (extraKeys!2650 (_2!1322 lt!71264)) (zeroValue!2742 (_2!1322 lt!71264)) (minValue!2742 (_2!1322 lt!71264)) #b00000000000000000000000000000000 (defaultEntry!2889 (_2!1322 lt!71264))))))

(declare-fun lt!71949 () (_ BitVec 64))

(assert (=> b!137453 (= lt!71949 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!71951 () (_ BitVec 64))

(assert (=> b!137453 (= lt!71951 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000))))

(assert (=> b!137453 (= lt!71936 (addApplyDifferent!93 lt!71950 lt!71949 (minValue!2742 (_2!1322 lt!71264)) lt!71951))))

(assert (=> b!137453 (= (apply!117 (+!171 lt!71950 (tuple2!2623 lt!71949 (minValue!2742 (_2!1322 lt!71264)))) lt!71951) (apply!117 lt!71950 lt!71951))))

(declare-fun b!137454 () Bool)

(assert (=> b!137454 (= e!89478 call!15141)))

(declare-fun b!137455 () Bool)

(assert (=> b!137455 (= e!89475 (+!171 call!15139 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (_2!1322 lt!71264)))))))

(declare-fun bm!15139 () Bool)

(assert (=> bm!15139 (= call!15145 (getCurrentListMapNoExtraKeys!138 (_keys!4642 (_2!1322 lt!71264)) (_values!2872 (_2!1322 lt!71264)) (mask!7203 (_2!1322 lt!71264)) (extraKeys!2650 (_2!1322 lt!71264)) (zeroValue!2742 (_2!1322 lt!71264)) (minValue!2742 (_2!1322 lt!71264)) #b00000000000000000000000000000000 (defaultEntry!2889 (_2!1322 lt!71264))))))

(declare-fun b!137456 () Bool)

(declare-fun Unit!4342 () Unit!4291)

(assert (=> b!137456 (= e!89477 Unit!4342)))

(declare-fun b!137457 () Bool)

(declare-fun res!65867 () Bool)

(assert (=> b!137457 (=> (not res!65867) (not e!89470))))

(assert (=> b!137457 (= res!65867 e!89476)))

(declare-fun c!25800 () Bool)

(assert (=> b!137457 (= c!25800 (not (= (bvand (extraKeys!2650 (_2!1322 lt!71264)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!137449 () Bool)

(declare-fun e!89467 () Bool)

(assert (=> b!137449 (= e!89474 e!89467)))

(declare-fun res!65870 () Bool)

(assert (=> b!137449 (= res!65870 call!15144)))

(assert (=> b!137449 (=> (not res!65870) (not e!89467))))

(declare-fun d!43063 () Bool)

(assert (=> d!43063 e!89470))

(declare-fun res!65869 () Bool)

(assert (=> d!43063 (=> (not res!65869) (not e!89470))))

(assert (=> d!43063 (= res!65869 (or (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))))))))

(declare-fun lt!71944 () ListLongMap!1715)

(assert (=> d!43063 (= lt!71942 lt!71944)))

(declare-fun lt!71946 () Unit!4291)

(assert (=> d!43063 (= lt!71946 e!89477)))

(declare-fun c!25801 () Bool)

(assert (=> d!43063 (= c!25801 e!89469)))

(declare-fun res!65872 () Bool)

(assert (=> d!43063 (=> (not res!65872) (not e!89469))))

(assert (=> d!43063 (= res!65872 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))))))

(assert (=> d!43063 (= lt!71944 e!89475)))

(declare-fun c!25798 () Bool)

(assert (=> d!43063 (= c!25798 (and (not (= (bvand (extraKeys!2650 (_2!1322 lt!71264)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2650 (_2!1322 lt!71264)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!43063 (validMask!0 (mask!7203 (_2!1322 lt!71264)))))

(assert (=> d!43063 (= (getCurrentListMap!544 (_keys!4642 (_2!1322 lt!71264)) (_values!2872 (_2!1322 lt!71264)) (mask!7203 (_2!1322 lt!71264)) (extraKeys!2650 (_2!1322 lt!71264)) (zeroValue!2742 (_2!1322 lt!71264)) (minValue!2742 (_2!1322 lt!71264)) #b00000000000000000000000000000000 (defaultEntry!2889 (_2!1322 lt!71264))) lt!71942)))

(declare-fun b!137458 () Bool)

(assert (=> b!137458 (= e!89467 (= (apply!117 lt!71942 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2742 (_2!1322 lt!71264))))))

(declare-fun bm!15140 () Bool)

(assert (=> bm!15140 (= call!15140 call!15142)))

(declare-fun b!137459 () Bool)

(assert (=> b!137459 (= e!89476 (not call!15143))))

(declare-fun bm!15141 () Bool)

(assert (=> bm!15141 (= call!15144 (contains!901 lt!71942 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137460 () Bool)

(assert (=> b!137460 (= e!89479 (= (apply!117 lt!71942 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (_values!2872 (_2!1322 lt!71264))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 (_2!1322 lt!71264)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!137460 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (_values!2872 (_2!1322 lt!71264)))))))

(assert (=> b!137460 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))))))

(declare-fun bm!15142 () Bool)

(assert (=> bm!15142 (= call!15139 (+!171 (ite c!25798 call!15145 (ite c!25799 call!15142 call!15140)) (ite (or c!25798 c!25799) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 (_2!1322 lt!71264))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 (_2!1322 lt!71264))))))))

(declare-fun b!137461 () Bool)

(declare-fun c!25802 () Bool)

(assert (=> b!137461 (= c!25802 (and (not (= (bvand (extraKeys!2650 (_2!1322 lt!71264)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 (_2!1322 lt!71264)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!137461 (= e!89471 e!89478)))

(assert (= (and d!43063 c!25798) b!137455))

(assert (= (and d!43063 (not c!25798)) b!137445))

(assert (= (and b!137445 c!25799) b!137450))

(assert (= (and b!137445 (not c!25799)) b!137461))

(assert (= (and b!137461 c!25802) b!137454))

(assert (= (and b!137461 (not c!25802)) b!137447))

(assert (= (or b!137454 b!137447) bm!15140))

(assert (= (or b!137450 bm!15140) bm!15136))

(assert (= (or b!137450 b!137454) bm!15138))

(assert (= (or b!137455 bm!15136) bm!15139))

(assert (= (or b!137455 bm!15138) bm!15142))

(assert (= (and d!43063 res!65872) b!137448))

(assert (= (and d!43063 c!25801) b!137453))

(assert (= (and d!43063 (not c!25801)) b!137456))

(assert (= (and d!43063 res!65869) b!137442))

(assert (= (and b!137442 res!65871) b!137451))

(assert (= (and b!137442 (not res!65874)) b!137444))

(assert (= (and b!137444 res!65873) b!137460))

(assert (= (and b!137442 res!65868) b!137457))

(assert (= (and b!137457 c!25800) b!137443))

(assert (= (and b!137457 (not c!25800)) b!137459))

(assert (= (and b!137443 res!65875) b!137446))

(assert (= (or b!137443 b!137459) bm!15137))

(assert (= (and b!137457 res!65867) b!137452))

(assert (= (and b!137452 c!25803) b!137449))

(assert (= (and b!137452 (not c!25803)) b!137441))

(assert (= (and b!137449 res!65870) b!137458))

(assert (= (or b!137449 b!137441) bm!15141))

(declare-fun b_lambda!6169 () Bool)

(assert (=> (not b_lambda!6169) (not b!137460)))

(declare-fun t!6253 () Bool)

(declare-fun tb!2473 () Bool)

(assert (=> (and b!136196 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 (_2!1322 lt!71264))) t!6253) tb!2473))

(declare-fun result!4063 () Bool)

(assert (=> tb!2473 (= result!4063 tp_is_empty!2889)))

(assert (=> b!137460 t!6253))

(declare-fun b_and!8541 () Bool)

(assert (= b_and!8537 (and (=> t!6253 result!4063) b_and!8541)))

(declare-fun t!6255 () Bool)

(declare-fun tb!2475 () Bool)

(assert (=> (and b!136192 (= (defaultEntry!2889 newMap!16) (defaultEntry!2889 (_2!1322 lt!71264))) t!6255) tb!2475))

(declare-fun result!4065 () Bool)

(assert (= result!4065 result!4063))

(assert (=> b!137460 t!6255))

(declare-fun b_and!8543 () Bool)

(assert (= b_and!8539 (and (=> t!6255 result!4065) b_and!8543)))

(declare-fun m!164465 () Bool)

(assert (=> bm!15137 m!164465))

(declare-fun m!164467 () Bool)

(assert (=> b!137460 m!164467))

(assert (=> b!137460 m!163577))

(declare-fun m!164469 () Bool)

(assert (=> b!137460 m!164469))

(assert (=> b!137460 m!163577))

(declare-fun m!164471 () Bool)

(assert (=> b!137460 m!164471))

(assert (=> b!137460 m!164467))

(assert (=> b!137460 m!164471))

(declare-fun m!164473 () Bool)

(assert (=> b!137460 m!164473))

(declare-fun m!164475 () Bool)

(assert (=> b!137455 m!164475))

(declare-fun m!164477 () Bool)

(assert (=> bm!15142 m!164477))

(declare-fun m!164479 () Bool)

(assert (=> bm!15139 m!164479))

(declare-fun m!164481 () Bool)

(assert (=> b!137453 m!164481))

(declare-fun m!164483 () Bool)

(assert (=> b!137453 m!164483))

(declare-fun m!164485 () Bool)

(assert (=> b!137453 m!164485))

(declare-fun m!164487 () Bool)

(assert (=> b!137453 m!164487))

(declare-fun m!164489 () Bool)

(assert (=> b!137453 m!164489))

(declare-fun m!164491 () Bool)

(assert (=> b!137453 m!164491))

(declare-fun m!164493 () Bool)

(assert (=> b!137453 m!164493))

(declare-fun m!164495 () Bool)

(assert (=> b!137453 m!164495))

(declare-fun m!164497 () Bool)

(assert (=> b!137453 m!164497))

(declare-fun m!164499 () Bool)

(assert (=> b!137453 m!164499))

(assert (=> b!137453 m!164481))

(assert (=> b!137453 m!164489))

(assert (=> b!137453 m!163577))

(declare-fun m!164501 () Bool)

(assert (=> b!137453 m!164501))

(assert (=> b!137453 m!164479))

(assert (=> b!137453 m!164493))

(declare-fun m!164503 () Bool)

(assert (=> b!137453 m!164503))

(declare-fun m!164505 () Bool)

(assert (=> b!137453 m!164505))

(declare-fun m!164507 () Bool)

(assert (=> b!137453 m!164507))

(assert (=> b!137453 m!164505))

(declare-fun m!164509 () Bool)

(assert (=> b!137453 m!164509))

(declare-fun m!164511 () Bool)

(assert (=> bm!15141 m!164511))

(assert (=> d!43063 m!164461))

(assert (=> b!137451 m!163577))

(assert (=> b!137451 m!163577))

(assert (=> b!137451 m!163579))

(declare-fun m!164513 () Bool)

(assert (=> b!137458 m!164513))

(assert (=> b!137448 m!163577))

(assert (=> b!137448 m!163577))

(assert (=> b!137448 m!163579))

(declare-fun m!164515 () Bool)

(assert (=> b!137446 m!164515))

(assert (=> b!137444 m!163577))

(assert (=> b!137444 m!163577))

(declare-fun m!164517 () Bool)

(assert (=> b!137444 m!164517))

(assert (=> d!42679 d!43063))

(declare-fun d!43065 () Bool)

(assert (=> d!43065 (isDefined!126 (getValueByKey!172 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))

(declare-fun lt!71954 () Unit!4291)

(assert (=> d!43065 (= lt!71954 (choose!842 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))

(declare-fun e!89480 () Bool)

(assert (=> d!43065 e!89480))

(declare-fun res!65876 () Bool)

(assert (=> d!43065 (=> (not res!65876) (not e!89480))))

(assert (=> d!43065 (= res!65876 (isStrictlySorted!318 (toList!873 e!88876)))))

(assert (=> d!43065 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))) lt!71954)))

(declare-fun b!137462 () Bool)

(assert (=> b!137462 (= e!89480 (containsKey!176 (toList!873 e!88876) (ite c!25521 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))))

(assert (= (and d!43065 res!65876) b!137462))

(assert (=> d!43065 m!163221))

(assert (=> d!43065 m!163221))

(assert (=> d!43065 m!163223))

(declare-fun m!164519 () Bool)

(assert (=> d!43065 m!164519))

(declare-fun m!164521 () Bool)

(assert (=> d!43065 m!164521))

(assert (=> b!137462 m!163217))

(assert (=> b!136780 d!43065))

(assert (=> b!136780 d!42821))

(assert (=> b!136780 d!42823))

(declare-fun d!43067 () Bool)

(assert (=> d!43067 (contains!901 (+!171 lt!71474 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16))) lt!71464)))

(declare-fun lt!71955 () Unit!4291)

(assert (=> d!43067 (= lt!71955 (choose!843 lt!71474 lt!71467 (zeroValue!2742 newMap!16) lt!71464))))

(assert (=> d!43067 (contains!901 lt!71474 lt!71464)))

(assert (=> d!43067 (= (addStillContains!93 lt!71474 lt!71467 (zeroValue!2742 newMap!16) lt!71464) lt!71955)))

(declare-fun bs!5774 () Bool)

(assert (= bs!5774 d!43067))

(assert (=> bs!5774 m!163191))

(assert (=> bs!5774 m!163191))

(assert (=> bs!5774 m!163201))

(declare-fun m!164523 () Bool)

(assert (=> bs!5774 m!164523))

(declare-fun m!164525 () Bool)

(assert (=> bs!5774 m!164525))

(assert (=> b!136765 d!43067))

(declare-fun d!43069 () Bool)

(assert (=> d!43069 (= (apply!117 lt!71466 lt!71462) (get!1502 (getValueByKey!172 (toList!873 lt!71466) lt!71462)))))

(declare-fun bs!5775 () Bool)

(assert (= bs!5775 d!43069))

(declare-fun m!164527 () Bool)

(assert (=> bs!5775 m!164527))

(assert (=> bs!5775 m!164527))

(declare-fun m!164529 () Bool)

(assert (=> bs!5775 m!164529))

(assert (=> b!136765 d!43069))

(declare-fun d!43071 () Bool)

(assert (=> d!43071 (= (apply!117 lt!71472 lt!71461) (get!1502 (getValueByKey!172 (toList!873 lt!71472) lt!71461)))))

(declare-fun bs!5776 () Bool)

(assert (= bs!5776 d!43071))

(declare-fun m!164531 () Bool)

(assert (=> bs!5776 m!164531))

(assert (=> bs!5776 m!164531))

(declare-fun m!164533 () Bool)

(assert (=> bs!5776 m!164533))

(assert (=> b!136765 d!43071))

(declare-fun d!43073 () Bool)

(assert (=> d!43073 (= (apply!117 (+!171 lt!71466 (tuple2!2623 lt!71480 (minValue!2742 newMap!16))) lt!71462) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71466 (tuple2!2623 lt!71480 (minValue!2742 newMap!16)))) lt!71462)))))

(declare-fun bs!5777 () Bool)

(assert (= bs!5777 d!43073))

(declare-fun m!164535 () Bool)

(assert (=> bs!5777 m!164535))

(assert (=> bs!5777 m!164535))

(declare-fun m!164537 () Bool)

(assert (=> bs!5777 m!164537))

(assert (=> b!136765 d!43073))

(declare-fun d!43075 () Bool)

(declare-fun e!89481 () Bool)

(assert (=> d!43075 e!89481))

(declare-fun res!65878 () Bool)

(assert (=> d!43075 (=> (not res!65878) (not e!89481))))

(declare-fun lt!71959 () ListLongMap!1715)

(assert (=> d!43075 (= res!65878 (contains!901 lt!71959 (_1!1321 (tuple2!2623 lt!71480 (minValue!2742 newMap!16)))))))

(declare-fun lt!71956 () List!1741)

(assert (=> d!43075 (= lt!71959 (ListLongMap!1716 lt!71956))))

(declare-fun lt!71957 () Unit!4291)

(declare-fun lt!71958 () Unit!4291)

(assert (=> d!43075 (= lt!71957 lt!71958)))

(assert (=> d!43075 (= (getValueByKey!172 lt!71956 (_1!1321 (tuple2!2623 lt!71480 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71480 (minValue!2742 newMap!16)))))))

(assert (=> d!43075 (= lt!71958 (lemmaContainsTupThenGetReturnValue!89 lt!71956 (_1!1321 (tuple2!2623 lt!71480 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71480 (minValue!2742 newMap!16)))))))

(assert (=> d!43075 (= lt!71956 (insertStrictlySorted!91 (toList!873 lt!71466) (_1!1321 (tuple2!2623 lt!71480 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71480 (minValue!2742 newMap!16)))))))

(assert (=> d!43075 (= (+!171 lt!71466 (tuple2!2623 lt!71480 (minValue!2742 newMap!16))) lt!71959)))

(declare-fun b!137463 () Bool)

(declare-fun res!65877 () Bool)

(assert (=> b!137463 (=> (not res!65877) (not e!89481))))

(assert (=> b!137463 (= res!65877 (= (getValueByKey!172 (toList!873 lt!71959) (_1!1321 (tuple2!2623 lt!71480 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71480 (minValue!2742 newMap!16))))))))

(declare-fun b!137464 () Bool)

(assert (=> b!137464 (= e!89481 (contains!904 (toList!873 lt!71959) (tuple2!2623 lt!71480 (minValue!2742 newMap!16))))))

(assert (= (and d!43075 res!65878) b!137463))

(assert (= (and b!137463 res!65877) b!137464))

(declare-fun m!164539 () Bool)

(assert (=> d!43075 m!164539))

(declare-fun m!164541 () Bool)

(assert (=> d!43075 m!164541))

(declare-fun m!164543 () Bool)

(assert (=> d!43075 m!164543))

(declare-fun m!164545 () Bool)

(assert (=> d!43075 m!164545))

(declare-fun m!164547 () Bool)

(assert (=> b!137463 m!164547))

(declare-fun m!164549 () Bool)

(assert (=> b!137464 m!164549))

(assert (=> b!136765 d!43075))

(declare-fun d!43077 () Bool)

(assert (=> d!43077 (= (apply!117 lt!71477 lt!71478) (get!1502 (getValueByKey!172 (toList!873 lt!71477) lt!71478)))))

(declare-fun bs!5778 () Bool)

(assert (= bs!5778 d!43077))

(declare-fun m!164551 () Bool)

(assert (=> bs!5778 m!164551))

(assert (=> bs!5778 m!164551))

(declare-fun m!164553 () Bool)

(assert (=> bs!5778 m!164553))

(assert (=> b!136765 d!43077))

(declare-fun d!43079 () Bool)

(assert (=> d!43079 (= (apply!117 (+!171 lt!71466 (tuple2!2623 lt!71480 (minValue!2742 newMap!16))) lt!71462) (apply!117 lt!71466 lt!71462))))

(declare-fun lt!71960 () Unit!4291)

(assert (=> d!43079 (= lt!71960 (choose!844 lt!71466 lt!71480 (minValue!2742 newMap!16) lt!71462))))

(declare-fun e!89482 () Bool)

(assert (=> d!43079 e!89482))

(declare-fun res!65879 () Bool)

(assert (=> d!43079 (=> (not res!65879) (not e!89482))))

(assert (=> d!43079 (= res!65879 (contains!901 lt!71466 lt!71462))))

(assert (=> d!43079 (= (addApplyDifferent!93 lt!71466 lt!71480 (minValue!2742 newMap!16) lt!71462) lt!71960)))

(declare-fun b!137465 () Bool)

(assert (=> b!137465 (= e!89482 (not (= lt!71462 lt!71480)))))

(assert (= (and d!43079 res!65879) b!137465))

(assert (=> d!43079 m!163187))

(assert (=> d!43079 m!163189))

(declare-fun m!164555 () Bool)

(assert (=> d!43079 m!164555))

(assert (=> d!43079 m!163187))

(declare-fun m!164557 () Bool)

(assert (=> d!43079 m!164557))

(assert (=> d!43079 m!163199))

(assert (=> b!136765 d!43079))

(declare-fun d!43081 () Bool)

(assert (=> d!43081 (= (apply!117 (+!171 lt!71477 (tuple2!2623 lt!71476 (minValue!2742 newMap!16))) lt!71478) (apply!117 lt!71477 lt!71478))))

(declare-fun lt!71961 () Unit!4291)

(assert (=> d!43081 (= lt!71961 (choose!844 lt!71477 lt!71476 (minValue!2742 newMap!16) lt!71478))))

(declare-fun e!89483 () Bool)

(assert (=> d!43081 e!89483))

(declare-fun res!65880 () Bool)

(assert (=> d!43081 (=> (not res!65880) (not e!89483))))

(assert (=> d!43081 (= res!65880 (contains!901 lt!71477 lt!71478))))

(assert (=> d!43081 (= (addApplyDifferent!93 lt!71477 lt!71476 (minValue!2742 newMap!16) lt!71478) lt!71961)))

(declare-fun b!137466 () Bool)

(assert (=> b!137466 (= e!89483 (not (= lt!71478 lt!71476)))))

(assert (= (and d!43081 res!65880) b!137466))

(assert (=> d!43081 m!163179))

(assert (=> d!43081 m!163181))

(declare-fun m!164559 () Bool)

(assert (=> d!43081 m!164559))

(assert (=> d!43081 m!163179))

(declare-fun m!164561 () Bool)

(assert (=> d!43081 m!164561))

(assert (=> d!43081 m!163207))

(assert (=> b!136765 d!43081))

(declare-fun d!43083 () Bool)

(declare-fun e!89484 () Bool)

(assert (=> d!43083 e!89484))

(declare-fun res!65882 () Bool)

(assert (=> d!43083 (=> (not res!65882) (not e!89484))))

(declare-fun lt!71965 () ListLongMap!1715)

(assert (=> d!43083 (= res!65882 (contains!901 lt!71965 (_1!1321 (tuple2!2623 lt!71476 (minValue!2742 newMap!16)))))))

(declare-fun lt!71962 () List!1741)

(assert (=> d!43083 (= lt!71965 (ListLongMap!1716 lt!71962))))

(declare-fun lt!71963 () Unit!4291)

(declare-fun lt!71964 () Unit!4291)

(assert (=> d!43083 (= lt!71963 lt!71964)))

(assert (=> d!43083 (= (getValueByKey!172 lt!71962 (_1!1321 (tuple2!2623 lt!71476 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71476 (minValue!2742 newMap!16)))))))

(assert (=> d!43083 (= lt!71964 (lemmaContainsTupThenGetReturnValue!89 lt!71962 (_1!1321 (tuple2!2623 lt!71476 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71476 (minValue!2742 newMap!16)))))))

(assert (=> d!43083 (= lt!71962 (insertStrictlySorted!91 (toList!873 lt!71477) (_1!1321 (tuple2!2623 lt!71476 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71476 (minValue!2742 newMap!16)))))))

(assert (=> d!43083 (= (+!171 lt!71477 (tuple2!2623 lt!71476 (minValue!2742 newMap!16))) lt!71965)))

(declare-fun b!137467 () Bool)

(declare-fun res!65881 () Bool)

(assert (=> b!137467 (=> (not res!65881) (not e!89484))))

(assert (=> b!137467 (= res!65881 (= (getValueByKey!172 (toList!873 lt!71965) (_1!1321 (tuple2!2623 lt!71476 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71476 (minValue!2742 newMap!16))))))))

(declare-fun b!137468 () Bool)

(assert (=> b!137468 (= e!89484 (contains!904 (toList!873 lt!71965) (tuple2!2623 lt!71476 (minValue!2742 newMap!16))))))

(assert (= (and d!43083 res!65882) b!137467))

(assert (= (and b!137467 res!65881) b!137468))

(declare-fun m!164563 () Bool)

(assert (=> d!43083 m!164563))

(declare-fun m!164565 () Bool)

(assert (=> d!43083 m!164565))

(declare-fun m!164567 () Bool)

(assert (=> d!43083 m!164567))

(declare-fun m!164569 () Bool)

(assert (=> d!43083 m!164569))

(declare-fun m!164571 () Bool)

(assert (=> b!137467 m!164571))

(declare-fun m!164573 () Bool)

(assert (=> b!137468 m!164573))

(assert (=> b!136765 d!43083))

(assert (=> b!136765 d!42945))

(declare-fun d!43085 () Bool)

(declare-fun e!89486 () Bool)

(assert (=> d!43085 e!89486))

(declare-fun res!65883 () Bool)

(assert (=> d!43085 (=> res!65883 e!89486)))

(declare-fun lt!71969 () Bool)

(assert (=> d!43085 (= res!65883 (not lt!71969))))

(declare-fun lt!71968 () Bool)

(assert (=> d!43085 (= lt!71969 lt!71968)))

(declare-fun lt!71966 () Unit!4291)

(declare-fun e!89485 () Unit!4291)

(assert (=> d!43085 (= lt!71966 e!89485)))

(declare-fun c!25804 () Bool)

(assert (=> d!43085 (= c!25804 lt!71968)))

(assert (=> d!43085 (= lt!71968 (containsKey!176 (toList!873 (+!171 lt!71474 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16)))) lt!71464))))

(assert (=> d!43085 (= (contains!901 (+!171 lt!71474 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16))) lt!71464) lt!71969)))

(declare-fun b!137469 () Bool)

(declare-fun lt!71967 () Unit!4291)

(assert (=> b!137469 (= e!89485 lt!71967)))

(assert (=> b!137469 (= lt!71967 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 (+!171 lt!71474 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16)))) lt!71464))))

(assert (=> b!137469 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71474 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16)))) lt!71464))))

(declare-fun b!137470 () Bool)

(declare-fun Unit!4343 () Unit!4291)

(assert (=> b!137470 (= e!89485 Unit!4343)))

(declare-fun b!137471 () Bool)

(assert (=> b!137471 (= e!89486 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71474 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16)))) lt!71464)))))

(assert (= (and d!43085 c!25804) b!137469))

(assert (= (and d!43085 (not c!25804)) b!137470))

(assert (= (and d!43085 (not res!65883)) b!137471))

(declare-fun m!164575 () Bool)

(assert (=> d!43085 m!164575))

(declare-fun m!164577 () Bool)

(assert (=> b!137469 m!164577))

(declare-fun m!164579 () Bool)

(assert (=> b!137469 m!164579))

(assert (=> b!137469 m!164579))

(declare-fun m!164581 () Bool)

(assert (=> b!137469 m!164581))

(assert (=> b!137471 m!164579))

(assert (=> b!137471 m!164579))

(assert (=> b!137471 m!164581))

(assert (=> b!136765 d!43085))

(declare-fun d!43087 () Bool)

(declare-fun e!89487 () Bool)

(assert (=> d!43087 e!89487))

(declare-fun res!65885 () Bool)

(assert (=> d!43087 (=> (not res!65885) (not e!89487))))

(declare-fun lt!71973 () ListLongMap!1715)

(assert (=> d!43087 (= res!65885 (contains!901 lt!71973 (_1!1321 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16)))))))

(declare-fun lt!71970 () List!1741)

(assert (=> d!43087 (= lt!71973 (ListLongMap!1716 lt!71970))))

(declare-fun lt!71971 () Unit!4291)

(declare-fun lt!71972 () Unit!4291)

(assert (=> d!43087 (= lt!71971 lt!71972)))

(assert (=> d!43087 (= (getValueByKey!172 lt!71970 (_1!1321 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43087 (= lt!71972 (lemmaContainsTupThenGetReturnValue!89 lt!71970 (_1!1321 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43087 (= lt!71970 (insertStrictlySorted!91 (toList!873 lt!71472) (_1!1321 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43087 (= (+!171 lt!71472 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16))) lt!71973)))

(declare-fun b!137472 () Bool)

(declare-fun res!65884 () Bool)

(assert (=> b!137472 (=> (not res!65884) (not e!89487))))

(assert (=> b!137472 (= res!65884 (= (getValueByKey!172 (toList!873 lt!71973) (_1!1321 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16))))))))

(declare-fun b!137473 () Bool)

(assert (=> b!137473 (= e!89487 (contains!904 (toList!873 lt!71973) (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16))))))

(assert (= (and d!43087 res!65885) b!137472))

(assert (= (and b!137472 res!65884) b!137473))

(declare-fun m!164583 () Bool)

(assert (=> d!43087 m!164583))

(declare-fun m!164585 () Bool)

(assert (=> d!43087 m!164585))

(declare-fun m!164587 () Bool)

(assert (=> d!43087 m!164587))

(declare-fun m!164589 () Bool)

(assert (=> d!43087 m!164589))

(declare-fun m!164591 () Bool)

(assert (=> b!137472 m!164591))

(declare-fun m!164593 () Bool)

(assert (=> b!137473 m!164593))

(assert (=> b!136765 d!43087))

(declare-fun d!43089 () Bool)

(assert (=> d!43089 (= (apply!117 (+!171 lt!71472 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16))) lt!71461) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71472 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16)))) lt!71461)))))

(declare-fun bs!5779 () Bool)

(assert (= bs!5779 d!43089))

(declare-fun m!164595 () Bool)

(assert (=> bs!5779 m!164595))

(assert (=> bs!5779 m!164595))

(declare-fun m!164597 () Bool)

(assert (=> bs!5779 m!164597))

(assert (=> b!136765 d!43089))

(declare-fun d!43091 () Bool)

(declare-fun e!89488 () Bool)

(assert (=> d!43091 e!89488))

(declare-fun res!65887 () Bool)

(assert (=> d!43091 (=> (not res!65887) (not e!89488))))

(declare-fun lt!71977 () ListLongMap!1715)

(assert (=> d!43091 (= res!65887 (contains!901 lt!71977 (_1!1321 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16)))))))

(declare-fun lt!71974 () List!1741)

(assert (=> d!43091 (= lt!71977 (ListLongMap!1716 lt!71974))))

(declare-fun lt!71975 () Unit!4291)

(declare-fun lt!71976 () Unit!4291)

(assert (=> d!43091 (= lt!71975 lt!71976)))

(assert (=> d!43091 (= (getValueByKey!172 lt!71974 (_1!1321 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43091 (= lt!71976 (lemmaContainsTupThenGetReturnValue!89 lt!71974 (_1!1321 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43091 (= lt!71974 (insertStrictlySorted!91 (toList!873 lt!71474) (_1!1321 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16)))))))

(assert (=> d!43091 (= (+!171 lt!71474 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16))) lt!71977)))

(declare-fun b!137474 () Bool)

(declare-fun res!65886 () Bool)

(assert (=> b!137474 (=> (not res!65886) (not e!89488))))

(assert (=> b!137474 (= res!65886 (= (getValueByKey!172 (toList!873 lt!71977) (_1!1321 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16))))))))

(declare-fun b!137475 () Bool)

(assert (=> b!137475 (= e!89488 (contains!904 (toList!873 lt!71977) (tuple2!2623 lt!71467 (zeroValue!2742 newMap!16))))))

(assert (= (and d!43091 res!65887) b!137474))

(assert (= (and b!137474 res!65886) b!137475))

(declare-fun m!164599 () Bool)

(assert (=> d!43091 m!164599))

(declare-fun m!164601 () Bool)

(assert (=> d!43091 m!164601))

(declare-fun m!164603 () Bool)

(assert (=> d!43091 m!164603))

(declare-fun m!164605 () Bool)

(assert (=> d!43091 m!164605))

(declare-fun m!164607 () Bool)

(assert (=> b!137474 m!164607))

(declare-fun m!164609 () Bool)

(assert (=> b!137475 m!164609))

(assert (=> b!136765 d!43091))

(declare-fun d!43093 () Bool)

(assert (=> d!43093 (= (apply!117 (+!171 lt!71472 (tuple2!2623 lt!71460 (zeroValue!2742 newMap!16))) lt!71461) (apply!117 lt!71472 lt!71461))))

(declare-fun lt!71978 () Unit!4291)

(assert (=> d!43093 (= lt!71978 (choose!844 lt!71472 lt!71460 (zeroValue!2742 newMap!16) lt!71461))))

(declare-fun e!89489 () Bool)

(assert (=> d!43093 e!89489))

(declare-fun res!65888 () Bool)

(assert (=> d!43093 (=> (not res!65888) (not e!89489))))

(assert (=> d!43093 (= res!65888 (contains!901 lt!71472 lt!71461))))

(assert (=> d!43093 (= (addApplyDifferent!93 lt!71472 lt!71460 (zeroValue!2742 newMap!16) lt!71461) lt!71978)))

(declare-fun b!137476 () Bool)

(assert (=> b!137476 (= e!89489 (not (= lt!71461 lt!71460)))))

(assert (= (and d!43093 res!65888) b!137476))

(assert (=> d!43093 m!163203))

(assert (=> d!43093 m!163205))

(declare-fun m!164611 () Bool)

(assert (=> d!43093 m!164611))

(assert (=> d!43093 m!163203))

(declare-fun m!164613 () Bool)

(assert (=> d!43093 m!164613))

(assert (=> d!43093 m!163195))

(assert (=> b!136765 d!43093))

(declare-fun d!43095 () Bool)

(assert (=> d!43095 (= (apply!117 (+!171 lt!71477 (tuple2!2623 lt!71476 (minValue!2742 newMap!16))) lt!71478) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71477 (tuple2!2623 lt!71476 (minValue!2742 newMap!16)))) lt!71478)))))

(declare-fun bs!5780 () Bool)

(assert (= bs!5780 d!43095))

(declare-fun m!164615 () Bool)

(assert (=> bs!5780 m!164615))

(assert (=> bs!5780 m!164615))

(declare-fun m!164617 () Bool)

(assert (=> bs!5780 m!164617))

(assert (=> b!136765 d!43095))

(declare-fun lt!71979 () Bool)

(declare-fun d!43097 () Bool)

(assert (=> d!43097 (= lt!71979 (select (content!134 (toList!873 lt!71438)) (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun e!89491 () Bool)

(assert (=> d!43097 (= lt!71979 e!89491)))

(declare-fun res!65889 () Bool)

(assert (=> d!43097 (=> (not res!65889) (not e!89491))))

(assert (=> d!43097 (= res!65889 ((_ is Cons!1737) (toList!873 lt!71438)))))

(assert (=> d!43097 (= (contains!904 (toList!873 lt!71438) (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))) lt!71979)))

(declare-fun b!137477 () Bool)

(declare-fun e!89490 () Bool)

(assert (=> b!137477 (= e!89491 e!89490)))

(declare-fun res!65890 () Bool)

(assert (=> b!137477 (=> res!65890 e!89490)))

(assert (=> b!137477 (= res!65890 (= (h!2343 (toList!873 lt!71438)) (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!137478 () Bool)

(assert (=> b!137478 (= e!89490 (contains!904 (t!6241 (toList!873 lt!71438)) (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))

(assert (= (and d!43097 res!65889) b!137477))

(assert (= (and b!137477 (not res!65890)) b!137478))

(declare-fun m!164619 () Bool)

(assert (=> d!43097 m!164619))

(declare-fun m!164621 () Bool)

(assert (=> d!43097 m!164621))

(declare-fun m!164623 () Bool)

(assert (=> b!137478 m!164623))

(assert (=> b!136738 d!43097))

(declare-fun d!43099 () Bool)

(assert (=> d!43099 (= (get!1502 (getValueByKey!172 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!3224 (getValueByKey!172 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42601 d!43099))

(assert (=> d!42601 d!42693))

(declare-fun d!43101 () Bool)

(assert (=> d!43101 (= (apply!117 lt!71349 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!172 (toList!873 lt!71349) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5781 () Bool)

(assert (= bs!5781 d!43101))

(assert (=> bs!5781 m!164227))

(assert (=> bs!5781 m!164227))

(declare-fun m!164625 () Bool)

(assert (=> bs!5781 m!164625))

(assert (=> b!136599 d!43101))

(assert (=> b!136581 d!42951))

(declare-fun d!43103 () Bool)

(assert (=> d!43103 (= (apply!117 (+!171 lt!71326 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) lt!71315) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71326 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))) lt!71315)))))

(declare-fun bs!5782 () Bool)

(assert (= bs!5782 d!43103))

(declare-fun m!164627 () Bool)

(assert (=> bs!5782 m!164627))

(assert (=> bs!5782 m!164627))

(declare-fun m!164629 () Bool)

(assert (=> bs!5782 m!164629))

(assert (=> b!136581 d!43103))

(declare-fun d!43105 () Bool)

(assert (=> d!43105 (= (apply!117 (+!171 lt!71331 (tuple2!2623 lt!71330 (minValue!2742 newMap!16))) lt!71332) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71331 (tuple2!2623 lt!71330 (minValue!2742 newMap!16)))) lt!71332)))))

(declare-fun bs!5783 () Bool)

(assert (= bs!5783 d!43105))

(declare-fun m!164631 () Bool)

(assert (=> bs!5783 m!164631))

(assert (=> bs!5783 m!164631))

(declare-fun m!164633 () Bool)

(assert (=> bs!5783 m!164633))

(assert (=> b!136581 d!43105))

(declare-fun d!43107 () Bool)

(assert (=> d!43107 (= (apply!117 lt!71326 lt!71315) (get!1502 (getValueByKey!172 (toList!873 lt!71326) lt!71315)))))

(declare-fun bs!5784 () Bool)

(assert (= bs!5784 d!43107))

(declare-fun m!164635 () Bool)

(assert (=> bs!5784 m!164635))

(assert (=> bs!5784 m!164635))

(declare-fun m!164637 () Bool)

(assert (=> bs!5784 m!164637))

(assert (=> b!136581 d!43107))

(declare-fun d!43109 () Bool)

(assert (=> d!43109 (= (apply!117 (+!171 lt!71331 (tuple2!2623 lt!71330 (minValue!2742 newMap!16))) lt!71332) (apply!117 lt!71331 lt!71332))))

(declare-fun lt!71980 () Unit!4291)

(assert (=> d!43109 (= lt!71980 (choose!844 lt!71331 lt!71330 (minValue!2742 newMap!16) lt!71332))))

(declare-fun e!89492 () Bool)

(assert (=> d!43109 e!89492))

(declare-fun res!65891 () Bool)

(assert (=> d!43109 (=> (not res!65891) (not e!89492))))

(assert (=> d!43109 (= res!65891 (contains!901 lt!71331 lt!71332))))

(assert (=> d!43109 (= (addApplyDifferent!93 lt!71331 lt!71330 (minValue!2742 newMap!16) lt!71332) lt!71980)))

(declare-fun b!137479 () Bool)

(assert (=> b!137479 (= e!89492 (not (= lt!71332 lt!71330)))))

(assert (= (and d!43109 res!65891) b!137479))

(assert (=> d!43109 m!162825))

(assert (=> d!43109 m!162827))

(declare-fun m!164639 () Bool)

(assert (=> d!43109 m!164639))

(assert (=> d!43109 m!162825))

(declare-fun m!164641 () Bool)

(assert (=> d!43109 m!164641))

(assert (=> d!43109 m!162853))

(assert (=> b!136581 d!43109))

(declare-fun d!43111 () Bool)

(assert (=> d!43111 (= (apply!117 (+!171 lt!71326 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) lt!71315) (apply!117 lt!71326 lt!71315))))

(declare-fun lt!71981 () Unit!4291)

(assert (=> d!43111 (= lt!71981 (choose!844 lt!71326 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) lt!71315))))

(declare-fun e!89493 () Bool)

(assert (=> d!43111 e!89493))

(declare-fun res!65892 () Bool)

(assert (=> d!43111 (=> (not res!65892) (not e!89493))))

(assert (=> d!43111 (= res!65892 (contains!901 lt!71326 lt!71315))))

(assert (=> d!43111 (= (addApplyDifferent!93 lt!71326 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) lt!71315) lt!71981)))

(declare-fun b!137480 () Bool)

(assert (=> b!137480 (= e!89493 (not (= lt!71315 lt!71314)))))

(assert (= (and d!43111 res!65892) b!137480))

(assert (=> d!43111 m!162849))

(assert (=> d!43111 m!162851))

(declare-fun m!164643 () Bool)

(assert (=> d!43111 m!164643))

(assert (=> d!43111 m!162849))

(declare-fun m!164645 () Bool)

(assert (=> d!43111 m!164645))

(assert (=> d!43111 m!162841))

(assert (=> b!136581 d!43111))

(declare-fun d!43113 () Bool)

(declare-fun e!89495 () Bool)

(assert (=> d!43113 e!89495))

(declare-fun res!65893 () Bool)

(assert (=> d!43113 (=> res!65893 e!89495)))

(declare-fun lt!71985 () Bool)

(assert (=> d!43113 (= res!65893 (not lt!71985))))

(declare-fun lt!71984 () Bool)

(assert (=> d!43113 (= lt!71985 lt!71984)))

(declare-fun lt!71982 () Unit!4291)

(declare-fun e!89494 () Unit!4291)

(assert (=> d!43113 (= lt!71982 e!89494)))

(declare-fun c!25805 () Bool)

(assert (=> d!43113 (= c!25805 lt!71984)))

(assert (=> d!43113 (= lt!71984 (containsKey!176 (toList!873 (+!171 lt!71328 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))) lt!71318))))

(assert (=> d!43113 (= (contains!901 (+!171 lt!71328 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) lt!71318) lt!71985)))

(declare-fun b!137481 () Bool)

(declare-fun lt!71983 () Unit!4291)

(assert (=> b!137481 (= e!89494 lt!71983)))

(assert (=> b!137481 (= lt!71983 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 (+!171 lt!71328 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))) lt!71318))))

(assert (=> b!137481 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71328 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))) lt!71318))))

(declare-fun b!137482 () Bool)

(declare-fun Unit!4344 () Unit!4291)

(assert (=> b!137482 (= e!89494 Unit!4344)))

(declare-fun b!137483 () Bool)

(assert (=> b!137483 (= e!89495 (isDefined!126 (getValueByKey!172 (toList!873 (+!171 lt!71328 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))) lt!71318)))))

(assert (= (and d!43113 c!25805) b!137481))

(assert (= (and d!43113 (not c!25805)) b!137482))

(assert (= (and d!43113 (not res!65893)) b!137483))

(declare-fun m!164647 () Bool)

(assert (=> d!43113 m!164647))

(declare-fun m!164649 () Bool)

(assert (=> b!137481 m!164649))

(declare-fun m!164651 () Bool)

(assert (=> b!137481 m!164651))

(assert (=> b!137481 m!164651))

(declare-fun m!164653 () Bool)

(assert (=> b!137481 m!164653))

(assert (=> b!137483 m!164651))

(assert (=> b!137483 m!164651))

(assert (=> b!137483 m!164653))

(assert (=> b!136581 d!43113))

(declare-fun d!43115 () Bool)

(assert (=> d!43115 (contains!901 (+!171 lt!71328 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) lt!71318)))

(declare-fun lt!71986 () Unit!4291)

(assert (=> d!43115 (= lt!71986 (choose!843 lt!71328 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) lt!71318))))

(assert (=> d!43115 (contains!901 lt!71328 lt!71318)))

(assert (=> d!43115 (= (addStillContains!93 lt!71328 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)) lt!71318) lt!71986)))

(declare-fun bs!5785 () Bool)

(assert (= bs!5785 d!43115))

(assert (=> bs!5785 m!162837))

(assert (=> bs!5785 m!162837))

(assert (=> bs!5785 m!162847))

(declare-fun m!164655 () Bool)

(assert (=> bs!5785 m!164655))

(declare-fun m!164657 () Bool)

(assert (=> bs!5785 m!164657))

(assert (=> b!136581 d!43115))

(declare-fun d!43117 () Bool)

(assert (=> d!43117 (= (apply!117 (+!171 lt!71320 (tuple2!2623 lt!71334 (minValue!2742 newMap!16))) lt!71316) (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71320 (tuple2!2623 lt!71334 (minValue!2742 newMap!16)))) lt!71316)))))

(declare-fun bs!5786 () Bool)

(assert (= bs!5786 d!43117))

(declare-fun m!164659 () Bool)

(assert (=> bs!5786 m!164659))

(assert (=> bs!5786 m!164659))

(declare-fun m!164661 () Bool)

(assert (=> bs!5786 m!164661))

(assert (=> b!136581 d!43117))

(declare-fun d!43119 () Bool)

(assert (=> d!43119 (= (apply!117 lt!71331 lt!71332) (get!1502 (getValueByKey!172 (toList!873 lt!71331) lt!71332)))))

(declare-fun bs!5787 () Bool)

(assert (= bs!5787 d!43119))

(declare-fun m!164663 () Bool)

(assert (=> bs!5787 m!164663))

(assert (=> bs!5787 m!164663))

(declare-fun m!164665 () Bool)

(assert (=> bs!5787 m!164665))

(assert (=> b!136581 d!43119))

(declare-fun d!43121 () Bool)

(declare-fun e!89496 () Bool)

(assert (=> d!43121 e!89496))

(declare-fun res!65895 () Bool)

(assert (=> d!43121 (=> (not res!65895) (not e!89496))))

(declare-fun lt!71990 () ListLongMap!1715)

(assert (=> d!43121 (= res!65895 (contains!901 lt!71990 (_1!1321 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))))))

(declare-fun lt!71987 () List!1741)

(assert (=> d!43121 (= lt!71990 (ListLongMap!1716 lt!71987))))

(declare-fun lt!71988 () Unit!4291)

(declare-fun lt!71989 () Unit!4291)

(assert (=> d!43121 (= lt!71988 lt!71989)))

(assert (=> d!43121 (= (getValueByKey!172 lt!71987 (_1!1321 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))) (Some!177 (_2!1321 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))))))

(assert (=> d!43121 (= lt!71989 (lemmaContainsTupThenGetReturnValue!89 lt!71987 (_1!1321 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) (_2!1321 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))))))

(assert (=> d!43121 (= lt!71987 (insertStrictlySorted!91 (toList!873 lt!71326) (_1!1321 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) (_2!1321 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))))))

(assert (=> d!43121 (= (+!171 lt!71326 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) lt!71990)))

(declare-fun b!137484 () Bool)

(declare-fun res!65894 () Bool)

(assert (=> b!137484 (=> (not res!65894) (not e!89496))))

(assert (=> b!137484 (= res!65894 (= (getValueByKey!172 (toList!873 lt!71990) (_1!1321 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))) (Some!177 (_2!1321 (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))))))))

(declare-fun b!137485 () Bool)

(assert (=> b!137485 (= e!89496 (contains!904 (toList!873 lt!71990) (tuple2!2623 lt!71314 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))))))

(assert (= (and d!43121 res!65895) b!137484))

(assert (= (and b!137484 res!65894) b!137485))

(declare-fun m!164667 () Bool)

(assert (=> d!43121 m!164667))

(declare-fun m!164669 () Bool)

(assert (=> d!43121 m!164669))

(declare-fun m!164671 () Bool)

(assert (=> d!43121 m!164671))

(declare-fun m!164673 () Bool)

(assert (=> d!43121 m!164673))

(declare-fun m!164675 () Bool)

(assert (=> b!137484 m!164675))

(declare-fun m!164677 () Bool)

(assert (=> b!137485 m!164677))

(assert (=> b!136581 d!43121))

(declare-fun d!43123 () Bool)

(declare-fun e!89497 () Bool)

(assert (=> d!43123 e!89497))

(declare-fun res!65897 () Bool)

(assert (=> d!43123 (=> (not res!65897) (not e!89497))))

(declare-fun lt!71994 () ListLongMap!1715)

(assert (=> d!43123 (= res!65897 (contains!901 lt!71994 (_1!1321 (tuple2!2623 lt!71334 (minValue!2742 newMap!16)))))))

(declare-fun lt!71991 () List!1741)

(assert (=> d!43123 (= lt!71994 (ListLongMap!1716 lt!71991))))

(declare-fun lt!71992 () Unit!4291)

(declare-fun lt!71993 () Unit!4291)

(assert (=> d!43123 (= lt!71992 lt!71993)))

(assert (=> d!43123 (= (getValueByKey!172 lt!71991 (_1!1321 (tuple2!2623 lt!71334 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71334 (minValue!2742 newMap!16)))))))

(assert (=> d!43123 (= lt!71993 (lemmaContainsTupThenGetReturnValue!89 lt!71991 (_1!1321 (tuple2!2623 lt!71334 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71334 (minValue!2742 newMap!16)))))))

(assert (=> d!43123 (= lt!71991 (insertStrictlySorted!91 (toList!873 lt!71320) (_1!1321 (tuple2!2623 lt!71334 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71334 (minValue!2742 newMap!16)))))))

(assert (=> d!43123 (= (+!171 lt!71320 (tuple2!2623 lt!71334 (minValue!2742 newMap!16))) lt!71994)))

(declare-fun b!137486 () Bool)

(declare-fun res!65896 () Bool)

(assert (=> b!137486 (=> (not res!65896) (not e!89497))))

(assert (=> b!137486 (= res!65896 (= (getValueByKey!172 (toList!873 lt!71994) (_1!1321 (tuple2!2623 lt!71334 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71334 (minValue!2742 newMap!16))))))))

(declare-fun b!137487 () Bool)

(assert (=> b!137487 (= e!89497 (contains!904 (toList!873 lt!71994) (tuple2!2623 lt!71334 (minValue!2742 newMap!16))))))

(assert (= (and d!43123 res!65897) b!137486))

(assert (= (and b!137486 res!65896) b!137487))

(declare-fun m!164679 () Bool)

(assert (=> d!43123 m!164679))

(declare-fun m!164681 () Bool)

(assert (=> d!43123 m!164681))

(declare-fun m!164683 () Bool)

(assert (=> d!43123 m!164683))

(declare-fun m!164685 () Bool)

(assert (=> d!43123 m!164685))

(declare-fun m!164687 () Bool)

(assert (=> b!137486 m!164687))

(declare-fun m!164689 () Bool)

(assert (=> b!137487 m!164689))

(assert (=> b!136581 d!43123))

(declare-fun d!43125 () Bool)

(assert (=> d!43125 (= (apply!117 lt!71320 lt!71316) (get!1502 (getValueByKey!172 (toList!873 lt!71320) lt!71316)))))

(declare-fun bs!5788 () Bool)

(assert (= bs!5788 d!43125))

(declare-fun m!164691 () Bool)

(assert (=> bs!5788 m!164691))

(assert (=> bs!5788 m!164691))

(declare-fun m!164693 () Bool)

(assert (=> bs!5788 m!164693))

(assert (=> b!136581 d!43125))

(declare-fun d!43127 () Bool)

(declare-fun e!89498 () Bool)

(assert (=> d!43127 e!89498))

(declare-fun res!65899 () Bool)

(assert (=> d!43127 (=> (not res!65899) (not e!89498))))

(declare-fun lt!71998 () ListLongMap!1715)

(assert (=> d!43127 (= res!65899 (contains!901 lt!71998 (_1!1321 (tuple2!2623 lt!71330 (minValue!2742 newMap!16)))))))

(declare-fun lt!71995 () List!1741)

(assert (=> d!43127 (= lt!71998 (ListLongMap!1716 lt!71995))))

(declare-fun lt!71996 () Unit!4291)

(declare-fun lt!71997 () Unit!4291)

(assert (=> d!43127 (= lt!71996 lt!71997)))

(assert (=> d!43127 (= (getValueByKey!172 lt!71995 (_1!1321 (tuple2!2623 lt!71330 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71330 (minValue!2742 newMap!16)))))))

(assert (=> d!43127 (= lt!71997 (lemmaContainsTupThenGetReturnValue!89 lt!71995 (_1!1321 (tuple2!2623 lt!71330 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71330 (minValue!2742 newMap!16)))))))

(assert (=> d!43127 (= lt!71995 (insertStrictlySorted!91 (toList!873 lt!71331) (_1!1321 (tuple2!2623 lt!71330 (minValue!2742 newMap!16))) (_2!1321 (tuple2!2623 lt!71330 (minValue!2742 newMap!16)))))))

(assert (=> d!43127 (= (+!171 lt!71331 (tuple2!2623 lt!71330 (minValue!2742 newMap!16))) lt!71998)))

(declare-fun b!137488 () Bool)

(declare-fun res!65898 () Bool)

(assert (=> b!137488 (=> (not res!65898) (not e!89498))))

(assert (=> b!137488 (= res!65898 (= (getValueByKey!172 (toList!873 lt!71998) (_1!1321 (tuple2!2623 lt!71330 (minValue!2742 newMap!16)))) (Some!177 (_2!1321 (tuple2!2623 lt!71330 (minValue!2742 newMap!16))))))))

(declare-fun b!137489 () Bool)

(assert (=> b!137489 (= e!89498 (contains!904 (toList!873 lt!71998) (tuple2!2623 lt!71330 (minValue!2742 newMap!16))))))

(assert (= (and d!43127 res!65899) b!137488))

(assert (= (and b!137488 res!65898) b!137489))

(declare-fun m!164695 () Bool)

(assert (=> d!43127 m!164695))

(declare-fun m!164697 () Bool)

(assert (=> d!43127 m!164697))

(declare-fun m!164699 () Bool)

(assert (=> d!43127 m!164699))

(declare-fun m!164701 () Bool)

(assert (=> d!43127 m!164701))

(declare-fun m!164703 () Bool)

(assert (=> b!137488 m!164703))

(declare-fun m!164705 () Bool)

(assert (=> b!137489 m!164705))

(assert (=> b!136581 d!43127))

(declare-fun d!43129 () Bool)

(declare-fun e!89499 () Bool)

(assert (=> d!43129 e!89499))

(declare-fun res!65901 () Bool)

(assert (=> d!43129 (=> (not res!65901) (not e!89499))))

(declare-fun lt!72002 () ListLongMap!1715)

(assert (=> d!43129 (= res!65901 (contains!901 lt!72002 (_1!1321 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))))))

(declare-fun lt!71999 () List!1741)

(assert (=> d!43129 (= lt!72002 (ListLongMap!1716 lt!71999))))

(declare-fun lt!72000 () Unit!4291)

(declare-fun lt!72001 () Unit!4291)

(assert (=> d!43129 (= lt!72000 lt!72001)))

(assert (=> d!43129 (= (getValueByKey!172 lt!71999 (_1!1321 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))) (Some!177 (_2!1321 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))))))

(assert (=> d!43129 (= lt!72001 (lemmaContainsTupThenGetReturnValue!89 lt!71999 (_1!1321 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) (_2!1321 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))))))

(assert (=> d!43129 (= lt!71999 (insertStrictlySorted!91 (toList!873 lt!71328) (_1!1321 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) (_2!1321 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))))))

(assert (=> d!43129 (= (+!171 lt!71328 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))) lt!72002)))

(declare-fun b!137490 () Bool)

(declare-fun res!65900 () Bool)

(assert (=> b!137490 (=> (not res!65900) (not e!89499))))

(assert (=> b!137490 (= res!65900 (= (getValueByKey!172 (toList!873 lt!72002) (_1!1321 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16))))) (Some!177 (_2!1321 (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))))))))

(declare-fun b!137491 () Bool)

(assert (=> b!137491 (= e!89499 (contains!904 (toList!873 lt!72002) (tuple2!2623 lt!71321 (ite (and c!25512 c!25514) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2742 newMap!16)))))))

(assert (= (and d!43129 res!65901) b!137490))

(assert (= (and b!137490 res!65900) b!137491))

(declare-fun m!164707 () Bool)

(assert (=> d!43129 m!164707))

(declare-fun m!164709 () Bool)

(assert (=> d!43129 m!164709))

(declare-fun m!164711 () Bool)

(assert (=> d!43129 m!164711))

(declare-fun m!164713 () Bool)

(assert (=> d!43129 m!164713))

(declare-fun m!164715 () Bool)

(assert (=> b!137490 m!164715))

(declare-fun m!164717 () Bool)

(assert (=> b!137491 m!164717))

(assert (=> b!136581 d!43129))

(declare-fun d!43131 () Bool)

(assert (=> d!43131 (= (apply!117 (+!171 lt!71320 (tuple2!2623 lt!71334 (minValue!2742 newMap!16))) lt!71316) (apply!117 lt!71320 lt!71316))))

(declare-fun lt!72003 () Unit!4291)

(assert (=> d!43131 (= lt!72003 (choose!844 lt!71320 lt!71334 (minValue!2742 newMap!16) lt!71316))))

(declare-fun e!89500 () Bool)

(assert (=> d!43131 e!89500))

(declare-fun res!65902 () Bool)

(assert (=> d!43131 (=> (not res!65902) (not e!89500))))

(assert (=> d!43131 (= res!65902 (contains!901 lt!71320 lt!71316))))

(assert (=> d!43131 (= (addApplyDifferent!93 lt!71320 lt!71334 (minValue!2742 newMap!16) lt!71316) lt!72003)))

(declare-fun b!137492 () Bool)

(assert (=> b!137492 (= e!89500 (not (= lt!71316 lt!71334)))))

(assert (= (and d!43131 res!65902) b!137492))

(assert (=> d!43131 m!162833))

(assert (=> d!43131 m!162835))

(declare-fun m!164719 () Bool)

(assert (=> d!43131 m!164719))

(assert (=> d!43131 m!162833))

(declare-fun m!164721 () Bool)

(assert (=> d!43131 m!164721))

(assert (=> d!43131 m!162845))

(assert (=> b!136581 d!43131))

(assert (=> d!42607 d!42847))

(assert (=> b!136749 d!42877))

(assert (=> b!136749 d!42879))

(declare-fun d!43133 () Bool)

(declare-fun e!89501 () Bool)

(assert (=> d!43133 e!89501))

(declare-fun res!65904 () Bool)

(assert (=> d!43133 (=> (not res!65904) (not e!89501))))

(declare-fun lt!72007 () ListLongMap!1715)

(assert (=> d!43133 (= res!65904 (contains!901 lt!72007 (_1!1321 (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))))))

(declare-fun lt!72004 () List!1741)

(assert (=> d!43133 (= lt!72007 (ListLongMap!1716 lt!72004))))

(declare-fun lt!72005 () Unit!4291)

(declare-fun lt!72006 () Unit!4291)

(assert (=> d!43133 (= lt!72005 lt!72006)))

(assert (=> d!43133 (= (getValueByKey!172 lt!72004 (_1!1321 (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))) (Some!177 (_2!1321 (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))))))

(assert (=> d!43133 (= lt!72006 (lemmaContainsTupThenGetReturnValue!89 lt!72004 (_1!1321 (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))) (_2!1321 (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))))))

(assert (=> d!43133 (= lt!72004 (insertStrictlySorted!91 (toList!873 (ite c!25570 call!15058 (ite c!25571 call!15055 call!15053))) (_1!1321 (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))) (_2!1321 (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))))))

(assert (=> d!43133 (= (+!171 (ite c!25570 call!15058 (ite c!25571 call!15055 call!15053)) (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))) lt!72007)))

(declare-fun b!137493 () Bool)

(declare-fun res!65903 () Bool)

(assert (=> b!137493 (=> (not res!65903) (not e!89501))))

(assert (=> b!137493 (= res!65903 (= (getValueByKey!172 (toList!873 lt!72007) (_1!1321 (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16)))))) (Some!177 (_2!1321 (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))))

(declare-fun b!137494 () Bool)

(assert (=> b!137494 (= e!89501 (contains!904 (toList!873 lt!72007) (ite (or c!25570 c!25571) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!25512 (ite c!25514 (minValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2742 newMap!16))))))))

(assert (= (and d!43133 res!65904) b!137493))

(assert (= (and b!137493 res!65903) b!137494))

(declare-fun m!164723 () Bool)

(assert (=> d!43133 m!164723))

(declare-fun m!164725 () Bool)

(assert (=> d!43133 m!164725))

(declare-fun m!164727 () Bool)

(assert (=> d!43133 m!164727))

(declare-fun m!164729 () Bool)

(assert (=> d!43133 m!164729))

(declare-fun m!164731 () Bool)

(assert (=> b!137493 m!164731))

(declare-fun m!164733 () Bool)

(assert (=> b!137494 m!164733))

(assert (=> bm!15055 d!43133))

(declare-fun d!43135 () Bool)

(assert (=> d!43135 (contains!901 (getCurrentListMap!544 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!71257)))))

(assert (=> d!43135 true))

(declare-fun _$16!155 () Unit!4291)

(assert (=> d!43135 (= (choose!845 (_keys!4642 newMap!16) lt!71250 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (index!3306 lt!71257) (defaultEntry!2889 newMap!16)) _$16!155)))

(declare-fun bs!5789 () Bool)

(assert (= bs!5789 d!43135))

(assert (=> bs!5789 m!163227))

(assert (=> bs!5789 m!162705))

(assert (=> bs!5789 m!163227))

(assert (=> bs!5789 m!162705))

(assert (=> bs!5789 m!163229))

(assert (=> d!42665 d!43135))

(assert (=> d!42665 d!42847))

(declare-fun d!43137 () Bool)

(declare-fun e!89503 () Bool)

(assert (=> d!43137 e!89503))

(declare-fun res!65905 () Bool)

(assert (=> d!43137 (=> res!65905 e!89503)))

(declare-fun lt!72011 () Bool)

(assert (=> d!43137 (= res!65905 (not lt!72011))))

(declare-fun lt!72010 () Bool)

(assert (=> d!43137 (= lt!72011 lt!72010)))

(declare-fun lt!72008 () Unit!4291)

(declare-fun e!89502 () Unit!4291)

(assert (=> d!43137 (= lt!72008 e!89502)))

(declare-fun c!25806 () Bool)

(assert (=> d!43137 (= c!25806 lt!72010)))

(assert (=> d!43137 (= lt!72010 (containsKey!176 (toList!873 lt!71338) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!43137 (= (contains!901 lt!71338 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!72011)))

(declare-fun b!137495 () Bool)

(declare-fun lt!72009 () Unit!4291)

(assert (=> b!137495 (= e!89502 lt!72009)))

(assert (=> b!137495 (= lt!72009 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71338) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!137495 (isDefined!126 (getValueByKey!172 (toList!873 lt!71338) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137496 () Bool)

(declare-fun Unit!4345 () Unit!4291)

(assert (=> b!137496 (= e!89502 Unit!4345)))

(declare-fun b!137497 () Bool)

(assert (=> b!137497 (= e!89503 (isDefined!126 (getValueByKey!172 (toList!873 lt!71338) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!43137 c!25806) b!137495))

(assert (= (and d!43137 (not c!25806)) b!137496))

(assert (= (and d!43137 (not res!65905)) b!137497))

(declare-fun m!164735 () Bool)

(assert (=> d!43137 m!164735))

(declare-fun m!164737 () Bool)

(assert (=> b!137495 m!164737))

(assert (=> b!137495 m!162877))

(assert (=> b!137495 m!162877))

(declare-fun m!164739 () Bool)

(assert (=> b!137495 m!164739))

(assert (=> b!137497 m!162877))

(assert (=> b!137497 m!162877))

(assert (=> b!137497 m!164739))

(assert (=> d!42587 d!43137))

(declare-fun d!43139 () Bool)

(declare-fun c!25807 () Bool)

(assert (=> d!43139 (= c!25807 (and ((_ is Cons!1737) lt!71335) (= (_1!1321 (h!2343 lt!71335)) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!89504 () Option!178)

(assert (=> d!43139 (= (getValueByKey!172 lt!71335 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!89504)))

(declare-fun b!137500 () Bool)

(declare-fun e!89505 () Option!178)

(assert (=> b!137500 (= e!89505 (getValueByKey!172 (t!6241 lt!71335) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137498 () Bool)

(assert (=> b!137498 (= e!89504 (Some!177 (_2!1321 (h!2343 lt!71335))))))

(declare-fun b!137501 () Bool)

(assert (=> b!137501 (= e!89505 None!176)))

(declare-fun b!137499 () Bool)

(assert (=> b!137499 (= e!89504 e!89505)))

(declare-fun c!25808 () Bool)

(assert (=> b!137499 (= c!25808 (and ((_ is Cons!1737) lt!71335) (not (= (_1!1321 (h!2343 lt!71335)) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!43139 c!25807) b!137498))

(assert (= (and d!43139 (not c!25807)) b!137499))

(assert (= (and b!137499 c!25808) b!137500))

(assert (= (and b!137499 (not c!25808)) b!137501))

(declare-fun m!164741 () Bool)

(assert (=> b!137500 m!164741))

(assert (=> d!42587 d!43139))

(declare-fun d!43141 () Bool)

(assert (=> d!43141 (= (getValueByKey!172 lt!71335 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!72012 () Unit!4291)

(assert (=> d!43141 (= lt!72012 (choose!848 lt!71335 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!89506 () Bool)

(assert (=> d!43141 e!89506))

(declare-fun res!65906 () Bool)

(assert (=> d!43141 (=> (not res!65906) (not e!89506))))

(assert (=> d!43141 (= res!65906 (isStrictlySorted!318 lt!71335))))

(assert (=> d!43141 (= (lemmaContainsTupThenGetReturnValue!89 lt!71335 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!72012)))

(declare-fun b!137502 () Bool)

(declare-fun res!65907 () Bool)

(assert (=> b!137502 (=> (not res!65907) (not e!89506))))

(assert (=> b!137502 (= res!65907 (containsKey!176 lt!71335 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137503 () Bool)

(assert (=> b!137503 (= e!89506 (contains!904 lt!71335 (tuple2!2623 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!43141 res!65906) b!137502))

(assert (= (and b!137502 res!65907) b!137503))

(assert (=> d!43141 m!162871))

(declare-fun m!164743 () Bool)

(assert (=> d!43141 m!164743))

(declare-fun m!164745 () Bool)

(assert (=> d!43141 m!164745))

(declare-fun m!164747 () Bool)

(assert (=> b!137502 m!164747))

(declare-fun m!164749 () Bool)

(assert (=> b!137503 m!164749))

(assert (=> d!42587 d!43141))

(declare-fun b!137504 () Bool)

(declare-fun e!89510 () List!1741)

(declare-fun call!15147 () List!1741)

(assert (=> b!137504 (= e!89510 call!15147)))

(declare-fun lt!72013 () List!1741)

(declare-fun b!137505 () Bool)

(declare-fun e!89508 () Bool)

(assert (=> b!137505 (= e!89508 (contains!904 lt!72013 (tuple2!2623 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137506 () Bool)

(declare-fun e!89507 () List!1741)

(declare-fun call!15148 () List!1741)

(assert (=> b!137506 (= e!89507 call!15148)))

(declare-fun b!137507 () Bool)

(declare-fun e!89509 () List!1741)

(assert (=> b!137507 (= e!89509 e!89510)))

(declare-fun c!25809 () Bool)

(assert (=> b!137507 (= c!25809 (and ((_ is Cons!1737) (toList!873 call!14999)) (= (_1!1321 (h!2343 (toList!873 call!14999))) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!15143 () Bool)

(declare-fun e!89511 () List!1741)

(declare-fun call!15146 () List!1741)

(declare-fun c!25812 () Bool)

(assert (=> bm!15143 (= call!15146 ($colon$colon!92 e!89511 (ite c!25812 (h!2343 (toList!873 call!14999)) (tuple2!2623 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!25811 () Bool)

(assert (=> bm!15143 (= c!25811 c!25812)))

(declare-fun b!137508 () Bool)

(assert (=> b!137508 (= e!89507 call!15148)))

(declare-fun bm!15144 () Bool)

(assert (=> bm!15144 (= call!15148 call!15147)))

(declare-fun d!43143 () Bool)

(assert (=> d!43143 e!89508))

(declare-fun res!65909 () Bool)

(assert (=> d!43143 (=> (not res!65909) (not e!89508))))

(assert (=> d!43143 (= res!65909 (isStrictlySorted!318 lt!72013))))

(assert (=> d!43143 (= lt!72013 e!89509)))

(assert (=> d!43143 (= c!25812 (and ((_ is Cons!1737) (toList!873 call!14999)) (bvslt (_1!1321 (h!2343 (toList!873 call!14999))) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!43143 (isStrictlySorted!318 (toList!873 call!14999))))

(assert (=> d!43143 (= (insertStrictlySorted!91 (toList!873 call!14999) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!72013)))

(declare-fun c!25810 () Bool)

(declare-fun b!137509 () Bool)

(assert (=> b!137509 (= e!89511 (ite c!25809 (t!6241 (toList!873 call!14999)) (ite c!25810 (Cons!1737 (h!2343 (toList!873 call!14999)) (t!6241 (toList!873 call!14999))) Nil!1738)))))

(declare-fun b!137510 () Bool)

(declare-fun res!65908 () Bool)

(assert (=> b!137510 (=> (not res!65908) (not e!89508))))

(assert (=> b!137510 (= res!65908 (containsKey!176 lt!72013 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!137511 () Bool)

(assert (=> b!137511 (= c!25810 (and ((_ is Cons!1737) (toList!873 call!14999)) (bvsgt (_1!1321 (h!2343 (toList!873 call!14999))) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!137511 (= e!89510 e!89507)))

(declare-fun bm!15145 () Bool)

(assert (=> bm!15145 (= call!15147 call!15146)))

(declare-fun b!137512 () Bool)

(assert (=> b!137512 (= e!89509 call!15146)))

(declare-fun b!137513 () Bool)

(assert (=> b!137513 (= e!89511 (insertStrictlySorted!91 (t!6241 (toList!873 call!14999)) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!43143 c!25812) b!137512))

(assert (= (and d!43143 (not c!25812)) b!137507))

(assert (= (and b!137507 c!25809) b!137504))

(assert (= (and b!137507 (not c!25809)) b!137511))

(assert (= (and b!137511 c!25810) b!137506))

(assert (= (and b!137511 (not c!25810)) b!137508))

(assert (= (or b!137506 b!137508) bm!15144))

(assert (= (or b!137504 bm!15144) bm!15145))

(assert (= (or b!137512 bm!15145) bm!15143))

(assert (= (and bm!15143 c!25811) b!137513))

(assert (= (and bm!15143 (not c!25811)) b!137509))

(assert (= (and d!43143 res!65909) b!137510))

(assert (= (and b!137510 res!65908) b!137505))

(declare-fun m!164751 () Bool)

(assert (=> b!137513 m!164751))

(declare-fun m!164753 () Bool)

(assert (=> b!137510 m!164753))

(declare-fun m!164755 () Bool)

(assert (=> d!43143 m!164755))

(declare-fun m!164757 () Bool)

(assert (=> d!43143 m!164757))

(declare-fun m!164759 () Bool)

(assert (=> b!137505 m!164759))

(declare-fun m!164761 () Bool)

(assert (=> bm!15143 m!164761))

(assert (=> d!42587 d!43143))

(declare-fun d!43145 () Bool)

(declare-fun e!89512 () Bool)

(assert (=> d!43145 e!89512))

(declare-fun res!65911 () Bool)

(assert (=> d!43145 (=> (not res!65911) (not e!89512))))

(declare-fun lt!72017 () ListLongMap!1715)

(assert (=> d!43145 (= res!65911 (contains!901 lt!72017 (_1!1321 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!72014 () List!1741)

(assert (=> d!43145 (= lt!72017 (ListLongMap!1716 lt!72014))))

(declare-fun lt!72015 () Unit!4291)

(declare-fun lt!72016 () Unit!4291)

(assert (=> d!43145 (= lt!72015 lt!72016)))

(assert (=> d!43145 (= (getValueByKey!172 lt!72014 (_1!1321 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!43145 (= lt!72016 (lemmaContainsTupThenGetReturnValue!89 lt!72014 (_1!1321 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!43145 (= lt!72014 (insertStrictlySorted!91 (toList!873 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (_1!1321 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!43145 (= (+!171 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!72017)))

(declare-fun b!137514 () Bool)

(declare-fun res!65910 () Bool)

(assert (=> b!137514 (=> (not res!65910) (not e!89512))))

(assert (=> b!137514 (= res!65910 (= (getValueByKey!172 (toList!873 lt!72017) (_1!1321 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137515 () Bool)

(assert (=> b!137515 (= e!89512 (contains!904 (toList!873 lt!72017) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!43145 res!65911) b!137514))

(assert (= (and b!137514 res!65910) b!137515))

(declare-fun m!164763 () Bool)

(assert (=> d!43145 m!164763))

(declare-fun m!164765 () Bool)

(assert (=> d!43145 m!164765))

(declare-fun m!164767 () Bool)

(assert (=> d!43145 m!164767))

(declare-fun m!164769 () Bool)

(assert (=> d!43145 m!164769))

(declare-fun m!164771 () Bool)

(assert (=> b!137514 m!164771))

(declare-fun m!164773 () Bool)

(assert (=> b!137515 m!164773))

(assert (=> d!42575 d!43145))

(declare-fun d!43147 () Bool)

(assert (=> d!43147 (= (+!171 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71242 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(assert (=> d!43147 true))

(declare-fun _$7!119 () Unit!4291)

(assert (=> d!43147 (= (choose!839 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) lt!71242 (zeroValue!2742 newMap!16) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) (defaultEntry!2889 newMap!16)) _$7!119)))

(declare-fun bs!5790 () Bool)

(assert (= bs!5790 d!43147))

(assert (=> bs!5790 m!162585))

(assert (=> bs!5790 m!162585))

(assert (=> bs!5790 m!162793))

(assert (=> bs!5790 m!162543))

(assert (=> bs!5790 m!162795))

(assert (=> d!42575 d!43147))

(assert (=> d!42575 d!42589))

(declare-fun b!137516 () Bool)

(declare-fun e!89520 () Bool)

(declare-fun call!15154 () Bool)

(assert (=> b!137516 (= e!89520 (not call!15154))))

(declare-fun b!137517 () Bool)

(declare-fun res!65913 () Bool)

(declare-fun e!89516 () Bool)

(assert (=> b!137517 (=> (not res!65913) (not e!89516))))

(declare-fun e!89514 () Bool)

(assert (=> b!137517 (= res!65913 e!89514)))

(declare-fun res!65919 () Bool)

(assert (=> b!137517 (=> res!65919 e!89514)))

(declare-fun e!89518 () Bool)

(assert (=> b!137517 (= res!65919 (not e!89518))))

(declare-fun res!65916 () Bool)

(assert (=> b!137517 (=> (not res!65916) (not e!89518))))

(assert (=> b!137517 (= res!65916 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137518 () Bool)

(declare-fun e!89522 () Bool)

(declare-fun e!89519 () Bool)

(assert (=> b!137518 (= e!89522 e!89519)))

(declare-fun res!65920 () Bool)

(declare-fun call!15153 () Bool)

(assert (=> b!137518 (= res!65920 call!15153)))

(assert (=> b!137518 (=> (not res!65920) (not e!89519))))

(declare-fun bm!15146 () Bool)

(declare-fun call!15152 () ListLongMap!1715)

(declare-fun call!15155 () ListLongMap!1715)

(assert (=> bm!15146 (= call!15152 call!15155)))

(declare-fun b!137519 () Bool)

(declare-fun e!89525 () Bool)

(assert (=> b!137519 (= e!89514 e!89525)))

(declare-fun res!65918 () Bool)

(assert (=> b!137519 (=> (not res!65918) (not e!89525))))

(declare-fun lt!72028 () ListLongMap!1715)

(assert (=> b!137519 (= res!65918 (contains!901 lt!72028 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137519 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137520 () Bool)

(declare-fun e!89521 () ListLongMap!1715)

(declare-fun e!89517 () ListLongMap!1715)

(assert (=> b!137520 (= e!89521 e!89517)))

(declare-fun c!25814 () Bool)

(assert (=> b!137520 (= c!25814 (and (not (= (bvand lt!71242 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!71242 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!15147 () Bool)

(assert (=> bm!15147 (= call!15153 (contains!901 lt!72028 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137521 () Bool)

(assert (=> b!137521 (= e!89519 (= (apply!117 lt!72028 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!137522 () Bool)

(declare-fun e!89524 () ListLongMap!1715)

(declare-fun call!15150 () ListLongMap!1715)

(assert (=> b!137522 (= e!89524 call!15150)))

(declare-fun bm!15148 () Bool)

(declare-fun call!15151 () ListLongMap!1715)

(declare-fun call!15149 () ListLongMap!1715)

(assert (=> bm!15148 (= call!15151 call!15149)))

(declare-fun b!137523 () Bool)

(declare-fun e!89515 () Bool)

(assert (=> b!137523 (= e!89515 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137525 () Bool)

(assert (=> b!137525 (= e!89517 call!15151)))

(declare-fun b!137526 () Bool)

(assert (=> b!137526 (= e!89518 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137527 () Bool)

(assert (=> b!137527 (= e!89516 e!89520)))

(declare-fun c!25818 () Bool)

(assert (=> b!137527 (= c!25818 (not (= (bvand lt!71242 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137528 () Bool)

(declare-fun e!89523 () Unit!4291)

(declare-fun lt!72022 () Unit!4291)

(assert (=> b!137528 (= e!89523 lt!72022)))

(declare-fun lt!72033 () ListLongMap!1715)

(assert (=> b!137528 (= lt!72033 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71242 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72026 () (_ BitVec 64))

(assert (=> b!137528 (= lt!72026 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72023 () (_ BitVec 64))

(assert (=> b!137528 (= lt!72023 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!72024 () Unit!4291)

(assert (=> b!137528 (= lt!72024 (addStillContains!93 lt!72033 lt!72026 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!72023))))

(assert (=> b!137528 (contains!901 (+!171 lt!72033 (tuple2!2623 lt!72026 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!72023)))

(declare-fun lt!72038 () Unit!4291)

(assert (=> b!137528 (= lt!72038 lt!72024)))

(declare-fun lt!72025 () ListLongMap!1715)

(assert (=> b!137528 (= lt!72025 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71242 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72039 () (_ BitVec 64))

(assert (=> b!137528 (= lt!72039 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72021 () (_ BitVec 64))

(assert (=> b!137528 (= lt!72021 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!72018 () Unit!4291)

(assert (=> b!137528 (= lt!72018 (addApplyDifferent!93 lt!72025 lt!72039 (minValue!2742 newMap!16) lt!72021))))

(assert (=> b!137528 (= (apply!117 (+!171 lt!72025 (tuple2!2623 lt!72039 (minValue!2742 newMap!16))) lt!72021) (apply!117 lt!72025 lt!72021))))

(declare-fun lt!72034 () Unit!4291)

(assert (=> b!137528 (= lt!72034 lt!72018)))

(declare-fun lt!72031 () ListLongMap!1715)

(assert (=> b!137528 (= lt!72031 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71242 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72019 () (_ BitVec 64))

(assert (=> b!137528 (= lt!72019 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72020 () (_ BitVec 64))

(assert (=> b!137528 (= lt!72020 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!72027 () Unit!4291)

(assert (=> b!137528 (= lt!72027 (addApplyDifferent!93 lt!72031 lt!72019 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!72020))))

(assert (=> b!137528 (= (apply!117 (+!171 lt!72031 (tuple2!2623 lt!72019 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!72020) (apply!117 lt!72031 lt!72020))))

(declare-fun lt!72029 () Unit!4291)

(assert (=> b!137528 (= lt!72029 lt!72027)))

(declare-fun lt!72036 () ListLongMap!1715)

(assert (=> b!137528 (= lt!72036 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71242 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72035 () (_ BitVec 64))

(assert (=> b!137528 (= lt!72035 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72037 () (_ BitVec 64))

(assert (=> b!137528 (= lt!72037 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137528 (= lt!72022 (addApplyDifferent!93 lt!72036 lt!72035 (minValue!2742 newMap!16) lt!72037))))

(assert (=> b!137528 (= (apply!117 (+!171 lt!72036 (tuple2!2623 lt!72035 (minValue!2742 newMap!16))) lt!72037) (apply!117 lt!72036 lt!72037))))

(declare-fun b!137529 () Bool)

(assert (=> b!137529 (= e!89524 call!15151)))

(declare-fun b!137530 () Bool)

(assert (=> b!137530 (= e!89521 (+!171 call!15149 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))

(declare-fun bm!15149 () Bool)

(assert (=> bm!15149 (= call!15155 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71242 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun b!137531 () Bool)

(declare-fun Unit!4346 () Unit!4291)

(assert (=> b!137531 (= e!89523 Unit!4346)))

(declare-fun b!137532 () Bool)

(declare-fun res!65912 () Bool)

(assert (=> b!137532 (=> (not res!65912) (not e!89516))))

(assert (=> b!137532 (= res!65912 e!89522)))

(declare-fun c!25815 () Bool)

(assert (=> b!137532 (= c!25815 (not (= (bvand lt!71242 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!137524 () Bool)

(declare-fun e!89513 () Bool)

(assert (=> b!137524 (= e!89520 e!89513)))

(declare-fun res!65915 () Bool)

(assert (=> b!137524 (= res!65915 call!15154)))

(assert (=> b!137524 (=> (not res!65915) (not e!89513))))

(declare-fun d!43149 () Bool)

(assert (=> d!43149 e!89516))

(declare-fun res!65914 () Bool)

(assert (=> d!43149 (=> (not res!65914) (not e!89516))))

(assert (=> d!43149 (= res!65914 (or (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))))

(declare-fun lt!72030 () ListLongMap!1715)

(assert (=> d!43149 (= lt!72028 lt!72030)))

(declare-fun lt!72032 () Unit!4291)

(assert (=> d!43149 (= lt!72032 e!89523)))

(declare-fun c!25816 () Bool)

(assert (=> d!43149 (= c!25816 e!89515)))

(declare-fun res!65917 () Bool)

(assert (=> d!43149 (=> (not res!65917) (not e!89515))))

(assert (=> d!43149 (= res!65917 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!43149 (= lt!72030 e!89521)))

(declare-fun c!25813 () Bool)

(assert (=> d!43149 (= c!25813 (and (not (= (bvand lt!71242 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!71242 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!43149 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!43149 (= (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) lt!71242 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!72028)))

(declare-fun b!137533 () Bool)

(assert (=> b!137533 (= e!89513 (= (apply!117 lt!72028 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2742 newMap!16)))))

(declare-fun bm!15150 () Bool)

(assert (=> bm!15150 (= call!15150 call!15152)))

(declare-fun b!137534 () Bool)

(assert (=> b!137534 (= e!89522 (not call!15153))))

(declare-fun bm!15151 () Bool)

(assert (=> bm!15151 (= call!15154 (contains!901 lt!72028 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137535 () Bool)

(assert (=> b!137535 (= e!89525 (= (apply!117 lt!72028 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (_values!2872 newMap!16)) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!137535 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (_values!2872 newMap!16))))))

(assert (=> b!137535 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun bm!15152 () Bool)

(assert (=> bm!15152 (= call!15149 (+!171 (ite c!25813 call!15155 (ite c!25814 call!15152 call!15150)) (ite (or c!25813 c!25814) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(declare-fun b!137536 () Bool)

(declare-fun c!25817 () Bool)

(assert (=> b!137536 (= c!25817 (and (not (= (bvand lt!71242 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!71242 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!137536 (= e!89517 e!89524)))

(assert (= (and d!43149 c!25813) b!137530))

(assert (= (and d!43149 (not c!25813)) b!137520))

(assert (= (and b!137520 c!25814) b!137525))

(assert (= (and b!137520 (not c!25814)) b!137536))

(assert (= (and b!137536 c!25817) b!137529))

(assert (= (and b!137536 (not c!25817)) b!137522))

(assert (= (or b!137529 b!137522) bm!15150))

(assert (= (or b!137525 bm!15150) bm!15146))

(assert (= (or b!137525 b!137529) bm!15148))

(assert (= (or b!137530 bm!15146) bm!15149))

(assert (= (or b!137530 bm!15148) bm!15152))

(assert (= (and d!43149 res!65917) b!137523))

(assert (= (and d!43149 c!25816) b!137528))

(assert (= (and d!43149 (not c!25816)) b!137531))

(assert (= (and d!43149 res!65914) b!137517))

(assert (= (and b!137517 res!65916) b!137526))

(assert (= (and b!137517 (not res!65919)) b!137519))

(assert (= (and b!137519 res!65918) b!137535))

(assert (= (and b!137517 res!65913) b!137532))

(assert (= (and b!137532 c!25815) b!137518))

(assert (= (and b!137532 (not c!25815)) b!137534))

(assert (= (and b!137518 res!65920) b!137521))

(assert (= (or b!137518 b!137534) bm!15147))

(assert (= (and b!137532 res!65912) b!137527))

(assert (= (and b!137527 c!25818) b!137524))

(assert (= (and b!137527 (not c!25818)) b!137516))

(assert (= (and b!137524 res!65915) b!137533))

(assert (= (or b!137524 b!137516) bm!15151))

(declare-fun b_lambda!6171 () Bool)

(assert (=> (not b_lambda!6171) (not b!137535)))

(assert (=> b!137535 t!6249))

(declare-fun b_and!8545 () Bool)

(assert (= b_and!8541 (and (=> t!6249 result!4059) b_and!8545)))

(assert (=> b!137535 t!6251))

(declare-fun b_and!8547 () Bool)

(assert (= b_and!8543 (and (=> t!6251 result!4061) b_and!8547)))

(declare-fun m!164775 () Bool)

(assert (=> bm!15147 m!164775))

(assert (=> b!137535 m!162811))

(assert (=> b!137535 m!162731))

(declare-fun m!164777 () Bool)

(assert (=> b!137535 m!164777))

(assert (=> b!137535 m!162731))

(assert (=> b!137535 m!162815))

(assert (=> b!137535 m!162811))

(assert (=> b!137535 m!162815))

(assert (=> b!137535 m!162817))

(declare-fun m!164779 () Bool)

(assert (=> b!137530 m!164779))

(declare-fun m!164781 () Bool)

(assert (=> bm!15152 m!164781))

(assert (=> bm!15149 m!162543))

(declare-fun m!164783 () Bool)

(assert (=> bm!15149 m!164783))

(declare-fun m!164785 () Bool)

(assert (=> b!137528 m!164785))

(declare-fun m!164787 () Bool)

(assert (=> b!137528 m!164787))

(assert (=> b!137528 m!162543))

(declare-fun m!164789 () Bool)

(assert (=> b!137528 m!164789))

(declare-fun m!164791 () Bool)

(assert (=> b!137528 m!164791))

(declare-fun m!164793 () Bool)

(assert (=> b!137528 m!164793))

(declare-fun m!164795 () Bool)

(assert (=> b!137528 m!164795))

(declare-fun m!164797 () Bool)

(assert (=> b!137528 m!164797))

(assert (=> b!137528 m!162543))

(declare-fun m!164799 () Bool)

(assert (=> b!137528 m!164799))

(declare-fun m!164801 () Bool)

(assert (=> b!137528 m!164801))

(declare-fun m!164803 () Bool)

(assert (=> b!137528 m!164803))

(assert (=> b!137528 m!164785))

(assert (=> b!137528 m!164793))

(assert (=> b!137528 m!162731))

(declare-fun m!164805 () Bool)

(assert (=> b!137528 m!164805))

(assert (=> b!137528 m!162543))

(assert (=> b!137528 m!164783))

(assert (=> b!137528 m!164797))

(declare-fun m!164807 () Bool)

(assert (=> b!137528 m!164807))

(declare-fun m!164809 () Bool)

(assert (=> b!137528 m!164809))

(declare-fun m!164811 () Bool)

(assert (=> b!137528 m!164811))

(assert (=> b!137528 m!164809))

(declare-fun m!164813 () Bool)

(assert (=> b!137528 m!164813))

(declare-fun m!164815 () Bool)

(assert (=> bm!15151 m!164815))

(assert (=> d!43149 m!162751))

(assert (=> b!137526 m!162731))

(assert (=> b!137526 m!162731))

(assert (=> b!137526 m!162735))

(declare-fun m!164817 () Bool)

(assert (=> b!137533 m!164817))

(assert (=> b!137523 m!162731))

(assert (=> b!137523 m!162731))

(assert (=> b!137523 m!162735))

(declare-fun m!164819 () Bool)

(assert (=> b!137521 m!164819))

(assert (=> b!137519 m!162731))

(assert (=> b!137519 m!162731))

(declare-fun m!164821 () Bool)

(assert (=> b!137519 m!164821))

(assert (=> d!42575 d!43149))

(assert (=> d!42575 d!42847))

(declare-fun b!137555 () Bool)

(declare-fun lt!72045 () SeekEntryResult!286)

(assert (=> b!137555 (and (bvsge (index!3307 lt!72045) #b00000000000000000000000000000000) (bvslt (index!3307 lt!72045) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun res!65929 () Bool)

(assert (=> b!137555 (= res!65929 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3307 lt!72045)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun e!89540 () Bool)

(assert (=> b!137555 (=> res!65929 e!89540)))

(declare-fun e!89536 () Bool)

(assert (=> b!137555 (= e!89536 e!89540)))

(declare-fun e!89538 () SeekEntryResult!286)

(declare-fun b!137556 () Bool)

(assert (=> b!137556 (= e!89538 (Intermediate!286 false (toIndex!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (mask!7203 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!137557 () Bool)

(assert (=> b!137557 (= e!89538 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (mask!7203 newMap!16)) #b00000000000000000000000000000000 (mask!7203 newMap!16)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(declare-fun b!137558 () Bool)

(declare-fun e!89537 () Bool)

(assert (=> b!137558 (= e!89537 e!89536)))

(declare-fun res!65928 () Bool)

(assert (=> b!137558 (= res!65928 (and ((_ is Intermediate!286) lt!72045) (not (undefined!1098 lt!72045)) (bvslt (x!15814 lt!72045) #b01111111111111111111111111111110) (bvsge (x!15814 lt!72045) #b00000000000000000000000000000000) (bvsge (x!15814 lt!72045) #b00000000000000000000000000000000)))))

(assert (=> b!137558 (=> (not res!65928) (not e!89536))))

(declare-fun d!43151 () Bool)

(assert (=> d!43151 e!89537))

(declare-fun c!25827 () Bool)

(assert (=> d!43151 (= c!25827 (and ((_ is Intermediate!286) lt!72045) (undefined!1098 lt!72045)))))

(declare-fun e!89539 () SeekEntryResult!286)

(assert (=> d!43151 (= lt!72045 e!89539)))

(declare-fun c!25825 () Bool)

(assert (=> d!43151 (= c!25825 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!72044 () (_ BitVec 64))

(assert (=> d!43151 (= lt!72044 (select (arr!2272 (_keys!4642 newMap!16)) (toIndex!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (mask!7203 newMap!16))))))

(assert (=> d!43151 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!43151 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (mask!7203 newMap!16)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)) lt!72045)))

(declare-fun b!137559 () Bool)

(assert (=> b!137559 (= e!89537 (bvsge (x!15814 lt!72045) #b01111111111111111111111111111110))))

(declare-fun b!137560 () Bool)

(assert (=> b!137560 (and (bvsge (index!3307 lt!72045) #b00000000000000000000000000000000) (bvslt (index!3307 lt!72045) (size!2542 (_keys!4642 newMap!16))))))

(assert (=> b!137560 (= e!89540 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3307 lt!72045)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137561 () Bool)

(assert (=> b!137561 (and (bvsge (index!3307 lt!72045) #b00000000000000000000000000000000) (bvslt (index!3307 lt!72045) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun res!65927 () Bool)

(assert (=> b!137561 (= res!65927 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3307 lt!72045)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137561 (=> res!65927 e!89540)))

(declare-fun b!137562 () Bool)

(assert (=> b!137562 (= e!89539 e!89538)))

(declare-fun c!25826 () Bool)

(assert (=> b!137562 (= c!25826 (or (= lt!72044 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (= (bvadd lt!72044 lt!72044) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137563 () Bool)

(assert (=> b!137563 (= e!89539 (Intermediate!286 true (toIndex!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (mask!7203 newMap!16)) #b00000000000000000000000000000000))))

(assert (= (and d!43151 c!25825) b!137563))

(assert (= (and d!43151 (not c!25825)) b!137562))

(assert (= (and b!137562 c!25826) b!137556))

(assert (= (and b!137562 (not c!25826)) b!137557))

(assert (= (and d!43151 c!25827) b!137559))

(assert (= (and d!43151 (not c!25827)) b!137558))

(assert (= (and b!137558 res!65928) b!137555))

(assert (= (and b!137555 (not res!65929)) b!137561))

(assert (= (and b!137561 (not res!65927)) b!137560))

(declare-fun m!164823 () Bool)

(assert (=> b!137561 m!164823))

(assert (=> b!137560 m!164823))

(assert (=> d!43151 m!162741))

(declare-fun m!164825 () Bool)

(assert (=> d!43151 m!164825))

(assert (=> d!43151 m!162751))

(assert (=> b!137557 m!162741))

(declare-fun m!164827 () Bool)

(assert (=> b!137557 m!164827))

(assert (=> b!137557 m!164827))

(assert (=> b!137557 m!162523))

(declare-fun m!164829 () Bool)

(assert (=> b!137557 m!164829))

(assert (=> b!137555 m!164823))

(assert (=> d!42563 d!43151))

(declare-fun d!43153 () Bool)

(declare-fun lt!72051 () (_ BitVec 32))

(declare-fun lt!72050 () (_ BitVec 32))

(assert (=> d!43153 (= lt!72051 (bvmul (bvxor lt!72050 (bvlshr lt!72050 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!43153 (= lt!72050 ((_ extract 31 0) (bvand (bvxor (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvlshr (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!43153 (and (bvsge (mask!7203 newMap!16) #b00000000000000000000000000000000) (let ((res!65930 (let ((h!2346 ((_ extract 31 0) (bvand (bvxor (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvlshr (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!15918 (bvmul (bvxor h!2346 (bvlshr h!2346 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!15918 (bvlshr x!15918 #b00000000000000000000000000001101)) (mask!7203 newMap!16)))))) (and (bvslt res!65930 (bvadd (mask!7203 newMap!16) #b00000000000000000000000000000001)) (bvsge res!65930 #b00000000000000000000000000000000))))))

(assert (=> d!43153 (= (toIndex!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (mask!7203 newMap!16)) (bvand (bvxor lt!72051 (bvlshr lt!72051 #b00000000000000000000000000001101)) (mask!7203 newMap!16)))))

(assert (=> d!42563 d!43153))

(assert (=> d!42563 d!42847))

(declare-fun d!43155 () Bool)

(declare-fun res!65931 () Bool)

(declare-fun e!89541 () Bool)

(assert (=> d!43155 (=> res!65931 e!89541)))

(assert (=> d!43155 (= res!65931 (and ((_ is Cons!1737) (toList!873 call!15021)) (= (_1!1321 (h!2343 (toList!873 call!15021))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(assert (=> d!43155 (= (containsKey!176 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) e!89541)))

(declare-fun b!137564 () Bool)

(declare-fun e!89542 () Bool)

(assert (=> b!137564 (= e!89541 e!89542)))

(declare-fun res!65932 () Bool)

(assert (=> b!137564 (=> (not res!65932) (not e!89542))))

(assert (=> b!137564 (= res!65932 (and (or (not ((_ is Cons!1737) (toList!873 call!15021))) (bvsle (_1!1321 (h!2343 (toList!873 call!15021))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))) ((_ is Cons!1737) (toList!873 call!15021)) (bvslt (_1!1321 (h!2343 (toList!873 call!15021))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355))))))

(declare-fun b!137565 () Bool)

(assert (=> b!137565 (= e!89542 (containsKey!176 (t!6241 (toList!873 call!15021)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (= (and d!43155 (not res!65931)) b!137564))

(assert (= (and b!137564 res!65932) b!137565))

(assert (=> b!137565 m!162523))

(declare-fun m!164831 () Bool)

(assert (=> b!137565 m!164831))

(assert (=> d!42669 d!43155))

(declare-fun d!43157 () Bool)

(declare-fun e!89543 () Bool)

(assert (=> d!43157 e!89543))

(declare-fun res!65934 () Bool)

(assert (=> d!43157 (=> (not res!65934) (not e!89543))))

(declare-fun lt!72055 () ListLongMap!1715)

(assert (=> d!43157 (= res!65934 (contains!901 lt!72055 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!72052 () List!1741)

(assert (=> d!43157 (= lt!72055 (ListLongMap!1716 lt!72052))))

(declare-fun lt!72053 () Unit!4291)

(declare-fun lt!72054 () Unit!4291)

(assert (=> d!43157 (= lt!72053 lt!72054)))

(assert (=> d!43157 (= (getValueByKey!172 lt!72052 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!43157 (= lt!72054 (lemmaContainsTupThenGetReturnValue!89 lt!72052 (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!43157 (= lt!72052 (insertStrictlySorted!91 (toList!873 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!43157 (= (+!171 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!72055)))

(declare-fun b!137566 () Bool)

(declare-fun res!65933 () Bool)

(assert (=> b!137566 (=> (not res!65933) (not e!89543))))

(assert (=> b!137566 (= res!65933 (= (getValueByKey!172 (toList!873 lt!72055) (_1!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!177 (_2!1321 (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!137567 () Bool)

(assert (=> b!137567 (= e!89543 (contains!904 (toList!873 lt!72055) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!43157 res!65934) b!137566))

(assert (= (and b!137566 res!65933) b!137567))

(declare-fun m!164833 () Bool)

(assert (=> d!43157 m!164833))

(declare-fun m!164835 () Bool)

(assert (=> d!43157 m!164835))

(declare-fun m!164837 () Bool)

(assert (=> d!43157 m!164837))

(declare-fun m!164839 () Bool)

(assert (=> d!43157 m!164839))

(declare-fun m!164841 () Bool)

(assert (=> b!137566 m!164841))

(declare-fun m!164843 () Bool)

(assert (=> b!137567 m!164843))

(assert (=> d!42671 d!43157))

(declare-fun b!137577 () Bool)

(declare-fun res!65944 () Bool)

(declare-fun e!89548 () Bool)

(assert (=> b!137577 (=> (not res!65944) (not e!89548))))

(assert (=> b!137577 (= res!65944 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun d!43159 () Bool)

(declare-fun e!89549 () Bool)

(assert (=> d!43159 e!89549))

(declare-fun res!65946 () Bool)

(assert (=> d!43159 (=> (not res!65946) (not e!89549))))

(assert (=> d!43159 (= res!65946 (and (bvsge (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000000) (bvslt (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (size!2542 (_keys!4642 newMap!16)))))))

(declare-fun lt!72058 () Unit!4291)

(declare-fun choose!1 (array!4806 (_ BitVec 32) (_ BitVec 64)) Unit!4291)

(assert (=> d!43159 (= lt!72058 (choose!1 (_keys!4642 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!43159 e!89548))

(declare-fun res!65943 () Bool)

(assert (=> d!43159 (=> (not res!65943) (not e!89548))))

(assert (=> d!43159 (= res!65943 (and (bvsge (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000000) (bvslt (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (size!2542 (_keys!4642 newMap!16)))))))

(assert (=> d!43159 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4642 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) lt!72058)))

(declare-fun b!137576 () Bool)

(declare-fun res!65945 () Bool)

(assert (=> b!137576 (=> (not res!65945) (not e!89548))))

(assert (=> b!137576 (= res!65945 (not (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257))))))))

(declare-fun b!137578 () Bool)

(assert (=> b!137578 (= e!89548 (bvslt (size!2542 (_keys!4642 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!137579 () Bool)

(assert (=> b!137579 (= e!89549 (= (arrayCountValidKeys!0 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4642 newMap!16) #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) #b00000000000000000000000000000001)))))

(assert (= (and d!43159 res!65943) b!137576))

(assert (= (and b!137576 res!65945) b!137577))

(assert (= (and b!137577 res!65944) b!137578))

(assert (= (and d!43159 res!65946) b!137579))

(assert (=> b!137577 m!162523))

(declare-fun m!164845 () Bool)

(assert (=> b!137577 m!164845))

(assert (=> d!43159 m!162523))

(declare-fun m!164847 () Bool)

(assert (=> d!43159 m!164847))

(declare-fun m!164849 () Bool)

(assert (=> b!137576 m!164849))

(assert (=> b!137576 m!164849))

(declare-fun m!164851 () Bool)

(assert (=> b!137576 m!164851))

(assert (=> b!137579 m!163261))

(assert (=> b!137579 m!163283))

(assert (=> b!137579 m!162721))

(assert (=> d!42671 d!43159))

(assert (=> d!42671 d!42589))

(assert (=> d!42671 d!42603))

(declare-fun b!137580 () Bool)

(declare-fun e!89550 () Bool)

(assert (=> b!137580 (= e!89550 (contains!903 lt!71562 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) lt!71566)))))

(declare-fun b!137581 () Bool)

(declare-fun e!89553 () Bool)

(declare-fun e!89551 () Bool)

(assert (=> b!137581 (= e!89553 e!89551)))

(declare-fun res!65949 () Bool)

(assert (=> b!137581 (=> (not res!65949) (not e!89551))))

(assert (=> b!137581 (= res!65949 (not e!89550))))

(declare-fun res!65947 () Bool)

(assert (=> b!137581 (=> (not res!65947) (not e!89550))))

(assert (=> b!137581 (= res!65947 (validKeyInArray!0 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) lt!71566)))))

(declare-fun b!137582 () Bool)

(declare-fun e!89552 () Bool)

(declare-fun call!15156 () Bool)

(assert (=> b!137582 (= e!89552 call!15156)))

(declare-fun b!137583 () Bool)

(assert (=> b!137583 (= e!89552 call!15156)))

(declare-fun b!137584 () Bool)

(assert (=> b!137584 (= e!89551 e!89552)))

(declare-fun c!25828 () Bool)

(assert (=> b!137584 (= c!25828 (validKeyInArray!0 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) lt!71566)))))

(declare-fun d!43161 () Bool)

(declare-fun res!65948 () Bool)

(assert (=> d!43161 (=> res!65948 e!89553)))

(assert (=> d!43161 (= res!65948 (bvsge lt!71566 (size!2542 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))))))

(assert (=> d!43161 (= (arrayNoDuplicates!0 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) lt!71566 lt!71562) e!89553)))

(declare-fun bm!15153 () Bool)

(assert (=> bm!15153 (= call!15156 (arrayNoDuplicates!0 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (bvadd lt!71566 #b00000000000000000000000000000001) (ite c!25828 (Cons!1739 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) lt!71566) lt!71562) lt!71562)))))

(assert (= (and d!43161 (not res!65948)) b!137581))

(assert (= (and b!137581 res!65947) b!137580))

(assert (= (and b!137581 res!65949) b!137584))

(assert (= (and b!137584 c!25828) b!137583))

(assert (= (and b!137584 (not c!25828)) b!137582))

(assert (= (or b!137583 b!137582) bm!15153))

(declare-fun m!164853 () Bool)

(assert (=> b!137580 m!164853))

(assert (=> b!137580 m!164853))

(declare-fun m!164855 () Bool)

(assert (=> b!137580 m!164855))

(assert (=> b!137581 m!164853))

(assert (=> b!137581 m!164853))

(declare-fun m!164857 () Bool)

(assert (=> b!137581 m!164857))

(assert (=> b!137584 m!164853))

(assert (=> b!137584 m!164853))

(assert (=> b!137584 m!164857))

(assert (=> bm!15153 m!164853))

(declare-fun m!164859 () Bool)

(assert (=> bm!15153 m!164859))

(assert (=> d!42671 d!43161))

(assert (=> d!42671 d!42573))

(declare-fun d!43163 () Bool)

(declare-fun e!89556 () Bool)

(assert (=> d!43163 e!89556))

(declare-fun res!65952 () Bool)

(assert (=> d!43163 (=> (not res!65952) (not e!89556))))

(assert (=> d!43163 (= res!65952 (and (bvsge (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000000) (bvslt (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (size!2542 (_keys!4642 newMap!16)))))))

(declare-fun lt!72061 () Unit!4291)

(declare-fun choose!41 (array!4806 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1743) Unit!4291)

(assert (=> d!43163 (= lt!72061 (choose!41 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) lt!71566 lt!71562))))

(assert (=> d!43163 (bvslt (size!2542 (_keys!4642 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!43163 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4642 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) lt!71566 lt!71562) lt!72061)))

(declare-fun b!137587 () Bool)

(assert (=> b!137587 (= e!89556 (arrayNoDuplicates!0 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) lt!71566 lt!71562))))

(assert (= (and d!43163 res!65952) b!137587))

(assert (=> d!43163 m!162523))

(declare-fun m!164861 () Bool)

(assert (=> d!43163 m!164861))

(assert (=> b!137587 m!163261))

(assert (=> b!137587 m!163257))

(assert (=> d!42671 d!43163))

(declare-fun b!137588 () Bool)

(declare-fun e!89559 () Bool)

(declare-fun call!15157 () Bool)

(assert (=> b!137588 (= e!89559 call!15157)))

(declare-fun bm!15154 () Bool)

(assert (=> bm!15154 (= call!15157 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (mask!7203 newMap!16)))))

(declare-fun d!43165 () Bool)

(declare-fun res!65953 () Bool)

(declare-fun e!89558 () Bool)

(assert (=> d!43165 (=> res!65953 e!89558)))

(assert (=> d!43165 (= res!65953 (bvsge #b00000000000000000000000000000000 (size!2542 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))))))

(assert (=> d!43165 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (mask!7203 newMap!16)) e!89558)))

(declare-fun b!137589 () Bool)

(declare-fun e!89557 () Bool)

(assert (=> b!137589 (= e!89558 e!89557)))

(declare-fun c!25829 () Bool)

(assert (=> b!137589 (= c!25829 (validKeyInArray!0 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!137590 () Bool)

(assert (=> b!137590 (= e!89557 call!15157)))

(declare-fun b!137591 () Bool)

(assert (=> b!137591 (= e!89557 e!89559)))

(declare-fun lt!72062 () (_ BitVec 64))

(assert (=> b!137591 (= lt!72062 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!72063 () Unit!4291)

(assert (=> b!137591 (= lt!72063 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) lt!72062 #b00000000000000000000000000000000))))

(assert (=> b!137591 (arrayContainsKey!0 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) lt!72062 #b00000000000000000000000000000000)))

(declare-fun lt!72064 () Unit!4291)

(assert (=> b!137591 (= lt!72064 lt!72063)))

(declare-fun res!65954 () Bool)

(assert (=> b!137591 (= res!65954 (= (seekEntryOrOpen!0 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000) (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (mask!7203 newMap!16)) (Found!286 #b00000000000000000000000000000000)))))

(assert (=> b!137591 (=> (not res!65954) (not e!89559))))

(assert (= (and d!43165 (not res!65953)) b!137589))

(assert (= (and b!137589 c!25829) b!137591))

(assert (= (and b!137589 (not c!25829)) b!137590))

(assert (= (and b!137591 res!65954) b!137588))

(assert (= (or b!137588 b!137590) bm!15154))

(declare-fun m!164863 () Bool)

(assert (=> bm!15154 m!164863))

(declare-fun m!164865 () Bool)

(assert (=> b!137589 m!164865))

(assert (=> b!137589 m!164865))

(declare-fun m!164867 () Bool)

(assert (=> b!137589 m!164867))

(assert (=> b!137591 m!164865))

(declare-fun m!164869 () Bool)

(assert (=> b!137591 m!164869))

(declare-fun m!164871 () Bool)

(assert (=> b!137591 m!164871))

(assert (=> b!137591 m!164865))

(declare-fun m!164873 () Bool)

(assert (=> b!137591 m!164873))

(assert (=> d!42671 d!43165))

(declare-fun b!137592 () Bool)

(declare-fun e!89567 () Bool)

(declare-fun call!15163 () Bool)

(assert (=> b!137592 (= e!89567 (not call!15163))))

(declare-fun b!137593 () Bool)

(declare-fun res!65956 () Bool)

(declare-fun e!89563 () Bool)

(assert (=> b!137593 (=> (not res!65956) (not e!89563))))

(declare-fun e!89561 () Bool)

(assert (=> b!137593 (= res!65956 e!89561)))

(declare-fun res!65962 () Bool)

(assert (=> b!137593 (=> res!65962 e!89561)))

(declare-fun e!89565 () Bool)

(assert (=> b!137593 (= res!65962 (not e!89565))))

(declare-fun res!65959 () Bool)

(assert (=> b!137593 (=> (not res!65959) (not e!89565))))

(assert (=> b!137593 (= res!65959 (bvslt #b00000000000000000000000000000000 (size!2542 lt!71571)))))

(declare-fun b!137594 () Bool)

(declare-fun e!89569 () Bool)

(declare-fun e!89566 () Bool)

(assert (=> b!137594 (= e!89569 e!89566)))

(declare-fun res!65963 () Bool)

(declare-fun call!15162 () Bool)

(assert (=> b!137594 (= res!65963 call!15162)))

(assert (=> b!137594 (=> (not res!65963) (not e!89566))))

(declare-fun bm!15155 () Bool)

(declare-fun call!15161 () ListLongMap!1715)

(declare-fun call!15164 () ListLongMap!1715)

(assert (=> bm!15155 (= call!15161 call!15164)))

(declare-fun b!137595 () Bool)

(declare-fun e!89572 () Bool)

(assert (=> b!137595 (= e!89561 e!89572)))

(declare-fun res!65961 () Bool)

(assert (=> b!137595 (=> (not res!65961) (not e!89572))))

(declare-fun lt!72075 () ListLongMap!1715)

(assert (=> b!137595 (= res!65961 (contains!901 lt!72075 (select (arr!2272 lt!71571) #b00000000000000000000000000000000)))))

(assert (=> b!137595 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 lt!71571)))))

(declare-fun b!137596 () Bool)

(declare-fun e!89568 () ListLongMap!1715)

(declare-fun e!89564 () ListLongMap!1715)

(assert (=> b!137596 (= e!89568 e!89564)))

(declare-fun c!25831 () Bool)

(assert (=> b!137596 (= c!25831 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!15156 () Bool)

(assert (=> bm!15156 (= call!15162 (contains!901 lt!72075 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137597 () Bool)

(assert (=> b!137597 (= e!89566 (= (apply!117 lt!72075 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2742 newMap!16)))))

(declare-fun b!137598 () Bool)

(declare-fun e!89571 () ListLongMap!1715)

(declare-fun call!15159 () ListLongMap!1715)

(assert (=> b!137598 (= e!89571 call!15159)))

(declare-fun bm!15157 () Bool)

(declare-fun call!15160 () ListLongMap!1715)

(declare-fun call!15158 () ListLongMap!1715)

(assert (=> bm!15157 (= call!15160 call!15158)))

(declare-fun b!137599 () Bool)

(declare-fun e!89562 () Bool)

(assert (=> b!137599 (= e!89562 (validKeyInArray!0 (select (arr!2272 lt!71571) #b00000000000000000000000000000000)))))

(declare-fun b!137601 () Bool)

(assert (=> b!137601 (= e!89564 call!15160)))

(declare-fun b!137602 () Bool)

(assert (=> b!137602 (= e!89565 (validKeyInArray!0 (select (arr!2272 lt!71571) #b00000000000000000000000000000000)))))

(declare-fun b!137603 () Bool)

(assert (=> b!137603 (= e!89563 e!89567)))

(declare-fun c!25835 () Bool)

(assert (=> b!137603 (= c!25835 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137604 () Bool)

(declare-fun e!89570 () Unit!4291)

(declare-fun lt!72069 () Unit!4291)

(assert (=> b!137604 (= e!89570 lt!72069)))

(declare-fun lt!72080 () ListLongMap!1715)

(assert (=> b!137604 (= lt!72080 (getCurrentListMapNoExtraKeys!138 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72073 () (_ BitVec 64))

(assert (=> b!137604 (= lt!72073 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72070 () (_ BitVec 64))

(assert (=> b!137604 (= lt!72070 (select (arr!2272 lt!71571) #b00000000000000000000000000000000))))

(declare-fun lt!72071 () Unit!4291)

(assert (=> b!137604 (= lt!72071 (addStillContains!93 lt!72080 lt!72073 (zeroValue!2742 newMap!16) lt!72070))))

(assert (=> b!137604 (contains!901 (+!171 lt!72080 (tuple2!2623 lt!72073 (zeroValue!2742 newMap!16))) lt!72070)))

(declare-fun lt!72085 () Unit!4291)

(assert (=> b!137604 (= lt!72085 lt!72071)))

(declare-fun lt!72072 () ListLongMap!1715)

(assert (=> b!137604 (= lt!72072 (getCurrentListMapNoExtraKeys!138 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72086 () (_ BitVec 64))

(assert (=> b!137604 (= lt!72086 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72068 () (_ BitVec 64))

(assert (=> b!137604 (= lt!72068 (select (arr!2272 lt!71571) #b00000000000000000000000000000000))))

(declare-fun lt!72065 () Unit!4291)

(assert (=> b!137604 (= lt!72065 (addApplyDifferent!93 lt!72072 lt!72086 (minValue!2742 newMap!16) lt!72068))))

(assert (=> b!137604 (= (apply!117 (+!171 lt!72072 (tuple2!2623 lt!72086 (minValue!2742 newMap!16))) lt!72068) (apply!117 lt!72072 lt!72068))))

(declare-fun lt!72081 () Unit!4291)

(assert (=> b!137604 (= lt!72081 lt!72065)))

(declare-fun lt!72078 () ListLongMap!1715)

(assert (=> b!137604 (= lt!72078 (getCurrentListMapNoExtraKeys!138 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72066 () (_ BitVec 64))

(assert (=> b!137604 (= lt!72066 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72067 () (_ BitVec 64))

(assert (=> b!137604 (= lt!72067 (select (arr!2272 lt!71571) #b00000000000000000000000000000000))))

(declare-fun lt!72074 () Unit!4291)

(assert (=> b!137604 (= lt!72074 (addApplyDifferent!93 lt!72078 lt!72066 (zeroValue!2742 newMap!16) lt!72067))))

(assert (=> b!137604 (= (apply!117 (+!171 lt!72078 (tuple2!2623 lt!72066 (zeroValue!2742 newMap!16))) lt!72067) (apply!117 lt!72078 lt!72067))))

(declare-fun lt!72076 () Unit!4291)

(assert (=> b!137604 (= lt!72076 lt!72074)))

(declare-fun lt!72083 () ListLongMap!1715)

(assert (=> b!137604 (= lt!72083 (getCurrentListMapNoExtraKeys!138 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72082 () (_ BitVec 64))

(assert (=> b!137604 (= lt!72082 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72084 () (_ BitVec 64))

(assert (=> b!137604 (= lt!72084 (select (arr!2272 lt!71571) #b00000000000000000000000000000000))))

(assert (=> b!137604 (= lt!72069 (addApplyDifferent!93 lt!72083 lt!72082 (minValue!2742 newMap!16) lt!72084))))

(assert (=> b!137604 (= (apply!117 (+!171 lt!72083 (tuple2!2623 lt!72082 (minValue!2742 newMap!16))) lt!72084) (apply!117 lt!72083 lt!72084))))

(declare-fun b!137605 () Bool)

(assert (=> b!137605 (= e!89571 call!15160)))

(declare-fun b!137606 () Bool)

(assert (=> b!137606 (= e!89568 (+!171 call!15158 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))

(declare-fun bm!15158 () Bool)

(assert (=> bm!15158 (= call!15164 (getCurrentListMapNoExtraKeys!138 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun b!137607 () Bool)

(declare-fun Unit!4347 () Unit!4291)

(assert (=> b!137607 (= e!89570 Unit!4347)))

(declare-fun b!137608 () Bool)

(declare-fun res!65955 () Bool)

(assert (=> b!137608 (=> (not res!65955) (not e!89563))))

(assert (=> b!137608 (= res!65955 e!89569)))

(declare-fun c!25832 () Bool)

(assert (=> b!137608 (= c!25832 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!137600 () Bool)

(declare-fun e!89560 () Bool)

(assert (=> b!137600 (= e!89567 e!89560)))

(declare-fun res!65958 () Bool)

(assert (=> b!137600 (= res!65958 call!15163)))

(assert (=> b!137600 (=> (not res!65958) (not e!89560))))

(declare-fun d!43167 () Bool)

(assert (=> d!43167 e!89563))

(declare-fun res!65957 () Bool)

(assert (=> d!43167 (=> (not res!65957) (not e!89563))))

(assert (=> d!43167 (= res!65957 (or (bvsge #b00000000000000000000000000000000 (size!2542 lt!71571)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 lt!71571)))))))

(declare-fun lt!72077 () ListLongMap!1715)

(assert (=> d!43167 (= lt!72075 lt!72077)))

(declare-fun lt!72079 () Unit!4291)

(assert (=> d!43167 (= lt!72079 e!89570)))

(declare-fun c!25833 () Bool)

(assert (=> d!43167 (= c!25833 e!89562)))

(declare-fun res!65960 () Bool)

(assert (=> d!43167 (=> (not res!65960) (not e!89562))))

(assert (=> d!43167 (= res!65960 (bvslt #b00000000000000000000000000000000 (size!2542 lt!71571)))))

(assert (=> d!43167 (= lt!72077 e!89568)))

(declare-fun c!25830 () Bool)

(assert (=> d!43167 (= c!25830 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!43167 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!43167 (= (getCurrentListMap!544 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!72075)))

(declare-fun b!137609 () Bool)

(assert (=> b!137609 (= e!89560 (= (apply!117 lt!72075 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2742 newMap!16)))))

(declare-fun bm!15159 () Bool)

(assert (=> bm!15159 (= call!15159 call!15161)))

(declare-fun b!137610 () Bool)

(assert (=> b!137610 (= e!89569 (not call!15162))))

(declare-fun bm!15160 () Bool)

(assert (=> bm!15160 (= call!15163 (contains!901 lt!72075 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137611 () Bool)

(assert (=> b!137611 (= e!89572 (= (apply!117 lt!72075 (select (arr!2272 lt!71571) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 lt!71561) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!137611 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 lt!71561)))))

(assert (=> b!137611 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 lt!71571)))))

(declare-fun bm!15161 () Bool)

(assert (=> bm!15161 (= call!15158 (+!171 (ite c!25830 call!15164 (ite c!25831 call!15161 call!15159)) (ite (or c!25830 c!25831) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(declare-fun b!137612 () Bool)

(declare-fun c!25834 () Bool)

(assert (=> b!137612 (= c!25834 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!137612 (= e!89564 e!89571)))

(assert (= (and d!43167 c!25830) b!137606))

(assert (= (and d!43167 (not c!25830)) b!137596))

(assert (= (and b!137596 c!25831) b!137601))

(assert (= (and b!137596 (not c!25831)) b!137612))

(assert (= (and b!137612 c!25834) b!137605))

(assert (= (and b!137612 (not c!25834)) b!137598))

(assert (= (or b!137605 b!137598) bm!15159))

(assert (= (or b!137601 bm!15159) bm!15155))

(assert (= (or b!137601 b!137605) bm!15157))

(assert (= (or b!137606 bm!15155) bm!15158))

(assert (= (or b!137606 bm!15157) bm!15161))

(assert (= (and d!43167 res!65960) b!137599))

(assert (= (and d!43167 c!25833) b!137604))

(assert (= (and d!43167 (not c!25833)) b!137607))

(assert (= (and d!43167 res!65957) b!137593))

(assert (= (and b!137593 res!65959) b!137602))

(assert (= (and b!137593 (not res!65962)) b!137595))

(assert (= (and b!137595 res!65961) b!137611))

(assert (= (and b!137593 res!65956) b!137608))

(assert (= (and b!137608 c!25832) b!137594))

(assert (= (and b!137608 (not c!25832)) b!137610))

(assert (= (and b!137594 res!65963) b!137597))

(assert (= (or b!137594 b!137610) bm!15156))

(assert (= (and b!137608 res!65955) b!137603))

(assert (= (and b!137603 c!25835) b!137600))

(assert (= (and b!137603 (not c!25835)) b!137592))

(assert (= (and b!137600 res!65958) b!137609))

(assert (= (or b!137600 b!137592) bm!15160))

(declare-fun b_lambda!6173 () Bool)

(assert (=> (not b_lambda!6173) (not b!137611)))

(assert (=> b!137611 t!6249))

(declare-fun b_and!8549 () Bool)

(assert (= b_and!8545 (and (=> t!6249 result!4059) b_and!8549)))

(assert (=> b!137611 t!6251))

(declare-fun b_and!8551 () Bool)

(assert (= b_and!8547 (and (=> t!6251 result!4061) b_and!8551)))

(declare-fun m!164875 () Bool)

(assert (=> bm!15156 m!164875))

(declare-fun m!164877 () Bool)

(assert (=> b!137611 m!164877))

(declare-fun m!164879 () Bool)

(assert (=> b!137611 m!164879))

(declare-fun m!164881 () Bool)

(assert (=> b!137611 m!164881))

(assert (=> b!137611 m!164879))

(assert (=> b!137611 m!162815))

(assert (=> b!137611 m!164877))

(assert (=> b!137611 m!162815))

(declare-fun m!164883 () Bool)

(assert (=> b!137611 m!164883))

(declare-fun m!164885 () Bool)

(assert (=> b!137606 m!164885))

(declare-fun m!164887 () Bool)

(assert (=> bm!15161 m!164887))

(declare-fun m!164889 () Bool)

(assert (=> bm!15158 m!164889))

(declare-fun m!164891 () Bool)

(assert (=> b!137604 m!164891))

(declare-fun m!164893 () Bool)

(assert (=> b!137604 m!164893))

(declare-fun m!164895 () Bool)

(assert (=> b!137604 m!164895))

(declare-fun m!164897 () Bool)

(assert (=> b!137604 m!164897))

(declare-fun m!164899 () Bool)

(assert (=> b!137604 m!164899))

(declare-fun m!164901 () Bool)

(assert (=> b!137604 m!164901))

(declare-fun m!164903 () Bool)

(assert (=> b!137604 m!164903))

(declare-fun m!164905 () Bool)

(assert (=> b!137604 m!164905))

(declare-fun m!164907 () Bool)

(assert (=> b!137604 m!164907))

(declare-fun m!164909 () Bool)

(assert (=> b!137604 m!164909))

(assert (=> b!137604 m!164891))

(assert (=> b!137604 m!164899))

(assert (=> b!137604 m!164879))

(declare-fun m!164911 () Bool)

(assert (=> b!137604 m!164911))

(assert (=> b!137604 m!164889))

(assert (=> b!137604 m!164903))

(declare-fun m!164913 () Bool)

(assert (=> b!137604 m!164913))

(declare-fun m!164915 () Bool)

(assert (=> b!137604 m!164915))

(declare-fun m!164917 () Bool)

(assert (=> b!137604 m!164917))

(assert (=> b!137604 m!164915))

(declare-fun m!164919 () Bool)

(assert (=> b!137604 m!164919))

(declare-fun m!164921 () Bool)

(assert (=> bm!15160 m!164921))

(assert (=> d!43167 m!162751))

(assert (=> b!137602 m!164879))

(assert (=> b!137602 m!164879))

(declare-fun m!164923 () Bool)

(assert (=> b!137602 m!164923))

(declare-fun m!164925 () Bool)

(assert (=> b!137609 m!164925))

(assert (=> b!137599 m!164879))

(assert (=> b!137599 m!164879))

(assert (=> b!137599 m!164923))

(declare-fun m!164927 () Bool)

(assert (=> b!137597 m!164927))

(assert (=> b!137595 m!164879))

(assert (=> b!137595 m!164879))

(declare-fun m!164929 () Bool)

(assert (=> b!137595 m!164929))

(assert (=> d!42671 d!43167))

(declare-fun d!43169 () Bool)

(declare-fun e!89574 () Bool)

(assert (=> d!43169 e!89574))

(declare-fun res!65964 () Bool)

(assert (=> d!43169 (=> res!65964 e!89574)))

(declare-fun lt!72090 () Bool)

(assert (=> d!43169 (= res!65964 (not lt!72090))))

(declare-fun lt!72089 () Bool)

(assert (=> d!43169 (= lt!72090 lt!72089)))

(declare-fun lt!72087 () Unit!4291)

(declare-fun e!89573 () Unit!4291)

(assert (=> d!43169 (= lt!72087 e!89573)))

(declare-fun c!25836 () Bool)

(assert (=> d!43169 (= c!25836 lt!72089)))

(assert (=> d!43169 (= lt!72089 (containsKey!176 (toList!873 (getCurrentListMap!544 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)))))))

(assert (=> d!43169 (= (contains!901 (getCurrentListMap!544 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (select (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)))) lt!72090)))

(declare-fun b!137613 () Bool)

(declare-fun lt!72088 () Unit!4291)

(assert (=> b!137613 (= e!89573 lt!72088)))

(assert (=> b!137613 (= lt!72088 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 (getCurrentListMap!544 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)))))))

(assert (=> b!137613 (isDefined!126 (getValueByKey!172 (toList!873 (getCurrentListMap!544 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)))))))

(declare-fun b!137614 () Bool)

(declare-fun Unit!4348 () Unit!4291)

(assert (=> b!137614 (= e!89573 Unit!4348)))

(declare-fun b!137615 () Bool)

(assert (=> b!137615 (= e!89574 (isDefined!126 (getValueByKey!172 (toList!873 (getCurrentListMap!544 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))) (select (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257))))))))

(assert (= (and d!43169 c!25836) b!137613))

(assert (= (and d!43169 (not c!25836)) b!137614))

(assert (= (and d!43169 (not res!65964)) b!137615))

(assert (=> d!43169 m!163253))

(declare-fun m!164931 () Bool)

(assert (=> d!43169 m!164931))

(assert (=> b!137613 m!163253))

(declare-fun m!164933 () Bool)

(assert (=> b!137613 m!164933))

(assert (=> b!137613 m!163253))

(declare-fun m!164935 () Bool)

(assert (=> b!137613 m!164935))

(assert (=> b!137613 m!164935))

(declare-fun m!164937 () Bool)

(assert (=> b!137613 m!164937))

(assert (=> b!137615 m!163253))

(assert (=> b!137615 m!164935))

(assert (=> b!137615 m!164935))

(assert (=> b!137615 m!164937))

(assert (=> d!42671 d!43169))

(declare-fun d!43171 () Bool)

(declare-fun e!89577 () Bool)

(assert (=> d!43171 e!89577))

(declare-fun res!65967 () Bool)

(assert (=> d!43171 (=> (not res!65967) (not e!89577))))

(assert (=> d!43171 (= res!65967 (and (bvsge (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000000) (bvslt (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (size!2542 (_keys!4642 newMap!16)))))))

(declare-fun lt!72093 () Unit!4291)

(declare-fun choose!102 ((_ BitVec 64) array!4806 (_ BitVec 32) (_ BitVec 32)) Unit!4291)

(assert (=> d!43171 (= lt!72093 (choose!102 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (mask!7203 newMap!16)))))

(assert (=> d!43171 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!43171 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (mask!7203 newMap!16)) lt!72093)))

(declare-fun b!137618 () Bool)

(assert (=> b!137618 (= e!89577 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (mask!7203 newMap!16)))))

(assert (= (and d!43171 res!65967) b!137618))

(assert (=> d!43171 m!162523))

(declare-fun m!164939 () Bool)

(assert (=> d!43171 m!164939))

(assert (=> d!43171 m!162751))

(assert (=> b!137618 m!163261))

(assert (=> b!137618 m!163279))

(assert (=> d!42671 d!43171))

(declare-fun d!43173 () Bool)

(declare-fun e!89580 () Bool)

(assert (=> d!43173 e!89580))

(declare-fun res!65970 () Bool)

(assert (=> d!43173 (=> (not res!65970) (not e!89580))))

(assert (=> d!43173 (= res!65970 (and (bvsge (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000000) (bvslt (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (size!2542 (_keys!4642 newMap!16))) (bvslt (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (size!2543 (_values!2872 newMap!16)))))))

(declare-fun lt!72096 () Unit!4291)

(declare-fun choose!851 (array!4806 array!4808 (_ BitVec 32) (_ BitVec 32) V!3499 V!3499 (_ BitVec 32) (_ BitVec 64) V!3499 Int) Unit!4291)

(assert (=> d!43173 (= lt!72096 (choose!851 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2889 newMap!16)))))

(assert (=> d!43173 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!43173 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!43 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2889 newMap!16)) lt!72096)))

(declare-fun b!137621 () Bool)

(assert (=> b!137621 (= e!89580 (= (+!171 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!544 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16))))))

(assert (= (and d!43173 res!65970) b!137621))

(assert (=> d!43173 m!162523))

(assert (=> d!43173 m!162543))

(declare-fun m!164941 () Bool)

(assert (=> d!43173 m!164941))

(assert (=> d!43173 m!162751))

(assert (=> b!137621 m!163281))

(assert (=> b!137621 m!163271))

(assert (=> b!137621 m!163261))

(assert (=> b!137621 m!162585))

(assert (=> b!137621 m!162585))

(assert (=> b!137621 m!163233))

(assert (=> d!42671 d!43173))

(declare-fun b!137622 () Bool)

(declare-fun e!89582 () (_ BitVec 32))

(declare-fun call!15165 () (_ BitVec 32))

(assert (=> b!137622 (= e!89582 (bvadd #b00000000000000000000000000000001 call!15165))))

(declare-fun bm!15162 () Bool)

(assert (=> bm!15162 (= call!15165 (arrayCountValidKeys!0 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137623 () Bool)

(declare-fun e!89581 () (_ BitVec 32))

(assert (=> b!137623 (= e!89581 #b00000000000000000000000000000000)))

(declare-fun lt!72097 () (_ BitVec 32))

(declare-fun d!43175 () Bool)

(assert (=> d!43175 (and (bvsge lt!72097 #b00000000000000000000000000000000) (bvsle lt!72097 (bvsub (size!2542 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!43175 (= lt!72097 e!89581)))

(declare-fun c!25838 () Bool)

(assert (=> d!43175 (= c!25838 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!43175 (and (bvsle #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2542 (_keys!4642 newMap!16)) (size!2542 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))))))

(assert (=> d!43175 (= (arrayCountValidKeys!0 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) lt!72097)))

(declare-fun b!137624 () Bool)

(assert (=> b!137624 (= e!89581 e!89582)))

(declare-fun c!25837 () Bool)

(assert (=> b!137624 (= c!25837 (validKeyInArray!0 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!137625 () Bool)

(assert (=> b!137625 (= e!89582 call!15165)))

(assert (= (and d!43175 c!25838) b!137623))

(assert (= (and d!43175 (not c!25838)) b!137624))

(assert (= (and b!137624 c!25837) b!137622))

(assert (= (and b!137624 (not c!25837)) b!137625))

(assert (= (or b!137622 b!137625) bm!15162))

(declare-fun m!164943 () Bool)

(assert (=> bm!15162 m!164943))

(assert (=> b!137624 m!164865))

(assert (=> b!137624 m!164865))

(assert (=> b!137624 m!164867))

(assert (=> d!42671 d!43175))

(declare-fun b!137626 () Bool)

(declare-fun e!89584 () (_ BitVec 32))

(declare-fun call!15166 () (_ BitVec 32))

(assert (=> b!137626 (= e!89584 (bvadd #b00000000000000000000000000000001 call!15166))))

(declare-fun bm!15163 () Bool)

(assert (=> bm!15163 (= call!15166 (arrayCountValidKeys!0 lt!71567 (bvadd (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000001) (bvadd (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000001)))))

(declare-fun b!137627 () Bool)

(declare-fun e!89583 () (_ BitVec 32))

(assert (=> b!137627 (= e!89583 #b00000000000000000000000000000000)))

(declare-fun d!43177 () Bool)

(declare-fun lt!72098 () (_ BitVec 32))

(assert (=> d!43177 (and (bvsge lt!72098 #b00000000000000000000000000000000) (bvsle lt!72098 (bvsub (size!2542 lt!71567) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)))))))

(assert (=> d!43177 (= lt!72098 e!89583)))

(declare-fun c!25840 () Bool)

(assert (=> d!43177 (= c!25840 (bvsge (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (bvadd (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000001)))))

(assert (=> d!43177 (and (bvsle (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (bvadd (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000001)) (bvsge (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000001) (size!2542 lt!71567)))))

(assert (=> d!43177 (= (arrayCountValidKeys!0 lt!71567 (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (bvadd (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000001)) lt!72098)))

(declare-fun b!137628 () Bool)

(assert (=> b!137628 (= e!89583 e!89584)))

(declare-fun c!25839 () Bool)

(assert (=> b!137628 (= c!25839 (validKeyInArray!0 (select (arr!2272 lt!71567) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)))))))

(declare-fun b!137629 () Bool)

(assert (=> b!137629 (= e!89584 call!15166)))

(assert (= (and d!43177 c!25840) b!137627))

(assert (= (and d!43177 (not c!25840)) b!137628))

(assert (= (and b!137628 c!25839) b!137626))

(assert (= (and b!137628 (not c!25839)) b!137629))

(assert (= (or b!137626 b!137629) bm!15163))

(declare-fun m!164945 () Bool)

(assert (=> bm!15163 m!164945))

(declare-fun m!164947 () Bool)

(assert (=> b!137628 m!164947))

(assert (=> b!137628 m!164947))

(declare-fun m!164949 () Bool)

(assert (=> b!137628 m!164949))

(assert (=> d!42671 d!43177))

(declare-fun d!43179 () Bool)

(declare-fun res!65971 () Bool)

(declare-fun e!89585 () Bool)

(assert (=> d!43179 (=> res!65971 e!89585)))

(assert (=> d!43179 (= res!65971 (= (select (arr!2272 lt!71555) #b00000000000000000000000000000000) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!43179 (= (arrayContainsKey!0 lt!71555 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000) e!89585)))

(declare-fun b!137630 () Bool)

(declare-fun e!89586 () Bool)

(assert (=> b!137630 (= e!89585 e!89586)))

(declare-fun res!65972 () Bool)

(assert (=> b!137630 (=> (not res!65972) (not e!89586))))

(assert (=> b!137630 (= res!65972 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 lt!71555)))))

(declare-fun b!137631 () Bool)

(assert (=> b!137631 (= e!89586 (arrayContainsKey!0 lt!71555 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!43179 (not res!65971)) b!137630))

(assert (= (and b!137630 res!65972) b!137631))

(declare-fun m!164951 () Bool)

(assert (=> d!43179 m!164951))

(assert (=> b!137631 m!162523))

(declare-fun m!164953 () Bool)

(assert (=> b!137631 m!164953))

(assert (=> d!42671 d!43179))

(assert (=> d!42671 d!42955))

(declare-fun d!43181 () Bool)

(assert (=> d!43181 (= (arrayCountValidKeys!0 lt!71567 (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (bvadd (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!72101 () Unit!4291)

(declare-fun choose!2 (array!4806 (_ BitVec 32)) Unit!4291)

(assert (=> d!43181 (= lt!72101 (choose!2 lt!71567 (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257))))))

(declare-fun e!89589 () Bool)

(assert (=> d!43181 e!89589))

(declare-fun res!65977 () Bool)

(assert (=> d!43181 (=> (not res!65977) (not e!89589))))

(assert (=> d!43181 (= res!65977 (and (bvsge (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000000) (bvslt (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (size!2542 lt!71567))))))

(assert (=> d!43181 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!71567 (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257))) lt!72101)))

(declare-fun b!137636 () Bool)

(declare-fun res!65978 () Bool)

(assert (=> b!137636 (=> (not res!65978) (not e!89589))))

(assert (=> b!137636 (= res!65978 (validKeyInArray!0 (select (arr!2272 lt!71567) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)))))))

(declare-fun b!137637 () Bool)

(assert (=> b!137637 (= e!89589 (bvslt (size!2542 lt!71567) #b01111111111111111111111111111111))))

(assert (= (and d!43181 res!65977) b!137636))

(assert (= (and b!137636 res!65978) b!137637))

(assert (=> d!43181 m!163287))

(declare-fun m!164955 () Bool)

(assert (=> d!43181 m!164955))

(assert (=> b!137636 m!164947))

(assert (=> b!137636 m!164947))

(assert (=> b!137636 m!164949))

(assert (=> d!42671 d!43181))

(assert (=> d!42671 d!42559))

(declare-fun b!137638 () Bool)

(declare-fun e!89597 () Bool)

(declare-fun call!15172 () Bool)

(assert (=> b!137638 (= e!89597 (not call!15172))))

(declare-fun b!137639 () Bool)

(declare-fun res!65980 () Bool)

(declare-fun e!89593 () Bool)

(assert (=> b!137639 (=> (not res!65980) (not e!89593))))

(declare-fun e!89591 () Bool)

(assert (=> b!137639 (= res!65980 e!89591)))

(declare-fun res!65986 () Bool)

(assert (=> b!137639 (=> res!65986 e!89591)))

(declare-fun e!89595 () Bool)

(assert (=> b!137639 (= res!65986 (not e!89595))))

(declare-fun res!65983 () Bool)

(assert (=> b!137639 (=> (not res!65983) (not e!89595))))

(assert (=> b!137639 (= res!65983 (bvslt #b00000000000000000000000000000000 (size!2542 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))))))

(declare-fun b!137640 () Bool)

(declare-fun e!89599 () Bool)

(declare-fun e!89596 () Bool)

(assert (=> b!137640 (= e!89599 e!89596)))

(declare-fun res!65987 () Bool)

(declare-fun call!15171 () Bool)

(assert (=> b!137640 (= res!65987 call!15171)))

(assert (=> b!137640 (=> (not res!65987) (not e!89596))))

(declare-fun bm!15164 () Bool)

(declare-fun call!15170 () ListLongMap!1715)

(declare-fun call!15173 () ListLongMap!1715)

(assert (=> bm!15164 (= call!15170 call!15173)))

(declare-fun b!137641 () Bool)

(declare-fun e!89602 () Bool)

(assert (=> b!137641 (= e!89591 e!89602)))

(declare-fun res!65985 () Bool)

(assert (=> b!137641 (=> (not res!65985) (not e!89602))))

(declare-fun lt!72112 () ListLongMap!1715)

(assert (=> b!137641 (= res!65985 (contains!901 lt!72112 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!137641 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))))))

(declare-fun b!137642 () Bool)

(declare-fun e!89598 () ListLongMap!1715)

(declare-fun e!89594 () ListLongMap!1715)

(assert (=> b!137642 (= e!89598 e!89594)))

(declare-fun c!25842 () Bool)

(assert (=> b!137642 (= c!25842 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!15165 () Bool)

(assert (=> bm!15165 (= call!15171 (contains!901 lt!72112 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137643 () Bool)

(assert (=> b!137643 (= e!89596 (= (apply!117 lt!72112 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2742 newMap!16)))))

(declare-fun b!137644 () Bool)

(declare-fun e!89601 () ListLongMap!1715)

(declare-fun call!15168 () ListLongMap!1715)

(assert (=> b!137644 (= e!89601 call!15168)))

(declare-fun bm!15166 () Bool)

(declare-fun call!15169 () ListLongMap!1715)

(declare-fun call!15167 () ListLongMap!1715)

(assert (=> bm!15166 (= call!15169 call!15167)))

(declare-fun b!137645 () Bool)

(declare-fun e!89592 () Bool)

(assert (=> b!137645 (= e!89592 (validKeyInArray!0 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!137647 () Bool)

(assert (=> b!137647 (= e!89594 call!15169)))

(declare-fun b!137648 () Bool)

(assert (=> b!137648 (= e!89595 (validKeyInArray!0 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!137649 () Bool)

(assert (=> b!137649 (= e!89593 e!89597)))

(declare-fun c!25846 () Bool)

(assert (=> b!137649 (= c!25846 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137650 () Bool)

(declare-fun e!89600 () Unit!4291)

(declare-fun lt!72106 () Unit!4291)

(assert (=> b!137650 (= e!89600 lt!72106)))

(declare-fun lt!72117 () ListLongMap!1715)

(assert (=> b!137650 (= lt!72117 (getCurrentListMapNoExtraKeys!138 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72110 () (_ BitVec 64))

(assert (=> b!137650 (= lt!72110 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72107 () (_ BitVec 64))

(assert (=> b!137650 (= lt!72107 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!72108 () Unit!4291)

(assert (=> b!137650 (= lt!72108 (addStillContains!93 lt!72117 lt!72110 (zeroValue!2742 newMap!16) lt!72107))))

(assert (=> b!137650 (contains!901 (+!171 lt!72117 (tuple2!2623 lt!72110 (zeroValue!2742 newMap!16))) lt!72107)))

(declare-fun lt!72122 () Unit!4291)

(assert (=> b!137650 (= lt!72122 lt!72108)))

(declare-fun lt!72109 () ListLongMap!1715)

(assert (=> b!137650 (= lt!72109 (getCurrentListMapNoExtraKeys!138 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72123 () (_ BitVec 64))

(assert (=> b!137650 (= lt!72123 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72105 () (_ BitVec 64))

(assert (=> b!137650 (= lt!72105 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!72102 () Unit!4291)

(assert (=> b!137650 (= lt!72102 (addApplyDifferent!93 lt!72109 lt!72123 (minValue!2742 newMap!16) lt!72105))))

(assert (=> b!137650 (= (apply!117 (+!171 lt!72109 (tuple2!2623 lt!72123 (minValue!2742 newMap!16))) lt!72105) (apply!117 lt!72109 lt!72105))))

(declare-fun lt!72118 () Unit!4291)

(assert (=> b!137650 (= lt!72118 lt!72102)))

(declare-fun lt!72115 () ListLongMap!1715)

(assert (=> b!137650 (= lt!72115 (getCurrentListMapNoExtraKeys!138 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72103 () (_ BitVec 64))

(assert (=> b!137650 (= lt!72103 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72104 () (_ BitVec 64))

(assert (=> b!137650 (= lt!72104 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!72111 () Unit!4291)

(assert (=> b!137650 (= lt!72111 (addApplyDifferent!93 lt!72115 lt!72103 (zeroValue!2742 newMap!16) lt!72104))))

(assert (=> b!137650 (= (apply!117 (+!171 lt!72115 (tuple2!2623 lt!72103 (zeroValue!2742 newMap!16))) lt!72104) (apply!117 lt!72115 lt!72104))))

(declare-fun lt!72113 () Unit!4291)

(assert (=> b!137650 (= lt!72113 lt!72111)))

(declare-fun lt!72120 () ListLongMap!1715)

(assert (=> b!137650 (= lt!72120 (getCurrentListMapNoExtraKeys!138 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72119 () (_ BitVec 64))

(assert (=> b!137650 (= lt!72119 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72121 () (_ BitVec 64))

(assert (=> b!137650 (= lt!72121 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!137650 (= lt!72106 (addApplyDifferent!93 lt!72120 lt!72119 (minValue!2742 newMap!16) lt!72121))))

(assert (=> b!137650 (= (apply!117 (+!171 lt!72120 (tuple2!2623 lt!72119 (minValue!2742 newMap!16))) lt!72121) (apply!117 lt!72120 lt!72121))))

(declare-fun b!137651 () Bool)

(assert (=> b!137651 (= e!89601 call!15169)))

(declare-fun b!137652 () Bool)

(assert (=> b!137652 (= e!89598 (+!171 call!15167 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))

(declare-fun bm!15167 () Bool)

(assert (=> bm!15167 (= call!15173 (getCurrentListMapNoExtraKeys!138 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun b!137653 () Bool)

(declare-fun Unit!4349 () Unit!4291)

(assert (=> b!137653 (= e!89600 Unit!4349)))

(declare-fun b!137654 () Bool)

(declare-fun res!65979 () Bool)

(assert (=> b!137654 (=> (not res!65979) (not e!89593))))

(assert (=> b!137654 (= res!65979 e!89599)))

(declare-fun c!25843 () Bool)

(assert (=> b!137654 (= c!25843 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!137646 () Bool)

(declare-fun e!89590 () Bool)

(assert (=> b!137646 (= e!89597 e!89590)))

(declare-fun res!65982 () Bool)

(assert (=> b!137646 (= res!65982 call!15172)))

(assert (=> b!137646 (=> (not res!65982) (not e!89590))))

(declare-fun d!43183 () Bool)

(assert (=> d!43183 e!89593))

(declare-fun res!65981 () Bool)

(assert (=> d!43183 (=> (not res!65981) (not e!89593))))

(assert (=> d!43183 (= res!65981 (or (bvsge #b00000000000000000000000000000000 (size!2542 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))))))))

(declare-fun lt!72114 () ListLongMap!1715)

(assert (=> d!43183 (= lt!72112 lt!72114)))

(declare-fun lt!72116 () Unit!4291)

(assert (=> d!43183 (= lt!72116 e!89600)))

(declare-fun c!25844 () Bool)

(assert (=> d!43183 (= c!25844 e!89592)))

(declare-fun res!65984 () Bool)

(assert (=> d!43183 (=> (not res!65984) (not e!89592))))

(assert (=> d!43183 (= res!65984 (bvslt #b00000000000000000000000000000000 (size!2542 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))))))

(assert (=> d!43183 (= lt!72114 e!89598)))

(declare-fun c!25841 () Bool)

(assert (=> d!43183 (= c!25841 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!43183 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!43183 (= (getCurrentListMap!544 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!72112)))

(declare-fun b!137655 () Bool)

(assert (=> b!137655 (= e!89590 (= (apply!117 lt!72112 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2742 newMap!16)))))

(declare-fun bm!15168 () Bool)

(assert (=> bm!15168 (= call!15168 call!15170)))

(declare-fun b!137656 () Bool)

(assert (=> b!137656 (= e!89599 (not call!15171))))

(declare-fun bm!15169 () Bool)

(assert (=> bm!15169 (= call!15172 (contains!901 lt!72112 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137657 () Bool)

(assert (=> b!137657 (= e!89602 (= (apply!117 lt!72112 (select (arr!2272 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16)))) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!137657 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))))))

(assert (=> b!137657 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (array!4807 (store (arr!2272 (_keys!4642 newMap!16)) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) (size!2542 (_keys!4642 newMap!16))))))))

(declare-fun bm!15170 () Bool)

(assert (=> bm!15170 (= call!15167 (+!171 (ite c!25841 call!15173 (ite c!25842 call!15170 call!15168)) (ite (or c!25841 c!25842) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(declare-fun b!137658 () Bool)

(declare-fun c!25845 () Bool)

(assert (=> b!137658 (= c!25845 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!137658 (= e!89594 e!89601)))

(assert (= (and d!43183 c!25841) b!137652))

(assert (= (and d!43183 (not c!25841)) b!137642))

(assert (= (and b!137642 c!25842) b!137647))

(assert (= (and b!137642 (not c!25842)) b!137658))

(assert (= (and b!137658 c!25845) b!137651))

(assert (= (and b!137658 (not c!25845)) b!137644))

(assert (= (or b!137651 b!137644) bm!15168))

(assert (= (or b!137647 bm!15168) bm!15164))

(assert (= (or b!137647 b!137651) bm!15166))

(assert (= (or b!137652 bm!15164) bm!15167))

(assert (= (or b!137652 bm!15166) bm!15170))

(assert (= (and d!43183 res!65984) b!137645))

(assert (= (and d!43183 c!25844) b!137650))

(assert (= (and d!43183 (not c!25844)) b!137653))

(assert (= (and d!43183 res!65981) b!137639))

(assert (= (and b!137639 res!65983) b!137648))

(assert (= (and b!137639 (not res!65986)) b!137641))

(assert (= (and b!137641 res!65985) b!137657))

(assert (= (and b!137639 res!65980) b!137654))

(assert (= (and b!137654 c!25843) b!137640))

(assert (= (and b!137654 (not c!25843)) b!137656))

(assert (= (and b!137640 res!65987) b!137643))

(assert (= (or b!137640 b!137656) bm!15165))

(assert (= (and b!137654 res!65979) b!137649))

(assert (= (and b!137649 c!25846) b!137646))

(assert (= (and b!137649 (not c!25846)) b!137638))

(assert (= (and b!137646 res!65982) b!137655))

(assert (= (or b!137646 b!137638) bm!15169))

(declare-fun b_lambda!6175 () Bool)

(assert (=> (not b_lambda!6175) (not b!137657)))

(assert (=> b!137657 t!6249))

(declare-fun b_and!8553 () Bool)

(assert (= b_and!8549 (and (=> t!6249 result!4059) b_and!8553)))

(assert (=> b!137657 t!6251))

(declare-fun b_and!8555 () Bool)

(assert (= b_and!8551 (and (=> t!6251 result!4061) b_and!8555)))

(declare-fun m!164957 () Bool)

(assert (=> bm!15165 m!164957))

(declare-fun m!164959 () Bool)

(assert (=> b!137657 m!164959))

(assert (=> b!137657 m!164865))

(declare-fun m!164961 () Bool)

(assert (=> b!137657 m!164961))

(assert (=> b!137657 m!164865))

(assert (=> b!137657 m!162815))

(assert (=> b!137657 m!164959))

(assert (=> b!137657 m!162815))

(declare-fun m!164963 () Bool)

(assert (=> b!137657 m!164963))

(declare-fun m!164965 () Bool)

(assert (=> b!137652 m!164965))

(declare-fun m!164967 () Bool)

(assert (=> bm!15170 m!164967))

(declare-fun m!164969 () Bool)

(assert (=> bm!15167 m!164969))

(declare-fun m!164971 () Bool)

(assert (=> b!137650 m!164971))

(declare-fun m!164973 () Bool)

(assert (=> b!137650 m!164973))

(declare-fun m!164975 () Bool)

(assert (=> b!137650 m!164975))

(declare-fun m!164977 () Bool)

(assert (=> b!137650 m!164977))

(declare-fun m!164979 () Bool)

(assert (=> b!137650 m!164979))

(declare-fun m!164981 () Bool)

(assert (=> b!137650 m!164981))

(declare-fun m!164983 () Bool)

(assert (=> b!137650 m!164983))

(declare-fun m!164985 () Bool)

(assert (=> b!137650 m!164985))

(declare-fun m!164987 () Bool)

(assert (=> b!137650 m!164987))

(declare-fun m!164989 () Bool)

(assert (=> b!137650 m!164989))

(assert (=> b!137650 m!164971))

(assert (=> b!137650 m!164979))

(assert (=> b!137650 m!164865))

(declare-fun m!164991 () Bool)

(assert (=> b!137650 m!164991))

(assert (=> b!137650 m!164969))

(assert (=> b!137650 m!164983))

(declare-fun m!164993 () Bool)

(assert (=> b!137650 m!164993))

(declare-fun m!164995 () Bool)

(assert (=> b!137650 m!164995))

(declare-fun m!164997 () Bool)

(assert (=> b!137650 m!164997))

(assert (=> b!137650 m!164995))

(declare-fun m!164999 () Bool)

(assert (=> b!137650 m!164999))

(declare-fun m!165001 () Bool)

(assert (=> bm!15169 m!165001))

(assert (=> d!43183 m!162751))

(assert (=> b!137648 m!164865))

(assert (=> b!137648 m!164865))

(assert (=> b!137648 m!164867))

(declare-fun m!165003 () Bool)

(assert (=> b!137655 m!165003))

(assert (=> b!137645 m!164865))

(assert (=> b!137645 m!164865))

(assert (=> b!137645 m!164867))

(declare-fun m!165005 () Bool)

(assert (=> b!137643 m!165005))

(assert (=> b!137641 m!164865))

(assert (=> b!137641 m!164865))

(declare-fun m!165007 () Bool)

(assert (=> b!137641 m!165007))

(assert (=> d!42671 d!43183))

(declare-fun d!43185 () Bool)

(declare-fun e!89603 () Bool)

(assert (=> d!43185 e!89603))

(declare-fun res!65988 () Bool)

(assert (=> d!43185 (=> (not res!65988) (not e!89603))))

(assert (=> d!43185 (= res!65988 (and (bvsge (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000000) (bvslt (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (size!2542 lt!71571))))))

(declare-fun lt!72124 () Unit!4291)

(assert (=> d!43185 (= lt!72124 (choose!845 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (defaultEntry!2889 newMap!16)))))

(assert (=> d!43185 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!43185 (= (lemmaValidKeyInArrayIsInListMap!120 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) (defaultEntry!2889 newMap!16)) lt!72124)))

(declare-fun b!137659 () Bool)

(assert (=> b!137659 (= e!89603 (contains!901 (getCurrentListMap!544 lt!71571 lt!71561 (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (select (arr!2272 lt!71571) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)))))))

(assert (= (and d!43185 res!65988) b!137659))

(declare-fun m!165009 () Bool)

(assert (=> d!43185 m!165009))

(assert (=> d!43185 m!162751))

(assert (=> b!137659 m!163251))

(declare-fun m!165011 () Bool)

(assert (=> b!137659 m!165011))

(assert (=> b!137659 m!163251))

(assert (=> b!137659 m!165011))

(declare-fun m!165013 () Bool)

(assert (=> b!137659 m!165013))

(assert (=> d!42671 d!43185))

(declare-fun d!43187 () Bool)

(assert (=> d!43187 (arrayContainsKey!0 lt!71555 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!72125 () Unit!4291)

(assert (=> d!43187 (= lt!72125 (choose!13 lt!71555 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257))))))

(assert (=> d!43187 (bvsge (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257)) #b00000000000000000000000000000000)))

(assert (=> d!43187 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!71555 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (ite c!25511 (index!3308 lt!71257) (index!3305 lt!71257))) lt!72125)))

(declare-fun bs!5791 () Bool)

(assert (= bs!5791 d!43187))

(assert (=> bs!5791 m!162523))

(assert (=> bs!5791 m!163263))

(assert (=> bs!5791 m!162523))

(declare-fun m!165015 () Bool)

(assert (=> bs!5791 m!165015))

(assert (=> d!42671 d!43187))

(declare-fun d!43189 () Bool)

(declare-fun e!89605 () Bool)

(assert (=> d!43189 e!89605))

(declare-fun res!65989 () Bool)

(assert (=> d!43189 (=> res!65989 e!89605)))

(declare-fun lt!72129 () Bool)

(assert (=> d!43189 (= res!65989 (not lt!72129))))

(declare-fun lt!72128 () Bool)

(assert (=> d!43189 (= lt!72129 lt!72128)))

(declare-fun lt!72126 () Unit!4291)

(declare-fun e!89604 () Unit!4291)

(assert (=> d!43189 (= lt!72126 e!89604)))

(declare-fun c!25847 () Bool)

(assert (=> d!43189 (= c!25847 lt!72128)))

(assert (=> d!43189 (= lt!72128 (containsKey!176 (toList!873 lt!71349) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!43189 (= (contains!901 lt!71349 #b1000000000000000000000000000000000000000000000000000000000000000) lt!72129)))

(declare-fun b!137660 () Bool)

(declare-fun lt!72127 () Unit!4291)

(assert (=> b!137660 (= e!89604 lt!72127)))

(assert (=> b!137660 (= lt!72127 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71349) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137660 (isDefined!126 (getValueByKey!172 (toList!873 lt!71349) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137661 () Bool)

(declare-fun Unit!4350 () Unit!4291)

(assert (=> b!137661 (= e!89604 Unit!4350)))

(declare-fun b!137662 () Bool)

(assert (=> b!137662 (= e!89605 (isDefined!126 (getValueByKey!172 (toList!873 lt!71349) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!43189 c!25847) b!137660))

(assert (= (and d!43189 (not c!25847)) b!137661))

(assert (= (and d!43189 (not res!65989)) b!137662))

(declare-fun m!165017 () Bool)

(assert (=> d!43189 m!165017))

(declare-fun m!165019 () Bool)

(assert (=> b!137660 m!165019))

(assert (=> b!137660 m!163481))

(assert (=> b!137660 m!163481))

(declare-fun m!165021 () Bool)

(assert (=> b!137660 m!165021))

(assert (=> b!137662 m!163481))

(assert (=> b!137662 m!163481))

(assert (=> b!137662 m!165021))

(assert (=> bm!15041 d!43189))

(declare-fun d!43191 () Bool)

(declare-fun res!65990 () Bool)

(declare-fun e!89606 () Bool)

(assert (=> d!43191 (=> res!65990 e!89606)))

(assert (=> d!43191 (= res!65990 (= (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!43191 (= (arrayContainsKey!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!89606)))

(declare-fun b!137663 () Bool)

(declare-fun e!89607 () Bool)

(assert (=> b!137663 (= e!89606 e!89607)))

(declare-fun res!65991 () Bool)

(assert (=> b!137663 (=> (not res!65991) (not e!89607))))

(assert (=> b!137663 (= res!65991 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!137664 () Bool)

(assert (=> b!137664 (= e!89607 (arrayContainsKey!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!43191 (not res!65990)) b!137663))

(assert (= (and b!137663 res!65991) b!137664))

(declare-fun m!165023 () Bool)

(assert (=> d!43191 m!165023))

(assert (=> b!137664 m!162523))

(declare-fun m!165025 () Bool)

(assert (=> b!137664 m!165025))

(assert (=> b!136847 d!43191))

(declare-fun d!43193 () Bool)

(assert (=> d!43193 (= (get!1502 (getValueByKey!172 (toList!873 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71170)) (v!3224 (getValueByKey!172 (toList!873 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71170)))))

(assert (=> d!42645 d!43193))

(declare-fun d!43195 () Bool)

(declare-fun c!25848 () Bool)

(assert (=> d!43195 (= c!25848 (and ((_ is Cons!1737) (toList!873 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) (= (_1!1321 (h!2343 (toList!873 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))) lt!71170)))))

(declare-fun e!89608 () Option!178)

(assert (=> d!43195 (= (getValueByKey!172 (toList!873 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))) lt!71170) e!89608)))

(declare-fun b!137667 () Bool)

(declare-fun e!89609 () Option!178)

(assert (=> b!137667 (= e!89609 (getValueByKey!172 (t!6241 (toList!873 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) lt!71170))))

(declare-fun b!137665 () Bool)

(assert (=> b!137665 (= e!89608 (Some!177 (_2!1321 (h!2343 (toList!873 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))))))))

(declare-fun b!137668 () Bool)

(assert (=> b!137668 (= e!89609 None!176)))

(declare-fun b!137666 () Bool)

(assert (=> b!137666 (= e!89608 e!89609)))

(declare-fun c!25849 () Bool)

(assert (=> b!137666 (= c!25849 (and ((_ is Cons!1737) (toList!873 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992))))))) (not (= (_1!1321 (h!2343 (toList!873 (+!171 lt!71169 (tuple2!2623 lt!71168 (minValue!2742 (v!3220 (underlying!460 thiss!992)))))))) lt!71170))))))

(assert (= (and d!43195 c!25848) b!137665))

(assert (= (and d!43195 (not c!25848)) b!137666))

(assert (= (and b!137666 c!25849) b!137667))

(assert (= (and b!137666 (not c!25849)) b!137668))

(declare-fun m!165027 () Bool)

(assert (=> b!137667 m!165027))

(assert (=> d!42645 d!43195))

(declare-fun b!137669 () Bool)

(declare-fun e!89611 () (_ BitVec 32))

(declare-fun call!15174 () (_ BitVec 32))

(assert (=> b!137669 (= e!89611 (bvadd #b00000000000000000000000000000001 call!15174))))

(declare-fun bm!15171 () Bool)

(assert (=> bm!15171 (= call!15174 (arrayCountValidKeys!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(declare-fun b!137670 () Bool)

(declare-fun e!89610 () (_ BitVec 32))

(assert (=> b!137670 (= e!89610 #b00000000000000000000000000000000)))

(declare-fun d!43197 () Bool)

(declare-fun lt!72130 () (_ BitVec 32))

(assert (=> d!43197 (and (bvsge lt!72130 #b00000000000000000000000000000000) (bvsle lt!72130 (bvsub (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!43197 (= lt!72130 e!89610)))

(declare-fun c!25851 () Bool)

(assert (=> d!43197 (= c!25851 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> d!43197 (and (bvsle #b00000000000000000000000000000000 (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))))))

(assert (=> d!43197 (= (arrayCountValidKeys!0 (_keys!4642 (v!3220 (underlying!460 thiss!992))) #b00000000000000000000000000000000 (size!2542 (_keys!4642 (v!3220 (underlying!460 thiss!992))))) lt!72130)))

(declare-fun b!137671 () Bool)

(assert (=> b!137671 (= e!89610 e!89611)))

(declare-fun c!25850 () Bool)

(assert (=> b!137671 (= c!25850 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!137672 () Bool)

(assert (=> b!137672 (= e!89611 call!15174)))

(assert (= (and d!43197 c!25851) b!137670))

(assert (= (and d!43197 (not c!25851)) b!137671))

(assert (= (and b!137671 c!25850) b!137669))

(assert (= (and b!137671 (not c!25850)) b!137672))

(assert (= (or b!137669 b!137672) bm!15171))

(declare-fun m!165029 () Bool)

(assert (=> bm!15171 m!165029))

(assert (=> b!137671 m!163471))

(assert (=> b!137671 m!163471))

(assert (=> b!137671 m!163473))

(assert (=> b!136715 d!43197))

(declare-fun d!43199 () Bool)

(assert (=> d!43199 (= (apply!117 lt!71469 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!172 (toList!873 lt!71469) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5792 () Bool)

(assert (= bs!5792 d!43199))

(assert (=> bs!5792 m!164269))

(assert (=> bs!5792 m!164269))

(declare-fun m!165031 () Bool)

(assert (=> bs!5792 m!165031))

(assert (=> b!136758 d!43199))

(declare-fun d!43201 () Bool)

(assert (=> d!43201 (isDefined!126 (getValueByKey!172 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!72131 () Unit!4291)

(assert (=> d!43201 (= lt!72131 (choose!842 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!89612 () Bool)

(assert (=> d!43201 e!89612))

(declare-fun res!65992 () Bool)

(assert (=> d!43201 (=> (not res!65992) (not e!89612))))

(assert (=> d!43201 (= res!65992 (isStrictlySorted!318 (toList!873 lt!71161)))))

(assert (=> d!43201 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000) lt!72131)))

(declare-fun b!137673 () Bool)

(assert (=> b!137673 (= e!89612 (containsKey!176 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!43201 res!65992) b!137673))

(assert (=> d!43201 m!162759))

(assert (=> d!43201 m!162759))

(assert (=> d!43201 m!162761))

(declare-fun m!165033 () Bool)

(assert (=> d!43201 m!165033))

(assert (=> d!43201 m!163335))

(assert (=> b!137673 m!162755))

(assert (=> b!136518 d!43201))

(assert (=> b!136518 d!42893))

(assert (=> b!136518 d!42895))

(declare-fun d!43203 () Bool)

(declare-fun isEmpty!419 (List!1741) Bool)

(assert (=> d!43203 (= (isEmpty!417 lt!71420) (isEmpty!419 (toList!873 lt!71420)))))

(declare-fun bs!5793 () Bool)

(assert (= bs!5793 d!43203))

(declare-fun m!165035 () Bool)

(assert (=> bs!5793 m!165035))

(assert (=> b!136707 d!43203))

(declare-fun d!43205 () Bool)

(assert (=> d!43205 (= (apply!117 lt!71323 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1502 (getValueByKey!172 (toList!873 lt!71323) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!5794 () Bool)

(assert (= bs!5794 d!43205))

(assert (=> bs!5794 m!164307))

(assert (=> bs!5794 m!164307))

(declare-fun m!165037 () Bool)

(assert (=> bs!5794 m!165037))

(assert (=> b!136574 d!43205))

(assert (=> d!42593 d!42563))

(declare-fun d!43207 () Bool)

(declare-fun e!89615 () Bool)

(assert (=> d!43207 e!89615))

(declare-fun res!65998 () Bool)

(assert (=> d!43207 (=> (not res!65998) (not e!89615))))

(declare-fun lt!72134 () SeekEntryResult!286)

(assert (=> d!43207 (= res!65998 ((_ is Found!286) lt!72134))))

(assert (=> d!43207 (= lt!72134 (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(assert (=> d!43207 true))

(declare-fun _$33!117 () Unit!4291)

(assert (=> d!43207 (= (choose!840 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (defaultEntry!2889 newMap!16)) _$33!117)))

(declare-fun b!137678 () Bool)

(declare-fun res!65997 () Bool)

(assert (=> b!137678 (=> (not res!65997) (not e!89615))))

(assert (=> b!137678 (= res!65997 (inRange!0 (index!3306 lt!72134) (mask!7203 newMap!16)))))

(declare-fun b!137679 () Bool)

(assert (=> b!137679 (= e!89615 (= (select (arr!2272 (_keys!4642 newMap!16)) (index!3306 lt!72134)) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (= (and d!43207 res!65998) b!137678))

(assert (= (and b!137678 res!65997) b!137679))

(assert (=> d!43207 m!162523))

(assert (=> d!43207 m!162671))

(declare-fun m!165039 () Bool)

(assert (=> b!137678 m!165039))

(declare-fun m!165041 () Bool)

(assert (=> b!137679 m!165041))

(assert (=> d!42593 d!43207))

(assert (=> d!42593 d!42847))

(declare-fun d!43209 () Bool)

(declare-fun res!65999 () Bool)

(declare-fun e!89616 () Bool)

(assert (=> d!43209 (=> res!65999 e!89616)))

(assert (=> d!43209 (= res!65999 (and ((_ is Cons!1737) (toList!873 lt!71161)) (= (_1!1321 (h!2343 (toList!873 lt!71161))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!43209 (= (containsKey!176 (toList!873 lt!71161) #b1000000000000000000000000000000000000000000000000000000000000000) e!89616)))

(declare-fun b!137680 () Bool)

(declare-fun e!89617 () Bool)

(assert (=> b!137680 (= e!89616 e!89617)))

(declare-fun res!66000 () Bool)

(assert (=> b!137680 (=> (not res!66000) (not e!89617))))

(assert (=> b!137680 (= res!66000 (and (or (not ((_ is Cons!1737) (toList!873 lt!71161))) (bvsle (_1!1321 (h!2343 (toList!873 lt!71161))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1737) (toList!873 lt!71161)) (bvslt (_1!1321 (h!2343 (toList!873 lt!71161))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!137681 () Bool)

(assert (=> b!137681 (= e!89617 (containsKey!176 (t!6241 (toList!873 lt!71161)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!43209 (not res!65999)) b!137680))

(assert (= (and b!137680 res!66000) b!137681))

(declare-fun m!165043 () Bool)

(assert (=> b!137681 m!165043))

(assert (=> d!42591 d!43209))

(assert (=> b!136778 d!42549))

(assert (=> bm!15052 d!42801))

(assert (=> b!136788 d!43157))

(assert (=> b!136788 d!42589))

(declare-fun b!137682 () Bool)

(declare-fun e!89625 () Bool)

(declare-fun call!15180 () Bool)

(assert (=> b!137682 (= e!89625 (not call!15180))))

(declare-fun b!137683 () Bool)

(declare-fun res!66002 () Bool)

(declare-fun e!89621 () Bool)

(assert (=> b!137683 (=> (not res!66002) (not e!89621))))

(declare-fun e!89619 () Bool)

(assert (=> b!137683 (= res!66002 e!89619)))

(declare-fun res!66008 () Bool)

(assert (=> b!137683 (=> res!66008 e!89619)))

(declare-fun e!89623 () Bool)

(assert (=> b!137683 (= res!66008 (not e!89623))))

(declare-fun res!66005 () Bool)

(assert (=> b!137683 (=> (not res!66005) (not e!89623))))

(assert (=> b!137683 (= res!66005 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137684 () Bool)

(declare-fun e!89627 () Bool)

(declare-fun e!89624 () Bool)

(assert (=> b!137684 (= e!89627 e!89624)))

(declare-fun res!66009 () Bool)

(declare-fun call!15179 () Bool)

(assert (=> b!137684 (= res!66009 call!15179)))

(assert (=> b!137684 (=> (not res!66009) (not e!89624))))

(declare-fun bm!15172 () Bool)

(declare-fun call!15178 () ListLongMap!1715)

(declare-fun call!15181 () ListLongMap!1715)

(assert (=> bm!15172 (= call!15178 call!15181)))

(declare-fun b!137685 () Bool)

(declare-fun e!89630 () Bool)

(assert (=> b!137685 (= e!89619 e!89630)))

(declare-fun res!66007 () Bool)

(assert (=> b!137685 (=> (not res!66007) (not e!89630))))

(declare-fun lt!72145 () ListLongMap!1715)

(assert (=> b!137685 (= res!66007 (contains!901 lt!72145 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!137685 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun b!137686 () Bool)

(declare-fun e!89626 () ListLongMap!1715)

(declare-fun e!89622 () ListLongMap!1715)

(assert (=> b!137686 (= e!89626 e!89622)))

(declare-fun c!25853 () Bool)

(assert (=> b!137686 (= c!25853 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!15173 () Bool)

(assert (=> bm!15173 (= call!15179 (contains!901 lt!72145 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137687 () Bool)

(assert (=> b!137687 (= e!89624 (= (apply!117 lt!72145 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2742 newMap!16)))))

(declare-fun b!137688 () Bool)

(declare-fun e!89629 () ListLongMap!1715)

(declare-fun call!15176 () ListLongMap!1715)

(assert (=> b!137688 (= e!89629 call!15176)))

(declare-fun bm!15174 () Bool)

(declare-fun call!15177 () ListLongMap!1715)

(declare-fun call!15175 () ListLongMap!1715)

(assert (=> bm!15174 (= call!15177 call!15175)))

(declare-fun b!137689 () Bool)

(declare-fun e!89620 () Bool)

(assert (=> b!137689 (= e!89620 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137691 () Bool)

(assert (=> b!137691 (= e!89622 call!15177)))

(declare-fun b!137692 () Bool)

(assert (=> b!137692 (= e!89623 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!137693 () Bool)

(assert (=> b!137693 (= e!89621 e!89625)))

(declare-fun c!25857 () Bool)

(assert (=> b!137693 (= c!25857 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!137694 () Bool)

(declare-fun e!89628 () Unit!4291)

(declare-fun lt!72139 () Unit!4291)

(assert (=> b!137694 (= e!89628 lt!72139)))

(declare-fun lt!72150 () ListLongMap!1715)

(assert (=> b!137694 (= lt!72150 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72143 () (_ BitVec 64))

(assert (=> b!137694 (= lt!72143 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72140 () (_ BitVec 64))

(assert (=> b!137694 (= lt!72140 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!72141 () Unit!4291)

(assert (=> b!137694 (= lt!72141 (addStillContains!93 lt!72150 lt!72143 (zeroValue!2742 newMap!16) lt!72140))))

(assert (=> b!137694 (contains!901 (+!171 lt!72150 (tuple2!2623 lt!72143 (zeroValue!2742 newMap!16))) lt!72140)))

(declare-fun lt!72155 () Unit!4291)

(assert (=> b!137694 (= lt!72155 lt!72141)))

(declare-fun lt!72142 () ListLongMap!1715)

(assert (=> b!137694 (= lt!72142 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72156 () (_ BitVec 64))

(assert (=> b!137694 (= lt!72156 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72138 () (_ BitVec 64))

(assert (=> b!137694 (= lt!72138 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!72135 () Unit!4291)

(assert (=> b!137694 (= lt!72135 (addApplyDifferent!93 lt!72142 lt!72156 (minValue!2742 newMap!16) lt!72138))))

(assert (=> b!137694 (= (apply!117 (+!171 lt!72142 (tuple2!2623 lt!72156 (minValue!2742 newMap!16))) lt!72138) (apply!117 lt!72142 lt!72138))))

(declare-fun lt!72151 () Unit!4291)

(assert (=> b!137694 (= lt!72151 lt!72135)))

(declare-fun lt!72148 () ListLongMap!1715)

(assert (=> b!137694 (= lt!72148 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72136 () (_ BitVec 64))

(assert (=> b!137694 (= lt!72136 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72137 () (_ BitVec 64))

(assert (=> b!137694 (= lt!72137 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!72144 () Unit!4291)

(assert (=> b!137694 (= lt!72144 (addApplyDifferent!93 lt!72148 lt!72136 (zeroValue!2742 newMap!16) lt!72137))))

(assert (=> b!137694 (= (apply!117 (+!171 lt!72148 (tuple2!2623 lt!72136 (zeroValue!2742 newMap!16))) lt!72137) (apply!117 lt!72148 lt!72137))))

(declare-fun lt!72146 () Unit!4291)

(assert (=> b!137694 (= lt!72146 lt!72144)))

(declare-fun lt!72153 () ListLongMap!1715)

(assert (=> b!137694 (= lt!72153 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun lt!72152 () (_ BitVec 64))

(assert (=> b!137694 (= lt!72152 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!72154 () (_ BitVec 64))

(assert (=> b!137694 (= lt!72154 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!137694 (= lt!72139 (addApplyDifferent!93 lt!72153 lt!72152 (minValue!2742 newMap!16) lt!72154))))

(assert (=> b!137694 (= (apply!117 (+!171 lt!72153 (tuple2!2623 lt!72152 (minValue!2742 newMap!16))) lt!72154) (apply!117 lt!72153 lt!72154))))

(declare-fun b!137695 () Bool)

(assert (=> b!137695 (= e!89629 call!15177)))

(declare-fun b!137696 () Bool)

(assert (=> b!137696 (= e!89626 (+!171 call!15175 (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16))))))

(declare-fun bm!15175 () Bool)

(assert (=> bm!15175 (= call!15181 (getCurrentListMapNoExtraKeys!138 (_keys!4642 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(declare-fun b!137697 () Bool)

(declare-fun Unit!4351 () Unit!4291)

(assert (=> b!137697 (= e!89628 Unit!4351)))

(declare-fun b!137698 () Bool)

(declare-fun res!66001 () Bool)

(assert (=> b!137698 (=> (not res!66001) (not e!89621))))

(assert (=> b!137698 (= res!66001 e!89627)))

(declare-fun c!25854 () Bool)

(assert (=> b!137698 (= c!25854 (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!137690 () Bool)

(declare-fun e!89618 () Bool)

(assert (=> b!137690 (= e!89625 e!89618)))

(declare-fun res!66004 () Bool)

(assert (=> b!137690 (= res!66004 call!15180)))

(assert (=> b!137690 (=> (not res!66004) (not e!89618))))

(declare-fun d!43211 () Bool)

(assert (=> d!43211 e!89621))

(declare-fun res!66003 () Bool)

(assert (=> d!43211 (=> (not res!66003) (not e!89621))))

(assert (=> d!43211 (= res!66003 (or (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))))

(declare-fun lt!72147 () ListLongMap!1715)

(assert (=> d!43211 (= lt!72145 lt!72147)))

(declare-fun lt!72149 () Unit!4291)

(assert (=> d!43211 (= lt!72149 e!89628)))

(declare-fun c!25855 () Bool)

(assert (=> d!43211 (= c!25855 e!89620)))

(declare-fun res!66006 () Bool)

(assert (=> d!43211 (=> (not res!66006) (not e!89620))))

(assert (=> d!43211 (= res!66006 (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!43211 (= lt!72147 e!89626)))

(declare-fun c!25852 () Bool)

(assert (=> d!43211 (= c!25852 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!43211 (validMask!0 (mask!7203 newMap!16))))

(assert (=> d!43211 (= (getCurrentListMap!544 (_keys!4642 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) lt!72145)))

(declare-fun b!137699 () Bool)

(assert (=> b!137699 (= e!89618 (= (apply!117 lt!72145 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2742 newMap!16)))))

(declare-fun bm!15176 () Bool)

(assert (=> bm!15176 (= call!15176 call!15178)))

(declare-fun b!137700 () Bool)

(assert (=> b!137700 (= e!89627 (not call!15179))))

(declare-fun bm!15177 () Bool)

(assert (=> bm!15177 (= call!15180 (contains!901 lt!72145 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137701 () Bool)

(assert (=> b!137701 (= e!89630 (= (apply!117 lt!72145 (select (arr!2272 (_keys!4642 newMap!16)) #b00000000000000000000000000000000)) (get!1498 (select (arr!2273 (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!428 (defaultEntry!2889 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!137701 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2543 (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))))))))

(assert (=> b!137701 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2542 (_keys!4642 newMap!16))))))

(declare-fun bm!15178 () Bool)

(assert (=> bm!15178 (= call!15175 (+!171 (ite c!25852 call!15181 (ite c!25853 call!15178 call!15176)) (ite (or c!25852 c!25853) (tuple2!2623 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2742 newMap!16)) (tuple2!2623 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2742 newMap!16)))))))

(declare-fun b!137702 () Bool)

(declare-fun c!25856 () Bool)

(assert (=> b!137702 (= c!25856 (and (not (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2650 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!137702 (= e!89622 e!89629)))

(assert (= (and d!43211 c!25852) b!137696))

(assert (= (and d!43211 (not c!25852)) b!137686))

(assert (= (and b!137686 c!25853) b!137691))

(assert (= (and b!137686 (not c!25853)) b!137702))

(assert (= (and b!137702 c!25856) b!137695))

(assert (= (and b!137702 (not c!25856)) b!137688))

(assert (= (or b!137695 b!137688) bm!15176))

(assert (= (or b!137691 bm!15176) bm!15172))

(assert (= (or b!137691 b!137695) bm!15174))

(assert (= (or b!137696 bm!15172) bm!15175))

(assert (= (or b!137696 bm!15174) bm!15178))

(assert (= (and d!43211 res!66006) b!137689))

(assert (= (and d!43211 c!25855) b!137694))

(assert (= (and d!43211 (not c!25855)) b!137697))

(assert (= (and d!43211 res!66003) b!137683))

(assert (= (and b!137683 res!66005) b!137692))

(assert (= (and b!137683 (not res!66008)) b!137685))

(assert (= (and b!137685 res!66007) b!137701))

(assert (= (and b!137683 res!66002) b!137698))

(assert (= (and b!137698 c!25854) b!137684))

(assert (= (and b!137698 (not c!25854)) b!137700))

(assert (= (and b!137684 res!66009) b!137687))

(assert (= (or b!137684 b!137700) bm!15173))

(assert (= (and b!137698 res!66001) b!137693))

(assert (= (and b!137693 c!25857) b!137690))

(assert (= (and b!137693 (not c!25857)) b!137682))

(assert (= (and b!137690 res!66004) b!137699))

(assert (= (or b!137690 b!137682) bm!15177))

(declare-fun b_lambda!6177 () Bool)

(assert (=> (not b_lambda!6177) (not b!137701)))

(assert (=> b!137701 t!6249))

(declare-fun b_and!8557 () Bool)

(assert (= b_and!8553 (and (=> t!6249 result!4059) b_and!8557)))

(assert (=> b!137701 t!6251))

(declare-fun b_and!8559 () Bool)

(assert (= b_and!8555 (and (=> t!6251 result!4061) b_and!8559)))

(declare-fun m!165045 () Bool)

(assert (=> bm!15173 m!165045))

(declare-fun m!165047 () Bool)

(assert (=> b!137701 m!165047))

(assert (=> b!137701 m!162731))

(declare-fun m!165049 () Bool)

(assert (=> b!137701 m!165049))

(assert (=> b!137701 m!162731))

(assert (=> b!137701 m!162815))

(assert (=> b!137701 m!165047))

(assert (=> b!137701 m!162815))

(declare-fun m!165051 () Bool)

(assert (=> b!137701 m!165051))

(declare-fun m!165053 () Bool)

(assert (=> b!137696 m!165053))

(declare-fun m!165055 () Bool)

(assert (=> bm!15178 m!165055))

(declare-fun m!165057 () Bool)

(assert (=> bm!15175 m!165057))

(declare-fun m!165059 () Bool)

(assert (=> b!137694 m!165059))

(declare-fun m!165061 () Bool)

(assert (=> b!137694 m!165061))

(declare-fun m!165063 () Bool)

(assert (=> b!137694 m!165063))

(declare-fun m!165065 () Bool)

(assert (=> b!137694 m!165065))

(declare-fun m!165067 () Bool)

(assert (=> b!137694 m!165067))

(declare-fun m!165069 () Bool)

(assert (=> b!137694 m!165069))

(declare-fun m!165071 () Bool)

(assert (=> b!137694 m!165071))

(declare-fun m!165073 () Bool)

(assert (=> b!137694 m!165073))

(declare-fun m!165075 () Bool)

(assert (=> b!137694 m!165075))

(declare-fun m!165077 () Bool)

(assert (=> b!137694 m!165077))

(assert (=> b!137694 m!165059))

(assert (=> b!137694 m!165067))

(assert (=> b!137694 m!162731))

(declare-fun m!165079 () Bool)

(assert (=> b!137694 m!165079))

(assert (=> b!137694 m!165057))

(assert (=> b!137694 m!165071))

(declare-fun m!165081 () Bool)

(assert (=> b!137694 m!165081))

(declare-fun m!165083 () Bool)

(assert (=> b!137694 m!165083))

(declare-fun m!165085 () Bool)

(assert (=> b!137694 m!165085))

(assert (=> b!137694 m!165083))

(declare-fun m!165087 () Bool)

(assert (=> b!137694 m!165087))

(declare-fun m!165089 () Bool)

(assert (=> bm!15177 m!165089))

(assert (=> d!43211 m!162751))

(assert (=> b!137692 m!162731))

(assert (=> b!137692 m!162731))

(assert (=> b!137692 m!162735))

(declare-fun m!165091 () Bool)

(assert (=> b!137699 m!165091))

(assert (=> b!137689 m!162731))

(assert (=> b!137689 m!162731))

(assert (=> b!137689 m!162735))

(declare-fun m!165093 () Bool)

(assert (=> b!137687 m!165093))

(assert (=> b!137685 m!162731))

(assert (=> b!137685 m!162731))

(declare-fun m!165095 () Bool)

(assert (=> b!137685 m!165095))

(assert (=> b!136788 d!43211))

(assert (=> b!136556 d!42939))

(assert (=> b!136556 d!42859))

(assert (=> d!42625 d!42617))

(assert (=> d!42625 d!42619))

(declare-fun d!43213 () Bool)

(assert (=> d!43213 (isDefined!126 (getValueByKey!172 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (=> d!43213 true))

(declare-fun _$12!409 () Unit!4291)

(assert (=> d!43213 (= (choose!842 (toList!873 lt!71093) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) _$12!409)))

(declare-fun bs!5795 () Bool)

(assert (= bs!5795 d!43213))

(assert (=> bs!5795 m!162523))

(assert (=> bs!5795 m!162655))

(assert (=> bs!5795 m!162655))

(assert (=> bs!5795 m!162657))

(assert (=> d!42625 d!43213))

(declare-fun d!43215 () Bool)

(declare-fun res!66014 () Bool)

(declare-fun e!89635 () Bool)

(assert (=> d!43215 (=> res!66014 e!89635)))

(assert (=> d!43215 (= res!66014 (or ((_ is Nil!1738) (toList!873 lt!71093)) ((_ is Nil!1738) (t!6241 (toList!873 lt!71093)))))))

(assert (=> d!43215 (= (isStrictlySorted!318 (toList!873 lt!71093)) e!89635)))

(declare-fun b!137707 () Bool)

(declare-fun e!89636 () Bool)

(assert (=> b!137707 (= e!89635 e!89636)))

(declare-fun res!66015 () Bool)

(assert (=> b!137707 (=> (not res!66015) (not e!89636))))

(assert (=> b!137707 (= res!66015 (bvslt (_1!1321 (h!2343 (toList!873 lt!71093))) (_1!1321 (h!2343 (t!6241 (toList!873 lt!71093))))))))

(declare-fun b!137708 () Bool)

(assert (=> b!137708 (= e!89636 (isStrictlySorted!318 (t!6241 (toList!873 lt!71093))))))

(assert (= (and d!43215 (not res!66014)) b!137707))

(assert (= (and b!137707 res!66015) b!137708))

(declare-fun m!165097 () Bool)

(assert (=> b!137708 m!165097))

(assert (=> d!42625 d!43215))

(declare-fun b!137709 () Bool)

(declare-fun e!89638 () (_ BitVec 32))

(declare-fun call!15182 () (_ BitVec 32))

(assert (=> b!137709 (= e!89638 (bvadd #b00000000000000000000000000000001 call!15182))))

(declare-fun bm!15179 () Bool)

(assert (=> bm!15179 (= call!15182 (arrayCountValidKeys!0 (_keys!4642 (_2!1322 lt!71264)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 (_keys!4642 (_2!1322 lt!71264)))))))

(declare-fun b!137710 () Bool)

(declare-fun e!89637 () (_ BitVec 32))

(assert (=> b!137710 (= e!89637 #b00000000000000000000000000000000)))

(declare-fun d!43217 () Bool)

(declare-fun lt!72157 () (_ BitVec 32))

(assert (=> d!43217 (and (bvsge lt!72157 #b00000000000000000000000000000000) (bvsle lt!72157 (bvsub (size!2542 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000)))))

(assert (=> d!43217 (= lt!72157 e!89637)))

(declare-fun c!25859 () Bool)

(assert (=> d!43217 (= c!25859 (bvsge #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))))))

(assert (=> d!43217 (and (bvsle #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2542 (_keys!4642 (_2!1322 lt!71264))) (size!2542 (_keys!4642 (_2!1322 lt!71264)))))))

(assert (=> d!43217 (= (arrayCountValidKeys!0 (_keys!4642 (_2!1322 lt!71264)) #b00000000000000000000000000000000 (size!2542 (_keys!4642 (_2!1322 lt!71264)))) lt!72157)))

(declare-fun b!137711 () Bool)

(assert (=> b!137711 (= e!89637 e!89638)))

(declare-fun c!25858 () Bool)

(assert (=> b!137711 (= c!25858 (validKeyInArray!0 (select (arr!2272 (_keys!4642 (_2!1322 lt!71264))) #b00000000000000000000000000000000)))))

(declare-fun b!137712 () Bool)

(assert (=> b!137712 (= e!89638 call!15182)))

(assert (= (and d!43217 c!25859) b!137710))

(assert (= (and d!43217 (not c!25859)) b!137711))

(assert (= (and b!137711 c!25858) b!137709))

(assert (= (and b!137711 (not c!25858)) b!137712))

(assert (= (or b!137709 b!137712) bm!15179))

(declare-fun m!165099 () Bool)

(assert (=> bm!15179 m!165099))

(assert (=> b!137711 m!163577))

(assert (=> b!137711 m!163577))

(assert (=> b!137711 m!163579))

(assert (=> b!136521 d!43217))

(declare-fun d!43219 () Bool)

(assert (=> d!43219 (= (get!1502 (getValueByKey!172 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!3224 (getValueByKey!172 (toList!873 lt!71161) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!42681 d!43219))

(assert (=> d!42681 d!42895))

(declare-fun d!43221 () Bool)

(declare-fun e!89640 () Bool)

(assert (=> d!43221 e!89640))

(declare-fun res!66016 () Bool)

(assert (=> d!43221 (=> res!66016 e!89640)))

(declare-fun lt!72161 () Bool)

(assert (=> d!43221 (= res!66016 (not lt!72161))))

(declare-fun lt!72160 () Bool)

(assert (=> d!43221 (= lt!72161 lt!72160)))

(declare-fun lt!72158 () Unit!4291)

(declare-fun e!89639 () Unit!4291)

(assert (=> d!43221 (= lt!72158 e!89639)))

(declare-fun c!25860 () Bool)

(assert (=> d!43221 (= c!25860 lt!72160)))

(assert (=> d!43221 (= lt!72160 (containsKey!176 (toList!873 lt!71469) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!43221 (= (contains!901 lt!71469 #b1000000000000000000000000000000000000000000000000000000000000000) lt!72161)))

(declare-fun b!137713 () Bool)

(declare-fun lt!72159 () Unit!4291)

(assert (=> b!137713 (= e!89639 lt!72159)))

(assert (=> b!137713 (= lt!72159 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71469) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137713 (isDefined!126 (getValueByKey!172 (toList!873 lt!71469) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137714 () Bool)

(declare-fun Unit!4352 () Unit!4291)

(assert (=> b!137714 (= e!89639 Unit!4352)))

(declare-fun b!137715 () Bool)

(assert (=> b!137715 (= e!89640 (isDefined!126 (getValueByKey!172 (toList!873 lt!71469) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!43221 c!25860) b!137713))

(assert (= (and d!43221 (not c!25860)) b!137714))

(assert (= (and d!43221 (not res!66016)) b!137715))

(declare-fun m!165101 () Bool)

(assert (=> d!43221 m!165101))

(declare-fun m!165103 () Bool)

(assert (=> b!137713 m!165103))

(assert (=> b!137713 m!163741))

(assert (=> b!137713 m!163741))

(declare-fun m!165105 () Bool)

(assert (=> b!137713 m!165105))

(assert (=> b!137715 m!163741))

(assert (=> b!137715 m!163741))

(assert (=> b!137715 m!165105))

(assert (=> bm!15064 d!43221))

(declare-fun d!43223 () Bool)

(declare-fun e!89642 () Bool)

(assert (=> d!43223 e!89642))

(declare-fun res!66017 () Bool)

(assert (=> d!43223 (=> res!66017 e!89642)))

(declare-fun lt!72165 () Bool)

(assert (=> d!43223 (= res!66017 (not lt!72165))))

(declare-fun lt!72164 () Bool)

(assert (=> d!43223 (= lt!72165 lt!72164)))

(declare-fun lt!72162 () Unit!4291)

(declare-fun e!89641 () Unit!4291)

(assert (=> d!43223 (= lt!72162 e!89641)))

(declare-fun c!25861 () Bool)

(assert (=> d!43223 (= c!25861 lt!72164)))

(assert (=> d!43223 (= lt!72164 (containsKey!176 (toList!873 lt!71323) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!43223 (= (contains!901 lt!71323 #b1000000000000000000000000000000000000000000000000000000000000000) lt!72165)))

(declare-fun b!137716 () Bool)

(declare-fun lt!72163 () Unit!4291)

(assert (=> b!137716 (= e!89641 lt!72163)))

(assert (=> b!137716 (= lt!72163 (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 lt!71323) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!137716 (isDefined!126 (getValueByKey!172 (toList!873 lt!71323) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!137717 () Bool)

(declare-fun Unit!4353 () Unit!4291)

(assert (=> b!137717 (= e!89641 Unit!4353)))

(declare-fun b!137718 () Bool)

(assert (=> b!137718 (= e!89642 (isDefined!126 (getValueByKey!172 (toList!873 lt!71323) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!43223 c!25861) b!137716))

(assert (= (and d!43223 (not c!25861)) b!137717))

(assert (= (and d!43223 (not res!66017)) b!137718))

(declare-fun m!165107 () Bool)

(assert (=> d!43223 m!165107))

(declare-fun m!165109 () Bool)

(assert (=> b!137716 m!165109))

(assert (=> b!137716 m!163745))

(assert (=> b!137716 m!163745))

(declare-fun m!165111 () Bool)

(assert (=> b!137716 m!165111))

(assert (=> b!137718 m!163745))

(assert (=> b!137718 m!163745))

(assert (=> b!137718 m!165111))

(assert (=> bm!15034 d!43223))

(declare-fun d!43225 () Bool)

(assert (=> d!43225 (= (+!171 (getCurrentListMap!544 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!544 (_keys!4642 newMap!16) (array!4809 (store (arr!2273 (_values!2872 newMap!16)) (index!3306 lt!71257) (ValueCellFull!1101 (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2543 (_values!2872 newMap!16))) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2889 newMap!16)))))

(assert (=> d!43225 true))

(declare-fun _$5!137 () Unit!4291)

(assert (=> d!43225 (= (choose!846 (_keys!4642 newMap!16) (_values!2872 newMap!16) (mask!7203 newMap!16) (extraKeys!2650 newMap!16) (zeroValue!2742 newMap!16) (minValue!2742 newMap!16) (index!3306 lt!71257) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2889 newMap!16)) _$5!137)))

(declare-fun bs!5796 () Bool)

(assert (= bs!5796 d!43225))

(assert (=> bs!5796 m!162585))

(assert (=> bs!5796 m!162585))

(assert (=> bs!5796 m!163233))

(assert (=> bs!5796 m!162675))

(assert (=> bs!5796 m!163235))

(assert (=> d!42667 d!43225))

(assert (=> d!42667 d!42847))

(declare-fun lt!72166 () Bool)

(declare-fun d!43227 () Bool)

(assert (=> d!43227 (= lt!72166 (select (content!134 (toList!873 lt!71338)) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!89644 () Bool)

(assert (=> d!43227 (= lt!72166 e!89644)))

(declare-fun res!66018 () Bool)

(assert (=> d!43227 (=> (not res!66018) (not e!89644))))

(assert (=> d!43227 (= res!66018 ((_ is Cons!1737) (toList!873 lt!71338)))))

(assert (=> d!43227 (= (contains!904 (toList!873 lt!71338) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!72166)))

(declare-fun b!137719 () Bool)

(declare-fun e!89643 () Bool)

(assert (=> b!137719 (= e!89644 e!89643)))

(declare-fun res!66019 () Bool)

(assert (=> b!137719 (=> res!66019 e!89643)))

(assert (=> b!137719 (= res!66019 (= (h!2343 (toList!873 lt!71338)) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!137720 () Bool)

(assert (=> b!137720 (= e!89643 (contains!904 (t!6241 (toList!873 lt!71338)) (tuple2!2623 (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355) (get!1498 (select (arr!2273 (_values!2872 (v!3220 (underlying!460 thiss!992)))) from!355) (dynLambda!428 (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!43227 res!66018) b!137719))

(assert (= (and b!137719 (not res!66019)) b!137720))

(declare-fun m!165113 () Bool)

(assert (=> d!43227 m!165113))

(declare-fun m!165115 () Bool)

(assert (=> d!43227 m!165115))

(declare-fun m!165117 () Bool)

(assert (=> b!137720 m!165117))

(assert (=> b!136593 d!43227))

(declare-fun d!43229 () Bool)

(assert (=> d!43229 (isDefined!126 (getValueByKey!172 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun lt!72167 () Unit!4291)

(assert (=> d!43229 (= lt!72167 (choose!842 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(declare-fun e!89645 () Bool)

(assert (=> d!43229 e!89645))

(declare-fun res!66020 () Bool)

(assert (=> d!43229 (=> (not res!66020) (not e!89645))))

(assert (=> d!43229 (= res!66020 (isStrictlySorted!318 (toList!873 call!15021)))))

(assert (=> d!43229 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!125 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)) lt!72167)))

(declare-fun b!137721 () Bool)

(assert (=> b!137721 (= e!89645 (containsKey!176 (toList!873 call!15021) (select (arr!2272 (_keys!4642 (v!3220 (underlying!460 thiss!992)))) from!355)))))

(assert (= (and d!43229 res!66020) b!137721))

(assert (=> d!43229 m!162523))

(assert (=> d!43229 m!163241))

(assert (=> d!43229 m!163241))

(assert (=> d!43229 m!163243))

(assert (=> d!43229 m!162523))

(declare-fun m!165119 () Bool)

(assert (=> d!43229 m!165119))

(declare-fun m!165121 () Bool)

(assert (=> d!43229 m!165121))

(assert (=> b!137721 m!162523))

(assert (=> b!137721 m!163237))

(assert (=> b!136789 d!43229))

(assert (=> b!136789 d!42927))

(assert (=> b!136789 d!42929))

(assert (=> b!136566 d!42813))

(declare-fun b!137722 () Bool)

(declare-fun e!89648 () Bool)

(declare-fun call!15183 () Bool)

(assert (=> b!137722 (= e!89648 call!15183)))

(declare-fun bm!15180 () Bool)

(assert (=> bm!15180 (= call!15183 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4642 newMap!16) (mask!7203 newMap!16)))))

(declare-fun d!43231 () Bool)

(declare-fun res!66021 () Bool)

(declare-fun e!89647 () Bool)

(assert (=> d!43231 (=> res!66021 e!89647)))

(assert (=> d!43231 (= res!66021 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2542 (_keys!4642 newMap!16))))))

(assert (=> d!43231 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4642 newMap!16) (mask!7203 newMap!16)) e!89647)))

(declare-fun b!137723 () Bool)

(declare-fun e!89646 () Bool)

(assert (=> b!137723 (= e!89647 e!89646)))

(declare-fun c!25862 () Bool)

(assert (=> b!137723 (= c!25862 (validKeyInArray!0 (select (arr!2272 (_keys!4642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!137724 () Bool)

(assert (=> b!137724 (= e!89646 call!15183)))

(declare-fun b!137725 () Bool)

(assert (=> b!137725 (= e!89646 e!89648)))

(declare-fun lt!72168 () (_ BitVec 64))

(assert (=> b!137725 (= lt!72168 (select (arr!2272 (_keys!4642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!72169 () Unit!4291)

(assert (=> b!137725 (= lt!72169 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4642 newMap!16) lt!72168 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!137725 (arrayContainsKey!0 (_keys!4642 newMap!16) lt!72168 #b00000000000000000000000000000000)))

(declare-fun lt!72170 () Unit!4291)

(assert (=> b!137725 (= lt!72170 lt!72169)))

(declare-fun res!66022 () Bool)

(assert (=> b!137725 (= res!66022 (= (seekEntryOrOpen!0 (select (arr!2272 (_keys!4642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4642 newMap!16) (mask!7203 newMap!16)) (Found!286 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!137725 (=> (not res!66022) (not e!89648))))

(assert (= (and d!43231 (not res!66021)) b!137723))

(assert (= (and b!137723 c!25862) b!137725))

(assert (= (and b!137723 (not c!25862)) b!137724))

(assert (= (and b!137725 res!66022) b!137722))

(assert (= (or b!137722 b!137724) bm!15180))

(declare-fun m!165123 () Bool)

(assert (=> bm!15180 m!165123))

(assert (=> b!137723 m!163521))

(assert (=> b!137723 m!163521))

(assert (=> b!137723 m!163523))

(assert (=> b!137725 m!163521))

(declare-fun m!165125 () Bool)

(assert (=> b!137725 m!165125))

(declare-fun m!165127 () Bool)

(assert (=> b!137725 m!165127))

(assert (=> b!137725 m!163521))

(declare-fun m!165129 () Bool)

(assert (=> b!137725 m!165129))

(assert (=> bm!15025 d!43231))

(declare-fun d!43233 () Bool)

(assert (=> d!43233 (= (get!1502 (getValueByKey!172 (toList!873 lt!71169) lt!71170)) (v!3224 (getValueByKey!172 (toList!873 lt!71169) lt!71170)))))

(assert (=> d!42649 d!43233))

(declare-fun d!43235 () Bool)

(declare-fun c!25863 () Bool)

(assert (=> d!43235 (= c!25863 (and ((_ is Cons!1737) (toList!873 lt!71169)) (= (_1!1321 (h!2343 (toList!873 lt!71169))) lt!71170)))))

(declare-fun e!89649 () Option!178)

(assert (=> d!43235 (= (getValueByKey!172 (toList!873 lt!71169) lt!71170) e!89649)))

(declare-fun b!137728 () Bool)

(declare-fun e!89650 () Option!178)

(assert (=> b!137728 (= e!89650 (getValueByKey!172 (t!6241 (toList!873 lt!71169)) lt!71170))))

(declare-fun b!137726 () Bool)

(assert (=> b!137726 (= e!89649 (Some!177 (_2!1321 (h!2343 (toList!873 lt!71169)))))))

(declare-fun b!137729 () Bool)

(assert (=> b!137729 (= e!89650 None!176)))

(declare-fun b!137727 () Bool)

(assert (=> b!137727 (= e!89649 e!89650)))

(declare-fun c!25864 () Bool)

(assert (=> b!137727 (= c!25864 (and ((_ is Cons!1737) (toList!873 lt!71169)) (not (= (_1!1321 (h!2343 (toList!873 lt!71169))) lt!71170))))))

(assert (= (and d!43235 c!25863) b!137726))

(assert (= (and d!43235 (not c!25863)) b!137727))

(assert (= (and b!137727 c!25864) b!137728))

(assert (= (and b!137727 (not c!25864)) b!137729))

(declare-fun m!165131 () Bool)

(assert (=> b!137728 m!165131))

(assert (=> d!42649 d!43235))

(assert (=> b!136665 d!42809))

(assert (=> bm!15074 d!42563))

(declare-fun condMapEmpty!4703 () Bool)

(declare-fun mapDefault!4703 () ValueCell!1101)

(assert (=> mapNonEmpty!4702 (= condMapEmpty!4703 (= mapRest!4702 ((as const (Array (_ BitVec 32) ValueCell!1101)) mapDefault!4703)))))

(declare-fun e!89652 () Bool)

(declare-fun mapRes!4703 () Bool)

(assert (=> mapNonEmpty!4702 (= tp!11308 (and e!89652 mapRes!4703))))

(declare-fun mapNonEmpty!4703 () Bool)

(declare-fun tp!11309 () Bool)

(declare-fun e!89651 () Bool)

(assert (=> mapNonEmpty!4703 (= mapRes!4703 (and tp!11309 e!89651))))

(declare-fun mapRest!4703 () (Array (_ BitVec 32) ValueCell!1101))

(declare-fun mapKey!4703 () (_ BitVec 32))

(declare-fun mapValue!4703 () ValueCell!1101)

(assert (=> mapNonEmpty!4703 (= mapRest!4702 (store mapRest!4703 mapKey!4703 mapValue!4703))))

(declare-fun mapIsEmpty!4703 () Bool)

(assert (=> mapIsEmpty!4703 mapRes!4703))

(declare-fun b!137731 () Bool)

(assert (=> b!137731 (= e!89652 tp_is_empty!2889)))

(declare-fun b!137730 () Bool)

(assert (=> b!137730 (= e!89651 tp_is_empty!2889)))

(assert (= (and mapNonEmpty!4702 condMapEmpty!4703) mapIsEmpty!4703))

(assert (= (and mapNonEmpty!4702 (not condMapEmpty!4703)) mapNonEmpty!4703))

(assert (= (and mapNonEmpty!4703 ((_ is ValueCellFull!1101) mapValue!4703)) b!137730))

(assert (= (and mapNonEmpty!4702 ((_ is ValueCellFull!1101) mapDefault!4703)) b!137731))

(declare-fun m!165133 () Bool)

(assert (=> mapNonEmpty!4703 m!165133))

(declare-fun condMapEmpty!4704 () Bool)

(declare-fun mapDefault!4704 () ValueCell!1101)

(assert (=> mapNonEmpty!4701 (= condMapEmpty!4704 (= mapRest!4701 ((as const (Array (_ BitVec 32) ValueCell!1101)) mapDefault!4704)))))

(declare-fun e!89654 () Bool)

(declare-fun mapRes!4704 () Bool)

(assert (=> mapNonEmpty!4701 (= tp!11307 (and e!89654 mapRes!4704))))

(declare-fun mapNonEmpty!4704 () Bool)

(declare-fun tp!11310 () Bool)

(declare-fun e!89653 () Bool)

(assert (=> mapNonEmpty!4704 (= mapRes!4704 (and tp!11310 e!89653))))

(declare-fun mapRest!4704 () (Array (_ BitVec 32) ValueCell!1101))

(declare-fun mapValue!4704 () ValueCell!1101)

(declare-fun mapKey!4704 () (_ BitVec 32))

(assert (=> mapNonEmpty!4704 (= mapRest!4701 (store mapRest!4704 mapKey!4704 mapValue!4704))))

(declare-fun mapIsEmpty!4704 () Bool)

(assert (=> mapIsEmpty!4704 mapRes!4704))

(declare-fun b!137733 () Bool)

(assert (=> b!137733 (= e!89654 tp_is_empty!2889)))

(declare-fun b!137732 () Bool)

(assert (=> b!137732 (= e!89653 tp_is_empty!2889)))

(assert (= (and mapNonEmpty!4701 condMapEmpty!4704) mapIsEmpty!4704))

(assert (= (and mapNonEmpty!4701 (not condMapEmpty!4704)) mapNonEmpty!4704))

(assert (= (and mapNonEmpty!4704 ((_ is ValueCellFull!1101) mapValue!4704)) b!137732))

(assert (= (and mapNonEmpty!4701 ((_ is ValueCellFull!1101) mapDefault!4704)) b!137733))

(declare-fun m!165135 () Bool)

(assert (=> mapNonEmpty!4704 m!165135))

(declare-fun b_lambda!6179 () Bool)

(assert (= b_lambda!6159 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6179)))

(declare-fun b_lambda!6181 () Bool)

(assert (= b_lambda!6151 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6181)))

(declare-fun b_lambda!6183 () Bool)

(assert (= b_lambda!6147 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6183)))

(declare-fun b_lambda!6185 () Bool)

(assert (= b_lambda!6157 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6185)))

(declare-fun b_lambda!6187 () Bool)

(assert (= b_lambda!6145 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6187)))

(declare-fun b_lambda!6189 () Bool)

(assert (= b_lambda!6163 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6189)))

(declare-fun b_lambda!6191 () Bool)

(assert (= b_lambda!6171 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6191)))

(declare-fun b_lambda!6193 () Bool)

(assert (= b_lambda!6167 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6193)))

(declare-fun b_lambda!6195 () Bool)

(assert (= b_lambda!6173 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6195)))

(declare-fun b_lambda!6197 () Bool)

(assert (= b_lambda!6161 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6197)))

(declare-fun b_lambda!6199 () Bool)

(assert (= b_lambda!6165 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6199)))

(declare-fun b_lambda!6201 () Bool)

(assert (= b_lambda!6149 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6201)))

(declare-fun b_lambda!6203 () Bool)

(assert (= b_lambda!6175 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6203)))

(declare-fun b_lambda!6205 () Bool)

(assert (= b_lambda!6177 (or (and b!136196 b_free!2945 (= (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))) (defaultEntry!2889 newMap!16))) (and b!136192 b_free!2947) b_lambda!6205)))

(declare-fun b_lambda!6207 () Bool)

(assert (= b_lambda!6153 (or (and b!136196 b_free!2945) (and b!136192 b_free!2947 (= (defaultEntry!2889 newMap!16) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))))) b_lambda!6207)))

(declare-fun b_lambda!6209 () Bool)

(assert (= b_lambda!6155 (or (and b!136196 b_free!2945) (and b!136192 b_free!2947 (= (defaultEntry!2889 newMap!16) (defaultEntry!2889 (v!3220 (underlying!460 thiss!992))))) b_lambda!6209)))

(check-sat (not d!42989) (not bm!15178) (not d!42993) (not b!137519) (not d!43039) (not b_lambda!6191) (not d!42749) (not b!137606) (not b!137046) (not b_next!2947) (not b!136860) (not b!136969) (not b!137483) (not b!137364) (not b_lambda!6207) (not b!137652) (not d!43159) (not b_next!2945) (not bm!15152) (not b!137660) (not d!42779) (not b!137464) (not d!42999) (not b!137410) (not b!137458) (not b!137602) (not bm!15160) (not d!43081) (not b!137237) (not b!137201) (not b!137433) (not b!136946) (not d!42957) (not b!137189) (not b!137611) (not b!137391) (not b!137667) (not d!43079) (not d!43097) (not d!42995) (not b!137159) (not b!137268) (not d!42755) (not b!136905) (not b_lambda!6119) (not d!42943) (not d!43095) (not b!137012) (not b!137310) (not d!43117) (not b!136991) (not d!43077) (not b!137597) (not b!137132) (not b!137127) (not b!136973) (not bm!15113) (not bm!15141) (not d!42905) (not b!137165) b_and!8557 (not d!43173) (not d!42691) (not b!137200) (not b!137365) (not b!137657) (not d!42793) (not d!43073) (not b!137079) (not b!137145) (not d!42925) b_and!8559 (not b!137010) (not d!43037) (not d!43025) (not b!137481) (not b!137017) (not d!43151) (not d!43157) (not b!136871) (not b!137584) (not b!137055) (not bm!15161) (not d!42973) (not b!137645) (not d!42789) (not b!137092) (not d!42953) (not d!43183) (not d!42701) (not d!43145) (not b!137694) (not bm!15098) (not b!137351) (not d!42805) (not d!43211) (not b!137324) (not d!42891) (not b!137053) (not b_lambda!6197) (not b!137156) (not b!137329) (not b!137187) (not b!137342) (not b!137500) (not d!42971) (not b!137006) (not b_lambda!6135) (not b_lambda!6187) (not b!137298) (not b!137039) (not bm!15099) (not b_lambda!6115) (not d!43085) (not bm!15084) (not b!137469) (not b!137047) (not b!137154) (not b!137510) (not d!42777) (not d!42841) (not d!42961) (not d!43131) (not d!42903) (not b!137513) (not b!137580) (not b!137085) (not b!137664) (not b!137242) (not b!136989) (not bm!15163) (not b!136863) (not bm!15142) (not b!137655) (not b!137261) (not b!136999) (not b!136918) (not d!42829) (not b_lambda!6133) (not d!42871) (not d!42787) (not b!137149) (not b!137073) (not b!137577) (not d!42771) (not b!137182) (not bm!15162) (not b!137659) (not b!137386) (not b!137095) (not b!137185) (not d!43119) (not b!137136) (not b!137398) (not b!137446) (not b!137033) (not b!137002) (not b!137296) (not b!136986) (not d!42917) (not d!43045) (not d!43029) (not d!42937) (not d!42945) (not d!43205) (not d!42873) (not b!137334) (not d!43109) (not d!43199) (not d!42783) (not b!137497) (not b!137720) (not d!42761) (not bm!15083) (not b!137146) (not b!137576) (not d!42915) (not b!137475) (not b!137587) (not b!137019) (not d!42955) (not b!137375) (not b!136906) (not b!137347) (not b!137332) (not b!137037) (not d!43133) (not b!137021) (not bm!15167) (not b!137495) (not b!136880) (not b!136951) (not b!136961) (not d!42685) (not b!137489) (not b!137323) (not b!137241) (not b!137444) (not b!137270) (not d!42967) (not b!137376) (not b!137408) (not b!137191) (not d!42695) (not b_lambda!6185) (not b!137567) (not b!136981) (not b!137050) (not b!136959) (not d!42849) (not bm!15125) (not b!137689) (not b!137390) (not bm!15137) (not b!137045) (not b!137397) (not d!42969) (not bm!15177) (not b!137339) (not b!137383) (not b!137023) (not b!137038) (not b!137040) (not d!43007) (not b!137353) (not d!42811) (not d!43067) (not d!42941) (not b!136904) (not b!137007) (not b!137528) (not d!43229) (not b!137181) (not d!42729) (not b!137287) (not b!137521) (not b!136962) (not d!42977) (not b!137164) (not d!42939) (not b!137557) (not b!137599) (not b!137696) (not bm!15133) (not d!43087) (not b!137401) (not b!137284) (not d!43069) (not b!137420) (not b!136907) (not d!42713) (not b!137368) (not bm!15151) (not d!42875) (not d!42733) (not d!43223) (not b!137636) (not d!42883) (not b!137084) (not b!137514) (not bm!15130) (not bm!15112) (not d!42899) (not b!137394) (not d!42721) (not b!136979) (not b_lambda!6193) (not b_lambda!6205) (not b!137082) (not d!42727) (not bm!15170) (not d!42893) (not d!43071) (not d!43167) (not b!137711) (not d!42923) (not d!43083) (not d!43019) (not d!43207) (not b!137014) (not b!137321) (not b!137197) (not bm!15108) (not d!43187) (not b!137417) (not b!137263) (not b!136865) (not b!137533) (not b!137247) (not b!137715) (not b!137411) (not b!137515) (not b!137566) (not d!43049) (not b!137439) (not b!137505) (not b!137523) (not bm!15143) (not b!137490) (not b!137406) (not bm!15156) (not d!43141) (not d!42983) (not b!137595) (not d!42897) (not b!137004) (not b!137488) (not d!43121) (not b!136964) (not b!137472) (not b!136896) (not d!43043) (not d!43137) (not b!137387) (not d!43101) (not d!42837) (not b!137662) (not b!137451) (not bm!15117) (not b!137478) (not d!42717) (not d!42867) (not b!137238) (not b!137209) (not b!137362) (not b!137062) (not d!43027) (not b!136909) tp_is_empty!2889 (not d!43225) (not d!42827) (not d!43021) (not b_lambda!6199) (not b!137175) (not d!43107) (not d!42705) (not b!137718) (not b!137260) (not b!137436) (not bm!15179) (not bm!15123) (not bm!15129) (not b!137331) (not b!137463) (not b!137589) (not bm!15104) (not d!42785) (not b!137272) (not b_lambda!6169) (not d!43147) (not d!43127) (not b!137624) (not d!43001) (not b!137708) (not d!42711) (not b!136956) (not d!42739) (not d!43033) (not b!137721) (not b!137141) (not b!137474) (not b!137271) (not b!137008) (not b!137134) (not b!137203) (not b!137240) (not b!137188) (not d!43035) (not b!137294) (not bm!15128) (not b!136900) (not b!137279) (not b!137190) (not b!137077) (not d!43017) (not d!42697) (not bm!15081) (not d!42831) (not d!42921) (not b!137120) (not b!137631) (not b!137144) (not d!42987) (not d!43103) (not b!137486) (not b!136941) (not b!137052) (not b!137235) (not b!137252) (not b!137467) (not b!137246) (not b!137678) (not d!42835) (not b!137319) (not d!42845) (not b!137358) (not b!137725) (not d!42791) (not d!42865) (not b!137345) (not b!137535) (not b!137396) (not d!43227) (not b_lambda!6195) (not b!137354) (not b!137234) (not d!43105) (not b!137407) (not bm!15165) (not d!42781) (not bm!15175) (not b!137044) (not b_lambda!6139) (not d!43115) (not b!137152) (not b!137153) (not b!136891) (not b!137256) (not b!137125) (not d!42997) (not d!42751) (not b!137167) (not b!137681) (not d!43093) (not b!137421) (not bm!15147) (not b!137290) (not b!137404) (not b!137471) (not b!136954) (not bm!15102) (not b!137728) (not bm!15127) (not bm!15169) (not mapNonEmpty!4704) (not bm!15094) (not b!137723) (not bm!15091) (not b!137172) (not bm!15124) (not d!43015) (not b!136996) (not d!42863) (not b!137502) (not b!137448) (not b!137101) (not d!43089) (not bm!15149) (not b!136897) (not b!137295) (not b!137239) (not b!137453) (not b!137176) (not b!136902) (not b!137370) (not b!136972) (not b!136887) (not b!136953) (not d!42775) (not b!137609) (not b!137692) (not b!136988) (not b!137643) (not d!42707) (not d!43065) (not b!137311) (not b!137262) (not d!42803) (not b_lambda!6181) (not b!137024) (not d!43113) (not b!137493) (not b!137373) (not b!137429) (not b!137503) (not b!136919) (not b!136882) (not d!42735) (not b_lambda!6143) (not b!137565) (not b!137315) (not d!43171) (not bm!15153) (not d!43203) (not d!42737) (not bm!15171) (not b!137367) (not b!137013) (not d!43185) (not b!137356) (not b!137468) (not b!137491) (not b!136867) (not b!137716) (not b_lambda!6203) (not d!42963) (not b!137035) (not b!137355) (not b_lambda!6209) (not b!137685) (not d!43169) (not d!43221) (not b!137618) (not d!42819) (not d!42951) (not b!137409) (not d!43189) (not d!42799) (not b!137604) (not b!137312) (not bm!15118) (not b!136889) (not d!42851) (not b!137484) (not b!137615) (not b!137671) (not d!43031) (not b!137297) (not b!137115) (not b!137299) (not b!137066) (not b!137058) (not d!42765) (not b!137701) (not bm!15180) (not b!137282) (not b!137713) (not d!42757) (not b!137378) (not bm!15103) (not b!137022) (not bm!15158) (not b!137526) (not b!137591) (not b!137257) (not b!137259) (not b!137304) (not bm!15173) (not b!136949) (not b!137460) (not b!137455) (not d!43213) (not b!136858) (not d!42981) (not b!136854) (not d!43129) (not b!137485) (not b!137027) (not b!137275) (not b!137581) (not b!137462) (not d!42927) (not b!137699) (not b!137139) (not b!137249) (not d!43023) (not b_lambda!6201) (not b!137313) (not b!137129) (not b!136873) (not b!137412) (not b!137326) (not b!137254) (not b!137198) (not b!137613) (not bm!15126) (not d!42795) (not d!43201) (not d!42843) (not b!136885) (not d!43011) (not b!137036) (not d!42919) (not bm!15154) (not b!137494) (not b!137579) (not b!137121) (not b!136975) (not b!136894) (not d!43061) (not b!137360) (not b!137628) (not b!137283) (not b!137473) (not d!43041) (not b!137530) (not d!43111) (not b_lambda!6137) (not b!137621) (not d!42913) (not b!137650) (not b!137438) (not b!137162) (not b!137292) (not d!43123) (not b!136875) (not bm!15110) (not bm!15079) (not b!137487) (not bm!15139) (not b!136878) (not b!137348) (not bm!15114) (not d!43163) (not d!42839) (not d!42877) (not b!137206) (not b!137673) (not b!137641) (not b!136983) (not b!137288) (not b!137648) (not b!137314) (not d!43181) (not b!137048) (not d!42889) (not d!43063) (not b_lambda!6189) (not b!137087) (not d!42797) (not b_lambda!6141) (not b!137350) (not b!137413) (not b!137248) (not d!42689) (not b!137415) (not b!137143) (not b!136912) (not d!42821) (not b_lambda!6183) (not d!42723) (not mapNonEmpty!4703) (not d!42985) (not d!42773) (not b!137157) (not d!42801) (not b!137029) (not d!42853) (not d!43135) (not b!137400) (not b!137074) (not b!137025) (not b!137032) (not b!137320) (not bm!15095) (not b_lambda!6179) (not b!137307) (not d!43091) (not b!137687) (not d!43075) (not b!137179) (not b!137389) (not d!43149) (not d!43125) (not d!43009) (not b!137303) (not b!137192) (not b!137076) (not d!43143) (not d!42855) (not d!42745) (not d!42887) (not b!137196) (not d!42817))
(check-sat b_and!8557 b_and!8559 (not b_next!2945) (not b_next!2947))
