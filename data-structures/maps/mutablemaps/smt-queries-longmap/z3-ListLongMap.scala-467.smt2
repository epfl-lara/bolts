; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8884 () Bool)

(assert start!8884)

(declare-fun b!62232 () Bool)

(declare-fun b_free!1997 () Bool)

(declare-fun b_next!1997 () Bool)

(assert (=> b!62232 (= b_free!1997 (not b_next!1997))))

(declare-fun tp!8122 () Bool)

(declare-fun b_and!3801 () Bool)

(assert (=> b!62232 (= tp!8122 b_and!3801)))

(declare-fun b!62236 () Bool)

(declare-fun b_free!1999 () Bool)

(declare-fun b_next!1999 () Bool)

(assert (=> b!62236 (= b_free!1999 (not b_next!1999))))

(declare-fun tp!8120 () Bool)

(declare-fun b_and!3803 () Bool)

(assert (=> b!62236 (= tp!8120 b_and!3803)))

(declare-fun b!62226 () Bool)

(declare-fun res!34172 () Bool)

(declare-fun e!40873 () Bool)

(assert (=> b!62226 (=> (not res!34172) (not e!40873))))

(declare-datatypes ((V!2867 0))(
  ( (V!2868 (val!1252 Int)) )
))
(declare-datatypes ((array!3760 0))(
  ( (array!3761 (arr!1798 (Array (_ BitVec 32) (_ BitVec 64))) (size!2030 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!864 0))(
  ( (ValueCellFull!864 (v!2418 V!2867)) (EmptyCell!864) )
))
(declare-datatypes ((array!3762 0))(
  ( (array!3763 (arr!1799 (Array (_ BitVec 32) ValueCell!864)) (size!2031 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!636 0))(
  ( (LongMapFixedSize!637 (defaultEntry!2088 Int) (mask!5994 (_ BitVec 32)) (extraKeys!1967 (_ BitVec 32)) (zeroValue!2000 V!2867) (minValue!2000 V!2867) (_size!367 (_ BitVec 32)) (_keys!3720 array!3760) (_values!2071 array!3762) (_vacant!367 (_ BitVec 32))) )
))
(declare-fun newMap!16 () LongMapFixedSize!636)

(declare-datatypes ((Cell!446 0))(
  ( (Cell!447 (v!2419 LongMapFixedSize!636)) )
))
(declare-datatypes ((LongMap!446 0))(
  ( (LongMap!447 (underlying!234 Cell!446)) )
))
(declare-fun thiss!992 () LongMap!446)

(assert (=> b!62226 (= res!34172 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5994 newMap!16)) (_size!367 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun b!62227 () Bool)

(declare-fun res!34171 () Bool)

(declare-fun e!40880 () Bool)

(assert (=> b!62227 (=> (not res!34171) (not e!40880))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!62227 (= res!34171 (validMask!0 (mask!5994 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun b!62228 () Bool)

(declare-fun e!40869 () Bool)

(declare-fun tp_is_empty!2415 () Bool)

(assert (=> b!62228 (= e!40869 tp_is_empty!2415)))

(declare-fun b!62229 () Bool)

(declare-fun res!34177 () Bool)

(assert (=> b!62229 (=> (not res!34177) (not e!40873))))

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!62229 (= res!34177 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!62230 () Bool)

(declare-fun e!40881 () Bool)

(assert (=> b!62230 (= e!40873 e!40881)))

(declare-fun res!34176 () Bool)

(assert (=> b!62230 (=> (not res!34176) (not e!40881))))

(declare-datatypes ((tuple2!2066 0))(
  ( (tuple2!2067 (_1!1043 (_ BitVec 64)) (_2!1043 V!2867)) )
))
(declare-datatypes ((List!1463 0))(
  ( (Nil!1460) (Cons!1459 (h!2042 tuple2!2066) (t!4861 List!1463)) )
))
(declare-datatypes ((ListLongMap!1389 0))(
  ( (ListLongMap!1390 (toList!710 List!1463)) )
))
(declare-fun lt!25847 () ListLongMap!1389)

(declare-fun lt!25845 () ListLongMap!1389)

(assert (=> b!62230 (= res!34176 (and (= lt!25847 lt!25845) (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1119 (LongMapFixedSize!636) ListLongMap!1389)

(assert (=> b!62230 (= lt!25845 (map!1119 newMap!16))))

(declare-fun getCurrentListMap!407 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) Int) ListLongMap!1389)

(assert (=> b!62230 (= lt!25847 (getCurrentListMap!407 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun b!62231 () Bool)

(declare-fun e!40870 () Bool)

(declare-fun e!40866 () Bool)

(assert (=> b!62231 (= e!40870 e!40866)))

(declare-fun e!40874 () Bool)

(declare-fun e!40875 () Bool)

(declare-fun array_inv!1063 (array!3760) Bool)

(declare-fun array_inv!1064 (array!3762) Bool)

(assert (=> b!62232 (= e!40875 (and tp!8122 tp_is_empty!2415 (array_inv!1063 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (array_inv!1064 (_values!2071 (v!2419 (underlying!234 thiss!992)))) e!40874))))

(declare-fun b!62233 () Bool)

(assert (=> b!62233 (= e!40881 e!40880)))

(declare-fun res!34173 () Bool)

(assert (=> b!62233 (=> (not res!34173) (not e!40880))))

(declare-datatypes ((tuple2!2068 0))(
  ( (tuple2!2069 (_1!1044 Bool) (_2!1044 LongMapFixedSize!636)) )
))
(declare-fun lt!25843 () tuple2!2068)

(assert (=> b!62233 (= res!34173 (and (_1!1044 lt!25843) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-datatypes ((Unit!1689 0))(
  ( (Unit!1690) )
))
(declare-fun lt!25844 () Unit!1689)

(declare-fun e!40879 () Unit!1689)

(assert (=> b!62233 (= lt!25844 e!40879)))

(declare-fun c!8276 () Bool)

(declare-fun contains!700 (ListLongMap!1389 (_ BitVec 64)) Bool)

(assert (=> b!62233 (= c!8276 (contains!700 lt!25845 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun update!88 (LongMapFixedSize!636 (_ BitVec 64) V!2867) tuple2!2068)

(declare-fun get!1096 (ValueCell!864 V!2867) V!2867)

(declare-fun dynLambda!316 (Int (_ BitVec 64)) V!2867)

(assert (=> b!62233 (= lt!25843 (update!88 newMap!16 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62234 () Bool)

(declare-fun Unit!1691 () Unit!1689)

(assert (=> b!62234 (= e!40879 Unit!1691)))

(declare-fun lt!25846 () Unit!1689)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!32 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) (_ BitVec 32) Int) Unit!1689)

(assert (=> b!62234 (= lt!25846 (lemmaListMapContainsThenArrayContainsFrom!32 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3760 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!62234 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!25842 () Unit!1689)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3760 (_ BitVec 32) (_ BitVec 32)) Unit!1689)

(assert (=> b!62234 (= lt!25842 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1464 0))(
  ( (Nil!1461) (Cons!1460 (h!2043 (_ BitVec 64)) (t!4862 List!1464)) )
))
(declare-fun arrayNoDuplicates!0 (array!3760 (_ BitVec 32) List!1464) Bool)

(assert (=> b!62234 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) from!355 Nil!1461)))

(declare-fun lt!25841 () Unit!1689)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3760 (_ BitVec 32) (_ BitVec 64) List!1464) Unit!1689)

(assert (=> b!62234 (= lt!25841 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461)))))

(assert (=> b!62234 false))

(declare-fun mapIsEmpty!2943 () Bool)

(declare-fun mapRes!2943 () Bool)

(assert (=> mapIsEmpty!2943 mapRes!2943))

(declare-fun e!40867 () Bool)

(declare-fun e!40868 () Bool)

(assert (=> b!62236 (= e!40868 (and tp!8120 tp_is_empty!2415 (array_inv!1063 (_keys!3720 newMap!16)) (array_inv!1064 (_values!2071 newMap!16)) e!40867))))

(declare-fun b!62237 () Bool)

(declare-fun Unit!1692 () Unit!1689)

(assert (=> b!62237 (= e!40879 Unit!1692)))

(declare-fun b!62238 () Bool)

(declare-fun res!34174 () Bool)

(assert (=> b!62238 (=> (not res!34174) (not e!40873))))

(declare-fun valid!263 (LongMapFixedSize!636) Bool)

(assert (=> b!62238 (= res!34174 (valid!263 newMap!16))))

(declare-fun b!62239 () Bool)

(declare-fun e!40877 () Bool)

(assert (=> b!62239 (= e!40877 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2944 () Bool)

(declare-fun mapRes!2944 () Bool)

(assert (=> mapIsEmpty!2944 mapRes!2944))

(declare-fun b!62240 () Bool)

(assert (=> b!62240 (= e!40866 e!40875)))

(declare-fun mapNonEmpty!2943 () Bool)

(declare-fun tp!8121 () Bool)

(assert (=> mapNonEmpty!2943 (= mapRes!2944 (and tp!8121 e!40869))))

(declare-fun mapKey!2944 () (_ BitVec 32))

(declare-fun mapRest!2944 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun mapValue!2944 () ValueCell!864)

(assert (=> mapNonEmpty!2943 (= (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (store mapRest!2944 mapKey!2944 mapValue!2944))))

(declare-fun b!62241 () Bool)

(declare-fun e!40871 () Bool)

(assert (=> b!62241 (= e!40871 tp_is_empty!2415)))

(declare-fun b!62242 () Bool)

(assert (=> b!62242 (= e!40880 (and (= (size!2031 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5994 (v!2419 (underlying!234 thiss!992))))) (= (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (size!2031 (_values!2071 (v!2419 (underlying!234 thiss!992))))) (bvsge (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000) (bvsge (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000) (bvsgt (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000011)))))

(declare-fun mapNonEmpty!2944 () Bool)

(declare-fun tp!8119 () Bool)

(assert (=> mapNonEmpty!2944 (= mapRes!2943 (and tp!8119 e!40871))))

(declare-fun mapValue!2943 () ValueCell!864)

(declare-fun mapKey!2943 () (_ BitVec 32))

(declare-fun mapRest!2943 () (Array (_ BitVec 32) ValueCell!864))

(assert (=> mapNonEmpty!2944 (= (arr!1799 (_values!2071 newMap!16)) (store mapRest!2943 mapKey!2943 mapValue!2943))))

(declare-fun res!34175 () Bool)

(assert (=> start!8884 (=> (not res!34175) (not e!40873))))

(declare-fun valid!264 (LongMap!446) Bool)

(assert (=> start!8884 (= res!34175 (valid!264 thiss!992))))

(assert (=> start!8884 e!40873))

(assert (=> start!8884 e!40870))

(assert (=> start!8884 true))

(assert (=> start!8884 e!40868))

(declare-fun b!62235 () Bool)

(assert (=> b!62235 (= e!40874 (and e!40877 mapRes!2944))))

(declare-fun condMapEmpty!2943 () Bool)

(declare-fun mapDefault!2944 () ValueCell!864)

(assert (=> b!62235 (= condMapEmpty!2943 (= (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2944)))))

(declare-fun b!62243 () Bool)

(declare-fun e!40872 () Bool)

(assert (=> b!62243 (= e!40872 tp_is_empty!2415)))

(declare-fun b!62244 () Bool)

(assert (=> b!62244 (= e!40867 (and e!40872 mapRes!2943))))

(declare-fun condMapEmpty!2944 () Bool)

(declare-fun mapDefault!2943 () ValueCell!864)

(assert (=> b!62244 (= condMapEmpty!2944 (= (arr!1799 (_values!2071 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2943)))))

(assert (= (and start!8884 res!34175) b!62229))

(assert (= (and b!62229 res!34177) b!62238))

(assert (= (and b!62238 res!34174) b!62226))

(assert (= (and b!62226 res!34172) b!62230))

(assert (= (and b!62230 res!34176) b!62233))

(assert (= (and b!62233 c!8276) b!62234))

(assert (= (and b!62233 (not c!8276)) b!62237))

(assert (= (and b!62233 res!34173) b!62227))

(assert (= (and b!62227 res!34171) b!62242))

(assert (= (and b!62235 condMapEmpty!2943) mapIsEmpty!2944))

(assert (= (and b!62235 (not condMapEmpty!2943)) mapNonEmpty!2943))

(get-info :version)

(assert (= (and mapNonEmpty!2943 ((_ is ValueCellFull!864) mapValue!2944)) b!62228))

(assert (= (and b!62235 ((_ is ValueCellFull!864) mapDefault!2944)) b!62239))

(assert (= b!62232 b!62235))

(assert (= b!62240 b!62232))

(assert (= b!62231 b!62240))

(assert (= start!8884 b!62231))

(assert (= (and b!62244 condMapEmpty!2944) mapIsEmpty!2943))

(assert (= (and b!62244 (not condMapEmpty!2944)) mapNonEmpty!2944))

(assert (= (and mapNonEmpty!2944 ((_ is ValueCellFull!864) mapValue!2943)) b!62241))

(assert (= (and b!62244 ((_ is ValueCellFull!864) mapDefault!2943)) b!62243))

(assert (= b!62236 b!62244))

(assert (= start!8884 b!62236))

(declare-fun b_lambda!2787 () Bool)

(assert (=> (not b_lambda!2787) (not b!62233)))

(declare-fun t!4858 () Bool)

(declare-fun tb!1373 () Bool)

(assert (=> (and b!62232 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))) t!4858) tb!1373))

(declare-fun result!2449 () Bool)

(assert (=> tb!1373 (= result!2449 tp_is_empty!2415)))

(assert (=> b!62233 t!4858))

(declare-fun b_and!3805 () Bool)

(assert (= b_and!3801 (and (=> t!4858 result!2449) b_and!3805)))

(declare-fun t!4860 () Bool)

(declare-fun tb!1375 () Bool)

(assert (=> (and b!62236 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))) t!4860) tb!1375))

(declare-fun result!2453 () Bool)

(assert (= result!2453 result!2449))

(assert (=> b!62233 t!4860))

(declare-fun b_and!3807 () Bool)

(assert (= b_and!3803 (and (=> t!4860 result!2453) b_and!3807)))

(declare-fun m!55699 () Bool)

(assert (=> b!62232 m!55699))

(declare-fun m!55701 () Bool)

(assert (=> b!62232 m!55701))

(declare-fun m!55703 () Bool)

(assert (=> b!62227 m!55703))

(declare-fun m!55705 () Bool)

(assert (=> b!62230 m!55705))

(declare-fun m!55707 () Bool)

(assert (=> b!62230 m!55707))

(declare-fun m!55709 () Bool)

(assert (=> b!62230 m!55709))

(declare-fun m!55711 () Bool)

(assert (=> mapNonEmpty!2943 m!55711))

(declare-fun m!55713 () Bool)

(assert (=> start!8884 m!55713))

(declare-fun m!55715 () Bool)

(assert (=> b!62238 m!55715))

(declare-fun m!55717 () Bool)

(assert (=> b!62234 m!55717))

(declare-fun m!55719 () Bool)

(assert (=> b!62234 m!55719))

(assert (=> b!62234 m!55705))

(declare-fun m!55721 () Bool)

(assert (=> b!62234 m!55721))

(assert (=> b!62234 m!55705))

(assert (=> b!62234 m!55705))

(declare-fun m!55723 () Bool)

(assert (=> b!62234 m!55723))

(assert (=> b!62234 m!55705))

(declare-fun m!55725 () Bool)

(assert (=> b!62234 m!55725))

(declare-fun m!55727 () Bool)

(assert (=> b!62233 m!55727))

(declare-fun m!55729 () Bool)

(assert (=> b!62233 m!55729))

(declare-fun m!55731 () Bool)

(assert (=> b!62233 m!55731))

(assert (=> b!62233 m!55705))

(assert (=> b!62233 m!55729))

(assert (=> b!62233 m!55705))

(declare-fun m!55733 () Bool)

(assert (=> b!62233 m!55733))

(assert (=> b!62233 m!55705))

(assert (=> b!62233 m!55731))

(declare-fun m!55735 () Bool)

(assert (=> b!62233 m!55735))

(assert (=> b!62233 m!55727))

(declare-fun m!55737 () Bool)

(assert (=> b!62236 m!55737))

(declare-fun m!55739 () Bool)

(assert (=> b!62236 m!55739))

(declare-fun m!55741 () Bool)

(assert (=> mapNonEmpty!2944 m!55741))

(check-sat b_and!3805 (not b_next!1997) (not b_lambda!2787) (not b!62232) (not b!62236) b_and!3807 (not b_next!1999) tp_is_empty!2415 (not mapNonEmpty!2944) (not mapNonEmpty!2943) (not b!62233) (not start!8884) (not b!62230) (not b!62227) (not b!62238) (not b!62234))
(check-sat b_and!3805 b_and!3807 (not b_next!1997) (not b_next!1999))
(get-model)

(declare-fun b_lambda!2791 () Bool)

(assert (= b_lambda!2787 (or (and b!62232 b_free!1997) (and b!62236 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))))) b_lambda!2791)))

(check-sat b_and!3805 (not b_next!1997) (not b!62232) (not b!62236) b_and!3807 (not b_next!1999) tp_is_empty!2415 (not mapNonEmpty!2944) (not b_lambda!2791) (not mapNonEmpty!2943) (not b!62233) (not start!8884) (not b!62230) (not b!62227) (not b!62238) (not b!62234))
(check-sat b_and!3805 b_and!3807 (not b_next!1997) (not b_next!1999))
(get-model)

(declare-fun d!12605 () Bool)

(assert (=> d!12605 (= (map!1119 newMap!16) (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun bs!2705 () Bool)

(assert (= bs!2705 d!12605))

(declare-fun m!55787 () Bool)

(assert (=> bs!2705 m!55787))

(assert (=> b!62230 d!12605))

(declare-fun b!62348 () Bool)

(declare-fun c!8292 () Bool)

(assert (=> b!62348 (= c!8292 (and (not (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40965 () ListLongMap!1389)

(declare-fun e!40958 () ListLongMap!1389)

(assert (=> b!62348 (= e!40965 e!40958)))

(declare-fun bm!4828 () Bool)

(declare-fun call!4834 () ListLongMap!1389)

(declare-fun call!4831 () ListLongMap!1389)

(assert (=> bm!4828 (= call!4834 call!4831)))

(declare-fun b!62349 () Bool)

(declare-fun e!40966 () Bool)

(declare-fun e!40968 () Bool)

(assert (=> b!62349 (= e!40966 e!40968)))

(declare-fun c!8295 () Bool)

(assert (=> b!62349 (= c!8295 (not (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62350 () Bool)

(declare-fun e!40957 () Bool)

(declare-fun e!40961 () Bool)

(assert (=> b!62350 (= e!40957 e!40961)))

(declare-fun res!34219 () Bool)

(assert (=> b!62350 (=> (not res!34219) (not e!40961))))

(declare-fun lt!25929 () ListLongMap!1389)

(assert (=> b!62350 (= res!34219 (contains!700 lt!25929 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62350 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!62351 () Bool)

(declare-fun apply!68 (ListLongMap!1389 (_ BitVec 64)) V!2867)

(assert (=> b!62351 (= e!40961 (= (apply!68 lt!25929 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62351 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_values!2071 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> b!62351 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!62352 () Bool)

(declare-fun e!40960 () Bool)

(declare-fun e!40956 () Bool)

(assert (=> b!62352 (= e!40960 e!40956)))

(declare-fun res!34220 () Bool)

(declare-fun call!4830 () Bool)

(assert (=> b!62352 (= res!34220 call!4830)))

(assert (=> b!62352 (=> (not res!34220) (not e!40956))))

(declare-fun bm!4829 () Bool)

(declare-fun call!4833 () ListLongMap!1389)

(assert (=> bm!4829 (= call!4831 call!4833)))

(declare-fun b!62353 () Bool)

(declare-fun e!40959 () Bool)

(assert (=> b!62353 (= e!40959 (= (apply!68 lt!25929 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun b!62354 () Bool)

(declare-fun res!34225 () Bool)

(assert (=> b!62354 (=> (not res!34225) (not e!40966))))

(assert (=> b!62354 (= res!34225 e!40957)))

(declare-fun res!34224 () Bool)

(assert (=> b!62354 (=> res!34224 e!40957)))

(declare-fun e!40962 () Bool)

(assert (=> b!62354 (= res!34224 (not e!40962))))

(declare-fun res!34218 () Bool)

(assert (=> b!62354 (=> (not res!34218) (not e!40962))))

(assert (=> b!62354 (= res!34218 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!62355 () Bool)

(declare-fun e!40967 () Unit!1689)

(declare-fun Unit!1696 () Unit!1689)

(assert (=> b!62355 (= e!40967 Unit!1696)))

(declare-fun b!62356 () Bool)

(declare-fun call!4836 () Bool)

(assert (=> b!62356 (= e!40968 (not call!4836))))

(declare-fun b!62357 () Bool)

(declare-fun e!40964 () ListLongMap!1389)

(declare-fun call!4835 () ListLongMap!1389)

(declare-fun +!83 (ListLongMap!1389 tuple2!2066) ListLongMap!1389)

(assert (=> b!62357 (= e!40964 (+!83 call!4835 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!62358 () Bool)

(declare-fun res!34217 () Bool)

(assert (=> b!62358 (=> (not res!34217) (not e!40966))))

(assert (=> b!62358 (= res!34217 e!40960)))

(declare-fun c!8296 () Bool)

(assert (=> b!62358 (= c!8296 (not (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62359 () Bool)

(assert (=> b!62359 (= e!40956 (= (apply!68 lt!25929 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun b!62360 () Bool)

(declare-fun lt!25930 () Unit!1689)

(assert (=> b!62360 (= e!40967 lt!25930)))

(declare-fun lt!25921 () ListLongMap!1389)

(declare-fun getCurrentListMapNoExtraKeys!46 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) Int) ListLongMap!1389)

(assert (=> b!62360 (= lt!25921 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun lt!25934 () (_ BitVec 64))

(assert (=> b!62360 (= lt!25934 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25931 () (_ BitVec 64))

(assert (=> b!62360 (= lt!25931 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25918 () Unit!1689)

(declare-fun addStillContains!44 (ListLongMap!1389 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1689)

(assert (=> b!62360 (= lt!25918 (addStillContains!44 lt!25921 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25931))))

(assert (=> b!62360 (contains!700 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25931)))

(declare-fun lt!25932 () Unit!1689)

(assert (=> b!62360 (= lt!25932 lt!25918)))

(declare-fun lt!25916 () ListLongMap!1389)

(assert (=> b!62360 (= lt!25916 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun lt!25922 () (_ BitVec 64))

(assert (=> b!62360 (= lt!25922 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25915 () (_ BitVec 64))

(assert (=> b!62360 (= lt!25915 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25914 () Unit!1689)

(declare-fun addApplyDifferent!44 (ListLongMap!1389 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1689)

(assert (=> b!62360 (= lt!25914 (addApplyDifferent!44 lt!25916 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25915))))

(assert (=> b!62360 (= (apply!68 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25915) (apply!68 lt!25916 lt!25915))))

(declare-fun lt!25917 () Unit!1689)

(assert (=> b!62360 (= lt!25917 lt!25914)))

(declare-fun lt!25923 () ListLongMap!1389)

(assert (=> b!62360 (= lt!25923 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun lt!25933 () (_ BitVec 64))

(assert (=> b!62360 (= lt!25933 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25926 () (_ BitVec 64))

(assert (=> b!62360 (= lt!25926 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25924 () Unit!1689)

(assert (=> b!62360 (= lt!25924 (addApplyDifferent!44 lt!25923 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25926))))

(assert (=> b!62360 (= (apply!68 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25926) (apply!68 lt!25923 lt!25926))))

(declare-fun lt!25927 () Unit!1689)

(assert (=> b!62360 (= lt!25927 lt!25924)))

(declare-fun lt!25919 () ListLongMap!1389)

(assert (=> b!62360 (= lt!25919 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun lt!25925 () (_ BitVec 64))

(assert (=> b!62360 (= lt!25925 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25928 () (_ BitVec 64))

(assert (=> b!62360 (= lt!25928 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!62360 (= lt!25930 (addApplyDifferent!44 lt!25919 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25928))))

(assert (=> b!62360 (= (apply!68 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25928) (apply!68 lt!25919 lt!25928))))

(declare-fun b!62361 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!62361 (= e!40962 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun bm!4830 () Bool)

(declare-fun call!4832 () ListLongMap!1389)

(assert (=> bm!4830 (= call!4832 call!4835)))

(declare-fun b!62362 () Bool)

(assert (=> b!62362 (= e!40968 e!40959)))

(declare-fun res!34221 () Bool)

(assert (=> b!62362 (= res!34221 call!4836)))

(assert (=> b!62362 (=> (not res!34221) (not e!40959))))

(declare-fun bm!4831 () Bool)

(assert (=> bm!4831 (= call!4833 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun bm!4832 () Bool)

(declare-fun c!8294 () Bool)

(declare-fun c!8297 () Bool)

(assert (=> bm!4832 (= call!4835 (+!83 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834)) (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!62363 () Bool)

(assert (=> b!62363 (= e!40964 e!40965)))

(assert (=> b!62363 (= c!8297 (and (not (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!12607 () Bool)

(assert (=> d!12607 e!40966))

(declare-fun res!34222 () Bool)

(assert (=> d!12607 (=> (not res!34222) (not e!40966))))

(assert (=> d!12607 (= res!34222 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun lt!25913 () ListLongMap!1389)

(assert (=> d!12607 (= lt!25929 lt!25913)))

(declare-fun lt!25920 () Unit!1689)

(assert (=> d!12607 (= lt!25920 e!40967)))

(declare-fun c!8293 () Bool)

(declare-fun e!40963 () Bool)

(assert (=> d!12607 (= c!8293 e!40963)))

(declare-fun res!34223 () Bool)

(assert (=> d!12607 (=> (not res!34223) (not e!40963))))

(assert (=> d!12607 (= res!34223 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> d!12607 (= lt!25913 e!40964)))

(assert (=> d!12607 (= c!8294 (and (not (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12607 (validMask!0 (mask!5994 (v!2419 (underlying!234 thiss!992))))))

(assert (=> d!12607 (= (getCurrentListMap!407 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))) lt!25929)))

(declare-fun bm!4827 () Bool)

(assert (=> bm!4827 (= call!4836 (contains!700 lt!25929 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62364 () Bool)

(assert (=> b!62364 (= e!40965 call!4832)))

(declare-fun b!62365 () Bool)

(assert (=> b!62365 (= e!40958 call!4832)))

(declare-fun bm!4833 () Bool)

(assert (=> bm!4833 (= call!4830 (contains!700 lt!25929 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62366 () Bool)

(assert (=> b!62366 (= e!40958 call!4834)))

(declare-fun b!62367 () Bool)

(assert (=> b!62367 (= e!40960 (not call!4830))))

(declare-fun b!62368 () Bool)

(assert (=> b!62368 (= e!40963 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!12607 c!8294) b!62357))

(assert (= (and d!12607 (not c!8294)) b!62363))

(assert (= (and b!62363 c!8297) b!62364))

(assert (= (and b!62363 (not c!8297)) b!62348))

(assert (= (and b!62348 c!8292) b!62365))

(assert (= (and b!62348 (not c!8292)) b!62366))

(assert (= (or b!62365 b!62366) bm!4828))

(assert (= (or b!62364 bm!4828) bm!4829))

(assert (= (or b!62364 b!62365) bm!4830))

(assert (= (or b!62357 bm!4829) bm!4831))

(assert (= (or b!62357 bm!4830) bm!4832))

(assert (= (and d!12607 res!34223) b!62368))

(assert (= (and d!12607 c!8293) b!62360))

(assert (= (and d!12607 (not c!8293)) b!62355))

(assert (= (and d!12607 res!34222) b!62354))

(assert (= (and b!62354 res!34218) b!62361))

(assert (= (and b!62354 (not res!34224)) b!62350))

(assert (= (and b!62350 res!34219) b!62351))

(assert (= (and b!62354 res!34225) b!62358))

(assert (= (and b!62358 c!8296) b!62352))

(assert (= (and b!62358 (not c!8296)) b!62367))

(assert (= (and b!62352 res!34220) b!62359))

(assert (= (or b!62352 b!62367) bm!4833))

(assert (= (and b!62358 res!34217) b!62349))

(assert (= (and b!62349 c!8295) b!62362))

(assert (= (and b!62349 (not c!8295)) b!62356))

(assert (= (and b!62362 res!34221) b!62353))

(assert (= (or b!62362 b!62356) bm!4827))

(declare-fun b_lambda!2793 () Bool)

(assert (=> (not b_lambda!2793) (not b!62351)))

(assert (=> b!62351 t!4858))

(declare-fun b_and!3817 () Bool)

(assert (= b_and!3805 (and (=> t!4858 result!2449) b_and!3817)))

(assert (=> b!62351 t!4860))

(declare-fun b_and!3819 () Bool)

(assert (= b_and!3807 (and (=> t!4860 result!2453) b_and!3819)))

(declare-fun m!55789 () Bool)

(assert (=> b!62357 m!55789))

(declare-fun m!55791 () Bool)

(assert (=> b!62359 m!55791))

(declare-fun m!55793 () Bool)

(assert (=> bm!4832 m!55793))

(declare-fun m!55795 () Bool)

(assert (=> b!62368 m!55795))

(assert (=> b!62368 m!55795))

(declare-fun m!55797 () Bool)

(assert (=> b!62368 m!55797))

(declare-fun m!55799 () Bool)

(assert (=> bm!4831 m!55799))

(assert (=> b!62361 m!55795))

(assert (=> b!62361 m!55795))

(assert (=> b!62361 m!55797))

(assert (=> b!62350 m!55795))

(assert (=> b!62350 m!55795))

(declare-fun m!55801 () Bool)

(assert (=> b!62350 m!55801))

(declare-fun m!55803 () Bool)

(assert (=> bm!4827 m!55803))

(assert (=> b!62360 m!55795))

(declare-fun m!55805 () Bool)

(assert (=> b!62360 m!55805))

(declare-fun m!55807 () Bool)

(assert (=> b!62360 m!55807))

(declare-fun m!55809 () Bool)

(assert (=> b!62360 m!55809))

(declare-fun m!55811 () Bool)

(assert (=> b!62360 m!55811))

(declare-fun m!55813 () Bool)

(assert (=> b!62360 m!55813))

(declare-fun m!55815 () Bool)

(assert (=> b!62360 m!55815))

(declare-fun m!55817 () Bool)

(assert (=> b!62360 m!55817))

(declare-fun m!55819 () Bool)

(assert (=> b!62360 m!55819))

(declare-fun m!55821 () Bool)

(assert (=> b!62360 m!55821))

(declare-fun m!55823 () Bool)

(assert (=> b!62360 m!55823))

(declare-fun m!55825 () Bool)

(assert (=> b!62360 m!55825))

(assert (=> b!62360 m!55811))

(declare-fun m!55827 () Bool)

(assert (=> b!62360 m!55827))

(declare-fun m!55829 () Bool)

(assert (=> b!62360 m!55829))

(assert (=> b!62360 m!55817))

(declare-fun m!55831 () Bool)

(assert (=> b!62360 m!55831))

(assert (=> b!62360 m!55805))

(assert (=> b!62360 m!55829))

(declare-fun m!55833 () Bool)

(assert (=> b!62360 m!55833))

(assert (=> b!62360 m!55799))

(assert (=> d!12607 m!55703))

(declare-fun m!55835 () Bool)

(assert (=> bm!4833 m!55835))

(declare-fun m!55837 () Bool)

(assert (=> b!62353 m!55837))

(assert (=> b!62351 m!55729))

(assert (=> b!62351 m!55795))

(assert (=> b!62351 m!55795))

(declare-fun m!55839 () Bool)

(assert (=> b!62351 m!55839))

(declare-fun m!55841 () Bool)

(assert (=> b!62351 m!55841))

(assert (=> b!62351 m!55729))

(declare-fun m!55843 () Bool)

(assert (=> b!62351 m!55843))

(assert (=> b!62351 m!55841))

(assert (=> b!62230 d!12607))

(declare-fun d!12609 () Bool)

(declare-fun res!34232 () Bool)

(declare-fun e!40971 () Bool)

(assert (=> d!12609 (=> (not res!34232) (not e!40971))))

(declare-fun simpleValid!43 (LongMapFixedSize!636) Bool)

(assert (=> d!12609 (= res!34232 (simpleValid!43 newMap!16))))

(assert (=> d!12609 (= (valid!263 newMap!16) e!40971)))

(declare-fun b!62375 () Bool)

(declare-fun res!34233 () Bool)

(assert (=> b!62375 (=> (not res!34233) (not e!40971))))

(declare-fun arrayCountValidKeys!0 (array!3760 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!62375 (= res!34233 (= (arrayCountValidKeys!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (_size!367 newMap!16)))))

(declare-fun b!62376 () Bool)

(declare-fun res!34234 () Bool)

(assert (=> b!62376 (=> (not res!34234) (not e!40971))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3760 (_ BitVec 32)) Bool)

(assert (=> b!62376 (= res!34234 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!62377 () Bool)

(assert (=> b!62377 (= e!40971 (arrayNoDuplicates!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 Nil!1461))))

(assert (= (and d!12609 res!34232) b!62375))

(assert (= (and b!62375 res!34233) b!62376))

(assert (= (and b!62376 res!34234) b!62377))

(declare-fun m!55845 () Bool)

(assert (=> d!12609 m!55845))

(declare-fun m!55847 () Bool)

(assert (=> b!62375 m!55847))

(declare-fun m!55849 () Bool)

(assert (=> b!62376 m!55849))

(declare-fun m!55851 () Bool)

(assert (=> b!62377 m!55851))

(assert (=> b!62238 d!12609))

(declare-fun d!12611 () Bool)

(assert (=> d!12611 (not (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25937 () Unit!1689)

(declare-fun choose!68 (array!3760 (_ BitVec 32) (_ BitVec 64) List!1464) Unit!1689)

(assert (=> d!12611 (= lt!25937 (choose!68 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461)))))

(assert (=> d!12611 (bvslt (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!12611 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461)) lt!25937)))

(declare-fun bs!2706 () Bool)

(assert (= bs!2706 d!12611))

(assert (=> bs!2706 m!55705))

(assert (=> bs!2706 m!55723))

(assert (=> bs!2706 m!55705))

(declare-fun m!55853 () Bool)

(assert (=> bs!2706 m!55853))

(assert (=> b!62234 d!12611))

(declare-fun d!12613 () Bool)

(assert (=> d!12613 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) from!355 Nil!1461)))

(declare-fun lt!25940 () Unit!1689)

(declare-fun choose!39 (array!3760 (_ BitVec 32) (_ BitVec 32)) Unit!1689)

(assert (=> d!12613 (= lt!25940 (choose!39 (_keys!3720 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!12613 (bvslt (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!12613 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000 from!355) lt!25940)))

(declare-fun bs!2707 () Bool)

(assert (= bs!2707 d!12613))

(assert (=> bs!2707 m!55719))

(declare-fun m!55855 () Bool)

(assert (=> bs!2707 m!55855))

(assert (=> b!62234 d!12613))

(declare-fun d!12615 () Bool)

(declare-fun res!34239 () Bool)

(declare-fun e!40976 () Bool)

(assert (=> d!12615 (=> res!34239 e!40976)))

(assert (=> d!12615 (= res!34239 (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!12615 (= (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!40976)))

(declare-fun b!62382 () Bool)

(declare-fun e!40977 () Bool)

(assert (=> b!62382 (= e!40976 e!40977)))

(declare-fun res!34240 () Bool)

(assert (=> b!62382 (=> (not res!34240) (not e!40977))))

(assert (=> b!62382 (= res!34240 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!62383 () Bool)

(assert (=> b!62383 (= e!40977 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!12615 (not res!34239)) b!62382))

(assert (= (and b!62382 res!34240) b!62383))

(assert (=> d!12615 m!55795))

(assert (=> b!62383 m!55705))

(declare-fun m!55857 () Bool)

(assert (=> b!62383 m!55857))

(assert (=> b!62234 d!12615))

(declare-fun d!12617 () Bool)

(declare-fun e!40980 () Bool)

(assert (=> d!12617 e!40980))

(declare-fun c!8300 () Bool)

(assert (=> d!12617 (= c!8300 (and (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!25943 () Unit!1689)

(declare-fun choose!337 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) (_ BitVec 32) Int) Unit!1689)

(assert (=> d!12617 (= lt!25943 (choose!337 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))))))

(assert (=> d!12617 (validMask!0 (mask!5994 (v!2419 (underlying!234 thiss!992))))))

(assert (=> d!12617 (= (lemmaListMapContainsThenArrayContainsFrom!32 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))) lt!25943)))

(declare-fun b!62388 () Bool)

(assert (=> b!62388 (= e!40980 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!62389 () Bool)

(assert (=> b!62389 (= e!40980 (ite (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!12617 c!8300) b!62388))

(assert (= (and d!12617 (not c!8300)) b!62389))

(assert (=> d!12617 m!55705))

(declare-fun m!55859 () Bool)

(assert (=> d!12617 m!55859))

(assert (=> d!12617 m!55703))

(assert (=> b!62388 m!55705))

(assert (=> b!62388 m!55723))

(assert (=> b!62234 d!12617))

(declare-fun call!4839 () Bool)

(declare-fun bm!4836 () Bool)

(declare-fun c!8303 () Bool)

(assert (=> bm!4836 (= call!4839 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)))))

(declare-fun b!62400 () Bool)

(declare-fun e!40991 () Bool)

(declare-fun contains!702 (List!1464 (_ BitVec 64)) Bool)

(assert (=> b!62400 (= e!40991 (contains!702 Nil!1461 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62401 () Bool)

(declare-fun e!40990 () Bool)

(assert (=> b!62401 (= e!40990 call!4839)))

(declare-fun b!62403 () Bool)

(declare-fun e!40992 () Bool)

(declare-fun e!40989 () Bool)

(assert (=> b!62403 (= e!40992 e!40989)))

(declare-fun res!34249 () Bool)

(assert (=> b!62403 (=> (not res!34249) (not e!40989))))

(assert (=> b!62403 (= res!34249 (not e!40991))))

(declare-fun res!34247 () Bool)

(assert (=> b!62403 (=> (not res!34247) (not e!40991))))

(assert (=> b!62403 (= res!34247 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62404 () Bool)

(assert (=> b!62404 (= e!40990 call!4839)))

(declare-fun d!12619 () Bool)

(declare-fun res!34248 () Bool)

(assert (=> d!12619 (=> res!34248 e!40992)))

(assert (=> d!12619 (= res!34248 (bvsge from!355 (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> d!12619 (= (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) from!355 Nil!1461) e!40992)))

(declare-fun b!62402 () Bool)

(assert (=> b!62402 (= e!40989 e!40990)))

(assert (=> b!62402 (= c!8303 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (= (and d!12619 (not res!34248)) b!62403))

(assert (= (and b!62403 res!34247) b!62400))

(assert (= (and b!62403 res!34249) b!62402))

(assert (= (and b!62402 c!8303) b!62404))

(assert (= (and b!62402 (not c!8303)) b!62401))

(assert (= (or b!62404 b!62401) bm!4836))

(assert (=> bm!4836 m!55705))

(declare-fun m!55861 () Bool)

(assert (=> bm!4836 m!55861))

(assert (=> b!62400 m!55705))

(assert (=> b!62400 m!55705))

(declare-fun m!55863 () Bool)

(assert (=> b!62400 m!55863))

(assert (=> b!62403 m!55705))

(assert (=> b!62403 m!55705))

(declare-fun m!55865 () Bool)

(assert (=> b!62403 m!55865))

(assert (=> b!62402 m!55705))

(assert (=> b!62402 m!55705))

(assert (=> b!62402 m!55865))

(assert (=> b!62234 d!12619))

(declare-fun d!12621 () Bool)

(assert (=> d!12621 (= (validMask!0 (mask!5994 (v!2419 (underlying!234 thiss!992)))) (and (or (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000001111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000011111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000001111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000011111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000001111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000011111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000001111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000011111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000001111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000011111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000001111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000011111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000111111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000001111111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000011111111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000111111111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000001111111111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000011111111111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000111111111111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00001111111111111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00011111111111111111111111111111) (= (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!62227 d!12621))

(declare-fun d!12623 () Bool)

(declare-fun e!40998 () Bool)

(assert (=> d!12623 e!40998))

(declare-fun res!34252 () Bool)

(assert (=> d!12623 (=> res!34252 e!40998)))

(declare-fun lt!25952 () Bool)

(assert (=> d!12623 (= res!34252 (not lt!25952))))

(declare-fun lt!25955 () Bool)

(assert (=> d!12623 (= lt!25952 lt!25955)))

(declare-fun lt!25953 () Unit!1689)

(declare-fun e!40997 () Unit!1689)

(assert (=> d!12623 (= lt!25953 e!40997)))

(declare-fun c!8306 () Bool)

(assert (=> d!12623 (= c!8306 lt!25955)))

(declare-fun containsKey!129 (List!1463 (_ BitVec 64)) Bool)

(assert (=> d!12623 (= lt!25955 (containsKey!129 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!12623 (= (contains!700 lt!25845 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) lt!25952)))

(declare-fun b!62411 () Bool)

(declare-fun lt!25954 () Unit!1689)

(assert (=> b!62411 (= e!40997 lt!25954)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!78 (List!1463 (_ BitVec 64)) Unit!1689)

(assert (=> b!62411 (= lt!25954 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-datatypes ((Option!131 0))(
  ( (Some!130 (v!2423 V!2867)) (None!129) )
))
(declare-fun isDefined!79 (Option!131) Bool)

(declare-fun getValueByKey!125 (List!1463 (_ BitVec 64)) Option!131)

(assert (=> b!62411 (isDefined!79 (getValueByKey!125 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62412 () Bool)

(declare-fun Unit!1697 () Unit!1689)

(assert (=> b!62412 (= e!40997 Unit!1697)))

(declare-fun b!62413 () Bool)

(assert (=> b!62413 (= e!40998 (isDefined!79 (getValueByKey!125 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(assert (= (and d!12623 c!8306) b!62411))

(assert (= (and d!12623 (not c!8306)) b!62412))

(assert (= (and d!12623 (not res!34252)) b!62413))

(assert (=> d!12623 m!55705))

(declare-fun m!55867 () Bool)

(assert (=> d!12623 m!55867))

(assert (=> b!62411 m!55705))

(declare-fun m!55869 () Bool)

(assert (=> b!62411 m!55869))

(assert (=> b!62411 m!55705))

(declare-fun m!55871 () Bool)

(assert (=> b!62411 m!55871))

(assert (=> b!62411 m!55871))

(declare-fun m!55873 () Bool)

(assert (=> b!62411 m!55873))

(assert (=> b!62413 m!55705))

(assert (=> b!62413 m!55871))

(assert (=> b!62413 m!55871))

(assert (=> b!62413 m!55873))

(assert (=> b!62233 d!12623))

(declare-fun b!62494 () Bool)

(declare-fun e!41047 () Bool)

(declare-fun e!41053 () Bool)

(assert (=> b!62494 (= e!41047 e!41053)))

(declare-fun c!8334 () Bool)

(declare-fun lt!26030 () tuple2!2068)

(assert (=> b!62494 (= c!8334 (_1!1044 lt!26030))))

(declare-fun b!62495 () Bool)

(declare-fun e!41056 () Bool)

(declare-fun call!4899 () Bool)

(assert (=> b!62495 (= e!41056 (not call!4899))))

(declare-fun b!62496 () Bool)

(declare-fun e!41059 () Bool)

(declare-fun e!41041 () Bool)

(assert (=> b!62496 (= e!41059 e!41041)))

(declare-fun res!34291 () Bool)

(declare-fun call!4903 () Bool)

(assert (=> b!62496 (= res!34291 call!4903)))

(assert (=> b!62496 (=> (not res!34291) (not e!41041))))

(declare-fun b!62497 () Bool)

(declare-fun e!41051 () tuple2!2068)

(declare-fun e!41058 () tuple2!2068)

(assert (=> b!62497 (= e!41051 e!41058)))

(declare-datatypes ((SeekEntryResult!239 0))(
  ( (MissingZero!239 (index!3081 (_ BitVec 32))) (Found!239 (index!3082 (_ BitVec 32))) (Intermediate!239 (undefined!1051 Bool) (index!3083 (_ BitVec 32)) (x!10317 (_ BitVec 32))) (Undefined!239) (MissingVacant!239 (index!3084 (_ BitVec 32))) )
))
(declare-fun lt!26026 () SeekEntryResult!239)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3760 (_ BitVec 32)) SeekEntryResult!239)

(assert (=> b!62497 (= lt!26026 (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun c!8343 () Bool)

(assert (=> b!62497 (= c!8343 ((_ is Undefined!239) lt!26026))))

(declare-fun b!62498 () Bool)

(declare-fun lt!26033 () Unit!1689)

(declare-fun lt!26025 () Unit!1689)

(assert (=> b!62498 (= lt!26033 lt!26025)))

(declare-fun call!4897 () Bool)

(assert (=> b!62498 call!4897))

(declare-fun lt!26022 () array!3762)

(declare-fun lemmaValidKeyInArrayIsInListMap!75 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) Int) Unit!1689)

(assert (=> b!62498 (= lt!26025 (lemmaValidKeyInArrayIsInListMap!75 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3082 lt!26026) (defaultEntry!2088 newMap!16)))))

(assert (=> b!62498 (= lt!26022 (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))))

(declare-fun lt!26017 () Unit!1689)

(declare-fun lt!26013 () Unit!1689)

(assert (=> b!62498 (= lt!26017 lt!26013)))

(declare-fun call!4906 () ListLongMap!1389)

(declare-fun call!4911 () ListLongMap!1389)

(assert (=> b!62498 (= call!4906 call!4911)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) (_ BitVec 64) V!2867 Int) Unit!1689)

(assert (=> b!62498 (= lt!26013 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3082 lt!26026) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26036 () Unit!1689)

(declare-fun e!41043 () Unit!1689)

(assert (=> b!62498 (= lt!26036 e!41043)))

(declare-fun c!8338 () Bool)

(assert (=> b!62498 (= c!8338 (contains!700 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun e!41057 () tuple2!2068)

(assert (=> b!62498 (= e!41057 (tuple2!2069 true (LongMapFixedSize!637 (defaultEntry!2088 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (_size!367 newMap!16) (_keys!3720 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (_vacant!367 newMap!16))))))

(declare-fun b!62499 () Bool)

(declare-fun e!41046 () ListLongMap!1389)

(assert (=> b!62499 (= e!41046 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun c!8336 () Bool)

(declare-fun c!8345 () Bool)

(declare-fun bm!4885 () Bool)

(assert (=> bm!4885 (= call!4906 (+!83 e!41046 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!8339 () Bool)

(assert (=> bm!4885 (= c!8339 c!8336)))

(declare-fun b!62500 () Bool)

(declare-fun lt!26029 () Unit!1689)

(declare-fun lt!26035 () Unit!1689)

(assert (=> b!62500 (= lt!26029 lt!26035)))

(declare-fun call!4902 () ListLongMap!1389)

(declare-fun call!4889 () ListLongMap!1389)

(assert (=> b!62500 (= call!4902 call!4889)))

(declare-fun lt!26015 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!17 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 V!2867 Int) Unit!1689)

(assert (=> b!62500 (= lt!26035 (lemmaChangeZeroKeyThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26015 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) (defaultEntry!2088 newMap!16)))))

(assert (=> b!62500 (= lt!26015 (bvor (extraKeys!1967 newMap!16) #b00000000000000000000000000000001))))

(declare-fun e!41042 () tuple2!2068)

(assert (=> b!62500 (= e!41042 (tuple2!2069 true (LongMapFixedSize!637 (defaultEntry!2088 newMap!16) (mask!5994 newMap!16) (bvor (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) (_size!367 newMap!16) (_keys!3720 newMap!16) (_values!2071 newMap!16) (_vacant!367 newMap!16))))))

(declare-fun bm!4886 () Bool)

(declare-fun call!4896 () Bool)

(declare-fun call!4898 () Bool)

(assert (=> bm!4886 (= call!4896 call!4898)))

(declare-fun bm!4887 () Bool)

(assert (=> bm!4887 (= call!4911 (getCurrentListMap!407 (_keys!3720 newMap!16) (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!62501 () Bool)

(declare-fun call!4907 () Bool)

(assert (=> b!62501 (= e!41041 (not call!4907))))

(declare-fun b!62502 () Bool)

(declare-fun res!34286 () Bool)

(declare-fun e!41044 () Bool)

(assert (=> b!62502 (=> (not res!34286) (not e!41044))))

(assert (=> b!62502 (= res!34286 call!4903)))

(declare-fun e!41060 () Bool)

(assert (=> b!62502 (= e!41060 e!41044)))

(declare-fun b!62503 () Bool)

(declare-fun e!41049 () Unit!1689)

(declare-fun lt!26034 () Unit!1689)

(assert (=> b!62503 (= e!41049 lt!26034)))

(declare-fun call!4905 () Unit!1689)

(assert (=> b!62503 (= lt!26034 call!4905)))

(declare-fun lt!26016 () SeekEntryResult!239)

(declare-fun call!4900 () SeekEntryResult!239)

(assert (=> b!62503 (= lt!26016 call!4900)))

(declare-fun c!8340 () Bool)

(assert (=> b!62503 (= c!8340 ((_ is MissingZero!239) lt!26016))))

(assert (=> b!62503 e!41060))

(declare-fun call!4910 () ListLongMap!1389)

(declare-fun call!4894 () ListLongMap!1389)

(declare-fun b!62504 () Bool)

(declare-fun e!41055 () Bool)

(assert (=> b!62504 (= e!41055 (= call!4894 (+!83 call!4910 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!8341 () Bool)

(declare-fun lt!26023 () SeekEntryResult!239)

(declare-fun lt!26020 () SeekEntryResult!239)

(declare-fun lt!26011 () SeekEntryResult!239)

(declare-fun call!4908 () Bool)

(declare-fun bm!4889 () Bool)

(declare-fun c!8344 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4889 (= call!4908 (inRange!0 (ite c!8343 (ite c!8341 (index!3082 lt!26023) (ite c!8340 (index!3081 lt!26016) (index!3084 lt!26016))) (ite c!8338 (index!3082 lt!26011) (ite c!8344 (index!3081 lt!26020) (index!3084 lt!26020)))) (mask!5994 newMap!16)))))

(declare-fun call!4895 () SeekEntryResult!239)

(declare-fun bm!4890 () Bool)

(assert (=> bm!4890 (= call!4895 (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!62505 () Bool)

(declare-fun Unit!1698 () Unit!1689)

(assert (=> b!62505 (= e!41049 Unit!1698)))

(declare-fun lt!26031 () Unit!1689)

(declare-fun call!4888 () Unit!1689)

(assert (=> b!62505 (= lt!26031 call!4888)))

(assert (=> b!62505 (= lt!26023 call!4900)))

(declare-fun res!34294 () Bool)

(assert (=> b!62505 (= res!34294 ((_ is Found!239) lt!26023))))

(declare-fun e!41045 () Bool)

(assert (=> b!62505 (=> (not res!34294) (not e!41045))))

(assert (=> b!62505 e!41045))

(declare-fun lt!26032 () Unit!1689)

(assert (=> b!62505 (= lt!26032 lt!26031)))

(assert (=> b!62505 false))

(declare-fun b!62506 () Bool)

(declare-fun c!8342 () Bool)

(assert (=> b!62506 (= c!8342 ((_ is MissingVacant!239) lt!26016))))

(assert (=> b!62506 (= e!41060 e!41059)))

(declare-fun call!4891 () ListLongMap!1389)

(declare-fun lt!26019 () (_ BitVec 32))

(declare-fun bm!4891 () Bool)

(assert (=> bm!4891 (= call!4891 (getCurrentListMap!407 (_keys!3720 newMap!16) (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022) (mask!5994 newMap!16) (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun bm!4892 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) Int) Unit!1689)

(assert (=> bm!4892 (= call!4888 (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(declare-fun b!62507 () Bool)

(declare-fun e!41048 () Bool)

(assert (=> b!62507 (= e!41048 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26011)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62508 () Bool)

(declare-fun res!34289 () Bool)

(assert (=> b!62508 (= res!34289 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3084 lt!26020)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41054 () Bool)

(assert (=> b!62508 (=> (not res!34289) (not e!41054))))

(declare-fun bm!4893 () Bool)

(assert (=> bm!4893 (= call!4910 (map!1119 newMap!16))))

(declare-fun b!62509 () Bool)

(declare-fun Unit!1699 () Unit!1689)

(assert (=> b!62509 (= e!41043 Unit!1699)))

(declare-fun lt!26012 () Unit!1689)

(assert (=> b!62509 (= lt!26012 call!4905)))

(declare-fun call!4901 () SeekEntryResult!239)

(assert (=> b!62509 (= lt!26020 call!4901)))

(assert (=> b!62509 (= c!8344 ((_ is MissingZero!239) lt!26020))))

(declare-fun e!41061 () Bool)

(assert (=> b!62509 e!41061))

(declare-fun lt!26014 () Unit!1689)

(assert (=> b!62509 (= lt!26014 lt!26012)))

(assert (=> b!62509 false))

(declare-fun b!62510 () Bool)

(declare-fun e!41050 () Bool)

(assert (=> b!62510 (= e!41050 ((_ is Undefined!239) lt!26020))))

(declare-fun bm!4894 () Bool)

(assert (=> bm!4894 (= call!4900 call!4895)))

(declare-fun b!62511 () Bool)

(declare-fun c!8335 () Bool)

(assert (=> b!62511 (= c!8335 ((_ is MissingVacant!239) lt!26026))))

(declare-fun e!41052 () tuple2!2068)

(assert (=> b!62511 (= e!41058 e!41052)))

(declare-fun bm!4895 () Bool)

(declare-fun call!4892 () ListLongMap!1389)

(assert (=> bm!4895 (= call!4892 call!4911)))

(declare-fun bm!4896 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) Int) Unit!1689)

(assert (=> bm!4896 (= call!4905 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(declare-fun call!4890 () ListLongMap!1389)

(declare-fun bm!4897 () Bool)

(assert (=> bm!4897 (= call!4897 (contains!700 call!4890 (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))

(declare-fun bm!4898 () Bool)

(declare-fun call!4909 () Bool)

(assert (=> bm!4898 (= call!4909 call!4908)))

(declare-fun call!4893 () Bool)

(declare-fun bm!4899 () Bool)

(assert (=> bm!4899 (= call!4893 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!4900 () Bool)

(assert (=> bm!4900 (= call!4889 call!4891)))

(declare-fun b!62512 () Bool)

(assert (=> b!62512 (= e!41059 ((_ is Undefined!239) lt!26016))))

(declare-fun b!62513 () Bool)

(declare-fun lt!26010 () Unit!1689)

(assert (=> b!62513 (= e!41043 lt!26010)))

(assert (=> b!62513 (= lt!26010 call!4888)))

(assert (=> b!62513 (= lt!26011 call!4901)))

(declare-fun res!34292 () Bool)

(assert (=> b!62513 (= res!34292 ((_ is Found!239) lt!26011))))

(assert (=> b!62513 (=> (not res!34292) (not e!41048))))

(assert (=> b!62513 e!41048))

(declare-fun b!62514 () Bool)

(assert (=> b!62514 (= e!41052 e!41057)))

(declare-fun c!8333 () Bool)

(assert (=> b!62514 (= c!8333 ((_ is MissingZero!239) lt!26026))))

(declare-fun b!62515 () Bool)

(assert (=> b!62515 (= e!41044 (not call!4907))))

(declare-fun b!62516 () Bool)

(assert (=> b!62516 (= e!41046 call!4892)))

(declare-fun b!62517 () Bool)

(declare-fun lt!26028 () tuple2!2068)

(assert (=> b!62517 (= e!41052 (tuple2!2069 (_1!1044 lt!26028) (_2!1044 lt!26028)))))

(declare-fun call!4904 () tuple2!2068)

(assert (=> b!62517 (= lt!26028 call!4904)))

(declare-fun bm!4901 () Bool)

(assert (=> bm!4901 (= call!4899 call!4893)))

(declare-fun b!62518 () Bool)

(assert (=> b!62518 (= e!41053 (= call!4894 call!4910))))

(declare-fun b!62519 () Bool)

(declare-fun res!34282 () Bool)

(assert (=> b!62519 (= res!34282 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3084 lt!26016)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62519 (=> (not res!34282) (not e!41041))))

(declare-fun b!62520 () Bool)

(declare-fun c!8337 () Bool)

(assert (=> b!62520 (= c!8337 ((_ is MissingVacant!239) lt!26020))))

(assert (=> b!62520 (= e!41061 e!41050)))

(declare-fun bm!4902 () Bool)

(assert (=> bm!4902 (= call!4890 call!4891)))

(declare-fun b!62521 () Bool)

(declare-fun res!34284 () Bool)

(assert (=> b!62521 (=> (not res!34284) (not e!41056))))

(assert (=> b!62521 (= res!34284 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3081 lt!26020)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4903 () Bool)

(assert (=> bm!4903 (= call!4907 call!4893)))

(declare-fun b!62522 () Bool)

(assert (=> b!62522 (= e!41050 e!41054)))

(declare-fun res!34290 () Bool)

(assert (=> b!62522 (= res!34290 call!4896)))

(assert (=> b!62522 (=> (not res!34290) (not e!41054))))

(declare-fun b!62523 () Bool)

(assert (=> b!62523 (= e!41054 (not call!4899))))

(declare-fun bm!4904 () Bool)

(assert (=> bm!4904 (= call!4903 call!4909)))

(declare-fun bm!4905 () Bool)

(assert (=> bm!4905 (= call!4894 (map!1119 (_2!1044 lt!26030)))))

(declare-fun b!62524 () Bool)

(declare-fun res!34281 () Bool)

(assert (=> b!62524 (=> (not res!34281) (not e!41056))))

(assert (=> b!62524 (= res!34281 call!4896)))

(assert (=> b!62524 (= e!41061 e!41056)))

(declare-fun b!62525 () Bool)

(declare-fun res!34287 () Bool)

(assert (=> b!62525 (= res!34287 call!4898)))

(assert (=> b!62525 (=> (not res!34287) (not e!41048))))

(declare-fun b!62526 () Bool)

(declare-fun lt!26018 () Unit!1689)

(declare-fun lt!26021 () Unit!1689)

(assert (=> b!62526 (= lt!26018 lt!26021)))

(assert (=> b!62526 (= call!4902 call!4889)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 V!2867 Int) Unit!1689)

(assert (=> b!62526 (= lt!26021 (lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(assert (=> b!62526 (= lt!26019 (bvor (extraKeys!1967 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!62526 (= e!41042 (tuple2!2069 true (LongMapFixedSize!637 (defaultEntry!2088 newMap!16) (mask!5994 newMap!16) (bvor (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!367 newMap!16) (_keys!3720 newMap!16) (_values!2071 newMap!16) (_vacant!367 newMap!16))))))

(declare-fun bm!4906 () Bool)

(declare-fun updateHelperNewKey!17 (LongMapFixedSize!636 (_ BitVec 64) V!2867 (_ BitVec 32)) tuple2!2068)

(assert (=> bm!4906 (= call!4904 (updateHelperNewKey!17 newMap!16 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026))))))

(declare-fun bm!4907 () Bool)

(assert (=> bm!4907 (= call!4902 call!4906)))

(declare-fun b!62527 () Bool)

(declare-fun lt!26024 () tuple2!2068)

(assert (=> b!62527 (= lt!26024 call!4904)))

(assert (=> b!62527 (= e!41057 (tuple2!2069 (_1!1044 lt!26024) (_2!1044 lt!26024)))))

(declare-fun b!62528 () Bool)

(assert (=> b!62528 (= e!41051 e!41042)))

(assert (=> b!62528 (= c!8345 (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4888 () Bool)

(assert (=> bm!4888 (= call!4898 call!4908)))

(declare-fun d!12625 () Bool)

(assert (=> d!12625 e!41047))

(declare-fun res!34288 () Bool)

(assert (=> d!12625 (=> (not res!34288) (not e!41047))))

(assert (=> d!12625 (= res!34288 (valid!263 (_2!1044 lt!26030)))))

(assert (=> d!12625 (= lt!26030 e!41051)))

(assert (=> d!12625 (= c!8336 (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvneg (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(assert (=> d!12625 (valid!263 newMap!16)))

(assert (=> d!12625 (= (update!88 newMap!16 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!26030)))

(declare-fun b!62529 () Bool)

(assert (=> b!62529 (= e!41045 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26023)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62530 () Bool)

(declare-fun res!34285 () Bool)

(assert (=> b!62530 (= res!34285 call!4909)))

(assert (=> b!62530 (=> (not res!34285) (not e!41045))))

(declare-fun b!62531 () Bool)

(assert (=> b!62531 (= e!41053 e!41055)))

(declare-fun res!34283 () Bool)

(assert (=> b!62531 (= res!34283 (contains!700 call!4894 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> b!62531 (=> (not res!34283) (not e!41055))))

(declare-fun b!62532 () Bool)

(declare-fun res!34293 () Bool)

(assert (=> b!62532 (=> (not res!34293) (not e!41044))))

(assert (=> b!62532 (= res!34293 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3081 lt!26016)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62533 () Bool)

(declare-fun lt!26027 () Unit!1689)

(assert (=> b!62533 (= lt!26027 e!41049)))

(assert (=> b!62533 (= c!8341 call!4897)))

(assert (=> b!62533 (= e!41058 (tuple2!2069 false newMap!16))))

(declare-fun bm!4908 () Bool)

(assert (=> bm!4908 (= call!4901 call!4895)))

(assert (= (and d!12625 c!8336) b!62528))

(assert (= (and d!12625 (not c!8336)) b!62497))

(assert (= (and b!62528 c!8345) b!62500))

(assert (= (and b!62528 (not c!8345)) b!62526))

(assert (= (or b!62500 b!62526) bm!4895))

(assert (= (or b!62500 b!62526) bm!4900))

(assert (= (or b!62500 b!62526) bm!4907))

(assert (= (and b!62497 c!8343) b!62533))

(assert (= (and b!62497 (not c!8343)) b!62511))

(assert (= (and b!62533 c!8341) b!62505))

(assert (= (and b!62533 (not c!8341)) b!62503))

(assert (= (and b!62505 res!34294) b!62530))

(assert (= (and b!62530 res!34285) b!62529))

(assert (= (and b!62503 c!8340) b!62502))

(assert (= (and b!62503 (not c!8340)) b!62506))

(assert (= (and b!62502 res!34286) b!62532))

(assert (= (and b!62532 res!34293) b!62515))

(assert (= (and b!62506 c!8342) b!62496))

(assert (= (and b!62506 (not c!8342)) b!62512))

(assert (= (and b!62496 res!34291) b!62519))

(assert (= (and b!62519 res!34282) b!62501))

(assert (= (or b!62502 b!62496) bm!4904))

(assert (= (or b!62515 b!62501) bm!4903))

(assert (= (or b!62530 bm!4904) bm!4898))

(assert (= (or b!62505 b!62503) bm!4894))

(assert (= (and b!62511 c!8335) b!62517))

(assert (= (and b!62511 (not c!8335)) b!62514))

(assert (= (and b!62514 c!8333) b!62527))

(assert (= (and b!62514 (not c!8333)) b!62498))

(assert (= (and b!62498 c!8338) b!62513))

(assert (= (and b!62498 (not c!8338)) b!62509))

(assert (= (and b!62513 res!34292) b!62525))

(assert (= (and b!62525 res!34287) b!62507))

(assert (= (and b!62509 c!8344) b!62524))

(assert (= (and b!62509 (not c!8344)) b!62520))

(assert (= (and b!62524 res!34281) b!62521))

(assert (= (and b!62521 res!34284) b!62495))

(assert (= (and b!62520 c!8337) b!62522))

(assert (= (and b!62520 (not c!8337)) b!62510))

(assert (= (and b!62522 res!34290) b!62508))

(assert (= (and b!62508 res!34289) b!62523))

(assert (= (or b!62524 b!62522) bm!4886))

(assert (= (or b!62495 b!62523) bm!4901))

(assert (= (or b!62525 bm!4886) bm!4888))

(assert (= (or b!62513 b!62509) bm!4908))

(assert (= (or b!62517 b!62527) bm!4906))

(assert (= (or b!62505 b!62513) bm!4892))

(assert (= (or bm!4903 bm!4901) bm!4899))

(assert (= (or bm!4894 bm!4908) bm!4890))

(assert (= (or b!62533 b!62498) bm!4902))

(assert (= (or bm!4898 bm!4888) bm!4889))

(assert (= (or b!62503 b!62509) bm!4896))

(assert (= (or b!62533 b!62498) bm!4897))

(assert (= (or bm!4895 b!62498) bm!4887))

(assert (= (or bm!4900 bm!4902) bm!4891))

(assert (= (or bm!4907 b!62498) bm!4885))

(assert (= (and bm!4885 c!8339) b!62516))

(assert (= (and bm!4885 (not c!8339)) b!62499))

(assert (= (and d!12625 res!34288) b!62494))

(assert (= (and b!62494 c!8334) b!62531))

(assert (= (and b!62494 (not c!8334)) b!62518))

(assert (= (and b!62531 res!34283) b!62504))

(assert (= (or b!62531 b!62504 b!62518) bm!4905))

(assert (= (or b!62504 b!62518) bm!4893))

(declare-fun m!55875 () Bool)

(assert (=> bm!4885 m!55875))

(declare-fun m!55877 () Bool)

(assert (=> bm!4887 m!55877))

(declare-fun m!55879 () Bool)

(assert (=> bm!4887 m!55879))

(declare-fun m!55881 () Bool)

(assert (=> bm!4905 m!55881))

(assert (=> b!62500 m!55731))

(declare-fun m!55883 () Bool)

(assert (=> b!62500 m!55883))

(assert (=> b!62498 m!55705))

(assert (=> b!62498 m!55731))

(declare-fun m!55885 () Bool)

(assert (=> b!62498 m!55885))

(assert (=> b!62498 m!55787))

(assert (=> b!62498 m!55705))

(declare-fun m!55887 () Bool)

(assert (=> b!62498 m!55887))

(declare-fun m!55889 () Bool)

(assert (=> b!62498 m!55889))

(assert (=> b!62498 m!55787))

(assert (=> b!62498 m!55877))

(assert (=> bm!4896 m!55705))

(declare-fun m!55891 () Bool)

(assert (=> bm!4896 m!55891))

(assert (=> bm!4899 m!55705))

(declare-fun m!55893 () Bool)

(assert (=> bm!4899 m!55893))

(declare-fun m!55895 () Bool)

(assert (=> d!12625 m!55895))

(assert (=> d!12625 m!55715))

(declare-fun m!55897 () Bool)

(assert (=> b!62521 m!55897))

(assert (=> bm!4892 m!55705))

(declare-fun m!55899 () Bool)

(assert (=> bm!4892 m!55899))

(declare-fun m!55901 () Bool)

(assert (=> b!62507 m!55901))

(assert (=> bm!4906 m!55705))

(assert (=> bm!4906 m!55731))

(declare-fun m!55903 () Bool)

(assert (=> bm!4906 m!55903))

(declare-fun m!55905 () Bool)

(assert (=> b!62519 m!55905))

(assert (=> b!62499 m!55787))

(declare-fun m!55907 () Bool)

(assert (=> bm!4889 m!55907))

(assert (=> b!62497 m!55705))

(declare-fun m!55909 () Bool)

(assert (=> b!62497 m!55909))

(assert (=> bm!4890 m!55705))

(assert (=> bm!4890 m!55909))

(declare-fun m!55911 () Bool)

(assert (=> b!62529 m!55911))

(declare-fun m!55913 () Bool)

(assert (=> bm!4891 m!55913))

(declare-fun m!55915 () Bool)

(assert (=> b!62504 m!55915))

(declare-fun m!55917 () Bool)

(assert (=> b!62532 m!55917))

(assert (=> b!62531 m!55705))

(declare-fun m!55919 () Bool)

(assert (=> b!62531 m!55919))

(declare-fun m!55921 () Bool)

(assert (=> bm!4897 m!55921))

(declare-fun m!55923 () Bool)

(assert (=> bm!4897 m!55923))

(declare-fun m!55925 () Bool)

(assert (=> b!62508 m!55925))

(assert (=> b!62526 m!55731))

(declare-fun m!55927 () Bool)

(assert (=> b!62526 m!55927))

(assert (=> bm!4893 m!55707))

(assert (=> b!62233 d!12625))

(declare-fun d!12627 () Bool)

(declare-fun c!8348 () Bool)

(assert (=> d!12627 (= c!8348 ((_ is ValueCellFull!864) (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun e!41064 () V!2867)

(assert (=> d!12627 (= (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41064)))

(declare-fun b!62538 () Bool)

(declare-fun get!1098 (ValueCell!864 V!2867) V!2867)

(assert (=> b!62538 (= e!41064 (get!1098 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62539 () Bool)

(declare-fun get!1099 (ValueCell!864 V!2867) V!2867)

(assert (=> b!62539 (= e!41064 (get!1099 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12627 c!8348) b!62538))

(assert (= (and d!12627 (not c!8348)) b!62539))

(assert (=> b!62538 m!55727))

(assert (=> b!62538 m!55729))

(declare-fun m!55929 () Bool)

(assert (=> b!62538 m!55929))

(assert (=> b!62539 m!55727))

(assert (=> b!62539 m!55729))

(declare-fun m!55931 () Bool)

(assert (=> b!62539 m!55931))

(assert (=> b!62233 d!12627))

(declare-fun d!12629 () Bool)

(assert (=> d!12629 (= (valid!264 thiss!992) (valid!263 (v!2419 (underlying!234 thiss!992))))))

(declare-fun bs!2708 () Bool)

(assert (= bs!2708 d!12629))

(declare-fun m!55933 () Bool)

(assert (=> bs!2708 m!55933))

(assert (=> start!8884 d!12629))

(declare-fun d!12631 () Bool)

(assert (=> d!12631 (= (array_inv!1063 (_keys!3720 newMap!16)) (bvsge (size!2030 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62236 d!12631))

(declare-fun d!12633 () Bool)

(assert (=> d!12633 (= (array_inv!1064 (_values!2071 newMap!16)) (bvsge (size!2031 (_values!2071 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62236 d!12633))

(declare-fun d!12635 () Bool)

(assert (=> d!12635 (= (array_inv!1063 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvsge (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!62232 d!12635))

(declare-fun d!12637 () Bool)

(assert (=> d!12637 (= (array_inv!1064 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvsge (size!2031 (_values!2071 (v!2419 (underlying!234 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!62232 d!12637))

(declare-fun b!62547 () Bool)

(declare-fun e!41069 () Bool)

(assert (=> b!62547 (= e!41069 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2953 () Bool)

(declare-fun mapRes!2953 () Bool)

(assert (=> mapIsEmpty!2953 mapRes!2953))

(declare-fun mapNonEmpty!2953 () Bool)

(declare-fun tp!8137 () Bool)

(declare-fun e!41070 () Bool)

(assert (=> mapNonEmpty!2953 (= mapRes!2953 (and tp!8137 e!41070))))

(declare-fun mapValue!2953 () ValueCell!864)

(declare-fun mapRest!2953 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun mapKey!2953 () (_ BitVec 32))

(assert (=> mapNonEmpty!2953 (= mapRest!2943 (store mapRest!2953 mapKey!2953 mapValue!2953))))

(declare-fun b!62546 () Bool)

(assert (=> b!62546 (= e!41070 tp_is_empty!2415)))

(declare-fun condMapEmpty!2953 () Bool)

(declare-fun mapDefault!2953 () ValueCell!864)

(assert (=> mapNonEmpty!2944 (= condMapEmpty!2953 (= mapRest!2943 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2953)))))

(assert (=> mapNonEmpty!2944 (= tp!8119 (and e!41069 mapRes!2953))))

(assert (= (and mapNonEmpty!2944 condMapEmpty!2953) mapIsEmpty!2953))

(assert (= (and mapNonEmpty!2944 (not condMapEmpty!2953)) mapNonEmpty!2953))

(assert (= (and mapNonEmpty!2953 ((_ is ValueCellFull!864) mapValue!2953)) b!62546))

(assert (= (and mapNonEmpty!2944 ((_ is ValueCellFull!864) mapDefault!2953)) b!62547))

(declare-fun m!55935 () Bool)

(assert (=> mapNonEmpty!2953 m!55935))

(declare-fun b!62549 () Bool)

(declare-fun e!41071 () Bool)

(assert (=> b!62549 (= e!41071 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2954 () Bool)

(declare-fun mapRes!2954 () Bool)

(assert (=> mapIsEmpty!2954 mapRes!2954))

(declare-fun mapNonEmpty!2954 () Bool)

(declare-fun tp!8138 () Bool)

(declare-fun e!41072 () Bool)

(assert (=> mapNonEmpty!2954 (= mapRes!2954 (and tp!8138 e!41072))))

(declare-fun mapKey!2954 () (_ BitVec 32))

(declare-fun mapValue!2954 () ValueCell!864)

(declare-fun mapRest!2954 () (Array (_ BitVec 32) ValueCell!864))

(assert (=> mapNonEmpty!2954 (= mapRest!2944 (store mapRest!2954 mapKey!2954 mapValue!2954))))

(declare-fun b!62548 () Bool)

(assert (=> b!62548 (= e!41072 tp_is_empty!2415)))

(declare-fun condMapEmpty!2954 () Bool)

(declare-fun mapDefault!2954 () ValueCell!864)

(assert (=> mapNonEmpty!2943 (= condMapEmpty!2954 (= mapRest!2944 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2954)))))

(assert (=> mapNonEmpty!2943 (= tp!8121 (and e!41071 mapRes!2954))))

(assert (= (and mapNonEmpty!2943 condMapEmpty!2954) mapIsEmpty!2954))

(assert (= (and mapNonEmpty!2943 (not condMapEmpty!2954)) mapNonEmpty!2954))

(assert (= (and mapNonEmpty!2954 ((_ is ValueCellFull!864) mapValue!2954)) b!62548))

(assert (= (and mapNonEmpty!2943 ((_ is ValueCellFull!864) mapDefault!2954)) b!62549))

(declare-fun m!55937 () Bool)

(assert (=> mapNonEmpty!2954 m!55937))

(declare-fun b_lambda!2795 () Bool)

(assert (= b_lambda!2793 (or (and b!62232 b_free!1997) (and b!62236 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))))) b_lambda!2795)))

(check-sat (not bm!4831) (not d!12629) (not b!62400) (not b!62413) (not bm!4899) (not bm!4833) (not bm!4893) b_and!3817 (not b!62376) b_and!3819 (not b!62402) (not bm!4891) (not b_next!1997) (not bm!4889) (not d!12607) (not b!62360) (not b!62500) (not d!12613) (not d!12625) (not b!62499) (not bm!4897) (not b_lambda!2795) (not b!62361) (not b!62504) (not bm!4896) (not bm!4906) (not b!62498) (not d!12605) (not b!62359) (not mapNonEmpty!2953) (not d!12623) (not d!12609) (not b!62375) (not b!62383) (not b!62539) (not b!62368) (not b!62411) (not bm!4890) (not bm!4887) (not b!62531) (not b!62388) (not d!12611) (not mapNonEmpty!2954) (not b_next!1999) tp_is_empty!2415 (not bm!4892) (not b!62497) (not b!62350) (not bm!4827) (not bm!4905) (not b!62377) (not b!62403) (not b!62538) (not b!62526) (not b!62353) (not b!62357) (not bm!4885) (not d!12617) (not bm!4832) (not bm!4836) (not b_lambda!2791) (not b!62351))
(check-sat b_and!3817 b_and!3819 (not b_next!1997) (not b_next!1999))
(get-model)

(declare-fun d!12639 () Bool)

(declare-fun e!41075 () Bool)

(assert (=> d!12639 e!41075))

(declare-fun res!34299 () Bool)

(assert (=> d!12639 (=> (not res!34299) (not e!41075))))

(declare-fun lt!26041 () SeekEntryResult!239)

(assert (=> d!12639 (= res!34299 ((_ is Found!239) lt!26041))))

(assert (=> d!12639 (= lt!26041 (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun lt!26042 () Unit!1689)

(declare-fun choose!338 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) Int) Unit!1689)

(assert (=> d!12639 (= lt!26042 (choose!338 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12639 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12639 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)) lt!26042)))

(declare-fun b!62554 () Bool)

(declare-fun res!34300 () Bool)

(assert (=> b!62554 (=> (not res!34300) (not e!41075))))

(assert (=> b!62554 (= res!34300 (inRange!0 (index!3082 lt!26041) (mask!5994 newMap!16)))))

(declare-fun b!62555 () Bool)

(assert (=> b!62555 (= e!41075 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26041)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> b!62555 (and (bvsge (index!3082 lt!26041) #b00000000000000000000000000000000) (bvslt (index!3082 lt!26041) (size!2030 (_keys!3720 newMap!16))))))

(assert (= (and d!12639 res!34299) b!62554))

(assert (= (and b!62554 res!34300) b!62555))

(assert (=> d!12639 m!55705))

(assert (=> d!12639 m!55909))

(assert (=> d!12639 m!55705))

(declare-fun m!55939 () Bool)

(assert (=> d!12639 m!55939))

(declare-fun m!55941 () Bool)

(assert (=> d!12639 m!55941))

(declare-fun m!55943 () Bool)

(assert (=> b!62554 m!55943))

(declare-fun m!55945 () Bool)

(assert (=> b!62555 m!55945))

(assert (=> bm!4892 d!12639))

(declare-fun d!12641 () Bool)

(assert (=> d!12641 (= (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (and (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62403 d!12641))

(declare-fun b!62568 () Bool)

(declare-fun c!8355 () Bool)

(declare-fun lt!26049 () (_ BitVec 64))

(assert (=> b!62568 (= c!8355 (= lt!26049 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41084 () SeekEntryResult!239)

(declare-fun e!41083 () SeekEntryResult!239)

(assert (=> b!62568 (= e!41084 e!41083)))

(declare-fun b!62569 () Bool)

(declare-fun lt!26050 () SeekEntryResult!239)

(assert (=> b!62569 (= e!41083 (MissingZero!239 (index!3083 lt!26050)))))

(declare-fun b!62571 () Bool)

(declare-fun e!41082 () SeekEntryResult!239)

(assert (=> b!62571 (= e!41082 Undefined!239)))

(declare-fun b!62572 () Bool)

(assert (=> b!62572 (= e!41082 e!41084)))

(assert (=> b!62572 (= lt!26049 (select (arr!1798 (_keys!3720 newMap!16)) (index!3083 lt!26050)))))

(declare-fun c!8357 () Bool)

(assert (=> b!62572 (= c!8357 (= lt!26049 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62573 () Bool)

(assert (=> b!62573 (= e!41084 (Found!239 (index!3083 lt!26050)))))

(declare-fun lt!26051 () SeekEntryResult!239)

(declare-fun d!12643 () Bool)

(assert (=> d!12643 (and (or ((_ is Undefined!239) lt!26051) (not ((_ is Found!239) lt!26051)) (and (bvsge (index!3082 lt!26051) #b00000000000000000000000000000000) (bvslt (index!3082 lt!26051) (size!2030 (_keys!3720 newMap!16))))) (or ((_ is Undefined!239) lt!26051) ((_ is Found!239) lt!26051) (not ((_ is MissingZero!239) lt!26051)) (and (bvsge (index!3081 lt!26051) #b00000000000000000000000000000000) (bvslt (index!3081 lt!26051) (size!2030 (_keys!3720 newMap!16))))) (or ((_ is Undefined!239) lt!26051) ((_ is Found!239) lt!26051) ((_ is MissingZero!239) lt!26051) (not ((_ is MissingVacant!239) lt!26051)) (and (bvsge (index!3084 lt!26051) #b00000000000000000000000000000000) (bvslt (index!3084 lt!26051) (size!2030 (_keys!3720 newMap!16))))) (or ((_ is Undefined!239) lt!26051) (ite ((_ is Found!239) lt!26051) (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26051)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (ite ((_ is MissingZero!239) lt!26051) (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3081 lt!26051)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!239) lt!26051) (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3084 lt!26051)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12643 (= lt!26051 e!41082)))

(declare-fun c!8356 () Bool)

(assert (=> d!12643 (= c!8356 (and ((_ is Intermediate!239) lt!26050) (undefined!1051 lt!26050)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3760 (_ BitVec 32)) SeekEntryResult!239)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!12643 (= lt!26050 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (mask!5994 newMap!16)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (=> d!12643 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12643 (= (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)) lt!26051)))

(declare-fun b!62570 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3760 (_ BitVec 32)) SeekEntryResult!239)

(assert (=> b!62570 (= e!41083 (seekKeyOrZeroReturnVacant!0 (x!10317 lt!26050) (index!3083 lt!26050) (index!3083 lt!26050) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (= (and d!12643 c!8356) b!62571))

(assert (= (and d!12643 (not c!8356)) b!62572))

(assert (= (and b!62572 c!8357) b!62573))

(assert (= (and b!62572 (not c!8357)) b!62568))

(assert (= (and b!62568 c!8355) b!62569))

(assert (= (and b!62568 (not c!8355)) b!62570))

(declare-fun m!55947 () Bool)

(assert (=> b!62572 m!55947))

(declare-fun m!55949 () Bool)

(assert (=> d!12643 m!55949))

(assert (=> d!12643 m!55705))

(declare-fun m!55951 () Bool)

(assert (=> d!12643 m!55951))

(assert (=> d!12643 m!55705))

(assert (=> d!12643 m!55949))

(declare-fun m!55953 () Bool)

(assert (=> d!12643 m!55953))

(declare-fun m!55955 () Bool)

(assert (=> d!12643 m!55955))

(assert (=> d!12643 m!55941))

(declare-fun m!55957 () Bool)

(assert (=> d!12643 m!55957))

(assert (=> b!62570 m!55705))

(declare-fun m!55959 () Bool)

(assert (=> b!62570 m!55959))

(assert (=> bm!4890 d!12643))

(declare-fun c!8358 () Bool)

(declare-fun bm!4909 () Bool)

(declare-fun call!4912 () Bool)

(assert (=> bm!4909 (= call!4912 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8358 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461))))))

(declare-fun b!62574 () Bool)

(declare-fun e!41087 () Bool)

(assert (=> b!62574 (= e!41087 (contains!702 (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!62575 () Bool)

(declare-fun e!41086 () Bool)

(assert (=> b!62575 (= e!41086 call!4912)))

(declare-fun b!62577 () Bool)

(declare-fun e!41088 () Bool)

(declare-fun e!41085 () Bool)

(assert (=> b!62577 (= e!41088 e!41085)))

(declare-fun res!34303 () Bool)

(assert (=> b!62577 (=> (not res!34303) (not e!41085))))

(assert (=> b!62577 (= res!34303 (not e!41087))))

(declare-fun res!34301 () Bool)

(assert (=> b!62577 (=> (not res!34301) (not e!41087))))

(assert (=> b!62577 (= res!34301 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!62578 () Bool)

(assert (=> b!62578 (= e!41086 call!4912)))

(declare-fun d!12645 () Bool)

(declare-fun res!34302 () Bool)

(assert (=> d!12645 (=> res!34302 e!41088)))

(assert (=> d!12645 (= res!34302 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> d!12645 (= (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)) e!41088)))

(declare-fun b!62576 () Bool)

(assert (=> b!62576 (= e!41085 e!41086)))

(assert (=> b!62576 (= c!8358 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!12645 (not res!34302)) b!62577))

(assert (= (and b!62577 res!34301) b!62574))

(assert (= (and b!62577 res!34303) b!62576))

(assert (= (and b!62576 c!8358) b!62578))

(assert (= (and b!62576 (not c!8358)) b!62575))

(assert (= (or b!62578 b!62575) bm!4909))

(declare-fun m!55961 () Bool)

(assert (=> bm!4909 m!55961))

(declare-fun m!55963 () Bool)

(assert (=> bm!4909 m!55963))

(assert (=> b!62574 m!55961))

(assert (=> b!62574 m!55961))

(declare-fun m!55965 () Bool)

(assert (=> b!62574 m!55965))

(assert (=> b!62577 m!55961))

(assert (=> b!62577 m!55961))

(declare-fun m!55967 () Bool)

(assert (=> b!62577 m!55967))

(assert (=> b!62576 m!55961))

(assert (=> b!62576 m!55961))

(assert (=> b!62576 m!55967))

(assert (=> bm!4836 d!12645))

(declare-fun b!62603 () Bool)

(declare-fun e!41105 () Bool)

(declare-fun lt!26066 () ListLongMap!1389)

(declare-fun isEmpty!304 (ListLongMap!1389) Bool)

(assert (=> b!62603 (= e!41105 (isEmpty!304 lt!26066))))

(declare-fun d!12647 () Bool)

(declare-fun e!41108 () Bool)

(assert (=> d!12647 e!41108))

(declare-fun res!34315 () Bool)

(assert (=> d!12647 (=> (not res!34315) (not e!41108))))

(assert (=> d!12647 (= res!34315 (not (contains!700 lt!26066 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!41107 () ListLongMap!1389)

(assert (=> d!12647 (= lt!26066 e!41107)))

(declare-fun c!8370 () Bool)

(assert (=> d!12647 (= c!8370 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> d!12647 (validMask!0 (mask!5994 (v!2419 (underlying!234 thiss!992))))))

(assert (=> d!12647 (= (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))) lt!26066)))

(declare-fun b!62604 () Bool)

(assert (=> b!62604 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> b!62604 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_values!2071 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun e!41109 () Bool)

(assert (=> b!62604 (= e!41109 (= (apply!68 lt!26066 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62605 () Bool)

(declare-fun e!41104 () ListLongMap!1389)

(assert (=> b!62605 (= e!41107 e!41104)))

(declare-fun c!8369 () Bool)

(assert (=> b!62605 (= c!8369 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62606 () Bool)

(declare-fun call!4915 () ListLongMap!1389)

(assert (=> b!62606 (= e!41104 call!4915)))

(declare-fun b!62607 () Bool)

(declare-fun e!41106 () Bool)

(assert (=> b!62607 (= e!41106 e!41105)))

(declare-fun c!8367 () Bool)

(assert (=> b!62607 (= c!8367 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!62608 () Bool)

(assert (=> b!62608 (= e!41108 e!41106)))

(declare-fun c!8368 () Bool)

(declare-fun e!41103 () Bool)

(assert (=> b!62608 (= c!8368 e!41103)))

(declare-fun res!34312 () Bool)

(assert (=> b!62608 (=> (not res!34312) (not e!41103))))

(assert (=> b!62608 (= res!34312 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun bm!4912 () Bool)

(assert (=> bm!4912 (= call!4915 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun b!62609 () Bool)

(assert (=> b!62609 (= e!41107 (ListLongMap!1390 Nil!1460))))

(declare-fun b!62610 () Bool)

(assert (=> b!62610 (= e!41105 (= lt!26066 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!62611 () Bool)

(assert (=> b!62611 (= e!41106 e!41109)))

(assert (=> b!62611 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun res!34314 () Bool)

(assert (=> b!62611 (= res!34314 (contains!700 lt!26066 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62611 (=> (not res!34314) (not e!41109))))

(declare-fun b!62612 () Bool)

(assert (=> b!62612 (= e!41103 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62612 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!62613 () Bool)

(declare-fun lt!26072 () Unit!1689)

(declare-fun lt!26067 () Unit!1689)

(assert (=> b!62613 (= lt!26072 lt!26067)))

(declare-fun lt!26071 () (_ BitVec 64))

(declare-fun lt!26068 () (_ BitVec 64))

(declare-fun lt!26070 () V!2867)

(declare-fun lt!26069 () ListLongMap!1389)

(assert (=> b!62613 (not (contains!700 (+!83 lt!26069 (tuple2!2067 lt!26071 lt!26070)) lt!26068))))

(declare-fun addStillNotContains!19 (ListLongMap!1389 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1689)

(assert (=> b!62613 (= lt!26067 (addStillNotContains!19 lt!26069 lt!26071 lt!26070 lt!26068))))

(assert (=> b!62613 (= lt!26068 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!62613 (= lt!26070 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!62613 (= lt!26071 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!62613 (= lt!26069 call!4915)))

(assert (=> b!62613 (= e!41104 (+!83 call!4915 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!62614 () Bool)

(declare-fun res!34313 () Bool)

(assert (=> b!62614 (=> (not res!34313) (not e!41108))))

(assert (=> b!62614 (= res!34313 (not (contains!700 lt!26066 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12647 c!8370) b!62609))

(assert (= (and d!12647 (not c!8370)) b!62605))

(assert (= (and b!62605 c!8369) b!62613))

(assert (= (and b!62605 (not c!8369)) b!62606))

(assert (= (or b!62613 b!62606) bm!4912))

(assert (= (and d!12647 res!34315) b!62614))

(assert (= (and b!62614 res!34313) b!62608))

(assert (= (and b!62608 res!34312) b!62612))

(assert (= (and b!62608 c!8368) b!62611))

(assert (= (and b!62608 (not c!8368)) b!62607))

(assert (= (and b!62611 res!34314) b!62604))

(assert (= (and b!62607 c!8367) b!62610))

(assert (= (and b!62607 (not c!8367)) b!62603))

(declare-fun b_lambda!2797 () Bool)

(assert (=> (not b_lambda!2797) (not b!62604)))

(assert (=> b!62604 t!4858))

(declare-fun b_and!3821 () Bool)

(assert (= b_and!3817 (and (=> t!4858 result!2449) b_and!3821)))

(assert (=> b!62604 t!4860))

(declare-fun b_and!3823 () Bool)

(assert (= b_and!3819 (and (=> t!4860 result!2453) b_and!3823)))

(declare-fun b_lambda!2799 () Bool)

(assert (=> (not b_lambda!2799) (not b!62613)))

(assert (=> b!62613 t!4858))

(declare-fun b_and!3825 () Bool)

(assert (= b_and!3821 (and (=> t!4858 result!2449) b_and!3825)))

(assert (=> b!62613 t!4860))

(declare-fun b_and!3827 () Bool)

(assert (= b_and!3823 (and (=> t!4860 result!2453) b_and!3827)))

(assert (=> b!62611 m!55795))

(assert (=> b!62611 m!55795))

(declare-fun m!55969 () Bool)

(assert (=> b!62611 m!55969))

(declare-fun m!55971 () Bool)

(assert (=> b!62614 m!55971))

(declare-fun m!55973 () Bool)

(assert (=> b!62603 m!55973))

(declare-fun m!55975 () Bool)

(assert (=> bm!4912 m!55975))

(assert (=> b!62612 m!55795))

(assert (=> b!62612 m!55795))

(assert (=> b!62612 m!55797))

(assert (=> b!62605 m!55795))

(assert (=> b!62605 m!55795))

(assert (=> b!62605 m!55797))

(assert (=> b!62604 m!55841))

(assert (=> b!62604 m!55841))

(assert (=> b!62604 m!55729))

(assert (=> b!62604 m!55843))

(assert (=> b!62604 m!55795))

(declare-fun m!55977 () Bool)

(assert (=> b!62604 m!55977))

(assert (=> b!62604 m!55729))

(assert (=> b!62604 m!55795))

(declare-fun m!55979 () Bool)

(assert (=> d!12647 m!55979))

(assert (=> d!12647 m!55703))

(assert (=> b!62610 m!55975))

(declare-fun m!55981 () Bool)

(assert (=> b!62613 m!55981))

(assert (=> b!62613 m!55841))

(declare-fun m!55983 () Bool)

(assert (=> b!62613 m!55983))

(declare-fun m!55985 () Bool)

(assert (=> b!62613 m!55985))

(assert (=> b!62613 m!55841))

(assert (=> b!62613 m!55729))

(assert (=> b!62613 m!55843))

(assert (=> b!62613 m!55983))

(declare-fun m!55987 () Bool)

(assert (=> b!62613 m!55987))

(assert (=> b!62613 m!55729))

(assert (=> b!62613 m!55795))

(assert (=> bm!4831 d!12647))

(declare-fun d!12649 () Bool)

(declare-fun e!41111 () Bool)

(assert (=> d!12649 e!41111))

(declare-fun res!34316 () Bool)

(assert (=> d!12649 (=> res!34316 e!41111)))

(declare-fun lt!26073 () Bool)

(assert (=> d!12649 (= res!34316 (not lt!26073))))

(declare-fun lt!26076 () Bool)

(assert (=> d!12649 (= lt!26073 lt!26076)))

(declare-fun lt!26074 () Unit!1689)

(declare-fun e!41110 () Unit!1689)

(assert (=> d!12649 (= lt!26074 e!41110)))

(declare-fun c!8371 () Bool)

(assert (=> d!12649 (= c!8371 lt!26076)))

(assert (=> d!12649 (= lt!26076 (containsKey!129 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!12649 (= (contains!700 call!4894 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) lt!26073)))

(declare-fun b!62615 () Bool)

(declare-fun lt!26075 () Unit!1689)

(assert (=> b!62615 (= e!41110 lt!26075)))

(assert (=> b!62615 (= lt!26075 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> b!62615 (isDefined!79 (getValueByKey!125 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62616 () Bool)

(declare-fun Unit!1700 () Unit!1689)

(assert (=> b!62616 (= e!41110 Unit!1700)))

(declare-fun b!62617 () Bool)

(assert (=> b!62617 (= e!41111 (isDefined!79 (getValueByKey!125 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(assert (= (and d!12649 c!8371) b!62615))

(assert (= (and d!12649 (not c!8371)) b!62616))

(assert (= (and d!12649 (not res!34316)) b!62617))

(assert (=> d!12649 m!55705))

(declare-fun m!55989 () Bool)

(assert (=> d!12649 m!55989))

(assert (=> b!62615 m!55705))

(declare-fun m!55991 () Bool)

(assert (=> b!62615 m!55991))

(assert (=> b!62615 m!55705))

(declare-fun m!55993 () Bool)

(assert (=> b!62615 m!55993))

(assert (=> b!62615 m!55993))

(declare-fun m!55995 () Bool)

(assert (=> b!62615 m!55995))

(assert (=> b!62617 m!55705))

(assert (=> b!62617 m!55993))

(assert (=> b!62617 m!55993))

(assert (=> b!62617 m!55995))

(assert (=> b!62531 d!12649))

(declare-fun d!12651 () Bool)

(declare-fun res!34317 () Bool)

(declare-fun e!41112 () Bool)

(assert (=> d!12651 (=> (not res!34317) (not e!41112))))

(assert (=> d!12651 (= res!34317 (simpleValid!43 (_2!1044 lt!26030)))))

(assert (=> d!12651 (= (valid!263 (_2!1044 lt!26030)) e!41112)))

(declare-fun b!62618 () Bool)

(declare-fun res!34318 () Bool)

(assert (=> b!62618 (=> (not res!34318) (not e!41112))))

(assert (=> b!62618 (= res!34318 (= (arrayCountValidKeys!0 (_keys!3720 (_2!1044 lt!26030)) #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))) (_size!367 (_2!1044 lt!26030))))))

(declare-fun b!62619 () Bool)

(declare-fun res!34319 () Bool)

(assert (=> b!62619 (=> (not res!34319) (not e!41112))))

(assert (=> b!62619 (= res!34319 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 (_2!1044 lt!26030)) (mask!5994 (_2!1044 lt!26030))))))

(declare-fun b!62620 () Bool)

(assert (=> b!62620 (= e!41112 (arrayNoDuplicates!0 (_keys!3720 (_2!1044 lt!26030)) #b00000000000000000000000000000000 Nil!1461))))

(assert (= (and d!12651 res!34317) b!62618))

(assert (= (and b!62618 res!34318) b!62619))

(assert (= (and b!62619 res!34319) b!62620))

(declare-fun m!55997 () Bool)

(assert (=> d!12651 m!55997))

(declare-fun m!55999 () Bool)

(assert (=> b!62618 m!55999))

(declare-fun m!56001 () Bool)

(assert (=> b!62619 m!56001))

(declare-fun m!56003 () Bool)

(assert (=> b!62620 m!56003))

(assert (=> d!12625 d!12651))

(assert (=> d!12625 d!12609))

(assert (=> b!62497 d!12643))

(declare-fun d!12653 () Bool)

(declare-fun lt!26079 () (_ BitVec 32))

(assert (=> d!12653 (and (bvsge lt!26079 #b00000000000000000000000000000000) (bvsle lt!26079 (bvsub (size!2030 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!41117 () (_ BitVec 32))

(assert (=> d!12653 (= lt!26079 e!41117)))

(declare-fun c!8376 () Bool)

(assert (=> d!12653 (= c!8376 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!12653 (and (bvsle #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2030 (_keys!3720 newMap!16)) (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!12653 (= (arrayCountValidKeys!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) lt!26079)))

(declare-fun bm!4915 () Bool)

(declare-fun call!4918 () (_ BitVec 32))

(assert (=> bm!4915 (= call!4918 (arrayCountValidKeys!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62629 () Bool)

(declare-fun e!41118 () (_ BitVec 32))

(assert (=> b!62629 (= e!41118 (bvadd #b00000000000000000000000000000001 call!4918))))

(declare-fun b!62630 () Bool)

(assert (=> b!62630 (= e!41117 #b00000000000000000000000000000000)))

(declare-fun b!62631 () Bool)

(assert (=> b!62631 (= e!41117 e!41118)))

(declare-fun c!8377 () Bool)

(assert (=> b!62631 (= c!8377 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62632 () Bool)

(assert (=> b!62632 (= e!41118 call!4918)))

(assert (= (and d!12653 c!8376) b!62630))

(assert (= (and d!12653 (not c!8376)) b!62631))

(assert (= (and b!62631 c!8377) b!62629))

(assert (= (and b!62631 (not c!8377)) b!62632))

(assert (= (or b!62629 b!62632) bm!4915))

(declare-fun m!56005 () Bool)

(assert (=> bm!4915 m!56005))

(declare-fun m!56007 () Bool)

(assert (=> b!62631 m!56007))

(assert (=> b!62631 m!56007))

(declare-fun m!56009 () Bool)

(assert (=> b!62631 m!56009))

(assert (=> b!62375 d!12653))

(declare-fun d!12655 () Bool)

(assert (=> d!12655 (= (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62368 d!12655))

(declare-fun d!12657 () Bool)

(declare-fun e!41120 () Bool)

(assert (=> d!12657 e!41120))

(declare-fun res!34320 () Bool)

(assert (=> d!12657 (=> res!34320 e!41120)))

(declare-fun lt!26080 () Bool)

(assert (=> d!12657 (= res!34320 (not lt!26080))))

(declare-fun lt!26083 () Bool)

(assert (=> d!12657 (= lt!26080 lt!26083)))

(declare-fun lt!26081 () Unit!1689)

(declare-fun e!41119 () Unit!1689)

(assert (=> d!12657 (= lt!26081 e!41119)))

(declare-fun c!8378 () Bool)

(assert (=> d!12657 (= c!8378 lt!26083)))

(assert (=> d!12657 (= lt!26083 (containsKey!129 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!12657 (= (contains!700 lt!25929 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26080)))

(declare-fun b!62633 () Bool)

(declare-fun lt!26082 () Unit!1689)

(assert (=> b!62633 (= e!41119 lt!26082)))

(assert (=> b!62633 (= lt!26082 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62633 (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62634 () Bool)

(declare-fun Unit!1701 () Unit!1689)

(assert (=> b!62634 (= e!41119 Unit!1701)))

(declare-fun b!62635 () Bool)

(assert (=> b!62635 (= e!41120 (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!12657 c!8378) b!62633))

(assert (= (and d!12657 (not c!8378)) b!62634))

(assert (= (and d!12657 (not res!34320)) b!62635))

(assert (=> d!12657 m!55795))

(declare-fun m!56011 () Bool)

(assert (=> d!12657 m!56011))

(assert (=> b!62633 m!55795))

(declare-fun m!56013 () Bool)

(assert (=> b!62633 m!56013))

(assert (=> b!62633 m!55795))

(declare-fun m!56015 () Bool)

(assert (=> b!62633 m!56015))

(assert (=> b!62633 m!56015))

(declare-fun m!56017 () Bool)

(assert (=> b!62633 m!56017))

(assert (=> b!62635 m!55795))

(assert (=> b!62635 m!56015))

(assert (=> b!62635 m!56015))

(assert (=> b!62635 m!56017))

(assert (=> b!62350 d!12657))

(declare-fun b!62652 () Bool)

(declare-fun e!41129 () Bool)

(declare-fun lt!26089 () SeekEntryResult!239)

(assert (=> b!62652 (= e!41129 ((_ is Undefined!239) lt!26089))))

(declare-fun b!62653 () Bool)

(declare-fun e!41130 () Bool)

(assert (=> b!62653 (= e!41130 e!41129)))

(declare-fun c!8383 () Bool)

(assert (=> b!62653 (= c!8383 ((_ is MissingVacant!239) lt!26089))))

(declare-fun b!62654 () Bool)

(declare-fun res!34329 () Bool)

(declare-fun e!41132 () Bool)

(assert (=> b!62654 (=> (not res!34329) (not e!41132))))

(declare-fun call!4923 () Bool)

(assert (=> b!62654 (= res!34329 call!4923)))

(assert (=> b!62654 (= e!41129 e!41132)))

(declare-fun b!62655 () Bool)

(declare-fun e!41131 () Bool)

(assert (=> b!62655 (= e!41130 e!41131)))

(declare-fun res!34332 () Bool)

(assert (=> b!62655 (= res!34332 call!4923)))

(assert (=> b!62655 (=> (not res!34332) (not e!41131))))

(declare-fun bm!4920 () Bool)

(declare-fun call!4924 () Bool)

(assert (=> bm!4920 (= call!4924 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun d!12659 () Bool)

(assert (=> d!12659 e!41130))

(declare-fun c!8384 () Bool)

(assert (=> d!12659 (= c!8384 ((_ is MissingZero!239) lt!26089))))

(assert (=> d!12659 (= lt!26089 (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun lt!26088 () Unit!1689)

(declare-fun choose!339 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) Int) Unit!1689)

(assert (=> d!12659 (= lt!26088 (choose!339 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12659 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12659 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)) lt!26088)))

(declare-fun b!62656 () Bool)

(assert (=> b!62656 (= e!41132 (not call!4924))))

(declare-fun b!62657 () Bool)

(declare-fun res!34330 () Bool)

(assert (=> b!62657 (=> (not res!34330) (not e!41132))))

(assert (=> b!62657 (= res!34330 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3084 lt!26089)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62657 (and (bvsge (index!3084 lt!26089) #b00000000000000000000000000000000) (bvslt (index!3084 lt!26089) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62658 () Bool)

(assert (=> b!62658 (= e!41131 (not call!4924))))

(declare-fun bm!4921 () Bool)

(assert (=> bm!4921 (= call!4923 (inRange!0 (ite c!8384 (index!3081 lt!26089) (index!3084 lt!26089)) (mask!5994 newMap!16)))))

(declare-fun b!62659 () Bool)

(assert (=> b!62659 (and (bvsge (index!3081 lt!26089) #b00000000000000000000000000000000) (bvslt (index!3081 lt!26089) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun res!34331 () Bool)

(assert (=> b!62659 (= res!34331 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3081 lt!26089)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62659 (=> (not res!34331) (not e!41131))))

(assert (= (and d!12659 c!8384) b!62655))

(assert (= (and d!12659 (not c!8384)) b!62653))

(assert (= (and b!62655 res!34332) b!62659))

(assert (= (and b!62659 res!34331) b!62658))

(assert (= (and b!62653 c!8383) b!62654))

(assert (= (and b!62653 (not c!8383)) b!62652))

(assert (= (and b!62654 res!34329) b!62657))

(assert (= (and b!62657 res!34330) b!62656))

(assert (= (or b!62655 b!62654) bm!4921))

(assert (= (or b!62658 b!62656) bm!4920))

(assert (=> d!12659 m!55705))

(assert (=> d!12659 m!55909))

(assert (=> d!12659 m!55705))

(declare-fun m!56019 () Bool)

(assert (=> d!12659 m!56019))

(assert (=> d!12659 m!55941))

(declare-fun m!56021 () Bool)

(assert (=> b!62657 m!56021))

(declare-fun m!56023 () Bool)

(assert (=> bm!4921 m!56023))

(assert (=> bm!4920 m!55705))

(assert (=> bm!4920 m!55893))

(declare-fun m!56025 () Bool)

(assert (=> b!62659 m!56025))

(assert (=> bm!4896 d!12659))

(assert (=> d!12613 d!12619))

(declare-fun d!12661 () Bool)

(assert (=> d!12661 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) from!355 Nil!1461)))

(assert (=> d!12661 true))

(declare-fun _$71!78 () Unit!1689)

(assert (=> d!12661 (= (choose!39 (_keys!3720 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!78)))

(declare-fun bs!2709 () Bool)

(assert (= bs!2709 d!12661))

(assert (=> bs!2709 m!55719))

(assert (=> d!12613 d!12661))

(declare-fun d!12663 () Bool)

(assert (=> d!12663 (= (map!1119 (_2!1044 lt!26030)) (getCurrentListMap!407 (_keys!3720 (_2!1044 lt!26030)) (_values!2071 (_2!1044 lt!26030)) (mask!5994 (_2!1044 lt!26030)) (extraKeys!1967 (_2!1044 lt!26030)) (zeroValue!2000 (_2!1044 lt!26030)) (minValue!2000 (_2!1044 lt!26030)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1044 lt!26030))))))

(declare-fun bs!2710 () Bool)

(assert (= bs!2710 d!12663))

(declare-fun m!56027 () Bool)

(assert (=> bs!2710 m!56027))

(assert (=> bm!4905 d!12663))

(assert (=> b!62388 d!12615))

(declare-fun d!12665 () Bool)

(assert (=> d!12665 (isDefined!79 (getValueByKey!125 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun lt!26092 () Unit!1689)

(declare-fun choose!340 (List!1463 (_ BitVec 64)) Unit!1689)

(assert (=> d!12665 (= lt!26092 (choose!340 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun e!41135 () Bool)

(assert (=> d!12665 e!41135))

(declare-fun res!34335 () Bool)

(assert (=> d!12665 (=> (not res!34335) (not e!41135))))

(declare-fun isStrictlySorted!281 (List!1463) Bool)

(assert (=> d!12665 (= res!34335 (isStrictlySorted!281 (toList!710 lt!25845)))))

(assert (=> d!12665 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) lt!26092)))

(declare-fun b!62662 () Bool)

(assert (=> b!62662 (= e!41135 (containsKey!129 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (= (and d!12665 res!34335) b!62662))

(assert (=> d!12665 m!55705))

(assert (=> d!12665 m!55871))

(assert (=> d!12665 m!55871))

(assert (=> d!12665 m!55873))

(assert (=> d!12665 m!55705))

(declare-fun m!56029 () Bool)

(assert (=> d!12665 m!56029))

(declare-fun m!56031 () Bool)

(assert (=> d!12665 m!56031))

(assert (=> b!62662 m!55705))

(assert (=> b!62662 m!55867))

(assert (=> b!62411 d!12665))

(declare-fun d!12667 () Bool)

(declare-fun isEmpty!305 (Option!131) Bool)

(assert (=> d!12667 (= (isDefined!79 (getValueByKey!125 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))) (not (isEmpty!305 (getValueByKey!125 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))))

(declare-fun bs!2711 () Bool)

(assert (= bs!2711 d!12667))

(assert (=> bs!2711 m!55871))

(declare-fun m!56033 () Bool)

(assert (=> bs!2711 m!56033))

(assert (=> b!62411 d!12667))

(declare-fun c!8389 () Bool)

(declare-fun d!12669 () Bool)

(assert (=> d!12669 (= c!8389 (and ((_ is Cons!1459) (toList!710 lt!25845)) (= (_1!1043 (h!2042 (toList!710 lt!25845))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(declare-fun e!41140 () Option!131)

(assert (=> d!12669 (= (getValueByKey!125 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) e!41140)))

(declare-fun b!62673 () Bool)

(declare-fun e!41141 () Option!131)

(assert (=> b!62673 (= e!41141 (getValueByKey!125 (t!4861 (toList!710 lt!25845)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62674 () Bool)

(assert (=> b!62674 (= e!41141 None!129)))

(declare-fun b!62672 () Bool)

(assert (=> b!62672 (= e!41140 e!41141)))

(declare-fun c!8390 () Bool)

(assert (=> b!62672 (= c!8390 (and ((_ is Cons!1459) (toList!710 lt!25845)) (not (= (_1!1043 (h!2042 (toList!710 lt!25845))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))))

(declare-fun b!62671 () Bool)

(assert (=> b!62671 (= e!41140 (Some!130 (_2!1043 (h!2042 (toList!710 lt!25845)))))))

(assert (= (and d!12669 c!8389) b!62671))

(assert (= (and d!12669 (not c!8389)) b!62672))

(assert (= (and b!62672 c!8390) b!62673))

(assert (= (and b!62672 (not c!8390)) b!62674))

(assert (=> b!62673 m!55705))

(declare-fun m!56035 () Bool)

(assert (=> b!62673 m!56035))

(assert (=> b!62411 d!12669))

(declare-fun d!12671 () Bool)

(declare-fun e!41144 () Bool)

(assert (=> d!12671 e!41144))

(declare-fun c!8393 () Bool)

(assert (=> d!12671 (= c!8393 (and (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!12671 true))

(declare-fun _$29!72 () Unit!1689)

(assert (=> d!12671 (= (choose!337 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))) _$29!72)))

(declare-fun b!62679 () Bool)

(assert (=> b!62679 (= e!41144 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!62680 () Bool)

(assert (=> b!62680 (= e!41144 (ite (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!12671 c!8393) b!62679))

(assert (= (and d!12671 (not c!8393)) b!62680))

(assert (=> b!62679 m!55705))

(assert (=> b!62679 m!55723))

(assert (=> d!12617 d!12671))

(assert (=> d!12617 d!12621))

(assert (=> b!62413 d!12667))

(assert (=> b!62413 d!12669))

(declare-fun d!12673 () Bool)

(assert (=> d!12673 (= (get!1098 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2418 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> b!62538 d!12673))

(declare-fun d!12675 () Bool)

(declare-fun e!41147 () Bool)

(assert (=> d!12675 e!41147))

(declare-fun res!34340 () Bool)

(assert (=> d!12675 (=> (not res!34340) (not e!41147))))

(declare-fun lt!26101 () ListLongMap!1389)

(assert (=> d!12675 (= res!34340 (contains!700 lt!26101 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!26104 () List!1463)

(assert (=> d!12675 (= lt!26101 (ListLongMap!1390 lt!26104))))

(declare-fun lt!26103 () Unit!1689)

(declare-fun lt!26102 () Unit!1689)

(assert (=> d!12675 (= lt!26103 lt!26102)))

(assert (=> d!12675 (= (getValueByKey!125 lt!26104 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!130 (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!44 (List!1463 (_ BitVec 64) V!2867) Unit!1689)

(assert (=> d!12675 (= lt!26102 (lemmaContainsTupThenGetReturnValue!44 lt!26104 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun insertStrictlySorted!46 (List!1463 (_ BitVec 64) V!2867) List!1463)

(assert (=> d!12675 (= lt!26104 (insertStrictlySorted!46 (toList!710 e!41046) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12675 (= (+!83 e!41046 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26101)))

(declare-fun b!62685 () Bool)

(declare-fun res!34341 () Bool)

(assert (=> b!62685 (=> (not res!34341) (not e!41147))))

(assert (=> b!62685 (= res!34341 (= (getValueByKey!125 (toList!710 lt!26101) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!130 (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!62686 () Bool)

(declare-fun contains!703 (List!1463 tuple2!2066) Bool)

(assert (=> b!62686 (= e!41147 (contains!703 (toList!710 lt!26101) (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12675 res!34340) b!62685))

(assert (= (and b!62685 res!34341) b!62686))

(declare-fun m!56037 () Bool)

(assert (=> d!12675 m!56037))

(declare-fun m!56039 () Bool)

(assert (=> d!12675 m!56039))

(declare-fun m!56041 () Bool)

(assert (=> d!12675 m!56041))

(declare-fun m!56043 () Bool)

(assert (=> d!12675 m!56043))

(declare-fun m!56045 () Bool)

(assert (=> b!62685 m!56045))

(declare-fun m!56047 () Bool)

(assert (=> b!62686 m!56047))

(assert (=> bm!4885 d!12675))

(declare-fun d!12677 () Bool)

(declare-fun e!41148 () Bool)

(assert (=> d!12677 e!41148))

(declare-fun res!34342 () Bool)

(assert (=> d!12677 (=> (not res!34342) (not e!41148))))

(declare-fun lt!26105 () ListLongMap!1389)

(assert (=> d!12677 (= res!34342 (contains!700 lt!26105 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26108 () List!1463)

(assert (=> d!12677 (= lt!26105 (ListLongMap!1390 lt!26108))))

(declare-fun lt!26107 () Unit!1689)

(declare-fun lt!26106 () Unit!1689)

(assert (=> d!12677 (= lt!26107 lt!26106)))

(assert (=> d!12677 (= (getValueByKey!125 lt!26108 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12677 (= lt!26106 (lemmaContainsTupThenGetReturnValue!44 lt!26108 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12677 (= lt!26108 (insertStrictlySorted!46 (toList!710 call!4910) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12677 (= (+!83 call!4910 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26105)))

(declare-fun b!62687 () Bool)

(declare-fun res!34343 () Bool)

(assert (=> b!62687 (=> (not res!34343) (not e!41148))))

(assert (=> b!62687 (= res!34343 (= (getValueByKey!125 (toList!710 lt!26105) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62688 () Bool)

(assert (=> b!62688 (= e!41148 (contains!703 (toList!710 lt!26105) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12677 res!34342) b!62687))

(assert (= (and b!62687 res!34343) b!62688))

(declare-fun m!56049 () Bool)

(assert (=> d!12677 m!56049))

(declare-fun m!56051 () Bool)

(assert (=> d!12677 m!56051))

(declare-fun m!56053 () Bool)

(assert (=> d!12677 m!56053))

(declare-fun m!56055 () Bool)

(assert (=> d!12677 m!56055))

(declare-fun m!56057 () Bool)

(assert (=> b!62687 m!56057))

(declare-fun m!56059 () Bool)

(assert (=> b!62688 m!56059))

(assert (=> b!62504 d!12677))

(declare-fun d!12679 () Bool)

(declare-fun e!41149 () Bool)

(assert (=> d!12679 e!41149))

(declare-fun res!34344 () Bool)

(assert (=> d!12679 (=> (not res!34344) (not e!41149))))

(declare-fun lt!26109 () ListLongMap!1389)

(assert (=> d!12679 (= res!34344 (contains!700 lt!26109 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun lt!26112 () List!1463)

(assert (=> d!12679 (= lt!26109 (ListLongMap!1390 lt!26112))))

(declare-fun lt!26111 () Unit!1689)

(declare-fun lt!26110 () Unit!1689)

(assert (=> d!12679 (= lt!26111 lt!26110)))

(assert (=> d!12679 (= (getValueByKey!125 lt!26112 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12679 (= lt!26110 (lemmaContainsTupThenGetReturnValue!44 lt!26112 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12679 (= lt!26112 (insertStrictlySorted!46 (toList!710 lt!25916) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12679 (= (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!26109)))

(declare-fun b!62689 () Bool)

(declare-fun res!34345 () Bool)

(assert (=> b!62689 (=> (not res!34345) (not e!41149))))

(assert (=> b!62689 (= res!34345 (= (getValueByKey!125 (toList!710 lt!26109) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!62690 () Bool)

(assert (=> b!62690 (= e!41149 (contains!703 (toList!710 lt!26109) (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(assert (= (and d!12679 res!34344) b!62689))

(assert (= (and b!62689 res!34345) b!62690))

(declare-fun m!56061 () Bool)

(assert (=> d!12679 m!56061))

(declare-fun m!56063 () Bool)

(assert (=> d!12679 m!56063))

(declare-fun m!56065 () Bool)

(assert (=> d!12679 m!56065))

(declare-fun m!56067 () Bool)

(assert (=> d!12679 m!56067))

(declare-fun m!56069 () Bool)

(assert (=> b!62689 m!56069))

(declare-fun m!56071 () Bool)

(assert (=> b!62690 m!56071))

(assert (=> b!62360 d!12679))

(declare-fun d!12681 () Bool)

(declare-fun e!41150 () Bool)

(assert (=> d!12681 e!41150))

(declare-fun res!34346 () Bool)

(assert (=> d!12681 (=> (not res!34346) (not e!41150))))

(declare-fun lt!26113 () ListLongMap!1389)

(assert (=> d!12681 (= res!34346 (contains!700 lt!26113 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun lt!26116 () List!1463)

(assert (=> d!12681 (= lt!26113 (ListLongMap!1390 lt!26116))))

(declare-fun lt!26115 () Unit!1689)

(declare-fun lt!26114 () Unit!1689)

(assert (=> d!12681 (= lt!26115 lt!26114)))

(assert (=> d!12681 (= (getValueByKey!125 lt!26116 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12681 (= lt!26114 (lemmaContainsTupThenGetReturnValue!44 lt!26116 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12681 (= lt!26116 (insertStrictlySorted!46 (toList!710 lt!25919) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12681 (= (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!26113)))

(declare-fun b!62691 () Bool)

(declare-fun res!34347 () Bool)

(assert (=> b!62691 (=> (not res!34347) (not e!41150))))

(assert (=> b!62691 (= res!34347 (= (getValueByKey!125 (toList!710 lt!26113) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!62692 () Bool)

(assert (=> b!62692 (= e!41150 (contains!703 (toList!710 lt!26113) (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(assert (= (and d!12681 res!34346) b!62691))

(assert (= (and b!62691 res!34347) b!62692))

(declare-fun m!56073 () Bool)

(assert (=> d!12681 m!56073))

(declare-fun m!56075 () Bool)

(assert (=> d!12681 m!56075))

(declare-fun m!56077 () Bool)

(assert (=> d!12681 m!56077))

(declare-fun m!56079 () Bool)

(assert (=> d!12681 m!56079))

(declare-fun m!56081 () Bool)

(assert (=> b!62691 m!56081))

(declare-fun m!56083 () Bool)

(assert (=> b!62692 m!56083))

(assert (=> b!62360 d!12681))

(declare-fun d!12683 () Bool)

(assert (=> d!12683 (contains!700 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25931)))

(declare-fun lt!26119 () Unit!1689)

(declare-fun choose!341 (ListLongMap!1389 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1689)

(assert (=> d!12683 (= lt!26119 (choose!341 lt!25921 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25931))))

(assert (=> d!12683 (contains!700 lt!25921 lt!25931)))

(assert (=> d!12683 (= (addStillContains!44 lt!25921 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25931) lt!26119)))

(declare-fun bs!2712 () Bool)

(assert (= bs!2712 d!12683))

(assert (=> bs!2712 m!55817))

(assert (=> bs!2712 m!55817))

(assert (=> bs!2712 m!55831))

(declare-fun m!56085 () Bool)

(assert (=> bs!2712 m!56085))

(declare-fun m!56087 () Bool)

(assert (=> bs!2712 m!56087))

(assert (=> b!62360 d!12683))

(assert (=> b!62360 d!12647))

(declare-fun d!12685 () Bool)

(assert (=> d!12685 (= (apply!68 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25926) (apply!68 lt!25923 lt!25926))))

(declare-fun lt!26122 () Unit!1689)

(declare-fun choose!342 (ListLongMap!1389 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1689)

(assert (=> d!12685 (= lt!26122 (choose!342 lt!25923 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25926))))

(declare-fun e!41153 () Bool)

(assert (=> d!12685 e!41153))

(declare-fun res!34350 () Bool)

(assert (=> d!12685 (=> (not res!34350) (not e!41153))))

(assert (=> d!12685 (= res!34350 (contains!700 lt!25923 lt!25926))))

(assert (=> d!12685 (= (addApplyDifferent!44 lt!25923 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25926) lt!26122)))

(declare-fun b!62697 () Bool)

(assert (=> b!62697 (= e!41153 (not (= lt!25926 lt!25933)))))

(assert (= (and d!12685 res!34350) b!62697))

(assert (=> d!12685 m!55805))

(assert (=> d!12685 m!55807))

(declare-fun m!56089 () Bool)

(assert (=> d!12685 m!56089))

(assert (=> d!12685 m!55815))

(declare-fun m!56091 () Bool)

(assert (=> d!12685 m!56091))

(assert (=> d!12685 m!55805))

(assert (=> b!62360 d!12685))

(declare-fun d!12687 () Bool)

(declare-fun get!1100 (Option!131) V!2867)

(assert (=> d!12687 (= (apply!68 lt!25916 lt!25915) (get!1100 (getValueByKey!125 (toList!710 lt!25916) lt!25915)))))

(declare-fun bs!2713 () Bool)

(assert (= bs!2713 d!12687))

(declare-fun m!56093 () Bool)

(assert (=> bs!2713 m!56093))

(assert (=> bs!2713 m!56093))

(declare-fun m!56095 () Bool)

(assert (=> bs!2713 m!56095))

(assert (=> b!62360 d!12687))

(declare-fun d!12689 () Bool)

(declare-fun e!41154 () Bool)

(assert (=> d!12689 e!41154))

(declare-fun res!34351 () Bool)

(assert (=> d!12689 (=> (not res!34351) (not e!41154))))

(declare-fun lt!26123 () ListLongMap!1389)

(assert (=> d!12689 (= res!34351 (contains!700 lt!26123 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun lt!26126 () List!1463)

(assert (=> d!12689 (= lt!26123 (ListLongMap!1390 lt!26126))))

(declare-fun lt!26125 () Unit!1689)

(declare-fun lt!26124 () Unit!1689)

(assert (=> d!12689 (= lt!26125 lt!26124)))

(assert (=> d!12689 (= (getValueByKey!125 lt!26126 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12689 (= lt!26124 (lemmaContainsTupThenGetReturnValue!44 lt!26126 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12689 (= lt!26126 (insertStrictlySorted!46 (toList!710 lt!25923) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12689 (= (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!26123)))

(declare-fun b!62698 () Bool)

(declare-fun res!34352 () Bool)

(assert (=> b!62698 (=> (not res!34352) (not e!41154))))

(assert (=> b!62698 (= res!34352 (= (getValueByKey!125 (toList!710 lt!26123) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!62699 () Bool)

(assert (=> b!62699 (= e!41154 (contains!703 (toList!710 lt!26123) (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(assert (= (and d!12689 res!34351) b!62698))

(assert (= (and b!62698 res!34352) b!62699))

(declare-fun m!56097 () Bool)

(assert (=> d!12689 m!56097))

(declare-fun m!56099 () Bool)

(assert (=> d!12689 m!56099))

(declare-fun m!56101 () Bool)

(assert (=> d!12689 m!56101))

(declare-fun m!56103 () Bool)

(assert (=> d!12689 m!56103))

(declare-fun m!56105 () Bool)

(assert (=> b!62698 m!56105))

(declare-fun m!56107 () Bool)

(assert (=> b!62699 m!56107))

(assert (=> b!62360 d!12689))

(declare-fun d!12691 () Bool)

(assert (=> d!12691 (= (apply!68 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25915) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25915)))))

(declare-fun bs!2714 () Bool)

(assert (= bs!2714 d!12691))

(declare-fun m!56109 () Bool)

(assert (=> bs!2714 m!56109))

(assert (=> bs!2714 m!56109))

(declare-fun m!56111 () Bool)

(assert (=> bs!2714 m!56111))

(assert (=> b!62360 d!12691))

(declare-fun d!12693 () Bool)

(declare-fun e!41156 () Bool)

(assert (=> d!12693 e!41156))

(declare-fun res!34353 () Bool)

(assert (=> d!12693 (=> res!34353 e!41156)))

(declare-fun lt!26127 () Bool)

(assert (=> d!12693 (= res!34353 (not lt!26127))))

(declare-fun lt!26130 () Bool)

(assert (=> d!12693 (= lt!26127 lt!26130)))

(declare-fun lt!26128 () Unit!1689)

(declare-fun e!41155 () Unit!1689)

(assert (=> d!12693 (= lt!26128 e!41155)))

(declare-fun c!8394 () Bool)

(assert (=> d!12693 (= c!8394 lt!26130)))

(assert (=> d!12693 (= lt!26130 (containsKey!129 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931))))

(assert (=> d!12693 (= (contains!700 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25931) lt!26127)))

(declare-fun b!62700 () Bool)

(declare-fun lt!26129 () Unit!1689)

(assert (=> b!62700 (= e!41155 lt!26129)))

(assert (=> b!62700 (= lt!26129 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931))))

(assert (=> b!62700 (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931))))

(declare-fun b!62701 () Bool)

(declare-fun Unit!1702 () Unit!1689)

(assert (=> b!62701 (= e!41155 Unit!1702)))

(declare-fun b!62702 () Bool)

(assert (=> b!62702 (= e!41156 (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931)))))

(assert (= (and d!12693 c!8394) b!62700))

(assert (= (and d!12693 (not c!8394)) b!62701))

(assert (= (and d!12693 (not res!34353)) b!62702))

(declare-fun m!56113 () Bool)

(assert (=> d!12693 m!56113))

(declare-fun m!56115 () Bool)

(assert (=> b!62700 m!56115))

(declare-fun m!56117 () Bool)

(assert (=> b!62700 m!56117))

(assert (=> b!62700 m!56117))

(declare-fun m!56119 () Bool)

(assert (=> b!62700 m!56119))

(assert (=> b!62702 m!56117))

(assert (=> b!62702 m!56117))

(assert (=> b!62702 m!56119))

(assert (=> b!62360 d!12693))

(declare-fun d!12695 () Bool)

(assert (=> d!12695 (= (apply!68 lt!25919 lt!25928) (get!1100 (getValueByKey!125 (toList!710 lt!25919) lt!25928)))))

(declare-fun bs!2715 () Bool)

(assert (= bs!2715 d!12695))

(declare-fun m!56121 () Bool)

(assert (=> bs!2715 m!56121))

(assert (=> bs!2715 m!56121))

(declare-fun m!56123 () Bool)

(assert (=> bs!2715 m!56123))

(assert (=> b!62360 d!12695))

(declare-fun d!12697 () Bool)

(assert (=> d!12697 (= (apply!68 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25928) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25928)))))

(declare-fun bs!2716 () Bool)

(assert (= bs!2716 d!12697))

(declare-fun m!56125 () Bool)

(assert (=> bs!2716 m!56125))

(assert (=> bs!2716 m!56125))

(declare-fun m!56127 () Bool)

(assert (=> bs!2716 m!56127))

(assert (=> b!62360 d!12697))

(declare-fun d!12699 () Bool)

(assert (=> d!12699 (= (apply!68 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25926) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25926)))))

(declare-fun bs!2717 () Bool)

(assert (= bs!2717 d!12699))

(declare-fun m!56129 () Bool)

(assert (=> bs!2717 m!56129))

(assert (=> bs!2717 m!56129))

(declare-fun m!56131 () Bool)

(assert (=> bs!2717 m!56131))

(assert (=> b!62360 d!12699))

(declare-fun d!12701 () Bool)

(declare-fun e!41157 () Bool)

(assert (=> d!12701 e!41157))

(declare-fun res!34354 () Bool)

(assert (=> d!12701 (=> (not res!34354) (not e!41157))))

(declare-fun lt!26131 () ListLongMap!1389)

(assert (=> d!12701 (= res!34354 (contains!700 lt!26131 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun lt!26134 () List!1463)

(assert (=> d!12701 (= lt!26131 (ListLongMap!1390 lt!26134))))

(declare-fun lt!26133 () Unit!1689)

(declare-fun lt!26132 () Unit!1689)

(assert (=> d!12701 (= lt!26133 lt!26132)))

(assert (=> d!12701 (= (getValueByKey!125 lt!26134 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12701 (= lt!26132 (lemmaContainsTupThenGetReturnValue!44 lt!26134 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12701 (= lt!26134 (insertStrictlySorted!46 (toList!710 lt!25921) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12701 (= (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!26131)))

(declare-fun b!62703 () Bool)

(declare-fun res!34355 () Bool)

(assert (=> b!62703 (=> (not res!34355) (not e!41157))))

(assert (=> b!62703 (= res!34355 (= (getValueByKey!125 (toList!710 lt!26131) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!62704 () Bool)

(assert (=> b!62704 (= e!41157 (contains!703 (toList!710 lt!26131) (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(assert (= (and d!12701 res!34354) b!62703))

(assert (= (and b!62703 res!34355) b!62704))

(declare-fun m!56133 () Bool)

(assert (=> d!12701 m!56133))

(declare-fun m!56135 () Bool)

(assert (=> d!12701 m!56135))

(declare-fun m!56137 () Bool)

(assert (=> d!12701 m!56137))

(declare-fun m!56139 () Bool)

(assert (=> d!12701 m!56139))

(declare-fun m!56141 () Bool)

(assert (=> b!62703 m!56141))

(declare-fun m!56143 () Bool)

(assert (=> b!62704 m!56143))

(assert (=> b!62360 d!12701))

(declare-fun d!12703 () Bool)

(assert (=> d!12703 (= (apply!68 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25928) (apply!68 lt!25919 lt!25928))))

(declare-fun lt!26135 () Unit!1689)

(assert (=> d!12703 (= lt!26135 (choose!342 lt!25919 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25928))))

(declare-fun e!41158 () Bool)

(assert (=> d!12703 e!41158))

(declare-fun res!34356 () Bool)

(assert (=> d!12703 (=> (not res!34356) (not e!41158))))

(assert (=> d!12703 (= res!34356 (contains!700 lt!25919 lt!25928))))

(assert (=> d!12703 (= (addApplyDifferent!44 lt!25919 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25928) lt!26135)))

(declare-fun b!62705 () Bool)

(assert (=> b!62705 (= e!41158 (not (= lt!25928 lt!25925)))))

(assert (= (and d!12703 res!34356) b!62705))

(assert (=> d!12703 m!55811))

(assert (=> d!12703 m!55813))

(declare-fun m!56145 () Bool)

(assert (=> d!12703 m!56145))

(assert (=> d!12703 m!55823))

(declare-fun m!56147 () Bool)

(assert (=> d!12703 m!56147))

(assert (=> d!12703 m!55811))

(assert (=> b!62360 d!12703))

(declare-fun d!12705 () Bool)

(assert (=> d!12705 (= (apply!68 lt!25923 lt!25926) (get!1100 (getValueByKey!125 (toList!710 lt!25923) lt!25926)))))

(declare-fun bs!2718 () Bool)

(assert (= bs!2718 d!12705))

(declare-fun m!56149 () Bool)

(assert (=> bs!2718 m!56149))

(assert (=> bs!2718 m!56149))

(declare-fun m!56151 () Bool)

(assert (=> bs!2718 m!56151))

(assert (=> b!62360 d!12705))

(declare-fun d!12707 () Bool)

(assert (=> d!12707 (= (apply!68 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25915) (apply!68 lt!25916 lt!25915))))

(declare-fun lt!26136 () Unit!1689)

(assert (=> d!12707 (= lt!26136 (choose!342 lt!25916 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25915))))

(declare-fun e!41159 () Bool)

(assert (=> d!12707 e!41159))

(declare-fun res!34357 () Bool)

(assert (=> d!12707 (=> (not res!34357) (not e!41159))))

(assert (=> d!12707 (= res!34357 (contains!700 lt!25916 lt!25915))))

(assert (=> d!12707 (= (addApplyDifferent!44 lt!25916 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25915) lt!26136)))

(declare-fun b!62706 () Bool)

(assert (=> b!62706 (= e!41159 (not (= lt!25915 lt!25922)))))

(assert (= (and d!12707 res!34357) b!62706))

(assert (=> d!12707 m!55829))

(assert (=> d!12707 m!55833))

(declare-fun m!56153 () Bool)

(assert (=> d!12707 m!56153))

(assert (=> d!12707 m!55821))

(declare-fun m!56155 () Bool)

(assert (=> d!12707 m!56155))

(assert (=> d!12707 m!55829))

(assert (=> b!62360 d!12707))

(declare-fun b!62741 () Bool)

(declare-fun res!34384 () Bool)

(declare-fun lt!26206 () SeekEntryResult!239)

(assert (=> b!62741 (= res!34384 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3084 lt!26206)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41181 () Bool)

(assert (=> b!62741 (=> (not res!34384) (not e!41181))))

(declare-fun b!62742 () Bool)

(declare-fun res!34382 () Bool)

(declare-fun e!41180 () Bool)

(assert (=> b!62742 (=> (not res!34382) (not e!41180))))

(assert (=> b!62742 (= res!34382 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3081 lt!26206)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!12709 () Bool)

(declare-fun e!41183 () Bool)

(assert (=> d!12709 e!41183))

(declare-fun res!34379 () Bool)

(assert (=> d!12709 (=> (not res!34379) (not e!41183))))

(declare-fun lt!26197 () tuple2!2068)

(assert (=> d!12709 (= res!34379 (_1!1044 lt!26197))))

(assert (=> d!12709 (= lt!26197 (tuple2!2069 true (LongMapFixedSize!637 (defaultEntry!2088 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (bvadd (_size!367 newMap!16) #b00000000000000000000000000000001) (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (_vacant!367 newMap!16))))))

(declare-fun lt!26209 () Unit!1689)

(declare-fun lt!26210 () Unit!1689)

(assert (=> d!12709 (= lt!26209 lt!26210)))

(declare-fun lt!26214 () array!3760)

(declare-fun lt!26207 () array!3762)

(assert (=> d!12709 (contains!700 (getCurrentListMap!407 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026))))))

(assert (=> d!12709 (= lt!26210 (lemmaValidKeyInArrayIsInListMap!75 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12709 (= lt!26207 (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))))

(assert (=> d!12709 (= lt!26214 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun lt!26213 () Unit!1689)

(declare-fun lt!26220 () Unit!1689)

(assert (=> d!12709 (= lt!26213 lt!26220)))

(declare-fun lt!26223 () array!3760)

(assert (=> d!12709 (= (arrayCountValidKeys!0 lt!26223 (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (bvadd (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3760 (_ BitVec 32)) Unit!1689)

(assert (=> d!12709 (= lt!26220 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!26223 (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026))))))

(assert (=> d!12709 (= lt!26223 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun lt!26216 () Unit!1689)

(declare-fun lt!26202 () Unit!1689)

(assert (=> d!12709 (= lt!26216 lt!26202)))

(declare-fun lt!26217 () array!3760)

(assert (=> d!12709 (arrayContainsKey!0 lt!26217 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3760 (_ BitVec 64) (_ BitVec 32)) Unit!1689)

(assert (=> d!12709 (= lt!26202 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!26217 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026))))))

(assert (=> d!12709 (= lt!26217 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun lt!26205 () Unit!1689)

(declare-fun lt!26224 () Unit!1689)

(assert (=> d!12709 (= lt!26205 lt!26224)))

(assert (=> d!12709 (= (+!83 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!407 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!7 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) (_ BitVec 64) V!2867 Int) Unit!1689)

(assert (=> d!12709 (= lt!26224 (lemmaAddValidKeyToArrayThenAddPairToListMap!7 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26226 () Unit!1689)

(declare-fun lt!26219 () Unit!1689)

(assert (=> d!12709 (= lt!26226 lt!26219)))

(assert (=> d!12709 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (mask!5994 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3760 (_ BitVec 32) (_ BitVec 32)) Unit!1689)

(assert (=> d!12709 (= lt!26219 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (mask!5994 newMap!16)))))

(declare-fun lt!26204 () Unit!1689)

(declare-fun lt!26199 () Unit!1689)

(assert (=> d!12709 (= lt!26204 lt!26199)))

(assert (=> d!12709 (= (arrayCountValidKeys!0 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3760 (_ BitVec 32) (_ BitVec 64)) Unit!1689)

(assert (=> d!12709 (= lt!26199 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3720 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun lt!26198 () Unit!1689)

(declare-fun lt!26212 () Unit!1689)

(assert (=> d!12709 (= lt!26198 lt!26212)))

(declare-fun lt!26211 () List!1464)

(declare-fun lt!26203 () (_ BitVec 32))

(assert (=> d!12709 (arrayNoDuplicates!0 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) lt!26203 lt!26211)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3760 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1464) Unit!1689)

(assert (=> d!12709 (= lt!26212 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) lt!26203 lt!26211))))

(assert (=> d!12709 (= lt!26211 Nil!1461)))

(assert (=> d!12709 (= lt!26203 #b00000000000000000000000000000000)))

(declare-fun lt!26200 () Unit!1689)

(declare-fun e!41178 () Unit!1689)

(assert (=> d!12709 (= lt!26200 e!41178)))

(declare-fun c!8404 () Bool)

(assert (=> d!12709 (= c!8404 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!26201 () Unit!1689)

(declare-fun e!41182 () Unit!1689)

(assert (=> d!12709 (= lt!26201 e!41182)))

(declare-fun c!8406 () Bool)

(assert (=> d!12709 (= c!8406 (contains!700 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!12709 (valid!263 newMap!16)))

(assert (=> d!12709 (= (updateHelperNewKey!17 newMap!16 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026))) lt!26197)))

(declare-fun b!62743 () Bool)

(declare-fun e!41177 () Bool)

(assert (=> b!62743 (= e!41177 ((_ is Undefined!239) lt!26206))))

(declare-fun b!62744 () Bool)

(declare-fun Unit!1703 () Unit!1689)

(assert (=> b!62744 (= e!41178 Unit!1703)))

(declare-fun lt!26225 () Unit!1689)

(declare-fun lemmaArrayContainsKeyThenInListMap!7 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) (_ BitVec 32) Int) Unit!1689)

(assert (=> b!62744 (= lt!26225 (lemmaArrayContainsKeyThenInListMap!7 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(assert (=> b!62744 (contains!700 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))

(declare-fun lt!26215 () Unit!1689)

(assert (=> b!62744 (= lt!26215 lt!26225)))

(assert (=> b!62744 false))

(declare-fun b!62745 () Bool)

(declare-fun res!34383 () Bool)

(assert (=> b!62745 (=> (not res!34383) (not e!41183))))

(assert (=> b!62745 (= res!34383 (valid!263 (_2!1044 lt!26197)))))

(declare-fun b!62746 () Bool)

(declare-fun lt!26208 () Unit!1689)

(assert (=> b!62746 (= e!41182 lt!26208)))

(assert (=> b!62746 (= lt!26208 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(declare-fun call!4935 () SeekEntryResult!239)

(assert (=> b!62746 (= lt!26206 call!4935)))

(declare-fun c!8403 () Bool)

(assert (=> b!62746 (= c!8403 ((_ is MissingZero!239) lt!26206))))

(declare-fun e!41179 () Bool)

(assert (=> b!62746 e!41179))

(declare-fun b!62747 () Bool)

(declare-fun Unit!1704 () Unit!1689)

(assert (=> b!62747 (= e!41178 Unit!1704)))

(declare-fun b!62748 () Bool)

(declare-fun c!8405 () Bool)

(assert (=> b!62748 (= c!8405 ((_ is MissingVacant!239) lt!26206))))

(assert (=> b!62748 (= e!41179 e!41177)))

(declare-fun lt!26218 () SeekEntryResult!239)

(declare-fun call!4933 () Bool)

(declare-fun bm!4930 () Bool)

(assert (=> bm!4930 (= call!4933 (inRange!0 (ite c!8406 (index!3082 lt!26218) (ite c!8403 (index!3081 lt!26206) (index!3084 lt!26206))) (mask!5994 newMap!16)))))

(declare-fun bm!4931 () Bool)

(declare-fun call!4936 () Bool)

(assert (=> bm!4931 (= call!4936 call!4933)))

(declare-fun b!62749 () Bool)

(declare-fun call!4934 () Bool)

(assert (=> b!62749 (= e!41180 (not call!4934))))

(declare-fun b!62750 () Bool)

(assert (=> b!62750 (= e!41177 e!41181)))

(declare-fun res!34381 () Bool)

(assert (=> b!62750 (= res!34381 call!4936)))

(assert (=> b!62750 (=> (not res!34381) (not e!41181))))

(declare-fun b!62751 () Bool)

(declare-fun res!34380 () Bool)

(assert (=> b!62751 (= res!34380 call!4933)))

(declare-fun e!41176 () Bool)

(assert (=> b!62751 (=> (not res!34380) (not e!41176))))

(declare-fun b!62752 () Bool)

(assert (=> b!62752 (= e!41176 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26218)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62753 () Bool)

(assert (=> b!62753 (= e!41181 (not call!4934))))

(declare-fun bm!4932 () Bool)

(assert (=> bm!4932 (= call!4934 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!62754 () Bool)

(declare-fun res!34377 () Bool)

(assert (=> b!62754 (=> (not res!34377) (not e!41183))))

(assert (=> b!62754 (= res!34377 (contains!700 (map!1119 (_2!1044 lt!26197)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62755 () Bool)

(declare-fun res!34376 () Bool)

(assert (=> b!62755 (=> (not res!34376) (not e!41180))))

(assert (=> b!62755 (= res!34376 call!4936)))

(assert (=> b!62755 (= e!41179 e!41180)))

(declare-fun b!62756 () Bool)

(declare-fun Unit!1705 () Unit!1689)

(assert (=> b!62756 (= e!41182 Unit!1705)))

(declare-fun lt!26221 () Unit!1689)

(assert (=> b!62756 (= lt!26221 (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(assert (=> b!62756 (= lt!26218 call!4935)))

(declare-fun res!34378 () Bool)

(assert (=> b!62756 (= res!34378 ((_ is Found!239) lt!26218))))

(assert (=> b!62756 (=> (not res!34378) (not e!41176))))

(assert (=> b!62756 e!41176))

(declare-fun lt!26222 () Unit!1689)

(assert (=> b!62756 (= lt!26222 lt!26221)))

(assert (=> b!62756 false))

(declare-fun bm!4933 () Bool)

(assert (=> bm!4933 (= call!4935 (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!62757 () Bool)

(assert (=> b!62757 (= e!41183 (= (map!1119 (_2!1044 lt!26197)) (+!83 (map!1119 newMap!16) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12709 c!8406) b!62756))

(assert (= (and d!12709 (not c!8406)) b!62746))

(assert (= (and b!62756 res!34378) b!62751))

(assert (= (and b!62751 res!34380) b!62752))

(assert (= (and b!62746 c!8403) b!62755))

(assert (= (and b!62746 (not c!8403)) b!62748))

(assert (= (and b!62755 res!34376) b!62742))

(assert (= (and b!62742 res!34382) b!62749))

(assert (= (and b!62748 c!8405) b!62750))

(assert (= (and b!62748 (not c!8405)) b!62743))

(assert (= (and b!62750 res!34381) b!62741))

(assert (= (and b!62741 res!34384) b!62753))

(assert (= (or b!62755 b!62750) bm!4931))

(assert (= (or b!62749 b!62753) bm!4932))

(assert (= (or b!62751 bm!4931) bm!4930))

(assert (= (or b!62756 b!62746) bm!4933))

(assert (= (and d!12709 c!8404) b!62744))

(assert (= (and d!12709 (not c!8404)) b!62747))

(assert (= (and d!12709 res!34379) b!62745))

(assert (= (and b!62745 res!34383) b!62754))

(assert (= (and b!62754 res!34377) b!62757))

(assert (=> b!62744 m!55705))

(declare-fun m!56157 () Bool)

(assert (=> b!62744 m!56157))

(assert (=> b!62744 m!55787))

(assert (=> b!62744 m!55787))

(assert (=> b!62744 m!55705))

(assert (=> b!62744 m!55887))

(declare-fun m!56159 () Bool)

(assert (=> b!62745 m!56159))

(assert (=> bm!4932 m!55705))

(assert (=> bm!4932 m!55893))

(assert (=> bm!4933 m!55705))

(assert (=> bm!4933 m!55909))

(declare-fun m!56161 () Bool)

(assert (=> b!62757 m!56161))

(assert (=> b!62757 m!55707))

(assert (=> b!62757 m!55707))

(declare-fun m!56163 () Bool)

(assert (=> b!62757 m!56163))

(declare-fun m!56165 () Bool)

(assert (=> b!62741 m!56165))

(assert (=> b!62746 m!55705))

(assert (=> b!62746 m!55891))

(declare-fun m!56167 () Bool)

(assert (=> b!62752 m!56167))

(assert (=> b!62754 m!56161))

(assert (=> b!62754 m!56161))

(assert (=> b!62754 m!55705))

(declare-fun m!56169 () Bool)

(assert (=> b!62754 m!56169))

(declare-fun m!56171 () Bool)

(assert (=> b!62742 m!56171))

(declare-fun m!56173 () Bool)

(assert (=> bm!4930 m!56173))

(assert (=> b!62756 m!55705))

(assert (=> b!62756 m!55899))

(declare-fun m!56175 () Bool)

(assert (=> d!12709 m!56175))

(assert (=> d!12709 m!55705))

(declare-fun m!56177 () Bool)

(assert (=> d!12709 m!56177))

(assert (=> d!12709 m!55705))

(assert (=> d!12709 m!55893))

(assert (=> d!12709 m!55847))

(assert (=> d!12709 m!55705))

(assert (=> d!12709 m!55731))

(declare-fun m!56179 () Bool)

(assert (=> d!12709 m!56179))

(assert (=> d!12709 m!55705))

(declare-fun m!56181 () Bool)

(assert (=> d!12709 m!56181))

(assert (=> d!12709 m!55787))

(declare-fun m!56183 () Bool)

(assert (=> d!12709 m!56183))

(declare-fun m!56185 () Bool)

(assert (=> d!12709 m!56185))

(declare-fun m!56187 () Bool)

(assert (=> d!12709 m!56187))

(assert (=> d!12709 m!55787))

(assert (=> d!12709 m!55705))

(assert (=> d!12709 m!55887))

(assert (=> d!12709 m!56185))

(declare-fun m!56189 () Bool)

(assert (=> d!12709 m!56189))

(declare-fun m!56191 () Bool)

(assert (=> d!12709 m!56191))

(assert (=> d!12709 m!55715))

(declare-fun m!56193 () Bool)

(assert (=> d!12709 m!56193))

(declare-fun m!56195 () Bool)

(assert (=> d!12709 m!56195))

(assert (=> d!12709 m!55705))

(declare-fun m!56197 () Bool)

(assert (=> d!12709 m!56197))

(assert (=> d!12709 m!55787))

(declare-fun m!56199 () Bool)

(assert (=> d!12709 m!56199))

(declare-fun m!56201 () Bool)

(assert (=> d!12709 m!56201))

(assert (=> d!12709 m!55705))

(declare-fun m!56203 () Bool)

(assert (=> d!12709 m!56203))

(assert (=> d!12709 m!55705))

(declare-fun m!56205 () Bool)

(assert (=> d!12709 m!56205))

(declare-fun m!56207 () Bool)

(assert (=> d!12709 m!56207))

(declare-fun m!56209 () Bool)

(assert (=> d!12709 m!56209))

(declare-fun m!56211 () Bool)

(assert (=> d!12709 m!56211))

(assert (=> d!12709 m!56183))

(assert (=> bm!4906 d!12709))

(declare-fun c!8407 () Bool)

(declare-fun b!62758 () Bool)

(assert (=> b!62758 (= c!8407 (and (not (= (bvand (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41193 () ListLongMap!1389)

(declare-fun e!41186 () ListLongMap!1389)

(assert (=> b!62758 (= e!41193 e!41186)))

(declare-fun bm!4935 () Bool)

(declare-fun call!4941 () ListLongMap!1389)

(declare-fun call!4938 () ListLongMap!1389)

(assert (=> bm!4935 (= call!4941 call!4938)))

(declare-fun b!62759 () Bool)

(declare-fun e!41194 () Bool)

(declare-fun e!41196 () Bool)

(assert (=> b!62759 (= e!41194 e!41196)))

(declare-fun c!8410 () Bool)

(assert (=> b!62759 (= c!8410 (not (= (bvand (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62760 () Bool)

(declare-fun e!41185 () Bool)

(declare-fun e!41189 () Bool)

(assert (=> b!62760 (= e!41185 e!41189)))

(declare-fun res!34387 () Bool)

(assert (=> b!62760 (=> (not res!34387) (not e!41189))))

(declare-fun lt!26243 () ListLongMap!1389)

(assert (=> b!62760 (= res!34387 (contains!700 lt!26243 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62760 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62761 () Bool)

(assert (=> b!62761 (= e!41189 (= (apply!68 lt!26243 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62761 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022))))))

(assert (=> b!62761 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62762 () Bool)

(declare-fun e!41188 () Bool)

(declare-fun e!41184 () Bool)

(assert (=> b!62762 (= e!41188 e!41184)))

(declare-fun res!34388 () Bool)

(declare-fun call!4937 () Bool)

(assert (=> b!62762 (= res!34388 call!4937)))

(assert (=> b!62762 (=> (not res!34388) (not e!41184))))

(declare-fun bm!4936 () Bool)

(declare-fun call!4940 () ListLongMap!1389)

(assert (=> bm!4936 (= call!4938 call!4940)))

(declare-fun b!62763 () Bool)

(declare-fun e!41187 () Bool)

(assert (=> b!62763 (= e!41187 (= (apply!68 lt!26243 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))

(declare-fun b!62764 () Bool)

(declare-fun res!34393 () Bool)

(assert (=> b!62764 (=> (not res!34393) (not e!41194))))

(assert (=> b!62764 (= res!34393 e!41185)))

(declare-fun res!34392 () Bool)

(assert (=> b!62764 (=> res!34392 e!41185)))

(declare-fun e!41190 () Bool)

(assert (=> b!62764 (= res!34392 (not e!41190))))

(declare-fun res!34386 () Bool)

(assert (=> b!62764 (=> (not res!34386) (not e!41190))))

(assert (=> b!62764 (= res!34386 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62765 () Bool)

(declare-fun e!41195 () Unit!1689)

(declare-fun Unit!1706 () Unit!1689)

(assert (=> b!62765 (= e!41195 Unit!1706)))

(declare-fun b!62766 () Bool)

(declare-fun call!4943 () Bool)

(assert (=> b!62766 (= e!41196 (not call!4943))))

(declare-fun call!4942 () ListLongMap!1389)

(declare-fun e!41192 () ListLongMap!1389)

(declare-fun b!62767 () Bool)

(assert (=> b!62767 (= e!41192 (+!83 call!4942 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))

(declare-fun b!62768 () Bool)

(declare-fun res!34385 () Bool)

(assert (=> b!62768 (=> (not res!34385) (not e!41194))))

(assert (=> b!62768 (= res!34385 e!41188)))

(declare-fun c!8411 () Bool)

(assert (=> b!62768 (= c!8411 (not (= (bvand (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62769 () Bool)

(assert (=> b!62769 (= e!41184 (= (apply!68 lt!26243 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))

(declare-fun b!62770 () Bool)

(declare-fun lt!26244 () Unit!1689)

(assert (=> b!62770 (= e!41195 lt!26244)))

(declare-fun lt!26235 () ListLongMap!1389)

(assert (=> b!62770 (= lt!26235 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022) (mask!5994 newMap!16) (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26248 () (_ BitVec 64))

(assert (=> b!62770 (= lt!26248 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26245 () (_ BitVec 64))

(assert (=> b!62770 (= lt!26245 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26232 () Unit!1689)

(assert (=> b!62770 (= lt!26232 (addStillContains!44 lt!26235 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26245))))

(assert (=> b!62770 (contains!700 (+!83 lt!26235 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26245)))

(declare-fun lt!26246 () Unit!1689)

(assert (=> b!62770 (= lt!26246 lt!26232)))

(declare-fun lt!26230 () ListLongMap!1389)

(assert (=> b!62770 (= lt!26230 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022) (mask!5994 newMap!16) (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26236 () (_ BitVec 64))

(assert (=> b!62770 (= lt!26236 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26229 () (_ BitVec 64))

(assert (=> b!62770 (= lt!26229 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26228 () Unit!1689)

(assert (=> b!62770 (= lt!26228 (addApplyDifferent!44 lt!26230 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26229))))

(assert (=> b!62770 (= (apply!68 (+!83 lt!26230 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26229) (apply!68 lt!26230 lt!26229))))

(declare-fun lt!26231 () Unit!1689)

(assert (=> b!62770 (= lt!26231 lt!26228)))

(declare-fun lt!26237 () ListLongMap!1389)

(assert (=> b!62770 (= lt!26237 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022) (mask!5994 newMap!16) (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26247 () (_ BitVec 64))

(assert (=> b!62770 (= lt!26247 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26240 () (_ BitVec 64))

(assert (=> b!62770 (= lt!26240 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26238 () Unit!1689)

(assert (=> b!62770 (= lt!26238 (addApplyDifferent!44 lt!26237 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26240))))

(assert (=> b!62770 (= (apply!68 (+!83 lt!26237 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26240) (apply!68 lt!26237 lt!26240))))

(declare-fun lt!26241 () Unit!1689)

(assert (=> b!62770 (= lt!26241 lt!26238)))

(declare-fun lt!26233 () ListLongMap!1389)

(assert (=> b!62770 (= lt!26233 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022) (mask!5994 newMap!16) (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26239 () (_ BitVec 64))

(assert (=> b!62770 (= lt!26239 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26242 () (_ BitVec 64))

(assert (=> b!62770 (= lt!26242 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62770 (= lt!26244 (addApplyDifferent!44 lt!26233 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26242))))

(assert (=> b!62770 (= (apply!68 (+!83 lt!26233 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26242) (apply!68 lt!26233 lt!26242))))

(declare-fun b!62771 () Bool)

(assert (=> b!62771 (= e!41190 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4937 () Bool)

(declare-fun call!4939 () ListLongMap!1389)

(assert (=> bm!4937 (= call!4939 call!4942)))

(declare-fun b!62772 () Bool)

(assert (=> b!62772 (= e!41196 e!41187)))

(declare-fun res!34389 () Bool)

(assert (=> b!62772 (= res!34389 call!4943)))

(assert (=> b!62772 (=> (not res!34389) (not e!41187))))

(declare-fun bm!4938 () Bool)

(assert (=> bm!4938 (= call!4940 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022) (mask!5994 newMap!16) (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun c!8412 () Bool)

(declare-fun c!8409 () Bool)

(declare-fun bm!4939 () Bool)

(assert (=> bm!4939 (= call!4942 (+!83 (ite c!8409 call!4940 (ite c!8412 call!4938 call!4941)) (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(declare-fun b!62773 () Bool)

(assert (=> b!62773 (= e!41192 e!41193)))

(assert (=> b!62773 (= c!8412 (and (not (= (bvand (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!12711 () Bool)

(assert (=> d!12711 e!41194))

(declare-fun res!34390 () Bool)

(assert (=> d!12711 (=> (not res!34390) (not e!41194))))

(assert (=> d!12711 (= res!34390 (or (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))))

(declare-fun lt!26227 () ListLongMap!1389)

(assert (=> d!12711 (= lt!26243 lt!26227)))

(declare-fun lt!26234 () Unit!1689)

(assert (=> d!12711 (= lt!26234 e!41195)))

(declare-fun c!8408 () Bool)

(declare-fun e!41191 () Bool)

(assert (=> d!12711 (= c!8408 e!41191)))

(declare-fun res!34391 () Bool)

(assert (=> d!12711 (=> (not res!34391) (not e!41191))))

(assert (=> d!12711 (= res!34391 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!12711 (= lt!26227 e!41192)))

(assert (=> d!12711 (= c!8409 (and (not (= (bvand (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12711 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12711 (= (getCurrentListMap!407 (_keys!3720 newMap!16) (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022) (mask!5994 newMap!16) (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26243)))

(declare-fun bm!4934 () Bool)

(assert (=> bm!4934 (= call!4943 (contains!700 lt!26243 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62774 () Bool)

(assert (=> b!62774 (= e!41193 call!4939)))

(declare-fun b!62775 () Bool)

(assert (=> b!62775 (= e!41186 call!4939)))

(declare-fun bm!4940 () Bool)

(assert (=> bm!4940 (= call!4937 (contains!700 lt!26243 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62776 () Bool)

(assert (=> b!62776 (= e!41186 call!4941)))

(declare-fun b!62777 () Bool)

(assert (=> b!62777 (= e!41188 (not call!4937))))

(declare-fun b!62778 () Bool)

(assert (=> b!62778 (= e!41191 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12711 c!8409) b!62767))

(assert (= (and d!12711 (not c!8409)) b!62773))

(assert (= (and b!62773 c!8412) b!62774))

(assert (= (and b!62773 (not c!8412)) b!62758))

(assert (= (and b!62758 c!8407) b!62775))

(assert (= (and b!62758 (not c!8407)) b!62776))

(assert (= (or b!62775 b!62776) bm!4935))

(assert (= (or b!62774 bm!4935) bm!4936))

(assert (= (or b!62774 b!62775) bm!4937))

(assert (= (or b!62767 bm!4936) bm!4938))

(assert (= (or b!62767 bm!4937) bm!4939))

(assert (= (and d!12711 res!34391) b!62778))

(assert (= (and d!12711 c!8408) b!62770))

(assert (= (and d!12711 (not c!8408)) b!62765))

(assert (= (and d!12711 res!34390) b!62764))

(assert (= (and b!62764 res!34386) b!62771))

(assert (= (and b!62764 (not res!34392)) b!62760))

(assert (= (and b!62760 res!34387) b!62761))

(assert (= (and b!62764 res!34393) b!62768))

(assert (= (and b!62768 c!8411) b!62762))

(assert (= (and b!62768 (not c!8411)) b!62777))

(assert (= (and b!62762 res!34388) b!62769))

(assert (= (or b!62762 b!62777) bm!4940))

(assert (= (and b!62768 res!34385) b!62759))

(assert (= (and b!62759 c!8410) b!62772))

(assert (= (and b!62759 (not c!8410)) b!62766))

(assert (= (and b!62772 res!34389) b!62763))

(assert (= (or b!62772 b!62766) bm!4934))

(declare-fun b_lambda!2801 () Bool)

(assert (=> (not b_lambda!2801) (not b!62761)))

(declare-fun tb!1381 () Bool)

(declare-fun t!4870 () Bool)

(assert (=> (and b!62232 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16)) t!4870) tb!1381))

(declare-fun result!2463 () Bool)

(assert (=> tb!1381 (= result!2463 tp_is_empty!2415)))

(assert (=> b!62761 t!4870))

(declare-fun b_and!3829 () Bool)

(assert (= b_and!3825 (and (=> t!4870 result!2463) b_and!3829)))

(declare-fun t!4872 () Bool)

(declare-fun tb!1383 () Bool)

(assert (=> (and b!62236 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 newMap!16)) t!4872) tb!1383))

(declare-fun result!2465 () Bool)

(assert (= result!2465 result!2463))

(assert (=> b!62761 t!4872))

(declare-fun b_and!3831 () Bool)

(assert (= b_and!3827 (and (=> t!4872 result!2465) b_and!3831)))

(declare-fun m!56213 () Bool)

(assert (=> b!62767 m!56213))

(declare-fun m!56215 () Bool)

(assert (=> b!62769 m!56215))

(declare-fun m!56217 () Bool)

(assert (=> bm!4939 m!56217))

(assert (=> b!62778 m!56007))

(assert (=> b!62778 m!56007))

(assert (=> b!62778 m!56009))

(declare-fun m!56219 () Bool)

(assert (=> bm!4938 m!56219))

(assert (=> b!62771 m!56007))

(assert (=> b!62771 m!56007))

(assert (=> b!62771 m!56009))

(assert (=> b!62760 m!56007))

(assert (=> b!62760 m!56007))

(declare-fun m!56221 () Bool)

(assert (=> b!62760 m!56221))

(declare-fun m!56223 () Bool)

(assert (=> bm!4934 m!56223))

(assert (=> b!62770 m!56007))

(declare-fun m!56225 () Bool)

(assert (=> b!62770 m!56225))

(declare-fun m!56227 () Bool)

(assert (=> b!62770 m!56227))

(declare-fun m!56229 () Bool)

(assert (=> b!62770 m!56229))

(declare-fun m!56231 () Bool)

(assert (=> b!62770 m!56231))

(declare-fun m!56233 () Bool)

(assert (=> b!62770 m!56233))

(declare-fun m!56235 () Bool)

(assert (=> b!62770 m!56235))

(declare-fun m!56237 () Bool)

(assert (=> b!62770 m!56237))

(declare-fun m!56239 () Bool)

(assert (=> b!62770 m!56239))

(declare-fun m!56241 () Bool)

(assert (=> b!62770 m!56241))

(declare-fun m!56243 () Bool)

(assert (=> b!62770 m!56243))

(declare-fun m!56245 () Bool)

(assert (=> b!62770 m!56245))

(assert (=> b!62770 m!56231))

(declare-fun m!56247 () Bool)

(assert (=> b!62770 m!56247))

(declare-fun m!56249 () Bool)

(assert (=> b!62770 m!56249))

(assert (=> b!62770 m!56237))

(declare-fun m!56251 () Bool)

(assert (=> b!62770 m!56251))

(assert (=> b!62770 m!56225))

(assert (=> b!62770 m!56249))

(declare-fun m!56253 () Bool)

(assert (=> b!62770 m!56253))

(assert (=> b!62770 m!56219))

(assert (=> d!12711 m!55941))

(declare-fun m!56255 () Bool)

(assert (=> bm!4940 m!56255))

(declare-fun m!56257 () Bool)

(assert (=> b!62763 m!56257))

(declare-fun m!56259 () Bool)

(assert (=> b!62761 m!56259))

(assert (=> b!62761 m!56007))

(assert (=> b!62761 m!56007))

(declare-fun m!56261 () Bool)

(assert (=> b!62761 m!56261))

(declare-fun m!56263 () Bool)

(assert (=> b!62761 m!56263))

(assert (=> b!62761 m!56259))

(declare-fun m!56265 () Bool)

(assert (=> b!62761 m!56265))

(assert (=> b!62761 m!56263))

(assert (=> bm!4891 d!12711))

(assert (=> b!62402 d!12641))

(declare-fun d!12713 () Bool)

(declare-fun e!41198 () Bool)

(assert (=> d!12713 e!41198))

(declare-fun res!34394 () Bool)

(assert (=> d!12713 (=> res!34394 e!41198)))

(declare-fun lt!26249 () Bool)

(assert (=> d!12713 (= res!34394 (not lt!26249))))

(declare-fun lt!26252 () Bool)

(assert (=> d!12713 (= lt!26249 lt!26252)))

(declare-fun lt!26250 () Unit!1689)

(declare-fun e!41197 () Unit!1689)

(assert (=> d!12713 (= lt!26250 e!41197)))

(declare-fun c!8413 () Bool)

(assert (=> d!12713 (= c!8413 lt!26252)))

(assert (=> d!12713 (= lt!26252 (containsKey!129 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12713 (= (contains!700 lt!25929 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26249)))

(declare-fun b!62779 () Bool)

(declare-fun lt!26251 () Unit!1689)

(assert (=> b!62779 (= e!41197 lt!26251)))

(assert (=> b!62779 (= lt!26251 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62779 (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62780 () Bool)

(declare-fun Unit!1707 () Unit!1689)

(assert (=> b!62780 (= e!41197 Unit!1707)))

(declare-fun b!62781 () Bool)

(assert (=> b!62781 (= e!41198 (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12713 c!8413) b!62779))

(assert (= (and d!12713 (not c!8413)) b!62780))

(assert (= (and d!12713 (not res!34394)) b!62781))

(declare-fun m!56267 () Bool)

(assert (=> d!12713 m!56267))

(declare-fun m!56269 () Bool)

(assert (=> b!62779 m!56269))

(declare-fun m!56271 () Bool)

(assert (=> b!62779 m!56271))

(assert (=> b!62779 m!56271))

(declare-fun m!56273 () Bool)

(assert (=> b!62779 m!56273))

(assert (=> b!62781 m!56271))

(assert (=> b!62781 m!56271))

(assert (=> b!62781 m!56273))

(assert (=> bm!4827 d!12713))

(declare-fun d!12715 () Bool)

(declare-fun lt!26255 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!66 (List!1464) (InoxSet (_ BitVec 64)))

(assert (=> d!12715 (= lt!26255 (select (content!66 Nil!1461) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun e!41203 () Bool)

(assert (=> d!12715 (= lt!26255 e!41203)))

(declare-fun res!34400 () Bool)

(assert (=> d!12715 (=> (not res!34400) (not e!41203))))

(assert (=> d!12715 (= res!34400 ((_ is Cons!1460) Nil!1461))))

(assert (=> d!12715 (= (contains!702 Nil!1461 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) lt!26255)))

(declare-fun b!62786 () Bool)

(declare-fun e!41204 () Bool)

(assert (=> b!62786 (= e!41203 e!41204)))

(declare-fun res!34399 () Bool)

(assert (=> b!62786 (=> res!34399 e!41204)))

(assert (=> b!62786 (= res!34399 (= (h!2043 Nil!1461) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62787 () Bool)

(assert (=> b!62787 (= e!41204 (contains!702 (t!4862 Nil!1461) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (= (and d!12715 res!34400) b!62786))

(assert (= (and b!62786 (not res!34399)) b!62787))

(declare-fun m!56275 () Bool)

(assert (=> d!12715 m!56275))

(assert (=> d!12715 m!55705))

(declare-fun m!56277 () Bool)

(assert (=> d!12715 m!56277))

(assert (=> b!62787 m!55705))

(declare-fun m!56279 () Bool)

(assert (=> b!62787 m!56279))

(assert (=> b!62400 d!12715))

(declare-fun d!12717 () Bool)

(declare-fun e!41205 () Bool)

(assert (=> d!12717 e!41205))

(declare-fun res!34401 () Bool)

(assert (=> d!12717 (=> (not res!34401) (not e!41205))))

(declare-fun lt!26256 () ListLongMap!1389)

(assert (=> d!12717 (= res!34401 (contains!700 lt!26256 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun lt!26259 () List!1463)

(assert (=> d!12717 (= lt!26256 (ListLongMap!1390 lt!26259))))

(declare-fun lt!26258 () Unit!1689)

(declare-fun lt!26257 () Unit!1689)

(assert (=> d!12717 (= lt!26258 lt!26257)))

(assert (=> d!12717 (= (getValueByKey!125 lt!26259 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) (Some!130 (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> d!12717 (= lt!26257 (lemmaContainsTupThenGetReturnValue!44 lt!26259 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> d!12717 (= lt!26259 (insertStrictlySorted!46 (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834))) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> d!12717 (= (+!83 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834)) (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26256)))

(declare-fun b!62788 () Bool)

(declare-fun res!34402 () Bool)

(assert (=> b!62788 (=> (not res!34402) (not e!41205))))

(assert (=> b!62788 (= res!34402 (= (getValueByKey!125 (toList!710 lt!26256) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) (Some!130 (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun b!62789 () Bool)

(assert (=> b!62789 (= e!41205 (contains!703 (toList!710 lt!26256) (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (= (and d!12717 res!34401) b!62788))

(assert (= (and b!62788 res!34402) b!62789))

(declare-fun m!56281 () Bool)

(assert (=> d!12717 m!56281))

(declare-fun m!56283 () Bool)

(assert (=> d!12717 m!56283))

(declare-fun m!56285 () Bool)

(assert (=> d!12717 m!56285))

(declare-fun m!56287 () Bool)

(assert (=> d!12717 m!56287))

(declare-fun m!56289 () Bool)

(assert (=> b!62788 m!56289))

(declare-fun m!56291 () Bool)

(assert (=> b!62789 m!56291))

(assert (=> bm!4832 d!12717))

(declare-fun b!62800 () Bool)

(declare-fun res!34413 () Bool)

(declare-fun e!41208 () Bool)

(assert (=> b!62800 (=> (not res!34413) (not e!41208))))

(declare-fun size!2034 (LongMapFixedSize!636) (_ BitVec 32))

(assert (=> b!62800 (= res!34413 (= (size!2034 newMap!16) (bvadd (_size!367 newMap!16) (bvsdiv (bvadd (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!12719 () Bool)

(declare-fun res!34411 () Bool)

(assert (=> d!12719 (=> (not res!34411) (not e!41208))))

(assert (=> d!12719 (= res!34411 (validMask!0 (mask!5994 newMap!16)))))

(assert (=> d!12719 (= (simpleValid!43 newMap!16) e!41208)))

(declare-fun b!62801 () Bool)

(assert (=> b!62801 (= e!41208 (and (bvsge (extraKeys!1967 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1967 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!367 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!62799 () Bool)

(declare-fun res!34412 () Bool)

(assert (=> b!62799 (=> (not res!34412) (not e!41208))))

(assert (=> b!62799 (= res!34412 (bvsge (size!2034 newMap!16) (_size!367 newMap!16)))))

(declare-fun b!62798 () Bool)

(declare-fun res!34414 () Bool)

(assert (=> b!62798 (=> (not res!34414) (not e!41208))))

(assert (=> b!62798 (= res!34414 (and (= (size!2031 (_values!2071 newMap!16)) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001)) (= (size!2030 (_keys!3720 newMap!16)) (size!2031 (_values!2071 newMap!16))) (bvsge (_size!367 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!367 newMap!16) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001))))))

(assert (= (and d!12719 res!34411) b!62798))

(assert (= (and b!62798 res!34414) b!62799))

(assert (= (and b!62799 res!34412) b!62800))

(assert (= (and b!62800 res!34413) b!62801))

(declare-fun m!56293 () Bool)

(assert (=> b!62800 m!56293))

(assert (=> d!12719 m!55941))

(assert (=> b!62799 m!56293))

(assert (=> d!12609 d!12719))

(declare-fun d!12721 () Bool)

(declare-fun e!41211 () Bool)

(assert (=> d!12721 e!41211))

(declare-fun res!34417 () Bool)

(assert (=> d!12721 (=> (not res!34417) (not e!41211))))

(assert (=> d!12721 (= res!34417 (and (bvsge (index!3082 lt!26026) #b00000000000000000000000000000000) (bvslt (index!3082 lt!26026) (size!2030 (_keys!3720 newMap!16)))))))

(declare-fun lt!26262 () Unit!1689)

(declare-fun choose!343 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) Int) Unit!1689)

(assert (=> d!12721 (= lt!26262 (choose!343 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3082 lt!26026) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12721 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12721 (= (lemmaValidKeyInArrayIsInListMap!75 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3082 lt!26026) (defaultEntry!2088 newMap!16)) lt!26262)))

(declare-fun b!62804 () Bool)

(assert (=> b!62804 (= e!41211 (contains!700 (getCurrentListMap!407 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026))))))

(assert (= (and d!12721 res!34417) b!62804))

(declare-fun m!56295 () Bool)

(assert (=> d!12721 m!56295))

(assert (=> d!12721 m!55941))

(declare-fun m!56297 () Bool)

(assert (=> b!62804 m!56297))

(assert (=> b!62804 m!55921))

(assert (=> b!62804 m!56297))

(assert (=> b!62804 m!55921))

(declare-fun m!56299 () Bool)

(assert (=> b!62804 m!56299))

(assert (=> b!62498 d!12721))

(declare-fun d!12723 () Bool)

(declare-fun e!41214 () Bool)

(assert (=> d!12723 e!41214))

(declare-fun res!34420 () Bool)

(assert (=> d!12723 (=> (not res!34420) (not e!41214))))

(assert (=> d!12723 (= res!34420 (and (bvsge (index!3082 lt!26026) #b00000000000000000000000000000000) (bvslt (index!3082 lt!26026) (size!2031 (_values!2071 newMap!16)))))))

(declare-fun lt!26265 () Unit!1689)

(declare-fun choose!344 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) (_ BitVec 64) V!2867 Int) Unit!1689)

(assert (=> d!12723 (= lt!26265 (choose!344 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3082 lt!26026) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12723 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12723 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3082 lt!26026) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)) lt!26265)))

(declare-fun b!62807 () Bool)

(assert (=> b!62807 (= e!41214 (= (+!83 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!407 (_keys!3720 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))))

(assert (= (and d!12723 res!34420) b!62807))

(assert (=> d!12723 m!55705))

(assert (=> d!12723 m!55731))

(declare-fun m!56301 () Bool)

(assert (=> d!12723 m!56301))

(assert (=> d!12723 m!55941))

(assert (=> b!62807 m!55787))

(assert (=> b!62807 m!55787))

(assert (=> b!62807 m!56199))

(assert (=> b!62807 m!55877))

(declare-fun m!56303 () Bool)

(assert (=> b!62807 m!56303))

(assert (=> b!62498 d!12723))

(declare-fun d!12725 () Bool)

(declare-fun e!41216 () Bool)

(assert (=> d!12725 e!41216))

(declare-fun res!34421 () Bool)

(assert (=> d!12725 (=> res!34421 e!41216)))

(declare-fun lt!26266 () Bool)

(assert (=> d!12725 (= res!34421 (not lt!26266))))

(declare-fun lt!26269 () Bool)

(assert (=> d!12725 (= lt!26266 lt!26269)))

(declare-fun lt!26267 () Unit!1689)

(declare-fun e!41215 () Unit!1689)

(assert (=> d!12725 (= lt!26267 e!41215)))

(declare-fun c!8414 () Bool)

(assert (=> d!12725 (= c!8414 lt!26269)))

(assert (=> d!12725 (= lt!26269 (containsKey!129 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!12725 (= (contains!700 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) lt!26266)))

(declare-fun b!62808 () Bool)

(declare-fun lt!26268 () Unit!1689)

(assert (=> b!62808 (= e!41215 lt!26268)))

(assert (=> b!62808 (= lt!26268 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> b!62808 (isDefined!79 (getValueByKey!125 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62809 () Bool)

(declare-fun Unit!1708 () Unit!1689)

(assert (=> b!62809 (= e!41215 Unit!1708)))

(declare-fun b!62810 () Bool)

(assert (=> b!62810 (= e!41216 (isDefined!79 (getValueByKey!125 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(assert (= (and d!12725 c!8414) b!62808))

(assert (= (and d!12725 (not c!8414)) b!62809))

(assert (= (and d!12725 (not res!34421)) b!62810))

(assert (=> d!12725 m!55705))

(declare-fun m!56305 () Bool)

(assert (=> d!12725 m!56305))

(assert (=> b!62808 m!55705))

(declare-fun m!56307 () Bool)

(assert (=> b!62808 m!56307))

(assert (=> b!62808 m!55705))

(declare-fun m!56309 () Bool)

(assert (=> b!62808 m!56309))

(assert (=> b!62808 m!56309))

(declare-fun m!56311 () Bool)

(assert (=> b!62808 m!56311))

(assert (=> b!62810 m!55705))

(assert (=> b!62810 m!56309))

(assert (=> b!62810 m!56309))

(assert (=> b!62810 m!56311))

(assert (=> b!62498 d!12725))

(declare-fun b!62811 () Bool)

(declare-fun c!8415 () Bool)

(assert (=> b!62811 (= c!8415 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41226 () ListLongMap!1389)

(declare-fun e!41219 () ListLongMap!1389)

(assert (=> b!62811 (= e!41226 e!41219)))

(declare-fun bm!4942 () Bool)

(declare-fun call!4948 () ListLongMap!1389)

(declare-fun call!4945 () ListLongMap!1389)

(assert (=> bm!4942 (= call!4948 call!4945)))

(declare-fun b!62812 () Bool)

(declare-fun e!41227 () Bool)

(declare-fun e!41229 () Bool)

(assert (=> b!62812 (= e!41227 e!41229)))

(declare-fun c!8418 () Bool)

(assert (=> b!62812 (= c!8418 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62813 () Bool)

(declare-fun e!41218 () Bool)

(declare-fun e!41222 () Bool)

(assert (=> b!62813 (= e!41218 e!41222)))

(declare-fun res!34424 () Bool)

(assert (=> b!62813 (=> (not res!34424) (not e!41222))))

(declare-fun lt!26286 () ListLongMap!1389)

(assert (=> b!62813 (= res!34424 (contains!700 lt!26286 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62813 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62814 () Bool)

(assert (=> b!62814 (= e!41222 (= (apply!68 lt!26286 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62814 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_values!2071 newMap!16))))))

(assert (=> b!62814 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62815 () Bool)

(declare-fun e!41221 () Bool)

(declare-fun e!41217 () Bool)

(assert (=> b!62815 (= e!41221 e!41217)))

(declare-fun res!34425 () Bool)

(declare-fun call!4944 () Bool)

(assert (=> b!62815 (= res!34425 call!4944)))

(assert (=> b!62815 (=> (not res!34425) (not e!41217))))

(declare-fun bm!4943 () Bool)

(declare-fun call!4947 () ListLongMap!1389)

(assert (=> bm!4943 (= call!4945 call!4947)))

(declare-fun b!62816 () Bool)

(declare-fun e!41220 () Bool)

(assert (=> b!62816 (= e!41220 (= (apply!68 lt!26286 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!62817 () Bool)

(declare-fun res!34430 () Bool)

(assert (=> b!62817 (=> (not res!34430) (not e!41227))))

(assert (=> b!62817 (= res!34430 e!41218)))

(declare-fun res!34429 () Bool)

(assert (=> b!62817 (=> res!34429 e!41218)))

(declare-fun e!41223 () Bool)

(assert (=> b!62817 (= res!34429 (not e!41223))))

(declare-fun res!34423 () Bool)

(assert (=> b!62817 (=> (not res!34423) (not e!41223))))

(assert (=> b!62817 (= res!34423 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62818 () Bool)

(declare-fun e!41228 () Unit!1689)

(declare-fun Unit!1709 () Unit!1689)

(assert (=> b!62818 (= e!41228 Unit!1709)))

(declare-fun b!62819 () Bool)

(declare-fun call!4950 () Bool)

(assert (=> b!62819 (= e!41229 (not call!4950))))

(declare-fun b!62820 () Bool)

(declare-fun e!41225 () ListLongMap!1389)

(declare-fun call!4949 () ListLongMap!1389)

(assert (=> b!62820 (= e!41225 (+!83 call!4949 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!62821 () Bool)

(declare-fun res!34422 () Bool)

(assert (=> b!62821 (=> (not res!34422) (not e!41227))))

(assert (=> b!62821 (= res!34422 e!41221)))

(declare-fun c!8419 () Bool)

(assert (=> b!62821 (= c!8419 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62822 () Bool)

(assert (=> b!62822 (= e!41217 (= (apply!68 lt!26286 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!62823 () Bool)

(declare-fun lt!26287 () Unit!1689)

(assert (=> b!62823 (= e!41228 lt!26287)))

(declare-fun lt!26278 () ListLongMap!1389)

(assert (=> b!62823 (= lt!26278 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26291 () (_ BitVec 64))

(assert (=> b!62823 (= lt!26291 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26288 () (_ BitVec 64))

(assert (=> b!62823 (= lt!26288 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26275 () Unit!1689)

(assert (=> b!62823 (= lt!26275 (addStillContains!44 lt!26278 lt!26291 (zeroValue!2000 newMap!16) lt!26288))))

(assert (=> b!62823 (contains!700 (+!83 lt!26278 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16))) lt!26288)))

(declare-fun lt!26289 () Unit!1689)

(assert (=> b!62823 (= lt!26289 lt!26275)))

(declare-fun lt!26273 () ListLongMap!1389)

(assert (=> b!62823 (= lt!26273 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26279 () (_ BitVec 64))

(assert (=> b!62823 (= lt!26279 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26272 () (_ BitVec 64))

(assert (=> b!62823 (= lt!26272 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26271 () Unit!1689)

(assert (=> b!62823 (= lt!26271 (addApplyDifferent!44 lt!26273 lt!26279 (minValue!2000 newMap!16) lt!26272))))

(assert (=> b!62823 (= (apply!68 (+!83 lt!26273 (tuple2!2067 lt!26279 (minValue!2000 newMap!16))) lt!26272) (apply!68 lt!26273 lt!26272))))

(declare-fun lt!26274 () Unit!1689)

(assert (=> b!62823 (= lt!26274 lt!26271)))

(declare-fun lt!26280 () ListLongMap!1389)

(assert (=> b!62823 (= lt!26280 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26290 () (_ BitVec 64))

(assert (=> b!62823 (= lt!26290 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26283 () (_ BitVec 64))

(assert (=> b!62823 (= lt!26283 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26281 () Unit!1689)

(assert (=> b!62823 (= lt!26281 (addApplyDifferent!44 lt!26280 lt!26290 (zeroValue!2000 newMap!16) lt!26283))))

(assert (=> b!62823 (= (apply!68 (+!83 lt!26280 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16))) lt!26283) (apply!68 lt!26280 lt!26283))))

(declare-fun lt!26284 () Unit!1689)

(assert (=> b!62823 (= lt!26284 lt!26281)))

(declare-fun lt!26276 () ListLongMap!1389)

(assert (=> b!62823 (= lt!26276 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26282 () (_ BitVec 64))

(assert (=> b!62823 (= lt!26282 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26285 () (_ BitVec 64))

(assert (=> b!62823 (= lt!26285 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62823 (= lt!26287 (addApplyDifferent!44 lt!26276 lt!26282 (minValue!2000 newMap!16) lt!26285))))

(assert (=> b!62823 (= (apply!68 (+!83 lt!26276 (tuple2!2067 lt!26282 (minValue!2000 newMap!16))) lt!26285) (apply!68 lt!26276 lt!26285))))

(declare-fun b!62824 () Bool)

(assert (=> b!62824 (= e!41223 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4944 () Bool)

(declare-fun call!4946 () ListLongMap!1389)

(assert (=> bm!4944 (= call!4946 call!4949)))

(declare-fun b!62825 () Bool)

(assert (=> b!62825 (= e!41229 e!41220)))

(declare-fun res!34426 () Bool)

(assert (=> b!62825 (= res!34426 call!4950)))

(assert (=> b!62825 (=> (not res!34426) (not e!41220))))

(declare-fun bm!4945 () Bool)

(assert (=> bm!4945 (= call!4947 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun c!8420 () Bool)

(declare-fun bm!4946 () Bool)

(declare-fun c!8417 () Bool)

(assert (=> bm!4946 (= call!4949 (+!83 (ite c!8417 call!4947 (ite c!8420 call!4945 call!4948)) (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun b!62826 () Bool)

(assert (=> b!62826 (= e!41225 e!41226)))

(assert (=> b!62826 (= c!8420 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!12727 () Bool)

(assert (=> d!12727 e!41227))

(declare-fun res!34427 () Bool)

(assert (=> d!12727 (=> (not res!34427) (not e!41227))))

(assert (=> d!12727 (= res!34427 (or (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))))

(declare-fun lt!26270 () ListLongMap!1389)

(assert (=> d!12727 (= lt!26286 lt!26270)))

(declare-fun lt!26277 () Unit!1689)

(assert (=> d!12727 (= lt!26277 e!41228)))

(declare-fun c!8416 () Bool)

(declare-fun e!41224 () Bool)

(assert (=> d!12727 (= c!8416 e!41224)))

(declare-fun res!34428 () Bool)

(assert (=> d!12727 (=> (not res!34428) (not e!41224))))

(assert (=> d!12727 (= res!34428 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!12727 (= lt!26270 e!41225)))

(assert (=> d!12727 (= c!8417 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12727 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12727 (= (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26286)))

(declare-fun bm!4941 () Bool)

(assert (=> bm!4941 (= call!4950 (contains!700 lt!26286 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62827 () Bool)

(assert (=> b!62827 (= e!41226 call!4946)))

(declare-fun b!62828 () Bool)

(assert (=> b!62828 (= e!41219 call!4946)))

(declare-fun bm!4947 () Bool)

(assert (=> bm!4947 (= call!4944 (contains!700 lt!26286 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62829 () Bool)

(assert (=> b!62829 (= e!41219 call!4948)))

(declare-fun b!62830 () Bool)

(assert (=> b!62830 (= e!41221 (not call!4944))))

(declare-fun b!62831 () Bool)

(assert (=> b!62831 (= e!41224 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12727 c!8417) b!62820))

(assert (= (and d!12727 (not c!8417)) b!62826))

(assert (= (and b!62826 c!8420) b!62827))

(assert (= (and b!62826 (not c!8420)) b!62811))

(assert (= (and b!62811 c!8415) b!62828))

(assert (= (and b!62811 (not c!8415)) b!62829))

(assert (= (or b!62828 b!62829) bm!4942))

(assert (= (or b!62827 bm!4942) bm!4943))

(assert (= (or b!62827 b!62828) bm!4944))

(assert (= (or b!62820 bm!4943) bm!4945))

(assert (= (or b!62820 bm!4944) bm!4946))

(assert (= (and d!12727 res!34428) b!62831))

(assert (= (and d!12727 c!8416) b!62823))

(assert (= (and d!12727 (not c!8416)) b!62818))

(assert (= (and d!12727 res!34427) b!62817))

(assert (= (and b!62817 res!34423) b!62824))

(assert (= (and b!62817 (not res!34429)) b!62813))

(assert (= (and b!62813 res!34424) b!62814))

(assert (= (and b!62817 res!34430) b!62821))

(assert (= (and b!62821 c!8419) b!62815))

(assert (= (and b!62821 (not c!8419)) b!62830))

(assert (= (and b!62815 res!34425) b!62822))

(assert (= (or b!62815 b!62830) bm!4947))

(assert (= (and b!62821 res!34422) b!62812))

(assert (= (and b!62812 c!8418) b!62825))

(assert (= (and b!62812 (not c!8418)) b!62819))

(assert (= (and b!62825 res!34426) b!62816))

(assert (= (or b!62825 b!62819) bm!4941))

(declare-fun b_lambda!2803 () Bool)

(assert (=> (not b_lambda!2803) (not b!62814)))

(assert (=> b!62814 t!4870))

(declare-fun b_and!3833 () Bool)

(assert (= b_and!3829 (and (=> t!4870 result!2463) b_and!3833)))

(assert (=> b!62814 t!4872))

(declare-fun b_and!3835 () Bool)

(assert (= b_and!3831 (and (=> t!4872 result!2465) b_and!3835)))

(declare-fun m!56313 () Bool)

(assert (=> b!62820 m!56313))

(declare-fun m!56315 () Bool)

(assert (=> b!62822 m!56315))

(declare-fun m!56317 () Bool)

(assert (=> bm!4946 m!56317))

(assert (=> b!62831 m!56007))

(assert (=> b!62831 m!56007))

(assert (=> b!62831 m!56009))

(declare-fun m!56319 () Bool)

(assert (=> bm!4945 m!56319))

(assert (=> b!62824 m!56007))

(assert (=> b!62824 m!56007))

(assert (=> b!62824 m!56009))

(assert (=> b!62813 m!56007))

(assert (=> b!62813 m!56007))

(declare-fun m!56321 () Bool)

(assert (=> b!62813 m!56321))

(declare-fun m!56323 () Bool)

(assert (=> bm!4941 m!56323))

(assert (=> b!62823 m!56007))

(declare-fun m!56325 () Bool)

(assert (=> b!62823 m!56325))

(declare-fun m!56327 () Bool)

(assert (=> b!62823 m!56327))

(declare-fun m!56329 () Bool)

(assert (=> b!62823 m!56329))

(declare-fun m!56331 () Bool)

(assert (=> b!62823 m!56331))

(declare-fun m!56333 () Bool)

(assert (=> b!62823 m!56333))

(declare-fun m!56335 () Bool)

(assert (=> b!62823 m!56335))

(declare-fun m!56337 () Bool)

(assert (=> b!62823 m!56337))

(declare-fun m!56339 () Bool)

(assert (=> b!62823 m!56339))

(declare-fun m!56341 () Bool)

(assert (=> b!62823 m!56341))

(declare-fun m!56343 () Bool)

(assert (=> b!62823 m!56343))

(declare-fun m!56345 () Bool)

(assert (=> b!62823 m!56345))

(assert (=> b!62823 m!56331))

(declare-fun m!56347 () Bool)

(assert (=> b!62823 m!56347))

(declare-fun m!56349 () Bool)

(assert (=> b!62823 m!56349))

(assert (=> b!62823 m!56337))

(declare-fun m!56351 () Bool)

(assert (=> b!62823 m!56351))

(assert (=> b!62823 m!56325))

(assert (=> b!62823 m!56349))

(declare-fun m!56353 () Bool)

(assert (=> b!62823 m!56353))

(assert (=> b!62823 m!56319))

(assert (=> d!12727 m!55941))

(declare-fun m!56355 () Bool)

(assert (=> bm!4947 m!56355))

(declare-fun m!56357 () Bool)

(assert (=> b!62816 m!56357))

(assert (=> b!62814 m!56259))

(assert (=> b!62814 m!56007))

(assert (=> b!62814 m!56007))

(declare-fun m!56359 () Bool)

(assert (=> b!62814 m!56359))

(declare-fun m!56361 () Bool)

(assert (=> b!62814 m!56361))

(assert (=> b!62814 m!56259))

(declare-fun m!56363 () Bool)

(assert (=> b!62814 m!56363))

(assert (=> b!62814 m!56361))

(assert (=> b!62498 d!12727))

(declare-fun b!62840 () Bool)

(declare-fun e!41236 () Bool)

(declare-fun call!4953 () Bool)

(assert (=> b!62840 (= e!41236 call!4953)))

(declare-fun bm!4950 () Bool)

(assert (=> bm!4950 (= call!4953 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!62842 () Bool)

(declare-fun e!41238 () Bool)

(assert (=> b!62842 (= e!41236 e!41238)))

(declare-fun lt!26299 () (_ BitVec 64))

(assert (=> b!62842 (= lt!26299 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26298 () Unit!1689)

(assert (=> b!62842 (= lt!26298 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3720 newMap!16) lt!26299 #b00000000000000000000000000000000))))

(assert (=> b!62842 (arrayContainsKey!0 (_keys!3720 newMap!16) lt!26299 #b00000000000000000000000000000000)))

(declare-fun lt!26300 () Unit!1689)

(assert (=> b!62842 (= lt!26300 lt!26298)))

(declare-fun res!34435 () Bool)

(assert (=> b!62842 (= res!34435 (= (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (_keys!3720 newMap!16) (mask!5994 newMap!16)) (Found!239 #b00000000000000000000000000000000)))))

(assert (=> b!62842 (=> (not res!34435) (not e!41238))))

(declare-fun b!62843 () Bool)

(declare-fun e!41237 () Bool)

(assert (=> b!62843 (= e!41237 e!41236)))

(declare-fun c!8423 () Bool)

(assert (=> b!62843 (= c!8423 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62841 () Bool)

(assert (=> b!62841 (= e!41238 call!4953)))

(declare-fun d!12729 () Bool)

(declare-fun res!34436 () Bool)

(assert (=> d!12729 (=> res!34436 e!41237)))

(assert (=> d!12729 (= res!34436 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!12729 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 newMap!16) (mask!5994 newMap!16)) e!41237)))

(assert (= (and d!12729 (not res!34436)) b!62843))

(assert (= (and b!62843 c!8423) b!62842))

(assert (= (and b!62843 (not c!8423)) b!62840))

(assert (= (and b!62842 res!34435) b!62841))

(assert (= (or b!62841 b!62840) bm!4950))

(declare-fun m!56365 () Bool)

(assert (=> bm!4950 m!56365))

(assert (=> b!62842 m!56007))

(declare-fun m!56367 () Bool)

(assert (=> b!62842 m!56367))

(declare-fun m!56369 () Bool)

(assert (=> b!62842 m!56369))

(assert (=> b!62842 m!56007))

(declare-fun m!56371 () Bool)

(assert (=> b!62842 m!56371))

(assert (=> b!62843 m!56007))

(assert (=> b!62843 m!56007))

(assert (=> b!62843 m!56009))

(assert (=> b!62376 d!12729))

(declare-fun d!12731 () Bool)

(declare-fun e!41240 () Bool)

(assert (=> d!12731 e!41240))

(declare-fun res!34437 () Bool)

(assert (=> d!12731 (=> res!34437 e!41240)))

(declare-fun lt!26301 () Bool)

(assert (=> d!12731 (= res!34437 (not lt!26301))))

(declare-fun lt!26304 () Bool)

(assert (=> d!12731 (= lt!26301 lt!26304)))

(declare-fun lt!26302 () Unit!1689)

(declare-fun e!41239 () Unit!1689)

(assert (=> d!12731 (= lt!26302 e!41239)))

(declare-fun c!8424 () Bool)

(assert (=> d!12731 (= c!8424 lt!26304)))

(assert (=> d!12731 (= lt!26304 (containsKey!129 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12731 (= (contains!700 lt!25929 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26301)))

(declare-fun b!62844 () Bool)

(declare-fun lt!26303 () Unit!1689)

(assert (=> b!62844 (= e!41239 lt!26303)))

(assert (=> b!62844 (= lt!26303 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62844 (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62845 () Bool)

(declare-fun Unit!1710 () Unit!1689)

(assert (=> b!62845 (= e!41239 Unit!1710)))

(declare-fun b!62846 () Bool)

(assert (=> b!62846 (= e!41240 (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12731 c!8424) b!62844))

(assert (= (and d!12731 (not c!8424)) b!62845))

(assert (= (and d!12731 (not res!34437)) b!62846))

(declare-fun m!56373 () Bool)

(assert (=> d!12731 m!56373))

(declare-fun m!56375 () Bool)

(assert (=> b!62844 m!56375))

(declare-fun m!56377 () Bool)

(assert (=> b!62844 m!56377))

(assert (=> b!62844 m!56377))

(declare-fun m!56379 () Bool)

(assert (=> b!62844 m!56379))

(assert (=> b!62846 m!56377))

(assert (=> b!62846 m!56377))

(assert (=> b!62846 m!56379))

(assert (=> bm!4833 d!12731))

(assert (=> bm!4893 d!12605))

(declare-fun d!12733 () Bool)

(assert (=> d!12733 (= (apply!68 lt!25929 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1100 (getValueByKey!125 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2719 () Bool)

(assert (= bs!2719 d!12733))

(assert (=> bs!2719 m!55795))

(assert (=> bs!2719 m!56015))

(assert (=> bs!2719 m!56015))

(declare-fun m!56381 () Bool)

(assert (=> bs!2719 m!56381))

(assert (=> b!62351 d!12733))

(declare-fun d!12735 () Bool)

(declare-fun c!8425 () Bool)

(assert (=> d!12735 (= c!8425 ((_ is ValueCellFull!864) (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!41241 () V!2867)

(assert (=> d!12735 (= (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41241)))

(declare-fun b!62847 () Bool)

(assert (=> b!62847 (= e!41241 (get!1098 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62848 () Bool)

(assert (=> b!62848 (= e!41241 (get!1099 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12735 c!8425) b!62847))

(assert (= (and d!12735 (not c!8425)) b!62848))

(assert (=> b!62847 m!55841))

(assert (=> b!62847 m!55729))

(declare-fun m!56383 () Bool)

(assert (=> b!62847 m!56383))

(assert (=> b!62848 m!55841))

(assert (=> b!62848 m!55729))

(declare-fun m!56385 () Bool)

(assert (=> b!62848 m!56385))

(assert (=> b!62351 d!12735))

(declare-fun d!12737 () Bool)

(declare-fun res!34438 () Bool)

(declare-fun e!41242 () Bool)

(assert (=> d!12737 (=> res!34438 e!41242)))

(assert (=> d!12737 (= res!34438 (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!12737 (= (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!41242)))

(declare-fun b!62849 () Bool)

(declare-fun e!41243 () Bool)

(assert (=> b!62849 (= e!41242 e!41243)))

(declare-fun res!34439 () Bool)

(assert (=> b!62849 (=> (not res!34439) (not e!41243))))

(assert (=> b!62849 (= res!34439 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!62850 () Bool)

(assert (=> b!62850 (= e!41243 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12737 (not res!34438)) b!62849))

(assert (= (and b!62849 res!34439) b!62850))

(declare-fun m!56387 () Bool)

(assert (=> d!12737 m!56387))

(assert (=> b!62850 m!55705))

(declare-fun m!56389 () Bool)

(assert (=> b!62850 m!56389))

(assert (=> b!62383 d!12737))

(declare-fun b!62851 () Bool)

(declare-fun c!8426 () Bool)

(assert (=> b!62851 (= c!8426 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41253 () ListLongMap!1389)

(declare-fun e!41246 () ListLongMap!1389)

(assert (=> b!62851 (= e!41253 e!41246)))

(declare-fun bm!4952 () Bool)

(declare-fun call!4958 () ListLongMap!1389)

(declare-fun call!4955 () ListLongMap!1389)

(assert (=> bm!4952 (= call!4958 call!4955)))

(declare-fun b!62852 () Bool)

(declare-fun e!41254 () Bool)

(declare-fun e!41256 () Bool)

(assert (=> b!62852 (= e!41254 e!41256)))

(declare-fun c!8429 () Bool)

(assert (=> b!62852 (= c!8429 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62853 () Bool)

(declare-fun e!41245 () Bool)

(declare-fun e!41249 () Bool)

(assert (=> b!62853 (= e!41245 e!41249)))

(declare-fun res!34442 () Bool)

(assert (=> b!62853 (=> (not res!34442) (not e!41249))))

(declare-fun lt!26321 () ListLongMap!1389)

(assert (=> b!62853 (= res!34442 (contains!700 lt!26321 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62853 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62854 () Bool)

(assert (=> b!62854 (= e!41249 (= (apply!68 lt!26321 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62854 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))))))))

(assert (=> b!62854 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62855 () Bool)

(declare-fun e!41248 () Bool)

(declare-fun e!41244 () Bool)

(assert (=> b!62855 (= e!41248 e!41244)))

(declare-fun res!34443 () Bool)

(declare-fun call!4954 () Bool)

(assert (=> b!62855 (= res!34443 call!4954)))

(assert (=> b!62855 (=> (not res!34443) (not e!41244))))

(declare-fun bm!4953 () Bool)

(declare-fun call!4957 () ListLongMap!1389)

(assert (=> bm!4953 (= call!4955 call!4957)))

(declare-fun b!62856 () Bool)

(declare-fun e!41247 () Bool)

(assert (=> b!62856 (= e!41247 (= (apply!68 lt!26321 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!62857 () Bool)

(declare-fun res!34448 () Bool)

(assert (=> b!62857 (=> (not res!34448) (not e!41254))))

(assert (=> b!62857 (= res!34448 e!41245)))

(declare-fun res!34447 () Bool)

(assert (=> b!62857 (=> res!34447 e!41245)))

(declare-fun e!41250 () Bool)

(assert (=> b!62857 (= res!34447 (not e!41250))))

(declare-fun res!34441 () Bool)

(assert (=> b!62857 (=> (not res!34441) (not e!41250))))

(assert (=> b!62857 (= res!34441 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62858 () Bool)

(declare-fun e!41255 () Unit!1689)

(declare-fun Unit!1711 () Unit!1689)

(assert (=> b!62858 (= e!41255 Unit!1711)))

(declare-fun b!62859 () Bool)

(declare-fun call!4960 () Bool)

(assert (=> b!62859 (= e!41256 (not call!4960))))

(declare-fun b!62860 () Bool)

(declare-fun e!41252 () ListLongMap!1389)

(declare-fun call!4959 () ListLongMap!1389)

(assert (=> b!62860 (= e!41252 (+!83 call!4959 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!62861 () Bool)

(declare-fun res!34440 () Bool)

(assert (=> b!62861 (=> (not res!34440) (not e!41254))))

(assert (=> b!62861 (= res!34440 e!41248)))

(declare-fun c!8430 () Bool)

(assert (=> b!62861 (= c!8430 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62862 () Bool)

(assert (=> b!62862 (= e!41244 (= (apply!68 lt!26321 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!62863 () Bool)

(declare-fun lt!26322 () Unit!1689)

(assert (=> b!62863 (= e!41255 lt!26322)))

(declare-fun lt!26313 () ListLongMap!1389)

(assert (=> b!62863 (= lt!26313 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26326 () (_ BitVec 64))

(assert (=> b!62863 (= lt!26326 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26323 () (_ BitVec 64))

(assert (=> b!62863 (= lt!26323 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26310 () Unit!1689)

(assert (=> b!62863 (= lt!26310 (addStillContains!44 lt!26313 lt!26326 (zeroValue!2000 newMap!16) lt!26323))))

(assert (=> b!62863 (contains!700 (+!83 lt!26313 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16))) lt!26323)))

(declare-fun lt!26324 () Unit!1689)

(assert (=> b!62863 (= lt!26324 lt!26310)))

(declare-fun lt!26308 () ListLongMap!1389)

(assert (=> b!62863 (= lt!26308 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26314 () (_ BitVec 64))

(assert (=> b!62863 (= lt!26314 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26307 () (_ BitVec 64))

(assert (=> b!62863 (= lt!26307 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26306 () Unit!1689)

(assert (=> b!62863 (= lt!26306 (addApplyDifferent!44 lt!26308 lt!26314 (minValue!2000 newMap!16) lt!26307))))

(assert (=> b!62863 (= (apply!68 (+!83 lt!26308 (tuple2!2067 lt!26314 (minValue!2000 newMap!16))) lt!26307) (apply!68 lt!26308 lt!26307))))

(declare-fun lt!26309 () Unit!1689)

(assert (=> b!62863 (= lt!26309 lt!26306)))

(declare-fun lt!26315 () ListLongMap!1389)

(assert (=> b!62863 (= lt!26315 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26325 () (_ BitVec 64))

(assert (=> b!62863 (= lt!26325 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26318 () (_ BitVec 64))

(assert (=> b!62863 (= lt!26318 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26316 () Unit!1689)

(assert (=> b!62863 (= lt!26316 (addApplyDifferent!44 lt!26315 lt!26325 (zeroValue!2000 newMap!16) lt!26318))))

(assert (=> b!62863 (= (apply!68 (+!83 lt!26315 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16))) lt!26318) (apply!68 lt!26315 lt!26318))))

(declare-fun lt!26319 () Unit!1689)

(assert (=> b!62863 (= lt!26319 lt!26316)))

(declare-fun lt!26311 () ListLongMap!1389)

(assert (=> b!62863 (= lt!26311 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26317 () (_ BitVec 64))

(assert (=> b!62863 (= lt!26317 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26320 () (_ BitVec 64))

(assert (=> b!62863 (= lt!26320 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62863 (= lt!26322 (addApplyDifferent!44 lt!26311 lt!26317 (minValue!2000 newMap!16) lt!26320))))

(assert (=> b!62863 (= (apply!68 (+!83 lt!26311 (tuple2!2067 lt!26317 (minValue!2000 newMap!16))) lt!26320) (apply!68 lt!26311 lt!26320))))

(declare-fun b!62864 () Bool)

(assert (=> b!62864 (= e!41250 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4954 () Bool)

(declare-fun call!4956 () ListLongMap!1389)

(assert (=> bm!4954 (= call!4956 call!4959)))

(declare-fun b!62865 () Bool)

(assert (=> b!62865 (= e!41256 e!41247)))

(declare-fun res!34444 () Bool)

(assert (=> b!62865 (= res!34444 call!4960)))

(assert (=> b!62865 (=> (not res!34444) (not e!41247))))

(declare-fun bm!4955 () Bool)

(assert (=> bm!4955 (= call!4957 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun bm!4956 () Bool)

(declare-fun c!8431 () Bool)

(declare-fun c!8428 () Bool)

(assert (=> bm!4956 (= call!4959 (+!83 (ite c!8428 call!4957 (ite c!8431 call!4955 call!4958)) (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun b!62866 () Bool)

(assert (=> b!62866 (= e!41252 e!41253)))

(assert (=> b!62866 (= c!8431 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!12739 () Bool)

(assert (=> d!12739 e!41254))

(declare-fun res!34445 () Bool)

(assert (=> d!12739 (=> (not res!34445) (not e!41254))))

(assert (=> d!12739 (= res!34445 (or (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))))

(declare-fun lt!26305 () ListLongMap!1389)

(assert (=> d!12739 (= lt!26321 lt!26305)))

(declare-fun lt!26312 () Unit!1689)

(assert (=> d!12739 (= lt!26312 e!41255)))

(declare-fun c!8427 () Bool)

(declare-fun e!41251 () Bool)

(assert (=> d!12739 (= c!8427 e!41251)))

(declare-fun res!34446 () Bool)

(assert (=> d!12739 (=> (not res!34446) (not e!41251))))

(assert (=> d!12739 (= res!34446 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!12739 (= lt!26305 e!41252)))

(assert (=> d!12739 (= c!8428 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12739 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12739 (= (getCurrentListMap!407 (_keys!3720 newMap!16) (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26321)))

(declare-fun bm!4951 () Bool)

(assert (=> bm!4951 (= call!4960 (contains!700 lt!26321 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62867 () Bool)

(assert (=> b!62867 (= e!41253 call!4956)))

(declare-fun b!62868 () Bool)

(assert (=> b!62868 (= e!41246 call!4956)))

(declare-fun bm!4957 () Bool)

(assert (=> bm!4957 (= call!4954 (contains!700 lt!26321 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62869 () Bool)

(assert (=> b!62869 (= e!41246 call!4958)))

(declare-fun b!62870 () Bool)

(assert (=> b!62870 (= e!41248 (not call!4954))))

(declare-fun b!62871 () Bool)

(assert (=> b!62871 (= e!41251 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12739 c!8428) b!62860))

(assert (= (and d!12739 (not c!8428)) b!62866))

(assert (= (and b!62866 c!8431) b!62867))

(assert (= (and b!62866 (not c!8431)) b!62851))

(assert (= (and b!62851 c!8426) b!62868))

(assert (= (and b!62851 (not c!8426)) b!62869))

(assert (= (or b!62868 b!62869) bm!4952))

(assert (= (or b!62867 bm!4952) bm!4953))

(assert (= (or b!62867 b!62868) bm!4954))

(assert (= (or b!62860 bm!4953) bm!4955))

(assert (= (or b!62860 bm!4954) bm!4956))

(assert (= (and d!12739 res!34446) b!62871))

(assert (= (and d!12739 c!8427) b!62863))

(assert (= (and d!12739 (not c!8427)) b!62858))

(assert (= (and d!12739 res!34445) b!62857))

(assert (= (and b!62857 res!34441) b!62864))

(assert (= (and b!62857 (not res!34447)) b!62853))

(assert (= (and b!62853 res!34442) b!62854))

(assert (= (and b!62857 res!34448) b!62861))

(assert (= (and b!62861 c!8430) b!62855))

(assert (= (and b!62861 (not c!8430)) b!62870))

(assert (= (and b!62855 res!34443) b!62862))

(assert (= (or b!62855 b!62870) bm!4957))

(assert (= (and b!62861 res!34440) b!62852))

(assert (= (and b!62852 c!8429) b!62865))

(assert (= (and b!62852 (not c!8429)) b!62859))

(assert (= (and b!62865 res!34444) b!62856))

(assert (= (or b!62865 b!62859) bm!4951))

(declare-fun b_lambda!2805 () Bool)

(assert (=> (not b_lambda!2805) (not b!62854)))

(assert (=> b!62854 t!4870))

(declare-fun b_and!3837 () Bool)

(assert (= b_and!3833 (and (=> t!4870 result!2463) b_and!3837)))

(assert (=> b!62854 t!4872))

(declare-fun b_and!3839 () Bool)

(assert (= b_and!3835 (and (=> t!4872 result!2465) b_and!3839)))

(declare-fun m!56391 () Bool)

(assert (=> b!62860 m!56391))

(declare-fun m!56393 () Bool)

(assert (=> b!62862 m!56393))

(declare-fun m!56395 () Bool)

(assert (=> bm!4956 m!56395))

(assert (=> b!62871 m!56007))

(assert (=> b!62871 m!56007))

(assert (=> b!62871 m!56009))

(declare-fun m!56397 () Bool)

(assert (=> bm!4955 m!56397))

(assert (=> b!62864 m!56007))

(assert (=> b!62864 m!56007))

(assert (=> b!62864 m!56009))

(assert (=> b!62853 m!56007))

(assert (=> b!62853 m!56007))

(declare-fun m!56399 () Bool)

(assert (=> b!62853 m!56399))

(declare-fun m!56401 () Bool)

(assert (=> bm!4951 m!56401))

(assert (=> b!62863 m!56007))

(declare-fun m!56403 () Bool)

(assert (=> b!62863 m!56403))

(declare-fun m!56405 () Bool)

(assert (=> b!62863 m!56405))

(declare-fun m!56407 () Bool)

(assert (=> b!62863 m!56407))

(declare-fun m!56409 () Bool)

(assert (=> b!62863 m!56409))

(declare-fun m!56411 () Bool)

(assert (=> b!62863 m!56411))

(declare-fun m!56413 () Bool)

(assert (=> b!62863 m!56413))

(declare-fun m!56415 () Bool)

(assert (=> b!62863 m!56415))

(declare-fun m!56417 () Bool)

(assert (=> b!62863 m!56417))

(declare-fun m!56419 () Bool)

(assert (=> b!62863 m!56419))

(declare-fun m!56421 () Bool)

(assert (=> b!62863 m!56421))

(declare-fun m!56423 () Bool)

(assert (=> b!62863 m!56423))

(assert (=> b!62863 m!56409))

(declare-fun m!56425 () Bool)

(assert (=> b!62863 m!56425))

(declare-fun m!56427 () Bool)

(assert (=> b!62863 m!56427))

(assert (=> b!62863 m!56415))

(declare-fun m!56429 () Bool)

(assert (=> b!62863 m!56429))

(assert (=> b!62863 m!56403))

(assert (=> b!62863 m!56427))

(declare-fun m!56431 () Bool)

(assert (=> b!62863 m!56431))

(assert (=> b!62863 m!56397))

(assert (=> d!12739 m!55941))

(declare-fun m!56433 () Bool)

(assert (=> bm!4957 m!56433))

(declare-fun m!56435 () Bool)

(assert (=> b!62856 m!56435))

(assert (=> b!62854 m!56259))

(assert (=> b!62854 m!56007))

(assert (=> b!62854 m!56007))

(declare-fun m!56437 () Bool)

(assert (=> b!62854 m!56437))

(declare-fun m!56439 () Bool)

(assert (=> b!62854 m!56439))

(assert (=> b!62854 m!56259))

(declare-fun m!56441 () Bool)

(assert (=> b!62854 m!56441))

(assert (=> b!62854 m!56439))

(assert (=> bm!4887 d!12739))

(declare-fun d!12741 () Bool)

(declare-fun e!41258 () Bool)

(assert (=> d!12741 e!41258))

(declare-fun res!34449 () Bool)

(assert (=> d!12741 (=> res!34449 e!41258)))

(declare-fun lt!26327 () Bool)

(assert (=> d!12741 (= res!34449 (not lt!26327))))

(declare-fun lt!26330 () Bool)

(assert (=> d!12741 (= lt!26327 lt!26330)))

(declare-fun lt!26328 () Unit!1689)

(declare-fun e!41257 () Unit!1689)

(assert (=> d!12741 (= lt!26328 e!41257)))

(declare-fun c!8432 () Bool)

(assert (=> d!12741 (= c!8432 lt!26330)))

(assert (=> d!12741 (= lt!26330 (containsKey!129 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))

(assert (=> d!12741 (= (contains!700 call!4890 (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))) lt!26327)))

(declare-fun b!62872 () Bool)

(declare-fun lt!26329 () Unit!1689)

(assert (=> b!62872 (= e!41257 lt!26329)))

(assert (=> b!62872 (= lt!26329 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))

(assert (=> b!62872 (isDefined!79 (getValueByKey!125 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))

(declare-fun b!62873 () Bool)

(declare-fun Unit!1712 () Unit!1689)

(assert (=> b!62873 (= e!41257 Unit!1712)))

(declare-fun b!62874 () Bool)

(assert (=> b!62874 (= e!41258 (isDefined!79 (getValueByKey!125 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026))))))))

(assert (= (and d!12741 c!8432) b!62872))

(assert (= (and d!12741 (not c!8432)) b!62873))

(assert (= (and d!12741 (not res!34449)) b!62874))

(declare-fun m!56443 () Bool)

(assert (=> d!12741 m!56443))

(declare-fun m!56445 () Bool)

(assert (=> b!62872 m!56445))

(declare-fun m!56447 () Bool)

(assert (=> b!62872 m!56447))

(assert (=> b!62872 m!56447))

(declare-fun m!56449 () Bool)

(assert (=> b!62872 m!56449))

(assert (=> b!62874 m!56447))

(assert (=> b!62874 m!56447))

(assert (=> b!62874 m!56449))

(assert (=> bm!4897 d!12741))

(declare-fun d!12743 () Bool)

(declare-fun e!41259 () Bool)

(assert (=> d!12743 e!41259))

(declare-fun res!34450 () Bool)

(assert (=> d!12743 (=> (not res!34450) (not e!41259))))

(declare-fun lt!26331 () ListLongMap!1389)

(assert (=> d!12743 (= res!34450 (contains!700 lt!26331 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun lt!26334 () List!1463)

(assert (=> d!12743 (= lt!26331 (ListLongMap!1390 lt!26334))))

(declare-fun lt!26333 () Unit!1689)

(declare-fun lt!26332 () Unit!1689)

(assert (=> d!12743 (= lt!26333 lt!26332)))

(assert (=> d!12743 (= (getValueByKey!125 lt!26334 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12743 (= lt!26332 (lemmaContainsTupThenGetReturnValue!44 lt!26334 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12743 (= lt!26334 (insertStrictlySorted!46 (toList!710 call!4835) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12743 (= (+!83 call!4835 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!26331)))

(declare-fun b!62875 () Bool)

(declare-fun res!34451 () Bool)

(assert (=> b!62875 (=> (not res!34451) (not e!41259))))

(assert (=> b!62875 (= res!34451 (= (getValueByKey!125 (toList!710 lt!26331) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!62876 () Bool)

(assert (=> b!62876 (= e!41259 (contains!703 (toList!710 lt!26331) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(assert (= (and d!12743 res!34450) b!62875))

(assert (= (and b!62875 res!34451) b!62876))

(declare-fun m!56451 () Bool)

(assert (=> d!12743 m!56451))

(declare-fun m!56453 () Bool)

(assert (=> d!12743 m!56453))

(declare-fun m!56455 () Bool)

(assert (=> d!12743 m!56455))

(declare-fun m!56457 () Bool)

(assert (=> d!12743 m!56457))

(declare-fun m!56459 () Bool)

(assert (=> b!62875 m!56459))

(declare-fun m!56461 () Bool)

(assert (=> b!62876 m!56461))

(assert (=> b!62357 d!12743))

(assert (=> b!62499 d!12727))

(declare-fun bm!4958 () Bool)

(declare-fun call!4961 () Bool)

(declare-fun c!8433 () Bool)

(assert (=> bm!4958 (= call!4961 (arrayNoDuplicates!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8433 (Cons!1460 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) Nil!1461) Nil!1461)))))

(declare-fun b!62877 () Bool)

(declare-fun e!41262 () Bool)

(assert (=> b!62877 (= e!41262 (contains!702 Nil!1461 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62878 () Bool)

(declare-fun e!41261 () Bool)

(assert (=> b!62878 (= e!41261 call!4961)))

(declare-fun b!62880 () Bool)

(declare-fun e!41263 () Bool)

(declare-fun e!41260 () Bool)

(assert (=> b!62880 (= e!41263 e!41260)))

(declare-fun res!34454 () Bool)

(assert (=> b!62880 (=> (not res!34454) (not e!41260))))

(assert (=> b!62880 (= res!34454 (not e!41262))))

(declare-fun res!34452 () Bool)

(assert (=> b!62880 (=> (not res!34452) (not e!41262))))

(assert (=> b!62880 (= res!34452 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62881 () Bool)

(assert (=> b!62881 (= e!41261 call!4961)))

(declare-fun d!12745 () Bool)

(declare-fun res!34453 () Bool)

(assert (=> d!12745 (=> res!34453 e!41263)))

(assert (=> d!12745 (= res!34453 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!12745 (= (arrayNoDuplicates!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 Nil!1461) e!41263)))

(declare-fun b!62879 () Bool)

(assert (=> b!62879 (= e!41260 e!41261)))

(assert (=> b!62879 (= c!8433 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12745 (not res!34453)) b!62880))

(assert (= (and b!62880 res!34452) b!62877))

(assert (= (and b!62880 res!34454) b!62879))

(assert (= (and b!62879 c!8433) b!62881))

(assert (= (and b!62879 (not c!8433)) b!62878))

(assert (= (or b!62881 b!62878) bm!4958))

(assert (=> bm!4958 m!56007))

(declare-fun m!56463 () Bool)

(assert (=> bm!4958 m!56463))

(assert (=> b!62877 m!56007))

(assert (=> b!62877 m!56007))

(declare-fun m!56465 () Bool)

(assert (=> b!62877 m!56465))

(assert (=> b!62880 m!56007))

(assert (=> b!62880 m!56007))

(assert (=> b!62880 m!56009))

(assert (=> b!62879 m!56007))

(assert (=> b!62879 m!56007))

(assert (=> b!62879 m!56009))

(assert (=> b!62377 d!12745))

(declare-fun d!12747 () Bool)

(assert (=> d!12747 (= (apply!68 lt!25929 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1100 (getValueByKey!125 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2720 () Bool)

(assert (= bs!2720 d!12747))

(assert (=> bs!2720 m!56271))

(assert (=> bs!2720 m!56271))

(declare-fun m!56467 () Bool)

(assert (=> bs!2720 m!56467))

(assert (=> b!62353 d!12747))

(declare-fun d!12749 () Bool)

(assert (=> d!12749 (= (+!83 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26015 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26337 () Unit!1689)

(declare-fun choose!345 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 V!2867 Int) Unit!1689)

(assert (=> d!12749 (= lt!26337 (choose!345 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26015 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12749 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12749 (= (lemmaChangeZeroKeyThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26015 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) (defaultEntry!2088 newMap!16)) lt!26337)))

(declare-fun bs!2721 () Bool)

(assert (= bs!2721 d!12749))

(assert (=> bs!2721 m!55787))

(assert (=> bs!2721 m!55731))

(declare-fun m!56469 () Bool)

(assert (=> bs!2721 m!56469))

(assert (=> bs!2721 m!55941))

(assert (=> bs!2721 m!55731))

(declare-fun m!56471 () Bool)

(assert (=> bs!2721 m!56471))

(assert (=> bs!2721 m!55787))

(declare-fun m!56473 () Bool)

(assert (=> bs!2721 m!56473))

(assert (=> b!62500 d!12749))

(assert (=> d!12605 d!12727))

(declare-fun d!12751 () Bool)

(assert (=> d!12751 (= (get!1099 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62539 d!12751))

(declare-fun d!12753 () Bool)

(declare-fun res!34459 () Bool)

(declare-fun e!41268 () Bool)

(assert (=> d!12753 (=> res!34459 e!41268)))

(assert (=> d!12753 (= res!34459 (and ((_ is Cons!1459) (toList!710 lt!25845)) (= (_1!1043 (h!2042 (toList!710 lt!25845))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(assert (=> d!12753 (= (containsKey!129 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) e!41268)))

(declare-fun b!62886 () Bool)

(declare-fun e!41269 () Bool)

(assert (=> b!62886 (= e!41268 e!41269)))

(declare-fun res!34460 () Bool)

(assert (=> b!62886 (=> (not res!34460) (not e!41269))))

(assert (=> b!62886 (= res!34460 (and (or (not ((_ is Cons!1459) (toList!710 lt!25845))) (bvsle (_1!1043 (h!2042 (toList!710 lt!25845))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))) ((_ is Cons!1459) (toList!710 lt!25845)) (bvslt (_1!1043 (h!2042 (toList!710 lt!25845))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(declare-fun b!62887 () Bool)

(assert (=> b!62887 (= e!41269 (containsKey!129 (t!4861 (toList!710 lt!25845)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (= (and d!12753 (not res!34459)) b!62886))

(assert (= (and b!62886 res!34460) b!62887))

(assert (=> b!62887 m!55705))

(declare-fun m!56475 () Bool)

(assert (=> b!62887 m!56475))

(assert (=> d!12623 d!12753))

(assert (=> b!62361 d!12655))

(declare-fun d!12755 () Bool)

(declare-fun res!34461 () Bool)

(declare-fun e!41270 () Bool)

(assert (=> d!12755 (=> (not res!34461) (not e!41270))))

(assert (=> d!12755 (= res!34461 (simpleValid!43 (v!2419 (underlying!234 thiss!992))))))

(assert (=> d!12755 (= (valid!263 (v!2419 (underlying!234 thiss!992))) e!41270)))

(declare-fun b!62888 () Bool)

(declare-fun res!34462 () Bool)

(assert (=> b!62888 (=> (not res!34462) (not e!41270))))

(assert (=> b!62888 (= res!34462 (= (arrayCountValidKeys!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000 (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))) (_size!367 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun b!62889 () Bool)

(declare-fun res!34463 () Bool)

(assert (=> b!62889 (=> (not res!34463) (not e!41270))))

(assert (=> b!62889 (= res!34463 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun b!62890 () Bool)

(assert (=> b!62890 (= e!41270 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000 Nil!1461))))

(assert (= (and d!12755 res!34461) b!62888))

(assert (= (and b!62888 res!34462) b!62889))

(assert (= (and b!62889 res!34463) b!62890))

(declare-fun m!56477 () Bool)

(assert (=> d!12755 m!56477))

(declare-fun m!56479 () Bool)

(assert (=> b!62888 m!56479))

(declare-fun m!56481 () Bool)

(assert (=> b!62889 m!56481))

(declare-fun m!56483 () Bool)

(assert (=> b!62890 m!56483))

(assert (=> d!12629 d!12755))

(declare-fun d!12757 () Bool)

(assert (=> d!12757 (= (inRange!0 (ite c!8343 (ite c!8341 (index!3082 lt!26023) (ite c!8340 (index!3081 lt!26016) (index!3084 lt!26016))) (ite c!8338 (index!3082 lt!26011) (ite c!8344 (index!3081 lt!26020) (index!3084 lt!26020)))) (mask!5994 newMap!16)) (and (bvsge (ite c!8343 (ite c!8341 (index!3082 lt!26023) (ite c!8340 (index!3081 lt!26016) (index!3084 lt!26016))) (ite c!8338 (index!3082 lt!26011) (ite c!8344 (index!3081 lt!26020) (index!3084 lt!26020)))) #b00000000000000000000000000000000) (bvslt (ite c!8343 (ite c!8341 (index!3082 lt!26023) (ite c!8340 (index!3081 lt!26016) (index!3084 lt!26016))) (ite c!8338 (index!3082 lt!26011) (ite c!8344 (index!3081 lt!26020) (index!3084 lt!26020)))) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4889 d!12757))

(assert (=> d!12611 d!12615))

(declare-fun d!12759 () Bool)

(assert (=> d!12759 (not (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!12759 true))

(declare-fun _$68!37 () Unit!1689)

(assert (=> d!12759 (= (choose!68 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461)) _$68!37)))

(declare-fun bs!2722 () Bool)

(assert (= bs!2722 d!12759))

(assert (=> bs!2722 m!55705))

(assert (=> bs!2722 m!55723))

(assert (=> d!12611 d!12759))

(assert (=> d!12607 d!12621))

(declare-fun d!12761 () Bool)

(declare-fun res!34464 () Bool)

(declare-fun e!41271 () Bool)

(assert (=> d!12761 (=> res!34464 e!41271)))

(assert (=> d!12761 (= res!34464 (= (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!12761 (= (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000) e!41271)))

(declare-fun b!62891 () Bool)

(declare-fun e!41272 () Bool)

(assert (=> b!62891 (= e!41271 e!41272)))

(declare-fun res!34465 () Bool)

(assert (=> b!62891 (=> (not res!34465) (not e!41272))))

(assert (=> b!62891 (= res!34465 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62892 () Bool)

(assert (=> b!62892 (= e!41272 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12761 (not res!34464)) b!62891))

(assert (= (and b!62891 res!34465) b!62892))

(assert (=> d!12761 m!56007))

(assert (=> b!62892 m!55705))

(declare-fun m!56485 () Bool)

(assert (=> b!62892 m!56485))

(assert (=> bm!4899 d!12761))

(declare-fun d!12763 () Bool)

(assert (=> d!12763 (= (apply!68 lt!25929 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1100 (getValueByKey!125 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2723 () Bool)

(assert (= bs!2723 d!12763))

(assert (=> bs!2723 m!56377))

(assert (=> bs!2723 m!56377))

(declare-fun m!56487 () Bool)

(assert (=> bs!2723 m!56487))

(assert (=> b!62359 d!12763))

(declare-fun d!12765 () Bool)

(assert (=> d!12765 (= (+!83 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26340 () Unit!1689)

(declare-fun choose!346 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 V!2867 Int) Unit!1689)

(assert (=> d!12765 (= lt!26340 (choose!346 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12765 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12765 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)) lt!26340)))

(declare-fun bs!2724 () Bool)

(assert (= bs!2724 d!12765))

(assert (=> bs!2724 m!55787))

(assert (=> bs!2724 m!55731))

(declare-fun m!56489 () Bool)

(assert (=> bs!2724 m!56489))

(assert (=> bs!2724 m!55787))

(declare-fun m!56491 () Bool)

(assert (=> bs!2724 m!56491))

(assert (=> bs!2724 m!55731))

(declare-fun m!56493 () Bool)

(assert (=> bs!2724 m!56493))

(assert (=> bs!2724 m!55941))

(assert (=> b!62526 d!12765))

(declare-fun b!62894 () Bool)

(declare-fun e!41273 () Bool)

(assert (=> b!62894 (= e!41273 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2955 () Bool)

(declare-fun mapRes!2955 () Bool)

(assert (=> mapIsEmpty!2955 mapRes!2955))

(declare-fun mapNonEmpty!2955 () Bool)

(declare-fun tp!8139 () Bool)

(declare-fun e!41274 () Bool)

(assert (=> mapNonEmpty!2955 (= mapRes!2955 (and tp!8139 e!41274))))

(declare-fun mapRest!2955 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun mapValue!2955 () ValueCell!864)

(declare-fun mapKey!2955 () (_ BitVec 32))

(assert (=> mapNonEmpty!2955 (= mapRest!2954 (store mapRest!2955 mapKey!2955 mapValue!2955))))

(declare-fun b!62893 () Bool)

(assert (=> b!62893 (= e!41274 tp_is_empty!2415)))

(declare-fun condMapEmpty!2955 () Bool)

(declare-fun mapDefault!2955 () ValueCell!864)

(assert (=> mapNonEmpty!2954 (= condMapEmpty!2955 (= mapRest!2954 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2955)))))

(assert (=> mapNonEmpty!2954 (= tp!8138 (and e!41273 mapRes!2955))))

(assert (= (and mapNonEmpty!2954 condMapEmpty!2955) mapIsEmpty!2955))

(assert (= (and mapNonEmpty!2954 (not condMapEmpty!2955)) mapNonEmpty!2955))

(assert (= (and mapNonEmpty!2955 ((_ is ValueCellFull!864) mapValue!2955)) b!62893))

(assert (= (and mapNonEmpty!2954 ((_ is ValueCellFull!864) mapDefault!2955)) b!62894))

(declare-fun m!56495 () Bool)

(assert (=> mapNonEmpty!2955 m!56495))

(declare-fun b!62896 () Bool)

(declare-fun e!41275 () Bool)

(assert (=> b!62896 (= e!41275 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2956 () Bool)

(declare-fun mapRes!2956 () Bool)

(assert (=> mapIsEmpty!2956 mapRes!2956))

(declare-fun mapNonEmpty!2956 () Bool)

(declare-fun tp!8140 () Bool)

(declare-fun e!41276 () Bool)

(assert (=> mapNonEmpty!2956 (= mapRes!2956 (and tp!8140 e!41276))))

(declare-fun mapRest!2956 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun mapKey!2956 () (_ BitVec 32))

(declare-fun mapValue!2956 () ValueCell!864)

(assert (=> mapNonEmpty!2956 (= mapRest!2953 (store mapRest!2956 mapKey!2956 mapValue!2956))))

(declare-fun b!62895 () Bool)

(assert (=> b!62895 (= e!41276 tp_is_empty!2415)))

(declare-fun condMapEmpty!2956 () Bool)

(declare-fun mapDefault!2956 () ValueCell!864)

(assert (=> mapNonEmpty!2953 (= condMapEmpty!2956 (= mapRest!2953 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2956)))))

(assert (=> mapNonEmpty!2953 (= tp!8137 (and e!41275 mapRes!2956))))

(assert (= (and mapNonEmpty!2953 condMapEmpty!2956) mapIsEmpty!2956))

(assert (= (and mapNonEmpty!2953 (not condMapEmpty!2956)) mapNonEmpty!2956))

(assert (= (and mapNonEmpty!2956 ((_ is ValueCellFull!864) mapValue!2956)) b!62895))

(assert (= (and mapNonEmpty!2953 ((_ is ValueCellFull!864) mapDefault!2956)) b!62896))

(declare-fun m!56497 () Bool)

(assert (=> mapNonEmpty!2956 m!56497))

(declare-fun b_lambda!2807 () Bool)

(assert (= b_lambda!2803 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2807)))

(declare-fun b_lambda!2809 () Bool)

(assert (= b_lambda!2805 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2809)))

(declare-fun b_lambda!2811 () Bool)

(assert (= b_lambda!2797 (or (and b!62232 b_free!1997) (and b!62236 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))))) b_lambda!2811)))

(declare-fun b_lambda!2813 () Bool)

(assert (= b_lambda!2799 (or (and b!62232 b_free!1997) (and b!62236 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))))) b_lambda!2813)))

(declare-fun b_lambda!2815 () Bool)

(assert (= b_lambda!2801 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2815)))

(check-sat (not b!62700) (not bm!4951) (not bm!4945) (not b!62769) (not d!12685) (not b!62570) (not b!62875) (not b!62613) (not b!62633) (not d!12679) (not b_lambda!2807) (not d!12675) (not bm!4939) (not d!12643) (not d!12689) (not b_next!1997) (not d!12717) (not d!12695) (not d!12703) (not d!12711) (not d!12725) (not d!12741) (not d!12677) (not b!62808) (not b!62779) (not bm!4909) (not b!62603) (not b!62577) (not b!62745) (not b!62771) (not bm!4921) (not b!62754) (not b!62617) (not d!12683) (not b!62789) b_and!3839 (not b!62781) (not b!62880) (not b!62831) (not d!12639) (not b!62686) (not d!12687) (not bm!4938) (not d!12665) (not d!12705) (not d!12691) (not d!12723) (not b_lambda!2795) (not b!62842) (not d!12713) (not d!12693) (not b!62879) (not bm!4920) (not b!62864) (not b!62823) (not bm!4956) (not b!62744) (not b_lambda!2811) (not mapNonEmpty!2956) (not b!62850) (not b!62673) (not bm!4955) (not d!12721) (not d!12659) (not d!12699) (not b!62847) (not b!62619) (not d!12763) (not mapNonEmpty!2955) (not b!62846) (not bm!4941) (not b!62605) (not b!62853) (not b!62631) (not b!62612) (not b!62763) (not d!12647) (not b!62810) (not b!62691) (not b!62854) (not d!12719) (not d!12755) (not b!62848) (not bm!4912) (not b!62799) (not b!62698) (not bm!4946) (not b!62804) (not d!12707) (not b!62862) (not d!12667) (not b!62611) (not b!62816) (not d!12759) (not d!12697) (not b!62822) (not b!62574) (not d!12651) (not d!12681) (not b_next!1999) (not b!62890) (not b!62787) (not b!62576) (not b!62844) tp_is_empty!2415 (not b_lambda!2813) (not b!62778) (not bm!4958) (not d!12715) (not b!62770) (not b!62618) (not b!62702) (not b!62692) (not b!62690) (not b_lambda!2815) (not b!62877) (not b!62685) (not d!12657) (not d!12709) (not b!62688) (not b!62871) (not d!12663) (not b!62620) (not d!12701) (not b!62820) (not b!62757) (not b!62689) (not b!62687) (not b!62807) (not b!62761) b_and!3837 (not b!62746) (not b!62824) (not d!12649) (not bm!4947) (not bm!4940) (not d!12661) (not bm!4950) (not b!62813) (not b!62662) (not d!12749) (not b!62679) (not bm!4934) (not b!62843) (not d!12743) (not bm!4933) (not b!62887) (not b!62889) (not b!62876) (not b!62610) (not b!62704) (not b!62856) (not b!62863) (not b!62756) (not b!62788) (not b!62767) (not d!12731) (not b!62872) (not bm!4932) (not b!62699) (not b_lambda!2809) (not b!62604) (not b!62892) (not b!62860) (not d!12747) (not d!12765) (not d!12727) (not b!62615) (not b!62800) (not b!62874) (not bm!4930) (not b!62703) (not d!12739) (not b_lambda!2791) (not b!62814) (not b!62635) (not b!62888) (not bm!4957) (not b!62614) (not bm!4915) (not d!12733) (not b!62760) (not b!62554))
(check-sat b_and!3837 b_and!3839 (not b_next!1997) (not b_next!1999))
(get-model)

(declare-fun d!12767 () Bool)

(assert (=> d!12767 (= (size!2034 newMap!16) (bvadd (_size!367 newMap!16) (bvsdiv (bvadd (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!62800 d!12767))

(declare-fun d!12769 () Bool)

(declare-fun lt!26341 () Bool)

(assert (=> d!12769 (= lt!26341 (select (content!66 (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!41277 () Bool)

(assert (=> d!12769 (= lt!26341 e!41277)))

(declare-fun res!34467 () Bool)

(assert (=> d!12769 (=> (not res!34467) (not e!41277))))

(assert (=> d!12769 (= res!34467 ((_ is Cons!1460) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)))))

(assert (=> d!12769 (= (contains!702 (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!26341)))

(declare-fun b!62897 () Bool)

(declare-fun e!41278 () Bool)

(assert (=> b!62897 (= e!41277 e!41278)))

(declare-fun res!34466 () Bool)

(assert (=> b!62897 (=> res!34466 e!41278)))

(assert (=> b!62897 (= res!34466 (= (h!2043 (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!62898 () Bool)

(assert (=> b!62898 (= e!41278 (contains!702 (t!4862 (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!12769 res!34467) b!62897))

(assert (= (and b!62897 (not res!34466)) b!62898))

(declare-fun m!56499 () Bool)

(assert (=> d!12769 m!56499))

(assert (=> d!12769 m!55961))

(declare-fun m!56501 () Bool)

(assert (=> d!12769 m!56501))

(assert (=> b!62898 m!55961))

(declare-fun m!56503 () Bool)

(assert (=> b!62898 m!56503))

(assert (=> b!62574 d!12769))

(declare-fun d!12771 () Bool)

(declare-fun c!8434 () Bool)

(assert (=> d!12771 (= c!8434 (and ((_ is Cons!1459) (toList!710 lt!26109)) (= (_1!1043 (h!2042 (toList!710 lt!26109))) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun e!41279 () Option!131)

(assert (=> d!12771 (= (getValueByKey!125 (toList!710 lt!26109) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) e!41279)))

(declare-fun b!62901 () Bool)

(declare-fun e!41280 () Option!131)

(assert (=> b!62901 (= e!41280 (getValueByKey!125 (t!4861 (toList!710 lt!26109)) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!62902 () Bool)

(assert (=> b!62902 (= e!41280 None!129)))

(declare-fun b!62900 () Bool)

(assert (=> b!62900 (= e!41279 e!41280)))

(declare-fun c!8435 () Bool)

(assert (=> b!62900 (= c!8435 (and ((_ is Cons!1459) (toList!710 lt!26109)) (not (= (_1!1043 (h!2042 (toList!710 lt!26109))) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun b!62899 () Bool)

(assert (=> b!62899 (= e!41279 (Some!130 (_2!1043 (h!2042 (toList!710 lt!26109)))))))

(assert (= (and d!12771 c!8434) b!62899))

(assert (= (and d!12771 (not c!8434)) b!62900))

(assert (= (and b!62900 c!8435) b!62901))

(assert (= (and b!62900 (not c!8435)) b!62902))

(declare-fun m!56505 () Bool)

(assert (=> b!62901 m!56505))

(assert (=> b!62689 d!12771))

(declare-fun d!12773 () Bool)

(declare-fun lt!26342 () (_ BitVec 32))

(assert (=> d!12773 (and (bvsge lt!26342 #b00000000000000000000000000000000) (bvsle lt!26342 (bvsub (size!2030 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000)))))

(declare-fun e!41281 () (_ BitVec 32))

(assert (=> d!12773 (= lt!26342 e!41281)))

(declare-fun c!8436 () Bool)

(assert (=> d!12773 (= c!8436 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))))))

(assert (=> d!12773 (and (bvsle #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2030 (_keys!3720 (_2!1044 lt!26030))) (size!2030 (_keys!3720 (_2!1044 lt!26030)))))))

(assert (=> d!12773 (= (arrayCountValidKeys!0 (_keys!3720 (_2!1044 lt!26030)) #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))) lt!26342)))

(declare-fun bm!4959 () Bool)

(declare-fun call!4962 () (_ BitVec 32))

(assert (=> bm!4959 (= call!4962 (arrayCountValidKeys!0 (_keys!3720 (_2!1044 lt!26030)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (_2!1044 lt!26030)))))))

(declare-fun b!62903 () Bool)

(declare-fun e!41282 () (_ BitVec 32))

(assert (=> b!62903 (= e!41282 (bvadd #b00000000000000000000000000000001 call!4962))))

(declare-fun b!62904 () Bool)

(assert (=> b!62904 (= e!41281 #b00000000000000000000000000000000)))

(declare-fun b!62905 () Bool)

(assert (=> b!62905 (= e!41281 e!41282)))

(declare-fun c!8437 () Bool)

(assert (=> b!62905 (= c!8437 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000)))))

(declare-fun b!62906 () Bool)

(assert (=> b!62906 (= e!41282 call!4962)))

(assert (= (and d!12773 c!8436) b!62904))

(assert (= (and d!12773 (not c!8436)) b!62905))

(assert (= (and b!62905 c!8437) b!62903))

(assert (= (and b!62905 (not c!8437)) b!62906))

(assert (= (or b!62903 b!62906) bm!4959))

(declare-fun m!56507 () Bool)

(assert (=> bm!4959 m!56507))

(declare-fun m!56509 () Bool)

(assert (=> b!62905 m!56509))

(assert (=> b!62905 m!56509))

(declare-fun m!56511 () Bool)

(assert (=> b!62905 m!56511))

(assert (=> b!62618 d!12773))

(declare-fun d!12775 () Bool)

(assert (=> d!12775 (= (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62831 d!12775))

(declare-fun d!12777 () Bool)

(assert (=> d!12777 (contains!700 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))

(declare-fun lt!26345 () Unit!1689)

(declare-fun choose!347 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) (_ BitVec 32) Int) Unit!1689)

(assert (=> d!12777 (= lt!26345 (choose!347 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(assert (=> d!12777 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12777 (= (lemmaArrayContainsKeyThenInListMap!7 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26345)))

(declare-fun bs!2725 () Bool)

(assert (= bs!2725 d!12777))

(assert (=> bs!2725 m!55787))

(assert (=> bs!2725 m!55787))

(assert (=> bs!2725 m!55705))

(assert (=> bs!2725 m!55887))

(assert (=> bs!2725 m!55705))

(declare-fun m!56513 () Bool)

(assert (=> bs!2725 m!56513))

(assert (=> bs!2725 m!55941))

(assert (=> b!62744 d!12777))

(assert (=> b!62744 d!12725))

(assert (=> b!62744 d!12727))

(declare-fun d!12779 () Bool)

(assert (=> d!12779 (= (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931)) (not (isEmpty!305 (getValueByKey!125 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931))))))

(declare-fun bs!2726 () Bool)

(assert (= bs!2726 d!12779))

(assert (=> bs!2726 m!56117))

(declare-fun m!56515 () Bool)

(assert (=> bs!2726 m!56515))

(assert (=> b!62702 d!12779))

(declare-fun d!12781 () Bool)

(declare-fun c!8438 () Bool)

(assert (=> d!12781 (= c!8438 (and ((_ is Cons!1459) (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))) (= (_1!1043 (h!2042 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))) lt!25931)))))

(declare-fun e!41283 () Option!131)

(assert (=> d!12781 (= (getValueByKey!125 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931) e!41283)))

(declare-fun b!62909 () Bool)

(declare-fun e!41284 () Option!131)

(assert (=> b!62909 (= e!41284 (getValueByKey!125 (t!4861 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))) lt!25931))))

(declare-fun b!62910 () Bool)

(assert (=> b!62910 (= e!41284 None!129)))

(declare-fun b!62908 () Bool)

(assert (=> b!62908 (= e!41283 e!41284)))

(declare-fun c!8439 () Bool)

(assert (=> b!62908 (= c!8439 (and ((_ is Cons!1459) (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))) (not (= (_1!1043 (h!2042 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))) lt!25931))))))

(declare-fun b!62907 () Bool)

(assert (=> b!62907 (= e!41283 (Some!130 (_2!1043 (h!2042 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))))

(assert (= (and d!12781 c!8438) b!62907))

(assert (= (and d!12781 (not c!8438)) b!62908))

(assert (= (and b!62908 c!8439) b!62909))

(assert (= (and b!62908 (not c!8439)) b!62910))

(declare-fun m!56517 () Bool)

(assert (=> b!62909 m!56517))

(assert (=> b!62702 d!12781))

(declare-fun d!12783 () Bool)

(assert (=> d!12783 (= (map!1119 (_2!1044 lt!26197)) (getCurrentListMap!407 (_keys!3720 (_2!1044 lt!26197)) (_values!2071 (_2!1044 lt!26197)) (mask!5994 (_2!1044 lt!26197)) (extraKeys!1967 (_2!1044 lt!26197)) (zeroValue!2000 (_2!1044 lt!26197)) (minValue!2000 (_2!1044 lt!26197)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1044 lt!26197))))))

(declare-fun bs!2727 () Bool)

(assert (= bs!2727 d!12783))

(declare-fun m!56519 () Bool)

(assert (=> bs!2727 m!56519))

(assert (=> b!62757 d!12783))

(declare-fun d!12785 () Bool)

(declare-fun e!41285 () Bool)

(assert (=> d!12785 e!41285))

(declare-fun res!34468 () Bool)

(assert (=> d!12785 (=> (not res!34468) (not e!41285))))

(declare-fun lt!26346 () ListLongMap!1389)

(assert (=> d!12785 (= res!34468 (contains!700 lt!26346 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26349 () List!1463)

(assert (=> d!12785 (= lt!26346 (ListLongMap!1390 lt!26349))))

(declare-fun lt!26348 () Unit!1689)

(declare-fun lt!26347 () Unit!1689)

(assert (=> d!12785 (= lt!26348 lt!26347)))

(assert (=> d!12785 (= (getValueByKey!125 lt!26349 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12785 (= lt!26347 (lemmaContainsTupThenGetReturnValue!44 lt!26349 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12785 (= lt!26349 (insertStrictlySorted!46 (toList!710 (map!1119 newMap!16)) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12785 (= (+!83 (map!1119 newMap!16) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26346)))

(declare-fun b!62911 () Bool)

(declare-fun res!34469 () Bool)

(assert (=> b!62911 (=> (not res!34469) (not e!41285))))

(assert (=> b!62911 (= res!34469 (= (getValueByKey!125 (toList!710 lt!26346) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62912 () Bool)

(assert (=> b!62912 (= e!41285 (contains!703 (toList!710 lt!26346) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12785 res!34468) b!62911))

(assert (= (and b!62911 res!34469) b!62912))

(declare-fun m!56521 () Bool)

(assert (=> d!12785 m!56521))

(declare-fun m!56523 () Bool)

(assert (=> d!12785 m!56523))

(declare-fun m!56525 () Bool)

(assert (=> d!12785 m!56525))

(declare-fun m!56527 () Bool)

(assert (=> d!12785 m!56527))

(declare-fun m!56529 () Bool)

(assert (=> b!62911 m!56529))

(declare-fun m!56531 () Bool)

(assert (=> b!62912 m!56531))

(assert (=> b!62757 d!12785))

(assert (=> b!62757 d!12605))

(declare-fun d!12787 () Bool)

(assert (=> d!12787 (= (apply!68 lt!26321 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1100 (getValueByKey!125 (toList!710 lt!26321) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2728 () Bool)

(assert (= bs!2728 d!12787))

(assert (=> bs!2728 m!56007))

(declare-fun m!56533 () Bool)

(assert (=> bs!2728 m!56533))

(assert (=> bs!2728 m!56533))

(declare-fun m!56535 () Bool)

(assert (=> bs!2728 m!56535))

(assert (=> b!62854 d!12787))

(declare-fun d!12789 () Bool)

(declare-fun c!8440 () Bool)

(assert (=> d!12789 (= c!8440 ((_ is ValueCellFull!864) (select (arr!1799 (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!41286 () V!2867)

(assert (=> d!12789 (= (get!1096 (select (arr!1799 (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41286)))

(declare-fun b!62913 () Bool)

(assert (=> b!62913 (= e!41286 (get!1098 (select (arr!1799 (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62914 () Bool)

(assert (=> b!62914 (= e!41286 (get!1099 (select (arr!1799 (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12789 c!8440) b!62913))

(assert (= (and d!12789 (not c!8440)) b!62914))

(assert (=> b!62913 m!56439))

(assert (=> b!62913 m!56259))

(declare-fun m!56537 () Bool)

(assert (=> b!62913 m!56537))

(assert (=> b!62914 m!56439))

(assert (=> b!62914 m!56259))

(declare-fun m!56539 () Bool)

(assert (=> b!62914 m!56539))

(assert (=> b!62854 d!12789))

(declare-fun d!12791 () Bool)

(assert (=> d!12791 (= (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25928)) (v!2423 (getValueByKey!125 (toList!710 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25928)))))

(assert (=> d!12697 d!12791))

(declare-fun d!12793 () Bool)

(declare-fun c!8441 () Bool)

(assert (=> d!12793 (= c!8441 (and ((_ is Cons!1459) (toList!710 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) (= (_1!1043 (h!2042 (toList!710 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))) lt!25928)))))

(declare-fun e!41287 () Option!131)

(assert (=> d!12793 (= (getValueByKey!125 (toList!710 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25928) e!41287)))

(declare-fun b!62917 () Bool)

(declare-fun e!41288 () Option!131)

(assert (=> b!62917 (= e!41288 (getValueByKey!125 (t!4861 (toList!710 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) lt!25928))))

(declare-fun b!62918 () Bool)

(assert (=> b!62918 (= e!41288 None!129)))

(declare-fun b!62916 () Bool)

(assert (=> b!62916 (= e!41287 e!41288)))

(declare-fun c!8442 () Bool)

(assert (=> b!62916 (= c!8442 (and ((_ is Cons!1459) (toList!710 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) (not (= (_1!1043 (h!2042 (toList!710 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))) lt!25928))))))

(declare-fun b!62915 () Bool)

(assert (=> b!62915 (= e!41287 (Some!130 (_2!1043 (h!2042 (toList!710 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))))

(assert (= (and d!12793 c!8441) b!62915))

(assert (= (and d!12793 (not c!8441)) b!62916))

(assert (= (and b!62916 c!8442) b!62917))

(assert (= (and b!62916 (not c!8442)) b!62918))

(declare-fun m!56541 () Bool)

(assert (=> b!62917 m!56541))

(assert (=> d!12697 d!12793))

(declare-fun d!12795 () Bool)

(assert (=> d!12795 (= (validMask!0 (mask!5994 newMap!16)) (and (or (= (mask!5994 newMap!16) #b00000000000000000000000000000111) (= (mask!5994 newMap!16) #b00000000000000000000000000001111) (= (mask!5994 newMap!16) #b00000000000000000000000000011111) (= (mask!5994 newMap!16) #b00000000000000000000000000111111) (= (mask!5994 newMap!16) #b00000000000000000000000001111111) (= (mask!5994 newMap!16) #b00000000000000000000000011111111) (= (mask!5994 newMap!16) #b00000000000000000000000111111111) (= (mask!5994 newMap!16) #b00000000000000000000001111111111) (= (mask!5994 newMap!16) #b00000000000000000000011111111111) (= (mask!5994 newMap!16) #b00000000000000000000111111111111) (= (mask!5994 newMap!16) #b00000000000000000001111111111111) (= (mask!5994 newMap!16) #b00000000000000000011111111111111) (= (mask!5994 newMap!16) #b00000000000000000111111111111111) (= (mask!5994 newMap!16) #b00000000000000001111111111111111) (= (mask!5994 newMap!16) #b00000000000000011111111111111111) (= (mask!5994 newMap!16) #b00000000000000111111111111111111) (= (mask!5994 newMap!16) #b00000000000001111111111111111111) (= (mask!5994 newMap!16) #b00000000000011111111111111111111) (= (mask!5994 newMap!16) #b00000000000111111111111111111111) (= (mask!5994 newMap!16) #b00000000001111111111111111111111) (= (mask!5994 newMap!16) #b00000000011111111111111111111111) (= (mask!5994 newMap!16) #b00000000111111111111111111111111) (= (mask!5994 newMap!16) #b00000001111111111111111111111111) (= (mask!5994 newMap!16) #b00000011111111111111111111111111) (= (mask!5994 newMap!16) #b00000111111111111111111111111111) (= (mask!5994 newMap!16) #b00001111111111111111111111111111) (= (mask!5994 newMap!16) #b00011111111111111111111111111111) (= (mask!5994 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5994 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!12739 d!12795))

(declare-fun bm!4960 () Bool)

(declare-fun call!4963 () Bool)

(declare-fun c!8443 () Bool)

(assert (=> bm!4960 (= call!4963 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8443 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b00000000000000000000000000000000) Nil!1461) Nil!1461)))))

(declare-fun b!62919 () Bool)

(declare-fun e!41291 () Bool)

(assert (=> b!62919 (= e!41291 (contains!702 Nil!1461 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!62920 () Bool)

(declare-fun e!41290 () Bool)

(assert (=> b!62920 (= e!41290 call!4963)))

(declare-fun b!62922 () Bool)

(declare-fun e!41292 () Bool)

(declare-fun e!41289 () Bool)

(assert (=> b!62922 (= e!41292 e!41289)))

(declare-fun res!34472 () Bool)

(assert (=> b!62922 (=> (not res!34472) (not e!41289))))

(assert (=> b!62922 (= res!34472 (not e!41291))))

(declare-fun res!34470 () Bool)

(assert (=> b!62922 (=> (not res!34470) (not e!41291))))

(assert (=> b!62922 (= res!34470 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!62923 () Bool)

(assert (=> b!62923 (= e!41290 call!4963)))

(declare-fun d!12797 () Bool)

(declare-fun res!34471 () Bool)

(assert (=> d!12797 (=> res!34471 e!41292)))

(assert (=> d!12797 (= res!34471 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> d!12797 (= (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000 Nil!1461) e!41292)))

(declare-fun b!62921 () Bool)

(assert (=> b!62921 (= e!41289 e!41290)))

(assert (=> b!62921 (= c!8443 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!12797 (not res!34471)) b!62922))

(assert (= (and b!62922 res!34470) b!62919))

(assert (= (and b!62922 res!34472) b!62921))

(assert (= (and b!62921 c!8443) b!62923))

(assert (= (and b!62921 (not c!8443)) b!62920))

(assert (= (or b!62923 b!62920) bm!4960))

(declare-fun m!56543 () Bool)

(assert (=> bm!4960 m!56543))

(declare-fun m!56545 () Bool)

(assert (=> bm!4960 m!56545))

(assert (=> b!62919 m!56543))

(assert (=> b!62919 m!56543))

(declare-fun m!56547 () Bool)

(assert (=> b!62919 m!56547))

(assert (=> b!62922 m!56543))

(assert (=> b!62922 m!56543))

(declare-fun m!56549 () Bool)

(assert (=> b!62922 m!56549))

(assert (=> b!62921 m!56543))

(assert (=> b!62921 m!56543))

(assert (=> b!62921 m!56549))

(assert (=> b!62890 d!12797))

(assert (=> d!12665 d!12667))

(assert (=> d!12665 d!12669))

(declare-fun d!12799 () Bool)

(assert (=> d!12799 (isDefined!79 (getValueByKey!125 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!12799 true))

(declare-fun _$12!311 () Unit!1689)

(assert (=> d!12799 (= (choose!340 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) _$12!311)))

(declare-fun bs!2729 () Bool)

(assert (= bs!2729 d!12799))

(assert (=> bs!2729 m!55705))

(assert (=> bs!2729 m!55871))

(assert (=> bs!2729 m!55871))

(assert (=> bs!2729 m!55873))

(assert (=> d!12665 d!12799))

(declare-fun d!12801 () Bool)

(declare-fun res!34477 () Bool)

(declare-fun e!41297 () Bool)

(assert (=> d!12801 (=> res!34477 e!41297)))

(assert (=> d!12801 (= res!34477 (or ((_ is Nil!1460) (toList!710 lt!25845)) ((_ is Nil!1460) (t!4861 (toList!710 lt!25845)))))))

(assert (=> d!12801 (= (isStrictlySorted!281 (toList!710 lt!25845)) e!41297)))

(declare-fun b!62928 () Bool)

(declare-fun e!41298 () Bool)

(assert (=> b!62928 (= e!41297 e!41298)))

(declare-fun res!34478 () Bool)

(assert (=> b!62928 (=> (not res!34478) (not e!41298))))

(assert (=> b!62928 (= res!34478 (bvslt (_1!1043 (h!2042 (toList!710 lt!25845))) (_1!1043 (h!2042 (t!4861 (toList!710 lt!25845))))))))

(declare-fun b!62929 () Bool)

(assert (=> b!62929 (= e!41298 (isStrictlySorted!281 (t!4861 (toList!710 lt!25845))))))

(assert (= (and d!12801 (not res!34477)) b!62928))

(assert (= (and b!62928 res!34478) b!62929))

(declare-fun m!56551 () Bool)

(assert (=> b!62929 m!56551))

(assert (=> d!12665 d!12801))

(declare-fun d!12803 () Bool)

(assert (=> d!12803 (= (apply!68 lt!26243 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1100 (getValueByKey!125 (toList!710 lt!26243) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2730 () Bool)

(assert (= bs!2730 d!12803))

(declare-fun m!56553 () Bool)

(assert (=> bs!2730 m!56553))

(assert (=> bs!2730 m!56553))

(declare-fun m!56555 () Bool)

(assert (=> bs!2730 m!56555))

(assert (=> b!62769 d!12803))

(declare-fun d!12805 () Bool)

(assert (=> d!12805 (isDefined!79 (getValueByKey!125 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun lt!26350 () Unit!1689)

(assert (=> d!12805 (= lt!26350 (choose!340 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun e!41299 () Bool)

(assert (=> d!12805 e!41299))

(declare-fun res!34479 () Bool)

(assert (=> d!12805 (=> (not res!34479) (not e!41299))))

(assert (=> d!12805 (= res!34479 (isStrictlySorted!281 (toList!710 call!4894)))))

(assert (=> d!12805 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) lt!26350)))

(declare-fun b!62930 () Bool)

(assert (=> b!62930 (= e!41299 (containsKey!129 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (= (and d!12805 res!34479) b!62930))

(assert (=> d!12805 m!55705))

(assert (=> d!12805 m!55993))

(assert (=> d!12805 m!55993))

(assert (=> d!12805 m!55995))

(assert (=> d!12805 m!55705))

(declare-fun m!56557 () Bool)

(assert (=> d!12805 m!56557))

(declare-fun m!56559 () Bool)

(assert (=> d!12805 m!56559))

(assert (=> b!62930 m!55705))

(assert (=> b!62930 m!55989))

(assert (=> b!62615 d!12805))

(declare-fun d!12807 () Bool)

(assert (=> d!12807 (= (isDefined!79 (getValueByKey!125 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))) (not (isEmpty!305 (getValueByKey!125 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))))

(declare-fun bs!2731 () Bool)

(assert (= bs!2731 d!12807))

(assert (=> bs!2731 m!55993))

(declare-fun m!56561 () Bool)

(assert (=> bs!2731 m!56561))

(assert (=> b!62615 d!12807))

(declare-fun c!8444 () Bool)

(declare-fun d!12809 () Bool)

(assert (=> d!12809 (= c!8444 (and ((_ is Cons!1459) (toList!710 call!4894)) (= (_1!1043 (h!2042 (toList!710 call!4894))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(declare-fun e!41300 () Option!131)

(assert (=> d!12809 (= (getValueByKey!125 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) e!41300)))

(declare-fun b!62933 () Bool)

(declare-fun e!41301 () Option!131)

(assert (=> b!62933 (= e!41301 (getValueByKey!125 (t!4861 (toList!710 call!4894)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!62934 () Bool)

(assert (=> b!62934 (= e!41301 None!129)))

(declare-fun b!62932 () Bool)

(assert (=> b!62932 (= e!41300 e!41301)))

(declare-fun c!8445 () Bool)

(assert (=> b!62932 (= c!8445 (and ((_ is Cons!1459) (toList!710 call!4894)) (not (= (_1!1043 (h!2042 (toList!710 call!4894))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))))

(declare-fun b!62931 () Bool)

(assert (=> b!62931 (= e!41300 (Some!130 (_2!1043 (h!2042 (toList!710 call!4894)))))))

(assert (= (and d!12809 c!8444) b!62931))

(assert (= (and d!12809 (not c!8444)) b!62932))

(assert (= (and b!62932 c!8445) b!62933))

(assert (= (and b!62932 (not c!8445)) b!62934))

(assert (=> b!62933 m!55705))

(declare-fun m!56563 () Bool)

(assert (=> b!62933 m!56563))

(assert (=> b!62615 d!12809))

(declare-fun d!12811 () Bool)

(declare-fun e!41316 () Bool)

(assert (=> d!12811 e!41316))

(declare-fun c!8452 () Bool)

(declare-fun lt!26355 () SeekEntryResult!239)

(assert (=> d!12811 (= c!8452 (and ((_ is Intermediate!239) lt!26355) (undefined!1051 lt!26355)))))

(declare-fun e!41312 () SeekEntryResult!239)

(assert (=> d!12811 (= lt!26355 e!41312)))

(declare-fun c!8454 () Bool)

(assert (=> d!12811 (= c!8454 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!26356 () (_ BitVec 64))

(assert (=> d!12811 (= lt!26356 (select (arr!1798 (_keys!3720 newMap!16)) (toIndex!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (mask!5994 newMap!16))))))

(assert (=> d!12811 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12811 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (mask!5994 newMap!16)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)) lt!26355)))

(declare-fun b!62953 () Bool)

(assert (=> b!62953 (and (bvsge (index!3083 lt!26355) #b00000000000000000000000000000000) (bvslt (index!3083 lt!26355) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun res!34488 () Bool)

(assert (=> b!62953 (= res!34488 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3083 lt!26355)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41314 () Bool)

(assert (=> b!62953 (=> res!34488 e!41314)))

(declare-fun b!62954 () Bool)

(assert (=> b!62954 (= e!41312 (Intermediate!239 true (toIndex!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (mask!5994 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!62955 () Bool)

(assert (=> b!62955 (and (bvsge (index!3083 lt!26355) #b00000000000000000000000000000000) (bvslt (index!3083 lt!26355) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun res!34487 () Bool)

(assert (=> b!62955 (= res!34487 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3083 lt!26355)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> b!62955 (=> res!34487 e!41314)))

(declare-fun e!41313 () Bool)

(assert (=> b!62955 (= e!41313 e!41314)))

(declare-fun e!41315 () SeekEntryResult!239)

(declare-fun b!62956 () Bool)

(assert (=> b!62956 (= e!41315 (Intermediate!239 false (toIndex!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (mask!5994 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!62957 () Bool)

(assert (=> b!62957 (= e!41316 e!41313)))

(declare-fun res!34486 () Bool)

(assert (=> b!62957 (= res!34486 (and ((_ is Intermediate!239) lt!26355) (not (undefined!1051 lt!26355)) (bvslt (x!10317 lt!26355) #b01111111111111111111111111111110) (bvsge (x!10317 lt!26355) #b00000000000000000000000000000000) (bvsge (x!10317 lt!26355) #b00000000000000000000000000000000)))))

(assert (=> b!62957 (=> (not res!34486) (not e!41313))))

(declare-fun b!62958 () Bool)

(assert (=> b!62958 (and (bvsge (index!3083 lt!26355) #b00000000000000000000000000000000) (bvslt (index!3083 lt!26355) (size!2030 (_keys!3720 newMap!16))))))

(assert (=> b!62958 (= e!41314 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3083 lt!26355)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62959 () Bool)

(assert (=> b!62959 (= e!41316 (bvsge (x!10317 lt!26355) #b01111111111111111111111111111110))))

(declare-fun b!62960 () Bool)

(assert (=> b!62960 (= e!41312 e!41315)))

(declare-fun c!8453 () Bool)

(assert (=> b!62960 (= c!8453 (or (= lt!26356 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (= (bvadd lt!26356 lt!26356) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62961 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!62961 (= e!41315 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (mask!5994 newMap!16)) #b00000000000000000000000000000000 (mask!5994 newMap!16)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (= (and d!12811 c!8454) b!62954))

(assert (= (and d!12811 (not c!8454)) b!62960))

(assert (= (and b!62960 c!8453) b!62956))

(assert (= (and b!62960 (not c!8453)) b!62961))

(assert (= (and d!12811 c!8452) b!62959))

(assert (= (and d!12811 (not c!8452)) b!62957))

(assert (= (and b!62957 res!34486) b!62955))

(assert (= (and b!62955 (not res!34487)) b!62953))

(assert (= (and b!62953 (not res!34488)) b!62958))

(declare-fun m!56565 () Bool)

(assert (=> b!62958 m!56565))

(assert (=> d!12811 m!55949))

(declare-fun m!56567 () Bool)

(assert (=> d!12811 m!56567))

(assert (=> d!12811 m!55941))

(assert (=> b!62953 m!56565))

(assert (=> b!62961 m!55949))

(declare-fun m!56569 () Bool)

(assert (=> b!62961 m!56569))

(assert (=> b!62961 m!56569))

(assert (=> b!62961 m!55705))

(declare-fun m!56571 () Bool)

(assert (=> b!62961 m!56571))

(assert (=> b!62955 m!56565))

(assert (=> d!12643 d!12811))

(declare-fun d!12813 () Bool)

(declare-fun lt!26362 () (_ BitVec 32))

(declare-fun lt!26361 () (_ BitVec 32))

(assert (=> d!12813 (= lt!26362 (bvmul (bvxor lt!26361 (bvlshr lt!26361 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!12813 (= lt!26361 ((_ extract 31 0) (bvand (bvxor (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvlshr (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!12813 (and (bvsge (mask!5994 newMap!16) #b00000000000000000000000000000000) (let ((res!34489 (let ((h!2046 ((_ extract 31 0) (bvand (bvxor (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvlshr (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!10420 (bvmul (bvxor h!2046 (bvlshr h!2046 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!10420 (bvlshr x!10420 #b00000000000000000000000000001101)) (mask!5994 newMap!16)))))) (and (bvslt res!34489 (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001)) (bvsge res!34489 #b00000000000000000000000000000000))))))

(assert (=> d!12813 (= (toIndex!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (mask!5994 newMap!16)) (bvand (bvxor lt!26362 (bvlshr lt!26362 #b00000000000000000000000000001101)) (mask!5994 newMap!16)))))

(assert (=> d!12643 d!12813))

(assert (=> d!12643 d!12795))

(declare-fun d!12815 () Bool)

(declare-fun lt!26363 () (_ BitVec 32))

(assert (=> d!12815 (and (bvsge lt!26363 #b00000000000000000000000000000000) (bvsle lt!26363 (bvsub (size!2030 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun e!41317 () (_ BitVec 32))

(assert (=> d!12815 (= lt!26363 e!41317)))

(declare-fun c!8455 () Bool)

(assert (=> d!12815 (= c!8455 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!12815 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 (_keys!3720 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2030 (_keys!3720 newMap!16)) (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!12815 (= (arrayCountValidKeys!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 (_keys!3720 newMap!16))) lt!26363)))

(declare-fun bm!4961 () Bool)

(declare-fun call!4964 () (_ BitVec 32))

(assert (=> bm!4961 (= call!4964 (arrayCountValidKeys!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62962 () Bool)

(declare-fun e!41318 () (_ BitVec 32))

(assert (=> b!62962 (= e!41318 (bvadd #b00000000000000000000000000000001 call!4964))))

(declare-fun b!62963 () Bool)

(assert (=> b!62963 (= e!41317 #b00000000000000000000000000000000)))

(declare-fun b!62964 () Bool)

(assert (=> b!62964 (= e!41317 e!41318)))

(declare-fun c!8456 () Bool)

(assert (=> b!62964 (= c!8456 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!62965 () Bool)

(assert (=> b!62965 (= e!41318 call!4964)))

(assert (= (and d!12815 c!8455) b!62963))

(assert (= (and d!12815 (not c!8455)) b!62964))

(assert (= (and b!62964 c!8456) b!62962))

(assert (= (and b!62964 (not c!8456)) b!62965))

(assert (= (or b!62962 b!62965) bm!4961))

(declare-fun m!56573 () Bool)

(assert (=> bm!4961 m!56573))

(declare-fun m!56575 () Bool)

(assert (=> b!62964 m!56575))

(assert (=> b!62964 m!56575))

(declare-fun m!56577 () Bool)

(assert (=> b!62964 m!56577))

(assert (=> bm!4915 d!12815))

(declare-fun d!12817 () Bool)

(declare-fun e!41320 () Bool)

(assert (=> d!12817 e!41320))

(declare-fun res!34490 () Bool)

(assert (=> d!12817 (=> res!34490 e!41320)))

(declare-fun lt!26364 () Bool)

(assert (=> d!12817 (= res!34490 (not lt!26364))))

(declare-fun lt!26367 () Bool)

(assert (=> d!12817 (= lt!26364 lt!26367)))

(declare-fun lt!26365 () Unit!1689)

(declare-fun e!41319 () Unit!1689)

(assert (=> d!12817 (= lt!26365 e!41319)))

(declare-fun c!8457 () Bool)

(assert (=> d!12817 (= c!8457 lt!26367)))

(assert (=> d!12817 (= lt!26367 (containsKey!129 (toList!710 lt!26243) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12817 (= (contains!700 lt!26243 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26364)))

(declare-fun b!62966 () Bool)

(declare-fun lt!26366 () Unit!1689)

(assert (=> b!62966 (= e!41319 lt!26366)))

(assert (=> b!62966 (= lt!26366 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26243) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62966 (isDefined!79 (getValueByKey!125 (toList!710 lt!26243) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62967 () Bool)

(declare-fun Unit!1713 () Unit!1689)

(assert (=> b!62967 (= e!41319 Unit!1713)))

(declare-fun b!62968 () Bool)

(assert (=> b!62968 (= e!41320 (isDefined!79 (getValueByKey!125 (toList!710 lt!26243) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12817 c!8457) b!62966))

(assert (= (and d!12817 (not c!8457)) b!62967))

(assert (= (and d!12817 (not res!34490)) b!62968))

(declare-fun m!56579 () Bool)

(assert (=> d!12817 m!56579))

(declare-fun m!56581 () Bool)

(assert (=> b!62966 m!56581))

(declare-fun m!56583 () Bool)

(assert (=> b!62966 m!56583))

(assert (=> b!62966 m!56583))

(declare-fun m!56585 () Bool)

(assert (=> b!62966 m!56585))

(assert (=> b!62968 m!56583))

(assert (=> b!62968 m!56583))

(assert (=> b!62968 m!56585))

(assert (=> bm!4934 d!12817))

(declare-fun d!12819 () Bool)

(declare-fun e!41322 () Bool)

(assert (=> d!12819 e!41322))

(declare-fun res!34491 () Bool)

(assert (=> d!12819 (=> res!34491 e!41322)))

(declare-fun lt!26368 () Bool)

(assert (=> d!12819 (= res!34491 (not lt!26368))))

(declare-fun lt!26371 () Bool)

(assert (=> d!12819 (= lt!26368 lt!26371)))

(declare-fun lt!26369 () Unit!1689)

(declare-fun e!41321 () Unit!1689)

(assert (=> d!12819 (= lt!26369 e!41321)))

(declare-fun c!8458 () Bool)

(assert (=> d!12819 (= c!8458 lt!26371)))

(assert (=> d!12819 (= lt!26371 (containsKey!129 (toList!710 lt!26066) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!12819 (= (contains!700 lt!26066 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26368)))

(declare-fun b!62969 () Bool)

(declare-fun lt!26370 () Unit!1689)

(assert (=> b!62969 (= e!41321 lt!26370)))

(assert (=> b!62969 (= lt!26370 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26066) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62969 (isDefined!79 (getValueByKey!125 (toList!710 lt!26066) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62970 () Bool)

(declare-fun Unit!1714 () Unit!1689)

(assert (=> b!62970 (= e!41321 Unit!1714)))

(declare-fun b!62971 () Bool)

(assert (=> b!62971 (= e!41322 (isDefined!79 (getValueByKey!125 (toList!710 lt!26066) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!12819 c!8458) b!62969))

(assert (= (and d!12819 (not c!8458)) b!62970))

(assert (= (and d!12819 (not res!34491)) b!62971))

(assert (=> d!12819 m!55795))

(declare-fun m!56587 () Bool)

(assert (=> d!12819 m!56587))

(assert (=> b!62969 m!55795))

(declare-fun m!56589 () Bool)

(assert (=> b!62969 m!56589))

(assert (=> b!62969 m!55795))

(declare-fun m!56591 () Bool)

(assert (=> b!62969 m!56591))

(assert (=> b!62969 m!56591))

(declare-fun m!56593 () Bool)

(assert (=> b!62969 m!56593))

(assert (=> b!62971 m!55795))

(assert (=> b!62971 m!56591))

(assert (=> b!62971 m!56591))

(assert (=> b!62971 m!56593))

(assert (=> b!62611 d!12819))

(assert (=> d!12639 d!12643))

(declare-fun d!12821 () Bool)

(declare-fun e!41325 () Bool)

(assert (=> d!12821 e!41325))

(declare-fun res!34496 () Bool)

(assert (=> d!12821 (=> (not res!34496) (not e!41325))))

(declare-fun lt!26374 () SeekEntryResult!239)

(assert (=> d!12821 (= res!34496 ((_ is Found!239) lt!26374))))

(assert (=> d!12821 (= lt!26374 (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (=> d!12821 true))

(declare-fun _$33!48 () Unit!1689)

(assert (=> d!12821 (= (choose!338 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)) _$33!48)))

(declare-fun b!62976 () Bool)

(declare-fun res!34497 () Bool)

(assert (=> b!62976 (=> (not res!34497) (not e!41325))))

(assert (=> b!62976 (= res!34497 (inRange!0 (index!3082 lt!26374) (mask!5994 newMap!16)))))

(declare-fun b!62977 () Bool)

(assert (=> b!62977 (= e!41325 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26374)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (= (and d!12821 res!34496) b!62976))

(assert (= (and b!62976 res!34497) b!62977))

(assert (=> d!12821 m!55705))

(assert (=> d!12821 m!55909))

(declare-fun m!56595 () Bool)

(assert (=> b!62976 m!56595))

(declare-fun m!56597 () Bool)

(assert (=> b!62977 m!56597))

(assert (=> d!12639 d!12821))

(assert (=> d!12639 d!12795))

(declare-fun d!12823 () Bool)

(assert (=> d!12823 (arrayContainsKey!0 (_keys!3720 newMap!16) lt!26299 #b00000000000000000000000000000000)))

(declare-fun lt!26377 () Unit!1689)

(declare-fun choose!13 (array!3760 (_ BitVec 64) (_ BitVec 32)) Unit!1689)

(assert (=> d!12823 (= lt!26377 (choose!13 (_keys!3720 newMap!16) lt!26299 #b00000000000000000000000000000000))))

(assert (=> d!12823 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!12823 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3720 newMap!16) lt!26299 #b00000000000000000000000000000000) lt!26377)))

(declare-fun bs!2732 () Bool)

(assert (= bs!2732 d!12823))

(assert (=> bs!2732 m!56369))

(declare-fun m!56599 () Bool)

(assert (=> bs!2732 m!56599))

(assert (=> b!62842 d!12823))

(declare-fun d!12825 () Bool)

(declare-fun res!34498 () Bool)

(declare-fun e!41326 () Bool)

(assert (=> d!12825 (=> res!34498 e!41326)))

(assert (=> d!12825 (= res!34498 (= (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) lt!26299))))

(assert (=> d!12825 (= (arrayContainsKey!0 (_keys!3720 newMap!16) lt!26299 #b00000000000000000000000000000000) e!41326)))

(declare-fun b!62978 () Bool)

(declare-fun e!41327 () Bool)

(assert (=> b!62978 (= e!41326 e!41327)))

(declare-fun res!34499 () Bool)

(assert (=> b!62978 (=> (not res!34499) (not e!41327))))

(assert (=> b!62978 (= res!34499 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!62979 () Bool)

(assert (=> b!62979 (= e!41327 (arrayContainsKey!0 (_keys!3720 newMap!16) lt!26299 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12825 (not res!34498)) b!62978))

(assert (= (and b!62978 res!34499) b!62979))

(assert (=> d!12825 m!56007))

(declare-fun m!56601 () Bool)

(assert (=> b!62979 m!56601))

(assert (=> b!62842 d!12825))

(declare-fun b!62980 () Bool)

(declare-fun c!8459 () Bool)

(declare-fun lt!26378 () (_ BitVec 64))

(assert (=> b!62980 (= c!8459 (= lt!26378 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41330 () SeekEntryResult!239)

(declare-fun e!41329 () SeekEntryResult!239)

(assert (=> b!62980 (= e!41330 e!41329)))

(declare-fun b!62981 () Bool)

(declare-fun lt!26379 () SeekEntryResult!239)

(assert (=> b!62981 (= e!41329 (MissingZero!239 (index!3083 lt!26379)))))

(declare-fun b!62983 () Bool)

(declare-fun e!41328 () SeekEntryResult!239)

(assert (=> b!62983 (= e!41328 Undefined!239)))

(declare-fun b!62984 () Bool)

(assert (=> b!62984 (= e!41328 e!41330)))

(assert (=> b!62984 (= lt!26378 (select (arr!1798 (_keys!3720 newMap!16)) (index!3083 lt!26379)))))

(declare-fun c!8461 () Bool)

(assert (=> b!62984 (= c!8461 (= lt!26378 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62985 () Bool)

(assert (=> b!62985 (= e!41330 (Found!239 (index!3083 lt!26379)))))

(declare-fun d!12827 () Bool)

(declare-fun lt!26380 () SeekEntryResult!239)

(assert (=> d!12827 (and (or ((_ is Undefined!239) lt!26380) (not ((_ is Found!239) lt!26380)) (and (bvsge (index!3082 lt!26380) #b00000000000000000000000000000000) (bvslt (index!3082 lt!26380) (size!2030 (_keys!3720 newMap!16))))) (or ((_ is Undefined!239) lt!26380) ((_ is Found!239) lt!26380) (not ((_ is MissingZero!239) lt!26380)) (and (bvsge (index!3081 lt!26380) #b00000000000000000000000000000000) (bvslt (index!3081 lt!26380) (size!2030 (_keys!3720 newMap!16))))) (or ((_ is Undefined!239) lt!26380) ((_ is Found!239) lt!26380) ((_ is MissingZero!239) lt!26380) (not ((_ is MissingVacant!239) lt!26380)) (and (bvsge (index!3084 lt!26380) #b00000000000000000000000000000000) (bvslt (index!3084 lt!26380) (size!2030 (_keys!3720 newMap!16))))) (or ((_ is Undefined!239) lt!26380) (ite ((_ is Found!239) lt!26380) (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26380)) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!239) lt!26380) (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3081 lt!26380)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!239) lt!26380) (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3084 lt!26380)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12827 (= lt!26380 e!41328)))

(declare-fun c!8460 () Bool)

(assert (=> d!12827 (= c!8460 (and ((_ is Intermediate!239) lt!26379) (undefined!1051 lt!26379)))))

(assert (=> d!12827 (= lt!26379 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (mask!5994 newMap!16)) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (=> d!12827 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12827 (= (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (_keys!3720 newMap!16) (mask!5994 newMap!16)) lt!26380)))

(declare-fun b!62982 () Bool)

(assert (=> b!62982 (= e!41329 (seekKeyOrZeroReturnVacant!0 (x!10317 lt!26379) (index!3083 lt!26379) (index!3083 lt!26379) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (= (and d!12827 c!8460) b!62983))

(assert (= (and d!12827 (not c!8460)) b!62984))

(assert (= (and b!62984 c!8461) b!62985))

(assert (= (and b!62984 (not c!8461)) b!62980))

(assert (= (and b!62980 c!8459) b!62981))

(assert (= (and b!62980 (not c!8459)) b!62982))

(declare-fun m!56603 () Bool)

(assert (=> b!62984 m!56603))

(declare-fun m!56605 () Bool)

(assert (=> d!12827 m!56605))

(assert (=> d!12827 m!56007))

(declare-fun m!56607 () Bool)

(assert (=> d!12827 m!56607))

(assert (=> d!12827 m!56007))

(assert (=> d!12827 m!56605))

(declare-fun m!56609 () Bool)

(assert (=> d!12827 m!56609))

(declare-fun m!56611 () Bool)

(assert (=> d!12827 m!56611))

(assert (=> d!12827 m!55941))

(declare-fun m!56613 () Bool)

(assert (=> d!12827 m!56613))

(assert (=> b!62982 m!56007))

(declare-fun m!56615 () Bool)

(assert (=> b!62982 m!56615))

(assert (=> b!62842 d!12827))

(declare-fun d!12829 () Bool)

(assert (=> d!12829 (= (apply!68 (+!83 lt!26280 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16))) lt!26283) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!26280 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16)))) lt!26283)))))

(declare-fun bs!2733 () Bool)

(assert (= bs!2733 d!12829))

(declare-fun m!56617 () Bool)

(assert (=> bs!2733 m!56617))

(assert (=> bs!2733 m!56617))

(declare-fun m!56619 () Bool)

(assert (=> bs!2733 m!56619))

(assert (=> b!62823 d!12829))

(declare-fun d!12831 () Bool)

(assert (=> d!12831 (= (apply!68 lt!26273 lt!26272) (get!1100 (getValueByKey!125 (toList!710 lt!26273) lt!26272)))))

(declare-fun bs!2734 () Bool)

(assert (= bs!2734 d!12831))

(declare-fun m!56621 () Bool)

(assert (=> bs!2734 m!56621))

(assert (=> bs!2734 m!56621))

(declare-fun m!56623 () Bool)

(assert (=> bs!2734 m!56623))

(assert (=> b!62823 d!12831))

(declare-fun d!12833 () Bool)

(declare-fun e!41331 () Bool)

(assert (=> d!12833 e!41331))

(declare-fun res!34500 () Bool)

(assert (=> d!12833 (=> (not res!34500) (not e!41331))))

(declare-fun lt!26381 () ListLongMap!1389)

(assert (=> d!12833 (= res!34500 (contains!700 lt!26381 (_1!1043 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16)))))))

(declare-fun lt!26384 () List!1463)

(assert (=> d!12833 (= lt!26381 (ListLongMap!1390 lt!26384))))

(declare-fun lt!26383 () Unit!1689)

(declare-fun lt!26382 () Unit!1689)

(assert (=> d!12833 (= lt!26383 lt!26382)))

(assert (=> d!12833 (= (getValueByKey!125 lt!26384 (_1!1043 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16)))))))

(assert (=> d!12833 (= lt!26382 (lemmaContainsTupThenGetReturnValue!44 lt!26384 (_1!1043 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16)))))))

(assert (=> d!12833 (= lt!26384 (insertStrictlySorted!46 (toList!710 lt!26278) (_1!1043 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16)))))))

(assert (=> d!12833 (= (+!83 lt!26278 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16))) lt!26381)))

(declare-fun b!62986 () Bool)

(declare-fun res!34501 () Bool)

(assert (=> b!62986 (=> (not res!34501) (not e!41331))))

(assert (=> b!62986 (= res!34501 (= (getValueByKey!125 (toList!710 lt!26381) (_1!1043 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16))))))))

(declare-fun b!62987 () Bool)

(assert (=> b!62987 (= e!41331 (contains!703 (toList!710 lt!26381) (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16))))))

(assert (= (and d!12833 res!34500) b!62986))

(assert (= (and b!62986 res!34501) b!62987))

(declare-fun m!56625 () Bool)

(assert (=> d!12833 m!56625))

(declare-fun m!56627 () Bool)

(assert (=> d!12833 m!56627))

(declare-fun m!56629 () Bool)

(assert (=> d!12833 m!56629))

(declare-fun m!56631 () Bool)

(assert (=> d!12833 m!56631))

(declare-fun m!56633 () Bool)

(assert (=> b!62986 m!56633))

(declare-fun m!56635 () Bool)

(assert (=> b!62987 m!56635))

(assert (=> b!62823 d!12833))

(declare-fun d!12835 () Bool)

(declare-fun e!41332 () Bool)

(assert (=> d!12835 e!41332))

(declare-fun res!34502 () Bool)

(assert (=> d!12835 (=> (not res!34502) (not e!41332))))

(declare-fun lt!26385 () ListLongMap!1389)

(assert (=> d!12835 (= res!34502 (contains!700 lt!26385 (_1!1043 (tuple2!2067 lt!26282 (minValue!2000 newMap!16)))))))

(declare-fun lt!26388 () List!1463)

(assert (=> d!12835 (= lt!26385 (ListLongMap!1390 lt!26388))))

(declare-fun lt!26387 () Unit!1689)

(declare-fun lt!26386 () Unit!1689)

(assert (=> d!12835 (= lt!26387 lt!26386)))

(assert (=> d!12835 (= (getValueByKey!125 lt!26388 (_1!1043 (tuple2!2067 lt!26282 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26282 (minValue!2000 newMap!16)))))))

(assert (=> d!12835 (= lt!26386 (lemmaContainsTupThenGetReturnValue!44 lt!26388 (_1!1043 (tuple2!2067 lt!26282 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26282 (minValue!2000 newMap!16)))))))

(assert (=> d!12835 (= lt!26388 (insertStrictlySorted!46 (toList!710 lt!26276) (_1!1043 (tuple2!2067 lt!26282 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26282 (minValue!2000 newMap!16)))))))

(assert (=> d!12835 (= (+!83 lt!26276 (tuple2!2067 lt!26282 (minValue!2000 newMap!16))) lt!26385)))

(declare-fun b!62988 () Bool)

(declare-fun res!34503 () Bool)

(assert (=> b!62988 (=> (not res!34503) (not e!41332))))

(assert (=> b!62988 (= res!34503 (= (getValueByKey!125 (toList!710 lt!26385) (_1!1043 (tuple2!2067 lt!26282 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26282 (minValue!2000 newMap!16))))))))

(declare-fun b!62989 () Bool)

(assert (=> b!62989 (= e!41332 (contains!703 (toList!710 lt!26385) (tuple2!2067 lt!26282 (minValue!2000 newMap!16))))))

(assert (= (and d!12835 res!34502) b!62988))

(assert (= (and b!62988 res!34503) b!62989))

(declare-fun m!56637 () Bool)

(assert (=> d!12835 m!56637))

(declare-fun m!56639 () Bool)

(assert (=> d!12835 m!56639))

(declare-fun m!56641 () Bool)

(assert (=> d!12835 m!56641))

(declare-fun m!56643 () Bool)

(assert (=> d!12835 m!56643))

(declare-fun m!56645 () Bool)

(assert (=> b!62988 m!56645))

(declare-fun m!56647 () Bool)

(assert (=> b!62989 m!56647))

(assert (=> b!62823 d!12835))

(declare-fun d!12837 () Bool)

(assert (=> d!12837 (= (apply!68 (+!83 lt!26273 (tuple2!2067 lt!26279 (minValue!2000 newMap!16))) lt!26272) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!26273 (tuple2!2067 lt!26279 (minValue!2000 newMap!16)))) lt!26272)))))

(declare-fun bs!2735 () Bool)

(assert (= bs!2735 d!12837))

(declare-fun m!56649 () Bool)

(assert (=> bs!2735 m!56649))

(assert (=> bs!2735 m!56649))

(declare-fun m!56651 () Bool)

(assert (=> bs!2735 m!56651))

(assert (=> b!62823 d!12837))

(declare-fun d!12839 () Bool)

(declare-fun e!41334 () Bool)

(assert (=> d!12839 e!41334))

(declare-fun res!34504 () Bool)

(assert (=> d!12839 (=> res!34504 e!41334)))

(declare-fun lt!26389 () Bool)

(assert (=> d!12839 (= res!34504 (not lt!26389))))

(declare-fun lt!26392 () Bool)

(assert (=> d!12839 (= lt!26389 lt!26392)))

(declare-fun lt!26390 () Unit!1689)

(declare-fun e!41333 () Unit!1689)

(assert (=> d!12839 (= lt!26390 e!41333)))

(declare-fun c!8462 () Bool)

(assert (=> d!12839 (= c!8462 lt!26392)))

(assert (=> d!12839 (= lt!26392 (containsKey!129 (toList!710 (+!83 lt!26278 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16)))) lt!26288))))

(assert (=> d!12839 (= (contains!700 (+!83 lt!26278 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16))) lt!26288) lt!26389)))

(declare-fun b!62990 () Bool)

(declare-fun lt!26391 () Unit!1689)

(assert (=> b!62990 (= e!41333 lt!26391)))

(assert (=> b!62990 (= lt!26391 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 (+!83 lt!26278 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16)))) lt!26288))))

(assert (=> b!62990 (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!26278 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16)))) lt!26288))))

(declare-fun b!62991 () Bool)

(declare-fun Unit!1715 () Unit!1689)

(assert (=> b!62991 (= e!41333 Unit!1715)))

(declare-fun b!62992 () Bool)

(assert (=> b!62992 (= e!41334 (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!26278 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16)))) lt!26288)))))

(assert (= (and d!12839 c!8462) b!62990))

(assert (= (and d!12839 (not c!8462)) b!62991))

(assert (= (and d!12839 (not res!34504)) b!62992))

(declare-fun m!56653 () Bool)

(assert (=> d!12839 m!56653))

(declare-fun m!56655 () Bool)

(assert (=> b!62990 m!56655))

(declare-fun m!56657 () Bool)

(assert (=> b!62990 m!56657))

(assert (=> b!62990 m!56657))

(declare-fun m!56659 () Bool)

(assert (=> b!62990 m!56659))

(assert (=> b!62992 m!56657))

(assert (=> b!62992 m!56657))

(assert (=> b!62992 m!56659))

(assert (=> b!62823 d!12839))

(declare-fun d!12841 () Bool)

(assert (=> d!12841 (= (apply!68 lt!26276 lt!26285) (get!1100 (getValueByKey!125 (toList!710 lt!26276) lt!26285)))))

(declare-fun bs!2736 () Bool)

(assert (= bs!2736 d!12841))

(declare-fun m!56661 () Bool)

(assert (=> bs!2736 m!56661))

(assert (=> bs!2736 m!56661))

(declare-fun m!56663 () Bool)

(assert (=> bs!2736 m!56663))

(assert (=> b!62823 d!12841))

(declare-fun d!12843 () Bool)

(assert (=> d!12843 (= (apply!68 (+!83 lt!26273 (tuple2!2067 lt!26279 (minValue!2000 newMap!16))) lt!26272) (apply!68 lt!26273 lt!26272))))

(declare-fun lt!26393 () Unit!1689)

(assert (=> d!12843 (= lt!26393 (choose!342 lt!26273 lt!26279 (minValue!2000 newMap!16) lt!26272))))

(declare-fun e!41335 () Bool)

(assert (=> d!12843 e!41335))

(declare-fun res!34505 () Bool)

(assert (=> d!12843 (=> (not res!34505) (not e!41335))))

(assert (=> d!12843 (= res!34505 (contains!700 lt!26273 lt!26272))))

(assert (=> d!12843 (= (addApplyDifferent!44 lt!26273 lt!26279 (minValue!2000 newMap!16) lt!26272) lt!26393)))

(declare-fun b!62993 () Bool)

(assert (=> b!62993 (= e!41335 (not (= lt!26272 lt!26279)))))

(assert (= (and d!12843 res!34505) b!62993))

(assert (=> d!12843 m!56349))

(assert (=> d!12843 m!56353))

(declare-fun m!56665 () Bool)

(assert (=> d!12843 m!56665))

(assert (=> d!12843 m!56341))

(declare-fun m!56667 () Bool)

(assert (=> d!12843 m!56667))

(assert (=> d!12843 m!56349))

(assert (=> b!62823 d!12843))

(declare-fun d!12845 () Bool)

(assert (=> d!12845 (= (apply!68 lt!26280 lt!26283) (get!1100 (getValueByKey!125 (toList!710 lt!26280) lt!26283)))))

(declare-fun bs!2737 () Bool)

(assert (= bs!2737 d!12845))

(declare-fun m!56669 () Bool)

(assert (=> bs!2737 m!56669))

(assert (=> bs!2737 m!56669))

(declare-fun m!56671 () Bool)

(assert (=> bs!2737 m!56671))

(assert (=> b!62823 d!12845))

(declare-fun d!12847 () Bool)

(assert (=> d!12847 (= (apply!68 (+!83 lt!26276 (tuple2!2067 lt!26282 (minValue!2000 newMap!16))) lt!26285) (apply!68 lt!26276 lt!26285))))

(declare-fun lt!26394 () Unit!1689)

(assert (=> d!12847 (= lt!26394 (choose!342 lt!26276 lt!26282 (minValue!2000 newMap!16) lt!26285))))

(declare-fun e!41336 () Bool)

(assert (=> d!12847 e!41336))

(declare-fun res!34506 () Bool)

(assert (=> d!12847 (=> (not res!34506) (not e!41336))))

(assert (=> d!12847 (= res!34506 (contains!700 lt!26276 lt!26285))))

(assert (=> d!12847 (= (addApplyDifferent!44 lt!26276 lt!26282 (minValue!2000 newMap!16) lt!26285) lt!26394)))

(declare-fun b!62994 () Bool)

(assert (=> b!62994 (= e!41336 (not (= lt!26285 lt!26282)))))

(assert (= (and d!12847 res!34506) b!62994))

(assert (=> d!12847 m!56331))

(assert (=> d!12847 m!56333))

(declare-fun m!56673 () Bool)

(assert (=> d!12847 m!56673))

(assert (=> d!12847 m!56343))

(declare-fun m!56675 () Bool)

(assert (=> d!12847 m!56675))

(assert (=> d!12847 m!56331))

(assert (=> b!62823 d!12847))

(declare-fun d!12849 () Bool)

(declare-fun e!41337 () Bool)

(assert (=> d!12849 e!41337))

(declare-fun res!34507 () Bool)

(assert (=> d!12849 (=> (not res!34507) (not e!41337))))

(declare-fun lt!26395 () ListLongMap!1389)

(assert (=> d!12849 (= res!34507 (contains!700 lt!26395 (_1!1043 (tuple2!2067 lt!26279 (minValue!2000 newMap!16)))))))

(declare-fun lt!26398 () List!1463)

(assert (=> d!12849 (= lt!26395 (ListLongMap!1390 lt!26398))))

(declare-fun lt!26397 () Unit!1689)

(declare-fun lt!26396 () Unit!1689)

(assert (=> d!12849 (= lt!26397 lt!26396)))

(assert (=> d!12849 (= (getValueByKey!125 lt!26398 (_1!1043 (tuple2!2067 lt!26279 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26279 (minValue!2000 newMap!16)))))))

(assert (=> d!12849 (= lt!26396 (lemmaContainsTupThenGetReturnValue!44 lt!26398 (_1!1043 (tuple2!2067 lt!26279 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26279 (minValue!2000 newMap!16)))))))

(assert (=> d!12849 (= lt!26398 (insertStrictlySorted!46 (toList!710 lt!26273) (_1!1043 (tuple2!2067 lt!26279 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26279 (minValue!2000 newMap!16)))))))

(assert (=> d!12849 (= (+!83 lt!26273 (tuple2!2067 lt!26279 (minValue!2000 newMap!16))) lt!26395)))

(declare-fun b!62995 () Bool)

(declare-fun res!34508 () Bool)

(assert (=> b!62995 (=> (not res!34508) (not e!41337))))

(assert (=> b!62995 (= res!34508 (= (getValueByKey!125 (toList!710 lt!26395) (_1!1043 (tuple2!2067 lt!26279 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26279 (minValue!2000 newMap!16))))))))

(declare-fun b!62996 () Bool)

(assert (=> b!62996 (= e!41337 (contains!703 (toList!710 lt!26395) (tuple2!2067 lt!26279 (minValue!2000 newMap!16))))))

(assert (= (and d!12849 res!34507) b!62995))

(assert (= (and b!62995 res!34508) b!62996))

(declare-fun m!56677 () Bool)

(assert (=> d!12849 m!56677))

(declare-fun m!56679 () Bool)

(assert (=> d!12849 m!56679))

(declare-fun m!56681 () Bool)

(assert (=> d!12849 m!56681))

(declare-fun m!56683 () Bool)

(assert (=> d!12849 m!56683))

(declare-fun m!56685 () Bool)

(assert (=> b!62995 m!56685))

(declare-fun m!56687 () Bool)

(assert (=> b!62996 m!56687))

(assert (=> b!62823 d!12849))

(declare-fun d!12851 () Bool)

(declare-fun e!41338 () Bool)

(assert (=> d!12851 e!41338))

(declare-fun res!34509 () Bool)

(assert (=> d!12851 (=> (not res!34509) (not e!41338))))

(declare-fun lt!26399 () ListLongMap!1389)

(assert (=> d!12851 (= res!34509 (contains!700 lt!26399 (_1!1043 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16)))))))

(declare-fun lt!26402 () List!1463)

(assert (=> d!12851 (= lt!26399 (ListLongMap!1390 lt!26402))))

(declare-fun lt!26401 () Unit!1689)

(declare-fun lt!26400 () Unit!1689)

(assert (=> d!12851 (= lt!26401 lt!26400)))

(assert (=> d!12851 (= (getValueByKey!125 lt!26402 (_1!1043 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16)))))))

(assert (=> d!12851 (= lt!26400 (lemmaContainsTupThenGetReturnValue!44 lt!26402 (_1!1043 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16)))))))

(assert (=> d!12851 (= lt!26402 (insertStrictlySorted!46 (toList!710 lt!26280) (_1!1043 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16)))))))

(assert (=> d!12851 (= (+!83 lt!26280 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16))) lt!26399)))

(declare-fun b!62997 () Bool)

(declare-fun res!34510 () Bool)

(assert (=> b!62997 (=> (not res!34510) (not e!41338))))

(assert (=> b!62997 (= res!34510 (= (getValueByKey!125 (toList!710 lt!26399) (_1!1043 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16))))))))

(declare-fun b!62998 () Bool)

(assert (=> b!62998 (= e!41338 (contains!703 (toList!710 lt!26399) (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16))))))

(assert (= (and d!12851 res!34509) b!62997))

(assert (= (and b!62997 res!34510) b!62998))

(declare-fun m!56689 () Bool)

(assert (=> d!12851 m!56689))

(declare-fun m!56691 () Bool)

(assert (=> d!12851 m!56691))

(declare-fun m!56693 () Bool)

(assert (=> d!12851 m!56693))

(declare-fun m!56695 () Bool)

(assert (=> d!12851 m!56695))

(declare-fun m!56697 () Bool)

(assert (=> b!62997 m!56697))

(declare-fun m!56699 () Bool)

(assert (=> b!62998 m!56699))

(assert (=> b!62823 d!12851))

(declare-fun b!62999 () Bool)

(declare-fun e!41341 () Bool)

(declare-fun lt!26403 () ListLongMap!1389)

(assert (=> b!62999 (= e!41341 (isEmpty!304 lt!26403))))

(declare-fun d!12853 () Bool)

(declare-fun e!41344 () Bool)

(assert (=> d!12853 e!41344))

(declare-fun res!34514 () Bool)

(assert (=> d!12853 (=> (not res!34514) (not e!41344))))

(assert (=> d!12853 (= res!34514 (not (contains!700 lt!26403 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!41343 () ListLongMap!1389)

(assert (=> d!12853 (= lt!26403 e!41343)))

(declare-fun c!8466 () Bool)

(assert (=> d!12853 (= c!8466 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!12853 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12853 (= (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26403)))

(declare-fun b!63000 () Bool)

(assert (=> b!63000 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> b!63000 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_values!2071 newMap!16))))))

(declare-fun e!41345 () Bool)

(assert (=> b!63000 (= e!41345 (= (apply!68 lt!26403 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63001 () Bool)

(declare-fun e!41340 () ListLongMap!1389)

(assert (=> b!63001 (= e!41343 e!41340)))

(declare-fun c!8465 () Bool)

(assert (=> b!63001 (= c!8465 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63002 () Bool)

(declare-fun call!4965 () ListLongMap!1389)

(assert (=> b!63002 (= e!41340 call!4965)))

(declare-fun b!63003 () Bool)

(declare-fun e!41342 () Bool)

(assert (=> b!63003 (= e!41342 e!41341)))

(declare-fun c!8463 () Bool)

(assert (=> b!63003 (= c!8463 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63004 () Bool)

(assert (=> b!63004 (= e!41344 e!41342)))

(declare-fun c!8464 () Bool)

(declare-fun e!41339 () Bool)

(assert (=> b!63004 (= c!8464 e!41339)))

(declare-fun res!34511 () Bool)

(assert (=> b!63004 (=> (not res!34511) (not e!41339))))

(assert (=> b!63004 (= res!34511 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun bm!4962 () Bool)

(assert (=> bm!4962 (= call!4965 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16)))))

(declare-fun b!63005 () Bool)

(assert (=> b!63005 (= e!41343 (ListLongMap!1390 Nil!1460))))

(declare-fun b!63006 () Bool)

(assert (=> b!63006 (= e!41341 (= lt!26403 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16))))))

(declare-fun b!63007 () Bool)

(assert (=> b!63007 (= e!41342 e!41345)))

(assert (=> b!63007 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun res!34513 () Bool)

(assert (=> b!63007 (= res!34513 (contains!700 lt!26403 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63007 (=> (not res!34513) (not e!41345))))

(declare-fun b!63008 () Bool)

(assert (=> b!63008 (= e!41339 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63008 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!63009 () Bool)

(declare-fun lt!26409 () Unit!1689)

(declare-fun lt!26404 () Unit!1689)

(assert (=> b!63009 (= lt!26409 lt!26404)))

(declare-fun lt!26407 () V!2867)

(declare-fun lt!26406 () ListLongMap!1389)

(declare-fun lt!26405 () (_ BitVec 64))

(declare-fun lt!26408 () (_ BitVec 64))

(assert (=> b!63009 (not (contains!700 (+!83 lt!26406 (tuple2!2067 lt!26408 lt!26407)) lt!26405))))

(assert (=> b!63009 (= lt!26404 (addStillNotContains!19 lt!26406 lt!26408 lt!26407 lt!26405))))

(assert (=> b!63009 (= lt!26405 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63009 (= lt!26407 (get!1096 (select (arr!1799 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63009 (= lt!26408 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63009 (= lt!26406 call!4965)))

(assert (=> b!63009 (= e!41340 (+!83 call!4965 (tuple2!2067 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (get!1096 (select (arr!1799 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63010 () Bool)

(declare-fun res!34512 () Bool)

(assert (=> b!63010 (=> (not res!34512) (not e!41344))))

(assert (=> b!63010 (= res!34512 (not (contains!700 lt!26403 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12853 c!8466) b!63005))

(assert (= (and d!12853 (not c!8466)) b!63001))

(assert (= (and b!63001 c!8465) b!63009))

(assert (= (and b!63001 (not c!8465)) b!63002))

(assert (= (or b!63009 b!63002) bm!4962))

(assert (= (and d!12853 res!34514) b!63010))

(assert (= (and b!63010 res!34512) b!63004))

(assert (= (and b!63004 res!34511) b!63008))

(assert (= (and b!63004 c!8464) b!63007))

(assert (= (and b!63004 (not c!8464)) b!63003))

(assert (= (and b!63007 res!34513) b!63000))

(assert (= (and b!63003 c!8463) b!63006))

(assert (= (and b!63003 (not c!8463)) b!62999))

(declare-fun b_lambda!2817 () Bool)

(assert (=> (not b_lambda!2817) (not b!63000)))

(assert (=> b!63000 t!4870))

(declare-fun b_and!3841 () Bool)

(assert (= b_and!3837 (and (=> t!4870 result!2463) b_and!3841)))

(assert (=> b!63000 t!4872))

(declare-fun b_and!3843 () Bool)

(assert (= b_and!3839 (and (=> t!4872 result!2465) b_and!3843)))

(declare-fun b_lambda!2819 () Bool)

(assert (=> (not b_lambda!2819) (not b!63009)))

(assert (=> b!63009 t!4870))

(declare-fun b_and!3845 () Bool)

(assert (= b_and!3841 (and (=> t!4870 result!2463) b_and!3845)))

(assert (=> b!63009 t!4872))

(declare-fun b_and!3847 () Bool)

(assert (= b_and!3843 (and (=> t!4872 result!2465) b_and!3847)))

(assert (=> b!63007 m!56007))

(assert (=> b!63007 m!56007))

(declare-fun m!56701 () Bool)

(assert (=> b!63007 m!56701))

(declare-fun m!56703 () Bool)

(assert (=> b!63010 m!56703))

(declare-fun m!56705 () Bool)

(assert (=> b!62999 m!56705))

(declare-fun m!56707 () Bool)

(assert (=> bm!4962 m!56707))

(assert (=> b!63008 m!56007))

(assert (=> b!63008 m!56007))

(assert (=> b!63008 m!56009))

(assert (=> b!63001 m!56007))

(assert (=> b!63001 m!56007))

(assert (=> b!63001 m!56009))

(assert (=> b!63000 m!56361))

(assert (=> b!63000 m!56361))

(assert (=> b!63000 m!56259))

(assert (=> b!63000 m!56363))

(assert (=> b!63000 m!56007))

(declare-fun m!56709 () Bool)

(assert (=> b!63000 m!56709))

(assert (=> b!63000 m!56259))

(assert (=> b!63000 m!56007))

(declare-fun m!56711 () Bool)

(assert (=> d!12853 m!56711))

(assert (=> d!12853 m!55941))

(assert (=> b!63006 m!56707))

(declare-fun m!56713 () Bool)

(assert (=> b!63009 m!56713))

(assert (=> b!63009 m!56361))

(declare-fun m!56715 () Bool)

(assert (=> b!63009 m!56715))

(declare-fun m!56717 () Bool)

(assert (=> b!63009 m!56717))

(assert (=> b!63009 m!56361))

(assert (=> b!63009 m!56259))

(assert (=> b!63009 m!56363))

(assert (=> b!63009 m!56715))

(declare-fun m!56719 () Bool)

(assert (=> b!63009 m!56719))

(assert (=> b!63009 m!56259))

(assert (=> b!63009 m!56007))

(assert (=> b!62823 d!12853))

(declare-fun d!12855 () Bool)

(assert (=> d!12855 (= (apply!68 (+!83 lt!26280 (tuple2!2067 lt!26290 (zeroValue!2000 newMap!16))) lt!26283) (apply!68 lt!26280 lt!26283))))

(declare-fun lt!26410 () Unit!1689)

(assert (=> d!12855 (= lt!26410 (choose!342 lt!26280 lt!26290 (zeroValue!2000 newMap!16) lt!26283))))

(declare-fun e!41346 () Bool)

(assert (=> d!12855 e!41346))

(declare-fun res!34515 () Bool)

(assert (=> d!12855 (=> (not res!34515) (not e!41346))))

(assert (=> d!12855 (= res!34515 (contains!700 lt!26280 lt!26283))))

(assert (=> d!12855 (= (addApplyDifferent!44 lt!26280 lt!26290 (zeroValue!2000 newMap!16) lt!26283) lt!26410)))

(declare-fun b!63011 () Bool)

(assert (=> b!63011 (= e!41346 (not (= lt!26283 lt!26290)))))

(assert (= (and d!12855 res!34515) b!63011))

(assert (=> d!12855 m!56325))

(assert (=> d!12855 m!56327))

(declare-fun m!56721 () Bool)

(assert (=> d!12855 m!56721))

(assert (=> d!12855 m!56335))

(declare-fun m!56723 () Bool)

(assert (=> d!12855 m!56723))

(assert (=> d!12855 m!56325))

(assert (=> b!62823 d!12855))

(declare-fun d!12857 () Bool)

(assert (=> d!12857 (= (apply!68 (+!83 lt!26276 (tuple2!2067 lt!26282 (minValue!2000 newMap!16))) lt!26285) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!26276 (tuple2!2067 lt!26282 (minValue!2000 newMap!16)))) lt!26285)))))

(declare-fun bs!2738 () Bool)

(assert (= bs!2738 d!12857))

(declare-fun m!56725 () Bool)

(assert (=> bs!2738 m!56725))

(assert (=> bs!2738 m!56725))

(declare-fun m!56727 () Bool)

(assert (=> bs!2738 m!56727))

(assert (=> b!62823 d!12857))

(declare-fun d!12859 () Bool)

(assert (=> d!12859 (contains!700 (+!83 lt!26278 (tuple2!2067 lt!26291 (zeroValue!2000 newMap!16))) lt!26288)))

(declare-fun lt!26411 () Unit!1689)

(assert (=> d!12859 (= lt!26411 (choose!341 lt!26278 lt!26291 (zeroValue!2000 newMap!16) lt!26288))))

(assert (=> d!12859 (contains!700 lt!26278 lt!26288)))

(assert (=> d!12859 (= (addStillContains!44 lt!26278 lt!26291 (zeroValue!2000 newMap!16) lt!26288) lt!26411)))

(declare-fun bs!2739 () Bool)

(assert (= bs!2739 d!12859))

(assert (=> bs!2739 m!56337))

(assert (=> bs!2739 m!56337))

(assert (=> bs!2739 m!56351))

(declare-fun m!56729 () Bool)

(assert (=> bs!2739 m!56729))

(declare-fun m!56731 () Bool)

(assert (=> bs!2739 m!56731))

(assert (=> b!62823 d!12859))

(declare-fun d!12861 () Bool)

(assert (=> d!12861 (= (inRange!0 (index!3082 lt!26041) (mask!5994 newMap!16)) (and (bvsge (index!3082 lt!26041) #b00000000000000000000000000000000) (bvslt (index!3082 lt!26041) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!62554 d!12861))

(declare-fun d!12863 () Bool)

(declare-fun res!34516 () Bool)

(declare-fun e!41347 () Bool)

(assert (=> d!12863 (=> res!34516 e!41347)))

(assert (=> d!12863 (= res!34516 (= (select (arr!1798 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!12863 (= (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!41347)))

(declare-fun b!63012 () Bool)

(declare-fun e!41348 () Bool)

(assert (=> b!63012 (= e!41347 e!41348)))

(declare-fun res!34517 () Bool)

(assert (=> b!63012 (=> (not res!34517) (not e!41348))))

(assert (=> b!63012 (= res!34517 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63013 () Bool)

(assert (=> b!63013 (= e!41348 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12863 (not res!34516)) b!63012))

(assert (= (and b!63012 res!34517) b!63013))

(assert (=> d!12863 m!56575))

(assert (=> b!63013 m!55705))

(declare-fun m!56733 () Bool)

(assert (=> b!63013 m!56733))

(assert (=> b!62892 d!12863))

(assert (=> b!62778 d!12775))

(declare-fun c!8467 () Bool)

(declare-fun d!12865 () Bool)

(assert (=> d!12865 (= c!8467 (and ((_ is Cons!1459) (toList!710 lt!26123)) (= (_1!1043 (h!2042 (toList!710 lt!26123))) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun e!41349 () Option!131)

(assert (=> d!12865 (= (getValueByKey!125 (toList!710 lt!26123) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) e!41349)))

(declare-fun b!63016 () Bool)

(declare-fun e!41350 () Option!131)

(assert (=> b!63016 (= e!41350 (getValueByKey!125 (t!4861 (toList!710 lt!26123)) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63017 () Bool)

(assert (=> b!63017 (= e!41350 None!129)))

(declare-fun b!63015 () Bool)

(assert (=> b!63015 (= e!41349 e!41350)))

(declare-fun c!8468 () Bool)

(assert (=> b!63015 (= c!8468 (and ((_ is Cons!1459) (toList!710 lt!26123)) (not (= (_1!1043 (h!2042 (toList!710 lt!26123))) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun b!63014 () Bool)

(assert (=> b!63014 (= e!41349 (Some!130 (_2!1043 (h!2042 (toList!710 lt!26123)))))))

(assert (= (and d!12865 c!8467) b!63014))

(assert (= (and d!12865 (not c!8467)) b!63015))

(assert (= (and b!63015 c!8468) b!63016))

(assert (= (and b!63015 (not c!8468)) b!63017))

(declare-fun m!56735 () Bool)

(assert (=> b!63016 m!56735))

(assert (=> b!62698 d!12865))

(assert (=> b!62879 d!12775))

(assert (=> d!12683 d!12693))

(assert (=> d!12683 d!12701))

(declare-fun d!12867 () Bool)

(assert (=> d!12867 (contains!700 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25931)))

(assert (=> d!12867 true))

(declare-fun _$35!306 () Unit!1689)

(assert (=> d!12867 (= (choose!341 lt!25921 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25931) _$35!306)))

(declare-fun bs!2740 () Bool)

(assert (= bs!2740 d!12867))

(assert (=> bs!2740 m!55817))

(assert (=> bs!2740 m!55817))

(assert (=> bs!2740 m!55831))

(assert (=> d!12683 d!12867))

(declare-fun d!12869 () Bool)

(declare-fun e!41352 () Bool)

(assert (=> d!12869 e!41352))

(declare-fun res!34518 () Bool)

(assert (=> d!12869 (=> res!34518 e!41352)))

(declare-fun lt!26412 () Bool)

(assert (=> d!12869 (= res!34518 (not lt!26412))))

(declare-fun lt!26415 () Bool)

(assert (=> d!12869 (= lt!26412 lt!26415)))

(declare-fun lt!26413 () Unit!1689)

(declare-fun e!41351 () Unit!1689)

(assert (=> d!12869 (= lt!26413 e!41351)))

(declare-fun c!8469 () Bool)

(assert (=> d!12869 (= c!8469 lt!26415)))

(assert (=> d!12869 (= lt!26415 (containsKey!129 (toList!710 lt!25921) lt!25931))))

(assert (=> d!12869 (= (contains!700 lt!25921 lt!25931) lt!26412)))

(declare-fun b!63019 () Bool)

(declare-fun lt!26414 () Unit!1689)

(assert (=> b!63019 (= e!41351 lt!26414)))

(assert (=> b!63019 (= lt!26414 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25921) lt!25931))))

(assert (=> b!63019 (isDefined!79 (getValueByKey!125 (toList!710 lt!25921) lt!25931))))

(declare-fun b!63020 () Bool)

(declare-fun Unit!1716 () Unit!1689)

(assert (=> b!63020 (= e!41351 Unit!1716)))

(declare-fun b!63021 () Bool)

(assert (=> b!63021 (= e!41352 (isDefined!79 (getValueByKey!125 (toList!710 lt!25921) lt!25931)))))

(assert (= (and d!12869 c!8469) b!63019))

(assert (= (and d!12869 (not c!8469)) b!63020))

(assert (= (and d!12869 (not res!34518)) b!63021))

(declare-fun m!56737 () Bool)

(assert (=> d!12869 m!56737))

(declare-fun m!56739 () Bool)

(assert (=> b!63019 m!56739))

(declare-fun m!56741 () Bool)

(assert (=> b!63019 m!56741))

(assert (=> b!63019 m!56741))

(declare-fun m!56743 () Bool)

(assert (=> b!63019 m!56743))

(assert (=> b!63021 m!56741))

(assert (=> b!63021 m!56741))

(assert (=> b!63021 m!56743))

(assert (=> d!12683 d!12869))

(declare-fun d!12871 () Bool)

(assert (=> d!12871 (= (apply!68 lt!26066 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1100 (getValueByKey!125 (toList!710 lt!26066) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2741 () Bool)

(assert (= bs!2741 d!12871))

(assert (=> bs!2741 m!55795))

(assert (=> bs!2741 m!56591))

(assert (=> bs!2741 m!56591))

(declare-fun m!56745 () Bool)

(assert (=> bs!2741 m!56745))

(assert (=> b!62604 d!12871))

(assert (=> b!62604 d!12735))

(declare-fun d!12873 () Bool)

(assert (=> d!12873 (= (get!1100 (getValueByKey!125 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2423 (getValueByKey!125 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12747 d!12873))

(declare-fun d!12875 () Bool)

(declare-fun c!8470 () Bool)

(assert (=> d!12875 (= c!8470 (and ((_ is Cons!1459) (toList!710 lt!25929)) (= (_1!1043 (h!2042 (toList!710 lt!25929))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!41353 () Option!131)

(assert (=> d!12875 (= (getValueByKey!125 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000) e!41353)))

(declare-fun b!63024 () Bool)

(declare-fun e!41354 () Option!131)

(assert (=> b!63024 (= e!41354 (getValueByKey!125 (t!4861 (toList!710 lt!25929)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63025 () Bool)

(assert (=> b!63025 (= e!41354 None!129)))

(declare-fun b!63023 () Bool)

(assert (=> b!63023 (= e!41353 e!41354)))

(declare-fun c!8471 () Bool)

(assert (=> b!63023 (= c!8471 (and ((_ is Cons!1459) (toList!710 lt!25929)) (not (= (_1!1043 (h!2042 (toList!710 lt!25929))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63022 () Bool)

(assert (=> b!63022 (= e!41353 (Some!130 (_2!1043 (h!2042 (toList!710 lt!25929)))))))

(assert (= (and d!12875 c!8470) b!63022))

(assert (= (and d!12875 (not c!8470)) b!63023))

(assert (= (and b!63023 c!8471) b!63024))

(assert (= (and b!63023 (not c!8471)) b!63025))

(declare-fun m!56747 () Bool)

(assert (=> b!63024 m!56747))

(assert (=> d!12747 d!12875))

(declare-fun d!12877 () Bool)

(declare-fun c!8472 () Bool)

(assert (=> d!12877 (= c!8472 (and ((_ is Cons!1459) (toList!710 lt!26101)) (= (_1!1043 (h!2042 (toList!710 lt!26101))) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!41355 () Option!131)

(assert (=> d!12877 (= (getValueByKey!125 (toList!710 lt!26101) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!41355)))

(declare-fun e!41356 () Option!131)

(declare-fun b!63028 () Bool)

(assert (=> b!63028 (= e!41356 (getValueByKey!125 (t!4861 (toList!710 lt!26101)) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63029 () Bool)

(assert (=> b!63029 (= e!41356 None!129)))

(declare-fun b!63027 () Bool)

(assert (=> b!63027 (= e!41355 e!41356)))

(declare-fun c!8473 () Bool)

(assert (=> b!63027 (= c!8473 (and ((_ is Cons!1459) (toList!710 lt!26101)) (not (= (_1!1043 (h!2042 (toList!710 lt!26101))) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!63026 () Bool)

(assert (=> b!63026 (= e!41355 (Some!130 (_2!1043 (h!2042 (toList!710 lt!26101)))))))

(assert (= (and d!12877 c!8472) b!63026))

(assert (= (and d!12877 (not c!8472)) b!63027))

(assert (= (and b!63027 c!8473) b!63028))

(assert (= (and b!63027 (not c!8473)) b!63029))

(declare-fun m!56749 () Bool)

(assert (=> b!63028 m!56749))

(assert (=> b!62685 d!12877))

(declare-fun d!12879 () Bool)

(declare-fun e!41358 () Bool)

(assert (=> d!12879 e!41358))

(declare-fun res!34519 () Bool)

(assert (=> d!12879 (=> res!34519 e!41358)))

(declare-fun lt!26416 () Bool)

(assert (=> d!12879 (= res!34519 (not lt!26416))))

(declare-fun lt!26419 () Bool)

(assert (=> d!12879 (= lt!26416 lt!26419)))

(declare-fun lt!26417 () Unit!1689)

(declare-fun e!41357 () Unit!1689)

(assert (=> d!12879 (= lt!26417 e!41357)))

(declare-fun c!8474 () Bool)

(assert (=> d!12879 (= c!8474 lt!26419)))

(assert (=> d!12879 (= lt!26419 (containsKey!129 (toList!710 lt!26109) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!12879 (= (contains!700 lt!26109 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26416)))

(declare-fun b!63030 () Bool)

(declare-fun lt!26418 () Unit!1689)

(assert (=> b!63030 (= e!41357 lt!26418)))

(assert (=> b!63030 (= lt!26418 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26109) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> b!63030 (isDefined!79 (getValueByKey!125 (toList!710 lt!26109) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63031 () Bool)

(declare-fun Unit!1717 () Unit!1689)

(assert (=> b!63031 (= e!41357 Unit!1717)))

(declare-fun b!63032 () Bool)

(assert (=> b!63032 (= e!41358 (isDefined!79 (getValueByKey!125 (toList!710 lt!26109) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!12879 c!8474) b!63030))

(assert (= (and d!12879 (not c!8474)) b!63031))

(assert (= (and d!12879 (not res!34519)) b!63032))

(declare-fun m!56751 () Bool)

(assert (=> d!12879 m!56751))

(declare-fun m!56753 () Bool)

(assert (=> b!63030 m!56753))

(assert (=> b!63030 m!56069))

(assert (=> b!63030 m!56069))

(declare-fun m!56755 () Bool)

(assert (=> b!63030 m!56755))

(assert (=> b!63032 m!56069))

(assert (=> b!63032 m!56069))

(assert (=> b!63032 m!56755))

(assert (=> d!12679 d!12879))

(declare-fun d!12881 () Bool)

(declare-fun c!8475 () Bool)

(assert (=> d!12881 (= c!8475 (and ((_ is Cons!1459) lt!26112) (= (_1!1043 (h!2042 lt!26112)) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun e!41359 () Option!131)

(assert (=> d!12881 (= (getValueByKey!125 lt!26112 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) e!41359)))

(declare-fun b!63035 () Bool)

(declare-fun e!41360 () Option!131)

(assert (=> b!63035 (= e!41360 (getValueByKey!125 (t!4861 lt!26112) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63036 () Bool)

(assert (=> b!63036 (= e!41360 None!129)))

(declare-fun b!63034 () Bool)

(assert (=> b!63034 (= e!41359 e!41360)))

(declare-fun c!8476 () Bool)

(assert (=> b!63034 (= c!8476 (and ((_ is Cons!1459) lt!26112) (not (= (_1!1043 (h!2042 lt!26112)) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun b!63033 () Bool)

(assert (=> b!63033 (= e!41359 (Some!130 (_2!1043 (h!2042 lt!26112))))))

(assert (= (and d!12881 c!8475) b!63033))

(assert (= (and d!12881 (not c!8475)) b!63034))

(assert (= (and b!63034 c!8476) b!63035))

(assert (= (and b!63034 (not c!8476)) b!63036))

(declare-fun m!56757 () Bool)

(assert (=> b!63035 m!56757))

(assert (=> d!12679 d!12881))

(declare-fun d!12883 () Bool)

(assert (=> d!12883 (= (getValueByKey!125 lt!26112 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun lt!26422 () Unit!1689)

(declare-fun choose!348 (List!1463 (_ BitVec 64) V!2867) Unit!1689)

(assert (=> d!12883 (= lt!26422 (choose!348 lt!26112 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun e!41363 () Bool)

(assert (=> d!12883 e!41363))

(declare-fun res!34524 () Bool)

(assert (=> d!12883 (=> (not res!34524) (not e!41363))))

(assert (=> d!12883 (= res!34524 (isStrictlySorted!281 lt!26112))))

(assert (=> d!12883 (= (lemmaContainsTupThenGetReturnValue!44 lt!26112 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26422)))

(declare-fun b!63041 () Bool)

(declare-fun res!34525 () Bool)

(assert (=> b!63041 (=> (not res!34525) (not e!41363))))

(assert (=> b!63041 (= res!34525 (containsKey!129 lt!26112 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63042 () Bool)

(assert (=> b!63042 (= e!41363 (contains!703 lt!26112 (tuple2!2067 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!12883 res!34524) b!63041))

(assert (= (and b!63041 res!34525) b!63042))

(assert (=> d!12883 m!56063))

(declare-fun m!56759 () Bool)

(assert (=> d!12883 m!56759))

(declare-fun m!56761 () Bool)

(assert (=> d!12883 m!56761))

(declare-fun m!56763 () Bool)

(assert (=> b!63041 m!56763))

(declare-fun m!56765 () Bool)

(assert (=> b!63042 m!56765))

(assert (=> d!12679 d!12883))

(declare-fun b!63063 () Bool)

(declare-fun e!41375 () List!1463)

(declare-fun call!4974 () List!1463)

(assert (=> b!63063 (= e!41375 call!4974)))

(declare-fun bm!4969 () Bool)

(declare-fun e!41374 () List!1463)

(declare-fun c!8488 () Bool)

(declare-fun $colon$colon!61 (List!1463 tuple2!2066) List!1463)

(assert (=> bm!4969 (= call!4974 ($colon$colon!61 e!41374 (ite c!8488 (h!2042 (toList!710 lt!25916)) (tuple2!2067 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun c!8485 () Bool)

(assert (=> bm!4969 (= c!8485 c!8488)))

(declare-fun b!63064 () Bool)

(declare-fun e!41376 () List!1463)

(declare-fun call!4973 () List!1463)

(assert (=> b!63064 (= e!41376 call!4973)))

(declare-fun bm!4970 () Bool)

(declare-fun call!4972 () List!1463)

(assert (=> bm!4970 (= call!4973 call!4972)))

(declare-fun b!63065 () Bool)

(declare-fun e!41377 () List!1463)

(assert (=> b!63065 (= e!41375 e!41377)))

(declare-fun c!8486 () Bool)

(assert (=> b!63065 (= c!8486 (and ((_ is Cons!1459) (toList!710 lt!25916)) (= (_1!1043 (h!2042 (toList!710 lt!25916))) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!63067 () Bool)

(declare-fun c!8487 () Bool)

(assert (=> b!63067 (= e!41374 (ite c!8486 (t!4861 (toList!710 lt!25916)) (ite c!8487 (Cons!1459 (h!2042 (toList!710 lt!25916)) (t!4861 (toList!710 lt!25916))) Nil!1460)))))

(declare-fun b!63068 () Bool)

(assert (=> b!63068 (= e!41376 call!4973)))

(declare-fun bm!4971 () Bool)

(assert (=> bm!4971 (= call!4972 call!4974)))

(declare-fun b!63069 () Bool)

(assert (=> b!63069 (= e!41374 (insertStrictlySorted!46 (t!4861 (toList!710 lt!25916)) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63070 () Bool)

(assert (=> b!63070 (= c!8487 (and ((_ is Cons!1459) (toList!710 lt!25916)) (bvsgt (_1!1043 (h!2042 (toList!710 lt!25916))) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> b!63070 (= e!41377 e!41376)))

(declare-fun b!63066 () Bool)

(declare-fun res!34531 () Bool)

(declare-fun e!41378 () Bool)

(assert (=> b!63066 (=> (not res!34531) (not e!41378))))

(declare-fun lt!26425 () List!1463)

(assert (=> b!63066 (= res!34531 (containsKey!129 lt!26425 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun d!12885 () Bool)

(assert (=> d!12885 e!41378))

(declare-fun res!34530 () Bool)

(assert (=> d!12885 (=> (not res!34530) (not e!41378))))

(assert (=> d!12885 (= res!34530 (isStrictlySorted!281 lt!26425))))

(assert (=> d!12885 (= lt!26425 e!41375)))

(assert (=> d!12885 (= c!8488 (and ((_ is Cons!1459) (toList!710 lt!25916)) (bvslt (_1!1043 (h!2042 (toList!710 lt!25916))) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> d!12885 (isStrictlySorted!281 (toList!710 lt!25916))))

(assert (=> d!12885 (= (insertStrictlySorted!46 (toList!710 lt!25916) (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26425)))

(declare-fun b!63071 () Bool)

(assert (=> b!63071 (= e!41377 call!4972)))

(declare-fun b!63072 () Bool)

(assert (=> b!63072 (= e!41378 (contains!703 lt!26425 (tuple2!2067 (_1!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!12885 c!8488) b!63063))

(assert (= (and d!12885 (not c!8488)) b!63065))

(assert (= (and b!63065 c!8486) b!63071))

(assert (= (and b!63065 (not c!8486)) b!63070))

(assert (= (and b!63070 c!8487) b!63068))

(assert (= (and b!63070 (not c!8487)) b!63064))

(assert (= (or b!63068 b!63064) bm!4970))

(assert (= (or b!63071 bm!4970) bm!4971))

(assert (= (or b!63063 bm!4971) bm!4969))

(assert (= (and bm!4969 c!8485) b!63069))

(assert (= (and bm!4969 (not c!8485)) b!63067))

(assert (= (and d!12885 res!34530) b!63066))

(assert (= (and b!63066 res!34531) b!63072))

(declare-fun m!56767 () Bool)

(assert (=> b!63072 m!56767))

(declare-fun m!56769 () Bool)

(assert (=> d!12885 m!56769))

(declare-fun m!56771 () Bool)

(assert (=> d!12885 m!56771))

(declare-fun m!56773 () Bool)

(assert (=> b!63069 m!56773))

(declare-fun m!56775 () Bool)

(assert (=> b!63066 m!56775))

(declare-fun m!56777 () Bool)

(assert (=> bm!4969 m!56777))

(assert (=> d!12679 d!12885))

(assert (=> d!12719 d!12795))

(assert (=> bm!4945 d!12853))

(declare-fun d!12887 () Bool)

(declare-fun e!41380 () Bool)

(assert (=> d!12887 e!41380))

(declare-fun res!34532 () Bool)

(assert (=> d!12887 (=> res!34532 e!41380)))

(declare-fun lt!26426 () Bool)

(assert (=> d!12887 (= res!34532 (not lt!26426))))

(declare-fun lt!26429 () Bool)

(assert (=> d!12887 (= lt!26426 lt!26429)))

(declare-fun lt!26427 () Unit!1689)

(declare-fun e!41379 () Unit!1689)

(assert (=> d!12887 (= lt!26427 e!41379)))

(declare-fun c!8489 () Bool)

(assert (=> d!12887 (= c!8489 lt!26429)))

(assert (=> d!12887 (= lt!26429 (containsKey!129 (toList!710 (map!1119 (_2!1044 lt!26197))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!12887 (= (contains!700 (map!1119 (_2!1044 lt!26197)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) lt!26426)))

(declare-fun b!63073 () Bool)

(declare-fun lt!26428 () Unit!1689)

(assert (=> b!63073 (= e!41379 lt!26428)))

(assert (=> b!63073 (= lt!26428 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 (map!1119 (_2!1044 lt!26197))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> b!63073 (isDefined!79 (getValueByKey!125 (toList!710 (map!1119 (_2!1044 lt!26197))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!63074 () Bool)

(declare-fun Unit!1718 () Unit!1689)

(assert (=> b!63074 (= e!41379 Unit!1718)))

(declare-fun b!63075 () Bool)

(assert (=> b!63075 (= e!41380 (isDefined!79 (getValueByKey!125 (toList!710 (map!1119 (_2!1044 lt!26197))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(assert (= (and d!12887 c!8489) b!63073))

(assert (= (and d!12887 (not c!8489)) b!63074))

(assert (= (and d!12887 (not res!34532)) b!63075))

(assert (=> d!12887 m!55705))

(declare-fun m!56779 () Bool)

(assert (=> d!12887 m!56779))

(assert (=> b!63073 m!55705))

(declare-fun m!56781 () Bool)

(assert (=> b!63073 m!56781))

(assert (=> b!63073 m!55705))

(declare-fun m!56783 () Bool)

(assert (=> b!63073 m!56783))

(assert (=> b!63073 m!56783))

(declare-fun m!56785 () Bool)

(assert (=> b!63073 m!56785))

(assert (=> b!63075 m!55705))

(assert (=> b!63075 m!56783))

(assert (=> b!63075 m!56783))

(assert (=> b!63075 m!56785))

(assert (=> b!62754 d!12887))

(assert (=> b!62754 d!12783))

(declare-fun d!12889 () Bool)

(assert (=> d!12889 (= (get!1100 (getValueByKey!125 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2423 (getValueByKey!125 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12763 d!12889))

(declare-fun d!12891 () Bool)

(declare-fun c!8490 () Bool)

(assert (=> d!12891 (= c!8490 (and ((_ is Cons!1459) (toList!710 lt!25929)) (= (_1!1043 (h!2042 (toList!710 lt!25929))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!41381 () Option!131)

(assert (=> d!12891 (= (getValueByKey!125 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000) e!41381)))

(declare-fun b!63078 () Bool)

(declare-fun e!41382 () Option!131)

(assert (=> b!63078 (= e!41382 (getValueByKey!125 (t!4861 (toList!710 lt!25929)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63079 () Bool)

(assert (=> b!63079 (= e!41382 None!129)))

(declare-fun b!63077 () Bool)

(assert (=> b!63077 (= e!41381 e!41382)))

(declare-fun c!8491 () Bool)

(assert (=> b!63077 (= c!8491 (and ((_ is Cons!1459) (toList!710 lt!25929)) (not (= (_1!1043 (h!2042 (toList!710 lt!25929))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63076 () Bool)

(assert (=> b!63076 (= e!41381 (Some!130 (_2!1043 (h!2042 (toList!710 lt!25929)))))))

(assert (= (and d!12891 c!8490) b!63076))

(assert (= (and d!12891 (not c!8490)) b!63077))

(assert (= (and b!63077 c!8491) b!63078))

(assert (= (and b!63077 (not c!8491)) b!63079))

(declare-fun m!56787 () Bool)

(assert (=> b!63078 m!56787))

(assert (=> d!12763 d!12891))

(declare-fun d!12893 () Bool)

(declare-fun e!41384 () Bool)

(assert (=> d!12893 e!41384))

(declare-fun res!34533 () Bool)

(assert (=> d!12893 (=> res!34533 e!41384)))

(declare-fun lt!26430 () Bool)

(assert (=> d!12893 (= res!34533 (not lt!26430))))

(declare-fun lt!26433 () Bool)

(assert (=> d!12893 (= lt!26430 lt!26433)))

(declare-fun lt!26431 () Unit!1689)

(declare-fun e!41383 () Unit!1689)

(assert (=> d!12893 (= lt!26431 e!41383)))

(declare-fun c!8492 () Bool)

(assert (=> d!12893 (= c!8492 lt!26433)))

(assert (=> d!12893 (= lt!26433 (containsKey!129 (toList!710 lt!26321) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12893 (= (contains!700 lt!26321 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26430)))

(declare-fun b!63080 () Bool)

(declare-fun lt!26432 () Unit!1689)

(assert (=> b!63080 (= e!41383 lt!26432)))

(assert (=> b!63080 (= lt!26432 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26321) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63080 (isDefined!79 (getValueByKey!125 (toList!710 lt!26321) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63081 () Bool)

(declare-fun Unit!1719 () Unit!1689)

(assert (=> b!63081 (= e!41383 Unit!1719)))

(declare-fun b!63082 () Bool)

(assert (=> b!63082 (= e!41384 (isDefined!79 (getValueByKey!125 (toList!710 lt!26321) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12893 c!8492) b!63080))

(assert (= (and d!12893 (not c!8492)) b!63081))

(assert (= (and d!12893 (not res!34533)) b!63082))

(declare-fun m!56789 () Bool)

(assert (=> d!12893 m!56789))

(declare-fun m!56791 () Bool)

(assert (=> b!63080 m!56791))

(declare-fun m!56793 () Bool)

(assert (=> b!63080 m!56793))

(assert (=> b!63080 m!56793))

(declare-fun m!56795 () Bool)

(assert (=> b!63080 m!56795))

(assert (=> b!63082 m!56793))

(assert (=> b!63082 m!56793))

(assert (=> b!63082 m!56795))

(assert (=> bm!4951 d!12893))

(assert (=> b!62679 d!12615))

(declare-fun d!12895 () Bool)

(declare-fun lt!26436 () Bool)

(declare-fun content!67 (List!1463) (InoxSet tuple2!2066))

(assert (=> d!12895 (= lt!26436 (select (content!67 (toList!710 lt!26256)) (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun e!41390 () Bool)

(assert (=> d!12895 (= lt!26436 e!41390)))

(declare-fun res!34539 () Bool)

(assert (=> d!12895 (=> (not res!34539) (not e!41390))))

(assert (=> d!12895 (= res!34539 ((_ is Cons!1459) (toList!710 lt!26256)))))

(assert (=> d!12895 (= (contains!703 (toList!710 lt!26256) (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26436)))

(declare-fun b!63087 () Bool)

(declare-fun e!41389 () Bool)

(assert (=> b!63087 (= e!41390 e!41389)))

(declare-fun res!34538 () Bool)

(assert (=> b!63087 (=> res!34538 e!41389)))

(assert (=> b!63087 (= res!34538 (= (h!2042 (toList!710 lt!26256)) (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63088 () Bool)

(assert (=> b!63088 (= e!41389 (contains!703 (t!4861 (toList!710 lt!26256)) (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (= (and d!12895 res!34539) b!63087))

(assert (= (and b!63087 (not res!34538)) b!63088))

(declare-fun m!56797 () Bool)

(assert (=> d!12895 m!56797))

(declare-fun m!56799 () Bool)

(assert (=> d!12895 m!56799))

(declare-fun m!56801 () Bool)

(assert (=> b!63088 m!56801))

(assert (=> b!62789 d!12895))

(declare-fun c!8493 () Bool)

(declare-fun bm!4972 () Bool)

(declare-fun call!4975 () Bool)

(assert (=> bm!4972 (= call!4975 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8493 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!8358 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461))) (ite c!8358 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)))))))

(declare-fun e!41393 () Bool)

(declare-fun b!63089 () Bool)

(assert (=> b!63089 (= e!41393 (contains!702 (ite c!8358 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!63090 () Bool)

(declare-fun e!41392 () Bool)

(assert (=> b!63090 (= e!41392 call!4975)))

(declare-fun b!63092 () Bool)

(declare-fun e!41394 () Bool)

(declare-fun e!41391 () Bool)

(assert (=> b!63092 (= e!41394 e!41391)))

(declare-fun res!34542 () Bool)

(assert (=> b!63092 (=> (not res!34542) (not e!41391))))

(assert (=> b!63092 (= res!34542 (not e!41393))))

(declare-fun res!34540 () Bool)

(assert (=> b!63092 (=> (not res!34540) (not e!41393))))

(assert (=> b!63092 (= res!34540 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!63093 () Bool)

(assert (=> b!63093 (= e!41392 call!4975)))

(declare-fun d!12897 () Bool)

(declare-fun res!34541 () Bool)

(assert (=> d!12897 (=> res!34541 e!41394)))

(assert (=> d!12897 (= res!34541 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> d!12897 (= (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8358 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461)) (ite c!8303 (Cons!1460 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) Nil!1461) Nil!1461))) e!41394)))

(declare-fun b!63091 () Bool)

(assert (=> b!63091 (= e!41391 e!41392)))

(assert (=> b!63091 (= c!8493 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!12897 (not res!34541)) b!63092))

(assert (= (and b!63092 res!34540) b!63089))

(assert (= (and b!63092 res!34542) b!63091))

(assert (= (and b!63091 c!8493) b!63093))

(assert (= (and b!63091 (not c!8493)) b!63090))

(assert (= (or b!63093 b!63090) bm!4972))

(declare-fun m!56803 () Bool)

(assert (=> bm!4972 m!56803))

(declare-fun m!56805 () Bool)

(assert (=> bm!4972 m!56805))

(assert (=> b!63089 m!56803))

(assert (=> b!63089 m!56803))

(declare-fun m!56807 () Bool)

(assert (=> b!63089 m!56807))

(assert (=> b!63092 m!56803))

(assert (=> b!63092 m!56803))

(declare-fun m!56809 () Bool)

(assert (=> b!63092 m!56809))

(assert (=> b!63091 m!56803))

(assert (=> b!63091 m!56803))

(assert (=> b!63091 m!56809))

(assert (=> bm!4909 d!12897))

(declare-fun d!12899 () Bool)

(assert (=> d!12899 (= (apply!68 lt!26321 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1100 (getValueByKey!125 (toList!710 lt!26321) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2742 () Bool)

(assert (= bs!2742 d!12899))

(assert (=> bs!2742 m!56793))

(assert (=> bs!2742 m!56793))

(declare-fun m!56811 () Bool)

(assert (=> bs!2742 m!56811))

(assert (=> b!62856 d!12899))

(declare-fun d!12901 () Bool)

(assert (=> d!12901 (= (apply!68 lt!26286 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1100 (getValueByKey!125 (toList!710 lt!26286) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2743 () Bool)

(assert (= bs!2743 d!12901))

(assert (=> bs!2743 m!56007))

(declare-fun m!56813 () Bool)

(assert (=> bs!2743 m!56813))

(assert (=> bs!2743 m!56813))

(declare-fun m!56815 () Bool)

(assert (=> bs!2743 m!56815))

(assert (=> b!62814 d!12901))

(declare-fun d!12903 () Bool)

(declare-fun c!8494 () Bool)

(assert (=> d!12903 (= c!8494 ((_ is ValueCellFull!864) (select (arr!1799 (_values!2071 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!41395 () V!2867)

(assert (=> d!12903 (= (get!1096 (select (arr!1799 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41395)))

(declare-fun b!63094 () Bool)

(assert (=> b!63094 (= e!41395 (get!1098 (select (arr!1799 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63095 () Bool)

(assert (=> b!63095 (= e!41395 (get!1099 (select (arr!1799 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12903 c!8494) b!63094))

(assert (= (and d!12903 (not c!8494)) b!63095))

(assert (=> b!63094 m!56361))

(assert (=> b!63094 m!56259))

(declare-fun m!56817 () Bool)

(assert (=> b!63094 m!56817))

(assert (=> b!63095 m!56361))

(assert (=> b!63095 m!56259))

(declare-fun m!56819 () Bool)

(assert (=> b!63095 m!56819))

(assert (=> b!62814 d!12903))

(declare-fun d!12905 () Bool)

(declare-fun res!34543 () Bool)

(declare-fun e!41396 () Bool)

(assert (=> d!12905 (=> res!34543 e!41396)))

(assert (=> d!12905 (= res!34543 (and ((_ is Cons!1459) (toList!710 lt!25929)) (= (_1!1043 (h!2042 (toList!710 lt!25929))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12905 (= (containsKey!129 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000) e!41396)))

(declare-fun b!63096 () Bool)

(declare-fun e!41397 () Bool)

(assert (=> b!63096 (= e!41396 e!41397)))

(declare-fun res!34544 () Bool)

(assert (=> b!63096 (=> (not res!34544) (not e!41397))))

(assert (=> b!63096 (= res!34544 (and (or (not ((_ is Cons!1459) (toList!710 lt!25929))) (bvsle (_1!1043 (h!2042 (toList!710 lt!25929))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1459) (toList!710 lt!25929)) (bvslt (_1!1043 (h!2042 (toList!710 lt!25929))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63097 () Bool)

(assert (=> b!63097 (= e!41397 (containsKey!129 (t!4861 (toList!710 lt!25929)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12905 (not res!34543)) b!63096))

(assert (= (and b!63096 res!34544) b!63097))

(declare-fun m!56821 () Bool)

(assert (=> b!63097 m!56821))

(assert (=> d!12713 d!12905))

(declare-fun d!12907 () Bool)

(assert (=> d!12907 (= (content!66 Nil!1461) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!12715 d!12907))

(declare-fun b!63098 () Bool)

(declare-fun e!41400 () Bool)

(declare-fun lt!26437 () ListLongMap!1389)

(assert (=> b!63098 (= e!41400 (isEmpty!304 lt!26437))))

(declare-fun d!12909 () Bool)

(declare-fun e!41403 () Bool)

(assert (=> d!12909 e!41403))

(declare-fun res!34548 () Bool)

(assert (=> d!12909 (=> (not res!34548) (not e!41403))))

(assert (=> d!12909 (= res!34548 (not (contains!700 lt!26437 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!41402 () ListLongMap!1389)

(assert (=> d!12909 (= lt!26437 e!41402)))

(declare-fun c!8498 () Bool)

(assert (=> d!12909 (= c!8498 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> d!12909 (validMask!0 (mask!5994 (v!2419 (underlying!234 thiss!992))))))

(assert (=> d!12909 (= (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))) lt!26437)))

(declare-fun b!63099 () Bool)

(assert (=> b!63099 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> b!63099 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2031 (_values!2071 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun e!41404 () Bool)

(assert (=> b!63099 (= e!41404 (= (apply!68 lt!26437 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63100 () Bool)

(declare-fun e!41399 () ListLongMap!1389)

(assert (=> b!63100 (= e!41402 e!41399)))

(declare-fun c!8497 () Bool)

(assert (=> b!63100 (= c!8497 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!63101 () Bool)

(declare-fun call!4976 () ListLongMap!1389)

(assert (=> b!63101 (= e!41399 call!4976)))

(declare-fun b!63102 () Bool)

(declare-fun e!41401 () Bool)

(assert (=> b!63102 (= e!41401 e!41400)))

(declare-fun c!8495 () Bool)

(assert (=> b!63102 (= c!8495 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!63103 () Bool)

(assert (=> b!63103 (= e!41403 e!41401)))

(declare-fun c!8496 () Bool)

(declare-fun e!41398 () Bool)

(assert (=> b!63103 (= c!8496 e!41398)))

(declare-fun res!34545 () Bool)

(assert (=> b!63103 (=> (not res!34545) (not e!41398))))

(assert (=> b!63103 (= res!34545 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun bm!4973 () Bool)

(assert (=> bm!4973 (= call!4976 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun b!63104 () Bool)

(assert (=> b!63104 (= e!41402 (ListLongMap!1390 Nil!1460))))

(declare-fun b!63105 () Bool)

(assert (=> b!63105 (= e!41400 (= lt!26437 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (_values!2071 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992))) (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) (minValue!2000 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!63106 () Bool)

(assert (=> b!63106 (= e!41401 e!41404)))

(assert (=> b!63106 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun res!34547 () Bool)

(assert (=> b!63106 (= res!34547 (contains!700 lt!26437 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!63106 (=> (not res!34547) (not e!41404))))

(declare-fun b!63107 () Bool)

(assert (=> b!63107 (= e!41398 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!63107 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!63108 () Bool)

(declare-fun lt!26443 () Unit!1689)

(declare-fun lt!26438 () Unit!1689)

(assert (=> b!63108 (= lt!26443 lt!26438)))

(declare-fun lt!26442 () (_ BitVec 64))

(declare-fun lt!26441 () V!2867)

(declare-fun lt!26440 () ListLongMap!1389)

(declare-fun lt!26439 () (_ BitVec 64))

(assert (=> b!63108 (not (contains!700 (+!83 lt!26440 (tuple2!2067 lt!26442 lt!26441)) lt!26439))))

(assert (=> b!63108 (= lt!26438 (addStillNotContains!19 lt!26440 lt!26442 lt!26441 lt!26439))))

(assert (=> b!63108 (= lt!26439 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63108 (= lt!26441 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63108 (= lt!26442 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!63108 (= lt!26440 call!4976)))

(assert (=> b!63108 (= e!41399 (+!83 call!4976 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63109 () Bool)

(declare-fun res!34546 () Bool)

(assert (=> b!63109 (=> (not res!34546) (not e!41403))))

(assert (=> b!63109 (= res!34546 (not (contains!700 lt!26437 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12909 c!8498) b!63104))

(assert (= (and d!12909 (not c!8498)) b!63100))

(assert (= (and b!63100 c!8497) b!63108))

(assert (= (and b!63100 (not c!8497)) b!63101))

(assert (= (or b!63108 b!63101) bm!4973))

(assert (= (and d!12909 res!34548) b!63109))

(assert (= (and b!63109 res!34546) b!63103))

(assert (= (and b!63103 res!34545) b!63107))

(assert (= (and b!63103 c!8496) b!63106))

(assert (= (and b!63103 (not c!8496)) b!63102))

(assert (= (and b!63106 res!34547) b!63099))

(assert (= (and b!63102 c!8495) b!63105))

(assert (= (and b!63102 (not c!8495)) b!63098))

(declare-fun b_lambda!2821 () Bool)

(assert (=> (not b_lambda!2821) (not b!63099)))

(assert (=> b!63099 t!4858))

(declare-fun b_and!3849 () Bool)

(assert (= b_and!3845 (and (=> t!4858 result!2449) b_and!3849)))

(assert (=> b!63099 t!4860))

(declare-fun b_and!3851 () Bool)

(assert (= b_and!3847 (and (=> t!4860 result!2453) b_and!3851)))

(declare-fun b_lambda!2823 () Bool)

(assert (=> (not b_lambda!2823) (not b!63108)))

(assert (=> b!63108 t!4858))

(declare-fun b_and!3853 () Bool)

(assert (= b_and!3849 (and (=> t!4858 result!2449) b_and!3853)))

(assert (=> b!63108 t!4860))

(declare-fun b_and!3855 () Bool)

(assert (= b_and!3851 (and (=> t!4860 result!2453) b_and!3855)))

(assert (=> b!63106 m!56387))

(assert (=> b!63106 m!56387))

(declare-fun m!56823 () Bool)

(assert (=> b!63106 m!56823))

(declare-fun m!56825 () Bool)

(assert (=> b!63109 m!56825))

(declare-fun m!56827 () Bool)

(assert (=> b!63098 m!56827))

(declare-fun m!56829 () Bool)

(assert (=> bm!4973 m!56829))

(assert (=> b!63107 m!56387))

(assert (=> b!63107 m!56387))

(declare-fun m!56831 () Bool)

(assert (=> b!63107 m!56831))

(assert (=> b!63100 m!56387))

(assert (=> b!63100 m!56387))

(assert (=> b!63100 m!56831))

(declare-fun m!56833 () Bool)

(assert (=> b!63099 m!56833))

(assert (=> b!63099 m!56833))

(assert (=> b!63099 m!55729))

(declare-fun m!56835 () Bool)

(assert (=> b!63099 m!56835))

(assert (=> b!63099 m!56387))

(declare-fun m!56837 () Bool)

(assert (=> b!63099 m!56837))

(assert (=> b!63099 m!55729))

(assert (=> b!63099 m!56387))

(declare-fun m!56839 () Bool)

(assert (=> d!12909 m!56839))

(assert (=> d!12909 m!55703))

(assert (=> b!63105 m!56829))

(declare-fun m!56841 () Bool)

(assert (=> b!63108 m!56841))

(assert (=> b!63108 m!56833))

(declare-fun m!56843 () Bool)

(assert (=> b!63108 m!56843))

(declare-fun m!56845 () Bool)

(assert (=> b!63108 m!56845))

(assert (=> b!63108 m!56833))

(assert (=> b!63108 m!55729))

(assert (=> b!63108 m!56835))

(assert (=> b!63108 m!56843))

(declare-fun m!56847 () Bool)

(assert (=> b!63108 m!56847))

(assert (=> b!63108 m!55729))

(assert (=> b!63108 m!56387))

(assert (=> b!62610 d!12909))

(declare-fun d!12911 () Bool)

(assert (=> d!12911 (= (get!1099 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62848 d!12911))

(declare-fun d!12913 () Bool)

(declare-fun res!34549 () Bool)

(declare-fun e!41405 () Bool)

(assert (=> d!12913 (=> res!34549 e!41405)))

(assert (=> d!12913 (= res!34549 (and ((_ is Cons!1459) (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (= (_1!1043 (h!2042 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(assert (=> d!12913 (= (containsKey!129 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) e!41405)))

(declare-fun b!63110 () Bool)

(declare-fun e!41406 () Bool)

(assert (=> b!63110 (= e!41405 e!41406)))

(declare-fun res!34550 () Bool)

(assert (=> b!63110 (=> (not res!34550) (not e!41406))))

(assert (=> b!63110 (= res!34550 (and (or (not ((_ is Cons!1459) (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (bvsle (_1!1043 (h!2042 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))) ((_ is Cons!1459) (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (bvslt (_1!1043 (h!2042 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(declare-fun b!63111 () Bool)

(assert (=> b!63111 (= e!41406 (containsKey!129 (t!4861 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (= (and d!12913 (not res!34549)) b!63110))

(assert (= (and b!63110 res!34550) b!63111))

(assert (=> b!63111 m!55705))

(declare-fun m!56849 () Bool)

(assert (=> b!63111 m!56849))

(assert (=> d!12725 d!12913))

(assert (=> d!12727 d!12795))

(declare-fun b!63112 () Bool)

(declare-fun e!41407 () Bool)

(declare-fun call!4977 () Bool)

(assert (=> b!63112 (= e!41407 call!4977)))

(declare-fun bm!4974 () Bool)

(assert (=> bm!4974 (= call!4977 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3720 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun b!63114 () Bool)

(declare-fun e!41409 () Bool)

(assert (=> b!63114 (= e!41407 e!41409)))

(declare-fun lt!26445 () (_ BitVec 64))

(assert (=> b!63114 (= lt!26445 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!26444 () Unit!1689)

(assert (=> b!63114 (= lt!26444 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) lt!26445 #b00000000000000000000000000000000))))

(assert (=> b!63114 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) lt!26445 #b00000000000000000000000000000000)))

(declare-fun lt!26446 () Unit!1689)

(assert (=> b!63114 (= lt!26446 lt!26444)))

(declare-fun res!34551 () Bool)

(assert (=> b!63114 (= res!34551 (= (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b00000000000000000000000000000000) (_keys!3720 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992)))) (Found!239 #b00000000000000000000000000000000)))))

(assert (=> b!63114 (=> (not res!34551) (not e!41409))))

(declare-fun b!63115 () Bool)

(declare-fun e!41408 () Bool)

(assert (=> b!63115 (= e!41408 e!41407)))

(declare-fun c!8499 () Bool)

(assert (=> b!63115 (= c!8499 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!63113 () Bool)

(assert (=> b!63113 (= e!41409 call!4977)))

(declare-fun d!12915 () Bool)

(declare-fun res!34552 () Bool)

(assert (=> d!12915 (=> res!34552 e!41408)))

(assert (=> d!12915 (= res!34552 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> d!12915 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (mask!5994 (v!2419 (underlying!234 thiss!992)))) e!41408)))

(assert (= (and d!12915 (not res!34552)) b!63115))

(assert (= (and b!63115 c!8499) b!63114))

(assert (= (and b!63115 (not c!8499)) b!63112))

(assert (= (and b!63114 res!34551) b!63113))

(assert (= (or b!63113 b!63112) bm!4974))

(declare-fun m!56851 () Bool)

(assert (=> bm!4974 m!56851))

(assert (=> b!63114 m!56543))

(declare-fun m!56853 () Bool)

(assert (=> b!63114 m!56853))

(declare-fun m!56855 () Bool)

(assert (=> b!63114 m!56855))

(assert (=> b!63114 m!56543))

(declare-fun m!56857 () Bool)

(assert (=> b!63114 m!56857))

(assert (=> b!63115 m!56543))

(assert (=> b!63115 m!56543))

(assert (=> b!63115 m!56549))

(assert (=> b!62889 d!12915))

(declare-fun d!12917 () Bool)

(declare-fun res!34553 () Bool)

(declare-fun e!41410 () Bool)

(assert (=> d!12917 (=> res!34553 e!41410)))

(assert (=> d!12917 (= res!34553 (and ((_ is Cons!1459) (toList!710 call!4894)) (= (_1!1043 (h!2042 (toList!710 call!4894))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(assert (=> d!12917 (= (containsKey!129 (toList!710 call!4894) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) e!41410)))

(declare-fun b!63116 () Bool)

(declare-fun e!41411 () Bool)

(assert (=> b!63116 (= e!41410 e!41411)))

(declare-fun res!34554 () Bool)

(assert (=> b!63116 (=> (not res!34554) (not e!41411))))

(assert (=> b!63116 (= res!34554 (and (or (not ((_ is Cons!1459) (toList!710 call!4894))) (bvsle (_1!1043 (h!2042 (toList!710 call!4894))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))) ((_ is Cons!1459) (toList!710 call!4894)) (bvslt (_1!1043 (h!2042 (toList!710 call!4894))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(declare-fun b!63117 () Bool)

(assert (=> b!63117 (= e!41411 (containsKey!129 (t!4861 (toList!710 call!4894)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (= (and d!12917 (not res!34553)) b!63116))

(assert (= (and b!63116 res!34554) b!63117))

(assert (=> b!63117 m!55705))

(declare-fun m!56859 () Bool)

(assert (=> b!63117 m!56859))

(assert (=> d!12649 d!12917))

(declare-fun lt!26447 () Bool)

(declare-fun d!12919 () Bool)

(assert (=> d!12919 (= lt!26447 (select (content!67 (toList!710 lt!26105)) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!41413 () Bool)

(assert (=> d!12919 (= lt!26447 e!41413)))

(declare-fun res!34556 () Bool)

(assert (=> d!12919 (=> (not res!34556) (not e!41413))))

(assert (=> d!12919 (= res!34556 ((_ is Cons!1459) (toList!710 lt!26105)))))

(assert (=> d!12919 (= (contains!703 (toList!710 lt!26105) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26447)))

(declare-fun b!63118 () Bool)

(declare-fun e!41412 () Bool)

(assert (=> b!63118 (= e!41413 e!41412)))

(declare-fun res!34555 () Bool)

(assert (=> b!63118 (=> res!34555 e!41412)))

(assert (=> b!63118 (= res!34555 (= (h!2042 (toList!710 lt!26105)) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63119 () Bool)

(assert (=> b!63119 (= e!41412 (contains!703 (t!4861 (toList!710 lt!26105)) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12919 res!34556) b!63118))

(assert (= (and b!63118 (not res!34555)) b!63119))

(declare-fun m!56861 () Bool)

(assert (=> d!12919 m!56861))

(declare-fun m!56863 () Bool)

(assert (=> d!12919 m!56863))

(declare-fun m!56865 () Bool)

(assert (=> b!63119 m!56865))

(assert (=> b!62688 d!12919))

(assert (=> b!62799 d!12767))

(declare-fun d!12921 () Bool)

(declare-fun e!41415 () Bool)

(assert (=> d!12921 e!41415))

(declare-fun res!34557 () Bool)

(assert (=> d!12921 (=> res!34557 e!41415)))

(declare-fun lt!26448 () Bool)

(assert (=> d!12921 (= res!34557 (not lt!26448))))

(declare-fun lt!26451 () Bool)

(assert (=> d!12921 (= lt!26448 lt!26451)))

(declare-fun lt!26449 () Unit!1689)

(declare-fun e!41414 () Unit!1689)

(assert (=> d!12921 (= lt!26449 e!41414)))

(declare-fun c!8500 () Bool)

(assert (=> d!12921 (= c!8500 lt!26451)))

(assert (=> d!12921 (= lt!26451 (containsKey!129 (toList!710 lt!26066) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12921 (= (contains!700 lt!26066 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26448)))

(declare-fun b!63120 () Bool)

(declare-fun lt!26450 () Unit!1689)

(assert (=> b!63120 (= e!41414 lt!26450)))

(assert (=> b!63120 (= lt!26450 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26066) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63120 (isDefined!79 (getValueByKey!125 (toList!710 lt!26066) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63121 () Bool)

(declare-fun Unit!1720 () Unit!1689)

(assert (=> b!63121 (= e!41414 Unit!1720)))

(declare-fun b!63122 () Bool)

(assert (=> b!63122 (= e!41415 (isDefined!79 (getValueByKey!125 (toList!710 lt!26066) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12921 c!8500) b!63120))

(assert (= (and d!12921 (not c!8500)) b!63121))

(assert (= (and d!12921 (not res!34557)) b!63122))

(declare-fun m!56867 () Bool)

(assert (=> d!12921 m!56867))

(declare-fun m!56869 () Bool)

(assert (=> b!63120 m!56869))

(declare-fun m!56871 () Bool)

(assert (=> b!63120 m!56871))

(assert (=> b!63120 m!56871))

(declare-fun m!56873 () Bool)

(assert (=> b!63120 m!56873))

(assert (=> b!63122 m!56871))

(assert (=> b!63122 m!56871))

(assert (=> b!63122 m!56873))

(assert (=> b!62614 d!12921))

(declare-fun d!12923 () Bool)

(assert (=> d!12923 (= (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25915)) (v!2423 (getValueByKey!125 (toList!710 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25915)))))

(assert (=> d!12691 d!12923))

(declare-fun d!12925 () Bool)

(declare-fun c!8501 () Bool)

(assert (=> d!12925 (= c!8501 (and ((_ is Cons!1459) (toList!710 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) (= (_1!1043 (h!2042 (toList!710 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))) lt!25915)))))

(declare-fun e!41416 () Option!131)

(assert (=> d!12925 (= (getValueByKey!125 (toList!710 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25915) e!41416)))

(declare-fun b!63125 () Bool)

(declare-fun e!41417 () Option!131)

(assert (=> b!63125 (= e!41417 (getValueByKey!125 (t!4861 (toList!710 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) lt!25915))))

(declare-fun b!63126 () Bool)

(assert (=> b!63126 (= e!41417 None!129)))

(declare-fun b!63124 () Bool)

(assert (=> b!63124 (= e!41416 e!41417)))

(declare-fun c!8502 () Bool)

(assert (=> b!63124 (= c!8502 (and ((_ is Cons!1459) (toList!710 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) (not (= (_1!1043 (h!2042 (toList!710 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))) lt!25915))))))

(declare-fun b!63123 () Bool)

(assert (=> b!63123 (= e!41416 (Some!130 (_2!1043 (h!2042 (toList!710 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))))

(assert (= (and d!12925 c!8501) b!63123))

(assert (= (and d!12925 (not c!8501)) b!63124))

(assert (= (and b!63124 c!8502) b!63125))

(assert (= (and b!63124 (not c!8502)) b!63126))

(declare-fun m!56875 () Bool)

(assert (=> b!63125 m!56875))

(assert (=> d!12691 d!12925))

(declare-fun d!12927 () Bool)

(declare-fun lt!26452 () Bool)

(assert (=> d!12927 (= lt!26452 (select (content!66 Nil!1461) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!41418 () Bool)

(assert (=> d!12927 (= lt!26452 e!41418)))

(declare-fun res!34559 () Bool)

(assert (=> d!12927 (=> (not res!34559) (not e!41418))))

(assert (=> d!12927 (= res!34559 ((_ is Cons!1460) Nil!1461))))

(assert (=> d!12927 (= (contains!702 Nil!1461 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) lt!26452)))

(declare-fun b!63127 () Bool)

(declare-fun e!41419 () Bool)

(assert (=> b!63127 (= e!41418 e!41419)))

(declare-fun res!34558 () Bool)

(assert (=> b!63127 (=> res!34558 e!41419)))

(assert (=> b!63127 (= res!34558 (= (h!2043 Nil!1461) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63128 () Bool)

(assert (=> b!63128 (= e!41419 (contains!702 (t!4862 Nil!1461) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12927 res!34559) b!63127))

(assert (= (and b!63127 (not res!34558)) b!63128))

(assert (=> d!12927 m!56275))

(assert (=> d!12927 m!56007))

(declare-fun m!56877 () Bool)

(assert (=> d!12927 m!56877))

(assert (=> b!63128 m!56007))

(declare-fun m!56879 () Bool)

(assert (=> b!63128 m!56879))

(assert (=> b!62877 d!12927))

(declare-fun b!63129 () Bool)

(declare-fun e!41420 () Bool)

(declare-fun call!4978 () Bool)

(assert (=> b!63129 (= e!41420 call!4978)))

(declare-fun bm!4975 () Bool)

(assert (=> bm!4975 (= call!4978 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!63131 () Bool)

(declare-fun e!41422 () Bool)

(assert (=> b!63131 (= e!41420 e!41422)))

(declare-fun lt!26454 () (_ BitVec 64))

(assert (=> b!63131 (= lt!26454 (select (arr!1798 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!26453 () Unit!1689)

(assert (=> b!63131 (= lt!26453 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3720 newMap!16) lt!26454 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!63131 (arrayContainsKey!0 (_keys!3720 newMap!16) lt!26454 #b00000000000000000000000000000000)))

(declare-fun lt!26455 () Unit!1689)

(assert (=> b!63131 (= lt!26455 lt!26453)))

(declare-fun res!34560 () Bool)

(assert (=> b!63131 (= res!34560 (= (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3720 newMap!16) (mask!5994 newMap!16)) (Found!239 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!63131 (=> (not res!34560) (not e!41422))))

(declare-fun b!63132 () Bool)

(declare-fun e!41421 () Bool)

(assert (=> b!63132 (= e!41421 e!41420)))

(declare-fun c!8503 () Bool)

(assert (=> b!63132 (= c!8503 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!63130 () Bool)

(assert (=> b!63130 (= e!41422 call!4978)))

(declare-fun d!12929 () Bool)

(declare-fun res!34561 () Bool)

(assert (=> d!12929 (=> res!34561 e!41421)))

(assert (=> d!12929 (= res!34561 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!12929 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3720 newMap!16) (mask!5994 newMap!16)) e!41421)))

(assert (= (and d!12929 (not res!34561)) b!63132))

(assert (= (and b!63132 c!8503) b!63131))

(assert (= (and b!63132 (not c!8503)) b!63129))

(assert (= (and b!63131 res!34560) b!63130))

(assert (= (or b!63130 b!63129) bm!4975))

(declare-fun m!56881 () Bool)

(assert (=> bm!4975 m!56881))

(assert (=> b!63131 m!56575))

(declare-fun m!56883 () Bool)

(assert (=> b!63131 m!56883))

(declare-fun m!56885 () Bool)

(assert (=> b!63131 m!56885))

(assert (=> b!63131 m!56575))

(declare-fun m!56887 () Bool)

(assert (=> b!63131 m!56887))

(assert (=> b!63132 m!56575))

(assert (=> b!63132 m!56575))

(assert (=> b!63132 m!56577))

(assert (=> bm!4950 d!12929))

(declare-fun d!12931 () Bool)

(assert (=> d!12931 (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!26456 () Unit!1689)

(assert (=> d!12931 (= lt!26456 (choose!340 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41423 () Bool)

(assert (=> d!12931 e!41423))

(declare-fun res!34562 () Bool)

(assert (=> d!12931 (=> (not res!34562) (not e!41423))))

(assert (=> d!12931 (= res!34562 (isStrictlySorted!281 (toList!710 lt!25929)))))

(assert (=> d!12931 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000) lt!26456)))

(declare-fun b!63133 () Bool)

(assert (=> b!63133 (= e!41423 (containsKey!129 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12931 res!34562) b!63133))

(assert (=> d!12931 m!56377))

(assert (=> d!12931 m!56377))

(assert (=> d!12931 m!56379))

(declare-fun m!56889 () Bool)

(assert (=> d!12931 m!56889))

(declare-fun m!56891 () Bool)

(assert (=> d!12931 m!56891))

(assert (=> b!63133 m!56373))

(assert (=> b!62844 d!12931))

(declare-fun d!12933 () Bool)

(assert (=> d!12933 (= (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!305 (getValueByKey!125 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2744 () Bool)

(assert (= bs!2744 d!12933))

(assert (=> bs!2744 m!56377))

(declare-fun m!56893 () Bool)

(assert (=> bs!2744 m!56893))

(assert (=> b!62844 d!12933))

(assert (=> b!62844 d!12891))

(declare-fun d!12935 () Bool)

(declare-fun lt!26457 () Bool)

(assert (=> d!12935 (= lt!26457 (select (content!67 (toList!710 lt!26331)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun e!41425 () Bool)

(assert (=> d!12935 (= lt!26457 e!41425)))

(declare-fun res!34564 () Bool)

(assert (=> d!12935 (=> (not res!34564) (not e!41425))))

(assert (=> d!12935 (= res!34564 ((_ is Cons!1459) (toList!710 lt!26331)))))

(assert (=> d!12935 (= (contains!703 (toList!710 lt!26331) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!26457)))

(declare-fun b!63134 () Bool)

(declare-fun e!41424 () Bool)

(assert (=> b!63134 (= e!41425 e!41424)))

(declare-fun res!34563 () Bool)

(assert (=> b!63134 (=> res!34563 e!41424)))

(assert (=> b!63134 (= res!34563 (= (h!2042 (toList!710 lt!26331)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!63135 () Bool)

(assert (=> b!63135 (= e!41424 (contains!703 (t!4861 (toList!710 lt!26331)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(assert (= (and d!12935 res!34564) b!63134))

(assert (= (and b!63134 (not res!34563)) b!63135))

(declare-fun m!56895 () Bool)

(assert (=> d!12935 m!56895))

(declare-fun m!56897 () Bool)

(assert (=> d!12935 m!56897))

(declare-fun m!56899 () Bool)

(assert (=> b!63135 m!56899))

(assert (=> b!62876 d!12935))

(declare-fun d!12937 () Bool)

(declare-fun lt!26458 () Bool)

(assert (=> d!12937 (= lt!26458 (select (content!67 (toList!710 lt!26113)) (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun e!41427 () Bool)

(assert (=> d!12937 (= lt!26458 e!41427)))

(declare-fun res!34566 () Bool)

(assert (=> d!12937 (=> (not res!34566) (not e!41427))))

(assert (=> d!12937 (= res!34566 ((_ is Cons!1459) (toList!710 lt!26113)))))

(assert (=> d!12937 (= (contains!703 (toList!710 lt!26113) (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!26458)))

(declare-fun b!63136 () Bool)

(declare-fun e!41426 () Bool)

(assert (=> b!63136 (= e!41427 e!41426)))

(declare-fun res!34565 () Bool)

(assert (=> b!63136 (=> res!34565 e!41426)))

(assert (=> b!63136 (= res!34565 (= (h!2042 (toList!710 lt!26113)) (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!63137 () Bool)

(assert (=> b!63137 (= e!41426 (contains!703 (t!4861 (toList!710 lt!26113)) (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(assert (= (and d!12937 res!34566) b!63136))

(assert (= (and b!63136 (not res!34565)) b!63137))

(declare-fun m!56901 () Bool)

(assert (=> d!12937 m!56901))

(declare-fun m!56903 () Bool)

(assert (=> d!12937 m!56903))

(declare-fun m!56905 () Bool)

(assert (=> b!63137 m!56905))

(assert (=> b!62692 d!12937))

(declare-fun d!12939 () Bool)

(assert (=> d!12939 (isDefined!79 (getValueByKey!125 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))

(declare-fun lt!26459 () Unit!1689)

(assert (=> d!12939 (= lt!26459 (choose!340 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))

(declare-fun e!41428 () Bool)

(assert (=> d!12939 e!41428))

(declare-fun res!34567 () Bool)

(assert (=> d!12939 (=> (not res!34567) (not e!41428))))

(assert (=> d!12939 (= res!34567 (isStrictlySorted!281 (toList!710 call!4890)))))

(assert (=> d!12939 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))) lt!26459)))

(declare-fun b!63138 () Bool)

(assert (=> b!63138 (= e!41428 (containsKey!129 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))

(assert (= (and d!12939 res!34567) b!63138))

(assert (=> d!12939 m!56447))

(assert (=> d!12939 m!56447))

(assert (=> d!12939 m!56449))

(declare-fun m!56907 () Bool)

(assert (=> d!12939 m!56907))

(declare-fun m!56909 () Bool)

(assert (=> d!12939 m!56909))

(assert (=> b!63138 m!56443))

(assert (=> b!62872 d!12939))

(declare-fun d!12941 () Bool)

(assert (=> d!12941 (= (isDefined!79 (getValueByKey!125 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026))))) (not (isEmpty!305 (getValueByKey!125 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))))

(declare-fun bs!2745 () Bool)

(assert (= bs!2745 d!12941))

(assert (=> bs!2745 m!56447))

(declare-fun m!56911 () Bool)

(assert (=> bs!2745 m!56911))

(assert (=> b!62872 d!12941))

(declare-fun d!12943 () Bool)

(declare-fun c!8504 () Bool)

(assert (=> d!12943 (= c!8504 (and ((_ is Cons!1459) (toList!710 call!4890)) (= (_1!1043 (h!2042 (toList!710 call!4890))) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026))))))))

(declare-fun e!41429 () Option!131)

(assert (=> d!12943 (= (getValueByKey!125 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))) e!41429)))

(declare-fun e!41430 () Option!131)

(declare-fun b!63141 () Bool)

(assert (=> b!63141 (= e!41430 (getValueByKey!125 (t!4861 (toList!710 call!4890)) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))

(declare-fun b!63142 () Bool)

(assert (=> b!63142 (= e!41430 None!129)))

(declare-fun b!63140 () Bool)

(assert (=> b!63140 (= e!41429 e!41430)))

(declare-fun c!8505 () Bool)

(assert (=> b!63140 (= c!8505 (and ((_ is Cons!1459) (toList!710 call!4890)) (not (= (_1!1043 (h!2042 (toList!710 call!4890))) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))))

(declare-fun b!63139 () Bool)

(assert (=> b!63139 (= e!41429 (Some!130 (_2!1043 (h!2042 (toList!710 call!4890)))))))

(assert (= (and d!12943 c!8504) b!63139))

(assert (= (and d!12943 (not c!8504)) b!63140))

(assert (= (and b!63140 c!8505) b!63141))

(assert (= (and b!63140 (not c!8505)) b!63142))

(declare-fun m!56913 () Bool)

(assert (=> b!63141 m!56913))

(assert (=> b!62872 d!12943))

(declare-fun d!12945 () Bool)

(assert (not d!12945))

(assert (=> b!62787 d!12945))

(declare-fun d!12947 () Bool)

(assert (=> d!12947 (= (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62577 d!12947))

(declare-fun d!12949 () Bool)

(declare-fun e!41431 () Bool)

(assert (=> d!12949 e!41431))

(declare-fun res!34568 () Bool)

(assert (=> d!12949 (=> (not res!34568) (not e!41431))))

(declare-fun lt!26460 () ListLongMap!1389)

(assert (=> d!12949 (= res!34568 (contains!700 lt!26460 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun lt!26463 () List!1463)

(assert (=> d!12949 (= lt!26460 (ListLongMap!1390 lt!26463))))

(declare-fun lt!26462 () Unit!1689)

(declare-fun lt!26461 () Unit!1689)

(assert (=> d!12949 (= lt!26462 lt!26461)))

(assert (=> d!12949 (= (getValueByKey!125 lt!26463 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!12949 (= lt!26461 (lemmaContainsTupThenGetReturnValue!44 lt!26463 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!12949 (= lt!26463 (insertStrictlySorted!46 (toList!710 call!4959) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!12949 (= (+!83 call!4959 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) lt!26460)))

(declare-fun b!63143 () Bool)

(declare-fun res!34569 () Bool)

(assert (=> b!63143 (=> (not res!34569) (not e!41431))))

(assert (=> b!63143 (= res!34569 (= (getValueByKey!125 (toList!710 lt!26460) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(declare-fun b!63144 () Bool)

(assert (=> b!63144 (= e!41431 (contains!703 (toList!710 lt!26460) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(assert (= (and d!12949 res!34568) b!63143))

(assert (= (and b!63143 res!34569) b!63144))

(declare-fun m!56915 () Bool)

(assert (=> d!12949 m!56915))

(declare-fun m!56917 () Bool)

(assert (=> d!12949 m!56917))

(declare-fun m!56919 () Bool)

(assert (=> d!12949 m!56919))

(declare-fun m!56921 () Bool)

(assert (=> d!12949 m!56921))

(declare-fun m!56923 () Bool)

(assert (=> b!63143 m!56923))

(declare-fun m!56925 () Bool)

(assert (=> b!63144 m!56925))

(assert (=> b!62860 d!12949))

(declare-fun d!12951 () Bool)

(assert (=> d!12951 (= (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25926)) (v!2423 (getValueByKey!125 (toList!710 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25926)))))

(assert (=> d!12699 d!12951))

(declare-fun d!12953 () Bool)

(declare-fun c!8506 () Bool)

(assert (=> d!12953 (= c!8506 (and ((_ is Cons!1459) (toList!710 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))) (= (_1!1043 (h!2042 (toList!710 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))) lt!25926)))))

(declare-fun e!41432 () Option!131)

(assert (=> d!12953 (= (getValueByKey!125 (toList!710 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25926) e!41432)))

(declare-fun e!41433 () Option!131)

(declare-fun b!63147 () Bool)

(assert (=> b!63147 (= e!41433 (getValueByKey!125 (t!4861 (toList!710 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))) lt!25926))))

(declare-fun b!63148 () Bool)

(assert (=> b!63148 (= e!41433 None!129)))

(declare-fun b!63146 () Bool)

(assert (=> b!63146 (= e!41432 e!41433)))

(declare-fun c!8507 () Bool)

(assert (=> b!63146 (= c!8507 (and ((_ is Cons!1459) (toList!710 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))) (not (= (_1!1043 (h!2042 (toList!710 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))) lt!25926))))))

(declare-fun b!63145 () Bool)

(assert (=> b!63145 (= e!41432 (Some!130 (_2!1043 (h!2042 (toList!710 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))))

(assert (= (and d!12953 c!8506) b!63145))

(assert (= (and d!12953 (not c!8506)) b!63146))

(assert (= (and b!63146 c!8507) b!63147))

(assert (= (and b!63146 (not c!8507)) b!63148))

(declare-fun m!56927 () Bool)

(assert (=> b!63147 m!56927))

(assert (=> d!12699 d!12953))

(assert (=> d!12685 d!12699))

(declare-fun d!12955 () Bool)

(declare-fun e!41435 () Bool)

(assert (=> d!12955 e!41435))

(declare-fun res!34570 () Bool)

(assert (=> d!12955 (=> res!34570 e!41435)))

(declare-fun lt!26464 () Bool)

(assert (=> d!12955 (= res!34570 (not lt!26464))))

(declare-fun lt!26467 () Bool)

(assert (=> d!12955 (= lt!26464 lt!26467)))

(declare-fun lt!26465 () Unit!1689)

(declare-fun e!41434 () Unit!1689)

(assert (=> d!12955 (= lt!26465 e!41434)))

(declare-fun c!8508 () Bool)

(assert (=> d!12955 (= c!8508 lt!26467)))

(assert (=> d!12955 (= lt!26467 (containsKey!129 (toList!710 lt!25923) lt!25926))))

(assert (=> d!12955 (= (contains!700 lt!25923 lt!25926) lt!26464)))

(declare-fun b!63149 () Bool)

(declare-fun lt!26466 () Unit!1689)

(assert (=> b!63149 (= e!41434 lt!26466)))

(assert (=> b!63149 (= lt!26466 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25923) lt!25926))))

(assert (=> b!63149 (isDefined!79 (getValueByKey!125 (toList!710 lt!25923) lt!25926))))

(declare-fun b!63150 () Bool)

(declare-fun Unit!1721 () Unit!1689)

(assert (=> b!63150 (= e!41434 Unit!1721)))

(declare-fun b!63151 () Bool)

(assert (=> b!63151 (= e!41435 (isDefined!79 (getValueByKey!125 (toList!710 lt!25923) lt!25926)))))

(assert (= (and d!12955 c!8508) b!63149))

(assert (= (and d!12955 (not c!8508)) b!63150))

(assert (= (and d!12955 (not res!34570)) b!63151))

(declare-fun m!56929 () Bool)

(assert (=> d!12955 m!56929))

(declare-fun m!56931 () Bool)

(assert (=> b!63149 m!56931))

(assert (=> b!63149 m!56149))

(assert (=> b!63149 m!56149))

(declare-fun m!56933 () Bool)

(assert (=> b!63149 m!56933))

(assert (=> b!63151 m!56149))

(assert (=> b!63151 m!56149))

(assert (=> b!63151 m!56933))

(assert (=> d!12685 d!12955))

(assert (=> d!12685 d!12689))

(declare-fun d!12957 () Bool)

(assert (=> d!12957 (= (apply!68 (+!83 lt!25923 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25926) (apply!68 lt!25923 lt!25926))))

(assert (=> d!12957 true))

(declare-fun _$34!775 () Unit!1689)

(assert (=> d!12957 (= (choose!342 lt!25923 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25926) _$34!775)))

(declare-fun bs!2746 () Bool)

(assert (= bs!2746 d!12957))

(assert (=> bs!2746 m!55805))

(assert (=> bs!2746 m!55805))

(assert (=> bs!2746 m!55807))

(assert (=> bs!2746 m!55815))

(assert (=> d!12685 d!12957))

(assert (=> d!12685 d!12705))

(declare-fun d!12959 () Bool)

(assert (=> d!12959 (= (apply!68 lt!26243 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1100 (getValueByKey!125 (toList!710 lt!26243) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2747 () Bool)

(assert (= bs!2747 d!12959))

(assert (=> bs!2747 m!56007))

(declare-fun m!56935 () Bool)

(assert (=> bs!2747 m!56935))

(assert (=> bs!2747 m!56935))

(declare-fun m!56937 () Bool)

(assert (=> bs!2747 m!56937))

(assert (=> b!62761 d!12959))

(declare-fun c!8509 () Bool)

(declare-fun d!12961 () Bool)

(assert (=> d!12961 (= c!8509 ((_ is ValueCellFull!864) (select (arr!1799 (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022)) #b00000000000000000000000000000000)))))

(declare-fun e!41436 () V!2867)

(assert (=> d!12961 (= (get!1096 (select (arr!1799 (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41436)))

(declare-fun b!63153 () Bool)

(assert (=> b!63153 (= e!41436 (get!1098 (select (arr!1799 (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63154 () Bool)

(assert (=> b!63154 (= e!41436 (get!1099 (select (arr!1799 (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12961 c!8509) b!63153))

(assert (= (and d!12961 (not c!8509)) b!63154))

(assert (=> b!63153 m!56263))

(assert (=> b!63153 m!56259))

(declare-fun m!56939 () Bool)

(assert (=> b!63153 m!56939))

(assert (=> b!63154 m!56263))

(assert (=> b!63154 m!56259))

(declare-fun m!56941 () Bool)

(assert (=> b!63154 m!56941))

(assert (=> b!62761 d!12961))

(declare-fun d!12963 () Bool)

(assert (=> d!12963 (isDefined!79 (getValueByKey!125 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun lt!26468 () Unit!1689)

(assert (=> d!12963 (= lt!26468 (choose!340 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun e!41437 () Bool)

(assert (=> d!12963 e!41437))

(declare-fun res!34571 () Bool)

(assert (=> d!12963 (=> (not res!34571) (not e!41437))))

(assert (=> d!12963 (= res!34571 (isStrictlySorted!281 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))))

(assert (=> d!12963 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) lt!26468)))

(declare-fun b!63155 () Bool)

(assert (=> b!63155 (= e!41437 (containsKey!129 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (= (and d!12963 res!34571) b!63155))

(assert (=> d!12963 m!55705))

(assert (=> d!12963 m!56309))

(assert (=> d!12963 m!56309))

(assert (=> d!12963 m!56311))

(assert (=> d!12963 m!55705))

(declare-fun m!56943 () Bool)

(assert (=> d!12963 m!56943))

(declare-fun m!56945 () Bool)

(assert (=> d!12963 m!56945))

(assert (=> b!63155 m!55705))

(assert (=> b!63155 m!56305))

(assert (=> b!62808 d!12963))

(declare-fun d!12965 () Bool)

(assert (=> d!12965 (= (isDefined!79 (getValueByKey!125 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))) (not (isEmpty!305 (getValueByKey!125 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))))

(declare-fun bs!2748 () Bool)

(assert (= bs!2748 d!12965))

(assert (=> bs!2748 m!56309))

(declare-fun m!56947 () Bool)

(assert (=> bs!2748 m!56947))

(assert (=> b!62808 d!12965))

(declare-fun c!8510 () Bool)

(declare-fun d!12967 () Bool)

(assert (=> d!12967 (= c!8510 (and ((_ is Cons!1459) (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (= (_1!1043 (h!2042 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(declare-fun e!41438 () Option!131)

(assert (=> d!12967 (= (getValueByKey!125 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) e!41438)))

(declare-fun b!63158 () Bool)

(declare-fun e!41439 () Option!131)

(assert (=> b!63158 (= e!41439 (getValueByKey!125 (t!4861 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!63159 () Bool)

(assert (=> b!63159 (= e!41439 None!129)))

(declare-fun b!63157 () Bool)

(assert (=> b!63157 (= e!41438 e!41439)))

(declare-fun c!8511 () Bool)

(assert (=> b!63157 (= c!8511 (and ((_ is Cons!1459) (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (not (= (_1!1043 (h!2042 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))))

(declare-fun b!63156 () Bool)

(assert (=> b!63156 (= e!41438 (Some!130 (_2!1043 (h!2042 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))))))

(assert (= (and d!12967 c!8510) b!63156))

(assert (= (and d!12967 (not c!8510)) b!63157))

(assert (= (and b!63157 c!8511) b!63158))

(assert (= (and b!63157 (not c!8511)) b!63159))

(assert (=> b!63158 m!55705))

(declare-fun m!56949 () Bool)

(assert (=> b!63158 m!56949))

(assert (=> b!62808 d!12967))

(assert (=> d!12711 d!12795))

(declare-fun d!12969 () Bool)

(assert (=> d!12969 (= (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!305 (getValueByKey!125 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2749 () Bool)

(assert (= bs!2749 d!12969))

(assert (=> bs!2749 m!56015))

(declare-fun m!56951 () Bool)

(assert (=> bs!2749 m!56951))

(assert (=> b!62635 d!12969))

(declare-fun c!8512 () Bool)

(declare-fun d!12971 () Bool)

(assert (=> d!12971 (= c!8512 (and ((_ is Cons!1459) (toList!710 lt!25929)) (= (_1!1043 (h!2042 (toList!710 lt!25929))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun e!41440 () Option!131)

(assert (=> d!12971 (= (getValueByKey!125 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!41440)))

(declare-fun b!63162 () Bool)

(declare-fun e!41441 () Option!131)

(assert (=> b!63162 (= e!41441 (getValueByKey!125 (t!4861 (toList!710 lt!25929)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!63163 () Bool)

(assert (=> b!63163 (= e!41441 None!129)))

(declare-fun b!63161 () Bool)

(assert (=> b!63161 (= e!41440 e!41441)))

(declare-fun c!8513 () Bool)

(assert (=> b!63161 (= c!8513 (and ((_ is Cons!1459) (toList!710 lt!25929)) (not (= (_1!1043 (h!2042 (toList!710 lt!25929))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!63160 () Bool)

(assert (=> b!63160 (= e!41440 (Some!130 (_2!1043 (h!2042 (toList!710 lt!25929)))))))

(assert (= (and d!12971 c!8512) b!63160))

(assert (= (and d!12971 (not c!8512)) b!63161))

(assert (= (and b!63161 c!8513) b!63162))

(assert (= (and b!63161 (not c!8513)) b!63163))

(assert (=> b!63162 m!55795))

(declare-fun m!56953 () Bool)

(assert (=> b!63162 m!56953))

(assert (=> b!62635 d!12971))

(assert (=> d!12707 d!12679))

(assert (=> d!12707 d!12687))

(declare-fun d!12973 () Bool)

(declare-fun e!41443 () Bool)

(assert (=> d!12973 e!41443))

(declare-fun res!34572 () Bool)

(assert (=> d!12973 (=> res!34572 e!41443)))

(declare-fun lt!26469 () Bool)

(assert (=> d!12973 (= res!34572 (not lt!26469))))

(declare-fun lt!26472 () Bool)

(assert (=> d!12973 (= lt!26469 lt!26472)))

(declare-fun lt!26470 () Unit!1689)

(declare-fun e!41442 () Unit!1689)

(assert (=> d!12973 (= lt!26470 e!41442)))

(declare-fun c!8514 () Bool)

(assert (=> d!12973 (= c!8514 lt!26472)))

(assert (=> d!12973 (= lt!26472 (containsKey!129 (toList!710 lt!25916) lt!25915))))

(assert (=> d!12973 (= (contains!700 lt!25916 lt!25915) lt!26469)))

(declare-fun b!63164 () Bool)

(declare-fun lt!26471 () Unit!1689)

(assert (=> b!63164 (= e!41442 lt!26471)))

(assert (=> b!63164 (= lt!26471 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25916) lt!25915))))

(assert (=> b!63164 (isDefined!79 (getValueByKey!125 (toList!710 lt!25916) lt!25915))))

(declare-fun b!63165 () Bool)

(declare-fun Unit!1722 () Unit!1689)

(assert (=> b!63165 (= e!41442 Unit!1722)))

(declare-fun b!63166 () Bool)

(assert (=> b!63166 (= e!41443 (isDefined!79 (getValueByKey!125 (toList!710 lt!25916) lt!25915)))))

(assert (= (and d!12973 c!8514) b!63164))

(assert (= (and d!12973 (not c!8514)) b!63165))

(assert (= (and d!12973 (not res!34572)) b!63166))

(declare-fun m!56955 () Bool)

(assert (=> d!12973 m!56955))

(declare-fun m!56957 () Bool)

(assert (=> b!63164 m!56957))

(assert (=> b!63164 m!56093))

(assert (=> b!63164 m!56093))

(declare-fun m!56959 () Bool)

(assert (=> b!63164 m!56959))

(assert (=> b!63166 m!56093))

(assert (=> b!63166 m!56093))

(assert (=> b!63166 m!56959))

(assert (=> d!12707 d!12973))

(assert (=> d!12707 d!12691))

(declare-fun d!12975 () Bool)

(assert (=> d!12975 (= (apply!68 (+!83 lt!25916 (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25915) (apply!68 lt!25916 lt!25915))))

(assert (=> d!12975 true))

(declare-fun _$34!776 () Unit!1689)

(assert (=> d!12975 (= (choose!342 lt!25916 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25915) _$34!776)))

(declare-fun bs!2750 () Bool)

(assert (= bs!2750 d!12975))

(assert (=> bs!2750 m!55829))

(assert (=> bs!2750 m!55829))

(assert (=> bs!2750 m!55833))

(assert (=> bs!2750 m!55821))

(assert (=> d!12707 d!12975))

(declare-fun d!12977 () Bool)

(declare-fun e!41445 () Bool)

(assert (=> d!12977 e!41445))

(declare-fun res!34573 () Bool)

(assert (=> d!12977 (=> res!34573 e!41445)))

(declare-fun lt!26473 () Bool)

(assert (=> d!12977 (= res!34573 (not lt!26473))))

(declare-fun lt!26476 () Bool)

(assert (=> d!12977 (= lt!26473 lt!26476)))

(declare-fun lt!26474 () Unit!1689)

(declare-fun e!41444 () Unit!1689)

(assert (=> d!12977 (= lt!26474 e!41444)))

(declare-fun c!8515 () Bool)

(assert (=> d!12977 (= c!8515 lt!26476)))

(assert (=> d!12977 (= lt!26476 (containsKey!129 (toList!710 lt!26101) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12977 (= (contains!700 lt!26101 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26473)))

(declare-fun b!63167 () Bool)

(declare-fun lt!26475 () Unit!1689)

(assert (=> b!63167 (= e!41444 lt!26475)))

(assert (=> b!63167 (= lt!26475 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26101) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!63167 (isDefined!79 (getValueByKey!125 (toList!710 lt!26101) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63168 () Bool)

(declare-fun Unit!1723 () Unit!1689)

(assert (=> b!63168 (= e!41444 Unit!1723)))

(declare-fun b!63169 () Bool)

(assert (=> b!63169 (= e!41445 (isDefined!79 (getValueByKey!125 (toList!710 lt!26101) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12977 c!8515) b!63167))

(assert (= (and d!12977 (not c!8515)) b!63168))

(assert (= (and d!12977 (not res!34573)) b!63169))

(declare-fun m!56961 () Bool)

(assert (=> d!12977 m!56961))

(declare-fun m!56963 () Bool)

(assert (=> b!63167 m!56963))

(assert (=> b!63167 m!56045))

(assert (=> b!63167 m!56045))

(declare-fun m!56965 () Bool)

(assert (=> b!63167 m!56965))

(assert (=> b!63169 m!56045))

(assert (=> b!63169 m!56045))

(assert (=> b!63169 m!56965))

(assert (=> d!12675 d!12977))

(declare-fun c!8516 () Bool)

(declare-fun d!12979 () Bool)

(assert (=> d!12979 (= c!8516 (and ((_ is Cons!1459) lt!26104) (= (_1!1043 (h!2042 lt!26104)) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!41446 () Option!131)

(assert (=> d!12979 (= (getValueByKey!125 lt!26104 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!41446)))

(declare-fun b!63172 () Bool)

(declare-fun e!41447 () Option!131)

(assert (=> b!63172 (= e!41447 (getValueByKey!125 (t!4861 lt!26104) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63173 () Bool)

(assert (=> b!63173 (= e!41447 None!129)))

(declare-fun b!63171 () Bool)

(assert (=> b!63171 (= e!41446 e!41447)))

(declare-fun c!8517 () Bool)

(assert (=> b!63171 (= c!8517 (and ((_ is Cons!1459) lt!26104) (not (= (_1!1043 (h!2042 lt!26104)) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!63170 () Bool)

(assert (=> b!63170 (= e!41446 (Some!130 (_2!1043 (h!2042 lt!26104))))))

(assert (= (and d!12979 c!8516) b!63170))

(assert (= (and d!12979 (not c!8516)) b!63171))

(assert (= (and b!63171 c!8517) b!63172))

(assert (= (and b!63171 (not c!8517)) b!63173))

(declare-fun m!56967 () Bool)

(assert (=> b!63172 m!56967))

(assert (=> d!12675 d!12979))

(declare-fun d!12981 () Bool)

(assert (=> d!12981 (= (getValueByKey!125 lt!26104 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!130 (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!26477 () Unit!1689)

(assert (=> d!12981 (= lt!26477 (choose!348 lt!26104 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!41448 () Bool)

(assert (=> d!12981 e!41448))

(declare-fun res!34574 () Bool)

(assert (=> d!12981 (=> (not res!34574) (not e!41448))))

(assert (=> d!12981 (= res!34574 (isStrictlySorted!281 lt!26104))))

(assert (=> d!12981 (= (lemmaContainsTupThenGetReturnValue!44 lt!26104 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26477)))

(declare-fun b!63174 () Bool)

(declare-fun res!34575 () Bool)

(assert (=> b!63174 (=> (not res!34575) (not e!41448))))

(assert (=> b!63174 (= res!34575 (containsKey!129 lt!26104 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63175 () Bool)

(assert (=> b!63175 (= e!41448 (contains!703 lt!26104 (tuple2!2067 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12981 res!34574) b!63174))

(assert (= (and b!63174 res!34575) b!63175))

(assert (=> d!12981 m!56039))

(declare-fun m!56969 () Bool)

(assert (=> d!12981 m!56969))

(declare-fun m!56971 () Bool)

(assert (=> d!12981 m!56971))

(declare-fun m!56973 () Bool)

(assert (=> b!63174 m!56973))

(declare-fun m!56975 () Bool)

(assert (=> b!63175 m!56975))

(assert (=> d!12675 d!12981))

(declare-fun b!63176 () Bool)

(declare-fun e!41450 () List!1463)

(declare-fun call!4981 () List!1463)

(assert (=> b!63176 (= e!41450 call!4981)))

(declare-fun c!8521 () Bool)

(declare-fun e!41449 () List!1463)

(declare-fun bm!4976 () Bool)

(assert (=> bm!4976 (= call!4981 ($colon$colon!61 e!41449 (ite c!8521 (h!2042 (toList!710 e!41046)) (tuple2!2067 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!8518 () Bool)

(assert (=> bm!4976 (= c!8518 c!8521)))

(declare-fun b!63177 () Bool)

(declare-fun e!41451 () List!1463)

(declare-fun call!4980 () List!1463)

(assert (=> b!63177 (= e!41451 call!4980)))

(declare-fun bm!4977 () Bool)

(declare-fun call!4979 () List!1463)

(assert (=> bm!4977 (= call!4980 call!4979)))

(declare-fun b!63178 () Bool)

(declare-fun e!41452 () List!1463)

(assert (=> b!63178 (= e!41450 e!41452)))

(declare-fun c!8519 () Bool)

(assert (=> b!63178 (= c!8519 (and ((_ is Cons!1459) (toList!710 e!41046)) (= (_1!1043 (h!2042 (toList!710 e!41046))) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63180 () Bool)

(declare-fun c!8520 () Bool)

(assert (=> b!63180 (= e!41449 (ite c!8519 (t!4861 (toList!710 e!41046)) (ite c!8520 (Cons!1459 (h!2042 (toList!710 e!41046)) (t!4861 (toList!710 e!41046))) Nil!1460)))))

(declare-fun b!63181 () Bool)

(assert (=> b!63181 (= e!41451 call!4980)))

(declare-fun bm!4978 () Bool)

(assert (=> bm!4978 (= call!4979 call!4981)))

(declare-fun b!63182 () Bool)

(assert (=> b!63182 (= e!41449 (insertStrictlySorted!46 (t!4861 (toList!710 e!41046)) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63183 () Bool)

(assert (=> b!63183 (= c!8520 (and ((_ is Cons!1459) (toList!710 e!41046)) (bvsgt (_1!1043 (h!2042 (toList!710 e!41046))) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!63183 (= e!41452 e!41451)))

(declare-fun b!63179 () Bool)

(declare-fun res!34577 () Bool)

(declare-fun e!41453 () Bool)

(assert (=> b!63179 (=> (not res!34577) (not e!41453))))

(declare-fun lt!26478 () List!1463)

(assert (=> b!63179 (= res!34577 (containsKey!129 lt!26478 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun d!12983 () Bool)

(assert (=> d!12983 e!41453))

(declare-fun res!34576 () Bool)

(assert (=> d!12983 (=> (not res!34576) (not e!41453))))

(assert (=> d!12983 (= res!34576 (isStrictlySorted!281 lt!26478))))

(assert (=> d!12983 (= lt!26478 e!41450)))

(assert (=> d!12983 (= c!8521 (and ((_ is Cons!1459) (toList!710 e!41046)) (bvslt (_1!1043 (h!2042 (toList!710 e!41046))) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12983 (isStrictlySorted!281 (toList!710 e!41046))))

(assert (=> d!12983 (= (insertStrictlySorted!46 (toList!710 e!41046) (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26478)))

(declare-fun b!63184 () Bool)

(assert (=> b!63184 (= e!41452 call!4979)))

(declare-fun b!63185 () Bool)

(assert (=> b!63185 (= e!41453 (contains!703 lt!26478 (tuple2!2067 (_1!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1043 (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12983 c!8521) b!63176))

(assert (= (and d!12983 (not c!8521)) b!63178))

(assert (= (and b!63178 c!8519) b!63184))

(assert (= (and b!63178 (not c!8519)) b!63183))

(assert (= (and b!63183 c!8520) b!63181))

(assert (= (and b!63183 (not c!8520)) b!63177))

(assert (= (or b!63181 b!63177) bm!4977))

(assert (= (or b!63184 bm!4977) bm!4978))

(assert (= (or b!63176 bm!4978) bm!4976))

(assert (= (and bm!4976 c!8518) b!63182))

(assert (= (and bm!4976 (not c!8518)) b!63180))

(assert (= (and d!12983 res!34576) b!63179))

(assert (= (and b!63179 res!34577) b!63185))

(declare-fun m!56977 () Bool)

(assert (=> b!63185 m!56977))

(declare-fun m!56979 () Bool)

(assert (=> d!12983 m!56979))

(declare-fun m!56981 () Bool)

(assert (=> d!12983 m!56981))

(declare-fun m!56983 () Bool)

(assert (=> b!63182 m!56983))

(declare-fun m!56985 () Bool)

(assert (=> b!63179 m!56985))

(declare-fun m!56987 () Bool)

(assert (=> bm!4976 m!56987))

(assert (=> d!12675 d!12983))

(declare-fun d!12985 () Bool)

(assert (=> d!12985 (= (apply!68 lt!26286 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1100 (getValueByKey!125 (toList!710 lt!26286) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2751 () Bool)

(assert (= bs!2751 d!12985))

(declare-fun m!56989 () Bool)

(assert (=> bs!2751 m!56989))

(assert (=> bs!2751 m!56989))

(declare-fun m!56991 () Bool)

(assert (=> bs!2751 m!56991))

(assert (=> b!62822 d!12985))

(declare-fun d!12987 () Bool)

(assert (=> d!12987 (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!26479 () Unit!1689)

(assert (=> d!12987 (= lt!26479 (choose!340 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41454 () Bool)

(assert (=> d!12987 e!41454))

(declare-fun res!34578 () Bool)

(assert (=> d!12987 (=> (not res!34578) (not e!41454))))

(assert (=> d!12987 (= res!34578 (isStrictlySorted!281 (toList!710 lt!25929)))))

(assert (=> d!12987 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000) lt!26479)))

(declare-fun b!63186 () Bool)

(assert (=> b!63186 (= e!41454 (containsKey!129 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12987 res!34578) b!63186))

(assert (=> d!12987 m!56271))

(assert (=> d!12987 m!56271))

(assert (=> d!12987 m!56273))

(declare-fun m!56993 () Bool)

(assert (=> d!12987 m!56993))

(assert (=> d!12987 m!56891))

(assert (=> b!63186 m!56267))

(assert (=> b!62779 d!12987))

(declare-fun d!12989 () Bool)

(assert (=> d!12989 (= (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!305 (getValueByKey!125 (toList!710 lt!25929) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2752 () Bool)

(assert (= bs!2752 d!12989))

(assert (=> bs!2752 m!56271))

(declare-fun m!56995 () Bool)

(assert (=> bs!2752 m!56995))

(assert (=> b!62779 d!12989))

(assert (=> b!62779 d!12875))

(assert (=> bm!4933 d!12643))

(declare-fun b!63189 () Bool)

(declare-fun res!34581 () Bool)

(declare-fun e!41455 () Bool)

(assert (=> b!63189 (=> (not res!34581) (not e!41455))))

(assert (=> b!63189 (= res!34581 (= (size!2034 (_2!1044 lt!26030)) (bvadd (_size!367 (_2!1044 lt!26030)) (bvsdiv (bvadd (extraKeys!1967 (_2!1044 lt!26030)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!12991 () Bool)

(declare-fun res!34579 () Bool)

(assert (=> d!12991 (=> (not res!34579) (not e!41455))))

(assert (=> d!12991 (= res!34579 (validMask!0 (mask!5994 (_2!1044 lt!26030))))))

(assert (=> d!12991 (= (simpleValid!43 (_2!1044 lt!26030)) e!41455)))

(declare-fun b!63190 () Bool)

(assert (=> b!63190 (= e!41455 (and (bvsge (extraKeys!1967 (_2!1044 lt!26030)) #b00000000000000000000000000000000) (bvsle (extraKeys!1967 (_2!1044 lt!26030)) #b00000000000000000000000000000011) (bvsge (_vacant!367 (_2!1044 lt!26030)) #b00000000000000000000000000000000)))))

(declare-fun b!63188 () Bool)

(declare-fun res!34580 () Bool)

(assert (=> b!63188 (=> (not res!34580) (not e!41455))))

(assert (=> b!63188 (= res!34580 (bvsge (size!2034 (_2!1044 lt!26030)) (_size!367 (_2!1044 lt!26030))))))

(declare-fun b!63187 () Bool)

(declare-fun res!34582 () Bool)

(assert (=> b!63187 (=> (not res!34582) (not e!41455))))

(assert (=> b!63187 (= res!34582 (and (= (size!2031 (_values!2071 (_2!1044 lt!26030))) (bvadd (mask!5994 (_2!1044 lt!26030)) #b00000000000000000000000000000001)) (= (size!2030 (_keys!3720 (_2!1044 lt!26030))) (size!2031 (_values!2071 (_2!1044 lt!26030)))) (bvsge (_size!367 (_2!1044 lt!26030)) #b00000000000000000000000000000000) (bvsle (_size!367 (_2!1044 lt!26030)) (bvadd (mask!5994 (_2!1044 lt!26030)) #b00000000000000000000000000000001))))))

(assert (= (and d!12991 res!34579) b!63187))

(assert (= (and b!63187 res!34582) b!63188))

(assert (= (and b!63188 res!34580) b!63189))

(assert (= (and b!63189 res!34581) b!63190))

(declare-fun m!56997 () Bool)

(assert (=> b!63189 m!56997))

(declare-fun m!56999 () Bool)

(assert (=> d!12991 m!56999))

(assert (=> b!63188 m!56997))

(assert (=> d!12651 d!12991))

(declare-fun d!12993 () Bool)

(declare-fun e!41457 () Bool)

(assert (=> d!12993 e!41457))

(declare-fun res!34583 () Bool)

(assert (=> d!12993 (=> res!34583 e!41457)))

(declare-fun lt!26480 () Bool)

(assert (=> d!12993 (= res!34583 (not lt!26480))))

(declare-fun lt!26483 () Bool)

(assert (=> d!12993 (= lt!26480 lt!26483)))

(declare-fun lt!26481 () Unit!1689)

(declare-fun e!41456 () Unit!1689)

(assert (=> d!12993 (= lt!26481 e!41456)))

(declare-fun c!8522 () Bool)

(assert (=> d!12993 (= c!8522 lt!26483)))

(assert (=> d!12993 (= lt!26483 (containsKey!129 (toList!710 lt!26321) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12993 (= (contains!700 lt!26321 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) lt!26480)))

(declare-fun b!63191 () Bool)

(declare-fun lt!26482 () Unit!1689)

(assert (=> b!63191 (= e!41456 lt!26482)))

(assert (=> b!63191 (= lt!26482 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26321) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63191 (isDefined!79 (getValueByKey!125 (toList!710 lt!26321) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63192 () Bool)

(declare-fun Unit!1724 () Unit!1689)

(assert (=> b!63192 (= e!41456 Unit!1724)))

(declare-fun b!63193 () Bool)

(assert (=> b!63193 (= e!41457 (isDefined!79 (getValueByKey!125 (toList!710 lt!26321) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12993 c!8522) b!63191))

(assert (= (and d!12993 (not c!8522)) b!63192))

(assert (= (and d!12993 (not res!34583)) b!63193))

(assert (=> d!12993 m!56007))

(declare-fun m!57001 () Bool)

(assert (=> d!12993 m!57001))

(assert (=> b!63191 m!56007))

(declare-fun m!57003 () Bool)

(assert (=> b!63191 m!57003))

(assert (=> b!63191 m!56007))

(assert (=> b!63191 m!56533))

(assert (=> b!63191 m!56533))

(declare-fun m!57005 () Bool)

(assert (=> b!63191 m!57005))

(assert (=> b!63193 m!56007))

(assert (=> b!63193 m!56533))

(assert (=> b!63193 m!56533))

(assert (=> b!63193 m!57005))

(assert (=> b!62853 d!12993))

(declare-fun d!12995 () Bool)

(declare-fun e!41459 () Bool)

(assert (=> d!12995 e!41459))

(declare-fun res!34584 () Bool)

(assert (=> d!12995 (=> res!34584 e!41459)))

(declare-fun lt!26484 () Bool)

(assert (=> d!12995 (= res!34584 (not lt!26484))))

(declare-fun lt!26487 () Bool)

(assert (=> d!12995 (= lt!26484 lt!26487)))

(declare-fun lt!26485 () Unit!1689)

(declare-fun e!41458 () Unit!1689)

(assert (=> d!12995 (= lt!26485 e!41458)))

(declare-fun c!8523 () Bool)

(assert (=> d!12995 (= c!8523 lt!26487)))

(assert (=> d!12995 (= lt!26487 (containsKey!129 (toList!710 lt!26286) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12995 (= (contains!700 lt!26286 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26484)))

(declare-fun b!63194 () Bool)

(declare-fun lt!26486 () Unit!1689)

(assert (=> b!63194 (= e!41458 lt!26486)))

(assert (=> b!63194 (= lt!26486 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26286) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63194 (isDefined!79 (getValueByKey!125 (toList!710 lt!26286) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63195 () Bool)

(declare-fun Unit!1725 () Unit!1689)

(assert (=> b!63195 (= e!41458 Unit!1725)))

(declare-fun b!63196 () Bool)

(assert (=> b!63196 (= e!41459 (isDefined!79 (getValueByKey!125 (toList!710 lt!26286) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12995 c!8523) b!63194))

(assert (= (and d!12995 (not c!8523)) b!63195))

(assert (= (and d!12995 (not res!34584)) b!63196))

(declare-fun m!57007 () Bool)

(assert (=> d!12995 m!57007))

(declare-fun m!57009 () Bool)

(assert (=> b!63194 m!57009))

(declare-fun m!57011 () Bool)

(assert (=> b!63194 m!57011))

(assert (=> b!63194 m!57011))

(declare-fun m!57013 () Bool)

(assert (=> b!63194 m!57013))

(assert (=> b!63196 m!57011))

(assert (=> b!63196 m!57011))

(assert (=> b!63196 m!57013))

(assert (=> bm!4941 d!12995))

(assert (=> bm!4932 d!12761))

(declare-fun d!12997 () Bool)

(declare-fun e!41461 () Bool)

(assert (=> d!12997 e!41461))

(declare-fun res!34585 () Bool)

(assert (=> d!12997 (=> res!34585 e!41461)))

(declare-fun lt!26488 () Bool)

(assert (=> d!12997 (= res!34585 (not lt!26488))))

(declare-fun lt!26491 () Bool)

(assert (=> d!12997 (= lt!26488 lt!26491)))

(declare-fun lt!26489 () Unit!1689)

(declare-fun e!41460 () Unit!1689)

(assert (=> d!12997 (= lt!26489 e!41460)))

(declare-fun c!8524 () Bool)

(assert (=> d!12997 (= c!8524 lt!26491)))

(assert (=> d!12997 (= lt!26491 (containsKey!129 (toList!710 lt!25919) lt!25928))))

(assert (=> d!12997 (= (contains!700 lt!25919 lt!25928) lt!26488)))

(declare-fun b!63197 () Bool)

(declare-fun lt!26490 () Unit!1689)

(assert (=> b!63197 (= e!41460 lt!26490)))

(assert (=> b!63197 (= lt!26490 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25919) lt!25928))))

(assert (=> b!63197 (isDefined!79 (getValueByKey!125 (toList!710 lt!25919) lt!25928))))

(declare-fun b!63198 () Bool)

(declare-fun Unit!1726 () Unit!1689)

(assert (=> b!63198 (= e!41460 Unit!1726)))

(declare-fun b!63199 () Bool)

(assert (=> b!63199 (= e!41461 (isDefined!79 (getValueByKey!125 (toList!710 lt!25919) lt!25928)))))

(assert (= (and d!12997 c!8524) b!63197))

(assert (= (and d!12997 (not c!8524)) b!63198))

(assert (= (and d!12997 (not res!34585)) b!63199))

(declare-fun m!57015 () Bool)

(assert (=> d!12997 m!57015))

(declare-fun m!57017 () Bool)

(assert (=> b!63197 m!57017))

(assert (=> b!63197 m!56121))

(assert (=> b!63197 m!56121))

(declare-fun m!57019 () Bool)

(assert (=> b!63197 m!57019))

(assert (=> b!63199 m!56121))

(assert (=> b!63199 m!56121))

(assert (=> b!63199 m!57019))

(assert (=> d!12703 d!12997))

(assert (=> d!12703 d!12681))

(assert (=> d!12703 d!12697))

(declare-fun d!12999 () Bool)

(assert (=> d!12999 (= (apply!68 (+!83 lt!25919 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!25928) (apply!68 lt!25919 lt!25928))))

(assert (=> d!12999 true))

(declare-fun _$34!777 () Unit!1689)

(assert (=> d!12999 (= (choose!342 lt!25919 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))) lt!25928) _$34!777)))

(declare-fun bs!2753 () Bool)

(assert (= bs!2753 d!12999))

(assert (=> bs!2753 m!55811))

(assert (=> bs!2753 m!55811))

(assert (=> bs!2753 m!55813))

(assert (=> bs!2753 m!55823))

(assert (=> d!12703 d!12999))

(assert (=> d!12703 d!12695))

(declare-fun e!41469 () SeekEntryResult!239)

(declare-fun b!63212 () Bool)

(assert (=> b!63212 (= e!41469 (seekKeyOrZeroReturnVacant!0 (bvadd (x!10317 lt!26050) #b00000000000000000000000000000001) (nextIndex!0 (index!3083 lt!26050) (x!10317 lt!26050) (mask!5994 newMap!16)) (index!3083 lt!26050) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!63213 () Bool)

(declare-fun c!8532 () Bool)

(declare-fun lt!26496 () (_ BitVec 64))

(assert (=> b!63213 (= c!8532 (= lt!26496 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41468 () SeekEntryResult!239)

(assert (=> b!63213 (= e!41468 e!41469)))

(declare-fun b!63214 () Bool)

(assert (=> b!63214 (= e!41468 (Found!239 (index!3083 lt!26050)))))

(declare-fun lt!26497 () SeekEntryResult!239)

(declare-fun d!13001 () Bool)

(assert (=> d!13001 (and (or ((_ is Undefined!239) lt!26497) (not ((_ is Found!239) lt!26497)) (and (bvsge (index!3082 lt!26497) #b00000000000000000000000000000000) (bvslt (index!3082 lt!26497) (size!2030 (_keys!3720 newMap!16))))) (or ((_ is Undefined!239) lt!26497) ((_ is Found!239) lt!26497) (not ((_ is MissingVacant!239) lt!26497)) (not (= (index!3084 lt!26497) (index!3083 lt!26050))) (and (bvsge (index!3084 lt!26497) #b00000000000000000000000000000000) (bvslt (index!3084 lt!26497) (size!2030 (_keys!3720 newMap!16))))) (or ((_ is Undefined!239) lt!26497) (ite ((_ is Found!239) lt!26497) (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26497)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (and ((_ is MissingVacant!239) lt!26497) (= (index!3084 lt!26497) (index!3083 lt!26050)) (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3084 lt!26497)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!41470 () SeekEntryResult!239)

(assert (=> d!13001 (= lt!26497 e!41470)))

(declare-fun c!8531 () Bool)

(assert (=> d!13001 (= c!8531 (bvsge (x!10317 lt!26050) #b01111111111111111111111111111110))))

(assert (=> d!13001 (= lt!26496 (select (arr!1798 (_keys!3720 newMap!16)) (index!3083 lt!26050)))))

(assert (=> d!13001 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13001 (= (seekKeyOrZeroReturnVacant!0 (x!10317 lt!26050) (index!3083 lt!26050) (index!3083 lt!26050) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)) lt!26497)))

(declare-fun b!63215 () Bool)

(assert (=> b!63215 (= e!41470 Undefined!239)))

(declare-fun b!63216 () Bool)

(assert (=> b!63216 (= e!41470 e!41468)))

(declare-fun c!8533 () Bool)

(assert (=> b!63216 (= c!8533 (= lt!26496 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!63217 () Bool)

(assert (=> b!63217 (= e!41469 (MissingVacant!239 (index!3083 lt!26050)))))

(assert (= (and d!13001 c!8531) b!63215))

(assert (= (and d!13001 (not c!8531)) b!63216))

(assert (= (and b!63216 c!8533) b!63214))

(assert (= (and b!63216 (not c!8533)) b!63213))

(assert (= (and b!63213 c!8532) b!63217))

(assert (= (and b!63213 (not c!8532)) b!63212))

(declare-fun m!57021 () Bool)

(assert (=> b!63212 m!57021))

(assert (=> b!63212 m!57021))

(assert (=> b!63212 m!55705))

(declare-fun m!57023 () Bool)

(assert (=> b!63212 m!57023))

(declare-fun m!57025 () Bool)

(assert (=> d!13001 m!57025))

(declare-fun m!57027 () Bool)

(assert (=> d!13001 m!57027))

(assert (=> d!13001 m!55947))

(assert (=> d!13001 m!55941))

(assert (=> b!62570 d!13001))

(declare-fun b!63218 () Bool)

(declare-fun c!8534 () Bool)

(assert (=> b!63218 (= c!8534 (and (not (= (bvand (extraKeys!1967 (_2!1044 lt!26030)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 (_2!1044 lt!26030)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41480 () ListLongMap!1389)

(declare-fun e!41473 () ListLongMap!1389)

(assert (=> b!63218 (= e!41480 e!41473)))

(declare-fun bm!4980 () Bool)

(declare-fun call!4986 () ListLongMap!1389)

(declare-fun call!4983 () ListLongMap!1389)

(assert (=> bm!4980 (= call!4986 call!4983)))

(declare-fun b!63219 () Bool)

(declare-fun e!41481 () Bool)

(declare-fun e!41483 () Bool)

(assert (=> b!63219 (= e!41481 e!41483)))

(declare-fun c!8537 () Bool)

(assert (=> b!63219 (= c!8537 (not (= (bvand (extraKeys!1967 (_2!1044 lt!26030)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63220 () Bool)

(declare-fun e!41472 () Bool)

(declare-fun e!41476 () Bool)

(assert (=> b!63220 (= e!41472 e!41476)))

(declare-fun res!34588 () Bool)

(assert (=> b!63220 (=> (not res!34588) (not e!41476))))

(declare-fun lt!26514 () ListLongMap!1389)

(assert (=> b!63220 (= res!34588 (contains!700 lt!26514 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000)))))

(assert (=> b!63220 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))))))

(declare-fun b!63221 () Bool)

(assert (=> b!63221 (= e!41476 (= (apply!68 lt!26514 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 (_values!2071 (_2!1044 lt!26030))) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 (_2!1044 lt!26030)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63221 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_values!2071 (_2!1044 lt!26030)))))))

(assert (=> b!63221 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))))))

(declare-fun b!63222 () Bool)

(declare-fun e!41475 () Bool)

(declare-fun e!41471 () Bool)

(assert (=> b!63222 (= e!41475 e!41471)))

(declare-fun res!34589 () Bool)

(declare-fun call!4982 () Bool)

(assert (=> b!63222 (= res!34589 call!4982)))

(assert (=> b!63222 (=> (not res!34589) (not e!41471))))

(declare-fun bm!4981 () Bool)

(declare-fun call!4985 () ListLongMap!1389)

(assert (=> bm!4981 (= call!4983 call!4985)))

(declare-fun b!63223 () Bool)

(declare-fun e!41474 () Bool)

(assert (=> b!63223 (= e!41474 (= (apply!68 lt!26514 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 (_2!1044 lt!26030))))))

(declare-fun b!63224 () Bool)

(declare-fun res!34594 () Bool)

(assert (=> b!63224 (=> (not res!34594) (not e!41481))))

(assert (=> b!63224 (= res!34594 e!41472)))

(declare-fun res!34593 () Bool)

(assert (=> b!63224 (=> res!34593 e!41472)))

(declare-fun e!41477 () Bool)

(assert (=> b!63224 (= res!34593 (not e!41477))))

(declare-fun res!34587 () Bool)

(assert (=> b!63224 (=> (not res!34587) (not e!41477))))

(assert (=> b!63224 (= res!34587 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))))))

(declare-fun b!63225 () Bool)

(declare-fun e!41482 () Unit!1689)

(declare-fun Unit!1727 () Unit!1689)

(assert (=> b!63225 (= e!41482 Unit!1727)))

(declare-fun b!63226 () Bool)

(declare-fun call!4988 () Bool)

(assert (=> b!63226 (= e!41483 (not call!4988))))

(declare-fun b!63227 () Bool)

(declare-fun e!41479 () ListLongMap!1389)

(declare-fun call!4987 () ListLongMap!1389)

(assert (=> b!63227 (= e!41479 (+!83 call!4987 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (_2!1044 lt!26030)))))))

(declare-fun b!63228 () Bool)

(declare-fun res!34586 () Bool)

(assert (=> b!63228 (=> (not res!34586) (not e!41481))))

(assert (=> b!63228 (= res!34586 e!41475)))

(declare-fun c!8538 () Bool)

(assert (=> b!63228 (= c!8538 (not (= (bvand (extraKeys!1967 (_2!1044 lt!26030)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63229 () Bool)

(assert (=> b!63229 (= e!41471 (= (apply!68 lt!26514 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 (_2!1044 lt!26030))))))

(declare-fun b!63230 () Bool)

(declare-fun lt!26515 () Unit!1689)

(assert (=> b!63230 (= e!41482 lt!26515)))

(declare-fun lt!26506 () ListLongMap!1389)

(assert (=> b!63230 (= lt!26506 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (_2!1044 lt!26030)) (_values!2071 (_2!1044 lt!26030)) (mask!5994 (_2!1044 lt!26030)) (extraKeys!1967 (_2!1044 lt!26030)) (zeroValue!2000 (_2!1044 lt!26030)) (minValue!2000 (_2!1044 lt!26030)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1044 lt!26030))))))

(declare-fun lt!26519 () (_ BitVec 64))

(assert (=> b!63230 (= lt!26519 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26516 () (_ BitVec 64))

(assert (=> b!63230 (= lt!26516 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000))))

(declare-fun lt!26503 () Unit!1689)

(assert (=> b!63230 (= lt!26503 (addStillContains!44 lt!26506 lt!26519 (zeroValue!2000 (_2!1044 lt!26030)) lt!26516))))

(assert (=> b!63230 (contains!700 (+!83 lt!26506 (tuple2!2067 lt!26519 (zeroValue!2000 (_2!1044 lt!26030)))) lt!26516)))

(declare-fun lt!26517 () Unit!1689)

(assert (=> b!63230 (= lt!26517 lt!26503)))

(declare-fun lt!26501 () ListLongMap!1389)

(assert (=> b!63230 (= lt!26501 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (_2!1044 lt!26030)) (_values!2071 (_2!1044 lt!26030)) (mask!5994 (_2!1044 lt!26030)) (extraKeys!1967 (_2!1044 lt!26030)) (zeroValue!2000 (_2!1044 lt!26030)) (minValue!2000 (_2!1044 lt!26030)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1044 lt!26030))))))

(declare-fun lt!26507 () (_ BitVec 64))

(assert (=> b!63230 (= lt!26507 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26500 () (_ BitVec 64))

(assert (=> b!63230 (= lt!26500 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000))))

(declare-fun lt!26499 () Unit!1689)

(assert (=> b!63230 (= lt!26499 (addApplyDifferent!44 lt!26501 lt!26507 (minValue!2000 (_2!1044 lt!26030)) lt!26500))))

(assert (=> b!63230 (= (apply!68 (+!83 lt!26501 (tuple2!2067 lt!26507 (minValue!2000 (_2!1044 lt!26030)))) lt!26500) (apply!68 lt!26501 lt!26500))))

(declare-fun lt!26502 () Unit!1689)

(assert (=> b!63230 (= lt!26502 lt!26499)))

(declare-fun lt!26508 () ListLongMap!1389)

(assert (=> b!63230 (= lt!26508 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (_2!1044 lt!26030)) (_values!2071 (_2!1044 lt!26030)) (mask!5994 (_2!1044 lt!26030)) (extraKeys!1967 (_2!1044 lt!26030)) (zeroValue!2000 (_2!1044 lt!26030)) (minValue!2000 (_2!1044 lt!26030)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1044 lt!26030))))))

(declare-fun lt!26518 () (_ BitVec 64))

(assert (=> b!63230 (= lt!26518 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26511 () (_ BitVec 64))

(assert (=> b!63230 (= lt!26511 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000))))

(declare-fun lt!26509 () Unit!1689)

(assert (=> b!63230 (= lt!26509 (addApplyDifferent!44 lt!26508 lt!26518 (zeroValue!2000 (_2!1044 lt!26030)) lt!26511))))

(assert (=> b!63230 (= (apply!68 (+!83 lt!26508 (tuple2!2067 lt!26518 (zeroValue!2000 (_2!1044 lt!26030)))) lt!26511) (apply!68 lt!26508 lt!26511))))

(declare-fun lt!26512 () Unit!1689)

(assert (=> b!63230 (= lt!26512 lt!26509)))

(declare-fun lt!26504 () ListLongMap!1389)

(assert (=> b!63230 (= lt!26504 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (_2!1044 lt!26030)) (_values!2071 (_2!1044 lt!26030)) (mask!5994 (_2!1044 lt!26030)) (extraKeys!1967 (_2!1044 lt!26030)) (zeroValue!2000 (_2!1044 lt!26030)) (minValue!2000 (_2!1044 lt!26030)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1044 lt!26030))))))

(declare-fun lt!26510 () (_ BitVec 64))

(assert (=> b!63230 (= lt!26510 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26513 () (_ BitVec 64))

(assert (=> b!63230 (= lt!26513 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000))))

(assert (=> b!63230 (= lt!26515 (addApplyDifferent!44 lt!26504 lt!26510 (minValue!2000 (_2!1044 lt!26030)) lt!26513))))

(assert (=> b!63230 (= (apply!68 (+!83 lt!26504 (tuple2!2067 lt!26510 (minValue!2000 (_2!1044 lt!26030)))) lt!26513) (apply!68 lt!26504 lt!26513))))

(declare-fun b!63231 () Bool)

(assert (=> b!63231 (= e!41477 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000)))))

(declare-fun bm!4982 () Bool)

(declare-fun call!4984 () ListLongMap!1389)

(assert (=> bm!4982 (= call!4984 call!4987)))

(declare-fun b!63232 () Bool)

(assert (=> b!63232 (= e!41483 e!41474)))

(declare-fun res!34590 () Bool)

(assert (=> b!63232 (= res!34590 call!4988)))

(assert (=> b!63232 (=> (not res!34590) (not e!41474))))

(declare-fun bm!4983 () Bool)

(assert (=> bm!4983 (= call!4985 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (_2!1044 lt!26030)) (_values!2071 (_2!1044 lt!26030)) (mask!5994 (_2!1044 lt!26030)) (extraKeys!1967 (_2!1044 lt!26030)) (zeroValue!2000 (_2!1044 lt!26030)) (minValue!2000 (_2!1044 lt!26030)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1044 lt!26030))))))

(declare-fun c!8539 () Bool)

(declare-fun c!8536 () Bool)

(declare-fun bm!4984 () Bool)

(assert (=> bm!4984 (= call!4987 (+!83 (ite c!8536 call!4985 (ite c!8539 call!4983 call!4986)) (ite (or c!8536 c!8539) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (_2!1044 lt!26030))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (_2!1044 lt!26030))))))))

(declare-fun b!63233 () Bool)

(assert (=> b!63233 (= e!41479 e!41480)))

(assert (=> b!63233 (= c!8539 (and (not (= (bvand (extraKeys!1967 (_2!1044 lt!26030)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 (_2!1044 lt!26030)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!13003 () Bool)

(assert (=> d!13003 e!41481))

(declare-fun res!34591 () Bool)

(assert (=> d!13003 (=> (not res!34591) (not e!41481))))

(assert (=> d!13003 (= res!34591 (or (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))))))))

(declare-fun lt!26498 () ListLongMap!1389)

(assert (=> d!13003 (= lt!26514 lt!26498)))

(declare-fun lt!26505 () Unit!1689)

(assert (=> d!13003 (= lt!26505 e!41482)))

(declare-fun c!8535 () Bool)

(declare-fun e!41478 () Bool)

(assert (=> d!13003 (= c!8535 e!41478)))

(declare-fun res!34592 () Bool)

(assert (=> d!13003 (=> (not res!34592) (not e!41478))))

(assert (=> d!13003 (= res!34592 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))))))

(assert (=> d!13003 (= lt!26498 e!41479)))

(assert (=> d!13003 (= c!8536 (and (not (= (bvand (extraKeys!1967 (_2!1044 lt!26030)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 (_2!1044 lt!26030)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13003 (validMask!0 (mask!5994 (_2!1044 lt!26030)))))

(assert (=> d!13003 (= (getCurrentListMap!407 (_keys!3720 (_2!1044 lt!26030)) (_values!2071 (_2!1044 lt!26030)) (mask!5994 (_2!1044 lt!26030)) (extraKeys!1967 (_2!1044 lt!26030)) (zeroValue!2000 (_2!1044 lt!26030)) (minValue!2000 (_2!1044 lt!26030)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1044 lt!26030))) lt!26514)))

(declare-fun bm!4979 () Bool)

(assert (=> bm!4979 (= call!4988 (contains!700 lt!26514 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63234 () Bool)

(assert (=> b!63234 (= e!41480 call!4984)))

(declare-fun b!63235 () Bool)

(assert (=> b!63235 (= e!41473 call!4984)))

(declare-fun bm!4985 () Bool)

(assert (=> bm!4985 (= call!4982 (contains!700 lt!26514 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63236 () Bool)

(assert (=> b!63236 (= e!41473 call!4986)))

(declare-fun b!63237 () Bool)

(assert (=> b!63237 (= e!41475 (not call!4982))))

(declare-fun b!63238 () Bool)

(assert (=> b!63238 (= e!41478 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000)))))

(assert (= (and d!13003 c!8536) b!63227))

(assert (= (and d!13003 (not c!8536)) b!63233))

(assert (= (and b!63233 c!8539) b!63234))

(assert (= (and b!63233 (not c!8539)) b!63218))

(assert (= (and b!63218 c!8534) b!63235))

(assert (= (and b!63218 (not c!8534)) b!63236))

(assert (= (or b!63235 b!63236) bm!4980))

(assert (= (or b!63234 bm!4980) bm!4981))

(assert (= (or b!63234 b!63235) bm!4982))

(assert (= (or b!63227 bm!4981) bm!4983))

(assert (= (or b!63227 bm!4982) bm!4984))

(assert (= (and d!13003 res!34592) b!63238))

(assert (= (and d!13003 c!8535) b!63230))

(assert (= (and d!13003 (not c!8535)) b!63225))

(assert (= (and d!13003 res!34591) b!63224))

(assert (= (and b!63224 res!34587) b!63231))

(assert (= (and b!63224 (not res!34593)) b!63220))

(assert (= (and b!63220 res!34588) b!63221))

(assert (= (and b!63224 res!34594) b!63228))

(assert (= (and b!63228 c!8538) b!63222))

(assert (= (and b!63228 (not c!8538)) b!63237))

(assert (= (and b!63222 res!34589) b!63229))

(assert (= (or b!63222 b!63237) bm!4985))

(assert (= (and b!63228 res!34586) b!63219))

(assert (= (and b!63219 c!8537) b!63232))

(assert (= (and b!63219 (not c!8537)) b!63226))

(assert (= (and b!63232 res!34590) b!63223))

(assert (= (or b!63232 b!63226) bm!4979))

(declare-fun b_lambda!2825 () Bool)

(assert (=> (not b_lambda!2825) (not b!63221)))

(declare-fun tb!1385 () Bool)

(declare-fun t!4874 () Bool)

(assert (=> (and b!62232 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 (_2!1044 lt!26030))) t!4874) tb!1385))

(declare-fun result!2467 () Bool)

(assert (=> tb!1385 (= result!2467 tp_is_empty!2415)))

(assert (=> b!63221 t!4874))

(declare-fun b_and!3857 () Bool)

(assert (= b_and!3853 (and (=> t!4874 result!2467) b_and!3857)))

(declare-fun t!4876 () Bool)

(declare-fun tb!1387 () Bool)

(assert (=> (and b!62236 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (_2!1044 lt!26030))) t!4876) tb!1387))

(declare-fun result!2469 () Bool)

(assert (= result!2469 result!2467))

(assert (=> b!63221 t!4876))

(declare-fun b_and!3859 () Bool)

(assert (= b_and!3855 (and (=> t!4876 result!2469) b_and!3859)))

(declare-fun m!57029 () Bool)

(assert (=> b!63227 m!57029))

(declare-fun m!57031 () Bool)

(assert (=> b!63229 m!57031))

(declare-fun m!57033 () Bool)

(assert (=> bm!4984 m!57033))

(assert (=> b!63238 m!56509))

(assert (=> b!63238 m!56509))

(assert (=> b!63238 m!56511))

(declare-fun m!57035 () Bool)

(assert (=> bm!4983 m!57035))

(assert (=> b!63231 m!56509))

(assert (=> b!63231 m!56509))

(assert (=> b!63231 m!56511))

(assert (=> b!63220 m!56509))

(assert (=> b!63220 m!56509))

(declare-fun m!57037 () Bool)

(assert (=> b!63220 m!57037))

(declare-fun m!57039 () Bool)

(assert (=> bm!4979 m!57039))

(assert (=> b!63230 m!56509))

(declare-fun m!57041 () Bool)

(assert (=> b!63230 m!57041))

(declare-fun m!57043 () Bool)

(assert (=> b!63230 m!57043))

(declare-fun m!57045 () Bool)

(assert (=> b!63230 m!57045))

(declare-fun m!57047 () Bool)

(assert (=> b!63230 m!57047))

(declare-fun m!57049 () Bool)

(assert (=> b!63230 m!57049))

(declare-fun m!57051 () Bool)

(assert (=> b!63230 m!57051))

(declare-fun m!57053 () Bool)

(assert (=> b!63230 m!57053))

(declare-fun m!57055 () Bool)

(assert (=> b!63230 m!57055))

(declare-fun m!57057 () Bool)

(assert (=> b!63230 m!57057))

(declare-fun m!57059 () Bool)

(assert (=> b!63230 m!57059))

(declare-fun m!57061 () Bool)

(assert (=> b!63230 m!57061))

(assert (=> b!63230 m!57047))

(declare-fun m!57063 () Bool)

(assert (=> b!63230 m!57063))

(declare-fun m!57065 () Bool)

(assert (=> b!63230 m!57065))

(assert (=> b!63230 m!57053))

(declare-fun m!57067 () Bool)

(assert (=> b!63230 m!57067))

(assert (=> b!63230 m!57041))

(assert (=> b!63230 m!57065))

(declare-fun m!57069 () Bool)

(assert (=> b!63230 m!57069))

(assert (=> b!63230 m!57035))

(assert (=> d!13003 m!56999))

(declare-fun m!57071 () Bool)

(assert (=> bm!4985 m!57071))

(declare-fun m!57073 () Bool)

(assert (=> b!63223 m!57073))

(declare-fun m!57075 () Bool)

(assert (=> b!63221 m!57075))

(assert (=> b!63221 m!56509))

(assert (=> b!63221 m!56509))

(declare-fun m!57077 () Bool)

(assert (=> b!63221 m!57077))

(declare-fun m!57079 () Bool)

(assert (=> b!63221 m!57079))

(assert (=> b!63221 m!57075))

(declare-fun m!57081 () Bool)

(assert (=> b!63221 m!57081))

(assert (=> b!63221 m!57079))

(assert (=> d!12663 d!13003))

(declare-fun d!13005 () Bool)

(declare-fun isEmpty!306 (List!1463) Bool)

(assert (=> d!13005 (= (isEmpty!304 lt!26066) (isEmpty!306 (toList!710 lt!26066)))))

(declare-fun bs!2754 () Bool)

(assert (= bs!2754 d!13005))

(declare-fun m!57083 () Bool)

(assert (=> bs!2754 m!57083))

(assert (=> b!62603 d!13005))

(assert (=> d!12759 d!12615))

(assert (=> b!62662 d!12753))

(declare-fun d!13007 () Bool)

(assert (=> d!13007 (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931))))

(declare-fun lt!26520 () Unit!1689)

(assert (=> d!13007 (= lt!26520 (choose!340 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931))))

(declare-fun e!41484 () Bool)

(assert (=> d!13007 e!41484))

(declare-fun res!34595 () Bool)

(assert (=> d!13007 (=> (not res!34595) (not e!41484))))

(assert (=> d!13007 (= res!34595 (isStrictlySorted!281 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> d!13007 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931) lt!26520)))

(declare-fun b!63239 () Bool)

(assert (=> b!63239 (= e!41484 (containsKey!129 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931))))

(assert (= (and d!13007 res!34595) b!63239))

(assert (=> d!13007 m!56117))

(assert (=> d!13007 m!56117))

(assert (=> d!13007 m!56119))

(declare-fun m!57085 () Bool)

(assert (=> d!13007 m!57085))

(declare-fun m!57087 () Bool)

(assert (=> d!13007 m!57087))

(assert (=> b!63239 m!56113))

(assert (=> b!62700 d!13007))

(assert (=> b!62700 d!12779))

(assert (=> b!62700 d!12781))

(declare-fun d!13009 () Bool)

(declare-fun e!41486 () Bool)

(assert (=> d!13009 e!41486))

(declare-fun res!34596 () Bool)

(assert (=> d!13009 (=> res!34596 e!41486)))

(declare-fun lt!26521 () Bool)

(assert (=> d!13009 (= res!34596 (not lt!26521))))

(declare-fun lt!26524 () Bool)

(assert (=> d!13009 (= lt!26521 lt!26524)))

(declare-fun lt!26522 () Unit!1689)

(declare-fun e!41485 () Unit!1689)

(assert (=> d!13009 (= lt!26522 e!41485)))

(declare-fun c!8540 () Bool)

(assert (=> d!13009 (= c!8540 lt!26524)))

(assert (=> d!13009 (= lt!26524 (containsKey!129 (toList!710 lt!26286) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!13009 (= (contains!700 lt!26286 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) lt!26521)))

(declare-fun b!63240 () Bool)

(declare-fun lt!26523 () Unit!1689)

(assert (=> b!63240 (= e!41485 lt!26523)))

(assert (=> b!63240 (= lt!26523 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26286) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63240 (isDefined!79 (getValueByKey!125 (toList!710 lt!26286) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63241 () Bool)

(declare-fun Unit!1728 () Unit!1689)

(assert (=> b!63241 (= e!41485 Unit!1728)))

(declare-fun b!63242 () Bool)

(assert (=> b!63242 (= e!41486 (isDefined!79 (getValueByKey!125 (toList!710 lt!26286) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!13009 c!8540) b!63240))

(assert (= (and d!13009 (not c!8540)) b!63241))

(assert (= (and d!13009 (not res!34596)) b!63242))

(assert (=> d!13009 m!56007))

(declare-fun m!57089 () Bool)

(assert (=> d!13009 m!57089))

(assert (=> b!63240 m!56007))

(declare-fun m!57091 () Bool)

(assert (=> b!63240 m!57091))

(assert (=> b!63240 m!56007))

(assert (=> b!63240 m!56813))

(assert (=> b!63240 m!56813))

(declare-fun m!57093 () Bool)

(assert (=> b!63240 m!57093))

(assert (=> b!63242 m!56007))

(assert (=> b!63242 m!56813))

(assert (=> b!63242 m!56813))

(assert (=> b!63242 m!57093))

(assert (=> b!62813 d!13009))

(declare-fun d!13011 () Bool)

(declare-fun c!8541 () Bool)

(assert (=> d!13011 (= c!8541 (and ((_ is Cons!1459) (toList!710 lt!26113)) (= (_1!1043 (h!2042 (toList!710 lt!26113))) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun e!41487 () Option!131)

(assert (=> d!13011 (= (getValueByKey!125 (toList!710 lt!26113) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) e!41487)))

(declare-fun b!63245 () Bool)

(declare-fun e!41488 () Option!131)

(assert (=> b!63245 (= e!41488 (getValueByKey!125 (t!4861 (toList!710 lt!26113)) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63246 () Bool)

(assert (=> b!63246 (= e!41488 None!129)))

(declare-fun b!63244 () Bool)

(assert (=> b!63244 (= e!41487 e!41488)))

(declare-fun c!8542 () Bool)

(assert (=> b!63244 (= c!8542 (and ((_ is Cons!1459) (toList!710 lt!26113)) (not (= (_1!1043 (h!2042 (toList!710 lt!26113))) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun b!63243 () Bool)

(assert (=> b!63243 (= e!41487 (Some!130 (_2!1043 (h!2042 (toList!710 lt!26113)))))))

(assert (= (and d!13011 c!8541) b!63243))

(assert (= (and d!13011 (not c!8541)) b!63244))

(assert (= (and b!63244 c!8542) b!63245))

(assert (= (and b!63244 (not c!8542)) b!63246))

(declare-fun m!57095 () Bool)

(assert (=> b!63245 m!57095))

(assert (=> b!62691 d!13011))

(declare-fun d!13013 () Bool)

(assert (=> d!13013 (= (get!1098 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2418 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62847 d!13013))

(assert (=> b!62771 d!12775))

(declare-fun d!13015 () Bool)

(declare-fun c!8543 () Bool)

(assert (=> d!13015 (= c!8543 (and ((_ is Cons!1459) (toList!710 lt!26331)) (= (_1!1043 (h!2042 (toList!710 lt!26331))) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun e!41489 () Option!131)

(assert (=> d!13015 (= (getValueByKey!125 (toList!710 lt!26331) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) e!41489)))

(declare-fun b!63249 () Bool)

(declare-fun e!41490 () Option!131)

(assert (=> b!63249 (= e!41490 (getValueByKey!125 (t!4861 (toList!710 lt!26331)) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63250 () Bool)

(assert (=> b!63250 (= e!41490 None!129)))

(declare-fun b!63248 () Bool)

(assert (=> b!63248 (= e!41489 e!41490)))

(declare-fun c!8544 () Bool)

(assert (=> b!63248 (= c!8544 (and ((_ is Cons!1459) (toList!710 lt!26331)) (not (= (_1!1043 (h!2042 (toList!710 lt!26331))) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun b!63247 () Bool)

(assert (=> b!63247 (= e!41489 (Some!130 (_2!1043 (h!2042 (toList!710 lt!26331)))))))

(assert (= (and d!13015 c!8543) b!63247))

(assert (= (and d!13015 (not c!8543)) b!63248))

(assert (= (and b!63248 c!8544) b!63249))

(assert (= (and b!63248 (not c!8544)) b!63250))

(declare-fun m!57097 () Bool)

(assert (=> b!63249 m!57097))

(assert (=> b!62875 d!13015))

(declare-fun d!13017 () Bool)

(declare-fun e!41491 () Bool)

(assert (=> d!13017 e!41491))

(declare-fun res!34597 () Bool)

(assert (=> d!13017 (=> (not res!34597) (not e!41491))))

(declare-fun lt!26525 () ListLongMap!1389)

(assert (=> d!13017 (= res!34597 (contains!700 lt!26525 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(declare-fun lt!26528 () List!1463)

(assert (=> d!13017 (= lt!26525 (ListLongMap!1390 lt!26528))))

(declare-fun lt!26527 () Unit!1689)

(declare-fun lt!26526 () Unit!1689)

(assert (=> d!13017 (= lt!26527 lt!26526)))

(assert (=> d!13017 (= (getValueByKey!125 lt!26528 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!130 (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13017 (= lt!26526 (lemmaContainsTupThenGetReturnValue!44 lt!26528 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13017 (= lt!26528 (insertStrictlySorted!46 (toList!710 call!4942) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13017 (= (+!83 call!4942 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26525)))

(declare-fun b!63251 () Bool)

(declare-fun res!34598 () Bool)

(assert (=> b!63251 (=> (not res!34598) (not e!41491))))

(assert (=> b!63251 (= res!34598 (= (getValueByKey!125 (toList!710 lt!26525) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!130 (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(declare-fun b!63252 () Bool)

(assert (=> b!63252 (= e!41491 (contains!703 (toList!710 lt!26525) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))

(assert (= (and d!13017 res!34597) b!63251))

(assert (= (and b!63251 res!34598) b!63252))

(declare-fun m!57099 () Bool)

(assert (=> d!13017 m!57099))

(declare-fun m!57101 () Bool)

(assert (=> d!13017 m!57101))

(declare-fun m!57103 () Bool)

(assert (=> d!13017 m!57103))

(declare-fun m!57105 () Bool)

(assert (=> d!13017 m!57105))

(declare-fun m!57107 () Bool)

(assert (=> b!63251 m!57107))

(declare-fun m!57109 () Bool)

(assert (=> b!63252 m!57109))

(assert (=> b!62767 d!13017))

(declare-fun c!8545 () Bool)

(declare-fun d!13019 () Bool)

(assert (=> d!13019 (= c!8545 (and ((_ is Cons!1459) (toList!710 lt!26256)) (= (_1!1043 (h!2042 (toList!710 lt!26256))) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun e!41492 () Option!131)

(assert (=> d!13019 (= (getValueByKey!125 (toList!710 lt!26256) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) e!41492)))

(declare-fun b!63255 () Bool)

(declare-fun e!41493 () Option!131)

(assert (=> b!63255 (= e!41493 (getValueByKey!125 (t!4861 (toList!710 lt!26256)) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!63256 () Bool)

(assert (=> b!63256 (= e!41493 None!129)))

(declare-fun b!63254 () Bool)

(assert (=> b!63254 (= e!41492 e!41493)))

(declare-fun c!8546 () Bool)

(assert (=> b!63254 (= c!8546 (and ((_ is Cons!1459) (toList!710 lt!26256)) (not (= (_1!1043 (h!2042 (toList!710 lt!26256))) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))))

(declare-fun b!63253 () Bool)

(assert (=> b!63253 (= e!41492 (Some!130 (_2!1043 (h!2042 (toList!710 lt!26256)))))))

(assert (= (and d!13019 c!8545) b!63253))

(assert (= (and d!13019 (not c!8545)) b!63254))

(assert (= (and b!63254 c!8546) b!63255))

(assert (= (and b!63254 (not c!8546)) b!63256))

(declare-fun m!57111 () Bool)

(assert (=> b!63255 m!57111))

(assert (=> b!62788 d!13019))

(declare-fun d!13021 () Bool)

(declare-fun c!8547 () Bool)

(assert (=> d!13021 (= c!8547 (and ((_ is Cons!1459) (toList!710 lt!26105)) (= (_1!1043 (h!2042 (toList!710 lt!26105))) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!41494 () Option!131)

(assert (=> d!13021 (= (getValueByKey!125 (toList!710 lt!26105) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!41494)))

(declare-fun e!41495 () Option!131)

(declare-fun b!63259 () Bool)

(assert (=> b!63259 (= e!41495 (getValueByKey!125 (t!4861 (toList!710 lt!26105)) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63260 () Bool)

(assert (=> b!63260 (= e!41495 None!129)))

(declare-fun b!63258 () Bool)

(assert (=> b!63258 (= e!41494 e!41495)))

(declare-fun c!8548 () Bool)

(assert (=> b!63258 (= c!8548 (and ((_ is Cons!1459) (toList!710 lt!26105)) (not (= (_1!1043 (h!2042 (toList!710 lt!26105))) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63257 () Bool)

(assert (=> b!63257 (= e!41494 (Some!130 (_2!1043 (h!2042 (toList!710 lt!26105)))))))

(assert (= (and d!13021 c!8547) b!63257))

(assert (= (and d!13021 (not c!8547)) b!63258))

(assert (= (and b!63258 c!8548) b!63259))

(assert (= (and b!63258 (not c!8548)) b!63260))

(declare-fun m!57113 () Bool)

(assert (=> b!63259 m!57113))

(assert (=> b!62687 d!13021))

(declare-fun lt!26529 () Bool)

(declare-fun d!13023 () Bool)

(assert (=> d!13023 (= lt!26529 (select (content!67 (toList!710 lt!26131)) (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun e!41497 () Bool)

(assert (=> d!13023 (= lt!26529 e!41497)))

(declare-fun res!34600 () Bool)

(assert (=> d!13023 (=> (not res!34600) (not e!41497))))

(assert (=> d!13023 (= res!34600 ((_ is Cons!1459) (toList!710 lt!26131)))))

(assert (=> d!13023 (= (contains!703 (toList!710 lt!26131) (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!26529)))

(declare-fun b!63261 () Bool)

(declare-fun e!41496 () Bool)

(assert (=> b!63261 (= e!41497 e!41496)))

(declare-fun res!34599 () Bool)

(assert (=> b!63261 (=> res!34599 e!41496)))

(assert (=> b!63261 (= res!34599 (= (h!2042 (toList!710 lt!26131)) (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!63262 () Bool)

(assert (=> b!63262 (= e!41496 (contains!703 (t!4861 (toList!710 lt!26131)) (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(assert (= (and d!13023 res!34600) b!63261))

(assert (= (and b!63261 (not res!34599)) b!63262))

(declare-fun m!57115 () Bool)

(assert (=> d!13023 m!57115))

(declare-fun m!57117 () Bool)

(assert (=> d!13023 m!57117))

(declare-fun m!57119 () Bool)

(assert (=> b!63262 m!57119))

(assert (=> b!62704 d!13023))

(declare-fun d!13025 () Bool)

(declare-fun e!41498 () Bool)

(assert (=> d!13025 e!41498))

(declare-fun res!34601 () Bool)

(assert (=> d!13025 (=> (not res!34601) (not e!41498))))

(declare-fun lt!26530 () ListLongMap!1389)

(assert (=> d!13025 (= res!34601 (contains!700 lt!26530 (_1!1043 (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(declare-fun lt!26533 () List!1463)

(assert (=> d!13025 (= lt!26530 (ListLongMap!1390 lt!26533))))

(declare-fun lt!26532 () Unit!1689)

(declare-fun lt!26531 () Unit!1689)

(assert (=> d!13025 (= lt!26532 lt!26531)))

(assert (=> d!13025 (= (getValueByKey!125 lt!26533 (_1!1043 (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))) (Some!130 (_2!1043 (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(assert (=> d!13025 (= lt!26531 (lemmaContainsTupThenGetReturnValue!44 lt!26533 (_1!1043 (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (_2!1043 (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(assert (=> d!13025 (= lt!26533 (insertStrictlySorted!46 (toList!710 (ite c!8409 call!4940 (ite c!8412 call!4938 call!4941))) (_1!1043 (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (_2!1043 (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(assert (=> d!13025 (= (+!83 (ite c!8409 call!4940 (ite c!8412 call!4938 call!4941)) (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) lt!26530)))

(declare-fun b!63263 () Bool)

(declare-fun res!34602 () Bool)

(assert (=> b!63263 (=> (not res!34602) (not e!41498))))

(assert (=> b!63263 (= res!34602 (= (getValueByKey!125 (toList!710 lt!26530) (_1!1043 (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))) (Some!130 (_2!1043 (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))))

(declare-fun b!63264 () Bool)

(assert (=> b!63264 (= e!41498 (contains!703 (toList!710 lt!26530) (ite (or c!8409 c!8412) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (= (and d!13025 res!34601) b!63263))

(assert (= (and b!63263 res!34602) b!63264))

(declare-fun m!57121 () Bool)

(assert (=> d!13025 m!57121))

(declare-fun m!57123 () Bool)

(assert (=> d!13025 m!57123))

(declare-fun m!57125 () Bool)

(assert (=> d!13025 m!57125))

(declare-fun m!57127 () Bool)

(assert (=> d!13025 m!57127))

(declare-fun m!57129 () Bool)

(assert (=> b!63263 m!57129))

(declare-fun m!57131 () Bool)

(assert (=> b!63264 m!57131))

(assert (=> bm!4939 d!13025))

(declare-fun bm!4986 () Bool)

(declare-fun call!4989 () Bool)

(declare-fun c!8549 () Bool)

(assert (=> bm!4986 (= call!4989 (arrayNoDuplicates!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8549 (Cons!1460 (select (arr!1798 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!8433 (Cons!1460 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) Nil!1461) Nil!1461)) (ite c!8433 (Cons!1460 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) Nil!1461) Nil!1461))))))

(declare-fun b!63265 () Bool)

(declare-fun e!41501 () Bool)

(assert (=> b!63265 (= e!41501 (contains!702 (ite c!8433 (Cons!1460 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) Nil!1461) Nil!1461) (select (arr!1798 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!63266 () Bool)

(declare-fun e!41500 () Bool)

(assert (=> b!63266 (= e!41500 call!4989)))

(declare-fun b!63268 () Bool)

(declare-fun e!41502 () Bool)

(declare-fun e!41499 () Bool)

(assert (=> b!63268 (= e!41502 e!41499)))

(declare-fun res!34605 () Bool)

(assert (=> b!63268 (=> (not res!34605) (not e!41499))))

(assert (=> b!63268 (= res!34605 (not e!41501))))

(declare-fun res!34603 () Bool)

(assert (=> b!63268 (=> (not res!34603) (not e!41501))))

(assert (=> b!63268 (= res!34603 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!63269 () Bool)

(assert (=> b!63269 (= e!41500 call!4989)))

(declare-fun d!13027 () Bool)

(declare-fun res!34604 () Bool)

(assert (=> d!13027 (=> res!34604 e!41502)))

(assert (=> d!13027 (= res!34604 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!13027 (= (arrayNoDuplicates!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8433 (Cons!1460 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) Nil!1461) Nil!1461)) e!41502)))

(declare-fun b!63267 () Bool)

(assert (=> b!63267 (= e!41499 e!41500)))

(assert (=> b!63267 (= c!8549 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!13027 (not res!34604)) b!63268))

(assert (= (and b!63268 res!34603) b!63265))

(assert (= (and b!63268 res!34605) b!63267))

(assert (= (and b!63267 c!8549) b!63269))

(assert (= (and b!63267 (not c!8549)) b!63266))

(assert (= (or b!63269 b!63266) bm!4986))

(assert (=> bm!4986 m!56575))

(declare-fun m!57133 () Bool)

(assert (=> bm!4986 m!57133))

(assert (=> b!63265 m!56575))

(assert (=> b!63265 m!56575))

(declare-fun m!57135 () Bool)

(assert (=> b!63265 m!57135))

(assert (=> b!63268 m!56575))

(assert (=> b!63268 m!56575))

(assert (=> b!63268 m!56577))

(assert (=> b!63267 m!56575))

(assert (=> b!63267 m!56575))

(assert (=> b!63267 m!56577))

(assert (=> bm!4958 d!13027))

(declare-fun d!13029 () Bool)

(declare-fun e!41504 () Bool)

(assert (=> d!13029 e!41504))

(declare-fun res!34606 () Bool)

(assert (=> d!13029 (=> res!34606 e!41504)))

(declare-fun lt!26534 () Bool)

(assert (=> d!13029 (= res!34606 (not lt!26534))))

(declare-fun lt!26537 () Bool)

(assert (=> d!13029 (= lt!26534 lt!26537)))

(declare-fun lt!26535 () Unit!1689)

(declare-fun e!41503 () Unit!1689)

(assert (=> d!13029 (= lt!26535 e!41503)))

(declare-fun c!8550 () Bool)

(assert (=> d!13029 (= c!8550 lt!26537)))

(assert (=> d!13029 (= lt!26537 (containsKey!129 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026))))))

(assert (=> d!13029 (= (contains!700 (getCurrentListMap!407 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026))) lt!26534)))

(declare-fun b!63270 () Bool)

(declare-fun lt!26536 () Unit!1689)

(assert (=> b!63270 (= e!41503 lt!26536)))

(assert (=> b!63270 (= lt!26536 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026))))))

(assert (=> b!63270 (isDefined!79 (getValueByKey!125 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026))))))

(declare-fun b!63271 () Bool)

(declare-fun Unit!1729 () Unit!1689)

(assert (=> b!63271 (= e!41503 Unit!1729)))

(declare-fun b!63272 () Bool)

(assert (=> b!63272 (= e!41504 (isDefined!79 (getValueByKey!125 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))

(assert (= (and d!13029 c!8550) b!63270))

(assert (= (and d!13029 (not c!8550)) b!63271))

(assert (= (and d!13029 (not res!34606)) b!63272))

(assert (=> d!13029 m!55921))

(declare-fun m!57137 () Bool)

(assert (=> d!13029 m!57137))

(assert (=> b!63270 m!55921))

(declare-fun m!57139 () Bool)

(assert (=> b!63270 m!57139))

(assert (=> b!63270 m!55921))

(declare-fun m!57141 () Bool)

(assert (=> b!63270 m!57141))

(assert (=> b!63270 m!57141))

(declare-fun m!57143 () Bool)

(assert (=> b!63270 m!57143))

(assert (=> b!63272 m!55921))

(assert (=> b!63272 m!57141))

(assert (=> b!63272 m!57141))

(assert (=> b!63272 m!57143))

(assert (=> b!62804 d!13029))

(declare-fun b!63273 () Bool)

(declare-fun c!8551 () Bool)

(assert (=> b!63273 (= c!8551 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41514 () ListLongMap!1389)

(declare-fun e!41507 () ListLongMap!1389)

(assert (=> b!63273 (= e!41514 e!41507)))

(declare-fun bm!4988 () Bool)

(declare-fun call!4994 () ListLongMap!1389)

(declare-fun call!4991 () ListLongMap!1389)

(assert (=> bm!4988 (= call!4994 call!4991)))

(declare-fun b!63274 () Bool)

(declare-fun e!41515 () Bool)

(declare-fun e!41517 () Bool)

(assert (=> b!63274 (= e!41515 e!41517)))

(declare-fun c!8554 () Bool)

(assert (=> b!63274 (= c!8554 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63275 () Bool)

(declare-fun e!41506 () Bool)

(declare-fun e!41510 () Bool)

(assert (=> b!63275 (= e!41506 e!41510)))

(declare-fun res!34609 () Bool)

(assert (=> b!63275 (=> (not res!34609) (not e!41510))))

(declare-fun lt!26554 () ListLongMap!1389)

(assert (=> b!63275 (= res!34609 (contains!700 lt!26554 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63275 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63276 () Bool)

(assert (=> b!63276 (= e!41510 (= (apply!68 lt!26554 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 lt!26022) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63276 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 lt!26022)))))

(assert (=> b!63276 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63277 () Bool)

(declare-fun e!41509 () Bool)

(declare-fun e!41505 () Bool)

(assert (=> b!63277 (= e!41509 e!41505)))

(declare-fun res!34610 () Bool)

(declare-fun call!4990 () Bool)

(assert (=> b!63277 (= res!34610 call!4990)))

(assert (=> b!63277 (=> (not res!34610) (not e!41505))))

(declare-fun bm!4989 () Bool)

(declare-fun call!4993 () ListLongMap!1389)

(assert (=> bm!4989 (= call!4991 call!4993)))

(declare-fun b!63278 () Bool)

(declare-fun e!41508 () Bool)

(assert (=> b!63278 (= e!41508 (= (apply!68 lt!26554 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!63279 () Bool)

(declare-fun res!34615 () Bool)

(assert (=> b!63279 (=> (not res!34615) (not e!41515))))

(assert (=> b!63279 (= res!34615 e!41506)))

(declare-fun res!34614 () Bool)

(assert (=> b!63279 (=> res!34614 e!41506)))

(declare-fun e!41511 () Bool)

(assert (=> b!63279 (= res!34614 (not e!41511))))

(declare-fun res!34608 () Bool)

(assert (=> b!63279 (=> (not res!34608) (not e!41511))))

(assert (=> b!63279 (= res!34608 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63280 () Bool)

(declare-fun e!41516 () Unit!1689)

(declare-fun Unit!1730 () Unit!1689)

(assert (=> b!63280 (= e!41516 Unit!1730)))

(declare-fun b!63281 () Bool)

(declare-fun call!4996 () Bool)

(assert (=> b!63281 (= e!41517 (not call!4996))))

(declare-fun b!63282 () Bool)

(declare-fun e!41513 () ListLongMap!1389)

(declare-fun call!4995 () ListLongMap!1389)

(assert (=> b!63282 (= e!41513 (+!83 call!4995 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!63283 () Bool)

(declare-fun res!34607 () Bool)

(assert (=> b!63283 (=> (not res!34607) (not e!41515))))

(assert (=> b!63283 (= res!34607 e!41509)))

(declare-fun c!8555 () Bool)

(assert (=> b!63283 (= c!8555 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63284 () Bool)

(assert (=> b!63284 (= e!41505 (= (apply!68 lt!26554 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!63285 () Bool)

(declare-fun lt!26555 () Unit!1689)

(assert (=> b!63285 (= e!41516 lt!26555)))

(declare-fun lt!26546 () ListLongMap!1389)

(assert (=> b!63285 (= lt!26546 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26559 () (_ BitVec 64))

(assert (=> b!63285 (= lt!26559 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26556 () (_ BitVec 64))

(assert (=> b!63285 (= lt!26556 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26543 () Unit!1689)

(assert (=> b!63285 (= lt!26543 (addStillContains!44 lt!26546 lt!26559 (zeroValue!2000 newMap!16) lt!26556))))

(assert (=> b!63285 (contains!700 (+!83 lt!26546 (tuple2!2067 lt!26559 (zeroValue!2000 newMap!16))) lt!26556)))

(declare-fun lt!26557 () Unit!1689)

(assert (=> b!63285 (= lt!26557 lt!26543)))

(declare-fun lt!26541 () ListLongMap!1389)

(assert (=> b!63285 (= lt!26541 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26547 () (_ BitVec 64))

(assert (=> b!63285 (= lt!26547 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26540 () (_ BitVec 64))

(assert (=> b!63285 (= lt!26540 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26539 () Unit!1689)

(assert (=> b!63285 (= lt!26539 (addApplyDifferent!44 lt!26541 lt!26547 (minValue!2000 newMap!16) lt!26540))))

(assert (=> b!63285 (= (apply!68 (+!83 lt!26541 (tuple2!2067 lt!26547 (minValue!2000 newMap!16))) lt!26540) (apply!68 lt!26541 lt!26540))))

(declare-fun lt!26542 () Unit!1689)

(assert (=> b!63285 (= lt!26542 lt!26539)))

(declare-fun lt!26548 () ListLongMap!1389)

(assert (=> b!63285 (= lt!26548 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26558 () (_ BitVec 64))

(assert (=> b!63285 (= lt!26558 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26551 () (_ BitVec 64))

(assert (=> b!63285 (= lt!26551 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26549 () Unit!1689)

(assert (=> b!63285 (= lt!26549 (addApplyDifferent!44 lt!26548 lt!26558 (zeroValue!2000 newMap!16) lt!26551))))

(assert (=> b!63285 (= (apply!68 (+!83 lt!26548 (tuple2!2067 lt!26558 (zeroValue!2000 newMap!16))) lt!26551) (apply!68 lt!26548 lt!26551))))

(declare-fun lt!26552 () Unit!1689)

(assert (=> b!63285 (= lt!26552 lt!26549)))

(declare-fun lt!26544 () ListLongMap!1389)

(assert (=> b!63285 (= lt!26544 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26550 () (_ BitVec 64))

(assert (=> b!63285 (= lt!26550 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26553 () (_ BitVec 64))

(assert (=> b!63285 (= lt!26553 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63285 (= lt!26555 (addApplyDifferent!44 lt!26544 lt!26550 (minValue!2000 newMap!16) lt!26553))))

(assert (=> b!63285 (= (apply!68 (+!83 lt!26544 (tuple2!2067 lt!26550 (minValue!2000 newMap!16))) lt!26553) (apply!68 lt!26544 lt!26553))))

(declare-fun b!63286 () Bool)

(assert (=> b!63286 (= e!41511 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4990 () Bool)

(declare-fun call!4992 () ListLongMap!1389)

(assert (=> bm!4990 (= call!4992 call!4995)))

(declare-fun b!63287 () Bool)

(assert (=> b!63287 (= e!41517 e!41508)))

(declare-fun res!34611 () Bool)

(assert (=> b!63287 (= res!34611 call!4996)))

(assert (=> b!63287 (=> (not res!34611) (not e!41508))))

(declare-fun bm!4991 () Bool)

(assert (=> bm!4991 (= call!4993 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun c!8553 () Bool)

(declare-fun bm!4992 () Bool)

(declare-fun c!8556 () Bool)

(assert (=> bm!4992 (= call!4995 (+!83 (ite c!8553 call!4993 (ite c!8556 call!4991 call!4994)) (ite (or c!8553 c!8556) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun b!63288 () Bool)

(assert (=> b!63288 (= e!41513 e!41514)))

(assert (=> b!63288 (= c!8556 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!13031 () Bool)

(assert (=> d!13031 e!41515))

(declare-fun res!34612 () Bool)

(assert (=> d!13031 (=> (not res!34612) (not e!41515))))

(assert (=> d!13031 (= res!34612 (or (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))))

(declare-fun lt!26538 () ListLongMap!1389)

(assert (=> d!13031 (= lt!26554 lt!26538)))

(declare-fun lt!26545 () Unit!1689)

(assert (=> d!13031 (= lt!26545 e!41516)))

(declare-fun c!8552 () Bool)

(declare-fun e!41512 () Bool)

(assert (=> d!13031 (= c!8552 e!41512)))

(declare-fun res!34613 () Bool)

(assert (=> d!13031 (=> (not res!34613) (not e!41512))))

(assert (=> d!13031 (= res!34613 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!13031 (= lt!26538 e!41513)))

(assert (=> d!13031 (= c!8553 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13031 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13031 (= (getCurrentListMap!407 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26554)))

(declare-fun bm!4987 () Bool)

(assert (=> bm!4987 (= call!4996 (contains!700 lt!26554 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63289 () Bool)

(assert (=> b!63289 (= e!41514 call!4992)))

(declare-fun b!63290 () Bool)

(assert (=> b!63290 (= e!41507 call!4992)))

(declare-fun bm!4993 () Bool)

(assert (=> bm!4993 (= call!4990 (contains!700 lt!26554 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63291 () Bool)

(assert (=> b!63291 (= e!41507 call!4994)))

(declare-fun b!63292 () Bool)

(assert (=> b!63292 (= e!41509 (not call!4990))))

(declare-fun b!63293 () Bool)

(assert (=> b!63293 (= e!41512 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!13031 c!8553) b!63282))

(assert (= (and d!13031 (not c!8553)) b!63288))

(assert (= (and b!63288 c!8556) b!63289))

(assert (= (and b!63288 (not c!8556)) b!63273))

(assert (= (and b!63273 c!8551) b!63290))

(assert (= (and b!63273 (not c!8551)) b!63291))

(assert (= (or b!63290 b!63291) bm!4988))

(assert (= (or b!63289 bm!4988) bm!4989))

(assert (= (or b!63289 b!63290) bm!4990))

(assert (= (or b!63282 bm!4989) bm!4991))

(assert (= (or b!63282 bm!4990) bm!4992))

(assert (= (and d!13031 res!34613) b!63293))

(assert (= (and d!13031 c!8552) b!63285))

(assert (= (and d!13031 (not c!8552)) b!63280))

(assert (= (and d!13031 res!34612) b!63279))

(assert (= (and b!63279 res!34608) b!63286))

(assert (= (and b!63279 (not res!34614)) b!63275))

(assert (= (and b!63275 res!34609) b!63276))

(assert (= (and b!63279 res!34615) b!63283))

(assert (= (and b!63283 c!8555) b!63277))

(assert (= (and b!63283 (not c!8555)) b!63292))

(assert (= (and b!63277 res!34610) b!63284))

(assert (= (or b!63277 b!63292) bm!4993))

(assert (= (and b!63283 res!34607) b!63274))

(assert (= (and b!63274 c!8554) b!63287))

(assert (= (and b!63274 (not c!8554)) b!63281))

(assert (= (and b!63287 res!34611) b!63278))

(assert (= (or b!63287 b!63281) bm!4987))

(declare-fun b_lambda!2827 () Bool)

(assert (=> (not b_lambda!2827) (not b!63276)))

(assert (=> b!63276 t!4870))

(declare-fun b_and!3861 () Bool)

(assert (= b_and!3857 (and (=> t!4870 result!2463) b_and!3861)))

(assert (=> b!63276 t!4872))

(declare-fun b_and!3863 () Bool)

(assert (= b_and!3859 (and (=> t!4872 result!2465) b_and!3863)))

(declare-fun m!57145 () Bool)

(assert (=> b!63282 m!57145))

(declare-fun m!57147 () Bool)

(assert (=> b!63284 m!57147))

(declare-fun m!57149 () Bool)

(assert (=> bm!4992 m!57149))

(assert (=> b!63293 m!56007))

(assert (=> b!63293 m!56007))

(assert (=> b!63293 m!56009))

(declare-fun m!57151 () Bool)

(assert (=> bm!4991 m!57151))

(assert (=> b!63286 m!56007))

(assert (=> b!63286 m!56007))

(assert (=> b!63286 m!56009))

(assert (=> b!63275 m!56007))

(assert (=> b!63275 m!56007))

(declare-fun m!57153 () Bool)

(assert (=> b!63275 m!57153))

(declare-fun m!57155 () Bool)

(assert (=> bm!4987 m!57155))

(assert (=> b!63285 m!56007))

(declare-fun m!57157 () Bool)

(assert (=> b!63285 m!57157))

(declare-fun m!57159 () Bool)

(assert (=> b!63285 m!57159))

(declare-fun m!57161 () Bool)

(assert (=> b!63285 m!57161))

(declare-fun m!57163 () Bool)

(assert (=> b!63285 m!57163))

(declare-fun m!57165 () Bool)

(assert (=> b!63285 m!57165))

(declare-fun m!57167 () Bool)

(assert (=> b!63285 m!57167))

(declare-fun m!57169 () Bool)

(assert (=> b!63285 m!57169))

(declare-fun m!57171 () Bool)

(assert (=> b!63285 m!57171))

(declare-fun m!57173 () Bool)

(assert (=> b!63285 m!57173))

(declare-fun m!57175 () Bool)

(assert (=> b!63285 m!57175))

(declare-fun m!57177 () Bool)

(assert (=> b!63285 m!57177))

(assert (=> b!63285 m!57163))

(declare-fun m!57179 () Bool)

(assert (=> b!63285 m!57179))

(declare-fun m!57181 () Bool)

(assert (=> b!63285 m!57181))

(assert (=> b!63285 m!57169))

(declare-fun m!57183 () Bool)

(assert (=> b!63285 m!57183))

(assert (=> b!63285 m!57157))

(assert (=> b!63285 m!57181))

(declare-fun m!57185 () Bool)

(assert (=> b!63285 m!57185))

(assert (=> b!63285 m!57151))

(assert (=> d!13031 m!55941))

(declare-fun m!57187 () Bool)

(assert (=> bm!4993 m!57187))

(declare-fun m!57189 () Bool)

(assert (=> b!63278 m!57189))

(assert (=> b!63276 m!56259))

(assert (=> b!63276 m!56007))

(assert (=> b!63276 m!56007))

(declare-fun m!57191 () Bool)

(assert (=> b!63276 m!57191))

(declare-fun m!57193 () Bool)

(assert (=> b!63276 m!57193))

(assert (=> b!63276 m!56259))

(declare-fun m!57195 () Bool)

(assert (=> b!63276 m!57195))

(assert (=> b!63276 m!57193))

(assert (=> b!62804 d!13031))

(declare-fun d!13033 () Bool)

(assert (=> d!13033 (isDefined!79 (getValueByKey!125 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!26560 () Unit!1689)

(assert (=> d!13033 (= lt!26560 (choose!340 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!41518 () Bool)

(assert (=> d!13033 e!41518))

(declare-fun res!34616 () Bool)

(assert (=> d!13033 (=> (not res!34616) (not e!41518))))

(assert (=> d!13033 (= res!34616 (isStrictlySorted!281 (toList!710 lt!25929)))))

(assert (=> d!13033 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26560)))

(declare-fun b!63294 () Bool)

(assert (=> b!63294 (= e!41518 (containsKey!129 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!13033 res!34616) b!63294))

(assert (=> d!13033 m!55795))

(assert (=> d!13033 m!56015))

(assert (=> d!13033 m!56015))

(assert (=> d!13033 m!56017))

(assert (=> d!13033 m!55795))

(declare-fun m!57197 () Bool)

(assert (=> d!13033 m!57197))

(assert (=> d!13033 m!56891))

(assert (=> b!63294 m!55795))

(assert (=> b!63294 m!56011))

(assert (=> b!62633 d!13033))

(assert (=> b!62633 d!12969))

(assert (=> b!62633 d!12971))

(assert (=> b!62746 d!12659))

(assert (=> b!62576 d!12947))

(assert (=> b!62613 d!12735))

(declare-fun d!13035 () Bool)

(declare-fun e!41519 () Bool)

(assert (=> d!13035 e!41519))

(declare-fun res!34617 () Bool)

(assert (=> d!13035 (=> (not res!34617) (not e!41519))))

(declare-fun lt!26561 () ListLongMap!1389)

(assert (=> d!13035 (= res!34617 (contains!700 lt!26561 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26564 () List!1463)

(assert (=> d!13035 (= lt!26561 (ListLongMap!1390 lt!26564))))

(declare-fun lt!26563 () Unit!1689)

(declare-fun lt!26562 () Unit!1689)

(assert (=> d!13035 (= lt!26563 lt!26562)))

(assert (=> d!13035 (= (getValueByKey!125 lt!26564 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13035 (= lt!26562 (lemmaContainsTupThenGetReturnValue!44 lt!26564 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13035 (= lt!26564 (insertStrictlySorted!46 (toList!710 call!4915) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13035 (= (+!83 call!4915 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26561)))

(declare-fun b!63295 () Bool)

(declare-fun res!34618 () Bool)

(assert (=> b!63295 (=> (not res!34618) (not e!41519))))

(assert (=> b!63295 (= res!34618 (= (getValueByKey!125 (toList!710 lt!26561) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63296 () Bool)

(assert (=> b!63296 (= e!41519 (contains!703 (toList!710 lt!26561) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13035 res!34617) b!63295))

(assert (= (and b!63295 res!34618) b!63296))

(declare-fun m!57199 () Bool)

(assert (=> d!13035 m!57199))

(declare-fun m!57201 () Bool)

(assert (=> d!13035 m!57201))

(declare-fun m!57203 () Bool)

(assert (=> d!13035 m!57203))

(declare-fun m!57205 () Bool)

(assert (=> d!13035 m!57205))

(declare-fun m!57207 () Bool)

(assert (=> b!63295 m!57207))

(declare-fun m!57209 () Bool)

(assert (=> b!63296 m!57209))

(assert (=> b!62613 d!13035))

(declare-fun d!13037 () Bool)

(assert (=> d!13037 (not (contains!700 (+!83 lt!26069 (tuple2!2067 lt!26071 lt!26070)) lt!26068))))

(declare-fun lt!26567 () Unit!1689)

(declare-fun choose!349 (ListLongMap!1389 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1689)

(assert (=> d!13037 (= lt!26567 (choose!349 lt!26069 lt!26071 lt!26070 lt!26068))))

(declare-fun e!41522 () Bool)

(assert (=> d!13037 e!41522))

(declare-fun res!34621 () Bool)

(assert (=> d!13037 (=> (not res!34621) (not e!41522))))

(assert (=> d!13037 (= res!34621 (not (contains!700 lt!26069 lt!26068)))))

(assert (=> d!13037 (= (addStillNotContains!19 lt!26069 lt!26071 lt!26070 lt!26068) lt!26567)))

(declare-fun b!63300 () Bool)

(assert (=> b!63300 (= e!41522 (not (= lt!26071 lt!26068)))))

(assert (= (and d!13037 res!34621) b!63300))

(assert (=> d!13037 m!55983))

(assert (=> d!13037 m!55983))

(assert (=> d!13037 m!55985))

(declare-fun m!57211 () Bool)

(assert (=> d!13037 m!57211))

(declare-fun m!57213 () Bool)

(assert (=> d!13037 m!57213))

(assert (=> b!62613 d!13037))

(declare-fun d!13039 () Bool)

(declare-fun e!41524 () Bool)

(assert (=> d!13039 e!41524))

(declare-fun res!34622 () Bool)

(assert (=> d!13039 (=> res!34622 e!41524)))

(declare-fun lt!26568 () Bool)

(assert (=> d!13039 (= res!34622 (not lt!26568))))

(declare-fun lt!26571 () Bool)

(assert (=> d!13039 (= lt!26568 lt!26571)))

(declare-fun lt!26569 () Unit!1689)

(declare-fun e!41523 () Unit!1689)

(assert (=> d!13039 (= lt!26569 e!41523)))

(declare-fun c!8557 () Bool)

(assert (=> d!13039 (= c!8557 lt!26571)))

(assert (=> d!13039 (= lt!26571 (containsKey!129 (toList!710 (+!83 lt!26069 (tuple2!2067 lt!26071 lt!26070))) lt!26068))))

(assert (=> d!13039 (= (contains!700 (+!83 lt!26069 (tuple2!2067 lt!26071 lt!26070)) lt!26068) lt!26568)))

(declare-fun b!63301 () Bool)

(declare-fun lt!26570 () Unit!1689)

(assert (=> b!63301 (= e!41523 lt!26570)))

(assert (=> b!63301 (= lt!26570 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 (+!83 lt!26069 (tuple2!2067 lt!26071 lt!26070))) lt!26068))))

(assert (=> b!63301 (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!26069 (tuple2!2067 lt!26071 lt!26070))) lt!26068))))

(declare-fun b!63302 () Bool)

(declare-fun Unit!1731 () Unit!1689)

(assert (=> b!63302 (= e!41523 Unit!1731)))

(declare-fun b!63303 () Bool)

(assert (=> b!63303 (= e!41524 (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!26069 (tuple2!2067 lt!26071 lt!26070))) lt!26068)))))

(assert (= (and d!13039 c!8557) b!63301))

(assert (= (and d!13039 (not c!8557)) b!63302))

(assert (= (and d!13039 (not res!34622)) b!63303))

(declare-fun m!57215 () Bool)

(assert (=> d!13039 m!57215))

(declare-fun m!57217 () Bool)

(assert (=> b!63301 m!57217))

(declare-fun m!57219 () Bool)

(assert (=> b!63301 m!57219))

(assert (=> b!63301 m!57219))

(declare-fun m!57221 () Bool)

(assert (=> b!63301 m!57221))

(assert (=> b!63303 m!57219))

(assert (=> b!63303 m!57219))

(assert (=> b!63303 m!57221))

(assert (=> b!62613 d!13039))

(declare-fun d!13041 () Bool)

(declare-fun e!41525 () Bool)

(assert (=> d!13041 e!41525))

(declare-fun res!34623 () Bool)

(assert (=> d!13041 (=> (not res!34623) (not e!41525))))

(declare-fun lt!26572 () ListLongMap!1389)

(assert (=> d!13041 (= res!34623 (contains!700 lt!26572 (_1!1043 (tuple2!2067 lt!26071 lt!26070))))))

(declare-fun lt!26575 () List!1463)

(assert (=> d!13041 (= lt!26572 (ListLongMap!1390 lt!26575))))

(declare-fun lt!26574 () Unit!1689)

(declare-fun lt!26573 () Unit!1689)

(assert (=> d!13041 (= lt!26574 lt!26573)))

(assert (=> d!13041 (= (getValueByKey!125 lt!26575 (_1!1043 (tuple2!2067 lt!26071 lt!26070))) (Some!130 (_2!1043 (tuple2!2067 lt!26071 lt!26070))))))

(assert (=> d!13041 (= lt!26573 (lemmaContainsTupThenGetReturnValue!44 lt!26575 (_1!1043 (tuple2!2067 lt!26071 lt!26070)) (_2!1043 (tuple2!2067 lt!26071 lt!26070))))))

(assert (=> d!13041 (= lt!26575 (insertStrictlySorted!46 (toList!710 lt!26069) (_1!1043 (tuple2!2067 lt!26071 lt!26070)) (_2!1043 (tuple2!2067 lt!26071 lt!26070))))))

(assert (=> d!13041 (= (+!83 lt!26069 (tuple2!2067 lt!26071 lt!26070)) lt!26572)))

(declare-fun b!63304 () Bool)

(declare-fun res!34624 () Bool)

(assert (=> b!63304 (=> (not res!34624) (not e!41525))))

(assert (=> b!63304 (= res!34624 (= (getValueByKey!125 (toList!710 lt!26572) (_1!1043 (tuple2!2067 lt!26071 lt!26070))) (Some!130 (_2!1043 (tuple2!2067 lt!26071 lt!26070)))))))

(declare-fun b!63305 () Bool)

(assert (=> b!63305 (= e!41525 (contains!703 (toList!710 lt!26572) (tuple2!2067 lt!26071 lt!26070)))))

(assert (= (and d!13041 res!34623) b!63304))

(assert (= (and b!63304 res!34624) b!63305))

(declare-fun m!57223 () Bool)

(assert (=> d!13041 m!57223))

(declare-fun m!57225 () Bool)

(assert (=> d!13041 m!57225))

(declare-fun m!57227 () Bool)

(assert (=> d!13041 m!57227))

(declare-fun m!57229 () Bool)

(assert (=> d!13041 m!57229))

(declare-fun m!57231 () Bool)

(assert (=> b!63304 m!57231))

(declare-fun m!57233 () Bool)

(assert (=> b!63305 m!57233))

(assert (=> b!62613 d!13041))

(declare-fun d!13043 () Bool)

(assert (=> d!13043 (= (apply!68 lt!26286 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1100 (getValueByKey!125 (toList!710 lt!26286) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2755 () Bool)

(assert (= bs!2755 d!13043))

(assert (=> bs!2755 m!57011))

(assert (=> bs!2755 m!57011))

(declare-fun m!57235 () Bool)

(assert (=> bs!2755 m!57235))

(assert (=> b!62816 d!13043))

(declare-fun bm!4994 () Bool)

(declare-fun call!4997 () Bool)

(declare-fun c!8558 () Bool)

(assert (=> bm!4994 (= call!4997 (arrayNoDuplicates!0 (_keys!3720 (_2!1044 lt!26030)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8558 (Cons!1460 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000) Nil!1461) Nil!1461)))))

(declare-fun b!63306 () Bool)

(declare-fun e!41528 () Bool)

(assert (=> b!63306 (= e!41528 (contains!702 Nil!1461 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000)))))

(declare-fun b!63307 () Bool)

(declare-fun e!41527 () Bool)

(assert (=> b!63307 (= e!41527 call!4997)))

(declare-fun b!63309 () Bool)

(declare-fun e!41529 () Bool)

(declare-fun e!41526 () Bool)

(assert (=> b!63309 (= e!41529 e!41526)))

(declare-fun res!34627 () Bool)

(assert (=> b!63309 (=> (not res!34627) (not e!41526))))

(assert (=> b!63309 (= res!34627 (not e!41528))))

(declare-fun res!34625 () Bool)

(assert (=> b!63309 (=> (not res!34625) (not e!41528))))

(assert (=> b!63309 (= res!34625 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000)))))

(declare-fun b!63310 () Bool)

(assert (=> b!63310 (= e!41527 call!4997)))

(declare-fun d!13045 () Bool)

(declare-fun res!34626 () Bool)

(assert (=> d!13045 (=> res!34626 e!41529)))

(assert (=> d!13045 (= res!34626 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))))))

(assert (=> d!13045 (= (arrayNoDuplicates!0 (_keys!3720 (_2!1044 lt!26030)) #b00000000000000000000000000000000 Nil!1461) e!41529)))

(declare-fun b!63308 () Bool)

(assert (=> b!63308 (= e!41526 e!41527)))

(assert (=> b!63308 (= c!8558 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000)))))

(assert (= (and d!13045 (not res!34626)) b!63309))

(assert (= (and b!63309 res!34625) b!63306))

(assert (= (and b!63309 res!34627) b!63308))

(assert (= (and b!63308 c!8558) b!63310))

(assert (= (and b!63308 (not c!8558)) b!63307))

(assert (= (or b!63310 b!63307) bm!4994))

(assert (=> bm!4994 m!56509))

(declare-fun m!57237 () Bool)

(assert (=> bm!4994 m!57237))

(assert (=> b!63306 m!56509))

(assert (=> b!63306 m!56509))

(declare-fun m!57239 () Bool)

(assert (=> b!63306 m!57239))

(assert (=> b!63309 m!56509))

(assert (=> b!63309 m!56509))

(assert (=> b!63309 m!56511))

(assert (=> b!63308 m!56509))

(assert (=> b!63308 m!56509))

(assert (=> b!63308 m!56511))

(assert (=> b!62620 d!13045))

(declare-fun d!13047 () Bool)

(declare-fun e!41531 () Bool)

(assert (=> d!13047 e!41531))

(declare-fun res!34628 () Bool)

(assert (=> d!13047 (=> res!34628 e!41531)))

(declare-fun lt!26576 () Bool)

(assert (=> d!13047 (= res!34628 (not lt!26576))))

(declare-fun lt!26579 () Bool)

(assert (=> d!13047 (= lt!26576 lt!26579)))

(declare-fun lt!26577 () Unit!1689)

(declare-fun e!41530 () Unit!1689)

(assert (=> d!13047 (= lt!26577 e!41530)))

(declare-fun c!8559 () Bool)

(assert (=> d!13047 (= c!8559 lt!26579)))

(assert (=> d!13047 (= lt!26579 (containsKey!129 (toList!710 lt!26243) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!13047 (= (contains!700 lt!26243 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) lt!26576)))

(declare-fun b!63311 () Bool)

(declare-fun lt!26578 () Unit!1689)

(assert (=> b!63311 (= e!41530 lt!26578)))

(assert (=> b!63311 (= lt!26578 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26243) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63311 (isDefined!79 (getValueByKey!125 (toList!710 lt!26243) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63312 () Bool)

(declare-fun Unit!1732 () Unit!1689)

(assert (=> b!63312 (= e!41530 Unit!1732)))

(declare-fun b!63313 () Bool)

(assert (=> b!63313 (= e!41531 (isDefined!79 (getValueByKey!125 (toList!710 lt!26243) (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!13047 c!8559) b!63311))

(assert (= (and d!13047 (not c!8559)) b!63312))

(assert (= (and d!13047 (not res!34628)) b!63313))

(assert (=> d!13047 m!56007))

(declare-fun m!57241 () Bool)

(assert (=> d!13047 m!57241))

(assert (=> b!63311 m!56007))

(declare-fun m!57243 () Bool)

(assert (=> b!63311 m!57243))

(assert (=> b!63311 m!56007))

(assert (=> b!63311 m!56935))

(assert (=> b!63311 m!56935))

(declare-fun m!57245 () Bool)

(assert (=> b!63311 m!57245))

(assert (=> b!63313 m!56007))

(assert (=> b!63313 m!56935))

(assert (=> b!63313 m!56935))

(assert (=> b!63313 m!57245))

(assert (=> b!62760 d!13047))

(assert (=> bm!4920 d!12761))

(declare-fun d!13049 () Bool)

(declare-fun e!41533 () Bool)

(assert (=> d!13049 e!41533))

(declare-fun res!34629 () Bool)

(assert (=> d!13049 (=> res!34629 e!41533)))

(declare-fun lt!26580 () Bool)

(assert (=> d!13049 (= res!34629 (not lt!26580))))

(declare-fun lt!26583 () Bool)

(assert (=> d!13049 (= lt!26580 lt!26583)))

(declare-fun lt!26581 () Unit!1689)

(declare-fun e!41532 () Unit!1689)

(assert (=> d!13049 (= lt!26581 e!41532)))

(declare-fun c!8560 () Bool)

(assert (=> d!13049 (= c!8560 lt!26583)))

(assert (=> d!13049 (= lt!26583 (containsKey!129 (toList!710 lt!26256) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> d!13049 (= (contains!700 lt!26256 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) lt!26580)))

(declare-fun b!63314 () Bool)

(declare-fun lt!26582 () Unit!1689)

(assert (=> b!63314 (= e!41532 lt!26582)))

(assert (=> b!63314 (= lt!26582 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26256) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> b!63314 (isDefined!79 (getValueByKey!125 (toList!710 lt!26256) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!63315 () Bool)

(declare-fun Unit!1733 () Unit!1689)

(assert (=> b!63315 (= e!41532 Unit!1733)))

(declare-fun b!63316 () Bool)

(assert (=> b!63316 (= e!41533 (isDefined!79 (getValueByKey!125 (toList!710 lt!26256) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(assert (= (and d!13049 c!8560) b!63314))

(assert (= (and d!13049 (not c!8560)) b!63315))

(assert (= (and d!13049 (not res!34629)) b!63316))

(declare-fun m!57247 () Bool)

(assert (=> d!13049 m!57247))

(declare-fun m!57249 () Bool)

(assert (=> b!63314 m!57249))

(assert (=> b!63314 m!56289))

(assert (=> b!63314 m!56289))

(declare-fun m!57251 () Bool)

(assert (=> b!63314 m!57251))

(assert (=> b!63316 m!56289))

(assert (=> b!63316 m!56289))

(assert (=> b!63316 m!57251))

(assert (=> d!12717 d!13049))

(declare-fun c!8561 () Bool)

(declare-fun d!13051 () Bool)

(assert (=> d!13051 (= c!8561 (and ((_ is Cons!1459) lt!26259) (= (_1!1043 (h!2042 lt!26259)) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun e!41534 () Option!131)

(assert (=> d!13051 (= (getValueByKey!125 lt!26259 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) e!41534)))

(declare-fun b!63319 () Bool)

(declare-fun e!41535 () Option!131)

(assert (=> b!63319 (= e!41535 (getValueByKey!125 (t!4861 lt!26259) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!63320 () Bool)

(assert (=> b!63320 (= e!41535 None!129)))

(declare-fun b!63318 () Bool)

(assert (=> b!63318 (= e!41534 e!41535)))

(declare-fun c!8562 () Bool)

(assert (=> b!63318 (= c!8562 (and ((_ is Cons!1459) lt!26259) (not (= (_1!1043 (h!2042 lt!26259)) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))))

(declare-fun b!63317 () Bool)

(assert (=> b!63317 (= e!41534 (Some!130 (_2!1043 (h!2042 lt!26259))))))

(assert (= (and d!13051 c!8561) b!63317))

(assert (= (and d!13051 (not c!8561)) b!63318))

(assert (= (and b!63318 c!8562) b!63319))

(assert (= (and b!63318 (not c!8562)) b!63320))

(declare-fun m!57253 () Bool)

(assert (=> b!63319 m!57253))

(assert (=> d!12717 d!13051))

(declare-fun d!13053 () Bool)

(assert (=> d!13053 (= (getValueByKey!125 lt!26259 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) (Some!130 (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun lt!26584 () Unit!1689)

(assert (=> d!13053 (= lt!26584 (choose!348 lt!26259 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun e!41536 () Bool)

(assert (=> d!13053 e!41536))

(declare-fun res!34630 () Bool)

(assert (=> d!13053 (=> (not res!34630) (not e!41536))))

(assert (=> d!13053 (= res!34630 (isStrictlySorted!281 lt!26259))))

(assert (=> d!13053 (= (lemmaContainsTupThenGetReturnValue!44 lt!26259 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) lt!26584)))

(declare-fun b!63321 () Bool)

(declare-fun res!34631 () Bool)

(assert (=> b!63321 (=> (not res!34631) (not e!41536))))

(assert (=> b!63321 (= res!34631 (containsKey!129 lt!26259 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!63322 () Bool)

(assert (=> b!63322 (= e!41536 (contains!703 lt!26259 (tuple2!2067 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(assert (= (and d!13053 res!34630) b!63321))

(assert (= (and b!63321 res!34631) b!63322))

(assert (=> d!13053 m!56283))

(declare-fun m!57255 () Bool)

(assert (=> d!13053 m!57255))

(declare-fun m!57257 () Bool)

(assert (=> d!13053 m!57257))

(declare-fun m!57259 () Bool)

(assert (=> b!63321 m!57259))

(declare-fun m!57261 () Bool)

(assert (=> b!63322 m!57261))

(assert (=> d!12717 d!13053))

(declare-fun b!63323 () Bool)

(declare-fun e!41538 () List!1463)

(declare-fun call!5000 () List!1463)

(assert (=> b!63323 (= e!41538 call!5000)))

(declare-fun e!41537 () List!1463)

(declare-fun bm!4995 () Bool)

(declare-fun c!8566 () Bool)

(assert (=> bm!4995 (= call!5000 ($colon$colon!61 e!41537 (ite c!8566 (h!2042 (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834)))) (tuple2!2067 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))))

(declare-fun c!8563 () Bool)

(assert (=> bm!4995 (= c!8563 c!8566)))

(declare-fun b!63324 () Bool)

(declare-fun e!41539 () List!1463)

(declare-fun call!4999 () List!1463)

(assert (=> b!63324 (= e!41539 call!4999)))

(declare-fun bm!4996 () Bool)

(declare-fun call!4998 () List!1463)

(assert (=> bm!4996 (= call!4999 call!4998)))

(declare-fun b!63325 () Bool)

(declare-fun e!41540 () List!1463)

(assert (=> b!63325 (= e!41538 e!41540)))

(declare-fun c!8564 () Bool)

(assert (=> b!63325 (= c!8564 (and ((_ is Cons!1459) (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834)))) (= (_1!1043 (h!2042 (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834))))) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun c!8565 () Bool)

(declare-fun b!63327 () Bool)

(assert (=> b!63327 (= e!41537 (ite c!8564 (t!4861 (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834)))) (ite c!8565 (Cons!1459 (h!2042 (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834)))) (t!4861 (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834))))) Nil!1460)))))

(declare-fun b!63328 () Bool)

(assert (=> b!63328 (= e!41539 call!4999)))

(declare-fun bm!4997 () Bool)

(assert (=> bm!4997 (= call!4998 call!5000)))

(declare-fun b!63329 () Bool)

(assert (=> b!63329 (= e!41537 (insertStrictlySorted!46 (t!4861 (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834)))) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!63330 () Bool)

(assert (=> b!63330 (= c!8565 (and ((_ is Cons!1459) (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834)))) (bvsgt (_1!1043 (h!2042 (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834))))) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(assert (=> b!63330 (= e!41540 e!41539)))

(declare-fun b!63326 () Bool)

(declare-fun res!34633 () Bool)

(declare-fun e!41541 () Bool)

(assert (=> b!63326 (=> (not res!34633) (not e!41541))))

(declare-fun lt!26585 () List!1463)

(assert (=> b!63326 (= res!34633 (containsKey!129 lt!26585 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun d!13055 () Bool)

(assert (=> d!13055 e!41541))

(declare-fun res!34632 () Bool)

(assert (=> d!13055 (=> (not res!34632) (not e!41541))))

(assert (=> d!13055 (= res!34632 (isStrictlySorted!281 lt!26585))))

(assert (=> d!13055 (= lt!26585 e!41538)))

(assert (=> d!13055 (= c!8566 (and ((_ is Cons!1459) (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834)))) (bvslt (_1!1043 (h!2042 (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834))))) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(assert (=> d!13055 (isStrictlySorted!281 (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834))))))

(assert (=> d!13055 (= (insertStrictlySorted!46 (toList!710 (ite c!8294 call!4833 (ite c!8297 call!4831 call!4834))) (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))) lt!26585)))

(declare-fun b!63331 () Bool)

(assert (=> b!63331 (= e!41540 call!4998)))

(declare-fun b!63332 () Bool)

(assert (=> b!63332 (= e!41541 (contains!703 lt!26585 (tuple2!2067 (_1!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (_2!1043 (ite (or c!8294 c!8297) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(assert (= (and d!13055 c!8566) b!63323))

(assert (= (and d!13055 (not c!8566)) b!63325))

(assert (= (and b!63325 c!8564) b!63331))

(assert (= (and b!63325 (not c!8564)) b!63330))

(assert (= (and b!63330 c!8565) b!63328))

(assert (= (and b!63330 (not c!8565)) b!63324))

(assert (= (or b!63328 b!63324) bm!4996))

(assert (= (or b!63331 bm!4996) bm!4997))

(assert (= (or b!63323 bm!4997) bm!4995))

(assert (= (and bm!4995 c!8563) b!63329))

(assert (= (and bm!4995 (not c!8563)) b!63327))

(assert (= (and d!13055 res!34632) b!63326))

(assert (= (and b!63326 res!34633) b!63332))

(declare-fun m!57263 () Bool)

(assert (=> b!63332 m!57263))

(declare-fun m!57265 () Bool)

(assert (=> d!13055 m!57265))

(declare-fun m!57267 () Bool)

(assert (=> d!13055 m!57267))

(declare-fun m!57269 () Bool)

(assert (=> b!63329 m!57269))

(declare-fun m!57271 () Bool)

(assert (=> b!63326 m!57271))

(declare-fun m!57273 () Bool)

(assert (=> bm!4995 m!57273))

(assert (=> d!12717 d!13055))

(declare-fun d!13057 () Bool)

(declare-fun e!41543 () Bool)

(assert (=> d!13057 e!41543))

(declare-fun res!34634 () Bool)

(assert (=> d!13057 (=> res!34634 e!41543)))

(declare-fun lt!26586 () Bool)

(assert (=> d!13057 (= res!34634 (not lt!26586))))

(declare-fun lt!26589 () Bool)

(assert (=> d!13057 (= lt!26586 lt!26589)))

(declare-fun lt!26587 () Unit!1689)

(declare-fun e!41542 () Unit!1689)

(assert (=> d!13057 (= lt!26587 e!41542)))

(declare-fun c!8567 () Bool)

(assert (=> d!13057 (= c!8567 lt!26589)))

(assert (=> d!13057 (= lt!26589 (containsKey!129 (toList!710 lt!26105) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13057 (= (contains!700 lt!26105 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26586)))

(declare-fun b!63333 () Bool)

(declare-fun lt!26588 () Unit!1689)

(assert (=> b!63333 (= e!41542 lt!26588)))

(assert (=> b!63333 (= lt!26588 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26105) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!63333 (isDefined!79 (getValueByKey!125 (toList!710 lt!26105) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63334 () Bool)

(declare-fun Unit!1734 () Unit!1689)

(assert (=> b!63334 (= e!41542 Unit!1734)))

(declare-fun b!63335 () Bool)

(assert (=> b!63335 (= e!41543 (isDefined!79 (getValueByKey!125 (toList!710 lt!26105) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!13057 c!8567) b!63333))

(assert (= (and d!13057 (not c!8567)) b!63334))

(assert (= (and d!13057 (not res!34634)) b!63335))

(declare-fun m!57275 () Bool)

(assert (=> d!13057 m!57275))

(declare-fun m!57277 () Bool)

(assert (=> b!63333 m!57277))

(assert (=> b!63333 m!56057))

(assert (=> b!63333 m!56057))

(declare-fun m!57279 () Bool)

(assert (=> b!63333 m!57279))

(assert (=> b!63335 m!56057))

(assert (=> b!63335 m!56057))

(assert (=> b!63335 m!57279))

(assert (=> d!12677 d!13057))

(declare-fun c!8568 () Bool)

(declare-fun d!13059 () Bool)

(assert (=> d!13059 (= c!8568 (and ((_ is Cons!1459) lt!26108) (= (_1!1043 (h!2042 lt!26108)) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!41544 () Option!131)

(assert (=> d!13059 (= (getValueByKey!125 lt!26108 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!41544)))

(declare-fun b!63338 () Bool)

(declare-fun e!41545 () Option!131)

(assert (=> b!63338 (= e!41545 (getValueByKey!125 (t!4861 lt!26108) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63339 () Bool)

(assert (=> b!63339 (= e!41545 None!129)))

(declare-fun b!63337 () Bool)

(assert (=> b!63337 (= e!41544 e!41545)))

(declare-fun c!8569 () Bool)

(assert (=> b!63337 (= c!8569 (and ((_ is Cons!1459) lt!26108) (not (= (_1!1043 (h!2042 lt!26108)) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63336 () Bool)

(assert (=> b!63336 (= e!41544 (Some!130 (_2!1043 (h!2042 lt!26108))))))

(assert (= (and d!13059 c!8568) b!63336))

(assert (= (and d!13059 (not c!8568)) b!63337))

(assert (= (and b!63337 c!8569) b!63338))

(assert (= (and b!63337 (not c!8569)) b!63339))

(declare-fun m!57281 () Bool)

(assert (=> b!63338 m!57281))

(assert (=> d!12677 d!13059))

(declare-fun d!13061 () Bool)

(assert (=> d!13061 (= (getValueByKey!125 lt!26108 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26590 () Unit!1689)

(assert (=> d!13061 (= lt!26590 (choose!348 lt!26108 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41546 () Bool)

(assert (=> d!13061 e!41546))

(declare-fun res!34635 () Bool)

(assert (=> d!13061 (=> (not res!34635) (not e!41546))))

(assert (=> d!13061 (= res!34635 (isStrictlySorted!281 lt!26108))))

(assert (=> d!13061 (= (lemmaContainsTupThenGetReturnValue!44 lt!26108 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26590)))

(declare-fun b!63340 () Bool)

(declare-fun res!34636 () Bool)

(assert (=> b!63340 (=> (not res!34636) (not e!41546))))

(assert (=> b!63340 (= res!34636 (containsKey!129 lt!26108 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63341 () Bool)

(assert (=> b!63341 (= e!41546 (contains!703 lt!26108 (tuple2!2067 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!13061 res!34635) b!63340))

(assert (= (and b!63340 res!34636) b!63341))

(assert (=> d!13061 m!56051))

(declare-fun m!57283 () Bool)

(assert (=> d!13061 m!57283))

(declare-fun m!57285 () Bool)

(assert (=> d!13061 m!57285))

(declare-fun m!57287 () Bool)

(assert (=> b!63340 m!57287))

(declare-fun m!57289 () Bool)

(assert (=> b!63341 m!57289))

(assert (=> d!12677 d!13061))

(declare-fun b!63342 () Bool)

(declare-fun e!41548 () List!1463)

(declare-fun call!5003 () List!1463)

(assert (=> b!63342 (= e!41548 call!5003)))

(declare-fun c!8573 () Bool)

(declare-fun e!41547 () List!1463)

(declare-fun bm!4998 () Bool)

(assert (=> bm!4998 (= call!5003 ($colon$colon!61 e!41547 (ite c!8573 (h!2042 (toList!710 call!4910)) (tuple2!2067 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!8570 () Bool)

(assert (=> bm!4998 (= c!8570 c!8573)))

(declare-fun b!63343 () Bool)

(declare-fun e!41549 () List!1463)

(declare-fun call!5002 () List!1463)

(assert (=> b!63343 (= e!41549 call!5002)))

(declare-fun bm!4999 () Bool)

(declare-fun call!5001 () List!1463)

(assert (=> bm!4999 (= call!5002 call!5001)))

(declare-fun b!63344 () Bool)

(declare-fun e!41550 () List!1463)

(assert (=> b!63344 (= e!41548 e!41550)))

(declare-fun c!8571 () Bool)

(assert (=> b!63344 (= c!8571 (and ((_ is Cons!1459) (toList!710 call!4910)) (= (_1!1043 (h!2042 (toList!710 call!4910))) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun c!8572 () Bool)

(declare-fun b!63346 () Bool)

(assert (=> b!63346 (= e!41547 (ite c!8571 (t!4861 (toList!710 call!4910)) (ite c!8572 (Cons!1459 (h!2042 (toList!710 call!4910)) (t!4861 (toList!710 call!4910))) Nil!1460)))))

(declare-fun b!63347 () Bool)

(assert (=> b!63347 (= e!41549 call!5002)))

(declare-fun bm!5000 () Bool)

(assert (=> bm!5000 (= call!5001 call!5003)))

(declare-fun b!63348 () Bool)

(assert (=> b!63348 (= e!41547 (insertStrictlySorted!46 (t!4861 (toList!710 call!4910)) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63349 () Bool)

(assert (=> b!63349 (= c!8572 (and ((_ is Cons!1459) (toList!710 call!4910)) (bvsgt (_1!1043 (h!2042 (toList!710 call!4910))) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!63349 (= e!41550 e!41549)))

(declare-fun b!63345 () Bool)

(declare-fun res!34638 () Bool)

(declare-fun e!41551 () Bool)

(assert (=> b!63345 (=> (not res!34638) (not e!41551))))

(declare-fun lt!26591 () List!1463)

(assert (=> b!63345 (= res!34638 (containsKey!129 lt!26591 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun d!13063 () Bool)

(assert (=> d!13063 e!41551))

(declare-fun res!34637 () Bool)

(assert (=> d!13063 (=> (not res!34637) (not e!41551))))

(assert (=> d!13063 (= res!34637 (isStrictlySorted!281 lt!26591))))

(assert (=> d!13063 (= lt!26591 e!41548)))

(assert (=> d!13063 (= c!8573 (and ((_ is Cons!1459) (toList!710 call!4910)) (bvslt (_1!1043 (h!2042 (toList!710 call!4910))) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!13063 (isStrictlySorted!281 (toList!710 call!4910))))

(assert (=> d!13063 (= (insertStrictlySorted!46 (toList!710 call!4910) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26591)))

(declare-fun b!63350 () Bool)

(assert (=> b!63350 (= e!41550 call!5001)))

(declare-fun b!63351 () Bool)

(assert (=> b!63351 (= e!41551 (contains!703 lt!26591 (tuple2!2067 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!13063 c!8573) b!63342))

(assert (= (and d!13063 (not c!8573)) b!63344))

(assert (= (and b!63344 c!8571) b!63350))

(assert (= (and b!63344 (not c!8571)) b!63349))

(assert (= (and b!63349 c!8572) b!63347))

(assert (= (and b!63349 (not c!8572)) b!63343))

(assert (= (or b!63347 b!63343) bm!4999))

(assert (= (or b!63350 bm!4999) bm!5000))

(assert (= (or b!63342 bm!5000) bm!4998))

(assert (= (and bm!4998 c!8570) b!63348))

(assert (= (and bm!4998 (not c!8570)) b!63346))

(assert (= (and d!13063 res!34637) b!63345))

(assert (= (and b!63345 res!34638) b!63351))

(declare-fun m!57291 () Bool)

(assert (=> b!63351 m!57291))

(declare-fun m!57293 () Bool)

(assert (=> d!13063 m!57293))

(declare-fun m!57295 () Bool)

(assert (=> d!13063 m!57295))

(declare-fun m!57297 () Bool)

(assert (=> b!63348 m!57297))

(declare-fun m!57299 () Bool)

(assert (=> b!63345 m!57299))

(declare-fun m!57301 () Bool)

(assert (=> bm!4998 m!57301))

(assert (=> d!12677 d!13063))

(declare-fun d!13065 () Bool)

(declare-fun e!41552 () Bool)

(assert (=> d!13065 e!41552))

(declare-fun res!34639 () Bool)

(assert (=> d!13065 (=> (not res!34639) (not e!41552))))

(declare-fun lt!26592 () ListLongMap!1389)

(assert (=> d!13065 (= res!34639 (contains!700 lt!26592 (_1!1043 (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(declare-fun lt!26595 () List!1463)

(assert (=> d!13065 (= lt!26592 (ListLongMap!1390 lt!26595))))

(declare-fun lt!26594 () Unit!1689)

(declare-fun lt!26593 () Unit!1689)

(assert (=> d!13065 (= lt!26594 lt!26593)))

(assert (=> d!13065 (= (getValueByKey!125 lt!26595 (_1!1043 (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))) (Some!130 (_2!1043 (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!13065 (= lt!26593 (lemmaContainsTupThenGetReturnValue!44 lt!26595 (_1!1043 (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (_2!1043 (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!13065 (= lt!26595 (insertStrictlySorted!46 (toList!710 (ite c!8428 call!4957 (ite c!8431 call!4955 call!4958))) (_1!1043 (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (_2!1043 (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!13065 (= (+!83 (ite c!8428 call!4957 (ite c!8431 call!4955 call!4958)) (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) lt!26592)))

(declare-fun b!63352 () Bool)

(declare-fun res!34640 () Bool)

(assert (=> b!63352 (=> (not res!34640) (not e!41552))))

(assert (=> b!63352 (= res!34640 (= (getValueByKey!125 (toList!710 lt!26592) (_1!1043 (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))) (Some!130 (_2!1043 (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))))

(declare-fun b!63353 () Bool)

(assert (=> b!63353 (= e!41552 (contains!703 (toList!710 lt!26592) (ite (or c!8428 c!8431) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (= (and d!13065 res!34639) b!63352))

(assert (= (and b!63352 res!34640) b!63353))

(declare-fun m!57303 () Bool)

(assert (=> d!13065 m!57303))

(declare-fun m!57305 () Bool)

(assert (=> d!13065 m!57305))

(declare-fun m!57307 () Bool)

(assert (=> d!13065 m!57307))

(declare-fun m!57309 () Bool)

(assert (=> d!13065 m!57309))

(declare-fun m!57311 () Bool)

(assert (=> b!63352 m!57311))

(declare-fun m!57313 () Bool)

(assert (=> b!63353 m!57313))

(assert (=> bm!4956 d!13065))

(assert (=> b!62864 d!12775))

(assert (=> b!62631 d!12775))

(declare-fun d!13067 () Bool)

(declare-fun res!34641 () Bool)

(declare-fun e!41553 () Bool)

(assert (=> d!13067 (=> res!34641 e!41553)))

(assert (=> d!13067 (= res!34641 (and ((_ is Cons!1459) (toList!710 call!4890)) (= (_1!1043 (h!2042 (toList!710 call!4890))) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026))))))))

(assert (=> d!13067 (= (containsKey!129 (toList!710 call!4890) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))) e!41553)))

(declare-fun b!63354 () Bool)

(declare-fun e!41554 () Bool)

(assert (=> b!63354 (= e!41553 e!41554)))

(declare-fun res!34642 () Bool)

(assert (=> b!63354 (=> (not res!34642) (not e!41554))))

(assert (=> b!63354 (= res!34642 (and (or (not ((_ is Cons!1459) (toList!710 call!4890))) (bvsle (_1!1043 (h!2042 (toList!710 call!4890))) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026))))) ((_ is Cons!1459) (toList!710 call!4890)) (bvslt (_1!1043 (h!2042 (toList!710 call!4890))) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026))))))))

(declare-fun b!63355 () Bool)

(assert (=> b!63355 (= e!41554 (containsKey!129 (t!4861 (toList!710 call!4890)) (ite c!8343 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))))

(assert (= (and d!13067 (not res!34641)) b!63354))

(assert (= (and b!63354 res!34642) b!63355))

(declare-fun m!57315 () Bool)

(assert (=> b!63355 m!57315))

(assert (=> d!12741 d!13067))

(assert (=> b!62756 d!12639))

(declare-fun d!13069 () Bool)

(declare-fun e!41556 () Bool)

(assert (=> d!13069 e!41556))

(declare-fun res!34643 () Bool)

(assert (=> d!13069 (=> res!34643 e!41556)))

(declare-fun lt!26596 () Bool)

(assert (=> d!13069 (= res!34643 (not lt!26596))))

(declare-fun lt!26599 () Bool)

(assert (=> d!13069 (= lt!26596 lt!26599)))

(declare-fun lt!26597 () Unit!1689)

(declare-fun e!41555 () Unit!1689)

(assert (=> d!13069 (= lt!26597 e!41555)))

(declare-fun c!8574 () Bool)

(assert (=> d!13069 (= c!8574 lt!26599)))

(assert (=> d!13069 (= lt!26599 (containsKey!129 (toList!710 lt!26321) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13069 (= (contains!700 lt!26321 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26596)))

(declare-fun b!63356 () Bool)

(declare-fun lt!26598 () Unit!1689)

(assert (=> b!63356 (= e!41555 lt!26598)))

(assert (=> b!63356 (= lt!26598 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26321) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63356 (isDefined!79 (getValueByKey!125 (toList!710 lt!26321) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63357 () Bool)

(declare-fun Unit!1735 () Unit!1689)

(assert (=> b!63357 (= e!41555 Unit!1735)))

(declare-fun b!63358 () Bool)

(assert (=> b!63358 (= e!41556 (isDefined!79 (getValueByKey!125 (toList!710 lt!26321) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13069 c!8574) b!63356))

(assert (= (and d!13069 (not c!8574)) b!63357))

(assert (= (and d!13069 (not res!34643)) b!63358))

(declare-fun m!57317 () Bool)

(assert (=> d!13069 m!57317))

(declare-fun m!57319 () Bool)

(assert (=> b!63356 m!57319))

(declare-fun m!57321 () Bool)

(assert (=> b!63356 m!57321))

(assert (=> b!63356 m!57321))

(declare-fun m!57323 () Bool)

(assert (=> b!63356 m!57323))

(assert (=> b!63358 m!57321))

(assert (=> b!63358 m!57321))

(assert (=> b!63358 m!57323))

(assert (=> bm!4957 d!13069))

(declare-fun d!13071 () Bool)

(declare-fun lt!26600 () (_ BitVec 32))

(assert (=> d!13071 (and (bvsge lt!26600 #b00000000000000000000000000000000) (bvsle lt!26600 (bvsub (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun e!41557 () (_ BitVec 32))

(assert (=> d!13071 (= lt!26600 e!41557)))

(declare-fun c!8575 () Bool)

(assert (=> d!13071 (= c!8575 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> d!13071 (and (bvsle #b00000000000000000000000000000000 (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(assert (=> d!13071 (= (arrayCountValidKeys!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000 (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))) lt!26600)))

(declare-fun bm!5001 () Bool)

(declare-fun call!5004 () (_ BitVec 32))

(assert (=> bm!5001 (= call!5004 (arrayCountValidKeys!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!63359 () Bool)

(declare-fun e!41558 () (_ BitVec 32))

(assert (=> b!63359 (= e!41558 (bvadd #b00000000000000000000000000000001 call!5004))))

(declare-fun b!63360 () Bool)

(assert (=> b!63360 (= e!41557 #b00000000000000000000000000000000)))

(declare-fun b!63361 () Bool)

(assert (=> b!63361 (= e!41557 e!41558)))

(declare-fun c!8576 () Bool)

(assert (=> b!63361 (= c!8576 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!63362 () Bool)

(assert (=> b!63362 (= e!41558 call!5004)))

(assert (= (and d!13071 c!8575) b!63360))

(assert (= (and d!13071 (not c!8575)) b!63361))

(assert (= (and b!63361 c!8576) b!63359))

(assert (= (and b!63361 (not c!8576)) b!63362))

(assert (= (or b!63359 b!63362) bm!5001))

(declare-fun m!57325 () Bool)

(assert (=> bm!5001 m!57325))

(assert (=> b!63361 m!56543))

(assert (=> b!63361 m!56543))

(assert (=> b!63361 m!56549))

(assert (=> b!62888 d!13071))

(declare-fun d!13073 () Bool)

(assert (=> d!13073 (= (get!1100 (getValueByKey!125 (toList!710 lt!25916) lt!25915)) (v!2423 (getValueByKey!125 (toList!710 lt!25916) lt!25915)))))

(assert (=> d!12687 d!13073))

(declare-fun d!13075 () Bool)

(declare-fun c!8577 () Bool)

(assert (=> d!13075 (= c!8577 (and ((_ is Cons!1459) (toList!710 lt!25916)) (= (_1!1043 (h!2042 (toList!710 lt!25916))) lt!25915)))))

(declare-fun e!41559 () Option!131)

(assert (=> d!13075 (= (getValueByKey!125 (toList!710 lt!25916) lt!25915) e!41559)))

(declare-fun b!63365 () Bool)

(declare-fun e!41560 () Option!131)

(assert (=> b!63365 (= e!41560 (getValueByKey!125 (t!4861 (toList!710 lt!25916)) lt!25915))))

(declare-fun b!63366 () Bool)

(assert (=> b!63366 (= e!41560 None!129)))

(declare-fun b!63364 () Bool)

(assert (=> b!63364 (= e!41559 e!41560)))

(declare-fun c!8578 () Bool)

(assert (=> b!63364 (= c!8578 (and ((_ is Cons!1459) (toList!710 lt!25916)) (not (= (_1!1043 (h!2042 (toList!710 lt!25916))) lt!25915))))))

(declare-fun b!63363 () Bool)

(assert (=> b!63363 (= e!41559 (Some!130 (_2!1043 (h!2042 (toList!710 lt!25916)))))))

(assert (= (and d!13075 c!8577) b!63363))

(assert (= (and d!13075 (not c!8577)) b!63364))

(assert (= (and b!63364 c!8578) b!63365))

(assert (= (and b!63364 (not c!8578)) b!63366))

(declare-fun m!57327 () Bool)

(assert (=> b!63365 m!57327))

(assert (=> d!12687 d!13075))

(declare-fun d!13077 () Bool)

(declare-fun c!8579 () Bool)

(assert (=> d!13077 (= c!8579 (and ((_ is Cons!1459) (t!4861 (toList!710 lt!25845))) (= (_1!1043 (h!2042 (t!4861 (toList!710 lt!25845)))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(declare-fun e!41561 () Option!131)

(assert (=> d!13077 (= (getValueByKey!125 (t!4861 (toList!710 lt!25845)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) e!41561)))

(declare-fun b!63369 () Bool)

(declare-fun e!41562 () Option!131)

(assert (=> b!63369 (= e!41562 (getValueByKey!125 (t!4861 (t!4861 (toList!710 lt!25845))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun b!63370 () Bool)

(assert (=> b!63370 (= e!41562 None!129)))

(declare-fun b!63368 () Bool)

(assert (=> b!63368 (= e!41561 e!41562)))

(declare-fun c!8580 () Bool)

(assert (=> b!63368 (= c!8580 (and ((_ is Cons!1459) (t!4861 (toList!710 lt!25845))) (not (= (_1!1043 (h!2042 (t!4861 (toList!710 lt!25845)))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))))

(declare-fun b!63367 () Bool)

(assert (=> b!63367 (= e!41561 (Some!130 (_2!1043 (h!2042 (t!4861 (toList!710 lt!25845))))))))

(assert (= (and d!13077 c!8579) b!63367))

(assert (= (and d!13077 (not c!8579)) b!63368))

(assert (= (and b!63368 c!8580) b!63369))

(assert (= (and b!63368 (not c!8580)) b!63370))

(assert (=> b!63369 m!55705))

(declare-fun m!57329 () Bool)

(assert (=> b!63369 m!57329))

(assert (=> b!62673 d!13077))

(declare-fun d!13079 () Bool)

(declare-fun res!34644 () Bool)

(declare-fun e!41563 () Bool)

(assert (=> d!13079 (=> res!34644 e!41563)))

(assert (=> d!13079 (= res!34644 (= (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!13079 (= (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!41563)))

(declare-fun b!63371 () Bool)

(declare-fun e!41564 () Bool)

(assert (=> b!63371 (= e!41563 e!41564)))

(declare-fun res!34645 () Bool)

(assert (=> b!63371 (=> (not res!34645) (not e!41564))))

(assert (=> b!63371 (= res!34645 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!63372 () Bool)

(assert (=> b!63372 (= e!41564 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!234 thiss!992))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!13079 (not res!34644)) b!63371))

(assert (= (and b!63371 res!34645) b!63372))

(declare-fun m!57331 () Bool)

(assert (=> d!13079 m!57331))

(assert (=> b!63372 m!55705))

(declare-fun m!57333 () Bool)

(assert (=> b!63372 m!57333))

(assert (=> b!62850 d!13079))

(declare-fun d!13081 () Bool)

(declare-fun e!41566 () Bool)

(assert (=> d!13081 e!41566))

(declare-fun res!34646 () Bool)

(assert (=> d!13081 (=> res!34646 e!41566)))

(declare-fun lt!26601 () Bool)

(assert (=> d!13081 (= res!34646 (not lt!26601))))

(declare-fun lt!26604 () Bool)

(assert (=> d!13081 (= lt!26601 lt!26604)))

(declare-fun lt!26602 () Unit!1689)

(declare-fun e!41565 () Unit!1689)

(assert (=> d!13081 (= lt!26602 e!41565)))

(declare-fun c!8581 () Bool)

(assert (=> d!13081 (= c!8581 lt!26604)))

(assert (=> d!13081 (= lt!26604 (containsKey!129 (toList!710 lt!26113) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!13081 (= (contains!700 lt!26113 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26601)))

(declare-fun b!63373 () Bool)

(declare-fun lt!26603 () Unit!1689)

(assert (=> b!63373 (= e!41565 lt!26603)))

(assert (=> b!63373 (= lt!26603 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26113) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> b!63373 (isDefined!79 (getValueByKey!125 (toList!710 lt!26113) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63374 () Bool)

(declare-fun Unit!1736 () Unit!1689)

(assert (=> b!63374 (= e!41565 Unit!1736)))

(declare-fun b!63375 () Bool)

(assert (=> b!63375 (= e!41566 (isDefined!79 (getValueByKey!125 (toList!710 lt!26113) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13081 c!8581) b!63373))

(assert (= (and d!13081 (not c!8581)) b!63374))

(assert (= (and d!13081 (not res!34646)) b!63375))

(declare-fun m!57335 () Bool)

(assert (=> d!13081 m!57335))

(declare-fun m!57337 () Bool)

(assert (=> b!63373 m!57337))

(assert (=> b!63373 m!56081))

(assert (=> b!63373 m!56081))

(declare-fun m!57339 () Bool)

(assert (=> b!63373 m!57339))

(assert (=> b!63375 m!56081))

(assert (=> b!63375 m!56081))

(assert (=> b!63375 m!57339))

(assert (=> d!12681 d!13081))

(declare-fun c!8582 () Bool)

(declare-fun d!13083 () Bool)

(assert (=> d!13083 (= c!8582 (and ((_ is Cons!1459) lt!26116) (= (_1!1043 (h!2042 lt!26116)) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun e!41567 () Option!131)

(assert (=> d!13083 (= (getValueByKey!125 lt!26116 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) e!41567)))

(declare-fun b!63378 () Bool)

(declare-fun e!41568 () Option!131)

(assert (=> b!63378 (= e!41568 (getValueByKey!125 (t!4861 lt!26116) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63379 () Bool)

(assert (=> b!63379 (= e!41568 None!129)))

(declare-fun b!63377 () Bool)

(assert (=> b!63377 (= e!41567 e!41568)))

(declare-fun c!8583 () Bool)

(assert (=> b!63377 (= c!8583 (and ((_ is Cons!1459) lt!26116) (not (= (_1!1043 (h!2042 lt!26116)) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun b!63376 () Bool)

(assert (=> b!63376 (= e!41567 (Some!130 (_2!1043 (h!2042 lt!26116))))))

(assert (= (and d!13083 c!8582) b!63376))

(assert (= (and d!13083 (not c!8582)) b!63377))

(assert (= (and b!63377 c!8583) b!63378))

(assert (= (and b!63377 (not c!8583)) b!63379))

(declare-fun m!57341 () Bool)

(assert (=> b!63378 m!57341))

(assert (=> d!12681 d!13083))

(declare-fun d!13085 () Bool)

(assert (=> d!13085 (= (getValueByKey!125 lt!26116 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun lt!26605 () Unit!1689)

(assert (=> d!13085 (= lt!26605 (choose!348 lt!26116 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun e!41569 () Bool)

(assert (=> d!13085 e!41569))

(declare-fun res!34647 () Bool)

(assert (=> d!13085 (=> (not res!34647) (not e!41569))))

(assert (=> d!13085 (= res!34647 (isStrictlySorted!281 lt!26116))))

(assert (=> d!13085 (= (lemmaContainsTupThenGetReturnValue!44 lt!26116 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26605)))

(declare-fun b!63380 () Bool)

(declare-fun res!34648 () Bool)

(assert (=> b!63380 (=> (not res!34648) (not e!41569))))

(assert (=> b!63380 (= res!34648 (containsKey!129 lt!26116 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63381 () Bool)

(assert (=> b!63381 (= e!41569 (contains!703 lt!26116 (tuple2!2067 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13085 res!34647) b!63380))

(assert (= (and b!63380 res!34648) b!63381))

(assert (=> d!13085 m!56075))

(declare-fun m!57343 () Bool)

(assert (=> d!13085 m!57343))

(declare-fun m!57345 () Bool)

(assert (=> d!13085 m!57345))

(declare-fun m!57347 () Bool)

(assert (=> b!63380 m!57347))

(declare-fun m!57349 () Bool)

(assert (=> b!63381 m!57349))

(assert (=> d!12681 d!13085))

(declare-fun b!63382 () Bool)

(declare-fun e!41571 () List!1463)

(declare-fun call!5007 () List!1463)

(assert (=> b!63382 (= e!41571 call!5007)))

(declare-fun bm!5002 () Bool)

(declare-fun c!8587 () Bool)

(declare-fun e!41570 () List!1463)

(assert (=> bm!5002 (= call!5007 ($colon$colon!61 e!41570 (ite c!8587 (h!2042 (toList!710 lt!25919)) (tuple2!2067 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun c!8584 () Bool)

(assert (=> bm!5002 (= c!8584 c!8587)))

(declare-fun b!63383 () Bool)

(declare-fun e!41572 () List!1463)

(declare-fun call!5006 () List!1463)

(assert (=> b!63383 (= e!41572 call!5006)))

(declare-fun bm!5003 () Bool)

(declare-fun call!5005 () List!1463)

(assert (=> bm!5003 (= call!5006 call!5005)))

(declare-fun b!63384 () Bool)

(declare-fun e!41573 () List!1463)

(assert (=> b!63384 (= e!41571 e!41573)))

(declare-fun c!8585 () Bool)

(assert (=> b!63384 (= c!8585 (and ((_ is Cons!1459) (toList!710 lt!25919)) (= (_1!1043 (h!2042 (toList!710 lt!25919))) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!63386 () Bool)

(declare-fun c!8586 () Bool)

(assert (=> b!63386 (= e!41570 (ite c!8585 (t!4861 (toList!710 lt!25919)) (ite c!8586 (Cons!1459 (h!2042 (toList!710 lt!25919)) (t!4861 (toList!710 lt!25919))) Nil!1460)))))

(declare-fun b!63387 () Bool)

(assert (=> b!63387 (= e!41572 call!5006)))

(declare-fun bm!5004 () Bool)

(assert (=> bm!5004 (= call!5005 call!5007)))

(declare-fun b!63388 () Bool)

(assert (=> b!63388 (= e!41570 (insertStrictlySorted!46 (t!4861 (toList!710 lt!25919)) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63389 () Bool)

(assert (=> b!63389 (= c!8586 (and ((_ is Cons!1459) (toList!710 lt!25919)) (bvsgt (_1!1043 (h!2042 (toList!710 lt!25919))) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> b!63389 (= e!41573 e!41572)))

(declare-fun b!63385 () Bool)

(declare-fun res!34650 () Bool)

(declare-fun e!41574 () Bool)

(assert (=> b!63385 (=> (not res!34650) (not e!41574))))

(declare-fun lt!26606 () List!1463)

(assert (=> b!63385 (= res!34650 (containsKey!129 lt!26606 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun d!13087 () Bool)

(assert (=> d!13087 e!41574))

(declare-fun res!34649 () Bool)

(assert (=> d!13087 (=> (not res!34649) (not e!41574))))

(assert (=> d!13087 (= res!34649 (isStrictlySorted!281 lt!26606))))

(assert (=> d!13087 (= lt!26606 e!41571)))

(assert (=> d!13087 (= c!8587 (and ((_ is Cons!1459) (toList!710 lt!25919)) (bvslt (_1!1043 (h!2042 (toList!710 lt!25919))) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> d!13087 (isStrictlySorted!281 (toList!710 lt!25919))))

(assert (=> d!13087 (= (insertStrictlySorted!46 (toList!710 lt!25919) (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26606)))

(declare-fun b!63390 () Bool)

(assert (=> b!63390 (= e!41573 call!5005)))

(declare-fun b!63391 () Bool)

(assert (=> b!63391 (= e!41574 (contains!703 lt!26606 (tuple2!2067 (_1!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25925 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13087 c!8587) b!63382))

(assert (= (and d!13087 (not c!8587)) b!63384))

(assert (= (and b!63384 c!8585) b!63390))

(assert (= (and b!63384 (not c!8585)) b!63389))

(assert (= (and b!63389 c!8586) b!63387))

(assert (= (and b!63389 (not c!8586)) b!63383))

(assert (= (or b!63387 b!63383) bm!5003))

(assert (= (or b!63390 bm!5003) bm!5004))

(assert (= (or b!63382 bm!5004) bm!5002))

(assert (= (and bm!5002 c!8584) b!63388))

(assert (= (and bm!5002 (not c!8584)) b!63386))

(assert (= (and d!13087 res!34649) b!63385))

(assert (= (and b!63385 res!34650) b!63391))

(declare-fun m!57351 () Bool)

(assert (=> b!63391 m!57351))

(declare-fun m!57353 () Bool)

(assert (=> d!13087 m!57353))

(declare-fun m!57355 () Bool)

(assert (=> d!13087 m!57355))

(declare-fun m!57357 () Bool)

(assert (=> b!63388 m!57357))

(declare-fun m!57359 () Bool)

(assert (=> b!63385 m!57359))

(declare-fun m!57361 () Bool)

(assert (=> bm!5002 m!57361))

(assert (=> d!12681 d!13087))

(declare-fun d!13089 () Bool)

(declare-fun res!34651 () Bool)

(declare-fun e!41575 () Bool)

(assert (=> d!13089 (=> res!34651 e!41575)))

(assert (=> d!13089 (= res!34651 (and ((_ is Cons!1459) (toList!710 lt!25929)) (= (_1!1043 (h!2042 (toList!710 lt!25929))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13089 (= (containsKey!129 (toList!710 lt!25929) #b0000000000000000000000000000000000000000000000000000000000000000) e!41575)))

(declare-fun b!63392 () Bool)

(declare-fun e!41576 () Bool)

(assert (=> b!63392 (= e!41575 e!41576)))

(declare-fun res!34652 () Bool)

(assert (=> b!63392 (=> (not res!34652) (not e!41576))))

(assert (=> b!63392 (= res!34652 (and (or (not ((_ is Cons!1459) (toList!710 lt!25929))) (bvsle (_1!1043 (h!2042 (toList!710 lt!25929))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1459) (toList!710 lt!25929)) (bvslt (_1!1043 (h!2042 (toList!710 lt!25929))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63393 () Bool)

(assert (=> b!63393 (= e!41576 (containsKey!129 (t!4861 (toList!710 lt!25929)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13089 (not res!34651)) b!63392))

(assert (= (and b!63392 res!34652) b!63393))

(declare-fun m!57363 () Bool)

(assert (=> b!63393 m!57363))

(assert (=> d!12731 d!13089))

(declare-fun d!13091 () Bool)

(assert (=> d!13091 (= (get!1100 (getValueByKey!125 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2423 (getValueByKey!125 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12733 d!13091))

(assert (=> d!12733 d!12971))

(declare-fun d!13093 () Bool)

(assert (=> d!13093 (= (apply!68 lt!26243 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1100 (getValueByKey!125 (toList!710 lt!26243) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2756 () Bool)

(assert (= bs!2756 d!13093))

(assert (=> bs!2756 m!56583))

(assert (=> bs!2756 m!56583))

(declare-fun m!57365 () Bool)

(assert (=> bs!2756 m!57365))

(assert (=> b!62763 d!13093))

(declare-fun d!13095 () Bool)

(assert (=> d!13095 (= (inRange!0 (ite c!8384 (index!3081 lt!26089) (index!3084 lt!26089)) (mask!5994 newMap!16)) (and (bvsge (ite c!8384 (index!3081 lt!26089) (index!3084 lt!26089)) #b00000000000000000000000000000000) (bvslt (ite c!8384 (index!3081 lt!26089) (index!3084 lt!26089)) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4921 d!13095))

(declare-fun d!13097 () Bool)

(declare-fun e!41578 () Bool)

(assert (=> d!13097 e!41578))

(declare-fun res!34653 () Bool)

(assert (=> d!13097 (=> res!34653 e!41578)))

(declare-fun lt!26607 () Bool)

(assert (=> d!13097 (= res!34653 (not lt!26607))))

(declare-fun lt!26610 () Bool)

(assert (=> d!13097 (= lt!26607 lt!26610)))

(declare-fun lt!26608 () Unit!1689)

(declare-fun e!41577 () Unit!1689)

(assert (=> d!13097 (= lt!26608 e!41577)))

(declare-fun c!8588 () Bool)

(assert (=> d!13097 (= c!8588 lt!26610)))

(assert (=> d!13097 (= lt!26610 (containsKey!129 (toList!710 lt!26331) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!13097 (= (contains!700 lt!26331 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26607)))

(declare-fun b!63394 () Bool)

(declare-fun lt!26609 () Unit!1689)

(assert (=> b!63394 (= e!41577 lt!26609)))

(assert (=> b!63394 (= lt!26609 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26331) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> b!63394 (isDefined!79 (getValueByKey!125 (toList!710 lt!26331) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63395 () Bool)

(declare-fun Unit!1737 () Unit!1689)

(assert (=> b!63395 (= e!41577 Unit!1737)))

(declare-fun b!63396 () Bool)

(assert (=> b!63396 (= e!41578 (isDefined!79 (getValueByKey!125 (toList!710 lt!26331) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13097 c!8588) b!63394))

(assert (= (and d!13097 (not c!8588)) b!63395))

(assert (= (and d!13097 (not res!34653)) b!63396))

(declare-fun m!57367 () Bool)

(assert (=> d!13097 m!57367))

(declare-fun m!57369 () Bool)

(assert (=> b!63394 m!57369))

(assert (=> b!63394 m!56459))

(assert (=> b!63394 m!56459))

(declare-fun m!57371 () Bool)

(assert (=> b!63394 m!57371))

(assert (=> b!63396 m!56459))

(assert (=> b!63396 m!56459))

(assert (=> b!63396 m!57371))

(assert (=> d!12743 d!13097))

(declare-fun d!13099 () Bool)

(declare-fun c!8589 () Bool)

(assert (=> d!13099 (= c!8589 (and ((_ is Cons!1459) lt!26334) (= (_1!1043 (h!2042 lt!26334)) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun e!41579 () Option!131)

(assert (=> d!13099 (= (getValueByKey!125 lt!26334 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) e!41579)))

(declare-fun b!63399 () Bool)

(declare-fun e!41580 () Option!131)

(assert (=> b!63399 (= e!41580 (getValueByKey!125 (t!4861 lt!26334) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63400 () Bool)

(assert (=> b!63400 (= e!41580 None!129)))

(declare-fun b!63398 () Bool)

(assert (=> b!63398 (= e!41579 e!41580)))

(declare-fun c!8590 () Bool)

(assert (=> b!63398 (= c!8590 (and ((_ is Cons!1459) lt!26334) (not (= (_1!1043 (h!2042 lt!26334)) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun b!63397 () Bool)

(assert (=> b!63397 (= e!41579 (Some!130 (_2!1043 (h!2042 lt!26334))))))

(assert (= (and d!13099 c!8589) b!63397))

(assert (= (and d!13099 (not c!8589)) b!63398))

(assert (= (and b!63398 c!8590) b!63399))

(assert (= (and b!63398 (not c!8590)) b!63400))

(declare-fun m!57373 () Bool)

(assert (=> b!63399 m!57373))

(assert (=> d!12743 d!13099))

(declare-fun d!13101 () Bool)

(assert (=> d!13101 (= (getValueByKey!125 lt!26334 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun lt!26611 () Unit!1689)

(assert (=> d!13101 (= lt!26611 (choose!348 lt!26334 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun e!41581 () Bool)

(assert (=> d!13101 e!41581))

(declare-fun res!34654 () Bool)

(assert (=> d!13101 (=> (not res!34654) (not e!41581))))

(assert (=> d!13101 (= res!34654 (isStrictlySorted!281 lt!26334))))

(assert (=> d!13101 (= (lemmaContainsTupThenGetReturnValue!44 lt!26334 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26611)))

(declare-fun b!63401 () Bool)

(declare-fun res!34655 () Bool)

(assert (=> b!63401 (=> (not res!34655) (not e!41581))))

(assert (=> b!63401 (= res!34655 (containsKey!129 lt!26334 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63402 () Bool)

(assert (=> b!63402 (= e!41581 (contains!703 lt!26334 (tuple2!2067 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13101 res!34654) b!63401))

(assert (= (and b!63401 res!34655) b!63402))

(assert (=> d!13101 m!56453))

(declare-fun m!57375 () Bool)

(assert (=> d!13101 m!57375))

(declare-fun m!57377 () Bool)

(assert (=> d!13101 m!57377))

(declare-fun m!57379 () Bool)

(assert (=> b!63401 m!57379))

(declare-fun m!57381 () Bool)

(assert (=> b!63402 m!57381))

(assert (=> d!12743 d!13101))

(declare-fun b!63403 () Bool)

(declare-fun e!41583 () List!1463)

(declare-fun call!5010 () List!1463)

(assert (=> b!63403 (= e!41583 call!5010)))

(declare-fun bm!5005 () Bool)

(declare-fun c!8594 () Bool)

(declare-fun e!41582 () List!1463)

(assert (=> bm!5005 (= call!5010 ($colon$colon!61 e!41582 (ite c!8594 (h!2042 (toList!710 call!4835)) (tuple2!2067 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun c!8591 () Bool)

(assert (=> bm!5005 (= c!8591 c!8594)))

(declare-fun b!63404 () Bool)

(declare-fun e!41584 () List!1463)

(declare-fun call!5009 () List!1463)

(assert (=> b!63404 (= e!41584 call!5009)))

(declare-fun bm!5006 () Bool)

(declare-fun call!5008 () List!1463)

(assert (=> bm!5006 (= call!5009 call!5008)))

(declare-fun b!63405 () Bool)

(declare-fun e!41585 () List!1463)

(assert (=> b!63405 (= e!41583 e!41585)))

(declare-fun c!8592 () Bool)

(assert (=> b!63405 (= c!8592 (and ((_ is Cons!1459) (toList!710 call!4835)) (= (_1!1043 (h!2042 (toList!710 call!4835))) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun c!8593 () Bool)

(declare-fun b!63407 () Bool)

(assert (=> b!63407 (= e!41582 (ite c!8592 (t!4861 (toList!710 call!4835)) (ite c!8593 (Cons!1459 (h!2042 (toList!710 call!4835)) (t!4861 (toList!710 call!4835))) Nil!1460)))))

(declare-fun b!63408 () Bool)

(assert (=> b!63408 (= e!41584 call!5009)))

(declare-fun bm!5007 () Bool)

(assert (=> bm!5007 (= call!5008 call!5010)))

(declare-fun b!63409 () Bool)

(assert (=> b!63409 (= e!41582 (insertStrictlySorted!46 (t!4861 (toList!710 call!4835)) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63410 () Bool)

(assert (=> b!63410 (= c!8593 (and ((_ is Cons!1459) (toList!710 call!4835)) (bvsgt (_1!1043 (h!2042 (toList!710 call!4835))) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> b!63410 (= e!41585 e!41584)))

(declare-fun b!63406 () Bool)

(declare-fun res!34657 () Bool)

(declare-fun e!41586 () Bool)

(assert (=> b!63406 (=> (not res!34657) (not e!41586))))

(declare-fun lt!26612 () List!1463)

(assert (=> b!63406 (= res!34657 (containsKey!129 lt!26612 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun d!13103 () Bool)

(assert (=> d!13103 e!41586))

(declare-fun res!34656 () Bool)

(assert (=> d!13103 (=> (not res!34656) (not e!41586))))

(assert (=> d!13103 (= res!34656 (isStrictlySorted!281 lt!26612))))

(assert (=> d!13103 (= lt!26612 e!41583)))

(assert (=> d!13103 (= c!8594 (and ((_ is Cons!1459) (toList!710 call!4835)) (bvslt (_1!1043 (h!2042 (toList!710 call!4835))) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> d!13103 (isStrictlySorted!281 (toList!710 call!4835))))

(assert (=> d!13103 (= (insertStrictlySorted!46 (toList!710 call!4835) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26612)))

(declare-fun b!63411 () Bool)

(assert (=> b!63411 (= e!41585 call!5008)))

(declare-fun b!63412 () Bool)

(assert (=> b!63412 (= e!41586 (contains!703 lt!26612 (tuple2!2067 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13103 c!8594) b!63403))

(assert (= (and d!13103 (not c!8594)) b!63405))

(assert (= (and b!63405 c!8592) b!63411))

(assert (= (and b!63405 (not c!8592)) b!63410))

(assert (= (and b!63410 c!8593) b!63408))

(assert (= (and b!63410 (not c!8593)) b!63404))

(assert (= (or b!63408 b!63404) bm!5006))

(assert (= (or b!63411 bm!5006) bm!5007))

(assert (= (or b!63403 bm!5007) bm!5005))

(assert (= (and bm!5005 c!8591) b!63409))

(assert (= (and bm!5005 (not c!8591)) b!63407))

(assert (= (and d!13103 res!34656) b!63406))

(assert (= (and b!63406 res!34657) b!63412))

(declare-fun m!57383 () Bool)

(assert (=> b!63412 m!57383))

(declare-fun m!57385 () Bool)

(assert (=> d!13103 m!57385))

(declare-fun m!57387 () Bool)

(assert (=> d!13103 m!57387))

(declare-fun m!57389 () Bool)

(assert (=> b!63409 m!57389))

(declare-fun m!57391 () Bool)

(assert (=> b!63406 m!57391))

(declare-fun m!57393 () Bool)

(assert (=> bm!5005 m!57393))

(assert (=> d!12743 d!13103))

(declare-fun b!63413 () Bool)

(declare-fun e!41589 () Bool)

(declare-fun lt!26613 () ListLongMap!1389)

(assert (=> b!63413 (= e!41589 (isEmpty!304 lt!26613))))

(declare-fun d!13105 () Bool)

(declare-fun e!41592 () Bool)

(assert (=> d!13105 e!41592))

(declare-fun res!34661 () Bool)

(assert (=> d!13105 (=> (not res!34661) (not e!41592))))

(assert (=> d!13105 (= res!34661 (not (contains!700 lt!26613 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!41591 () ListLongMap!1389)

(assert (=> d!13105 (= lt!26613 e!41591)))

(declare-fun c!8598 () Bool)

(assert (=> d!13105 (= c!8598 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!13105 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13105 (= (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022) (mask!5994 newMap!16) (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26613)))

(declare-fun b!63414 () Bool)

(assert (=> b!63414 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> b!63414 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022))))))

(declare-fun e!41593 () Bool)

(assert (=> b!63414 (= e!41593 (= (apply!68 lt!26613 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63415 () Bool)

(declare-fun e!41588 () ListLongMap!1389)

(assert (=> b!63415 (= e!41591 e!41588)))

(declare-fun c!8597 () Bool)

(assert (=> b!63415 (= c!8597 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63416 () Bool)

(declare-fun call!5011 () ListLongMap!1389)

(assert (=> b!63416 (= e!41588 call!5011)))

(declare-fun b!63417 () Bool)

(declare-fun e!41590 () Bool)

(assert (=> b!63417 (= e!41590 e!41589)))

(declare-fun c!8595 () Bool)

(assert (=> b!63417 (= c!8595 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63418 () Bool)

(assert (=> b!63418 (= e!41592 e!41590)))

(declare-fun c!8596 () Bool)

(declare-fun e!41587 () Bool)

(assert (=> b!63418 (= c!8596 e!41587)))

(declare-fun res!34658 () Bool)

(assert (=> b!63418 (=> (not res!34658) (not e!41587))))

(assert (=> b!63418 (= res!34658 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun bm!5008 () Bool)

(assert (=> bm!5008 (= call!5011 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022) (mask!5994 newMap!16) (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16)))))

(declare-fun b!63419 () Bool)

(assert (=> b!63419 (= e!41591 (ListLongMap!1390 Nil!1460))))

(declare-fun b!63420 () Bool)

(assert (=> b!63420 (= e!41589 (= lt!26613 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022) (mask!5994 newMap!16) (ite c!8336 (ite c!8345 lt!26015 lt!26019) (extraKeys!1967 newMap!16)) (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16))))))

(declare-fun b!63421 () Bool)

(assert (=> b!63421 (= e!41590 e!41593)))

(assert (=> b!63421 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun res!34660 () Bool)

(assert (=> b!63421 (= res!34660 (contains!700 lt!26613 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63421 (=> (not res!34660) (not e!41593))))

(declare-fun b!63422 () Bool)

(assert (=> b!63422 (= e!41587 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63422 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!63423 () Bool)

(declare-fun lt!26619 () Unit!1689)

(declare-fun lt!26614 () Unit!1689)

(assert (=> b!63423 (= lt!26619 lt!26614)))

(declare-fun lt!26618 () (_ BitVec 64))

(declare-fun lt!26616 () ListLongMap!1389)

(declare-fun lt!26615 () (_ BitVec 64))

(declare-fun lt!26617 () V!2867)

(assert (=> b!63423 (not (contains!700 (+!83 lt!26616 (tuple2!2067 lt!26618 lt!26617)) lt!26615))))

(assert (=> b!63423 (= lt!26614 (addStillNotContains!19 lt!26616 lt!26618 lt!26617 lt!26615))))

(assert (=> b!63423 (= lt!26615 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63423 (= lt!26617 (get!1096 (select (arr!1799 (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63423 (= lt!26618 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63423 (= lt!26616 call!5011)))

(assert (=> b!63423 (= e!41588 (+!83 call!5011 (tuple2!2067 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (get!1096 (select (arr!1799 (ite (or c!8336 c!8343) (_values!2071 newMap!16) lt!26022)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63424 () Bool)

(declare-fun res!34659 () Bool)

(assert (=> b!63424 (=> (not res!34659) (not e!41592))))

(assert (=> b!63424 (= res!34659 (not (contains!700 lt!26613 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13105 c!8598) b!63419))

(assert (= (and d!13105 (not c!8598)) b!63415))

(assert (= (and b!63415 c!8597) b!63423))

(assert (= (and b!63415 (not c!8597)) b!63416))

(assert (= (or b!63423 b!63416) bm!5008))

(assert (= (and d!13105 res!34661) b!63424))

(assert (= (and b!63424 res!34659) b!63418))

(assert (= (and b!63418 res!34658) b!63422))

(assert (= (and b!63418 c!8596) b!63421))

(assert (= (and b!63418 (not c!8596)) b!63417))

(assert (= (and b!63421 res!34660) b!63414))

(assert (= (and b!63417 c!8595) b!63420))

(assert (= (and b!63417 (not c!8595)) b!63413))

(declare-fun b_lambda!2829 () Bool)

(assert (=> (not b_lambda!2829) (not b!63414)))

(assert (=> b!63414 t!4870))

(declare-fun b_and!3865 () Bool)

(assert (= b_and!3861 (and (=> t!4870 result!2463) b_and!3865)))

(assert (=> b!63414 t!4872))

(declare-fun b_and!3867 () Bool)

(assert (= b_and!3863 (and (=> t!4872 result!2465) b_and!3867)))

(declare-fun b_lambda!2831 () Bool)

(assert (=> (not b_lambda!2831) (not b!63423)))

(assert (=> b!63423 t!4870))

(declare-fun b_and!3869 () Bool)

(assert (= b_and!3865 (and (=> t!4870 result!2463) b_and!3869)))

(assert (=> b!63423 t!4872))

(declare-fun b_and!3871 () Bool)

(assert (= b_and!3867 (and (=> t!4872 result!2465) b_and!3871)))

(assert (=> b!63421 m!56007))

(assert (=> b!63421 m!56007))

(declare-fun m!57395 () Bool)

(assert (=> b!63421 m!57395))

(declare-fun m!57397 () Bool)

(assert (=> b!63424 m!57397))

(declare-fun m!57399 () Bool)

(assert (=> b!63413 m!57399))

(declare-fun m!57401 () Bool)

(assert (=> bm!5008 m!57401))

(assert (=> b!63422 m!56007))

(assert (=> b!63422 m!56007))

(assert (=> b!63422 m!56009))

(assert (=> b!63415 m!56007))

(assert (=> b!63415 m!56007))

(assert (=> b!63415 m!56009))

(assert (=> b!63414 m!56263))

(assert (=> b!63414 m!56263))

(assert (=> b!63414 m!56259))

(assert (=> b!63414 m!56265))

(assert (=> b!63414 m!56007))

(declare-fun m!57403 () Bool)

(assert (=> b!63414 m!57403))

(assert (=> b!63414 m!56259))

(assert (=> b!63414 m!56007))

(declare-fun m!57405 () Bool)

(assert (=> d!13105 m!57405))

(assert (=> d!13105 m!55941))

(assert (=> b!63420 m!57401))

(declare-fun m!57407 () Bool)

(assert (=> b!63423 m!57407))

(assert (=> b!63423 m!56263))

(declare-fun m!57409 () Bool)

(assert (=> b!63423 m!57409))

(declare-fun m!57411 () Bool)

(assert (=> b!63423 m!57411))

(assert (=> b!63423 m!56263))

(assert (=> b!63423 m!56259))

(assert (=> b!63423 m!56265))

(assert (=> b!63423 m!57409))

(declare-fun m!57413 () Bool)

(assert (=> b!63423 m!57413))

(assert (=> b!63423 m!56259))

(assert (=> b!63423 m!56007))

(assert (=> b!62770 d!13105))

(declare-fun d!13107 () Bool)

(assert (=> d!13107 (= (apply!68 (+!83 lt!26230 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26229) (apply!68 lt!26230 lt!26229))))

(declare-fun lt!26620 () Unit!1689)

(assert (=> d!13107 (= lt!26620 (choose!342 lt!26230 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26229))))

(declare-fun e!41594 () Bool)

(assert (=> d!13107 e!41594))

(declare-fun res!34662 () Bool)

(assert (=> d!13107 (=> (not res!34662) (not e!41594))))

(assert (=> d!13107 (= res!34662 (contains!700 lt!26230 lt!26229))))

(assert (=> d!13107 (= (addApplyDifferent!44 lt!26230 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26229) lt!26620)))

(declare-fun b!63425 () Bool)

(assert (=> b!63425 (= e!41594 (not (= lt!26229 lt!26236)))))

(assert (= (and d!13107 res!34662) b!63425))

(assert (=> d!13107 m!56249))

(assert (=> d!13107 m!56253))

(declare-fun m!57415 () Bool)

(assert (=> d!13107 m!57415))

(assert (=> d!13107 m!56241))

(declare-fun m!57417 () Bool)

(assert (=> d!13107 m!57417))

(assert (=> d!13107 m!56249))

(assert (=> b!62770 d!13107))

(declare-fun d!13109 () Bool)

(assert (=> d!13109 (= (apply!68 (+!83 lt!26230 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26229) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!26230 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) lt!26229)))))

(declare-fun bs!2757 () Bool)

(assert (= bs!2757 d!13109))

(declare-fun m!57419 () Bool)

(assert (=> bs!2757 m!57419))

(assert (=> bs!2757 m!57419))

(declare-fun m!57421 () Bool)

(assert (=> bs!2757 m!57421))

(assert (=> b!62770 d!13109))

(declare-fun d!13111 () Bool)

(assert (=> d!13111 (= (apply!68 (+!83 lt!26237 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26240) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!26237 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) lt!26240)))))

(declare-fun bs!2758 () Bool)

(assert (= bs!2758 d!13111))

(declare-fun m!57423 () Bool)

(assert (=> bs!2758 m!57423))

(assert (=> bs!2758 m!57423))

(declare-fun m!57425 () Bool)

(assert (=> bs!2758 m!57425))

(assert (=> b!62770 d!13111))

(declare-fun d!13113 () Bool)

(declare-fun e!41595 () Bool)

(assert (=> d!13113 e!41595))

(declare-fun res!34663 () Bool)

(assert (=> d!13113 (=> (not res!34663) (not e!41595))))

(declare-fun lt!26621 () ListLongMap!1389)

(assert (=> d!13113 (= res!34663 (contains!700 lt!26621 (_1!1043 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(declare-fun lt!26624 () List!1463)

(assert (=> d!13113 (= lt!26621 (ListLongMap!1390 lt!26624))))

(declare-fun lt!26623 () Unit!1689)

(declare-fun lt!26622 () Unit!1689)

(assert (=> d!13113 (= lt!26623 lt!26622)))

(assert (=> d!13113 (= (getValueByKey!125 lt!26624 (_1!1043 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!130 (_2!1043 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13113 (= lt!26622 (lemmaContainsTupThenGetReturnValue!44 lt!26624 (_1!1043 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1043 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13113 (= lt!26624 (insertStrictlySorted!46 (toList!710 lt!26233) (_1!1043 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1043 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13113 (= (+!83 lt!26233 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26621)))

(declare-fun b!63426 () Bool)

(declare-fun res!34664 () Bool)

(assert (=> b!63426 (=> (not res!34664) (not e!41595))))

(assert (=> b!63426 (= res!34664 (= (getValueByKey!125 (toList!710 lt!26621) (_1!1043 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!130 (_2!1043 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(declare-fun b!63427 () Bool)

(assert (=> b!63427 (= e!41595 (contains!703 (toList!710 lt!26621) (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))

(assert (= (and d!13113 res!34663) b!63426))

(assert (= (and b!63426 res!34664) b!63427))

(declare-fun m!57427 () Bool)

(assert (=> d!13113 m!57427))

(declare-fun m!57429 () Bool)

(assert (=> d!13113 m!57429))

(declare-fun m!57431 () Bool)

(assert (=> d!13113 m!57431))

(declare-fun m!57433 () Bool)

(assert (=> d!13113 m!57433))

(declare-fun m!57435 () Bool)

(assert (=> b!63426 m!57435))

(declare-fun m!57437 () Bool)

(assert (=> b!63427 m!57437))

(assert (=> b!62770 d!13113))

(declare-fun d!13115 () Bool)

(assert (=> d!13115 (= (apply!68 lt!26237 lt!26240) (get!1100 (getValueByKey!125 (toList!710 lt!26237) lt!26240)))))

(declare-fun bs!2759 () Bool)

(assert (= bs!2759 d!13115))

(declare-fun m!57439 () Bool)

(assert (=> bs!2759 m!57439))

(assert (=> bs!2759 m!57439))

(declare-fun m!57441 () Bool)

(assert (=> bs!2759 m!57441))

(assert (=> b!62770 d!13115))

(declare-fun d!13117 () Bool)

(assert (=> d!13117 (= (apply!68 (+!83 lt!26237 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26240) (apply!68 lt!26237 lt!26240))))

(declare-fun lt!26625 () Unit!1689)

(assert (=> d!13117 (= lt!26625 (choose!342 lt!26237 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26240))))

(declare-fun e!41596 () Bool)

(assert (=> d!13117 e!41596))

(declare-fun res!34665 () Bool)

(assert (=> d!13117 (=> (not res!34665) (not e!41596))))

(assert (=> d!13117 (= res!34665 (contains!700 lt!26237 lt!26240))))

(assert (=> d!13117 (= (addApplyDifferent!44 lt!26237 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26240) lt!26625)))

(declare-fun b!63428 () Bool)

(assert (=> b!63428 (= e!41596 (not (= lt!26240 lt!26247)))))

(assert (= (and d!13117 res!34665) b!63428))

(assert (=> d!13117 m!56225))

(assert (=> d!13117 m!56227))

(declare-fun m!57443 () Bool)

(assert (=> d!13117 m!57443))

(assert (=> d!13117 m!56235))

(declare-fun m!57445 () Bool)

(assert (=> d!13117 m!57445))

(assert (=> d!13117 m!56225))

(assert (=> b!62770 d!13117))

(declare-fun d!13119 () Bool)

(assert (=> d!13119 (= (apply!68 (+!83 lt!26233 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26242) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!26233 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) lt!26242)))))

(declare-fun bs!2760 () Bool)

(assert (= bs!2760 d!13119))

(declare-fun m!57447 () Bool)

(assert (=> bs!2760 m!57447))

(assert (=> bs!2760 m!57447))

(declare-fun m!57449 () Bool)

(assert (=> bs!2760 m!57449))

(assert (=> b!62770 d!13119))

(declare-fun d!13121 () Bool)

(declare-fun e!41597 () Bool)

(assert (=> d!13121 e!41597))

(declare-fun res!34666 () Bool)

(assert (=> d!13121 (=> (not res!34666) (not e!41597))))

(declare-fun lt!26626 () ListLongMap!1389)

(assert (=> d!13121 (= res!34666 (contains!700 lt!26626 (_1!1043 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(declare-fun lt!26629 () List!1463)

(assert (=> d!13121 (= lt!26626 (ListLongMap!1390 lt!26629))))

(declare-fun lt!26628 () Unit!1689)

(declare-fun lt!26627 () Unit!1689)

(assert (=> d!13121 (= lt!26628 lt!26627)))

(assert (=> d!13121 (= (getValueByKey!125 lt!26629 (_1!1043 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!130 (_2!1043 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13121 (= lt!26627 (lemmaContainsTupThenGetReturnValue!44 lt!26629 (_1!1043 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1043 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13121 (= lt!26629 (insertStrictlySorted!46 (toList!710 lt!26230) (_1!1043 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1043 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13121 (= (+!83 lt!26230 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26626)))

(declare-fun b!63429 () Bool)

(declare-fun res!34667 () Bool)

(assert (=> b!63429 (=> (not res!34667) (not e!41597))))

(assert (=> b!63429 (= res!34667 (= (getValueByKey!125 (toList!710 lt!26626) (_1!1043 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!130 (_2!1043 (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(declare-fun b!63430 () Bool)

(assert (=> b!63430 (= e!41597 (contains!703 (toList!710 lt!26626) (tuple2!2067 lt!26236 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))

(assert (= (and d!13121 res!34666) b!63429))

(assert (= (and b!63429 res!34667) b!63430))

(declare-fun m!57451 () Bool)

(assert (=> d!13121 m!57451))

(declare-fun m!57453 () Bool)

(assert (=> d!13121 m!57453))

(declare-fun m!57455 () Bool)

(assert (=> d!13121 m!57455))

(declare-fun m!57457 () Bool)

(assert (=> d!13121 m!57457))

(declare-fun m!57459 () Bool)

(assert (=> b!63429 m!57459))

(declare-fun m!57461 () Bool)

(assert (=> b!63430 m!57461))

(assert (=> b!62770 d!13121))

(declare-fun d!13123 () Bool)

(assert (=> d!13123 (= (apply!68 lt!26230 lt!26229) (get!1100 (getValueByKey!125 (toList!710 lt!26230) lt!26229)))))

(declare-fun bs!2761 () Bool)

(assert (= bs!2761 d!13123))

(declare-fun m!57463 () Bool)

(assert (=> bs!2761 m!57463))

(assert (=> bs!2761 m!57463))

(declare-fun m!57465 () Bool)

(assert (=> bs!2761 m!57465))

(assert (=> b!62770 d!13123))

(declare-fun d!13125 () Bool)

(assert (=> d!13125 (= (apply!68 (+!83 lt!26233 (tuple2!2067 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26242) (apply!68 lt!26233 lt!26242))))

(declare-fun lt!26630 () Unit!1689)

(assert (=> d!13125 (= lt!26630 (choose!342 lt!26233 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26242))))

(declare-fun e!41598 () Bool)

(assert (=> d!13125 e!41598))

(declare-fun res!34668 () Bool)

(assert (=> d!13125 (=> (not res!34668) (not e!41598))))

(assert (=> d!13125 (= res!34668 (contains!700 lt!26233 lt!26242))))

(assert (=> d!13125 (= (addApplyDifferent!44 lt!26233 lt!26239 (ite c!8336 (ite c!8345 (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26242) lt!26630)))

(declare-fun b!63431 () Bool)

(assert (=> b!63431 (= e!41598 (not (= lt!26242 lt!26239)))))

(assert (= (and d!13125 res!34668) b!63431))

(assert (=> d!13125 m!56231))

(assert (=> d!13125 m!56233))

(declare-fun m!57467 () Bool)

(assert (=> d!13125 m!57467))

(assert (=> d!13125 m!56243))

(declare-fun m!57469 () Bool)

(assert (=> d!13125 m!57469))

(assert (=> d!13125 m!56231))

(assert (=> b!62770 d!13125))

(declare-fun d!13127 () Bool)

(declare-fun e!41600 () Bool)

(assert (=> d!13127 e!41600))

(declare-fun res!34669 () Bool)

(assert (=> d!13127 (=> res!34669 e!41600)))

(declare-fun lt!26631 () Bool)

(assert (=> d!13127 (= res!34669 (not lt!26631))))

(declare-fun lt!26634 () Bool)

(assert (=> d!13127 (= lt!26631 lt!26634)))

(declare-fun lt!26632 () Unit!1689)

(declare-fun e!41599 () Unit!1689)

(assert (=> d!13127 (= lt!26632 e!41599)))

(declare-fun c!8599 () Bool)

(assert (=> d!13127 (= c!8599 lt!26634)))

(assert (=> d!13127 (= lt!26634 (containsKey!129 (toList!710 (+!83 lt!26235 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) lt!26245))))

(assert (=> d!13127 (= (contains!700 (+!83 lt!26235 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26245) lt!26631)))

(declare-fun b!63432 () Bool)

(declare-fun lt!26633 () Unit!1689)

(assert (=> b!63432 (= e!41599 lt!26633)))

(assert (=> b!63432 (= lt!26633 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 (+!83 lt!26235 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) lt!26245))))

(assert (=> b!63432 (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!26235 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) lt!26245))))

(declare-fun b!63433 () Bool)

(declare-fun Unit!1738 () Unit!1689)

(assert (=> b!63433 (= e!41599 Unit!1738)))

(declare-fun b!63434 () Bool)

(assert (=> b!63434 (= e!41600 (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!26235 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) lt!26245)))))

(assert (= (and d!13127 c!8599) b!63432))

(assert (= (and d!13127 (not c!8599)) b!63433))

(assert (= (and d!13127 (not res!34669)) b!63434))

(declare-fun m!57471 () Bool)

(assert (=> d!13127 m!57471))

(declare-fun m!57473 () Bool)

(assert (=> b!63432 m!57473))

(declare-fun m!57475 () Bool)

(assert (=> b!63432 m!57475))

(assert (=> b!63432 m!57475))

(declare-fun m!57477 () Bool)

(assert (=> b!63432 m!57477))

(assert (=> b!63434 m!57475))

(assert (=> b!63434 m!57475))

(assert (=> b!63434 m!57477))

(assert (=> b!62770 d!13127))

(declare-fun d!13129 () Bool)

(assert (=> d!13129 (contains!700 (+!83 lt!26235 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26245)))

(declare-fun lt!26635 () Unit!1689)

(assert (=> d!13129 (= lt!26635 (choose!341 lt!26235 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26245))))

(assert (=> d!13129 (contains!700 lt!26235 lt!26245)))

(assert (=> d!13129 (= (addStillContains!44 lt!26235 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26245) lt!26635)))

(declare-fun bs!2762 () Bool)

(assert (= bs!2762 d!13129))

(assert (=> bs!2762 m!56237))

(assert (=> bs!2762 m!56237))

(assert (=> bs!2762 m!56251))

(declare-fun m!57479 () Bool)

(assert (=> bs!2762 m!57479))

(declare-fun m!57481 () Bool)

(assert (=> bs!2762 m!57481))

(assert (=> b!62770 d!13129))

(declare-fun d!13131 () Bool)

(declare-fun e!41601 () Bool)

(assert (=> d!13131 e!41601))

(declare-fun res!34670 () Bool)

(assert (=> d!13131 (=> (not res!34670) (not e!41601))))

(declare-fun lt!26636 () ListLongMap!1389)

(assert (=> d!13131 (= res!34670 (contains!700 lt!26636 (_1!1043 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(declare-fun lt!26639 () List!1463)

(assert (=> d!13131 (= lt!26636 (ListLongMap!1390 lt!26639))))

(declare-fun lt!26638 () Unit!1689)

(declare-fun lt!26637 () Unit!1689)

(assert (=> d!13131 (= lt!26638 lt!26637)))

(assert (=> d!13131 (= (getValueByKey!125 lt!26639 (_1!1043 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) (Some!130 (_2!1043 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!13131 (= lt!26637 (lemmaContainsTupThenGetReturnValue!44 lt!26639 (_1!1043 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) (_2!1043 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!13131 (= lt!26639 (insertStrictlySorted!46 (toList!710 lt!26235) (_1!1043 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) (_2!1043 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!13131 (= (+!83 lt!26235 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26636)))

(declare-fun b!63435 () Bool)

(declare-fun res!34671 () Bool)

(assert (=> b!63435 (=> (not res!34671) (not e!41601))))

(assert (=> b!63435 (= res!34671 (= (getValueByKey!125 (toList!710 lt!26636) (_1!1043 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) (Some!130 (_2!1043 (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))))))))

(declare-fun b!63436 () Bool)

(assert (=> b!63436 (= e!41601 (contains!703 (toList!710 lt!26636) (tuple2!2067 lt!26248 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))))))

(assert (= (and d!13131 res!34670) b!63435))

(assert (= (and b!63435 res!34671) b!63436))

(declare-fun m!57483 () Bool)

(assert (=> d!13131 m!57483))

(declare-fun m!57485 () Bool)

(assert (=> d!13131 m!57485))

(declare-fun m!57487 () Bool)

(assert (=> d!13131 m!57487))

(declare-fun m!57489 () Bool)

(assert (=> d!13131 m!57489))

(declare-fun m!57491 () Bool)

(assert (=> b!63435 m!57491))

(declare-fun m!57493 () Bool)

(assert (=> b!63436 m!57493))

(assert (=> b!62770 d!13131))

(declare-fun d!13133 () Bool)

(assert (=> d!13133 (= (apply!68 lt!26233 lt!26242) (get!1100 (getValueByKey!125 (toList!710 lt!26233) lt!26242)))))

(declare-fun bs!2763 () Bool)

(assert (= bs!2763 d!13133))

(declare-fun m!57495 () Bool)

(assert (=> bs!2763 m!57495))

(assert (=> bs!2763 m!57495))

(declare-fun m!57497 () Bool)

(assert (=> bs!2763 m!57497))

(assert (=> b!62770 d!13133))

(declare-fun d!13135 () Bool)

(declare-fun e!41602 () Bool)

(assert (=> d!13135 e!41602))

(declare-fun res!34672 () Bool)

(assert (=> d!13135 (=> (not res!34672) (not e!41602))))

(declare-fun lt!26640 () ListLongMap!1389)

(assert (=> d!13135 (= res!34672 (contains!700 lt!26640 (_1!1043 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(declare-fun lt!26643 () List!1463)

(assert (=> d!13135 (= lt!26640 (ListLongMap!1390 lt!26643))))

(declare-fun lt!26642 () Unit!1689)

(declare-fun lt!26641 () Unit!1689)

(assert (=> d!13135 (= lt!26642 lt!26641)))

(assert (=> d!13135 (= (getValueByKey!125 lt!26643 (_1!1043 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) (Some!130 (_2!1043 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!13135 (= lt!26641 (lemmaContainsTupThenGetReturnValue!44 lt!26643 (_1!1043 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) (_2!1043 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!13135 (= lt!26643 (insertStrictlySorted!46 (toList!710 lt!26237) (_1!1043 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) (_2!1043 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!13135 (= (+!83 lt!26237 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26640)))

(declare-fun b!63437 () Bool)

(declare-fun res!34673 () Bool)

(assert (=> b!63437 (=> (not res!34673) (not e!41602))))

(assert (=> b!63437 (= res!34673 (= (getValueByKey!125 (toList!710 lt!26640) (_1!1043 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) (Some!130 (_2!1043 (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))))))))

(declare-fun b!63438 () Bool)

(assert (=> b!63438 (= e!41602 (contains!703 (toList!710 lt!26640) (tuple2!2067 lt!26247 (ite (and c!8336 c!8345) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))))))

(assert (= (and d!13135 res!34672) b!63437))

(assert (= (and b!63437 res!34673) b!63438))

(declare-fun m!57499 () Bool)

(assert (=> d!13135 m!57499))

(declare-fun m!57501 () Bool)

(assert (=> d!13135 m!57501))

(declare-fun m!57503 () Bool)

(assert (=> d!13135 m!57503))

(declare-fun m!57505 () Bool)

(assert (=> d!13135 m!57505))

(declare-fun m!57507 () Bool)

(assert (=> b!63437 m!57507))

(declare-fun m!57509 () Bool)

(assert (=> b!63438 m!57509))

(assert (=> b!62770 d!13135))

(assert (=> bm!4912 d!12909))

(declare-fun d!13137 () Bool)

(declare-fun e!41603 () Bool)

(assert (=> d!13137 e!41603))

(declare-fun res!34674 () Bool)

(assert (=> d!13137 (=> (not res!34674) (not e!41603))))

(declare-fun lt!26644 () ListLongMap!1389)

(assert (=> d!13137 (= res!34674 (contains!700 lt!26644 (_1!1043 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26647 () List!1463)

(assert (=> d!13137 (= lt!26644 (ListLongMap!1390 lt!26647))))

(declare-fun lt!26646 () Unit!1689)

(declare-fun lt!26645 () Unit!1689)

(assert (=> d!13137 (= lt!26646 lt!26645)))

(assert (=> d!13137 (= (getValueByKey!125 lt!26647 (_1!1043 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13137 (= lt!26645 (lemmaContainsTupThenGetReturnValue!44 lt!26647 (_1!1043 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13137 (= lt!26647 (insertStrictlySorted!46 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (_1!1043 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13137 (= (+!83 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26644)))

(declare-fun b!63439 () Bool)

(declare-fun res!34675 () Bool)

(assert (=> b!63439 (=> (not res!34675) (not e!41603))))

(assert (=> b!63439 (= res!34675 (= (getValueByKey!125 (toList!710 lt!26644) (_1!1043 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63440 () Bool)

(assert (=> b!63440 (= e!41603 (contains!703 (toList!710 lt!26644) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13137 res!34674) b!63439))

(assert (= (and b!63439 res!34675) b!63440))

(declare-fun m!57511 () Bool)

(assert (=> d!13137 m!57511))

(declare-fun m!57513 () Bool)

(assert (=> d!13137 m!57513))

(declare-fun m!57515 () Bool)

(assert (=> d!13137 m!57515))

(declare-fun m!57517 () Bool)

(assert (=> d!13137 m!57517))

(declare-fun m!57519 () Bool)

(assert (=> b!63439 m!57519))

(declare-fun m!57521 () Bool)

(assert (=> b!63440 m!57521))

(assert (=> d!12749 d!13137))

(declare-fun d!13139 () Bool)

(assert (=> d!13139 (= (+!83 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26015 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(assert (=> d!13139 true))

(declare-fun _$7!50 () Unit!1689)

(assert (=> d!13139 (= (choose!345 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26015 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) (defaultEntry!2088 newMap!16)) _$7!50)))

(declare-fun bs!2764 () Bool)

(assert (= bs!2764 d!13139))

(assert (=> bs!2764 m!55787))

(assert (=> bs!2764 m!55787))

(assert (=> bs!2764 m!56473))

(assert (=> bs!2764 m!55731))

(assert (=> bs!2764 m!56469))

(assert (=> d!12749 d!13139))

(declare-fun b!63441 () Bool)

(declare-fun c!8600 () Bool)

(assert (=> b!63441 (= c!8600 (and (not (= (bvand lt!26015 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!26015 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41613 () ListLongMap!1389)

(declare-fun e!41606 () ListLongMap!1389)

(assert (=> b!63441 (= e!41613 e!41606)))

(declare-fun bm!5010 () Bool)

(declare-fun call!5016 () ListLongMap!1389)

(declare-fun call!5013 () ListLongMap!1389)

(assert (=> bm!5010 (= call!5016 call!5013)))

(declare-fun b!63442 () Bool)

(declare-fun e!41614 () Bool)

(declare-fun e!41616 () Bool)

(assert (=> b!63442 (= e!41614 e!41616)))

(declare-fun c!8603 () Bool)

(assert (=> b!63442 (= c!8603 (not (= (bvand lt!26015 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63443 () Bool)

(declare-fun e!41605 () Bool)

(declare-fun e!41609 () Bool)

(assert (=> b!63443 (= e!41605 e!41609)))

(declare-fun res!34678 () Bool)

(assert (=> b!63443 (=> (not res!34678) (not e!41609))))

(declare-fun lt!26664 () ListLongMap!1389)

(assert (=> b!63443 (= res!34678 (contains!700 lt!26664 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63443 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63444 () Bool)

(assert (=> b!63444 (= e!41609 (= (apply!68 lt!26664 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63444 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_values!2071 newMap!16))))))

(assert (=> b!63444 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63445 () Bool)

(declare-fun e!41608 () Bool)

(declare-fun e!41604 () Bool)

(assert (=> b!63445 (= e!41608 e!41604)))

(declare-fun res!34679 () Bool)

(declare-fun call!5012 () Bool)

(assert (=> b!63445 (= res!34679 call!5012)))

(assert (=> b!63445 (=> (not res!34679) (not e!41604))))

(declare-fun bm!5011 () Bool)

(declare-fun call!5015 () ListLongMap!1389)

(assert (=> bm!5011 (= call!5013 call!5015)))

(declare-fun b!63446 () Bool)

(declare-fun e!41607 () Bool)

(assert (=> b!63446 (= e!41607 (= (apply!68 lt!26664 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!63447 () Bool)

(declare-fun res!34684 () Bool)

(assert (=> b!63447 (=> (not res!34684) (not e!41614))))

(assert (=> b!63447 (= res!34684 e!41605)))

(declare-fun res!34683 () Bool)

(assert (=> b!63447 (=> res!34683 e!41605)))

(declare-fun e!41610 () Bool)

(assert (=> b!63447 (= res!34683 (not e!41610))))

(declare-fun res!34677 () Bool)

(assert (=> b!63447 (=> (not res!34677) (not e!41610))))

(assert (=> b!63447 (= res!34677 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63448 () Bool)

(declare-fun e!41615 () Unit!1689)

(declare-fun Unit!1739 () Unit!1689)

(assert (=> b!63448 (= e!41615 Unit!1739)))

(declare-fun b!63449 () Bool)

(declare-fun call!5018 () Bool)

(assert (=> b!63449 (= e!41616 (not call!5018))))

(declare-fun b!63450 () Bool)

(declare-fun e!41612 () ListLongMap!1389)

(declare-fun call!5017 () ListLongMap!1389)

(assert (=> b!63450 (= e!41612 (+!83 call!5017 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!63451 () Bool)

(declare-fun res!34676 () Bool)

(assert (=> b!63451 (=> (not res!34676) (not e!41614))))

(assert (=> b!63451 (= res!34676 e!41608)))

(declare-fun c!8604 () Bool)

(assert (=> b!63451 (= c!8604 (not (= (bvand lt!26015 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63452 () Bool)

(assert (=> b!63452 (= e!41604 (= (apply!68 lt!26664 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63453 () Bool)

(declare-fun lt!26665 () Unit!1689)

(assert (=> b!63453 (= e!41615 lt!26665)))

(declare-fun lt!26656 () ListLongMap!1389)

(assert (=> b!63453 (= lt!26656 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26015 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26669 () (_ BitVec 64))

(assert (=> b!63453 (= lt!26669 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26666 () (_ BitVec 64))

(assert (=> b!63453 (= lt!26666 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26653 () Unit!1689)

(assert (=> b!63453 (= lt!26653 (addStillContains!44 lt!26656 lt!26669 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26666))))

(assert (=> b!63453 (contains!700 (+!83 lt!26656 (tuple2!2067 lt!26669 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26666)))

(declare-fun lt!26667 () Unit!1689)

(assert (=> b!63453 (= lt!26667 lt!26653)))

(declare-fun lt!26651 () ListLongMap!1389)

(assert (=> b!63453 (= lt!26651 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26015 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26657 () (_ BitVec 64))

(assert (=> b!63453 (= lt!26657 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26650 () (_ BitVec 64))

(assert (=> b!63453 (= lt!26650 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26649 () Unit!1689)

(assert (=> b!63453 (= lt!26649 (addApplyDifferent!44 lt!26651 lt!26657 (minValue!2000 newMap!16) lt!26650))))

(assert (=> b!63453 (= (apply!68 (+!83 lt!26651 (tuple2!2067 lt!26657 (minValue!2000 newMap!16))) lt!26650) (apply!68 lt!26651 lt!26650))))

(declare-fun lt!26652 () Unit!1689)

(assert (=> b!63453 (= lt!26652 lt!26649)))

(declare-fun lt!26658 () ListLongMap!1389)

(assert (=> b!63453 (= lt!26658 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26015 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26668 () (_ BitVec 64))

(assert (=> b!63453 (= lt!26668 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26661 () (_ BitVec 64))

(assert (=> b!63453 (= lt!26661 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26659 () Unit!1689)

(assert (=> b!63453 (= lt!26659 (addApplyDifferent!44 lt!26658 lt!26668 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26661))))

(assert (=> b!63453 (= (apply!68 (+!83 lt!26658 (tuple2!2067 lt!26668 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26661) (apply!68 lt!26658 lt!26661))))

(declare-fun lt!26662 () Unit!1689)

(assert (=> b!63453 (= lt!26662 lt!26659)))

(declare-fun lt!26654 () ListLongMap!1389)

(assert (=> b!63453 (= lt!26654 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26015 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26660 () (_ BitVec 64))

(assert (=> b!63453 (= lt!26660 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26663 () (_ BitVec 64))

(assert (=> b!63453 (= lt!26663 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63453 (= lt!26665 (addApplyDifferent!44 lt!26654 lt!26660 (minValue!2000 newMap!16) lt!26663))))

(assert (=> b!63453 (= (apply!68 (+!83 lt!26654 (tuple2!2067 lt!26660 (minValue!2000 newMap!16))) lt!26663) (apply!68 lt!26654 lt!26663))))

(declare-fun b!63454 () Bool)

(assert (=> b!63454 (= e!41610 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!5012 () Bool)

(declare-fun call!5014 () ListLongMap!1389)

(assert (=> bm!5012 (= call!5014 call!5017)))

(declare-fun b!63455 () Bool)

(assert (=> b!63455 (= e!41616 e!41607)))

(declare-fun res!34680 () Bool)

(assert (=> b!63455 (= res!34680 call!5018)))

(assert (=> b!63455 (=> (not res!34680) (not e!41607))))

(declare-fun bm!5013 () Bool)

(assert (=> bm!5013 (= call!5015 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26015 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun c!8602 () Bool)

(declare-fun c!8605 () Bool)

(declare-fun bm!5014 () Bool)

(assert (=> bm!5014 (= call!5017 (+!83 (ite c!8602 call!5015 (ite c!8605 call!5013 call!5016)) (ite (or c!8602 c!8605) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun b!63456 () Bool)

(assert (=> b!63456 (= e!41612 e!41613)))

(assert (=> b!63456 (= c!8605 (and (not (= (bvand lt!26015 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!26015 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!13141 () Bool)

(assert (=> d!13141 e!41614))

(declare-fun res!34681 () Bool)

(assert (=> d!13141 (=> (not res!34681) (not e!41614))))

(assert (=> d!13141 (= res!34681 (or (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))))

(declare-fun lt!26648 () ListLongMap!1389)

(assert (=> d!13141 (= lt!26664 lt!26648)))

(declare-fun lt!26655 () Unit!1689)

(assert (=> d!13141 (= lt!26655 e!41615)))

(declare-fun c!8601 () Bool)

(declare-fun e!41611 () Bool)

(assert (=> d!13141 (= c!8601 e!41611)))

(declare-fun res!34682 () Bool)

(assert (=> d!13141 (=> (not res!34682) (not e!41611))))

(assert (=> d!13141 (= res!34682 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!13141 (= lt!26648 e!41612)))

(assert (=> d!13141 (= c!8602 (and (not (= (bvand lt!26015 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!26015 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13141 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13141 (= (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26015 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26664)))

(declare-fun bm!5009 () Bool)

(assert (=> bm!5009 (= call!5018 (contains!700 lt!26664 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63457 () Bool)

(assert (=> b!63457 (= e!41613 call!5014)))

(declare-fun b!63458 () Bool)

(assert (=> b!63458 (= e!41606 call!5014)))

(declare-fun bm!5015 () Bool)

(assert (=> bm!5015 (= call!5012 (contains!700 lt!26664 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63459 () Bool)

(assert (=> b!63459 (= e!41606 call!5016)))

(declare-fun b!63460 () Bool)

(assert (=> b!63460 (= e!41608 (not call!5012))))

(declare-fun b!63461 () Bool)

(assert (=> b!63461 (= e!41611 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!13141 c!8602) b!63450))

(assert (= (and d!13141 (not c!8602)) b!63456))

(assert (= (and b!63456 c!8605) b!63457))

(assert (= (and b!63456 (not c!8605)) b!63441))

(assert (= (and b!63441 c!8600) b!63458))

(assert (= (and b!63441 (not c!8600)) b!63459))

(assert (= (or b!63458 b!63459) bm!5010))

(assert (= (or b!63457 bm!5010) bm!5011))

(assert (= (or b!63457 b!63458) bm!5012))

(assert (= (or b!63450 bm!5011) bm!5013))

(assert (= (or b!63450 bm!5012) bm!5014))

(assert (= (and d!13141 res!34682) b!63461))

(assert (= (and d!13141 c!8601) b!63453))

(assert (= (and d!13141 (not c!8601)) b!63448))

(assert (= (and d!13141 res!34681) b!63447))

(assert (= (and b!63447 res!34677) b!63454))

(assert (= (and b!63447 (not res!34683)) b!63443))

(assert (= (and b!63443 res!34678) b!63444))

(assert (= (and b!63447 res!34684) b!63451))

(assert (= (and b!63451 c!8604) b!63445))

(assert (= (and b!63451 (not c!8604)) b!63460))

(assert (= (and b!63445 res!34679) b!63452))

(assert (= (or b!63445 b!63460) bm!5015))

(assert (= (and b!63451 res!34676) b!63442))

(assert (= (and b!63442 c!8603) b!63455))

(assert (= (and b!63442 (not c!8603)) b!63449))

(assert (= (and b!63455 res!34680) b!63446))

(assert (= (or b!63455 b!63449) bm!5009))

(declare-fun b_lambda!2833 () Bool)

(assert (=> (not b_lambda!2833) (not b!63444)))

(assert (=> b!63444 t!4870))

(declare-fun b_and!3873 () Bool)

(assert (= b_and!3869 (and (=> t!4870 result!2463) b_and!3873)))

(assert (=> b!63444 t!4872))

(declare-fun b_and!3875 () Bool)

(assert (= b_and!3871 (and (=> t!4872 result!2465) b_and!3875)))

(declare-fun m!57523 () Bool)

(assert (=> b!63450 m!57523))

(declare-fun m!57525 () Bool)

(assert (=> b!63452 m!57525))

(declare-fun m!57527 () Bool)

(assert (=> bm!5014 m!57527))

(assert (=> b!63461 m!56007))

(assert (=> b!63461 m!56007))

(assert (=> b!63461 m!56009))

(assert (=> bm!5013 m!55731))

(declare-fun m!57529 () Bool)

(assert (=> bm!5013 m!57529))

(assert (=> b!63454 m!56007))

(assert (=> b!63454 m!56007))

(assert (=> b!63454 m!56009))

(assert (=> b!63443 m!56007))

(assert (=> b!63443 m!56007))

(declare-fun m!57531 () Bool)

(assert (=> b!63443 m!57531))

(declare-fun m!57533 () Bool)

(assert (=> bm!5009 m!57533))

(assert (=> b!63453 m!56007))

(declare-fun m!57535 () Bool)

(assert (=> b!63453 m!57535))

(declare-fun m!57537 () Bool)

(assert (=> b!63453 m!57537))

(assert (=> b!63453 m!55731))

(declare-fun m!57539 () Bool)

(assert (=> b!63453 m!57539))

(declare-fun m!57541 () Bool)

(assert (=> b!63453 m!57541))

(declare-fun m!57543 () Bool)

(assert (=> b!63453 m!57543))

(declare-fun m!57545 () Bool)

(assert (=> b!63453 m!57545))

(declare-fun m!57547 () Bool)

(assert (=> b!63453 m!57547))

(declare-fun m!57549 () Bool)

(assert (=> b!63453 m!57549))

(declare-fun m!57551 () Bool)

(assert (=> b!63453 m!57551))

(declare-fun m!57553 () Bool)

(assert (=> b!63453 m!57553))

(assert (=> b!63453 m!55731))

(declare-fun m!57555 () Bool)

(assert (=> b!63453 m!57555))

(assert (=> b!63453 m!57541))

(declare-fun m!57557 () Bool)

(assert (=> b!63453 m!57557))

(declare-fun m!57559 () Bool)

(assert (=> b!63453 m!57559))

(assert (=> b!63453 m!57547))

(declare-fun m!57561 () Bool)

(assert (=> b!63453 m!57561))

(assert (=> b!63453 m!57535))

(assert (=> b!63453 m!57559))

(declare-fun m!57563 () Bool)

(assert (=> b!63453 m!57563))

(assert (=> b!63453 m!55731))

(assert (=> b!63453 m!57529))

(assert (=> d!13141 m!55941))

(declare-fun m!57565 () Bool)

(assert (=> bm!5015 m!57565))

(declare-fun m!57567 () Bool)

(assert (=> b!63446 m!57567))

(assert (=> b!63444 m!56259))

(assert (=> b!63444 m!56007))

(assert (=> b!63444 m!56007))

(declare-fun m!57569 () Bool)

(assert (=> b!63444 m!57569))

(assert (=> b!63444 m!56361))

(assert (=> b!63444 m!56259))

(assert (=> b!63444 m!56363))

(assert (=> b!63444 m!56361))

(assert (=> d!12749 d!13141))

(assert (=> d!12749 d!12727))

(assert (=> d!12749 d!12795))

(declare-fun d!13143 () Bool)

(declare-fun lt!26670 () Bool)

(assert (=> d!13143 (= lt!26670 (select (content!67 (toList!710 lt!26109)) (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun e!41618 () Bool)

(assert (=> d!13143 (= lt!26670 e!41618)))

(declare-fun res!34686 () Bool)

(assert (=> d!13143 (=> (not res!34686) (not e!41618))))

(assert (=> d!13143 (= res!34686 ((_ is Cons!1459) (toList!710 lt!26109)))))

(assert (=> d!13143 (= (contains!703 (toList!710 lt!26109) (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!26670)))

(declare-fun b!63462 () Bool)

(declare-fun e!41617 () Bool)

(assert (=> b!63462 (= e!41618 e!41617)))

(declare-fun res!34685 () Bool)

(assert (=> b!63462 (=> res!34685 e!41617)))

(assert (=> b!63462 (= res!34685 (= (h!2042 (toList!710 lt!26109)) (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!63463 () Bool)

(assert (=> b!63463 (= e!41617 (contains!703 (t!4861 (toList!710 lt!26109)) (tuple2!2067 lt!25922 (minValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(assert (= (and d!13143 res!34686) b!63462))

(assert (= (and b!63462 (not res!34685)) b!63463))

(declare-fun m!57571 () Bool)

(assert (=> d!13143 m!57571))

(declare-fun m!57573 () Bool)

(assert (=> d!13143 m!57573))

(declare-fun m!57575 () Bool)

(assert (=> b!63463 m!57575))

(assert (=> b!62690 d!13143))

(declare-fun d!13145 () Bool)

(assert (=> d!13145 (= (get!1100 (getValueByKey!125 (toList!710 lt!25923) lt!25926)) (v!2423 (getValueByKey!125 (toList!710 lt!25923) lt!25926)))))

(assert (=> d!12705 d!13145))

(declare-fun d!13147 () Bool)

(declare-fun c!8606 () Bool)

(assert (=> d!13147 (= c!8606 (and ((_ is Cons!1459) (toList!710 lt!25923)) (= (_1!1043 (h!2042 (toList!710 lt!25923))) lt!25926)))))

(declare-fun e!41619 () Option!131)

(assert (=> d!13147 (= (getValueByKey!125 (toList!710 lt!25923) lt!25926) e!41619)))

(declare-fun b!63466 () Bool)

(declare-fun e!41620 () Option!131)

(assert (=> b!63466 (= e!41620 (getValueByKey!125 (t!4861 (toList!710 lt!25923)) lt!25926))))

(declare-fun b!63467 () Bool)

(assert (=> b!63467 (= e!41620 None!129)))

(declare-fun b!63465 () Bool)

(assert (=> b!63465 (= e!41619 e!41620)))

(declare-fun c!8607 () Bool)

(assert (=> b!63465 (= c!8607 (and ((_ is Cons!1459) (toList!710 lt!25923)) (not (= (_1!1043 (h!2042 (toList!710 lt!25923))) lt!25926))))))

(declare-fun b!63464 () Bool)

(assert (=> b!63464 (= e!41619 (Some!130 (_2!1043 (h!2042 (toList!710 lt!25923)))))))

(assert (= (and d!13147 c!8606) b!63464))

(assert (= (and d!13147 (not c!8606)) b!63465))

(assert (= (and b!63465 c!8607) b!63466))

(assert (= (and b!63465 (not c!8607)) b!63467))

(declare-fun m!57577 () Bool)

(assert (=> b!63466 m!57577))

(assert (=> d!12705 d!13147))

(declare-fun lt!26671 () Bool)

(declare-fun d!13149 () Bool)

(assert (=> d!13149 (= lt!26671 (select (content!67 (toList!710 lt!26101)) (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41622 () Bool)

(assert (=> d!13149 (= lt!26671 e!41622)))

(declare-fun res!34688 () Bool)

(assert (=> d!13149 (=> (not res!34688) (not e!41622))))

(assert (=> d!13149 (= res!34688 ((_ is Cons!1459) (toList!710 lt!26101)))))

(assert (=> d!13149 (= (contains!703 (toList!710 lt!26101) (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26671)))

(declare-fun b!63468 () Bool)

(declare-fun e!41621 () Bool)

(assert (=> b!63468 (= e!41622 e!41621)))

(declare-fun res!34687 () Bool)

(assert (=> b!63468 (=> res!34687 e!41621)))

(assert (=> b!63468 (= res!34687 (= (h!2042 (toList!710 lt!26101)) (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63469 () Bool)

(assert (=> b!63469 (= e!41621 (contains!703 (t!4861 (toList!710 lt!26101)) (ite c!8336 (ite c!8345 (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!13149 res!34688) b!63468))

(assert (= (and b!63468 (not res!34687)) b!63469))

(declare-fun m!57579 () Bool)

(assert (=> d!13149 m!57579))

(declare-fun m!57581 () Bool)

(assert (=> d!13149 m!57581))

(declare-fun m!57583 () Bool)

(assert (=> b!63469 m!57583))

(assert (=> b!62686 d!13149))

(declare-fun d!13151 () Bool)

(declare-fun res!34689 () Bool)

(declare-fun e!41623 () Bool)

(assert (=> d!13151 (=> res!34689 e!41623)))

(assert (=> d!13151 (= res!34689 (and ((_ is Cons!1459) (toList!710 lt!25929)) (= (_1!1043 (h!2042 (toList!710 lt!25929))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!13151 (= (containsKey!129 (toList!710 lt!25929) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!41623)))

(declare-fun b!63470 () Bool)

(declare-fun e!41624 () Bool)

(assert (=> b!63470 (= e!41623 e!41624)))

(declare-fun res!34690 () Bool)

(assert (=> b!63470 (=> (not res!34690) (not e!41624))))

(assert (=> b!63470 (= res!34690 (and (or (not ((_ is Cons!1459) (toList!710 lt!25929))) (bvsle (_1!1043 (h!2042 (toList!710 lt!25929))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1459) (toList!710 lt!25929)) (bvslt (_1!1043 (h!2042 (toList!710 lt!25929))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!63471 () Bool)

(assert (=> b!63471 (= e!41624 (containsKey!129 (t!4861 (toList!710 lt!25929)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!13151 (not res!34689)) b!63470))

(assert (= (and b!63470 res!34690) b!63471))

(assert (=> b!63471 m!55795))

(declare-fun m!57585 () Bool)

(assert (=> b!63471 m!57585))

(assert (=> d!12657 d!13151))

(assert (=> d!12659 d!12643))

(declare-fun b!63488 () Bool)

(declare-fun e!41636 () Bool)

(declare-fun e!41634 () Bool)

(assert (=> b!63488 (= e!41636 e!41634)))

(declare-fun c!8612 () Bool)

(declare-fun lt!26674 () SeekEntryResult!239)

(assert (=> b!63488 (= c!8612 ((_ is MissingVacant!239) lt!26674))))

(declare-fun b!63489 () Bool)

(declare-fun res!34702 () Bool)

(declare-fun e!41635 () Bool)

(assert (=> b!63489 (=> (not res!34702) (not e!41635))))

(declare-fun call!5024 () Bool)

(assert (=> b!63489 (= res!34702 call!5024)))

(assert (=> b!63489 (= e!41634 e!41635)))

(declare-fun b!63490 () Bool)

(declare-fun res!34699 () Bool)

(assert (=> b!63490 (= res!34699 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3081 lt!26674)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41633 () Bool)

(assert (=> b!63490 (=> (not res!34699) (not e!41633))))

(declare-fun bm!5020 () Bool)

(declare-fun c!8613 () Bool)

(assert (=> bm!5020 (= call!5024 (inRange!0 (ite c!8613 (index!3081 lt!26674) (index!3084 lt!26674)) (mask!5994 newMap!16)))))

(declare-fun b!63491 () Bool)

(assert (=> b!63491 (= e!41634 ((_ is Undefined!239) lt!26674))))

(declare-fun b!63492 () Bool)

(assert (=> b!63492 (= e!41636 e!41633)))

(declare-fun res!34700 () Bool)

(assert (=> b!63492 (= res!34700 call!5024)))

(assert (=> b!63492 (=> (not res!34700) (not e!41633))))

(declare-fun bm!5021 () Bool)

(declare-fun call!5023 () Bool)

(assert (=> bm!5021 (= call!5023 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!63493 () Bool)

(assert (=> b!63493 (= e!41635 (not call!5023))))

(declare-fun b!63494 () Bool)

(declare-fun res!34701 () Bool)

(assert (=> b!63494 (=> (not res!34701) (not e!41635))))

(assert (=> b!63494 (= res!34701 (= (select (arr!1798 (_keys!3720 newMap!16)) (index!3084 lt!26674)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63495 () Bool)

(assert (=> b!63495 (= e!41633 (not call!5023))))

(declare-fun d!13153 () Bool)

(assert (=> d!13153 e!41636))

(assert (=> d!13153 (= c!8613 ((_ is MissingZero!239) lt!26674))))

(assert (=> d!13153 (= lt!26674 (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (=> d!13153 true))

(declare-fun _$34!780 () Unit!1689)

(assert (=> d!13153 (= (choose!339 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)) _$34!780)))

(assert (= (and d!13153 c!8613) b!63492))

(assert (= (and d!13153 (not c!8613)) b!63488))

(assert (= (and b!63492 res!34700) b!63490))

(assert (= (and b!63490 res!34699) b!63495))

(assert (= (and b!63488 c!8612) b!63489))

(assert (= (and b!63488 (not c!8612)) b!63491))

(assert (= (and b!63489 res!34702) b!63494))

(assert (= (and b!63494 res!34701) b!63493))

(assert (= (or b!63492 b!63489) bm!5020))

(assert (= (or b!63495 b!63493) bm!5021))

(declare-fun m!57587 () Bool)

(assert (=> b!63490 m!57587))

(assert (=> bm!5021 m!55705))

(assert (=> bm!5021 m!55893))

(declare-fun m!57589 () Bool)

(assert (=> b!63494 m!57589))

(declare-fun m!57591 () Bool)

(assert (=> bm!5020 m!57591))

(assert (=> d!13153 m!55705))

(assert (=> d!13153 m!55909))

(assert (=> d!12659 d!13153))

(assert (=> d!12659 d!12795))

(declare-fun d!13155 () Bool)

(declare-fun lt!26675 () (_ BitVec 32))

(assert (=> d!13155 (and (bvsge lt!26675 #b00000000000000000000000000000000) (bvsle lt!26675 (bvsub (size!2030 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!41637 () (_ BitVec 32))

(assert (=> d!13155 (= lt!26675 e!41637)))

(declare-fun c!8614 () Bool)

(assert (=> d!13155 (= c!8614 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!13155 (and (bvsle #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2030 (_keys!3720 newMap!16)) (size!2030 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))))))

(assert (=> d!13155 (= (arrayCountValidKeys!0 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) lt!26675)))

(declare-fun call!5025 () (_ BitVec 32))

(declare-fun bm!5022 () Bool)

(assert (=> bm!5022 (= call!5025 (arrayCountValidKeys!0 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63496 () Bool)

(declare-fun e!41638 () (_ BitVec 32))

(assert (=> b!63496 (= e!41638 (bvadd #b00000000000000000000000000000001 call!5025))))

(declare-fun b!63497 () Bool)

(assert (=> b!63497 (= e!41637 #b00000000000000000000000000000000)))

(declare-fun b!63498 () Bool)

(assert (=> b!63498 (= e!41637 e!41638)))

(declare-fun c!8615 () Bool)

(assert (=> b!63498 (= c!8615 (validKeyInArray!0 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!63499 () Bool)

(assert (=> b!63499 (= e!41638 call!5025)))

(assert (= (and d!13155 c!8614) b!63497))

(assert (= (and d!13155 (not c!8614)) b!63498))

(assert (= (and b!63498 c!8615) b!63496))

(assert (= (and b!63498 (not c!8615)) b!63499))

(assert (= (or b!63496 b!63499) bm!5022))

(declare-fun m!57593 () Bool)

(assert (=> bm!5022 m!57593))

(declare-fun m!57595 () Bool)

(assert (=> b!63498 m!57595))

(assert (=> b!63498 m!57595))

(declare-fun m!57597 () Bool)

(assert (=> b!63498 m!57597))

(assert (=> d!12709 d!13155))

(declare-fun d!13157 () Bool)

(declare-fun e!41640 () Bool)

(assert (=> d!13157 e!41640))

(declare-fun res!34703 () Bool)

(assert (=> d!13157 (=> res!34703 e!41640)))

(declare-fun lt!26676 () Bool)

(assert (=> d!13157 (= res!34703 (not lt!26676))))

(declare-fun lt!26679 () Bool)

(assert (=> d!13157 (= lt!26676 lt!26679)))

(declare-fun lt!26677 () Unit!1689)

(declare-fun e!41639 () Unit!1689)

(assert (=> d!13157 (= lt!26677 e!41639)))

(declare-fun c!8616 () Bool)

(assert (=> d!13157 (= c!8616 lt!26679)))

(assert (=> d!13157 (= lt!26679 (containsKey!129 (toList!710 (getCurrentListMap!407 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)))))))

(assert (=> d!13157 (= (contains!700 (getCurrentListMap!407 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)))) lt!26676)))

(declare-fun b!63500 () Bool)

(declare-fun lt!26678 () Unit!1689)

(assert (=> b!63500 (= e!41639 lt!26678)))

(assert (=> b!63500 (= lt!26678 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 (getCurrentListMap!407 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)))))))

(assert (=> b!63500 (isDefined!79 (getValueByKey!125 (toList!710 (getCurrentListMap!407 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)))))))

(declare-fun b!63501 () Bool)

(declare-fun Unit!1740 () Unit!1689)

(assert (=> b!63501 (= e!41639 Unit!1740)))

(declare-fun b!63502 () Bool)

(assert (=> b!63502 (= e!41640 (isDefined!79 (getValueByKey!125 (toList!710 (getCurrentListMap!407 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026))))))))

(assert (= (and d!13157 c!8616) b!63500))

(assert (= (and d!13157 (not c!8616)) b!63501))

(assert (= (and d!13157 (not res!34703)) b!63502))

(assert (=> d!13157 m!56185))

(declare-fun m!57599 () Bool)

(assert (=> d!13157 m!57599))

(assert (=> b!63500 m!56185))

(declare-fun m!57601 () Bool)

(assert (=> b!63500 m!57601))

(assert (=> b!63500 m!56185))

(declare-fun m!57603 () Bool)

(assert (=> b!63500 m!57603))

(assert (=> b!63500 m!57603))

(declare-fun m!57605 () Bool)

(assert (=> b!63500 m!57605))

(assert (=> b!63502 m!56185))

(assert (=> b!63502 m!57603))

(assert (=> b!63502 m!57603))

(assert (=> b!63502 m!57605))

(assert (=> d!12709 d!13157))

(assert (=> d!12709 d!12725))

(assert (=> d!12709 d!12609))

(declare-fun d!13159 () Bool)

(assert (=> d!13159 (= (arrayCountValidKeys!0 lt!26223 (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (bvadd (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!26682 () Unit!1689)

(declare-fun choose!2 (array!3760 (_ BitVec 32)) Unit!1689)

(assert (=> d!13159 (= lt!26682 (choose!2 lt!26223 (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026))))))

(declare-fun e!41643 () Bool)

(assert (=> d!13159 e!41643))

(declare-fun res!34708 () Bool)

(assert (=> d!13159 (=> (not res!34708) (not e!41643))))

(assert (=> d!13159 (= res!34708 (and (bvsge (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (size!2030 lt!26223))))))

(assert (=> d!13159 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!26223 (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026))) lt!26682)))

(declare-fun b!63507 () Bool)

(declare-fun res!34709 () Bool)

(assert (=> b!63507 (=> (not res!34709) (not e!41643))))

(assert (=> b!63507 (= res!34709 (validKeyInArray!0 (select (arr!1798 lt!26223) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)))))))

(declare-fun b!63508 () Bool)

(assert (=> b!63508 (= e!41643 (bvslt (size!2030 lt!26223) #b01111111111111111111111111111111))))

(assert (= (and d!13159 res!34708) b!63507))

(assert (= (and b!63507 res!34709) b!63508))

(assert (=> d!13159 m!56193))

(declare-fun m!57607 () Bool)

(assert (=> d!13159 m!57607))

(declare-fun m!57609 () Bool)

(assert (=> b!63507 m!57609))

(assert (=> b!63507 m!57609))

(declare-fun m!57611 () Bool)

(assert (=> b!63507 m!57611))

(assert (=> d!12709 d!13159))

(declare-fun d!13161 () Bool)

(declare-fun e!41646 () Bool)

(assert (=> d!13161 e!41646))

(declare-fun res!34712 () Bool)

(assert (=> d!13161 (=> (not res!34712) (not e!41646))))

(assert (=> d!13161 (= res!34712 (and (bvsge (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (size!2030 (_keys!3720 newMap!16))) (bvslt (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (size!2031 (_values!2071 newMap!16)))))))

(declare-fun lt!26685 () Unit!1689)

(declare-fun choose!350 (array!3760 array!3762 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) (_ BitVec 64) V!2867 Int) Unit!1689)

(assert (=> d!13161 (= lt!26685 (choose!350 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(assert (=> d!13161 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13161 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!7 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)) lt!26685)))

(declare-fun b!63511 () Bool)

(assert (=> b!63511 (= e!41646 (= (+!83 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!407 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))))

(assert (= (and d!13161 res!34712) b!63511))

(assert (=> d!13161 m!55705))

(assert (=> d!13161 m!55731))

(declare-fun m!57613 () Bool)

(assert (=> d!13161 m!57613))

(assert (=> d!13161 m!55941))

(assert (=> b!63511 m!55787))

(assert (=> b!63511 m!56199))

(assert (=> b!63511 m!56189))

(assert (=> b!63511 m!56201))

(assert (=> b!63511 m!56175))

(assert (=> b!63511 m!55787))

(assert (=> d!12709 d!13161))

(declare-fun d!13163 () Bool)

(declare-fun e!41649 () Bool)

(assert (=> d!13163 e!41649))

(declare-fun res!34715 () Bool)

(assert (=> d!13163 (=> (not res!34715) (not e!41649))))

(assert (=> d!13163 (= res!34715 (and (bvsge (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (size!2030 (_keys!3720 newMap!16)))))))

(declare-fun lt!26688 () Unit!1689)

(declare-fun choose!102 ((_ BitVec 64) array!3760 (_ BitVec 32) (_ BitVec 32)) Unit!1689)

(assert (=> d!13163 (= lt!26688 (choose!102 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (mask!5994 newMap!16)))))

(assert (=> d!13163 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13163 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (_keys!3720 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (mask!5994 newMap!16)) lt!26688)))

(declare-fun b!63514 () Bool)

(assert (=> b!63514 (= e!41649 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (mask!5994 newMap!16)))))

(assert (= (and d!13163 res!34715) b!63514))

(assert (=> d!13163 m!55705))

(declare-fun m!57615 () Bool)

(assert (=> d!13163 m!57615))

(assert (=> d!13163 m!55941))

(assert (=> b!63514 m!56189))

(assert (=> b!63514 m!56211))

(assert (=> d!12709 d!13163))

(declare-fun b!63515 () Bool)

(declare-fun e!41650 () Bool)

(declare-fun call!5026 () Bool)

(assert (=> b!63515 (= e!41650 call!5026)))

(declare-fun bm!5023 () Bool)

(assert (=> bm!5023 (= call!5026 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (mask!5994 newMap!16)))))

(declare-fun b!63517 () Bool)

(declare-fun e!41652 () Bool)

(assert (=> b!63517 (= e!41650 e!41652)))

(declare-fun lt!26690 () (_ BitVec 64))

(assert (=> b!63517 (= lt!26690 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26689 () Unit!1689)

(assert (=> b!63517 (= lt!26689 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) lt!26690 #b00000000000000000000000000000000))))

(assert (=> b!63517 (arrayContainsKey!0 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) lt!26690 #b00000000000000000000000000000000)))

(declare-fun lt!26691 () Unit!1689)

(assert (=> b!63517 (= lt!26691 lt!26689)))

(declare-fun res!34716 () Bool)

(assert (=> b!63517 (= res!34716 (= (seekEntryOrOpen!0 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000) (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (mask!5994 newMap!16)) (Found!239 #b00000000000000000000000000000000)))))

(assert (=> b!63517 (=> (not res!34716) (not e!41652))))

(declare-fun b!63518 () Bool)

(declare-fun e!41651 () Bool)

(assert (=> b!63518 (= e!41651 e!41650)))

(declare-fun c!8617 () Bool)

(assert (=> b!63518 (= c!8617 (validKeyInArray!0 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!63516 () Bool)

(assert (=> b!63516 (= e!41652 call!5026)))

(declare-fun d!13165 () Bool)

(declare-fun res!34717 () Bool)

(assert (=> d!13165 (=> res!34717 e!41651)))

(assert (=> d!13165 (= res!34717 (bvsge #b00000000000000000000000000000000 (size!2030 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))))))

(assert (=> d!13165 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (mask!5994 newMap!16)) e!41651)))

(assert (= (and d!13165 (not res!34717)) b!63518))

(assert (= (and b!63518 c!8617) b!63517))

(assert (= (and b!63518 (not c!8617)) b!63515))

(assert (= (and b!63517 res!34716) b!63516))

(assert (= (or b!63516 b!63515) bm!5023))

(declare-fun m!57617 () Bool)

(assert (=> bm!5023 m!57617))

(assert (=> b!63517 m!57595))

(declare-fun m!57619 () Bool)

(assert (=> b!63517 m!57619))

(declare-fun m!57621 () Bool)

(assert (=> b!63517 m!57621))

(assert (=> b!63517 m!57595))

(declare-fun m!57623 () Bool)

(assert (=> b!63517 m!57623))

(assert (=> b!63518 m!57595))

(assert (=> b!63518 m!57595))

(assert (=> b!63518 m!57597))

(assert (=> d!12709 d!13165))

(declare-fun b!63519 () Bool)

(declare-fun c!8618 () Bool)

(assert (=> b!63519 (= c!8618 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41662 () ListLongMap!1389)

(declare-fun e!41655 () ListLongMap!1389)

(assert (=> b!63519 (= e!41662 e!41655)))

(declare-fun bm!5025 () Bool)

(declare-fun call!5031 () ListLongMap!1389)

(declare-fun call!5028 () ListLongMap!1389)

(assert (=> bm!5025 (= call!5031 call!5028)))

(declare-fun b!63520 () Bool)

(declare-fun e!41663 () Bool)

(declare-fun e!41665 () Bool)

(assert (=> b!63520 (= e!41663 e!41665)))

(declare-fun c!8621 () Bool)

(assert (=> b!63520 (= c!8621 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63521 () Bool)

(declare-fun e!41654 () Bool)

(declare-fun e!41658 () Bool)

(assert (=> b!63521 (= e!41654 e!41658)))

(declare-fun res!34720 () Bool)

(assert (=> b!63521 (=> (not res!34720) (not e!41658))))

(declare-fun lt!26708 () ListLongMap!1389)

(assert (=> b!63521 (= res!34720 (contains!700 lt!26708 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!63521 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))))))

(declare-fun b!63522 () Bool)

(assert (=> b!63522 (= e!41658 (= (apply!68 lt!26708 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63522 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))))))

(assert (=> b!63522 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))))))

(declare-fun b!63523 () Bool)

(declare-fun e!41657 () Bool)

(declare-fun e!41653 () Bool)

(assert (=> b!63523 (= e!41657 e!41653)))

(declare-fun res!34721 () Bool)

(declare-fun call!5027 () Bool)

(assert (=> b!63523 (= res!34721 call!5027)))

(assert (=> b!63523 (=> (not res!34721) (not e!41653))))

(declare-fun bm!5026 () Bool)

(declare-fun call!5030 () ListLongMap!1389)

(assert (=> bm!5026 (= call!5028 call!5030)))

(declare-fun b!63524 () Bool)

(declare-fun e!41656 () Bool)

(assert (=> b!63524 (= e!41656 (= (apply!68 lt!26708 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!63525 () Bool)

(declare-fun res!34726 () Bool)

(assert (=> b!63525 (=> (not res!34726) (not e!41663))))

(assert (=> b!63525 (= res!34726 e!41654)))

(declare-fun res!34725 () Bool)

(assert (=> b!63525 (=> res!34725 e!41654)))

(declare-fun e!41659 () Bool)

(assert (=> b!63525 (= res!34725 (not e!41659))))

(declare-fun res!34719 () Bool)

(assert (=> b!63525 (=> (not res!34719) (not e!41659))))

(assert (=> b!63525 (= res!34719 (bvslt #b00000000000000000000000000000000 (size!2030 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))))))

(declare-fun b!63526 () Bool)

(declare-fun e!41664 () Unit!1689)

(declare-fun Unit!1741 () Unit!1689)

(assert (=> b!63526 (= e!41664 Unit!1741)))

(declare-fun b!63527 () Bool)

(declare-fun call!5033 () Bool)

(assert (=> b!63527 (= e!41665 (not call!5033))))

(declare-fun b!63528 () Bool)

(declare-fun e!41661 () ListLongMap!1389)

(declare-fun call!5032 () ListLongMap!1389)

(assert (=> b!63528 (= e!41661 (+!83 call!5032 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!63529 () Bool)

(declare-fun res!34718 () Bool)

(assert (=> b!63529 (=> (not res!34718) (not e!41663))))

(assert (=> b!63529 (= res!34718 e!41657)))

(declare-fun c!8622 () Bool)

(assert (=> b!63529 (= c!8622 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63530 () Bool)

(assert (=> b!63530 (= e!41653 (= (apply!68 lt!26708 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!63531 () Bool)

(declare-fun lt!26709 () Unit!1689)

(assert (=> b!63531 (= e!41664 lt!26709)))

(declare-fun lt!26700 () ListLongMap!1389)

(assert (=> b!63531 (= lt!26700 (getCurrentListMapNoExtraKeys!46 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26713 () (_ BitVec 64))

(assert (=> b!63531 (= lt!26713 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26710 () (_ BitVec 64))

(assert (=> b!63531 (= lt!26710 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26697 () Unit!1689)

(assert (=> b!63531 (= lt!26697 (addStillContains!44 lt!26700 lt!26713 (zeroValue!2000 newMap!16) lt!26710))))

(assert (=> b!63531 (contains!700 (+!83 lt!26700 (tuple2!2067 lt!26713 (zeroValue!2000 newMap!16))) lt!26710)))

(declare-fun lt!26711 () Unit!1689)

(assert (=> b!63531 (= lt!26711 lt!26697)))

(declare-fun lt!26695 () ListLongMap!1389)

(assert (=> b!63531 (= lt!26695 (getCurrentListMapNoExtraKeys!46 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26701 () (_ BitVec 64))

(assert (=> b!63531 (= lt!26701 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26694 () (_ BitVec 64))

(assert (=> b!63531 (= lt!26694 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26693 () Unit!1689)

(assert (=> b!63531 (= lt!26693 (addApplyDifferent!44 lt!26695 lt!26701 (minValue!2000 newMap!16) lt!26694))))

(assert (=> b!63531 (= (apply!68 (+!83 lt!26695 (tuple2!2067 lt!26701 (minValue!2000 newMap!16))) lt!26694) (apply!68 lt!26695 lt!26694))))

(declare-fun lt!26696 () Unit!1689)

(assert (=> b!63531 (= lt!26696 lt!26693)))

(declare-fun lt!26702 () ListLongMap!1389)

(assert (=> b!63531 (= lt!26702 (getCurrentListMapNoExtraKeys!46 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26712 () (_ BitVec 64))

(assert (=> b!63531 (= lt!26712 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26705 () (_ BitVec 64))

(assert (=> b!63531 (= lt!26705 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26703 () Unit!1689)

(assert (=> b!63531 (= lt!26703 (addApplyDifferent!44 lt!26702 lt!26712 (zeroValue!2000 newMap!16) lt!26705))))

(assert (=> b!63531 (= (apply!68 (+!83 lt!26702 (tuple2!2067 lt!26712 (zeroValue!2000 newMap!16))) lt!26705) (apply!68 lt!26702 lt!26705))))

(declare-fun lt!26706 () Unit!1689)

(assert (=> b!63531 (= lt!26706 lt!26703)))

(declare-fun lt!26698 () ListLongMap!1389)

(assert (=> b!63531 (= lt!26698 (getCurrentListMapNoExtraKeys!46 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26704 () (_ BitVec 64))

(assert (=> b!63531 (= lt!26704 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26707 () (_ BitVec 64))

(assert (=> b!63531 (= lt!26707 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!63531 (= lt!26709 (addApplyDifferent!44 lt!26698 lt!26704 (minValue!2000 newMap!16) lt!26707))))

(assert (=> b!63531 (= (apply!68 (+!83 lt!26698 (tuple2!2067 lt!26704 (minValue!2000 newMap!16))) lt!26707) (apply!68 lt!26698 lt!26707))))

(declare-fun b!63532 () Bool)

(assert (=> b!63532 (= e!41659 (validKeyInArray!0 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!5027 () Bool)

(declare-fun call!5029 () ListLongMap!1389)

(assert (=> bm!5027 (= call!5029 call!5032)))

(declare-fun b!63533 () Bool)

(assert (=> b!63533 (= e!41665 e!41656)))

(declare-fun res!34722 () Bool)

(assert (=> b!63533 (= res!34722 call!5033)))

(assert (=> b!63533 (=> (not res!34722) (not e!41656))))

(declare-fun bm!5028 () Bool)

(assert (=> bm!5028 (= call!5030 (getCurrentListMapNoExtraKeys!46 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun c!8620 () Bool)

(declare-fun bm!5029 () Bool)

(declare-fun c!8623 () Bool)

(assert (=> bm!5029 (= call!5032 (+!83 (ite c!8620 call!5030 (ite c!8623 call!5028 call!5031)) (ite (or c!8620 c!8623) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun b!63534 () Bool)

(assert (=> b!63534 (= e!41661 e!41662)))

(assert (=> b!63534 (= c!8623 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!13167 () Bool)

(assert (=> d!13167 e!41663))

(declare-fun res!34723 () Bool)

(assert (=> d!13167 (=> (not res!34723) (not e!41663))))

(assert (=> d!13167 (= res!34723 (or (bvsge #b00000000000000000000000000000000 (size!2030 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))))))))

(declare-fun lt!26692 () ListLongMap!1389)

(assert (=> d!13167 (= lt!26708 lt!26692)))

(declare-fun lt!26699 () Unit!1689)

(assert (=> d!13167 (= lt!26699 e!41664)))

(declare-fun c!8619 () Bool)

(declare-fun e!41660 () Bool)

(assert (=> d!13167 (= c!8619 e!41660)))

(declare-fun res!34724 () Bool)

(assert (=> d!13167 (=> (not res!34724) (not e!41660))))

(assert (=> d!13167 (= res!34724 (bvslt #b00000000000000000000000000000000 (size!2030 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))))))

(assert (=> d!13167 (= lt!26692 e!41661)))

(assert (=> d!13167 (= c!8620 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13167 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13167 (= (getCurrentListMap!407 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26708)))

(declare-fun bm!5024 () Bool)

(assert (=> bm!5024 (= call!5033 (contains!700 lt!26708 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63535 () Bool)

(assert (=> b!63535 (= e!41662 call!5029)))

(declare-fun b!63536 () Bool)

(assert (=> b!63536 (= e!41655 call!5029)))

(declare-fun bm!5030 () Bool)

(assert (=> bm!5030 (= call!5027 (contains!700 lt!26708 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63537 () Bool)

(assert (=> b!63537 (= e!41655 call!5031)))

(declare-fun b!63538 () Bool)

(assert (=> b!63538 (= e!41657 (not call!5027))))

(declare-fun b!63539 () Bool)

(assert (=> b!63539 (= e!41660 (validKeyInArray!0 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (= (and d!13167 c!8620) b!63528))

(assert (= (and d!13167 (not c!8620)) b!63534))

(assert (= (and b!63534 c!8623) b!63535))

(assert (= (and b!63534 (not c!8623)) b!63519))

(assert (= (and b!63519 c!8618) b!63536))

(assert (= (and b!63519 (not c!8618)) b!63537))

(assert (= (or b!63536 b!63537) bm!5025))

(assert (= (or b!63535 bm!5025) bm!5026))

(assert (= (or b!63535 b!63536) bm!5027))

(assert (= (or b!63528 bm!5026) bm!5028))

(assert (= (or b!63528 bm!5027) bm!5029))

(assert (= (and d!13167 res!34724) b!63539))

(assert (= (and d!13167 c!8619) b!63531))

(assert (= (and d!13167 (not c!8619)) b!63526))

(assert (= (and d!13167 res!34723) b!63525))

(assert (= (and b!63525 res!34719) b!63532))

(assert (= (and b!63525 (not res!34725)) b!63521))

(assert (= (and b!63521 res!34720) b!63522))

(assert (= (and b!63525 res!34726) b!63529))

(assert (= (and b!63529 c!8622) b!63523))

(assert (= (and b!63529 (not c!8622)) b!63538))

(assert (= (and b!63523 res!34721) b!63530))

(assert (= (or b!63523 b!63538) bm!5030))

(assert (= (and b!63529 res!34718) b!63520))

(assert (= (and b!63520 c!8621) b!63533))

(assert (= (and b!63520 (not c!8621)) b!63527))

(assert (= (and b!63533 res!34722) b!63524))

(assert (= (or b!63533 b!63527) bm!5024))

(declare-fun b_lambda!2835 () Bool)

(assert (=> (not b_lambda!2835) (not b!63522)))

(assert (=> b!63522 t!4870))

(declare-fun b_and!3877 () Bool)

(assert (= b_and!3873 (and (=> t!4870 result!2463) b_and!3877)))

(assert (=> b!63522 t!4872))

(declare-fun b_and!3879 () Bool)

(assert (= b_and!3875 (and (=> t!4872 result!2465) b_and!3879)))

(declare-fun m!57625 () Bool)

(assert (=> b!63528 m!57625))

(declare-fun m!57627 () Bool)

(assert (=> b!63530 m!57627))

(declare-fun m!57629 () Bool)

(assert (=> bm!5029 m!57629))

(assert (=> b!63539 m!57595))

(assert (=> b!63539 m!57595))

(assert (=> b!63539 m!57597))

(declare-fun m!57631 () Bool)

(assert (=> bm!5028 m!57631))

(assert (=> b!63532 m!57595))

(assert (=> b!63532 m!57595))

(assert (=> b!63532 m!57597))

(assert (=> b!63521 m!57595))

(assert (=> b!63521 m!57595))

(declare-fun m!57633 () Bool)

(assert (=> b!63521 m!57633))

(declare-fun m!57635 () Bool)

(assert (=> bm!5024 m!57635))

(assert (=> b!63531 m!57595))

(declare-fun m!57637 () Bool)

(assert (=> b!63531 m!57637))

(declare-fun m!57639 () Bool)

(assert (=> b!63531 m!57639))

(declare-fun m!57641 () Bool)

(assert (=> b!63531 m!57641))

(declare-fun m!57643 () Bool)

(assert (=> b!63531 m!57643))

(declare-fun m!57645 () Bool)

(assert (=> b!63531 m!57645))

(declare-fun m!57647 () Bool)

(assert (=> b!63531 m!57647))

(declare-fun m!57649 () Bool)

(assert (=> b!63531 m!57649))

(declare-fun m!57651 () Bool)

(assert (=> b!63531 m!57651))

(declare-fun m!57653 () Bool)

(assert (=> b!63531 m!57653))

(declare-fun m!57655 () Bool)

(assert (=> b!63531 m!57655))

(declare-fun m!57657 () Bool)

(assert (=> b!63531 m!57657))

(assert (=> b!63531 m!57643))

(declare-fun m!57659 () Bool)

(assert (=> b!63531 m!57659))

(declare-fun m!57661 () Bool)

(assert (=> b!63531 m!57661))

(assert (=> b!63531 m!57649))

(declare-fun m!57663 () Bool)

(assert (=> b!63531 m!57663))

(assert (=> b!63531 m!57637))

(assert (=> b!63531 m!57661))

(declare-fun m!57665 () Bool)

(assert (=> b!63531 m!57665))

(assert (=> b!63531 m!57631))

(assert (=> d!13167 m!55941))

(declare-fun m!57667 () Bool)

(assert (=> bm!5030 m!57667))

(declare-fun m!57669 () Bool)

(assert (=> b!63524 m!57669))

(assert (=> b!63522 m!56259))

(assert (=> b!63522 m!57595))

(assert (=> b!63522 m!57595))

(declare-fun m!57671 () Bool)

(assert (=> b!63522 m!57671))

(declare-fun m!57673 () Bool)

(assert (=> b!63522 m!57673))

(assert (=> b!63522 m!56259))

(declare-fun m!57675 () Bool)

(assert (=> b!63522 m!57675))

(assert (=> b!63522 m!57673))

(assert (=> d!12709 d!13167))

(declare-fun d!13169 () Bool)

(declare-fun e!41666 () Bool)

(assert (=> d!13169 e!41666))

(declare-fun res!34727 () Bool)

(assert (=> d!13169 (=> (not res!34727) (not e!41666))))

(declare-fun lt!26714 () ListLongMap!1389)

(assert (=> d!13169 (= res!34727 (contains!700 lt!26714 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26717 () List!1463)

(assert (=> d!13169 (= lt!26714 (ListLongMap!1390 lt!26717))))

(declare-fun lt!26716 () Unit!1689)

(declare-fun lt!26715 () Unit!1689)

(assert (=> d!13169 (= lt!26716 lt!26715)))

(assert (=> d!13169 (= (getValueByKey!125 lt!26717 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13169 (= lt!26715 (lemmaContainsTupThenGetReturnValue!44 lt!26717 (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13169 (= lt!26717 (insertStrictlySorted!46 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13169 (= (+!83 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26714)))

(declare-fun b!63540 () Bool)

(declare-fun res!34728 () Bool)

(assert (=> b!63540 (=> (not res!34728) (not e!41666))))

(assert (=> b!63540 (= res!34728 (= (getValueByKey!125 (toList!710 lt!26714) (_1!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63541 () Bool)

(assert (=> b!63541 (= e!41666 (contains!703 (toList!710 lt!26714) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13169 res!34727) b!63540))

(assert (= (and b!63540 res!34728) b!63541))

(declare-fun m!57677 () Bool)

(assert (=> d!13169 m!57677))

(declare-fun m!57679 () Bool)

(assert (=> d!13169 m!57679))

(declare-fun m!57681 () Bool)

(assert (=> d!13169 m!57681))

(declare-fun m!57683 () Bool)

(assert (=> d!13169 m!57683))

(declare-fun m!57685 () Bool)

(assert (=> b!63540 m!57685))

(declare-fun m!57687 () Bool)

(assert (=> b!63541 m!57687))

(assert (=> d!12709 d!13169))

(assert (=> d!12709 d!12727))

(declare-fun b!63542 () Bool)

(declare-fun c!8624 () Bool)

(assert (=> b!63542 (= c!8624 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41676 () ListLongMap!1389)

(declare-fun e!41669 () ListLongMap!1389)

(assert (=> b!63542 (= e!41676 e!41669)))

(declare-fun bm!5032 () Bool)

(declare-fun call!5038 () ListLongMap!1389)

(declare-fun call!5035 () ListLongMap!1389)

(assert (=> bm!5032 (= call!5038 call!5035)))

(declare-fun b!63543 () Bool)

(declare-fun e!41677 () Bool)

(declare-fun e!41679 () Bool)

(assert (=> b!63543 (= e!41677 e!41679)))

(declare-fun c!8627 () Bool)

(assert (=> b!63543 (= c!8627 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63544 () Bool)

(declare-fun e!41668 () Bool)

(declare-fun e!41672 () Bool)

(assert (=> b!63544 (= e!41668 e!41672)))

(declare-fun res!34731 () Bool)

(assert (=> b!63544 (=> (not res!34731) (not e!41672))))

(declare-fun lt!26734 () ListLongMap!1389)

(assert (=> b!63544 (= res!34731 (contains!700 lt!26734 (select (arr!1798 lt!26214) #b00000000000000000000000000000000)))))

(assert (=> b!63544 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 lt!26214)))))

(declare-fun b!63545 () Bool)

(assert (=> b!63545 (= e!41672 (= (apply!68 lt!26734 (select (arr!1798 lt!26214) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 lt!26207) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63545 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 lt!26207)))))

(assert (=> b!63545 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 lt!26214)))))

(declare-fun b!63546 () Bool)

(declare-fun e!41671 () Bool)

(declare-fun e!41667 () Bool)

(assert (=> b!63546 (= e!41671 e!41667)))

(declare-fun res!34732 () Bool)

(declare-fun call!5034 () Bool)

(assert (=> b!63546 (= res!34732 call!5034)))

(assert (=> b!63546 (=> (not res!34732) (not e!41667))))

(declare-fun bm!5033 () Bool)

(declare-fun call!5037 () ListLongMap!1389)

(assert (=> bm!5033 (= call!5035 call!5037)))

(declare-fun b!63547 () Bool)

(declare-fun e!41670 () Bool)

(assert (=> b!63547 (= e!41670 (= (apply!68 lt!26734 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!63548 () Bool)

(declare-fun res!34737 () Bool)

(assert (=> b!63548 (=> (not res!34737) (not e!41677))))

(assert (=> b!63548 (= res!34737 e!41668)))

(declare-fun res!34736 () Bool)

(assert (=> b!63548 (=> res!34736 e!41668)))

(declare-fun e!41673 () Bool)

(assert (=> b!63548 (= res!34736 (not e!41673))))

(declare-fun res!34730 () Bool)

(assert (=> b!63548 (=> (not res!34730) (not e!41673))))

(assert (=> b!63548 (= res!34730 (bvslt #b00000000000000000000000000000000 (size!2030 lt!26214)))))

(declare-fun b!63549 () Bool)

(declare-fun e!41678 () Unit!1689)

(declare-fun Unit!1742 () Unit!1689)

(assert (=> b!63549 (= e!41678 Unit!1742)))

(declare-fun b!63550 () Bool)

(declare-fun call!5040 () Bool)

(assert (=> b!63550 (= e!41679 (not call!5040))))

(declare-fun b!63551 () Bool)

(declare-fun e!41675 () ListLongMap!1389)

(declare-fun call!5039 () ListLongMap!1389)

(assert (=> b!63551 (= e!41675 (+!83 call!5039 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!63552 () Bool)

(declare-fun res!34729 () Bool)

(assert (=> b!63552 (=> (not res!34729) (not e!41677))))

(assert (=> b!63552 (= res!34729 e!41671)))

(declare-fun c!8628 () Bool)

(assert (=> b!63552 (= c!8628 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63553 () Bool)

(assert (=> b!63553 (= e!41667 (= (apply!68 lt!26734 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!63554 () Bool)

(declare-fun lt!26735 () Unit!1689)

(assert (=> b!63554 (= e!41678 lt!26735)))

(declare-fun lt!26726 () ListLongMap!1389)

(assert (=> b!63554 (= lt!26726 (getCurrentListMapNoExtraKeys!46 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26739 () (_ BitVec 64))

(assert (=> b!63554 (= lt!26739 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26736 () (_ BitVec 64))

(assert (=> b!63554 (= lt!26736 (select (arr!1798 lt!26214) #b00000000000000000000000000000000))))

(declare-fun lt!26723 () Unit!1689)

(assert (=> b!63554 (= lt!26723 (addStillContains!44 lt!26726 lt!26739 (zeroValue!2000 newMap!16) lt!26736))))

(assert (=> b!63554 (contains!700 (+!83 lt!26726 (tuple2!2067 lt!26739 (zeroValue!2000 newMap!16))) lt!26736)))

(declare-fun lt!26737 () Unit!1689)

(assert (=> b!63554 (= lt!26737 lt!26723)))

(declare-fun lt!26721 () ListLongMap!1389)

(assert (=> b!63554 (= lt!26721 (getCurrentListMapNoExtraKeys!46 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26727 () (_ BitVec 64))

(assert (=> b!63554 (= lt!26727 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26720 () (_ BitVec 64))

(assert (=> b!63554 (= lt!26720 (select (arr!1798 lt!26214) #b00000000000000000000000000000000))))

(declare-fun lt!26719 () Unit!1689)

(assert (=> b!63554 (= lt!26719 (addApplyDifferent!44 lt!26721 lt!26727 (minValue!2000 newMap!16) lt!26720))))

(assert (=> b!63554 (= (apply!68 (+!83 lt!26721 (tuple2!2067 lt!26727 (minValue!2000 newMap!16))) lt!26720) (apply!68 lt!26721 lt!26720))))

(declare-fun lt!26722 () Unit!1689)

(assert (=> b!63554 (= lt!26722 lt!26719)))

(declare-fun lt!26728 () ListLongMap!1389)

(assert (=> b!63554 (= lt!26728 (getCurrentListMapNoExtraKeys!46 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26738 () (_ BitVec 64))

(assert (=> b!63554 (= lt!26738 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26731 () (_ BitVec 64))

(assert (=> b!63554 (= lt!26731 (select (arr!1798 lt!26214) #b00000000000000000000000000000000))))

(declare-fun lt!26729 () Unit!1689)

(assert (=> b!63554 (= lt!26729 (addApplyDifferent!44 lt!26728 lt!26738 (zeroValue!2000 newMap!16) lt!26731))))

(assert (=> b!63554 (= (apply!68 (+!83 lt!26728 (tuple2!2067 lt!26738 (zeroValue!2000 newMap!16))) lt!26731) (apply!68 lt!26728 lt!26731))))

(declare-fun lt!26732 () Unit!1689)

(assert (=> b!63554 (= lt!26732 lt!26729)))

(declare-fun lt!26724 () ListLongMap!1389)

(assert (=> b!63554 (= lt!26724 (getCurrentListMapNoExtraKeys!46 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26730 () (_ BitVec 64))

(assert (=> b!63554 (= lt!26730 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26733 () (_ BitVec 64))

(assert (=> b!63554 (= lt!26733 (select (arr!1798 lt!26214) #b00000000000000000000000000000000))))

(assert (=> b!63554 (= lt!26735 (addApplyDifferent!44 lt!26724 lt!26730 (minValue!2000 newMap!16) lt!26733))))

(assert (=> b!63554 (= (apply!68 (+!83 lt!26724 (tuple2!2067 lt!26730 (minValue!2000 newMap!16))) lt!26733) (apply!68 lt!26724 lt!26733))))

(declare-fun b!63555 () Bool)

(assert (=> b!63555 (= e!41673 (validKeyInArray!0 (select (arr!1798 lt!26214) #b00000000000000000000000000000000)))))

(declare-fun bm!5034 () Bool)

(declare-fun call!5036 () ListLongMap!1389)

(assert (=> bm!5034 (= call!5036 call!5039)))

(declare-fun b!63556 () Bool)

(assert (=> b!63556 (= e!41679 e!41670)))

(declare-fun res!34733 () Bool)

(assert (=> b!63556 (= res!34733 call!5040)))

(assert (=> b!63556 (=> (not res!34733) (not e!41670))))

(declare-fun bm!5035 () Bool)

(assert (=> bm!5035 (= call!5037 (getCurrentListMapNoExtraKeys!46 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun c!8629 () Bool)

(declare-fun c!8626 () Bool)

(declare-fun bm!5036 () Bool)

(assert (=> bm!5036 (= call!5039 (+!83 (ite c!8626 call!5037 (ite c!8629 call!5035 call!5038)) (ite (or c!8626 c!8629) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun b!63557 () Bool)

(assert (=> b!63557 (= e!41675 e!41676)))

(assert (=> b!63557 (= c!8629 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!13171 () Bool)

(assert (=> d!13171 e!41677))

(declare-fun res!34734 () Bool)

(assert (=> d!13171 (=> (not res!34734) (not e!41677))))

(assert (=> d!13171 (= res!34734 (or (bvsge #b00000000000000000000000000000000 (size!2030 lt!26214)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 lt!26214)))))))

(declare-fun lt!26718 () ListLongMap!1389)

(assert (=> d!13171 (= lt!26734 lt!26718)))

(declare-fun lt!26725 () Unit!1689)

(assert (=> d!13171 (= lt!26725 e!41678)))

(declare-fun c!8625 () Bool)

(declare-fun e!41674 () Bool)

(assert (=> d!13171 (= c!8625 e!41674)))

(declare-fun res!34735 () Bool)

(assert (=> d!13171 (=> (not res!34735) (not e!41674))))

(assert (=> d!13171 (= res!34735 (bvslt #b00000000000000000000000000000000 (size!2030 lt!26214)))))

(assert (=> d!13171 (= lt!26718 e!41675)))

(assert (=> d!13171 (= c!8626 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13171 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13171 (= (getCurrentListMap!407 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26734)))

(declare-fun bm!5031 () Bool)

(assert (=> bm!5031 (= call!5040 (contains!700 lt!26734 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63558 () Bool)

(assert (=> b!63558 (= e!41676 call!5036)))

(declare-fun b!63559 () Bool)

(assert (=> b!63559 (= e!41669 call!5036)))

(declare-fun bm!5037 () Bool)

(assert (=> bm!5037 (= call!5034 (contains!700 lt!26734 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63560 () Bool)

(assert (=> b!63560 (= e!41669 call!5038)))

(declare-fun b!63561 () Bool)

(assert (=> b!63561 (= e!41671 (not call!5034))))

(declare-fun b!63562 () Bool)

(assert (=> b!63562 (= e!41674 (validKeyInArray!0 (select (arr!1798 lt!26214) #b00000000000000000000000000000000)))))

(assert (= (and d!13171 c!8626) b!63551))

(assert (= (and d!13171 (not c!8626)) b!63557))

(assert (= (and b!63557 c!8629) b!63558))

(assert (= (and b!63557 (not c!8629)) b!63542))

(assert (= (and b!63542 c!8624) b!63559))

(assert (= (and b!63542 (not c!8624)) b!63560))

(assert (= (or b!63559 b!63560) bm!5032))

(assert (= (or b!63558 bm!5032) bm!5033))

(assert (= (or b!63558 b!63559) bm!5034))

(assert (= (or b!63551 bm!5033) bm!5035))

(assert (= (or b!63551 bm!5034) bm!5036))

(assert (= (and d!13171 res!34735) b!63562))

(assert (= (and d!13171 c!8625) b!63554))

(assert (= (and d!13171 (not c!8625)) b!63549))

(assert (= (and d!13171 res!34734) b!63548))

(assert (= (and b!63548 res!34730) b!63555))

(assert (= (and b!63548 (not res!34736)) b!63544))

(assert (= (and b!63544 res!34731) b!63545))

(assert (= (and b!63548 res!34737) b!63552))

(assert (= (and b!63552 c!8628) b!63546))

(assert (= (and b!63552 (not c!8628)) b!63561))

(assert (= (and b!63546 res!34732) b!63553))

(assert (= (or b!63546 b!63561) bm!5037))

(assert (= (and b!63552 res!34729) b!63543))

(assert (= (and b!63543 c!8627) b!63556))

(assert (= (and b!63543 (not c!8627)) b!63550))

(assert (= (and b!63556 res!34733) b!63547))

(assert (= (or b!63556 b!63550) bm!5031))

(declare-fun b_lambda!2837 () Bool)

(assert (=> (not b_lambda!2837) (not b!63545)))

(assert (=> b!63545 t!4870))

(declare-fun b_and!3881 () Bool)

(assert (= b_and!3877 (and (=> t!4870 result!2463) b_and!3881)))

(assert (=> b!63545 t!4872))

(declare-fun b_and!3883 () Bool)

(assert (= b_and!3879 (and (=> t!4872 result!2465) b_and!3883)))

(declare-fun m!57689 () Bool)

(assert (=> b!63551 m!57689))

(declare-fun m!57691 () Bool)

(assert (=> b!63553 m!57691))

(declare-fun m!57693 () Bool)

(assert (=> bm!5036 m!57693))

(declare-fun m!57695 () Bool)

(assert (=> b!63562 m!57695))

(assert (=> b!63562 m!57695))

(declare-fun m!57697 () Bool)

(assert (=> b!63562 m!57697))

(declare-fun m!57699 () Bool)

(assert (=> bm!5035 m!57699))

(assert (=> b!63555 m!57695))

(assert (=> b!63555 m!57695))

(assert (=> b!63555 m!57697))

(assert (=> b!63544 m!57695))

(assert (=> b!63544 m!57695))

(declare-fun m!57701 () Bool)

(assert (=> b!63544 m!57701))

(declare-fun m!57703 () Bool)

(assert (=> bm!5031 m!57703))

(assert (=> b!63554 m!57695))

(declare-fun m!57705 () Bool)

(assert (=> b!63554 m!57705))

(declare-fun m!57707 () Bool)

(assert (=> b!63554 m!57707))

(declare-fun m!57709 () Bool)

(assert (=> b!63554 m!57709))

(declare-fun m!57711 () Bool)

(assert (=> b!63554 m!57711))

(declare-fun m!57713 () Bool)

(assert (=> b!63554 m!57713))

(declare-fun m!57715 () Bool)

(assert (=> b!63554 m!57715))

(declare-fun m!57717 () Bool)

(assert (=> b!63554 m!57717))

(declare-fun m!57719 () Bool)

(assert (=> b!63554 m!57719))

(declare-fun m!57721 () Bool)

(assert (=> b!63554 m!57721))

(declare-fun m!57723 () Bool)

(assert (=> b!63554 m!57723))

(declare-fun m!57725 () Bool)

(assert (=> b!63554 m!57725))

(assert (=> b!63554 m!57711))

(declare-fun m!57727 () Bool)

(assert (=> b!63554 m!57727))

(declare-fun m!57729 () Bool)

(assert (=> b!63554 m!57729))

(assert (=> b!63554 m!57717))

(declare-fun m!57731 () Bool)

(assert (=> b!63554 m!57731))

(assert (=> b!63554 m!57705))

(assert (=> b!63554 m!57729))

(declare-fun m!57733 () Bool)

(assert (=> b!63554 m!57733))

(assert (=> b!63554 m!57699))

(assert (=> d!13171 m!55941))

(declare-fun m!57735 () Bool)

(assert (=> bm!5037 m!57735))

(declare-fun m!57737 () Bool)

(assert (=> b!63547 m!57737))

(assert (=> b!63545 m!56259))

(assert (=> b!63545 m!57695))

(assert (=> b!63545 m!57695))

(declare-fun m!57739 () Bool)

(assert (=> b!63545 m!57739))

(declare-fun m!57741 () Bool)

(assert (=> b!63545 m!57741))

(assert (=> b!63545 m!56259))

(declare-fun m!57743 () Bool)

(assert (=> b!63545 m!57743))

(assert (=> b!63545 m!57741))

(assert (=> d!12709 d!13171))

(declare-fun d!13173 () Bool)

(assert (=> d!13173 (arrayContainsKey!0 lt!26217 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!26740 () Unit!1689)

(assert (=> d!13173 (= lt!26740 (choose!13 lt!26217 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026))))))

(assert (=> d!13173 (bvsge (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000000)))

(assert (=> d!13173 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!26217 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026))) lt!26740)))

(declare-fun bs!2765 () Bool)

(assert (= bs!2765 d!13173))

(assert (=> bs!2765 m!55705))

(assert (=> bs!2765 m!56203))

(assert (=> bs!2765 m!55705))

(declare-fun m!57745 () Bool)

(assert (=> bs!2765 m!57745))

(assert (=> d!12709 d!13173))

(declare-fun d!13175 () Bool)

(declare-fun res!34738 () Bool)

(declare-fun e!41680 () Bool)

(assert (=> d!13175 (=> res!34738 e!41680)))

(assert (=> d!13175 (= res!34738 (= (select (arr!1798 lt!26217) #b00000000000000000000000000000000) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (=> d!13175 (= (arrayContainsKey!0 lt!26217 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) #b00000000000000000000000000000000) e!41680)))

(declare-fun b!63563 () Bool)

(declare-fun e!41681 () Bool)

(assert (=> b!63563 (= e!41680 e!41681)))

(declare-fun res!34739 () Bool)

(assert (=> b!63563 (=> (not res!34739) (not e!41681))))

(assert (=> b!63563 (= res!34739 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2030 lt!26217)))))

(declare-fun b!63564 () Bool)

(assert (=> b!63564 (= e!41681 (arrayContainsKey!0 lt!26217 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!13175 (not res!34738)) b!63563))

(assert (= (and b!63563 res!34739) b!63564))

(declare-fun m!57747 () Bool)

(assert (=> d!13175 m!57747))

(assert (=> b!63564 m!55705))

(declare-fun m!57749 () Bool)

(assert (=> b!63564 m!57749))

(assert (=> d!12709 d!13175))

(declare-fun d!13177 () Bool)

(declare-fun e!41682 () Bool)

(assert (=> d!13177 e!41682))

(declare-fun res!34740 () Bool)

(assert (=> d!13177 (=> (not res!34740) (not e!41682))))

(assert (=> d!13177 (= res!34740 (and (bvsge (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (size!2030 lt!26214))))))

(declare-fun lt!26741 () Unit!1689)

(assert (=> d!13177 (= lt!26741 (choose!343 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (defaultEntry!2088 newMap!16)))))

(assert (=> d!13177 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13177 (= (lemmaValidKeyInArrayIsInListMap!75 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (defaultEntry!2088 newMap!16)) lt!26741)))

(declare-fun b!63565 () Bool)

(assert (=> b!63565 (= e!41682 (contains!700 (getCurrentListMap!407 lt!26214 lt!26207 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1798 lt!26214) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)))))))

(assert (= (and d!13177 res!34740) b!63565))

(declare-fun m!57751 () Bool)

(assert (=> d!13177 m!57751))

(assert (=> d!13177 m!55941))

(assert (=> b!63565 m!56183))

(declare-fun m!57753 () Bool)

(assert (=> b!63565 m!57753))

(assert (=> b!63565 m!56183))

(assert (=> b!63565 m!57753))

(declare-fun m!57755 () Bool)

(assert (=> b!63565 m!57755))

(assert (=> d!12709 d!13177))

(assert (=> d!12709 d!12761))

(declare-fun bm!5038 () Bool)

(declare-fun c!8630 () Bool)

(declare-fun call!5041 () Bool)

(assert (=> bm!5038 (= call!5041 (arrayNoDuplicates!0 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) (bvadd lt!26203 #b00000000000000000000000000000001) (ite c!8630 (Cons!1460 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) lt!26203) lt!26211) lt!26211)))))

(declare-fun e!41685 () Bool)

(declare-fun b!63566 () Bool)

(assert (=> b!63566 (= e!41685 (contains!702 lt!26211 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) lt!26203)))))

(declare-fun b!63567 () Bool)

(declare-fun e!41684 () Bool)

(assert (=> b!63567 (= e!41684 call!5041)))

(declare-fun b!63569 () Bool)

(declare-fun e!41686 () Bool)

(declare-fun e!41683 () Bool)

(assert (=> b!63569 (= e!41686 e!41683)))

(declare-fun res!34743 () Bool)

(assert (=> b!63569 (=> (not res!34743) (not e!41683))))

(assert (=> b!63569 (= res!34743 (not e!41685))))

(declare-fun res!34741 () Bool)

(assert (=> b!63569 (=> (not res!34741) (not e!41685))))

(assert (=> b!63569 (= res!34741 (validKeyInArray!0 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) lt!26203)))))

(declare-fun b!63570 () Bool)

(assert (=> b!63570 (= e!41684 call!5041)))

(declare-fun d!13179 () Bool)

(declare-fun res!34742 () Bool)

(assert (=> d!13179 (=> res!34742 e!41686)))

(assert (=> d!13179 (= res!34742 (bvsge lt!26203 (size!2030 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))))))))

(assert (=> d!13179 (= (arrayNoDuplicates!0 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) lt!26203 lt!26211) e!41686)))

(declare-fun b!63568 () Bool)

(assert (=> b!63568 (= e!41683 e!41684)))

(assert (=> b!63568 (= c!8630 (validKeyInArray!0 (select (arr!1798 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16)))) lt!26203)))))

(assert (= (and d!13179 (not res!34742)) b!63569))

(assert (= (and b!63569 res!34741) b!63566))

(assert (= (and b!63569 res!34743) b!63568))

(assert (= (and b!63568 c!8630) b!63570))

(assert (= (and b!63568 (not c!8630)) b!63567))

(assert (= (or b!63570 b!63567) bm!5038))

(declare-fun m!57757 () Bool)

(assert (=> bm!5038 m!57757))

(declare-fun m!57759 () Bool)

(assert (=> bm!5038 m!57759))

(assert (=> b!63566 m!57757))

(assert (=> b!63566 m!57757))

(declare-fun m!57761 () Bool)

(assert (=> b!63566 m!57761))

(assert (=> b!63569 m!57757))

(assert (=> b!63569 m!57757))

(declare-fun m!57763 () Bool)

(assert (=> b!63569 m!57763))

(assert (=> b!63568 m!57757))

(assert (=> b!63568 m!57757))

(assert (=> b!63568 m!57763))

(assert (=> d!12709 d!13179))

(declare-fun d!13181 () Bool)

(declare-fun e!41689 () Bool)

(assert (=> d!13181 e!41689))

(declare-fun res!34746 () Bool)

(assert (=> d!13181 (=> (not res!34746) (not e!41689))))

(assert (=> d!13181 (= res!34746 (and (bvsge (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (size!2030 (_keys!3720 newMap!16)))))))

(declare-fun lt!26744 () Unit!1689)

(declare-fun choose!41 (array!3760 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1464) Unit!1689)

(assert (=> d!13181 (= lt!26744 (choose!41 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) lt!26203 lt!26211))))

(assert (=> d!13181 (bvslt (size!2030 (_keys!3720 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!13181 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3720 newMap!16) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) lt!26203 lt!26211) lt!26744)))

(declare-fun b!63573 () Bool)

(assert (=> b!63573 (= e!41689 (arrayNoDuplicates!0 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) lt!26203 lt!26211))))

(assert (= (and d!13181 res!34746) b!63573))

(assert (=> d!13181 m!55705))

(declare-fun m!57765 () Bool)

(assert (=> d!13181 m!57765))

(assert (=> b!63573 m!56189))

(assert (=> b!63573 m!56195))

(assert (=> d!12709 d!13181))

(assert (=> d!12709 d!12653))

(declare-fun d!13183 () Bool)

(declare-fun e!41694 () Bool)

(assert (=> d!13183 e!41694))

(declare-fun res!34757 () Bool)

(assert (=> d!13183 (=> (not res!34757) (not e!41694))))

(assert (=> d!13183 (= res!34757 (and (bvsge (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (size!2030 (_keys!3720 newMap!16)))))))

(declare-fun lt!26747 () Unit!1689)

(declare-fun choose!1 (array!3760 (_ BitVec 32) (_ BitVec 64)) Unit!1689)

(assert (=> d!13183 (= lt!26747 (choose!1 (_keys!3720 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(declare-fun e!41695 () Bool)

(assert (=> d!13183 e!41695))

(declare-fun res!34756 () Bool)

(assert (=> d!13183 (=> (not res!34756) (not e!41695))))

(assert (=> d!13183 (= res!34756 (and (bvsge (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (size!2030 (_keys!3720 newMap!16)))))))

(assert (=> d!13183 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3720 newMap!16) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) lt!26747)))

(declare-fun b!63584 () Bool)

(assert (=> b!63584 (= e!41695 (bvslt (size!2030 (_keys!3720 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!63585 () Bool)

(assert (=> b!63585 (= e!41694 (= (arrayCountValidKeys!0 (array!3761 (store (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) (size!2030 (_keys!3720 newMap!16))) #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!63582 () Bool)

(declare-fun res!34755 () Bool)

(assert (=> b!63582 (=> (not res!34755) (not e!41695))))

(assert (=> b!63582 (= res!34755 (not (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026))))))))

(declare-fun b!63583 () Bool)

(declare-fun res!34758 () Bool)

(assert (=> b!63583 (=> (not res!34758) (not e!41695))))

(assert (=> b!63583 (= res!34758 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (= (and d!13183 res!34756) b!63582))

(assert (= (and b!63582 res!34755) b!63583))

(assert (= (and b!63583 res!34758) b!63584))

(assert (= (and d!13183 res!34757) b!63585))

(assert (=> d!13183 m!55705))

(declare-fun m!57767 () Bool)

(assert (=> d!13183 m!57767))

(assert (=> b!63585 m!56189))

(assert (=> b!63585 m!56191))

(assert (=> b!63585 m!55847))

(declare-fun m!57769 () Bool)

(assert (=> b!63582 m!57769))

(assert (=> b!63582 m!57769))

(declare-fun m!57771 () Bool)

(assert (=> b!63582 m!57771))

(assert (=> b!63583 m!55705))

(assert (=> b!63583 m!55865))

(assert (=> d!12709 d!13183))

(declare-fun lt!26748 () (_ BitVec 32))

(declare-fun d!13185 () Bool)

(assert (=> d!13185 (and (bvsge lt!26748 #b00000000000000000000000000000000) (bvsle lt!26748 (bvsub (size!2030 lt!26223) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)))))))

(declare-fun e!41696 () (_ BitVec 32))

(assert (=> d!13185 (= lt!26748 e!41696)))

(declare-fun c!8631 () Bool)

(assert (=> d!13185 (= c!8631 (bvsge (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (bvadd (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000001)))))

(assert (=> d!13185 (and (bvsle (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (bvadd (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000001)) (bvsge (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000001) (size!2030 lt!26223)))))

(assert (=> d!13185 (= (arrayCountValidKeys!0 lt!26223 (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) (bvadd (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000001)) lt!26748)))

(declare-fun call!5042 () (_ BitVec 32))

(declare-fun bm!5039 () Bool)

(assert (=> bm!5039 (= call!5042 (arrayCountValidKeys!0 lt!26223 (bvadd (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000001) (bvadd (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)) #b00000000000000000000000000000001)))))

(declare-fun b!63586 () Bool)

(declare-fun e!41697 () (_ BitVec 32))

(assert (=> b!63586 (= e!41697 (bvadd #b00000000000000000000000000000001 call!5042))))

(declare-fun b!63587 () Bool)

(assert (=> b!63587 (= e!41696 #b00000000000000000000000000000000)))

(declare-fun b!63588 () Bool)

(assert (=> b!63588 (= e!41696 e!41697)))

(declare-fun c!8632 () Bool)

(assert (=> b!63588 (= c!8632 (validKeyInArray!0 (select (arr!1798 lt!26223) (ite c!8335 (index!3084 lt!26026) (index!3081 lt!26026)))))))

(declare-fun b!63589 () Bool)

(assert (=> b!63589 (= e!41697 call!5042)))

(assert (= (and d!13185 c!8631) b!63587))

(assert (= (and d!13185 (not c!8631)) b!63588))

(assert (= (and b!63588 c!8632) b!63586))

(assert (= (and b!63588 (not c!8632)) b!63589))

(assert (= (or b!63586 b!63589) bm!5039))

(declare-fun m!57773 () Bool)

(assert (=> bm!5039 m!57773))

(assert (=> b!63588 m!57609))

(assert (=> b!63588 m!57609))

(assert (=> b!63588 m!57611))

(assert (=> d!12709 d!13185))

(assert (=> b!62871 d!12775))

(declare-fun d!13187 () Bool)

(assert (=> d!13187 (= (isEmpty!305 (getValueByKey!125 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))) (not ((_ is Some!130) (getValueByKey!125 (toList!710 lt!25845) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))))

(assert (=> d!12667 d!13187))

(declare-fun d!13189 () Bool)

(declare-fun e!41699 () Bool)

(assert (=> d!13189 e!41699))

(declare-fun res!34759 () Bool)

(assert (=> d!13189 (=> res!34759 e!41699)))

(declare-fun lt!26749 () Bool)

(assert (=> d!13189 (= res!34759 (not lt!26749))))

(declare-fun lt!26752 () Bool)

(assert (=> d!13189 (= lt!26749 lt!26752)))

(declare-fun lt!26750 () Unit!1689)

(declare-fun e!41698 () Unit!1689)

(assert (=> d!13189 (= lt!26750 e!41698)))

(declare-fun c!8633 () Bool)

(assert (=> d!13189 (= c!8633 lt!26752)))

(assert (=> d!13189 (= lt!26752 (containsKey!129 (toList!710 lt!26286) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13189 (= (contains!700 lt!26286 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26749)))

(declare-fun b!63590 () Bool)

(declare-fun lt!26751 () Unit!1689)

(assert (=> b!63590 (= e!41698 lt!26751)))

(assert (=> b!63590 (= lt!26751 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26286) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63590 (isDefined!79 (getValueByKey!125 (toList!710 lt!26286) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63591 () Bool)

(declare-fun Unit!1743 () Unit!1689)

(assert (=> b!63591 (= e!41698 Unit!1743)))

(declare-fun b!63592 () Bool)

(assert (=> b!63592 (= e!41699 (isDefined!79 (getValueByKey!125 (toList!710 lt!26286) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13189 c!8633) b!63590))

(assert (= (and d!13189 (not c!8633)) b!63591))

(assert (= (and d!13189 (not res!34759)) b!63592))

(declare-fun m!57775 () Bool)

(assert (=> d!13189 m!57775))

(declare-fun m!57777 () Bool)

(assert (=> b!63590 m!57777))

(assert (=> b!63590 m!56989))

(assert (=> b!63590 m!56989))

(declare-fun m!57779 () Bool)

(assert (=> b!63590 m!57779))

(assert (=> b!63592 m!56989))

(assert (=> b!63592 m!56989))

(assert (=> b!63592 m!57779))

(assert (=> bm!4947 d!13189))

(declare-fun d!13191 () Bool)

(declare-fun c!8634 () Bool)

(assert (=> d!13191 (= c!8634 (and ((_ is Cons!1459) (toList!710 lt!26131)) (= (_1!1043 (h!2042 (toList!710 lt!26131))) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun e!41700 () Option!131)

(assert (=> d!13191 (= (getValueByKey!125 (toList!710 lt!26131) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) e!41700)))

(declare-fun b!63595 () Bool)

(declare-fun e!41701 () Option!131)

(assert (=> b!63595 (= e!41701 (getValueByKey!125 (t!4861 (toList!710 lt!26131)) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63596 () Bool)

(assert (=> b!63596 (= e!41701 None!129)))

(declare-fun b!63594 () Bool)

(assert (=> b!63594 (= e!41700 e!41701)))

(declare-fun c!8635 () Bool)

(assert (=> b!63594 (= c!8635 (and ((_ is Cons!1459) (toList!710 lt!26131)) (not (= (_1!1043 (h!2042 (toList!710 lt!26131))) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun b!63593 () Bool)

(assert (=> b!63593 (= e!41700 (Some!130 (_2!1043 (h!2042 (toList!710 lt!26131)))))))

(assert (= (and d!13191 c!8634) b!63593))

(assert (= (and d!13191 (not c!8634)) b!63594))

(assert (= (and b!63594 c!8635) b!63595))

(assert (= (and b!63594 (not c!8635)) b!63596))

(declare-fun m!57781 () Bool)

(assert (=> b!63595 m!57781))

(assert (=> b!62703 d!13191))

(declare-fun d!13193 () Bool)

(declare-fun e!41702 () Bool)

(assert (=> d!13193 e!41702))

(declare-fun res!34760 () Bool)

(assert (=> d!13193 (=> (not res!34760) (not e!41702))))

(declare-fun lt!26753 () ListLongMap!1389)

(assert (=> d!13193 (= res!34760 (contains!700 lt!26753 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26756 () List!1463)

(assert (=> d!13193 (= lt!26753 (ListLongMap!1390 lt!26756))))

(declare-fun lt!26755 () Unit!1689)

(declare-fun lt!26754 () Unit!1689)

(assert (=> d!13193 (= lt!26755 lt!26754)))

(assert (=> d!13193 (= (getValueByKey!125 lt!26756 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13193 (= lt!26754 (lemmaContainsTupThenGetReturnValue!44 lt!26756 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13193 (= lt!26756 (insertStrictlySorted!46 (toList!710 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13193 (= (+!83 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26753)))

(declare-fun b!63597 () Bool)

(declare-fun res!34761 () Bool)

(assert (=> b!63597 (=> (not res!34761) (not e!41702))))

(assert (=> b!63597 (= res!34761 (= (getValueByKey!125 (toList!710 lt!26753) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63598 () Bool)

(assert (=> b!63598 (= e!41702 (contains!703 (toList!710 lt!26753) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13193 res!34760) b!63597))

(assert (= (and b!63597 res!34761) b!63598))

(declare-fun m!57783 () Bool)

(assert (=> d!13193 m!57783))

(declare-fun m!57785 () Bool)

(assert (=> d!13193 m!57785))

(declare-fun m!57787 () Bool)

(assert (=> d!13193 m!57787))

(declare-fun m!57789 () Bool)

(assert (=> d!13193 m!57789))

(declare-fun m!57791 () Bool)

(assert (=> b!63597 m!57791))

(declare-fun m!57793 () Bool)

(assert (=> b!63598 m!57793))

(assert (=> d!12765 d!13193))

(declare-fun d!13195 () Bool)

(assert (=> d!13195 (= (+!83 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(assert (=> d!13195 true))

(declare-fun _$8!52 () Unit!1689)

(assert (=> d!13195 (= (choose!346 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)) _$8!52)))

(declare-fun bs!2766 () Bool)

(assert (= bs!2766 d!13195))

(assert (=> bs!2766 m!55787))

(assert (=> bs!2766 m!55787))

(assert (=> bs!2766 m!56491))

(assert (=> bs!2766 m!55731))

(assert (=> bs!2766 m!56489))

(assert (=> d!12765 d!13195))

(assert (=> d!12765 d!12727))

(declare-fun b!63599 () Bool)

(declare-fun c!8636 () Bool)

(assert (=> b!63599 (= c!8636 (and (not (= (bvand lt!26019 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!26019 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41712 () ListLongMap!1389)

(declare-fun e!41705 () ListLongMap!1389)

(assert (=> b!63599 (= e!41712 e!41705)))

(declare-fun bm!5041 () Bool)

(declare-fun call!5047 () ListLongMap!1389)

(declare-fun call!5044 () ListLongMap!1389)

(assert (=> bm!5041 (= call!5047 call!5044)))

(declare-fun b!63600 () Bool)

(declare-fun e!41713 () Bool)

(declare-fun e!41715 () Bool)

(assert (=> b!63600 (= e!41713 e!41715)))

(declare-fun c!8639 () Bool)

(assert (=> b!63600 (= c!8639 (not (= (bvand lt!26019 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63601 () Bool)

(declare-fun e!41704 () Bool)

(declare-fun e!41708 () Bool)

(assert (=> b!63601 (= e!41704 e!41708)))

(declare-fun res!34764 () Bool)

(assert (=> b!63601 (=> (not res!34764) (not e!41708))))

(declare-fun lt!26773 () ListLongMap!1389)

(assert (=> b!63601 (= res!34764 (contains!700 lt!26773 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63601 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63602 () Bool)

(assert (=> b!63602 (= e!41708 (= (apply!68 lt!26773 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63602 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_values!2071 newMap!16))))))

(assert (=> b!63602 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63603 () Bool)

(declare-fun e!41707 () Bool)

(declare-fun e!41703 () Bool)

(assert (=> b!63603 (= e!41707 e!41703)))

(declare-fun res!34765 () Bool)

(declare-fun call!5043 () Bool)

(assert (=> b!63603 (= res!34765 call!5043)))

(assert (=> b!63603 (=> (not res!34765) (not e!41703))))

(declare-fun bm!5042 () Bool)

(declare-fun call!5046 () ListLongMap!1389)

(assert (=> bm!5042 (= call!5044 call!5046)))

(declare-fun e!41706 () Bool)

(declare-fun b!63604 () Bool)

(assert (=> b!63604 (= e!41706 (= (apply!68 lt!26773 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63605 () Bool)

(declare-fun res!34770 () Bool)

(assert (=> b!63605 (=> (not res!34770) (not e!41713))))

(assert (=> b!63605 (= res!34770 e!41704)))

(declare-fun res!34769 () Bool)

(assert (=> b!63605 (=> res!34769 e!41704)))

(declare-fun e!41709 () Bool)

(assert (=> b!63605 (= res!34769 (not e!41709))))

(declare-fun res!34763 () Bool)

(assert (=> b!63605 (=> (not res!34763) (not e!41709))))

(assert (=> b!63605 (= res!34763 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63606 () Bool)

(declare-fun e!41714 () Unit!1689)

(declare-fun Unit!1744 () Unit!1689)

(assert (=> b!63606 (= e!41714 Unit!1744)))

(declare-fun b!63607 () Bool)

(declare-fun call!5049 () Bool)

(assert (=> b!63607 (= e!41715 (not call!5049))))

(declare-fun e!41711 () ListLongMap!1389)

(declare-fun call!5048 () ListLongMap!1389)

(declare-fun b!63608 () Bool)

(assert (=> b!63608 (= e!41711 (+!83 call!5048 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63609 () Bool)

(declare-fun res!34762 () Bool)

(assert (=> b!63609 (=> (not res!34762) (not e!41713))))

(assert (=> b!63609 (= res!34762 e!41707)))

(declare-fun c!8640 () Bool)

(assert (=> b!63609 (= c!8640 (not (= (bvand lt!26019 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63610 () Bool)

(assert (=> b!63610 (= e!41703 (= (apply!68 lt!26773 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!63611 () Bool)

(declare-fun lt!26774 () Unit!1689)

(assert (=> b!63611 (= e!41714 lt!26774)))

(declare-fun lt!26765 () ListLongMap!1389)

(assert (=> b!63611 (= lt!26765 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26778 () (_ BitVec 64))

(assert (=> b!63611 (= lt!26778 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26775 () (_ BitVec 64))

(assert (=> b!63611 (= lt!26775 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26762 () Unit!1689)

(assert (=> b!63611 (= lt!26762 (addStillContains!44 lt!26765 lt!26778 (zeroValue!2000 newMap!16) lt!26775))))

(assert (=> b!63611 (contains!700 (+!83 lt!26765 (tuple2!2067 lt!26778 (zeroValue!2000 newMap!16))) lt!26775)))

(declare-fun lt!26776 () Unit!1689)

(assert (=> b!63611 (= lt!26776 lt!26762)))

(declare-fun lt!26760 () ListLongMap!1389)

(assert (=> b!63611 (= lt!26760 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26766 () (_ BitVec 64))

(assert (=> b!63611 (= lt!26766 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26759 () (_ BitVec 64))

(assert (=> b!63611 (= lt!26759 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26758 () Unit!1689)

(assert (=> b!63611 (= lt!26758 (addApplyDifferent!44 lt!26760 lt!26766 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26759))))

(assert (=> b!63611 (= (apply!68 (+!83 lt!26760 (tuple2!2067 lt!26766 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26759) (apply!68 lt!26760 lt!26759))))

(declare-fun lt!26761 () Unit!1689)

(assert (=> b!63611 (= lt!26761 lt!26758)))

(declare-fun lt!26767 () ListLongMap!1389)

(assert (=> b!63611 (= lt!26767 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26777 () (_ BitVec 64))

(assert (=> b!63611 (= lt!26777 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26770 () (_ BitVec 64))

(assert (=> b!63611 (= lt!26770 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26768 () Unit!1689)

(assert (=> b!63611 (= lt!26768 (addApplyDifferent!44 lt!26767 lt!26777 (zeroValue!2000 newMap!16) lt!26770))))

(assert (=> b!63611 (= (apply!68 (+!83 lt!26767 (tuple2!2067 lt!26777 (zeroValue!2000 newMap!16))) lt!26770) (apply!68 lt!26767 lt!26770))))

(declare-fun lt!26771 () Unit!1689)

(assert (=> b!63611 (= lt!26771 lt!26768)))

(declare-fun lt!26763 () ListLongMap!1389)

(assert (=> b!63611 (= lt!26763 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26769 () (_ BitVec 64))

(assert (=> b!63611 (= lt!26769 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26772 () (_ BitVec 64))

(assert (=> b!63611 (= lt!26772 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63611 (= lt!26774 (addApplyDifferent!44 lt!26763 lt!26769 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26772))))

(assert (=> b!63611 (= (apply!68 (+!83 lt!26763 (tuple2!2067 lt!26769 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26772) (apply!68 lt!26763 lt!26772))))

(declare-fun b!63612 () Bool)

(assert (=> b!63612 (= e!41709 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!5043 () Bool)

(declare-fun call!5045 () ListLongMap!1389)

(assert (=> bm!5043 (= call!5045 call!5048)))

(declare-fun b!63613 () Bool)

(assert (=> b!63613 (= e!41715 e!41706)))

(declare-fun res!34766 () Bool)

(assert (=> b!63613 (= res!34766 call!5049)))

(assert (=> b!63613 (=> (not res!34766) (not e!41706))))

(declare-fun bm!5044 () Bool)

(assert (=> bm!5044 (= call!5046 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun c!8638 () Bool)

(declare-fun bm!5045 () Bool)

(declare-fun c!8641 () Bool)

(assert (=> bm!5045 (= call!5048 (+!83 (ite c!8638 call!5046 (ite c!8641 call!5044 call!5047)) (ite (or c!8638 c!8641) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63614 () Bool)

(assert (=> b!63614 (= e!41711 e!41712)))

(assert (=> b!63614 (= c!8641 (and (not (= (bvand lt!26019 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!26019 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!13197 () Bool)

(assert (=> d!13197 e!41713))

(declare-fun res!34767 () Bool)

(assert (=> d!13197 (=> (not res!34767) (not e!41713))))

(assert (=> d!13197 (= res!34767 (or (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))))

(declare-fun lt!26757 () ListLongMap!1389)

(assert (=> d!13197 (= lt!26773 lt!26757)))

(declare-fun lt!26764 () Unit!1689)

(assert (=> d!13197 (= lt!26764 e!41714)))

(declare-fun c!8637 () Bool)

(declare-fun e!41710 () Bool)

(assert (=> d!13197 (= c!8637 e!41710)))

(declare-fun res!34768 () Bool)

(assert (=> d!13197 (=> (not res!34768) (not e!41710))))

(assert (=> d!13197 (= res!34768 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!13197 (= lt!26757 e!41711)))

(assert (=> d!13197 (= c!8638 (and (not (= (bvand lt!26019 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!26019 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13197 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13197 (= (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26019 (zeroValue!2000 newMap!16) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26773)))

(declare-fun bm!5040 () Bool)

(assert (=> bm!5040 (= call!5049 (contains!700 lt!26773 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63615 () Bool)

(assert (=> b!63615 (= e!41712 call!5045)))

(declare-fun b!63616 () Bool)

(assert (=> b!63616 (= e!41705 call!5045)))

(declare-fun bm!5046 () Bool)

(assert (=> bm!5046 (= call!5043 (contains!700 lt!26773 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63617 () Bool)

(assert (=> b!63617 (= e!41705 call!5047)))

(declare-fun b!63618 () Bool)

(assert (=> b!63618 (= e!41707 (not call!5043))))

(declare-fun b!63619 () Bool)

(assert (=> b!63619 (= e!41710 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!13197 c!8638) b!63608))

(assert (= (and d!13197 (not c!8638)) b!63614))

(assert (= (and b!63614 c!8641) b!63615))

(assert (= (and b!63614 (not c!8641)) b!63599))

(assert (= (and b!63599 c!8636) b!63616))

(assert (= (and b!63599 (not c!8636)) b!63617))

(assert (= (or b!63616 b!63617) bm!5041))

(assert (= (or b!63615 bm!5041) bm!5042))

(assert (= (or b!63615 b!63616) bm!5043))

(assert (= (or b!63608 bm!5042) bm!5044))

(assert (= (or b!63608 bm!5043) bm!5045))

(assert (= (and d!13197 res!34768) b!63619))

(assert (= (and d!13197 c!8637) b!63611))

(assert (= (and d!13197 (not c!8637)) b!63606))

(assert (= (and d!13197 res!34767) b!63605))

(assert (= (and b!63605 res!34763) b!63612))

(assert (= (and b!63605 (not res!34769)) b!63601))

(assert (= (and b!63601 res!34764) b!63602))

(assert (= (and b!63605 res!34770) b!63609))

(assert (= (and b!63609 c!8640) b!63603))

(assert (= (and b!63609 (not c!8640)) b!63618))

(assert (= (and b!63603 res!34765) b!63610))

(assert (= (or b!63603 b!63618) bm!5046))

(assert (= (and b!63609 res!34762) b!63600))

(assert (= (and b!63600 c!8639) b!63613))

(assert (= (and b!63600 (not c!8639)) b!63607))

(assert (= (and b!63613 res!34766) b!63604))

(assert (= (or b!63613 b!63607) bm!5040))

(declare-fun b_lambda!2839 () Bool)

(assert (=> (not b_lambda!2839) (not b!63602)))

(assert (=> b!63602 t!4870))

(declare-fun b_and!3885 () Bool)

(assert (= b_and!3881 (and (=> t!4870 result!2463) b_and!3885)))

(assert (=> b!63602 t!4872))

(declare-fun b_and!3887 () Bool)

(assert (= b_and!3883 (and (=> t!4872 result!2465) b_and!3887)))

(declare-fun m!57795 () Bool)

(assert (=> b!63608 m!57795))

(declare-fun m!57797 () Bool)

(assert (=> b!63610 m!57797))

(declare-fun m!57799 () Bool)

(assert (=> bm!5045 m!57799))

(assert (=> b!63619 m!56007))

(assert (=> b!63619 m!56007))

(assert (=> b!63619 m!56009))

(assert (=> bm!5044 m!55731))

(declare-fun m!57801 () Bool)

(assert (=> bm!5044 m!57801))

(assert (=> b!63612 m!56007))

(assert (=> b!63612 m!56007))

(assert (=> b!63612 m!56009))

(assert (=> b!63601 m!56007))

(assert (=> b!63601 m!56007))

(declare-fun m!57803 () Bool)

(assert (=> b!63601 m!57803))

(declare-fun m!57805 () Bool)

(assert (=> bm!5040 m!57805))

(assert (=> b!63611 m!56007))

(declare-fun m!57807 () Bool)

(assert (=> b!63611 m!57807))

(declare-fun m!57809 () Bool)

(assert (=> b!63611 m!57809))

(declare-fun m!57811 () Bool)

(assert (=> b!63611 m!57811))

(declare-fun m!57813 () Bool)

(assert (=> b!63611 m!57813))

(declare-fun m!57815 () Bool)

(assert (=> b!63611 m!57815))

(declare-fun m!57817 () Bool)

(assert (=> b!63611 m!57817))

(declare-fun m!57819 () Bool)

(assert (=> b!63611 m!57819))

(assert (=> b!63611 m!55731))

(declare-fun m!57821 () Bool)

(assert (=> b!63611 m!57821))

(declare-fun m!57823 () Bool)

(assert (=> b!63611 m!57823))

(declare-fun m!57825 () Bool)

(assert (=> b!63611 m!57825))

(declare-fun m!57827 () Bool)

(assert (=> b!63611 m!57827))

(assert (=> b!63611 m!57813))

(assert (=> b!63611 m!55731))

(declare-fun m!57829 () Bool)

(assert (=> b!63611 m!57829))

(declare-fun m!57831 () Bool)

(assert (=> b!63611 m!57831))

(assert (=> b!63611 m!57819))

(declare-fun m!57833 () Bool)

(assert (=> b!63611 m!57833))

(assert (=> b!63611 m!57807))

(assert (=> b!63611 m!57831))

(declare-fun m!57835 () Bool)

(assert (=> b!63611 m!57835))

(assert (=> b!63611 m!55731))

(assert (=> b!63611 m!57801))

(assert (=> d!13197 m!55941))

(declare-fun m!57837 () Bool)

(assert (=> bm!5046 m!57837))

(declare-fun m!57839 () Bool)

(assert (=> b!63604 m!57839))

(assert (=> b!63602 m!56259))

(assert (=> b!63602 m!56007))

(assert (=> b!63602 m!56007))

(declare-fun m!57841 () Bool)

(assert (=> b!63602 m!57841))

(assert (=> b!63602 m!56361))

(assert (=> b!63602 m!56259))

(assert (=> b!63602 m!56363))

(assert (=> b!63602 m!56361))

(assert (=> d!12765 d!13197))

(assert (=> d!12765 d!12795))

(declare-fun d!13199 () Bool)

(assert (=> d!13199 (contains!700 (getCurrentListMap!407 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1798 (_keys!3720 newMap!16)) (index!3082 lt!26026)))))

(assert (=> d!13199 true))

(declare-fun _$16!84 () Unit!1689)

(assert (=> d!13199 (= (choose!343 (_keys!3720 newMap!16) lt!26022 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3082 lt!26026) (defaultEntry!2088 newMap!16)) _$16!84)))

(declare-fun bs!2767 () Bool)

(assert (= bs!2767 d!13199))

(assert (=> bs!2767 m!56297))

(assert (=> bs!2767 m!55921))

(assert (=> bs!2767 m!56297))

(assert (=> bs!2767 m!55921))

(assert (=> bs!2767 m!56299))

(assert (=> d!12721 d!13199))

(assert (=> d!12721 d!12795))

(assert (=> b!62874 d!12941))

(assert (=> b!62874 d!12943))

(declare-fun d!13201 () Bool)

(assert (=> d!13201 (= (apply!68 lt!26321 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1100 (getValueByKey!125 (toList!710 lt!26321) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2768 () Bool)

(assert (= bs!2768 d!13201))

(assert (=> bs!2768 m!57321))

(assert (=> bs!2768 m!57321))

(declare-fun m!57843 () Bool)

(assert (=> bs!2768 m!57843))

(assert (=> b!62862 d!13201))

(declare-fun d!13203 () Bool)

(assert (=> d!13203 (= (inRange!0 (ite c!8406 (index!3082 lt!26218) (ite c!8403 (index!3081 lt!26206) (index!3084 lt!26206))) (mask!5994 newMap!16)) (and (bvsge (ite c!8406 (index!3082 lt!26218) (ite c!8403 (index!3081 lt!26206) (index!3084 lt!26206))) #b00000000000000000000000000000000) (bvslt (ite c!8406 (index!3082 lt!26218) (ite c!8403 (index!3081 lt!26206) (index!3084 lt!26206))) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4930 d!13203))

(declare-fun d!13205 () Bool)

(declare-fun res!34771 () Bool)

(declare-fun e!41716 () Bool)

(assert (=> d!13205 (=> (not res!34771) (not e!41716))))

(assert (=> d!13205 (= res!34771 (simpleValid!43 (_2!1044 lt!26197)))))

(assert (=> d!13205 (= (valid!263 (_2!1044 lt!26197)) e!41716)))

(declare-fun b!63620 () Bool)

(declare-fun res!34772 () Bool)

(assert (=> b!63620 (=> (not res!34772) (not e!41716))))

(assert (=> b!63620 (= res!34772 (= (arrayCountValidKeys!0 (_keys!3720 (_2!1044 lt!26197)) #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26197)))) (_size!367 (_2!1044 lt!26197))))))

(declare-fun b!63621 () Bool)

(declare-fun res!34773 () Bool)

(assert (=> b!63621 (=> (not res!34773) (not e!41716))))

(assert (=> b!63621 (= res!34773 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 (_2!1044 lt!26197)) (mask!5994 (_2!1044 lt!26197))))))

(declare-fun b!63622 () Bool)

(assert (=> b!63622 (= e!41716 (arrayNoDuplicates!0 (_keys!3720 (_2!1044 lt!26197)) #b00000000000000000000000000000000 Nil!1461))))

(assert (= (and d!13205 res!34771) b!63620))

(assert (= (and b!63620 res!34772) b!63621))

(assert (= (and b!63621 res!34773) b!63622))

(declare-fun m!57845 () Bool)

(assert (=> d!13205 m!57845))

(declare-fun m!57847 () Bool)

(assert (=> b!63620 m!57847))

(declare-fun m!57849 () Bool)

(assert (=> b!63621 m!57849))

(declare-fun m!57851 () Bool)

(assert (=> b!63622 m!57851))

(assert (=> b!62745 d!13205))

(declare-fun b!63623 () Bool)

(declare-fun e!41717 () Bool)

(declare-fun call!5050 () Bool)

(assert (=> b!63623 (= e!41717 call!5050)))

(declare-fun bm!5047 () Bool)

(assert (=> bm!5047 (= call!5050 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3720 (_2!1044 lt!26030)) (mask!5994 (_2!1044 lt!26030))))))

(declare-fun b!63625 () Bool)

(declare-fun e!41719 () Bool)

(assert (=> b!63625 (= e!41717 e!41719)))

(declare-fun lt!26780 () (_ BitVec 64))

(assert (=> b!63625 (= lt!26780 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000))))

(declare-fun lt!26779 () Unit!1689)

(assert (=> b!63625 (= lt!26779 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3720 (_2!1044 lt!26030)) lt!26780 #b00000000000000000000000000000000))))

(assert (=> b!63625 (arrayContainsKey!0 (_keys!3720 (_2!1044 lt!26030)) lt!26780 #b00000000000000000000000000000000)))

(declare-fun lt!26781 () Unit!1689)

(assert (=> b!63625 (= lt!26781 lt!26779)))

(declare-fun res!34774 () Bool)

(assert (=> b!63625 (= res!34774 (= (seekEntryOrOpen!0 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000) (_keys!3720 (_2!1044 lt!26030)) (mask!5994 (_2!1044 lt!26030))) (Found!239 #b00000000000000000000000000000000)))))

(assert (=> b!63625 (=> (not res!34774) (not e!41719))))

(declare-fun b!63626 () Bool)

(declare-fun e!41718 () Bool)

(assert (=> b!63626 (= e!41718 e!41717)))

(declare-fun c!8642 () Bool)

(assert (=> b!63626 (= c!8642 (validKeyInArray!0 (select (arr!1798 (_keys!3720 (_2!1044 lt!26030))) #b00000000000000000000000000000000)))))

(declare-fun b!63624 () Bool)

(assert (=> b!63624 (= e!41719 call!5050)))

(declare-fun d!13207 () Bool)

(declare-fun res!34775 () Bool)

(assert (=> d!13207 (=> res!34775 e!41718)))

(assert (=> d!13207 (= res!34775 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 (_2!1044 lt!26030)))))))

(assert (=> d!13207 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 (_2!1044 lt!26030)) (mask!5994 (_2!1044 lt!26030))) e!41718)))

(assert (= (and d!13207 (not res!34775)) b!63626))

(assert (= (and b!63626 c!8642) b!63625))

(assert (= (and b!63626 (not c!8642)) b!63623))

(assert (= (and b!63625 res!34774) b!63624))

(assert (= (or b!63624 b!63623) bm!5047))

(declare-fun m!57853 () Bool)

(assert (=> bm!5047 m!57853))

(assert (=> b!63625 m!56509))

(declare-fun m!57855 () Bool)

(assert (=> b!63625 m!57855))

(declare-fun m!57857 () Bool)

(assert (=> b!63625 m!57857))

(assert (=> b!63625 m!56509))

(declare-fun m!57859 () Bool)

(assert (=> b!63625 m!57859))

(assert (=> b!63626 m!56509))

(assert (=> b!63626 m!56509))

(assert (=> b!63626 m!56511))

(assert (=> b!62619 d!13207))

(assert (=> bm!4938 d!13105))

(declare-fun d!13209 () Bool)

(declare-fun e!41721 () Bool)

(assert (=> d!13209 e!41721))

(declare-fun res!34776 () Bool)

(assert (=> d!13209 (=> res!34776 e!41721)))

(declare-fun lt!26782 () Bool)

(assert (=> d!13209 (= res!34776 (not lt!26782))))

(declare-fun lt!26785 () Bool)

(assert (=> d!13209 (= lt!26782 lt!26785)))

(declare-fun lt!26783 () Unit!1689)

(declare-fun e!41720 () Unit!1689)

(assert (=> d!13209 (= lt!26783 e!41720)))

(declare-fun c!8643 () Bool)

(assert (=> d!13209 (= c!8643 lt!26785)))

(assert (=> d!13209 (= lt!26785 (containsKey!129 (toList!710 lt!26123) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!13209 (= (contains!700 lt!26123 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26782)))

(declare-fun b!63627 () Bool)

(declare-fun lt!26784 () Unit!1689)

(assert (=> b!63627 (= e!41720 lt!26784)))

(assert (=> b!63627 (= lt!26784 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26123) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> b!63627 (isDefined!79 (getValueByKey!125 (toList!710 lt!26123) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63628 () Bool)

(declare-fun Unit!1745 () Unit!1689)

(assert (=> b!63628 (= e!41720 Unit!1745)))

(declare-fun b!63629 () Bool)

(assert (=> b!63629 (= e!41721 (isDefined!79 (getValueByKey!125 (toList!710 lt!26123) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13209 c!8643) b!63627))

(assert (= (and d!13209 (not c!8643)) b!63628))

(assert (= (and d!13209 (not res!34776)) b!63629))

(declare-fun m!57861 () Bool)

(assert (=> d!13209 m!57861))

(declare-fun m!57863 () Bool)

(assert (=> b!63627 m!57863))

(assert (=> b!63627 m!56105))

(assert (=> b!63627 m!56105))

(declare-fun m!57865 () Bool)

(assert (=> b!63627 m!57865))

(assert (=> b!63629 m!56105))

(assert (=> b!63629 m!56105))

(assert (=> b!63629 m!57865))

(assert (=> d!12689 d!13209))

(declare-fun c!8644 () Bool)

(declare-fun d!13211 () Bool)

(assert (=> d!13211 (= c!8644 (and ((_ is Cons!1459) lt!26126) (= (_1!1043 (h!2042 lt!26126)) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun e!41722 () Option!131)

(assert (=> d!13211 (= (getValueByKey!125 lt!26126 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) e!41722)))

(declare-fun e!41723 () Option!131)

(declare-fun b!63632 () Bool)

(assert (=> b!63632 (= e!41723 (getValueByKey!125 (t!4861 lt!26126) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63633 () Bool)

(assert (=> b!63633 (= e!41723 None!129)))

(declare-fun b!63631 () Bool)

(assert (=> b!63631 (= e!41722 e!41723)))

(declare-fun c!8645 () Bool)

(assert (=> b!63631 (= c!8645 (and ((_ is Cons!1459) lt!26126) (not (= (_1!1043 (h!2042 lt!26126)) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun b!63630 () Bool)

(assert (=> b!63630 (= e!41722 (Some!130 (_2!1043 (h!2042 lt!26126))))))

(assert (= (and d!13211 c!8644) b!63630))

(assert (= (and d!13211 (not c!8644)) b!63631))

(assert (= (and b!63631 c!8645) b!63632))

(assert (= (and b!63631 (not c!8645)) b!63633))

(declare-fun m!57867 () Bool)

(assert (=> b!63632 m!57867))

(assert (=> d!12689 d!13211))

(declare-fun d!13213 () Bool)

(assert (=> d!13213 (= (getValueByKey!125 lt!26126 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun lt!26786 () Unit!1689)

(assert (=> d!13213 (= lt!26786 (choose!348 lt!26126 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun e!41724 () Bool)

(assert (=> d!13213 e!41724))

(declare-fun res!34777 () Bool)

(assert (=> d!13213 (=> (not res!34777) (not e!41724))))

(assert (=> d!13213 (= res!34777 (isStrictlySorted!281 lt!26126))))

(assert (=> d!13213 (= (lemmaContainsTupThenGetReturnValue!44 lt!26126 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26786)))

(declare-fun b!63634 () Bool)

(declare-fun res!34778 () Bool)

(assert (=> b!63634 (=> (not res!34778) (not e!41724))))

(assert (=> b!63634 (= res!34778 (containsKey!129 lt!26126 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63635 () Bool)

(assert (=> b!63635 (= e!41724 (contains!703 lt!26126 (tuple2!2067 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13213 res!34777) b!63634))

(assert (= (and b!63634 res!34778) b!63635))

(assert (=> d!13213 m!56099))

(declare-fun m!57869 () Bool)

(assert (=> d!13213 m!57869))

(declare-fun m!57871 () Bool)

(assert (=> d!13213 m!57871))

(declare-fun m!57873 () Bool)

(assert (=> b!63634 m!57873))

(declare-fun m!57875 () Bool)

(assert (=> b!63635 m!57875))

(assert (=> d!12689 d!13213))

(declare-fun b!63636 () Bool)

(declare-fun e!41726 () List!1463)

(declare-fun call!5053 () List!1463)

(assert (=> b!63636 (= e!41726 call!5053)))

(declare-fun bm!5048 () Bool)

(declare-fun c!8649 () Bool)

(declare-fun e!41725 () List!1463)

(assert (=> bm!5048 (= call!5053 ($colon$colon!61 e!41725 (ite c!8649 (h!2042 (toList!710 lt!25923)) (tuple2!2067 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun c!8646 () Bool)

(assert (=> bm!5048 (= c!8646 c!8649)))

(declare-fun b!63637 () Bool)

(declare-fun e!41727 () List!1463)

(declare-fun call!5052 () List!1463)

(assert (=> b!63637 (= e!41727 call!5052)))

(declare-fun bm!5049 () Bool)

(declare-fun call!5051 () List!1463)

(assert (=> bm!5049 (= call!5052 call!5051)))

(declare-fun b!63638 () Bool)

(declare-fun e!41728 () List!1463)

(assert (=> b!63638 (= e!41726 e!41728)))

(declare-fun c!8647 () Bool)

(assert (=> b!63638 (= c!8647 (and ((_ is Cons!1459) (toList!710 lt!25923)) (= (_1!1043 (h!2042 (toList!710 lt!25923))) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun c!8648 () Bool)

(declare-fun b!63640 () Bool)

(assert (=> b!63640 (= e!41725 (ite c!8647 (t!4861 (toList!710 lt!25923)) (ite c!8648 (Cons!1459 (h!2042 (toList!710 lt!25923)) (t!4861 (toList!710 lt!25923))) Nil!1460)))))

(declare-fun b!63641 () Bool)

(assert (=> b!63641 (= e!41727 call!5052)))

(declare-fun bm!5050 () Bool)

(assert (=> bm!5050 (= call!5051 call!5053)))

(declare-fun b!63642 () Bool)

(assert (=> b!63642 (= e!41725 (insertStrictlySorted!46 (t!4861 (toList!710 lt!25923)) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63643 () Bool)

(assert (=> b!63643 (= c!8648 (and ((_ is Cons!1459) (toList!710 lt!25923)) (bvsgt (_1!1043 (h!2042 (toList!710 lt!25923))) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> b!63643 (= e!41728 e!41727)))

(declare-fun b!63639 () Bool)

(declare-fun res!34780 () Bool)

(declare-fun e!41729 () Bool)

(assert (=> b!63639 (=> (not res!34780) (not e!41729))))

(declare-fun lt!26787 () List!1463)

(assert (=> b!63639 (= res!34780 (containsKey!129 lt!26787 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun d!13215 () Bool)

(assert (=> d!13215 e!41729))

(declare-fun res!34779 () Bool)

(assert (=> d!13215 (=> (not res!34779) (not e!41729))))

(assert (=> d!13215 (= res!34779 (isStrictlySorted!281 lt!26787))))

(assert (=> d!13215 (= lt!26787 e!41726)))

(assert (=> d!13215 (= c!8649 (and ((_ is Cons!1459) (toList!710 lt!25923)) (bvslt (_1!1043 (h!2042 (toList!710 lt!25923))) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> d!13215 (isStrictlySorted!281 (toList!710 lt!25923))))

(assert (=> d!13215 (= (insertStrictlySorted!46 (toList!710 lt!25923) (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26787)))

(declare-fun b!63644 () Bool)

(assert (=> b!63644 (= e!41728 call!5051)))

(declare-fun b!63645 () Bool)

(assert (=> b!63645 (= e!41729 (contains!703 lt!26787 (tuple2!2067 (_1!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13215 c!8649) b!63636))

(assert (= (and d!13215 (not c!8649)) b!63638))

(assert (= (and b!63638 c!8647) b!63644))

(assert (= (and b!63638 (not c!8647)) b!63643))

(assert (= (and b!63643 c!8648) b!63641))

(assert (= (and b!63643 (not c!8648)) b!63637))

(assert (= (or b!63641 b!63637) bm!5049))

(assert (= (or b!63644 bm!5049) bm!5050))

(assert (= (or b!63636 bm!5050) bm!5048))

(assert (= (and bm!5048 c!8646) b!63642))

(assert (= (and bm!5048 (not c!8646)) b!63640))

(assert (= (and d!13215 res!34779) b!63639))

(assert (= (and b!63639 res!34780) b!63645))

(declare-fun m!57877 () Bool)

(assert (=> b!63645 m!57877))

(declare-fun m!57879 () Bool)

(assert (=> d!13215 m!57879))

(declare-fun m!57881 () Bool)

(assert (=> d!13215 m!57881))

(declare-fun m!57883 () Bool)

(assert (=> b!63642 m!57883))

(declare-fun m!57885 () Bool)

(assert (=> b!63639 m!57885))

(declare-fun m!57887 () Bool)

(assert (=> bm!5048 m!57887))

(assert (=> d!12689 d!13215))

(assert (=> b!62612 d!12655))

(assert (=> b!62843 d!12775))

(assert (=> d!12661 d!12619))

(assert (=> b!62846 d!12933))

(assert (=> b!62846 d!12891))

(declare-fun d!13217 () Bool)

(assert (=> d!13217 (= (get!1100 (getValueByKey!125 (toList!710 lt!25919) lt!25928)) (v!2423 (getValueByKey!125 (toList!710 lt!25919) lt!25928)))))

(assert (=> d!12695 d!13217))

(declare-fun d!13219 () Bool)

(declare-fun c!8650 () Bool)

(assert (=> d!13219 (= c!8650 (and ((_ is Cons!1459) (toList!710 lt!25919)) (= (_1!1043 (h!2042 (toList!710 lt!25919))) lt!25928)))))

(declare-fun e!41730 () Option!131)

(assert (=> d!13219 (= (getValueByKey!125 (toList!710 lt!25919) lt!25928) e!41730)))

(declare-fun b!63648 () Bool)

(declare-fun e!41731 () Option!131)

(assert (=> b!63648 (= e!41731 (getValueByKey!125 (t!4861 (toList!710 lt!25919)) lt!25928))))

(declare-fun b!63649 () Bool)

(assert (=> b!63649 (= e!41731 None!129)))

(declare-fun b!63647 () Bool)

(assert (=> b!63647 (= e!41730 e!41731)))

(declare-fun c!8651 () Bool)

(assert (=> b!63647 (= c!8651 (and ((_ is Cons!1459) (toList!710 lt!25919)) (not (= (_1!1043 (h!2042 (toList!710 lt!25919))) lt!25928))))))

(declare-fun b!63646 () Bool)

(assert (=> b!63646 (= e!41730 (Some!130 (_2!1043 (h!2042 (toList!710 lt!25919)))))))

(assert (= (and d!13219 c!8650) b!63646))

(assert (= (and d!13219 (not c!8650)) b!63647))

(assert (= (and b!63647 c!8651) b!63648))

(assert (= (and b!63647 (not c!8651)) b!63649))

(declare-fun m!57889 () Bool)

(assert (=> b!63648 m!57889))

(assert (=> d!12695 d!13219))

(declare-fun b!63650 () Bool)

(declare-fun e!41734 () Bool)

(declare-fun lt!26788 () ListLongMap!1389)

(assert (=> b!63650 (= e!41734 (isEmpty!304 lt!26788))))

(declare-fun d!13221 () Bool)

(declare-fun e!41737 () Bool)

(assert (=> d!13221 e!41737))

(declare-fun res!34784 () Bool)

(assert (=> d!13221 (=> (not res!34784) (not e!41737))))

(assert (=> d!13221 (= res!34784 (not (contains!700 lt!26788 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!41736 () ListLongMap!1389)

(assert (=> d!13221 (= lt!26788 e!41736)))

(declare-fun c!8655 () Bool)

(assert (=> d!13221 (= c!8655 (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!13221 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13221 (= (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26788)))

(declare-fun b!63651 () Bool)

(assert (=> b!63651 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> b!63651 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))))))))

(declare-fun e!41738 () Bool)

(assert (=> b!63651 (= e!41738 (= (apply!68 lt!26788 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63652 () Bool)

(declare-fun e!41733 () ListLongMap!1389)

(assert (=> b!63652 (= e!41736 e!41733)))

(declare-fun c!8654 () Bool)

(assert (=> b!63652 (= c!8654 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63653 () Bool)

(declare-fun call!5054 () ListLongMap!1389)

(assert (=> b!63653 (= e!41733 call!5054)))

(declare-fun b!63654 () Bool)

(declare-fun e!41735 () Bool)

(assert (=> b!63654 (= e!41735 e!41734)))

(declare-fun c!8652 () Bool)

(assert (=> b!63654 (= c!8652 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63655 () Bool)

(assert (=> b!63655 (= e!41737 e!41735)))

(declare-fun c!8653 () Bool)

(declare-fun e!41732 () Bool)

(assert (=> b!63655 (= c!8653 e!41732)))

(declare-fun res!34781 () Bool)

(assert (=> b!63655 (=> (not res!34781) (not e!41732))))

(assert (=> b!63655 (= res!34781 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun bm!5051 () Bool)

(assert (=> bm!5051 (= call!5054 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16)))))

(declare-fun b!63656 () Bool)

(assert (=> b!63656 (= e!41736 (ListLongMap!1390 Nil!1460))))

(declare-fun b!63657 () Bool)

(assert (=> b!63657 (= e!41734 (= lt!26788 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16))))))

(declare-fun b!63658 () Bool)

(assert (=> b!63658 (= e!41735 e!41738)))

(assert (=> b!63658 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun res!34783 () Bool)

(assert (=> b!63658 (= res!34783 (contains!700 lt!26788 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63658 (=> (not res!34783) (not e!41738))))

(declare-fun b!63659 () Bool)

(assert (=> b!63659 (= e!41732 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63659 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!63660 () Bool)

(declare-fun lt!26794 () Unit!1689)

(declare-fun lt!26789 () Unit!1689)

(assert (=> b!63660 (= lt!26794 lt!26789)))

(declare-fun lt!26790 () (_ BitVec 64))

(declare-fun lt!26792 () V!2867)

(declare-fun lt!26793 () (_ BitVec 64))

(declare-fun lt!26791 () ListLongMap!1389)

(assert (=> b!63660 (not (contains!700 (+!83 lt!26791 (tuple2!2067 lt!26793 lt!26792)) lt!26790))))

(assert (=> b!63660 (= lt!26789 (addStillNotContains!19 lt!26791 lt!26793 lt!26792 lt!26790))))

(assert (=> b!63660 (= lt!26790 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63660 (= lt!26792 (get!1096 (select (arr!1799 (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63660 (= lt!26793 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63660 (= lt!26791 call!5054)))

(assert (=> b!63660 (= e!41733 (+!83 call!5054 (tuple2!2067 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (get!1096 (select (arr!1799 (ite c!8336 (_values!2071 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63661 () Bool)

(declare-fun res!34782 () Bool)

(assert (=> b!63661 (=> (not res!34782) (not e!41737))))

(assert (=> b!63661 (= res!34782 (not (contains!700 lt!26788 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13221 c!8655) b!63656))

(assert (= (and d!13221 (not c!8655)) b!63652))

(assert (= (and b!63652 c!8654) b!63660))

(assert (= (and b!63652 (not c!8654)) b!63653))

(assert (= (or b!63660 b!63653) bm!5051))

(assert (= (and d!13221 res!34784) b!63661))

(assert (= (and b!63661 res!34782) b!63655))

(assert (= (and b!63655 res!34781) b!63659))

(assert (= (and b!63655 c!8653) b!63658))

(assert (= (and b!63655 (not c!8653)) b!63654))

(assert (= (and b!63658 res!34783) b!63651))

(assert (= (and b!63654 c!8652) b!63657))

(assert (= (and b!63654 (not c!8652)) b!63650))

(declare-fun b_lambda!2841 () Bool)

(assert (=> (not b_lambda!2841) (not b!63651)))

(assert (=> b!63651 t!4870))

(declare-fun b_and!3889 () Bool)

(assert (= b_and!3885 (and (=> t!4870 result!2463) b_and!3889)))

(assert (=> b!63651 t!4872))

(declare-fun b_and!3891 () Bool)

(assert (= b_and!3887 (and (=> t!4872 result!2465) b_and!3891)))

(declare-fun b_lambda!2843 () Bool)

(assert (=> (not b_lambda!2843) (not b!63660)))

(assert (=> b!63660 t!4870))

(declare-fun b_and!3893 () Bool)

(assert (= b_and!3889 (and (=> t!4870 result!2463) b_and!3893)))

(assert (=> b!63660 t!4872))

(declare-fun b_and!3895 () Bool)

(assert (= b_and!3891 (and (=> t!4872 result!2465) b_and!3895)))

(assert (=> b!63658 m!56007))

(assert (=> b!63658 m!56007))

(declare-fun m!57891 () Bool)

(assert (=> b!63658 m!57891))

(declare-fun m!57893 () Bool)

(assert (=> b!63661 m!57893))

(declare-fun m!57895 () Bool)

(assert (=> b!63650 m!57895))

(declare-fun m!57897 () Bool)

(assert (=> bm!5051 m!57897))

(assert (=> b!63659 m!56007))

(assert (=> b!63659 m!56007))

(assert (=> b!63659 m!56009))

(assert (=> b!63652 m!56007))

(assert (=> b!63652 m!56007))

(assert (=> b!63652 m!56009))

(assert (=> b!63651 m!56439))

(assert (=> b!63651 m!56439))

(assert (=> b!63651 m!56259))

(assert (=> b!63651 m!56441))

(assert (=> b!63651 m!56007))

(declare-fun m!57899 () Bool)

(assert (=> b!63651 m!57899))

(assert (=> b!63651 m!56259))

(assert (=> b!63651 m!56007))

(declare-fun m!57901 () Bool)

(assert (=> d!13221 m!57901))

(assert (=> d!13221 m!55941))

(assert (=> b!63657 m!57897))

(declare-fun m!57903 () Bool)

(assert (=> b!63660 m!57903))

(assert (=> b!63660 m!56439))

(declare-fun m!57905 () Bool)

(assert (=> b!63660 m!57905))

(declare-fun m!57907 () Bool)

(assert (=> b!63660 m!57907))

(assert (=> b!63660 m!56439))

(assert (=> b!63660 m!56259))

(assert (=> b!63660 m!56441))

(assert (=> b!63660 m!57905))

(declare-fun m!57909 () Bool)

(assert (=> b!63660 m!57909))

(assert (=> b!63660 m!56259))

(assert (=> b!63660 m!56007))

(assert (=> bm!4955 d!13221))

(declare-fun d!13223 () Bool)

(declare-fun lt!26795 () Bool)

(assert (=> d!13223 (= lt!26795 (select (content!67 (toList!710 lt!26123)) (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun e!41740 () Bool)

(assert (=> d!13223 (= lt!26795 e!41740)))

(declare-fun res!34786 () Bool)

(assert (=> d!13223 (=> (not res!34786) (not e!41740))))

(assert (=> d!13223 (= res!34786 ((_ is Cons!1459) (toList!710 lt!26123)))))

(assert (=> d!13223 (= (contains!703 (toList!710 lt!26123) (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) lt!26795)))

(declare-fun b!63662 () Bool)

(declare-fun e!41739 () Bool)

(assert (=> b!63662 (= e!41740 e!41739)))

(declare-fun res!34785 () Bool)

(assert (=> b!63662 (=> res!34785 e!41739)))

(assert (=> b!63662 (= res!34785 (= (h!2042 (toList!710 lt!26123)) (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(declare-fun b!63663 () Bool)

(assert (=> b!63663 (= e!41739 (contains!703 (t!4861 (toList!710 lt!26123)) (tuple2!2067 lt!25933 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))

(assert (= (and d!13223 res!34786) b!63662))

(assert (= (and b!63662 (not res!34785)) b!63663))

(declare-fun m!57911 () Bool)

(assert (=> d!13223 m!57911))

(declare-fun m!57913 () Bool)

(assert (=> d!13223 m!57913))

(declare-fun m!57915 () Bool)

(assert (=> b!63663 m!57915))

(assert (=> b!62699 d!13223))

(assert (=> b!62824 d!12775))

(assert (=> b!62781 d!12989))

(assert (=> b!62781 d!12875))

(declare-fun d!13225 () Bool)

(declare-fun e!41742 () Bool)

(assert (=> d!13225 e!41742))

(declare-fun res!34787 () Bool)

(assert (=> d!13225 (=> res!34787 e!41742)))

(declare-fun lt!26796 () Bool)

(assert (=> d!13225 (= res!34787 (not lt!26796))))

(declare-fun lt!26799 () Bool)

(assert (=> d!13225 (= lt!26796 lt!26799)))

(declare-fun lt!26797 () Unit!1689)

(declare-fun e!41741 () Unit!1689)

(assert (=> d!13225 (= lt!26797 e!41741)))

(declare-fun c!8656 () Bool)

(assert (=> d!13225 (= c!8656 lt!26799)))

(assert (=> d!13225 (= lt!26799 (containsKey!129 (toList!710 lt!26131) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> d!13225 (= (contains!700 lt!26131 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26796)))

(declare-fun b!63664 () Bool)

(declare-fun lt!26798 () Unit!1689)

(assert (=> b!63664 (= e!41741 lt!26798)))

(assert (=> b!63664 (= lt!26798 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26131) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(assert (=> b!63664 (isDefined!79 (getValueByKey!125 (toList!710 lt!26131) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63665 () Bool)

(declare-fun Unit!1746 () Unit!1689)

(assert (=> b!63665 (= e!41741 Unit!1746)))

(declare-fun b!63666 () Bool)

(assert (=> b!63666 (= e!41742 (isDefined!79 (getValueByKey!125 (toList!710 lt!26131) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13225 c!8656) b!63664))

(assert (= (and d!13225 (not c!8656)) b!63665))

(assert (= (and d!13225 (not res!34787)) b!63666))

(declare-fun m!57917 () Bool)

(assert (=> d!13225 m!57917))

(declare-fun m!57919 () Bool)

(assert (=> b!63664 m!57919))

(assert (=> b!63664 m!56141))

(assert (=> b!63664 m!56141))

(declare-fun m!57921 () Bool)

(assert (=> b!63664 m!57921))

(assert (=> b!63666 m!56141))

(assert (=> b!63666 m!56141))

(assert (=> b!63666 m!57921))

(assert (=> d!12701 d!13225))

(declare-fun d!13227 () Bool)

(declare-fun c!8657 () Bool)

(assert (=> d!13227 (= c!8657 (and ((_ is Cons!1459) lt!26134) (= (_1!1043 (h!2042 lt!26134)) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun e!41743 () Option!131)

(assert (=> d!13227 (= (getValueByKey!125 lt!26134 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) e!41743)))

(declare-fun e!41744 () Option!131)

(declare-fun b!63669 () Bool)

(assert (=> b!63669 (= e!41744 (getValueByKey!125 (t!4861 lt!26134) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63670 () Bool)

(assert (=> b!63670 (= e!41744 None!129)))

(declare-fun b!63668 () Bool)

(assert (=> b!63668 (= e!41743 e!41744)))

(declare-fun c!8658 () Bool)

(assert (=> b!63668 (= c!8658 (and ((_ is Cons!1459) lt!26134) (not (= (_1!1043 (h!2042 lt!26134)) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun b!63667 () Bool)

(assert (=> b!63667 (= e!41743 (Some!130 (_2!1043 (h!2042 lt!26134))))))

(assert (= (and d!13227 c!8657) b!63667))

(assert (= (and d!13227 (not c!8657)) b!63668))

(assert (= (and b!63668 c!8658) b!63669))

(assert (= (and b!63668 (not c!8658)) b!63670))

(declare-fun m!57923 () Bool)

(assert (=> b!63669 m!57923))

(assert (=> d!12701 d!13227))

(declare-fun d!13229 () Bool)

(assert (=> d!13229 (= (getValueByKey!125 lt!26134 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) (Some!130 (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun lt!26800 () Unit!1689)

(assert (=> d!13229 (= lt!26800 (choose!348 lt!26134 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun e!41745 () Bool)

(assert (=> d!13229 e!41745))

(declare-fun res!34788 () Bool)

(assert (=> d!13229 (=> (not res!34788) (not e!41745))))

(assert (=> d!13229 (= res!34788 (isStrictlySorted!281 lt!26134))))

(assert (=> d!13229 (= (lemmaContainsTupThenGetReturnValue!44 lt!26134 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26800)))

(declare-fun b!63671 () Bool)

(declare-fun res!34789 () Bool)

(assert (=> b!63671 (=> (not res!34789) (not e!41745))))

(assert (=> b!63671 (= res!34789 (containsKey!129 lt!26134 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63672 () Bool)

(assert (=> b!63672 (= e!41745 (contains!703 lt!26134 (tuple2!2067 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13229 res!34788) b!63671))

(assert (= (and b!63671 res!34789) b!63672))

(assert (=> d!13229 m!56135))

(declare-fun m!57925 () Bool)

(assert (=> d!13229 m!57925))

(declare-fun m!57927 () Bool)

(assert (=> d!13229 m!57927))

(declare-fun m!57929 () Bool)

(assert (=> b!63671 m!57929))

(declare-fun m!57931 () Bool)

(assert (=> b!63672 m!57931))

(assert (=> d!12701 d!13229))

(declare-fun b!63673 () Bool)

(declare-fun e!41747 () List!1463)

(declare-fun call!5057 () List!1463)

(assert (=> b!63673 (= e!41747 call!5057)))

(declare-fun c!8662 () Bool)

(declare-fun e!41746 () List!1463)

(declare-fun bm!5052 () Bool)

(assert (=> bm!5052 (= call!5057 ($colon$colon!61 e!41746 (ite c!8662 (h!2042 (toList!710 lt!25921)) (tuple2!2067 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))))

(declare-fun c!8659 () Bool)

(assert (=> bm!5052 (= c!8659 c!8662)))

(declare-fun b!63674 () Bool)

(declare-fun e!41748 () List!1463)

(declare-fun call!5056 () List!1463)

(assert (=> b!63674 (= e!41748 call!5056)))

(declare-fun bm!5053 () Bool)

(declare-fun call!5055 () List!1463)

(assert (=> bm!5053 (= call!5056 call!5055)))

(declare-fun b!63675 () Bool)

(declare-fun e!41749 () List!1463)

(assert (=> b!63675 (= e!41747 e!41749)))

(declare-fun c!8660 () Bool)

(assert (=> b!63675 (= c!8660 (and ((_ is Cons!1459) (toList!710 lt!25921)) (= (_1!1043 (h!2042 (toList!710 lt!25921))) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(declare-fun b!63677 () Bool)

(declare-fun c!8661 () Bool)

(assert (=> b!63677 (= e!41746 (ite c!8660 (t!4861 (toList!710 lt!25921)) (ite c!8661 (Cons!1459 (h!2042 (toList!710 lt!25921)) (t!4861 (toList!710 lt!25921))) Nil!1460)))))

(declare-fun b!63678 () Bool)

(assert (=> b!63678 (= e!41748 call!5056)))

(declare-fun bm!5054 () Bool)

(assert (=> bm!5054 (= call!5055 call!5057)))

(declare-fun b!63679 () Bool)

(assert (=> b!63679 (= e!41746 (insertStrictlySorted!46 (t!4861 (toList!710 lt!25921)) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun b!63680 () Bool)

(assert (=> b!63680 (= c!8661 (and ((_ is Cons!1459) (toList!710 lt!25921)) (bvsgt (_1!1043 (h!2042 (toList!710 lt!25921))) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> b!63680 (= e!41749 e!41748)))

(declare-fun b!63676 () Bool)

(declare-fun res!34791 () Bool)

(declare-fun e!41750 () Bool)

(assert (=> b!63676 (=> (not res!34791) (not e!41750))))

(declare-fun lt!26801 () List!1463)

(assert (=> b!63676 (= res!34791 (containsKey!129 lt!26801 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))))

(declare-fun d!13231 () Bool)

(assert (=> d!13231 e!41750))

(declare-fun res!34790 () Bool)

(assert (=> d!13231 (=> (not res!34790) (not e!41750))))

(assert (=> d!13231 (= res!34790 (isStrictlySorted!281 lt!26801))))

(assert (=> d!13231 (= lt!26801 e!41747)))

(assert (=> d!13231 (= c!8662 (and ((_ is Cons!1459) (toList!710 lt!25921)) (bvslt (_1!1043 (h!2042 (toList!710 lt!25921))) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (=> d!13231 (isStrictlySorted!281 (toList!710 lt!25921))))

(assert (=> d!13231 (= (insertStrictlySorted!46 (toList!710 lt!25921) (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!26801)))

(declare-fun b!63681 () Bool)

(assert (=> b!63681 (= e!41749 call!5055)))

(declare-fun b!63682 () Bool)

(assert (=> b!63682 (= e!41750 (contains!703 lt!26801 (tuple2!2067 (_1!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))) (_2!1043 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))))))

(assert (= (and d!13231 c!8662) b!63673))

(assert (= (and d!13231 (not c!8662)) b!63675))

(assert (= (and b!63675 c!8660) b!63681))

(assert (= (and b!63675 (not c!8660)) b!63680))

(assert (= (and b!63680 c!8661) b!63678))

(assert (= (and b!63680 (not c!8661)) b!63674))

(assert (= (or b!63678 b!63674) bm!5053))

(assert (= (or b!63681 bm!5053) bm!5054))

(assert (= (or b!63673 bm!5054) bm!5052))

(assert (= (and bm!5052 c!8659) b!63679))

(assert (= (and bm!5052 (not c!8659)) b!63677))

(assert (= (and d!13231 res!34790) b!63676))

(assert (= (and b!63676 res!34791) b!63682))

(declare-fun m!57933 () Bool)

(assert (=> b!63682 m!57933))

(declare-fun m!57935 () Bool)

(assert (=> d!13231 m!57935))

(declare-fun m!57937 () Bool)

(assert (=> d!13231 m!57937))

(declare-fun m!57939 () Bool)

(assert (=> b!63679 m!57939))

(declare-fun m!57941 () Bool)

(assert (=> b!63676 m!57941))

(declare-fun m!57943 () Bool)

(assert (=> bm!5052 m!57943))

(assert (=> d!12701 d!13231))

(declare-fun d!13233 () Bool)

(declare-fun res!34792 () Bool)

(declare-fun e!41751 () Bool)

(assert (=> d!13233 (=> res!34792 e!41751)))

(assert (=> d!13233 (= res!34792 (and ((_ is Cons!1459) (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))) (= (_1!1043 (h!2042 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))) lt!25931)))))

(assert (=> d!13233 (= (containsKey!129 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))) lt!25931) e!41751)))

(declare-fun b!63683 () Bool)

(declare-fun e!41752 () Bool)

(assert (=> b!63683 (= e!41751 e!41752)))

(declare-fun res!34793 () Bool)

(assert (=> b!63683 (=> (not res!34793) (not e!41752))))

(assert (=> b!63683 (= res!34793 (and (or (not ((_ is Cons!1459) (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))) (bvsle (_1!1043 (h!2042 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))) lt!25931)) ((_ is Cons!1459) (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))) (bvslt (_1!1043 (h!2042 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992)))))))) lt!25931)))))

(declare-fun b!63684 () Bool)

(assert (=> b!63684 (= e!41752 (containsKey!129 (t!4861 (toList!710 (+!83 lt!25921 (tuple2!2067 lt!25934 (zeroValue!2000 (v!2419 (underlying!234 thiss!992))))))) lt!25931))))

(assert (= (and d!13233 (not res!34792)) b!63683))

(assert (= (and b!63683 res!34793) b!63684))

(declare-fun m!57945 () Bool)

(assert (=> b!63684 m!57945))

(assert (=> d!12693 d!13233))

(declare-fun b!63687 () Bool)

(declare-fun res!34796 () Bool)

(declare-fun e!41753 () Bool)

(assert (=> b!63687 (=> (not res!34796) (not e!41753))))

(assert (=> b!63687 (= res!34796 (= (size!2034 (v!2419 (underlying!234 thiss!992))) (bvadd (_size!367 (v!2419 (underlying!234 thiss!992))) (bvsdiv (bvadd (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!13235 () Bool)

(declare-fun res!34794 () Bool)

(assert (=> d!13235 (=> (not res!34794) (not e!41753))))

(assert (=> d!13235 (= res!34794 (validMask!0 (mask!5994 (v!2419 (underlying!234 thiss!992)))))))

(assert (=> d!13235 (= (simpleValid!43 (v!2419 (underlying!234 thiss!992))) e!41753)))

(declare-fun b!63688 () Bool)

(assert (=> b!63688 (= e!41753 (and (bvsge (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1967 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!367 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!63686 () Bool)

(declare-fun res!34795 () Bool)

(assert (=> b!63686 (=> (not res!34795) (not e!41753))))

(assert (=> b!63686 (= res!34795 (bvsge (size!2034 (v!2419 (underlying!234 thiss!992))) (_size!367 (v!2419 (underlying!234 thiss!992)))))))

(declare-fun b!63685 () Bool)

(declare-fun res!34797 () Bool)

(assert (=> b!63685 (=> (not res!34797) (not e!41753))))

(assert (=> b!63685 (= res!34797 (and (= (size!2031 (_values!2071 (v!2419 (underlying!234 thiss!992)))) (bvadd (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000001)) (= (size!2030 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) (size!2031 (_values!2071 (v!2419 (underlying!234 thiss!992))))) (bvsge (_size!367 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!367 (v!2419 (underlying!234 thiss!992))) (bvadd (mask!5994 (v!2419 (underlying!234 thiss!992))) #b00000000000000000000000000000001))))))

(assert (= (and d!13235 res!34794) b!63685))

(assert (= (and b!63685 res!34797) b!63686))

(assert (= (and b!63686 res!34795) b!63687))

(assert (= (and b!63687 res!34796) b!63688))

(declare-fun m!57947 () Bool)

(assert (=> b!63687 m!57947))

(assert (=> d!13235 m!55703))

(assert (=> b!63686 m!57947))

(assert (=> d!12755 d!13235))

(declare-fun d!13237 () Bool)

(declare-fun e!41754 () Bool)

(assert (=> d!13237 e!41754))

(declare-fun res!34798 () Bool)

(assert (=> d!13237 (=> (not res!34798) (not e!41754))))

(declare-fun lt!26802 () ListLongMap!1389)

(assert (=> d!13237 (= res!34798 (contains!700 lt!26802 (_1!1043 (tuple2!2067 lt!26317 (minValue!2000 newMap!16)))))))

(declare-fun lt!26805 () List!1463)

(assert (=> d!13237 (= lt!26802 (ListLongMap!1390 lt!26805))))

(declare-fun lt!26804 () Unit!1689)

(declare-fun lt!26803 () Unit!1689)

(assert (=> d!13237 (= lt!26804 lt!26803)))

(assert (=> d!13237 (= (getValueByKey!125 lt!26805 (_1!1043 (tuple2!2067 lt!26317 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26317 (minValue!2000 newMap!16)))))))

(assert (=> d!13237 (= lt!26803 (lemmaContainsTupThenGetReturnValue!44 lt!26805 (_1!1043 (tuple2!2067 lt!26317 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26317 (minValue!2000 newMap!16)))))))

(assert (=> d!13237 (= lt!26805 (insertStrictlySorted!46 (toList!710 lt!26311) (_1!1043 (tuple2!2067 lt!26317 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26317 (minValue!2000 newMap!16)))))))

(assert (=> d!13237 (= (+!83 lt!26311 (tuple2!2067 lt!26317 (minValue!2000 newMap!16))) lt!26802)))

(declare-fun b!63689 () Bool)

(declare-fun res!34799 () Bool)

(assert (=> b!63689 (=> (not res!34799) (not e!41754))))

(assert (=> b!63689 (= res!34799 (= (getValueByKey!125 (toList!710 lt!26802) (_1!1043 (tuple2!2067 lt!26317 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26317 (minValue!2000 newMap!16))))))))

(declare-fun b!63690 () Bool)

(assert (=> b!63690 (= e!41754 (contains!703 (toList!710 lt!26802) (tuple2!2067 lt!26317 (minValue!2000 newMap!16))))))

(assert (= (and d!13237 res!34798) b!63689))

(assert (= (and b!63689 res!34799) b!63690))

(declare-fun m!57949 () Bool)

(assert (=> d!13237 m!57949))

(declare-fun m!57951 () Bool)

(assert (=> d!13237 m!57951))

(declare-fun m!57953 () Bool)

(assert (=> d!13237 m!57953))

(declare-fun m!57955 () Bool)

(assert (=> d!13237 m!57955))

(declare-fun m!57957 () Bool)

(assert (=> b!63689 m!57957))

(declare-fun m!57959 () Bool)

(assert (=> b!63690 m!57959))

(assert (=> b!62863 d!13237))

(declare-fun d!13239 () Bool)

(assert (=> d!13239 (= (apply!68 (+!83 lt!26311 (tuple2!2067 lt!26317 (minValue!2000 newMap!16))) lt!26320) (apply!68 lt!26311 lt!26320))))

(declare-fun lt!26806 () Unit!1689)

(assert (=> d!13239 (= lt!26806 (choose!342 lt!26311 lt!26317 (minValue!2000 newMap!16) lt!26320))))

(declare-fun e!41755 () Bool)

(assert (=> d!13239 e!41755))

(declare-fun res!34800 () Bool)

(assert (=> d!13239 (=> (not res!34800) (not e!41755))))

(assert (=> d!13239 (= res!34800 (contains!700 lt!26311 lt!26320))))

(assert (=> d!13239 (= (addApplyDifferent!44 lt!26311 lt!26317 (minValue!2000 newMap!16) lt!26320) lt!26806)))

(declare-fun b!63691 () Bool)

(assert (=> b!63691 (= e!41755 (not (= lt!26320 lt!26317)))))

(assert (= (and d!13239 res!34800) b!63691))

(assert (=> d!13239 m!56409))

(assert (=> d!13239 m!56411))

(declare-fun m!57961 () Bool)

(assert (=> d!13239 m!57961))

(assert (=> d!13239 m!56421))

(declare-fun m!57963 () Bool)

(assert (=> d!13239 m!57963))

(assert (=> d!13239 m!56409))

(assert (=> b!62863 d!13239))

(declare-fun d!13241 () Bool)

(assert (=> d!13241 (= (apply!68 (+!83 lt!26308 (tuple2!2067 lt!26314 (minValue!2000 newMap!16))) lt!26307) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!26308 (tuple2!2067 lt!26314 (minValue!2000 newMap!16)))) lt!26307)))))

(declare-fun bs!2769 () Bool)

(assert (= bs!2769 d!13241))

(declare-fun m!57965 () Bool)

(assert (=> bs!2769 m!57965))

(assert (=> bs!2769 m!57965))

(declare-fun m!57967 () Bool)

(assert (=> bs!2769 m!57967))

(assert (=> b!62863 d!13241))

(declare-fun d!13243 () Bool)

(assert (=> d!13243 (= (apply!68 (+!83 lt!26315 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16))) lt!26318) (apply!68 lt!26315 lt!26318))))

(declare-fun lt!26807 () Unit!1689)

(assert (=> d!13243 (= lt!26807 (choose!342 lt!26315 lt!26325 (zeroValue!2000 newMap!16) lt!26318))))

(declare-fun e!41756 () Bool)

(assert (=> d!13243 e!41756))

(declare-fun res!34801 () Bool)

(assert (=> d!13243 (=> (not res!34801) (not e!41756))))

(assert (=> d!13243 (= res!34801 (contains!700 lt!26315 lt!26318))))

(assert (=> d!13243 (= (addApplyDifferent!44 lt!26315 lt!26325 (zeroValue!2000 newMap!16) lt!26318) lt!26807)))

(declare-fun b!63692 () Bool)

(assert (=> b!63692 (= e!41756 (not (= lt!26318 lt!26325)))))

(assert (= (and d!13243 res!34801) b!63692))

(assert (=> d!13243 m!56403))

(assert (=> d!13243 m!56405))

(declare-fun m!57969 () Bool)

(assert (=> d!13243 m!57969))

(assert (=> d!13243 m!56413))

(declare-fun m!57971 () Bool)

(assert (=> d!13243 m!57971))

(assert (=> d!13243 m!56403))

(assert (=> b!62863 d!13243))

(declare-fun d!13245 () Bool)

(assert (=> d!13245 (= (apply!68 lt!26308 lt!26307) (get!1100 (getValueByKey!125 (toList!710 lt!26308) lt!26307)))))

(declare-fun bs!2770 () Bool)

(assert (= bs!2770 d!13245))

(declare-fun m!57973 () Bool)

(assert (=> bs!2770 m!57973))

(assert (=> bs!2770 m!57973))

(declare-fun m!57975 () Bool)

(assert (=> bs!2770 m!57975))

(assert (=> b!62863 d!13245))

(declare-fun d!13247 () Bool)

(declare-fun e!41758 () Bool)

(assert (=> d!13247 e!41758))

(declare-fun res!34802 () Bool)

(assert (=> d!13247 (=> res!34802 e!41758)))

(declare-fun lt!26808 () Bool)

(assert (=> d!13247 (= res!34802 (not lt!26808))))

(declare-fun lt!26811 () Bool)

(assert (=> d!13247 (= lt!26808 lt!26811)))

(declare-fun lt!26809 () Unit!1689)

(declare-fun e!41757 () Unit!1689)

(assert (=> d!13247 (= lt!26809 e!41757)))

(declare-fun c!8663 () Bool)

(assert (=> d!13247 (= c!8663 lt!26811)))

(assert (=> d!13247 (= lt!26811 (containsKey!129 (toList!710 (+!83 lt!26313 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16)))) lt!26323))))

(assert (=> d!13247 (= (contains!700 (+!83 lt!26313 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16))) lt!26323) lt!26808)))

(declare-fun b!63693 () Bool)

(declare-fun lt!26810 () Unit!1689)

(assert (=> b!63693 (= e!41757 lt!26810)))

(assert (=> b!63693 (= lt!26810 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 (+!83 lt!26313 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16)))) lt!26323))))

(assert (=> b!63693 (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!26313 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16)))) lt!26323))))

(declare-fun b!63694 () Bool)

(declare-fun Unit!1747 () Unit!1689)

(assert (=> b!63694 (= e!41757 Unit!1747)))

(declare-fun b!63695 () Bool)

(assert (=> b!63695 (= e!41758 (isDefined!79 (getValueByKey!125 (toList!710 (+!83 lt!26313 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16)))) lt!26323)))))

(assert (= (and d!13247 c!8663) b!63693))

(assert (= (and d!13247 (not c!8663)) b!63694))

(assert (= (and d!13247 (not res!34802)) b!63695))

(declare-fun m!57977 () Bool)

(assert (=> d!13247 m!57977))

(declare-fun m!57979 () Bool)

(assert (=> b!63693 m!57979))

(declare-fun m!57981 () Bool)

(assert (=> b!63693 m!57981))

(assert (=> b!63693 m!57981))

(declare-fun m!57983 () Bool)

(assert (=> b!63693 m!57983))

(assert (=> b!63695 m!57981))

(assert (=> b!63695 m!57981))

(assert (=> b!63695 m!57983))

(assert (=> b!62863 d!13247))

(declare-fun d!13249 () Bool)

(assert (=> d!13249 (= (apply!68 (+!83 lt!26315 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16))) lt!26318) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!26315 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16)))) lt!26318)))))

(declare-fun bs!2771 () Bool)

(assert (= bs!2771 d!13249))

(declare-fun m!57985 () Bool)

(assert (=> bs!2771 m!57985))

(assert (=> bs!2771 m!57985))

(declare-fun m!57987 () Bool)

(assert (=> bs!2771 m!57987))

(assert (=> b!62863 d!13249))

(declare-fun d!13251 () Bool)

(assert (=> d!13251 (= (apply!68 lt!26311 lt!26320) (get!1100 (getValueByKey!125 (toList!710 lt!26311) lt!26320)))))

(declare-fun bs!2772 () Bool)

(assert (= bs!2772 d!13251))

(declare-fun m!57989 () Bool)

(assert (=> bs!2772 m!57989))

(assert (=> bs!2772 m!57989))

(declare-fun m!57991 () Bool)

(assert (=> bs!2772 m!57991))

(assert (=> b!62863 d!13251))

(declare-fun d!13253 () Bool)

(assert (=> d!13253 (= (apply!68 (+!83 lt!26311 (tuple2!2067 lt!26317 (minValue!2000 newMap!16))) lt!26320) (get!1100 (getValueByKey!125 (toList!710 (+!83 lt!26311 (tuple2!2067 lt!26317 (minValue!2000 newMap!16)))) lt!26320)))))

(declare-fun bs!2773 () Bool)

(assert (= bs!2773 d!13253))

(declare-fun m!57993 () Bool)

(assert (=> bs!2773 m!57993))

(assert (=> bs!2773 m!57993))

(declare-fun m!57995 () Bool)

(assert (=> bs!2773 m!57995))

(assert (=> b!62863 d!13253))

(declare-fun d!13255 () Bool)

(declare-fun e!41759 () Bool)

(assert (=> d!13255 e!41759))

(declare-fun res!34803 () Bool)

(assert (=> d!13255 (=> (not res!34803) (not e!41759))))

(declare-fun lt!26812 () ListLongMap!1389)

(assert (=> d!13255 (= res!34803 (contains!700 lt!26812 (_1!1043 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16)))))))

(declare-fun lt!26815 () List!1463)

(assert (=> d!13255 (= lt!26812 (ListLongMap!1390 lt!26815))))

(declare-fun lt!26814 () Unit!1689)

(declare-fun lt!26813 () Unit!1689)

(assert (=> d!13255 (= lt!26814 lt!26813)))

(assert (=> d!13255 (= (getValueByKey!125 lt!26815 (_1!1043 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13255 (= lt!26813 (lemmaContainsTupThenGetReturnValue!44 lt!26815 (_1!1043 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13255 (= lt!26815 (insertStrictlySorted!46 (toList!710 lt!26313) (_1!1043 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13255 (= (+!83 lt!26313 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16))) lt!26812)))

(declare-fun b!63696 () Bool)

(declare-fun res!34804 () Bool)

(assert (=> b!63696 (=> (not res!34804) (not e!41759))))

(assert (=> b!63696 (= res!34804 (= (getValueByKey!125 (toList!710 lt!26812) (_1!1043 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16))))))))

(declare-fun b!63697 () Bool)

(assert (=> b!63697 (= e!41759 (contains!703 (toList!710 lt!26812) (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16))))))

(assert (= (and d!13255 res!34803) b!63696))

(assert (= (and b!63696 res!34804) b!63697))

(declare-fun m!57997 () Bool)

(assert (=> d!13255 m!57997))

(declare-fun m!57999 () Bool)

(assert (=> d!13255 m!57999))

(declare-fun m!58001 () Bool)

(assert (=> d!13255 m!58001))

(declare-fun m!58003 () Bool)

(assert (=> d!13255 m!58003))

(declare-fun m!58005 () Bool)

(assert (=> b!63696 m!58005))

(declare-fun m!58007 () Bool)

(assert (=> b!63697 m!58007))

(assert (=> b!62863 d!13255))

(declare-fun d!13257 () Bool)

(assert (=> d!13257 (= (apply!68 (+!83 lt!26308 (tuple2!2067 lt!26314 (minValue!2000 newMap!16))) lt!26307) (apply!68 lt!26308 lt!26307))))

(declare-fun lt!26816 () Unit!1689)

(assert (=> d!13257 (= lt!26816 (choose!342 lt!26308 lt!26314 (minValue!2000 newMap!16) lt!26307))))

(declare-fun e!41760 () Bool)

(assert (=> d!13257 e!41760))

(declare-fun res!34805 () Bool)

(assert (=> d!13257 (=> (not res!34805) (not e!41760))))

(assert (=> d!13257 (= res!34805 (contains!700 lt!26308 lt!26307))))

(assert (=> d!13257 (= (addApplyDifferent!44 lt!26308 lt!26314 (minValue!2000 newMap!16) lt!26307) lt!26816)))

(declare-fun b!63698 () Bool)

(assert (=> b!63698 (= e!41760 (not (= lt!26307 lt!26314)))))

(assert (= (and d!13257 res!34805) b!63698))

(assert (=> d!13257 m!56427))

(assert (=> d!13257 m!56431))

(declare-fun m!58009 () Bool)

(assert (=> d!13257 m!58009))

(assert (=> d!13257 m!56419))

(declare-fun m!58011 () Bool)

(assert (=> d!13257 m!58011))

(assert (=> d!13257 m!56427))

(assert (=> b!62863 d!13257))

(assert (=> b!62863 d!13221))

(declare-fun d!13259 () Bool)

(assert (=> d!13259 (= (apply!68 lt!26315 lt!26318) (get!1100 (getValueByKey!125 (toList!710 lt!26315) lt!26318)))))

(declare-fun bs!2774 () Bool)

(assert (= bs!2774 d!13259))

(declare-fun m!58013 () Bool)

(assert (=> bs!2774 m!58013))

(assert (=> bs!2774 m!58013))

(declare-fun m!58015 () Bool)

(assert (=> bs!2774 m!58015))

(assert (=> b!62863 d!13259))

(declare-fun d!13261 () Bool)

(declare-fun e!41761 () Bool)

(assert (=> d!13261 e!41761))

(declare-fun res!34806 () Bool)

(assert (=> d!13261 (=> (not res!34806) (not e!41761))))

(declare-fun lt!26817 () ListLongMap!1389)

(assert (=> d!13261 (= res!34806 (contains!700 lt!26817 (_1!1043 (tuple2!2067 lt!26314 (minValue!2000 newMap!16)))))))

(declare-fun lt!26820 () List!1463)

(assert (=> d!13261 (= lt!26817 (ListLongMap!1390 lt!26820))))

(declare-fun lt!26819 () Unit!1689)

(declare-fun lt!26818 () Unit!1689)

(assert (=> d!13261 (= lt!26819 lt!26818)))

(assert (=> d!13261 (= (getValueByKey!125 lt!26820 (_1!1043 (tuple2!2067 lt!26314 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26314 (minValue!2000 newMap!16)))))))

(assert (=> d!13261 (= lt!26818 (lemmaContainsTupThenGetReturnValue!44 lt!26820 (_1!1043 (tuple2!2067 lt!26314 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26314 (minValue!2000 newMap!16)))))))

(assert (=> d!13261 (= lt!26820 (insertStrictlySorted!46 (toList!710 lt!26308) (_1!1043 (tuple2!2067 lt!26314 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26314 (minValue!2000 newMap!16)))))))

(assert (=> d!13261 (= (+!83 lt!26308 (tuple2!2067 lt!26314 (minValue!2000 newMap!16))) lt!26817)))

(declare-fun b!63699 () Bool)

(declare-fun res!34807 () Bool)

(assert (=> b!63699 (=> (not res!34807) (not e!41761))))

(assert (=> b!63699 (= res!34807 (= (getValueByKey!125 (toList!710 lt!26817) (_1!1043 (tuple2!2067 lt!26314 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26314 (minValue!2000 newMap!16))))))))

(declare-fun b!63700 () Bool)

(assert (=> b!63700 (= e!41761 (contains!703 (toList!710 lt!26817) (tuple2!2067 lt!26314 (minValue!2000 newMap!16))))))

(assert (= (and d!13261 res!34806) b!63699))

(assert (= (and b!63699 res!34807) b!63700))

(declare-fun m!58017 () Bool)

(assert (=> d!13261 m!58017))

(declare-fun m!58019 () Bool)

(assert (=> d!13261 m!58019))

(declare-fun m!58021 () Bool)

(assert (=> d!13261 m!58021))

(declare-fun m!58023 () Bool)

(assert (=> d!13261 m!58023))

(declare-fun m!58025 () Bool)

(assert (=> b!63699 m!58025))

(declare-fun m!58027 () Bool)

(assert (=> b!63700 m!58027))

(assert (=> b!62863 d!13261))

(declare-fun d!13263 () Bool)

(assert (=> d!13263 (contains!700 (+!83 lt!26313 (tuple2!2067 lt!26326 (zeroValue!2000 newMap!16))) lt!26323)))

(declare-fun lt!26821 () Unit!1689)

(assert (=> d!13263 (= lt!26821 (choose!341 lt!26313 lt!26326 (zeroValue!2000 newMap!16) lt!26323))))

(assert (=> d!13263 (contains!700 lt!26313 lt!26323)))

(assert (=> d!13263 (= (addStillContains!44 lt!26313 lt!26326 (zeroValue!2000 newMap!16) lt!26323) lt!26821)))

(declare-fun bs!2775 () Bool)

(assert (= bs!2775 d!13263))

(assert (=> bs!2775 m!56415))

(assert (=> bs!2775 m!56415))

(assert (=> bs!2775 m!56429))

(declare-fun m!58029 () Bool)

(assert (=> bs!2775 m!58029))

(declare-fun m!58031 () Bool)

(assert (=> bs!2775 m!58031))

(assert (=> b!62863 d!13263))

(declare-fun d!13265 () Bool)

(declare-fun e!41762 () Bool)

(assert (=> d!13265 e!41762))

(declare-fun res!34808 () Bool)

(assert (=> d!13265 (=> (not res!34808) (not e!41762))))

(declare-fun lt!26822 () ListLongMap!1389)

(assert (=> d!13265 (= res!34808 (contains!700 lt!26822 (_1!1043 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16)))))))

(declare-fun lt!26825 () List!1463)

(assert (=> d!13265 (= lt!26822 (ListLongMap!1390 lt!26825))))

(declare-fun lt!26824 () Unit!1689)

(declare-fun lt!26823 () Unit!1689)

(assert (=> d!13265 (= lt!26824 lt!26823)))

(assert (=> d!13265 (= (getValueByKey!125 lt!26825 (_1!1043 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13265 (= lt!26823 (lemmaContainsTupThenGetReturnValue!44 lt!26825 (_1!1043 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13265 (= lt!26825 (insertStrictlySorted!46 (toList!710 lt!26315) (_1!1043 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16))) (_2!1043 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13265 (= (+!83 lt!26315 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16))) lt!26822)))

(declare-fun b!63701 () Bool)

(declare-fun res!34809 () Bool)

(assert (=> b!63701 (=> (not res!34809) (not e!41762))))

(assert (=> b!63701 (= res!34809 (= (getValueByKey!125 (toList!710 lt!26822) (_1!1043 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16))))))))

(declare-fun b!63702 () Bool)

(assert (=> b!63702 (= e!41762 (contains!703 (toList!710 lt!26822) (tuple2!2067 lt!26325 (zeroValue!2000 newMap!16))))))

(assert (= (and d!13265 res!34808) b!63701))

(assert (= (and b!63701 res!34809) b!63702))

(declare-fun m!58033 () Bool)

(assert (=> d!13265 m!58033))

(declare-fun m!58035 () Bool)

(assert (=> d!13265 m!58035))

(declare-fun m!58037 () Bool)

(assert (=> d!13265 m!58037))

(declare-fun m!58039 () Bool)

(assert (=> d!13265 m!58039))

(declare-fun m!58041 () Bool)

(assert (=> b!63701 m!58041))

(declare-fun m!58043 () Bool)

(assert (=> b!63702 m!58043))

(assert (=> b!62863 d!13265))

(declare-fun d!13267 () Bool)

(declare-fun e!41763 () Bool)

(assert (=> d!13267 e!41763))

(declare-fun res!34810 () Bool)

(assert (=> d!13267 (=> (not res!34810) (not e!41763))))

(declare-fun lt!26826 () ListLongMap!1389)

(assert (=> d!13267 (= res!34810 (contains!700 lt!26826 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun lt!26829 () List!1463)

(assert (=> d!13267 (= lt!26826 (ListLongMap!1390 lt!26829))))

(declare-fun lt!26828 () Unit!1689)

(declare-fun lt!26827 () Unit!1689)

(assert (=> d!13267 (= lt!26828 lt!26827)))

(assert (=> d!13267 (= (getValueByKey!125 lt!26829 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!13267 (= lt!26827 (lemmaContainsTupThenGetReturnValue!44 lt!26829 (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!13267 (= lt!26829 (insertStrictlySorted!46 (toList!710 call!4949) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!13267 (= (+!83 call!4949 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) lt!26826)))

(declare-fun b!63703 () Bool)

(declare-fun res!34811 () Bool)

(assert (=> b!63703 (=> (not res!34811) (not e!41763))))

(assert (=> b!63703 (= res!34811 (= (getValueByKey!125 (toList!710 lt!26826) (_1!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (Some!130 (_2!1043 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(declare-fun b!63704 () Bool)

(assert (=> b!63704 (= e!41763 (contains!703 (toList!710 lt!26826) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(assert (= (and d!13267 res!34810) b!63703))

(assert (= (and b!63703 res!34811) b!63704))

(declare-fun m!58045 () Bool)

(assert (=> d!13267 m!58045))

(declare-fun m!58047 () Bool)

(assert (=> d!13267 m!58047))

(declare-fun m!58049 () Bool)

(assert (=> d!13267 m!58049))

(declare-fun m!58051 () Bool)

(assert (=> d!13267 m!58051))

(declare-fun m!58053 () Bool)

(assert (=> b!63703 m!58053))

(declare-fun m!58055 () Bool)

(assert (=> b!63704 m!58055))

(assert (=> b!62820 d!13267))

(assert (=> b!62617 d!12807))

(assert (=> b!62617 d!12809))

(declare-fun d!13269 () Bool)

(declare-fun res!34812 () Bool)

(declare-fun e!41764 () Bool)

(assert (=> d!13269 (=> res!34812 e!41764)))

(assert (=> d!13269 (= res!34812 (and ((_ is Cons!1459) (t!4861 (toList!710 lt!25845))) (= (_1!1043 (h!2042 (t!4861 (toList!710 lt!25845)))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(assert (=> d!13269 (= (containsKey!129 (t!4861 (toList!710 lt!25845)) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)) e!41764)))

(declare-fun b!63705 () Bool)

(declare-fun e!41765 () Bool)

(assert (=> b!63705 (= e!41764 e!41765)))

(declare-fun res!34813 () Bool)

(assert (=> b!63705 (=> (not res!34813) (not e!41765))))

(assert (=> b!63705 (= res!34813 (and (or (not ((_ is Cons!1459) (t!4861 (toList!710 lt!25845)))) (bvsle (_1!1043 (h!2042 (t!4861 (toList!710 lt!25845)))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))) ((_ is Cons!1459) (t!4861 (toList!710 lt!25845))) (bvslt (_1!1043 (h!2042 (t!4861 (toList!710 lt!25845)))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355))))))

(declare-fun b!63706 () Bool)

(assert (=> b!63706 (= e!41765 (containsKey!129 (t!4861 (t!4861 (toList!710 lt!25845))) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355)))))

(assert (= (and d!13269 (not res!34812)) b!63705))

(assert (= (and b!63705 res!34813) b!63706))

(assert (=> b!63706 m!55705))

(declare-fun m!58057 () Bool)

(assert (=> b!63706 m!58057))

(assert (=> b!62887 d!13269))

(declare-fun d!13271 () Bool)

(declare-fun e!41767 () Bool)

(assert (=> d!13271 e!41767))

(declare-fun res!34814 () Bool)

(assert (=> d!13271 (=> res!34814 e!41767)))

(declare-fun lt!26830 () Bool)

(assert (=> d!13271 (= res!34814 (not lt!26830))))

(declare-fun lt!26833 () Bool)

(assert (=> d!13271 (= lt!26830 lt!26833)))

(declare-fun lt!26831 () Unit!1689)

(declare-fun e!41766 () Unit!1689)

(assert (=> d!13271 (= lt!26831 e!41766)))

(declare-fun c!8664 () Bool)

(assert (=> d!13271 (= c!8664 lt!26833)))

(assert (=> d!13271 (= lt!26833 (containsKey!129 (toList!710 lt!26243) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13271 (= (contains!700 lt!26243 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26830)))

(declare-fun b!63707 () Bool)

(declare-fun lt!26832 () Unit!1689)

(assert (=> b!63707 (= e!41766 lt!26832)))

(assert (=> b!63707 (= lt!26832 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26243) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63707 (isDefined!79 (getValueByKey!125 (toList!710 lt!26243) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63708 () Bool)

(declare-fun Unit!1748 () Unit!1689)

(assert (=> b!63708 (= e!41766 Unit!1748)))

(declare-fun b!63709 () Bool)

(assert (=> b!63709 (= e!41767 (isDefined!79 (getValueByKey!125 (toList!710 lt!26243) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13271 c!8664) b!63707))

(assert (= (and d!13271 (not c!8664)) b!63708))

(assert (= (and d!13271 (not res!34814)) b!63709))

(declare-fun m!58059 () Bool)

(assert (=> d!13271 m!58059))

(declare-fun m!58061 () Bool)

(assert (=> b!63707 m!58061))

(assert (=> b!63707 m!56553))

(assert (=> b!63707 m!56553))

(declare-fun m!58063 () Bool)

(assert (=> b!63707 m!58063))

(assert (=> b!63709 m!56553))

(assert (=> b!63709 m!56553))

(assert (=> b!63709 m!58063))

(assert (=> bm!4940 d!13271))

(assert (=> b!62880 d!12775))

(declare-fun d!13273 () Bool)

(declare-fun e!41768 () Bool)

(assert (=> d!13273 e!41768))

(declare-fun res!34815 () Bool)

(assert (=> d!13273 (=> (not res!34815) (not e!41768))))

(declare-fun lt!26834 () ListLongMap!1389)

(assert (=> d!13273 (= res!34815 (contains!700 lt!26834 (_1!1043 (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(declare-fun lt!26837 () List!1463)

(assert (=> d!13273 (= lt!26834 (ListLongMap!1390 lt!26837))))

(declare-fun lt!26836 () Unit!1689)

(declare-fun lt!26835 () Unit!1689)

(assert (=> d!13273 (= lt!26836 lt!26835)))

(assert (=> d!13273 (= (getValueByKey!125 lt!26837 (_1!1043 (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))) (Some!130 (_2!1043 (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!13273 (= lt!26835 (lemmaContainsTupThenGetReturnValue!44 lt!26837 (_1!1043 (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (_2!1043 (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!13273 (= lt!26837 (insertStrictlySorted!46 (toList!710 (ite c!8417 call!4947 (ite c!8420 call!4945 call!4948))) (_1!1043 (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (_2!1043 (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!13273 (= (+!83 (ite c!8417 call!4947 (ite c!8420 call!4945 call!4948)) (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) lt!26834)))

(declare-fun b!63710 () Bool)

(declare-fun res!34816 () Bool)

(assert (=> b!63710 (=> (not res!34816) (not e!41768))))

(assert (=> b!63710 (= res!34816 (= (getValueByKey!125 (toList!710 lt!26834) (_1!1043 (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))) (Some!130 (_2!1043 (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))))

(declare-fun b!63711 () Bool)

(assert (=> b!63711 (= e!41768 (contains!703 (toList!710 lt!26834) (ite (or c!8417 c!8420) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (= (and d!13273 res!34815) b!63710))

(assert (= (and b!63710 res!34816) b!63711))

(declare-fun m!58065 () Bool)

(assert (=> d!13273 m!58065))

(declare-fun m!58067 () Bool)

(assert (=> d!13273 m!58067))

(declare-fun m!58069 () Bool)

(assert (=> d!13273 m!58069))

(declare-fun m!58071 () Bool)

(assert (=> d!13273 m!58071))

(declare-fun m!58073 () Bool)

(assert (=> b!63710 m!58073))

(declare-fun m!58075 () Bool)

(assert (=> b!63711 m!58075))

(assert (=> bm!4946 d!13273))

(assert (=> b!62807 d!13169))

(assert (=> b!62807 d!12727))

(declare-fun b!63712 () Bool)

(declare-fun c!8665 () Bool)

(assert (=> b!63712 (= c!8665 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41778 () ListLongMap!1389)

(declare-fun e!41771 () ListLongMap!1389)

(assert (=> b!63712 (= e!41778 e!41771)))

(declare-fun bm!5056 () Bool)

(declare-fun call!5062 () ListLongMap!1389)

(declare-fun call!5059 () ListLongMap!1389)

(assert (=> bm!5056 (= call!5062 call!5059)))

(declare-fun b!63713 () Bool)

(declare-fun e!41779 () Bool)

(declare-fun e!41781 () Bool)

(assert (=> b!63713 (= e!41779 e!41781)))

(declare-fun c!8668 () Bool)

(assert (=> b!63713 (= c!8668 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63714 () Bool)

(declare-fun e!41770 () Bool)

(declare-fun e!41774 () Bool)

(assert (=> b!63714 (= e!41770 e!41774)))

(declare-fun res!34819 () Bool)

(assert (=> b!63714 (=> (not res!34819) (not e!41774))))

(declare-fun lt!26854 () ListLongMap!1389)

(assert (=> b!63714 (= res!34819 (contains!700 lt!26854 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63714 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63715 () Bool)

(assert (=> b!63715 (= e!41774 (= (apply!68 lt!26854 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1096 (select (arr!1799 (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!316 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63715 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))))))))

(assert (=> b!63715 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63716 () Bool)

(declare-fun e!41773 () Bool)

(declare-fun e!41769 () Bool)

(assert (=> b!63716 (= e!41773 e!41769)))

(declare-fun res!34820 () Bool)

(declare-fun call!5058 () Bool)

(assert (=> b!63716 (= res!34820 call!5058)))

(assert (=> b!63716 (=> (not res!34820) (not e!41769))))

(declare-fun bm!5057 () Bool)

(declare-fun call!5061 () ListLongMap!1389)

(assert (=> bm!5057 (= call!5059 call!5061)))

(declare-fun b!63717 () Bool)

(declare-fun e!41772 () Bool)

(assert (=> b!63717 (= e!41772 (= (apply!68 lt!26854 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!63718 () Bool)

(declare-fun res!34825 () Bool)

(assert (=> b!63718 (=> (not res!34825) (not e!41779))))

(assert (=> b!63718 (= res!34825 e!41770)))

(declare-fun res!34824 () Bool)

(assert (=> b!63718 (=> res!34824 e!41770)))

(declare-fun e!41775 () Bool)

(assert (=> b!63718 (= res!34824 (not e!41775))))

(declare-fun res!34818 () Bool)

(assert (=> b!63718 (=> (not res!34818) (not e!41775))))

(assert (=> b!63718 (= res!34818 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(declare-fun b!63719 () Bool)

(declare-fun e!41780 () Unit!1689)

(declare-fun Unit!1749 () Unit!1689)

(assert (=> b!63719 (= e!41780 Unit!1749)))

(declare-fun b!63720 () Bool)

(declare-fun call!5064 () Bool)

(assert (=> b!63720 (= e!41781 (not call!5064))))

(declare-fun b!63721 () Bool)

(declare-fun e!41777 () ListLongMap!1389)

(declare-fun call!5063 () ListLongMap!1389)

(assert (=> b!63721 (= e!41777 (+!83 call!5063 (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!63722 () Bool)

(declare-fun res!34817 () Bool)

(assert (=> b!63722 (=> (not res!34817) (not e!41779))))

(assert (=> b!63722 (= res!34817 e!41773)))

(declare-fun c!8669 () Bool)

(assert (=> b!63722 (= c!8669 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63723 () Bool)

(assert (=> b!63723 (= e!41769 (= (apply!68 lt!26854 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!63724 () Bool)

(declare-fun lt!26855 () Unit!1689)

(assert (=> b!63724 (= e!41780 lt!26855)))

(declare-fun lt!26846 () ListLongMap!1389)

(assert (=> b!63724 (= lt!26846 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26859 () (_ BitVec 64))

(assert (=> b!63724 (= lt!26859 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26856 () (_ BitVec 64))

(assert (=> b!63724 (= lt!26856 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26843 () Unit!1689)

(assert (=> b!63724 (= lt!26843 (addStillContains!44 lt!26846 lt!26859 (zeroValue!2000 newMap!16) lt!26856))))

(assert (=> b!63724 (contains!700 (+!83 lt!26846 (tuple2!2067 lt!26859 (zeroValue!2000 newMap!16))) lt!26856)))

(declare-fun lt!26857 () Unit!1689)

(assert (=> b!63724 (= lt!26857 lt!26843)))

(declare-fun lt!26841 () ListLongMap!1389)

(assert (=> b!63724 (= lt!26841 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26847 () (_ BitVec 64))

(assert (=> b!63724 (= lt!26847 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26840 () (_ BitVec 64))

(assert (=> b!63724 (= lt!26840 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26839 () Unit!1689)

(assert (=> b!63724 (= lt!26839 (addApplyDifferent!44 lt!26841 lt!26847 (minValue!2000 newMap!16) lt!26840))))

(assert (=> b!63724 (= (apply!68 (+!83 lt!26841 (tuple2!2067 lt!26847 (minValue!2000 newMap!16))) lt!26840) (apply!68 lt!26841 lt!26840))))

(declare-fun lt!26842 () Unit!1689)

(assert (=> b!63724 (= lt!26842 lt!26839)))

(declare-fun lt!26848 () ListLongMap!1389)

(assert (=> b!63724 (= lt!26848 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26858 () (_ BitVec 64))

(assert (=> b!63724 (= lt!26858 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26851 () (_ BitVec 64))

(assert (=> b!63724 (= lt!26851 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26849 () Unit!1689)

(assert (=> b!63724 (= lt!26849 (addApplyDifferent!44 lt!26848 lt!26858 (zeroValue!2000 newMap!16) lt!26851))))

(assert (=> b!63724 (= (apply!68 (+!83 lt!26848 (tuple2!2067 lt!26858 (zeroValue!2000 newMap!16))) lt!26851) (apply!68 lt!26848 lt!26851))))

(declare-fun lt!26852 () Unit!1689)

(assert (=> b!63724 (= lt!26852 lt!26849)))

(declare-fun lt!26844 () ListLongMap!1389)

(assert (=> b!63724 (= lt!26844 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26850 () (_ BitVec 64))

(assert (=> b!63724 (= lt!26850 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26853 () (_ BitVec 64))

(assert (=> b!63724 (= lt!26853 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63724 (= lt!26855 (addApplyDifferent!44 lt!26844 lt!26850 (minValue!2000 newMap!16) lt!26853))))

(assert (=> b!63724 (= (apply!68 (+!83 lt!26844 (tuple2!2067 lt!26850 (minValue!2000 newMap!16))) lt!26853) (apply!68 lt!26844 lt!26853))))

(declare-fun b!63725 () Bool)

(assert (=> b!63725 (= e!41775 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!5058 () Bool)

(declare-fun call!5060 () ListLongMap!1389)

(assert (=> bm!5058 (= call!5060 call!5063)))

(declare-fun b!63726 () Bool)

(assert (=> b!63726 (= e!41781 e!41772)))

(declare-fun res!34821 () Bool)

(assert (=> b!63726 (= res!34821 call!5064)))

(assert (=> b!63726 (=> (not res!34821) (not e!41772))))

(declare-fun bm!5059 () Bool)

(assert (=> bm!5059 (= call!5061 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun bm!5060 () Bool)

(declare-fun c!8670 () Bool)

(declare-fun c!8667 () Bool)

(assert (=> bm!5060 (= call!5063 (+!83 (ite c!8667 call!5061 (ite c!8670 call!5059 call!5062)) (ite (or c!8667 c!8670) (tuple2!2067 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2067 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun b!63727 () Bool)

(assert (=> b!63727 (= e!41777 e!41778)))

(assert (=> b!63727 (= c!8670 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!13275 () Bool)

(assert (=> d!13275 e!41779))

(declare-fun res!34822 () Bool)

(assert (=> d!13275 (=> (not res!34822) (not e!41779))))

(assert (=> d!13275 (= res!34822 (or (bvsge #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))))

(declare-fun lt!26838 () ListLongMap!1389)

(assert (=> d!13275 (= lt!26854 lt!26838)))

(declare-fun lt!26845 () Unit!1689)

(assert (=> d!13275 (= lt!26845 e!41780)))

(declare-fun c!8666 () Bool)

(declare-fun e!41776 () Bool)

(assert (=> d!13275 (= c!8666 e!41776)))

(declare-fun res!34823 () Bool)

(assert (=> d!13275 (=> (not res!34823) (not e!41776))))

(assert (=> d!13275 (= res!34823 (bvslt #b00000000000000000000000000000000 (size!2030 (_keys!3720 newMap!16))))))

(assert (=> d!13275 (= lt!26838 e!41777)))

(assert (=> d!13275 (= c!8667 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13275 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13275 (= (getCurrentListMap!407 (_keys!3720 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26854)))

(declare-fun bm!5055 () Bool)

(assert (=> bm!5055 (= call!5064 (contains!700 lt!26854 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63728 () Bool)

(assert (=> b!63728 (= e!41778 call!5060)))

(declare-fun b!63729 () Bool)

(assert (=> b!63729 (= e!41771 call!5060)))

(declare-fun bm!5061 () Bool)

(assert (=> bm!5061 (= call!5058 (contains!700 lt!26854 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63730 () Bool)

(assert (=> b!63730 (= e!41771 call!5062)))

(declare-fun b!63731 () Bool)

(assert (=> b!63731 (= e!41773 (not call!5058))))

(declare-fun b!63732 () Bool)

(assert (=> b!63732 (= e!41776 (validKeyInArray!0 (select (arr!1798 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!13275 c!8667) b!63721))

(assert (= (and d!13275 (not c!8667)) b!63727))

(assert (= (and b!63727 c!8670) b!63728))

(assert (= (and b!63727 (not c!8670)) b!63712))

(assert (= (and b!63712 c!8665) b!63729))

(assert (= (and b!63712 (not c!8665)) b!63730))

(assert (= (or b!63729 b!63730) bm!5056))

(assert (= (or b!63728 bm!5056) bm!5057))

(assert (= (or b!63728 b!63729) bm!5058))

(assert (= (or b!63721 bm!5057) bm!5059))

(assert (= (or b!63721 bm!5058) bm!5060))

(assert (= (and d!13275 res!34823) b!63732))

(assert (= (and d!13275 c!8666) b!63724))

(assert (= (and d!13275 (not c!8666)) b!63719))

(assert (= (and d!13275 res!34822) b!63718))

(assert (= (and b!63718 res!34818) b!63725))

(assert (= (and b!63718 (not res!34824)) b!63714))

(assert (= (and b!63714 res!34819) b!63715))

(assert (= (and b!63718 res!34825) b!63722))

(assert (= (and b!63722 c!8669) b!63716))

(assert (= (and b!63722 (not c!8669)) b!63731))

(assert (= (and b!63716 res!34820) b!63723))

(assert (= (or b!63716 b!63731) bm!5061))

(assert (= (and b!63722 res!34817) b!63713))

(assert (= (and b!63713 c!8668) b!63726))

(assert (= (and b!63713 (not c!8668)) b!63720))

(assert (= (and b!63726 res!34821) b!63717))

(assert (= (or b!63726 b!63720) bm!5055))

(declare-fun b_lambda!2845 () Bool)

(assert (=> (not b_lambda!2845) (not b!63715)))

(assert (=> b!63715 t!4870))

(declare-fun b_and!3897 () Bool)

(assert (= b_and!3893 (and (=> t!4870 result!2463) b_and!3897)))

(assert (=> b!63715 t!4872))

(declare-fun b_and!3899 () Bool)

(assert (= b_and!3895 (and (=> t!4872 result!2465) b_and!3899)))

(declare-fun m!58077 () Bool)

(assert (=> b!63721 m!58077))

(declare-fun m!58079 () Bool)

(assert (=> b!63723 m!58079))

(declare-fun m!58081 () Bool)

(assert (=> bm!5060 m!58081))

(assert (=> b!63732 m!56007))

(assert (=> b!63732 m!56007))

(assert (=> b!63732 m!56009))

(declare-fun m!58083 () Bool)

(assert (=> bm!5059 m!58083))

(assert (=> b!63725 m!56007))

(assert (=> b!63725 m!56007))

(assert (=> b!63725 m!56009))

(assert (=> b!63714 m!56007))

(assert (=> b!63714 m!56007))

(declare-fun m!58085 () Bool)

(assert (=> b!63714 m!58085))

(declare-fun m!58087 () Bool)

(assert (=> bm!5055 m!58087))

(assert (=> b!63724 m!56007))

(declare-fun m!58089 () Bool)

(assert (=> b!63724 m!58089))

(declare-fun m!58091 () Bool)

(assert (=> b!63724 m!58091))

(declare-fun m!58093 () Bool)

(assert (=> b!63724 m!58093))

(declare-fun m!58095 () Bool)

(assert (=> b!63724 m!58095))

(declare-fun m!58097 () Bool)

(assert (=> b!63724 m!58097))

(declare-fun m!58099 () Bool)

(assert (=> b!63724 m!58099))

(declare-fun m!58101 () Bool)

(assert (=> b!63724 m!58101))

(declare-fun m!58103 () Bool)

(assert (=> b!63724 m!58103))

(declare-fun m!58105 () Bool)

(assert (=> b!63724 m!58105))

(declare-fun m!58107 () Bool)

(assert (=> b!63724 m!58107))

(declare-fun m!58109 () Bool)

(assert (=> b!63724 m!58109))

(assert (=> b!63724 m!58095))

(declare-fun m!58111 () Bool)

(assert (=> b!63724 m!58111))

(declare-fun m!58113 () Bool)

(assert (=> b!63724 m!58113))

(assert (=> b!63724 m!58101))

(declare-fun m!58115 () Bool)

(assert (=> b!63724 m!58115))

(assert (=> b!63724 m!58089))

(assert (=> b!63724 m!58113))

(declare-fun m!58117 () Bool)

(assert (=> b!63724 m!58117))

(assert (=> b!63724 m!58083))

(assert (=> d!13275 m!55941))

(declare-fun m!58119 () Bool)

(assert (=> bm!5061 m!58119))

(declare-fun m!58121 () Bool)

(assert (=> b!63717 m!58121))

(assert (=> b!63715 m!56259))

(assert (=> b!63715 m!56007))

(assert (=> b!63715 m!56007))

(declare-fun m!58123 () Bool)

(assert (=> b!63715 m!58123))

(declare-fun m!58125 () Bool)

(assert (=> b!63715 m!58125))

(assert (=> b!63715 m!56259))

(declare-fun m!58127 () Bool)

(assert (=> b!63715 m!58127))

(assert (=> b!63715 m!58125))

(assert (=> b!62807 d!13275))

(assert (=> b!62605 d!12655))

(assert (=> b!62810 d!12965))

(assert (=> b!62810 d!12967))

(declare-fun d!13277 () Bool)

(assert (=> d!13277 (= (+!83 (getCurrentListMap!407 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2067 (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!407 (_keys!3720 newMap!16) (array!3763 (store (arr!1799 (_values!2071 newMap!16)) (index!3082 lt!26026) (ValueCellFull!864 (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2031 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(assert (=> d!13277 true))

(declare-fun _$5!68 () Unit!1689)

(assert (=> d!13277 (= (choose!344 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3082 lt!26026) (select (arr!1798 (_keys!3720 (v!2419 (underlying!234 thiss!992)))) from!355) (get!1096 (select (arr!1799 (_values!2071 (v!2419 (underlying!234 thiss!992)))) from!355) (dynLambda!316 (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)) _$5!68)))

(declare-fun bs!2776 () Bool)

(assert (= bs!2776 d!13277))

(assert (=> bs!2776 m!55787))

(assert (=> bs!2776 m!55787))

(assert (=> bs!2776 m!56199))

(assert (=> bs!2776 m!55877))

(assert (=> bs!2776 m!56303))

(assert (=> d!12723 d!13277))

(assert (=> d!12723 d!12795))

(declare-fun d!13279 () Bool)

(declare-fun e!41783 () Bool)

(assert (=> d!13279 e!41783))

(declare-fun res!34826 () Bool)

(assert (=> d!13279 (=> res!34826 e!41783)))

(declare-fun lt!26860 () Bool)

(assert (=> d!13279 (= res!34826 (not lt!26860))))

(declare-fun lt!26863 () Bool)

(assert (=> d!13279 (= lt!26860 lt!26863)))

(declare-fun lt!26861 () Unit!1689)

(declare-fun e!41782 () Unit!1689)

(assert (=> d!13279 (= lt!26861 e!41782)))

(declare-fun c!8671 () Bool)

(assert (=> d!13279 (= c!8671 lt!26863)))

(assert (=> d!13279 (= lt!26863 (containsKey!129 (toList!710 lt!26066) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13279 (= (contains!700 lt!26066 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26860)))

(declare-fun b!63733 () Bool)

(declare-fun lt!26862 () Unit!1689)

(assert (=> b!63733 (= e!41782 lt!26862)))

(assert (=> b!63733 (= lt!26862 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!710 lt!26066) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63733 (isDefined!79 (getValueByKey!125 (toList!710 lt!26066) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63734 () Bool)

(declare-fun Unit!1750 () Unit!1689)

(assert (=> b!63734 (= e!41782 Unit!1750)))

(declare-fun b!63735 () Bool)

(assert (=> b!63735 (= e!41783 (isDefined!79 (getValueByKey!125 (toList!710 lt!26066) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13279 c!8671) b!63733))

(assert (= (and d!13279 (not c!8671)) b!63734))

(assert (= (and d!13279 (not res!34826)) b!63735))

(declare-fun m!58129 () Bool)

(assert (=> d!13279 m!58129))

(declare-fun m!58131 () Bool)

(assert (=> b!63733 m!58131))

(declare-fun m!58133 () Bool)

(assert (=> b!63733 m!58133))

(assert (=> b!63733 m!58133))

(declare-fun m!58135 () Bool)

(assert (=> b!63733 m!58135))

(assert (=> b!63735 m!58133))

(assert (=> b!63735 m!58133))

(assert (=> b!63735 m!58135))

(assert (=> d!12647 d!13279))

(assert (=> d!12647 d!12621))

(declare-fun b!63737 () Bool)

(declare-fun e!41784 () Bool)

(assert (=> b!63737 (= e!41784 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2957 () Bool)

(declare-fun mapRes!2957 () Bool)

(assert (=> mapIsEmpty!2957 mapRes!2957))

(declare-fun mapNonEmpty!2957 () Bool)

(declare-fun tp!8141 () Bool)

(declare-fun e!41785 () Bool)

(assert (=> mapNonEmpty!2957 (= mapRes!2957 (and tp!8141 e!41785))))

(declare-fun mapValue!2957 () ValueCell!864)

(declare-fun mapRest!2957 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun mapKey!2957 () (_ BitVec 32))

(assert (=> mapNonEmpty!2957 (= mapRest!2956 (store mapRest!2957 mapKey!2957 mapValue!2957))))

(declare-fun b!63736 () Bool)

(assert (=> b!63736 (= e!41785 tp_is_empty!2415)))

(declare-fun condMapEmpty!2957 () Bool)

(declare-fun mapDefault!2957 () ValueCell!864)

(assert (=> mapNonEmpty!2956 (= condMapEmpty!2957 (= mapRest!2956 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2957)))))

(assert (=> mapNonEmpty!2956 (= tp!8140 (and e!41784 mapRes!2957))))

(assert (= (and mapNonEmpty!2956 condMapEmpty!2957) mapIsEmpty!2957))

(assert (= (and mapNonEmpty!2956 (not condMapEmpty!2957)) mapNonEmpty!2957))

(assert (= (and mapNonEmpty!2957 ((_ is ValueCellFull!864) mapValue!2957)) b!63736))

(assert (= (and mapNonEmpty!2956 ((_ is ValueCellFull!864) mapDefault!2957)) b!63737))

(declare-fun m!58137 () Bool)

(assert (=> mapNonEmpty!2957 m!58137))

(declare-fun b!63739 () Bool)

(declare-fun e!41786 () Bool)

(assert (=> b!63739 (= e!41786 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2958 () Bool)

(declare-fun mapRes!2958 () Bool)

(assert (=> mapIsEmpty!2958 mapRes!2958))

(declare-fun mapNonEmpty!2958 () Bool)

(declare-fun tp!8142 () Bool)

(declare-fun e!41787 () Bool)

(assert (=> mapNonEmpty!2958 (= mapRes!2958 (and tp!8142 e!41787))))

(declare-fun mapKey!2958 () (_ BitVec 32))

(declare-fun mapRest!2958 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun mapValue!2958 () ValueCell!864)

(assert (=> mapNonEmpty!2958 (= mapRest!2955 (store mapRest!2958 mapKey!2958 mapValue!2958))))

(declare-fun b!63738 () Bool)

(assert (=> b!63738 (= e!41787 tp_is_empty!2415)))

(declare-fun condMapEmpty!2958 () Bool)

(declare-fun mapDefault!2958 () ValueCell!864)

(assert (=> mapNonEmpty!2955 (= condMapEmpty!2958 (= mapRest!2955 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2958)))))

(assert (=> mapNonEmpty!2955 (= tp!8139 (and e!41786 mapRes!2958))))

(assert (= (and mapNonEmpty!2955 condMapEmpty!2958) mapIsEmpty!2958))

(assert (= (and mapNonEmpty!2955 (not condMapEmpty!2958)) mapNonEmpty!2958))

(assert (= (and mapNonEmpty!2958 ((_ is ValueCellFull!864) mapValue!2958)) b!63738))

(assert (= (and mapNonEmpty!2955 ((_ is ValueCellFull!864) mapDefault!2958)) b!63739))

(declare-fun m!58139 () Bool)

(assert (=> mapNonEmpty!2958 m!58139))

(declare-fun b_lambda!2847 () Bool)

(assert (= b_lambda!2829 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2847)))

(declare-fun b_lambda!2849 () Bool)

(assert (= b_lambda!2817 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2849)))

(declare-fun b_lambda!2851 () Bool)

(assert (= b_lambda!2821 (or (and b!62232 b_free!1997) (and b!62236 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))))) b_lambda!2851)))

(declare-fun b_lambda!2853 () Bool)

(assert (= b_lambda!2823 (or (and b!62232 b_free!1997) (and b!62236 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))))) b_lambda!2853)))

(declare-fun b_lambda!2855 () Bool)

(assert (= b_lambda!2837 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2855)))

(declare-fun b_lambda!2857 () Bool)

(assert (= b_lambda!2845 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2857)))

(declare-fun b_lambda!2859 () Bool)

(assert (= b_lambda!2833 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2859)))

(declare-fun b_lambda!2861 () Bool)

(assert (= b_lambda!2839 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2861)))

(declare-fun b_lambda!2863 () Bool)

(assert (= b_lambda!2841 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2863)))

(declare-fun b_lambda!2865 () Bool)

(assert (= b_lambda!2831 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2865)))

(declare-fun b_lambda!2867 () Bool)

(assert (= b_lambda!2819 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2867)))

(declare-fun b_lambda!2869 () Bool)

(assert (= b_lambda!2835 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2869)))

(declare-fun b_lambda!2871 () Bool)

(assert (= b_lambda!2843 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2871)))

(declare-fun b_lambda!2873 () Bool)

(assert (= b_lambda!2827 (or (and b!62232 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!234 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62236 b_free!1999) b_lambda!2873)))

(check-sat (not b!63466) (not d!13107) (not bm!4983) (not bm!5021) (not b!63199) (not b!63461) (not d!13257) (not d!12779) (not d!12895) (not b!63450) (not d!13033) (not b!63507) (not b!63333) (not d!13193) (not d!12845) (not b!63024) (not bm!4991) (not b!63108) (not b!62911) (not bm!5035) (not b!63463) (not b!63422) (not b!63645) (not d!12933) (not d!12963) (not b!63704) (not d!13275) (not b!63723) (not b!63710) (not bm!5029) (not b!63311) (not d!13115) (not d!12989) (not b!63388) (not d!13263) (not b!63001) (not d!13087) (not b_lambda!2807) (not b!63251) (not d!12839) (not b!63657) (not b!63709) (not b!63582) (not b!63521) (not b!63326) (not d!13225) (not b!63154) (not b!62964) (not b!63446) (not b_lambda!2847) (not b!63697) (not b!63522) (not b!63555) b_and!3899 (not b!63378) (not b!63238) (not b!63372) (not b_lambda!2857) (not b_next!1997) (not b!63695) (not b!63255) (not b!63564) (not b!63179) (not b!63073) (not b!63553) (not d!13237) (not b!62976) (not b!63335) (not b!63293) (not b!63009) (not b!63252) (not b!63437) (not b!63671) (not b!63193) (not bm!5045) (not bm!5036) (not bm!5038) (not d!13113) (not bm!5059) (not b!63078) (not bm!5015) (not d!13055) (not b!63635) (not b!63658) (not b!63440) (not d!12833) (not b!63185) (not d!12803) (not b!63682) (not d!13189) (not b!63099) (not d!13007) (not b!63035) (not b!63143) (not b!63711) (not d!13101) (not b!63147) (not bm!5047) (not b!63239) (not b!63072) (not b!63684) (not b!63471) (not b!63021) (not d!13121) (not b!63319) (not d!13171) (not d!13093) (not d!13273) (not d!12981) (not b!63220) (not b!63313) (not d!12785) (not b!63162) (not b!63532) (not b!63627) (not d!12901) (not b!62996) (not b!63088) (not d!12805) (not bm!4973) (not b_lambda!2795) (not d!12835) (not b!63502) (not b!63120) (not b!63642) (not b_lambda!2871) (not b!63714) (not b!63028) (not b!63082) (not b!63322) (not d!12837) (not d!12999) (not b!63545) (not d!12937) (not b!63565) (not b!63721) (not bm!5060) (not b!63069) (not b!63144) (not b!63689) (not d!12817) (not b!63358) (not b!63622) (not d!13249) (not b!63393) (not b!63122) (not b!63597) (not b!63091) (not b!63221) (not d!12843) (not b!63227) (not b!63373) (not d!13159) (not b!63369) (not d!12969) (not b!62912) (not b!62905) (not bm!5020) (not b!63332) (not d!13195) (not d!13259) (not b!63164) (not d!13017) (not b!63420) (not b!63296) (not b_lambda!2811) (not bm!4976) (not d!12931) (not d!13139) (not b!63700) (not d!13039) (not b!63611) (not b!62901) (not bm!5052) (not b!63385) (not b!63562) (not b!63500) (not b!63137) (not d!13265) (not b!63329) (not bm!5040) (not d!12987) (not d!13243) (not bm!5013) (not d!13137) (not d!12997) (not b!63105) (not b!62987) (not b!63275) (not d!12949) (not b!63242) (not d!12965) (not d!12885) (not d!13229) (not bm!5055) (not bm!4986) (not bm!5001) (not b!63380) (not d!13235) (not d!12829) (not b!62990) (not bm!4994) (not bm!5028) (not b!63284) (not b!63263) (not b!63399) (not bm!5039) (not b!63308) (not b!63401) (not d!13201) (not b!62917) (not b!63095) (not b!63212) (not b!63438) (not b!63106) (not b!63524) (not d!13119) (not b!63267) (not b!63223) (not b!63690) (not d!13221) (not b_lambda!2825) (not d!12853) (not d!13213) (not b!63007) (not b!63421) (not d!12883) (not d!13153) (not b!63174) (not d!13069) (not d!12977) (not b!63019) (not d!13177) (not b!63166) (not b!63430) (not b!63259) (not b!63268) (not d!12995) (not bm!5014) (not d!13223) (not d!13197) (not b!63659) (not b!63285) (not b!63353) (not b!63000) (not b!63304) (not b!63551) (not bm!5023) (not d!13105) (not b!63569) (not d!12787) (not d!12841) (not bm!4985) (not b!62914) (not d!13183) (not b!63676) (not b!62898) (not d!13041) (not b!63155) (not b!62999) (not d!12941) (not b!63098) (not b!62909) (not b!62995) (not d!13023) (not d!13205) (not d!12939) (not b!62998) (not bm!4972) (not b!63169) (not d!13241) (not d!12909) (not b!63568) (not b!63620) (not b!63133) (not b!63194) (not bm!4959) (not d!13135) (not b!63621) (not b!63365) (not b!63189) (not b!63303) (not d!13143) (not b!63432) (not b!63573) (not d!12899) (not d!12927) (not d!13131) (not bm!5061) (not b!63294) (not d!13199) (not bm!4995) (not d!13057) (not b!63089) (not d!13043) (not bm!5005) (not b!63626) (not d!12955) (not b!62986) (not bm!5002) (not bm!4998) (not b!62930) (not d!12991) (not b_lambda!2873) (not d!12959) (not bm!4979) (not bm!4974) (not d!12783) (not d!13141) (not b!63352) (not b!63434) (not d!13053) (not d!13157) (not bm!5048) (not bm!5044) (not b!62919) (not b!63286) (not bm!4992) (not b!63590) (not b!63733) (not b!62966) (not b!63409) (not d!13271) (not b!63381) (not b!63443) (not b!63426) (not d!13251) (not d!13061) (not d!13081) (not d!13049) (not d!13029) (not d!13031) (not b!62933) (not d!12857) (not d!12807) (not d!13003) (not d!13125) (not b_next!1999) (not d!12831) (not b!63092) (not b!63282) tp_is_empty!2415 (not b!62913) (not b_lambda!2813) (not d!12799) (not b!63629) (not b!63135) (not b!63030) (not b!63540) (not b!63016) (not b!63182) (not b!63109) (not mapNonEmpty!2957) (not b!63197) (not d!12847) (not bm!5024) (not b!62961) (not d!13277) (not b!63158) (not b!63651) (not b!63245) (not b!63598) (not d!12849) (not b_lambda!2849) (not b!63008) (not b!63196) (not b!63141) (not d!13047) (not d!12867) (not b!63006) (not d!13035) (not b!63660) (not bm!4993) (not b!63634) (not b!63272) (not b!63703) (not d!13103) (not b!63412) (not b!63498) (not d!13253) (not b!63666) (not d!13109) (not b_lambda!2815) (not b!63305) (not d!12993) (not b!63295) (not d!13167) (not d!12983) (not b!63544) (not b!63115) (not b!63249) (not bm!4962) (not d!12957) (not d!12819) (not d!12975) (not b_lambda!2855) (not bm!4987) (not b!63229) (not b!63724) (not b!63151) (not b!62989) (not b!63427) (not b!63595) (not b!63075) (not b!63632) (not b!63686) (not b!63032) (not b!63679) (not d!12887) (not b!63672) (not d!13025) (not d!13169) (not d!12855) (not b!63530) (not d!13133) (not b!63276) (not b!62968) (not d!13129) (not b!63732) (not d!12811) (not b!62988) (not d!13085) (not b!63604) (not b!63396) (not b!63413) (not b!62971) (not d!13009) (not b!63639) (not b!63132) (not b!63391) (not b!63415) (not d!12973) (not b!63648) (not b_lambda!2851) (not d!13001) (not b!63111) (not b!63693) (not b!63100) (not b!63608) (not d!12921) (not b!63696) (not d!13117) (not bm!5022) (not b!63066) (not d!12851) (not b!63664) (not b!63435) (not b!63541) (not b!63355) (not bm!5051) (not b!63172) (not bm!4969) (not b!63375) (not b!63188) (not b!63345) (not b!63661) (not b!63601) (not b_lambda!2861) (not b!63394) (not b_lambda!2859) (not d!12769) (not b!62969) (not d!13111) (not b!62982) (not d!13247) (not bm!4960) (not b!63117) (not bm!4975) (not b!63706) (not b!63547) (not b_lambda!2865) (not b!63128) (not b!63511) (not d!13215) (not b!63687) (not b!63423) (not b!63518) (not b!63669) (not b!63602) (not d!13149) (not b!63735) (not b!63650) (not b_lambda!2867) (not b!63707) (not d!12859) (not b!63316) (not d!13065) (not d!13097) (not d!12827) (not b!63402) (not d!13231) (not b!63699) (not b!63149) (not b!62979) (not b!63264) (not b!63301) (not b!62929) (not b!63230) (not d!12821) (not b!63652) (not bm!5030) b_and!3897 (not b!63469) (not b!63262) (not b!63338) (not bm!5009) (not b!63583) (not b!63424) (not b!63114) (not d!12777) (not d!12823) (not b!63406) (not b!63306) (not b!63452) (not b!63231) (not b!63013) (not b!63191) (not d!13005) (not b!63702) (not d!13173) (not d!12871) (not b!63517) (not b!62997) (not d!13127) (not b!63119) (not d!13181) (not b!63566) (not b_lambda!2809) (not b!63514) (not b!63340) (not b!63439) (not mapNonEmpty!2958) (not b!63041) (not b!63528) (not b!63138) (not b!62922) (not b!63097) (not d!13255) (not b!63080) (not b!63351) (not b!63240) (not bm!4984) (not d!12879) (not b!63454) (not b!63539) (not b!63610) (not b!63554) (not b!63453) (not d!13161) (not d!12893) (not b!63592) (not b!63265) (not b!63125) (not d!12935) (not b!63131) (not d!13261) (not b!63356) (not bm!5008) (not b!63042) (not d!13123) (not b!63314) (not b!62921) (not b!63531) (not b!63107) (not b!63348) (not d!13239) (not b!63619) (not b!63588) (not d!12919) (not b_lambda!2869) (not bm!5037) (not b!63436) (not b!63663) (not b!63725) (not d!13063) (not b_lambda!2791) (not b!63175) (not b!63414) (not bm!5046) (not b!63429) (not b!63585) (not d!13163) (not b!63094) (not b!63717) (not b!63715) (not b!63270) (not bm!4961) (not b!63167) (not b_lambda!2863) (not b!63361) (not b!63701) (not b!63278) (not d!13037) (not d!13279) (not d!12985) (not b!62992) (not b!63153) (not b!63625) (not d!13245) (not d!13209) (not b!63186) (not b!63444) (not d!13267) (not b!63321) (not bm!5031) (not d!12869) (not b!63309) (not b_lambda!2853) (not b!63010) (not b!63341) (not b!63612))
(check-sat b_and!3897 b_and!3899 (not b_next!1997) (not b_next!1999))
