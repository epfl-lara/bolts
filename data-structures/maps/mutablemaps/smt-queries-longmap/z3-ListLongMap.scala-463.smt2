; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8434 () Bool)

(assert start!8434)

(declare-fun b!57211 () Bool)

(declare-fun b_free!1949 () Bool)

(declare-fun b_next!1949 () Bool)

(assert (=> b!57211 (= b_free!1949 (not b_next!1949))))

(declare-fun tp!7951 () Bool)

(declare-fun b_and!3453 () Bool)

(assert (=> b!57211 (= tp!7951 b_and!3453)))

(declare-fun b!57210 () Bool)

(declare-fun b_free!1951 () Bool)

(declare-fun b_next!1951 () Bool)

(assert (=> b!57210 (= b_free!1951 (not b_next!1951))))

(declare-fun tp!7952 () Bool)

(declare-fun b_and!3455 () Bool)

(assert (=> b!57210 (= tp!7952 b_and!3455)))

(declare-fun b!57201 () Bool)

(declare-fun e!37717 () Bool)

(declare-fun tp_is_empty!2391 () Bool)

(assert (=> b!57201 (= e!37717 tp_is_empty!2391)))

(declare-fun b!57202 () Bool)

(declare-fun e!37709 () Bool)

(declare-fun e!37712 () Bool)

(assert (=> b!57202 (= e!37709 e!37712)))

(declare-fun b!57203 () Bool)

(declare-fun e!37719 () Bool)

(assert (=> b!57203 (= e!37719 tp_is_empty!2391)))

(declare-fun b!57204 () Bool)

(declare-fun res!32040 () Bool)

(declare-fun e!37716 () Bool)

(assert (=> b!57204 (=> (not res!32040) (not e!37716))))

(declare-datatypes ((V!2835 0))(
  ( (V!2836 (val!1240 Int)) )
))
(declare-datatypes ((array!3706 0))(
  ( (array!3707 (arr!1774 (Array (_ BitVec 32) (_ BitVec 64))) (size!2003 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!852 0))(
  ( (ValueCellFull!852 (v!2364 V!2835)) (EmptyCell!852) )
))
(declare-datatypes ((array!3708 0))(
  ( (array!3709 (arr!1775 (Array (_ BitVec 32) ValueCell!852)) (size!2004 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!612 0))(
  ( (LongMapFixedSize!613 (defaultEntry!2022 Int) (mask!5896 (_ BitVec 32)) (extraKeys!1913 (_ BitVec 32)) (zeroValue!1940 V!2835) (minValue!1940 V!2835) (_size!355 (_ BitVec 32)) (_keys!3642 array!3706) (_values!2005 array!3708) (_vacant!355 (_ BitVec 32))) )
))
(declare-fun newMap!16 () LongMapFixedSize!612)

(declare-fun valid!246 (LongMapFixedSize!612) Bool)

(assert (=> b!57204 (= res!32040 (valid!246 newMap!16))))

(declare-fun b!57205 () Bool)

(declare-fun e!37720 () Bool)

(declare-fun mapRes!2847 () Bool)

(assert (=> b!57205 (= e!37720 (and e!37719 mapRes!2847))))

(declare-fun condMapEmpty!2847 () Bool)

(declare-datatypes ((Cell!422 0))(
  ( (Cell!423 (v!2365 LongMapFixedSize!612)) )
))
(declare-datatypes ((LongMap!422 0))(
  ( (LongMap!423 (underlying!222 Cell!422)) )
))
(declare-fun thiss!992 () LongMap!422)

(declare-fun mapDefault!2848 () ValueCell!852)

(assert (=> b!57205 (= condMapEmpty!2847 (= (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2848)))))

(declare-fun mapIsEmpty!2847 () Bool)

(declare-fun mapRes!2848 () Bool)

(assert (=> mapIsEmpty!2847 mapRes!2848))

(declare-fun b!57206 () Bool)

(declare-fun e!37715 () Bool)

(assert (=> b!57206 (= e!37715 (not (= (size!2004 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5896 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!57207 () Bool)

(declare-fun res!32038 () Bool)

(assert (=> b!57207 (=> (not res!32038) (not e!37716))))

(assert (=> b!57207 (= res!32038 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5896 newMap!16)) (_size!355 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun b!57208 () Bool)

(declare-fun e!37713 () Bool)

(assert (=> b!57208 (= e!37716 e!37713)))

(declare-fun res!32036 () Bool)

(assert (=> b!57208 (=> (not res!32036) (not e!37713))))

(declare-datatypes ((tuple2!2038 0))(
  ( (tuple2!2039 (_1!1029 (_ BitVec 64)) (_2!1029 V!2835)) )
))
(declare-datatypes ((List!1449 0))(
  ( (Nil!1446) (Cons!1445 (h!2025 tuple2!2038) (t!4775 List!1449)) )
))
(declare-datatypes ((ListLongMap!1373 0))(
  ( (ListLongMap!1374 (toList!702 List!1449)) )
))
(declare-fun lt!22600 () ListLongMap!1373)

(declare-fun from!355 () (_ BitVec 32))

(declare-fun lt!22601 () ListLongMap!1373)

(assert (=> b!57208 (= res!32036 (and (= lt!22600 lt!22601) (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1104 (LongMapFixedSize!612) ListLongMap!1373)

(assert (=> b!57208 (= lt!22601 (map!1104 newMap!16))))

(declare-fun getCurrentListMap!400 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) Int) ListLongMap!1373)

(assert (=> b!57208 (= lt!22600 (getCurrentListMap!400 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun b!57209 () Bool)

(declare-fun res!32037 () Bool)

(assert (=> b!57209 (=> (not res!32037) (not e!37715))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!57209 (= res!32037 (validMask!0 (mask!5896 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun array_inv!1049 (array!3706) Bool)

(declare-fun array_inv!1050 (array!3708) Bool)

(assert (=> b!57211 (= e!37712 (and tp!7951 tp_is_empty!2391 (array_inv!1049 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (array_inv!1050 (_values!2005 (v!2365 (underlying!222 thiss!992)))) e!37720))))

(declare-fun mapNonEmpty!2847 () Bool)

(declare-fun tp!7954 () Bool)

(declare-fun e!37723 () Bool)

(assert (=> mapNonEmpty!2847 (= mapRes!2848 (and tp!7954 e!37723))))

(declare-fun mapValue!2847 () ValueCell!852)

(declare-fun mapKey!2848 () (_ BitVec 32))

(declare-fun mapRest!2847 () (Array (_ BitVec 32) ValueCell!852))

(assert (=> mapNonEmpty!2847 (= (arr!1775 (_values!2005 newMap!16)) (store mapRest!2847 mapKey!2848 mapValue!2847))))

(declare-fun mapIsEmpty!2848 () Bool)

(assert (=> mapIsEmpty!2848 mapRes!2847))

(declare-fun b!57212 () Bool)

(declare-datatypes ((Unit!1488 0))(
  ( (Unit!1489) )
))
(declare-fun e!37711 () Unit!1488)

(declare-fun Unit!1490 () Unit!1488)

(assert (=> b!57212 (= e!37711 Unit!1490)))

(declare-fun lt!22604 () Unit!1488)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!26 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) (_ BitVec 32) Int) Unit!1488)

(assert (=> b!57212 (= lt!22604 (lemmaListMapContainsThenArrayContainsFrom!26 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3706 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!57212 (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!22603 () Unit!1488)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3706 (_ BitVec 32) (_ BitVec 32)) Unit!1488)

(assert (=> b!57212 (= lt!22603 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1450 0))(
  ( (Nil!1447) (Cons!1446 (h!2026 (_ BitVec 64)) (t!4776 List!1450)) )
))
(declare-fun arrayNoDuplicates!0 (array!3706 (_ BitVec 32) List!1450) Bool)

(assert (=> b!57212 (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) from!355 Nil!1447)))

(declare-fun lt!22605 () Unit!1488)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3706 (_ BitVec 32) (_ BitVec 64) List!1450) Unit!1488)

(assert (=> b!57212 (= lt!22605 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447)))))

(assert (=> b!57212 false))

(declare-fun b!57213 () Bool)

(declare-fun e!37721 () Bool)

(assert (=> b!57213 (= e!37721 tp_is_empty!2391)))

(declare-fun mapNonEmpty!2848 () Bool)

(declare-fun tp!7953 () Bool)

(assert (=> mapNonEmpty!2848 (= mapRes!2847 (and tp!7953 e!37721))))

(declare-fun mapValue!2848 () ValueCell!852)

(declare-fun mapRest!2848 () (Array (_ BitVec 32) ValueCell!852))

(declare-fun mapKey!2847 () (_ BitVec 32))

(assert (=> mapNonEmpty!2848 (= (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (store mapRest!2848 mapKey!2847 mapValue!2848))))

(declare-fun b!57214 () Bool)

(assert (=> b!57214 (= e!37723 tp_is_empty!2391)))

(declare-fun b!57215 () Bool)

(declare-fun e!37710 () Bool)

(assert (=> b!57215 (= e!37710 e!37709)))

(declare-fun b!57216 () Bool)

(declare-fun res!32034 () Bool)

(assert (=> b!57216 (=> (not res!32034) (not e!37716))))

(assert (=> b!57216 (= res!32034 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!57217 () Bool)

(declare-fun Unit!1491 () Unit!1488)

(assert (=> b!57217 (= e!37711 Unit!1491)))

(declare-fun b!57218 () Bool)

(assert (=> b!57218 (= e!37713 e!37715)))

(declare-fun res!32039 () Bool)

(assert (=> b!57218 (=> (not res!32039) (not e!37715))))

(declare-datatypes ((tuple2!2040 0))(
  ( (tuple2!2041 (_1!1030 Bool) (_2!1030 LongMapFixedSize!612)) )
))
(declare-fun lt!22602 () tuple2!2040)

(assert (=> b!57218 (= res!32039 (and (_1!1030 lt!22602) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!22606 () Unit!1488)

(assert (=> b!57218 (= lt!22606 e!37711)))

(declare-fun c!7057 () Bool)

(declare-fun contains!688 (ListLongMap!1373 (_ BitVec 64)) Bool)

(assert (=> b!57218 (= c!7057 (contains!688 lt!22601 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun update!82 (LongMapFixedSize!612 (_ BitVec 64) V!2835) tuple2!2040)

(declare-fun get!1073 (ValueCell!852 V!2835) V!2835)

(declare-fun dynLambda!310 (Int (_ BitVec 64)) V!2835)

(assert (=> b!57218 (= lt!22602 (update!82 newMap!16 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!57219 () Bool)

(declare-fun e!37722 () Bool)

(assert (=> b!57219 (= e!37722 (and e!37717 mapRes!2848))))

(declare-fun condMapEmpty!2848 () Bool)

(declare-fun mapDefault!2847 () ValueCell!852)

(assert (=> b!57219 (= condMapEmpty!2848 (= (arr!1775 (_values!2005 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2847)))))

(declare-fun res!32035 () Bool)

(assert (=> start!8434 (=> (not res!32035) (not e!37716))))

(declare-fun valid!247 (LongMap!422) Bool)

(assert (=> start!8434 (= res!32035 (valid!247 thiss!992))))

(assert (=> start!8434 e!37716))

(assert (=> start!8434 e!37710))

(assert (=> start!8434 true))

(declare-fun e!37718 () Bool)

(assert (=> start!8434 e!37718))

(assert (=> b!57210 (= e!37718 (and tp!7952 tp_is_empty!2391 (array_inv!1049 (_keys!3642 newMap!16)) (array_inv!1050 (_values!2005 newMap!16)) e!37722))))

(assert (= (and start!8434 res!32035) b!57216))

(assert (= (and b!57216 res!32034) b!57204))

(assert (= (and b!57204 res!32040) b!57207))

(assert (= (and b!57207 res!32038) b!57208))

(assert (= (and b!57208 res!32036) b!57218))

(assert (= (and b!57218 c!7057) b!57212))

(assert (= (and b!57218 (not c!7057)) b!57217))

(assert (= (and b!57218 res!32039) b!57209))

(assert (= (and b!57209 res!32037) b!57206))

(assert (= (and b!57205 condMapEmpty!2847) mapIsEmpty!2848))

(assert (= (and b!57205 (not condMapEmpty!2847)) mapNonEmpty!2848))

(get-info :version)

(assert (= (and mapNonEmpty!2848 ((_ is ValueCellFull!852) mapValue!2848)) b!57213))

(assert (= (and b!57205 ((_ is ValueCellFull!852) mapDefault!2848)) b!57203))

(assert (= b!57211 b!57205))

(assert (= b!57202 b!57211))

(assert (= b!57215 b!57202))

(assert (= start!8434 b!57215))

(assert (= (and b!57219 condMapEmpty!2848) mapIsEmpty!2847))

(assert (= (and b!57219 (not condMapEmpty!2848)) mapNonEmpty!2847))

(assert (= (and mapNonEmpty!2847 ((_ is ValueCellFull!852) mapValue!2847)) b!57214))

(assert (= (and b!57219 ((_ is ValueCellFull!852) mapDefault!2847)) b!57201))

(assert (= b!57210 b!57219))

(assert (= start!8434 b!57210))

(declare-fun b_lambda!2511 () Bool)

(assert (=> (not b_lambda!2511) (not b!57218)))

(declare-fun t!4772 () Bool)

(declare-fun tb!1301 () Bool)

(assert (=> (and b!57211 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))) t!4772) tb!1301))

(declare-fun result!2347 () Bool)

(assert (=> tb!1301 (= result!2347 tp_is_empty!2391)))

(assert (=> b!57218 t!4772))

(declare-fun b_and!3457 () Bool)

(assert (= b_and!3453 (and (=> t!4772 result!2347) b_and!3457)))

(declare-fun t!4774 () Bool)

(declare-fun tb!1303 () Bool)

(assert (=> (and b!57210 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))) t!4774) tb!1303))

(declare-fun result!2351 () Bool)

(assert (= result!2351 result!2347))

(assert (=> b!57218 t!4774))

(declare-fun b_and!3459 () Bool)

(assert (= b_and!3455 (and (=> t!4774 result!2351) b_and!3459)))

(declare-fun m!48099 () Bool)

(assert (=> b!57218 m!48099))

(declare-fun m!48101 () Bool)

(assert (=> b!57218 m!48101))

(declare-fun m!48103 () Bool)

(assert (=> b!57218 m!48103))

(declare-fun m!48105 () Bool)

(assert (=> b!57218 m!48105))

(declare-fun m!48107 () Bool)

(assert (=> b!57218 m!48107))

(assert (=> b!57218 m!48105))

(assert (=> b!57218 m!48101))

(assert (=> b!57218 m!48105))

(assert (=> b!57218 m!48103))

(declare-fun m!48109 () Bool)

(assert (=> b!57218 m!48109))

(assert (=> b!57218 m!48099))

(declare-fun m!48111 () Bool)

(assert (=> b!57211 m!48111))

(declare-fun m!48113 () Bool)

(assert (=> b!57211 m!48113))

(declare-fun m!48115 () Bool)

(assert (=> b!57209 m!48115))

(declare-fun m!48117 () Bool)

(assert (=> b!57204 m!48117))

(declare-fun m!48119 () Bool)

(assert (=> mapNonEmpty!2847 m!48119))

(assert (=> b!57208 m!48105))

(declare-fun m!48121 () Bool)

(assert (=> b!57208 m!48121))

(declare-fun m!48123 () Bool)

(assert (=> b!57208 m!48123))

(declare-fun m!48125 () Bool)

(assert (=> mapNonEmpty!2848 m!48125))

(declare-fun m!48127 () Bool)

(assert (=> b!57210 m!48127))

(declare-fun m!48129 () Bool)

(assert (=> b!57210 m!48129))

(declare-fun m!48131 () Bool)

(assert (=> start!8434 m!48131))

(declare-fun m!48133 () Bool)

(assert (=> b!57212 m!48133))

(declare-fun m!48135 () Bool)

(assert (=> b!57212 m!48135))

(assert (=> b!57212 m!48105))

(declare-fun m!48137 () Bool)

(assert (=> b!57212 m!48137))

(assert (=> b!57212 m!48105))

(assert (=> b!57212 m!48105))

(declare-fun m!48139 () Bool)

(assert (=> b!57212 m!48139))

(assert (=> b!57212 m!48105))

(declare-fun m!48141 () Bool)

(assert (=> b!57212 m!48141))

(check-sat (not b!57210) (not start!8434) (not b!57212) b_and!3457 tp_is_empty!2391 (not b!57204) (not b!57211) (not b!57209) (not b!57208) (not mapNonEmpty!2848) (not mapNonEmpty!2847) (not b_next!1949) (not b_lambda!2511) (not b_next!1951) (not b!57218) b_and!3459)
(check-sat b_and!3457 b_and!3459 (not b_next!1949) (not b_next!1951))
(get-model)

(declare-fun b_lambda!2515 () Bool)

(assert (= b_lambda!2511 (or (and b!57211 b_free!1949) (and b!57210 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))))) b_lambda!2515)))

(check-sat (not b!57210) (not start!8434) (not b!57212) b_and!3457 tp_is_empty!2391 (not b!57204) (not b!57211) (not b!57209) (not b!57208) (not mapNonEmpty!2848) (not mapNonEmpty!2847) (not b_lambda!2515) (not b_next!1949) (not b_next!1951) (not b!57218) b_and!3459)
(check-sat b_and!3457 b_and!3459 (not b_next!1949) (not b_next!1951))
(get-model)

(declare-fun d!10567 () Bool)

(assert (=> d!10567 (not (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22630 () Unit!1488)

(declare-fun choose!68 (array!3706 (_ BitVec 32) (_ BitVec 64) List!1450) Unit!1488)

(assert (=> d!10567 (= lt!22630 (choose!68 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447)))))

(assert (=> d!10567 (bvslt (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!10567 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447)) lt!22630)))

(declare-fun bs!2477 () Bool)

(assert (= bs!2477 d!10567))

(assert (=> bs!2477 m!48105))

(assert (=> bs!2477 m!48139))

(assert (=> bs!2477 m!48105))

(declare-fun m!48187 () Bool)

(assert (=> bs!2477 m!48187))

(assert (=> b!57212 d!10567))

(declare-fun d!10569 () Bool)

(assert (=> d!10569 (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) from!355 Nil!1447)))

(declare-fun lt!22633 () Unit!1488)

(declare-fun choose!39 (array!3706 (_ BitVec 32) (_ BitVec 32)) Unit!1488)

(assert (=> d!10569 (= lt!22633 (choose!39 (_keys!3642 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!10569 (bvslt (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!10569 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000000 from!355) lt!22633)))

(declare-fun bs!2478 () Bool)

(assert (= bs!2478 d!10569))

(assert (=> bs!2478 m!48135))

(declare-fun m!48189 () Bool)

(assert (=> bs!2478 m!48189))

(assert (=> b!57212 d!10569))

(declare-fun d!10571 () Bool)

(declare-fun res!32066 () Bool)

(declare-fun e!37776 () Bool)

(assert (=> d!10571 (=> res!32066 e!37776)))

(assert (=> d!10571 (= res!32066 (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10571 (= (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!37776)))

(declare-fun b!57285 () Bool)

(declare-fun e!37777 () Bool)

(assert (=> b!57285 (= e!37776 e!37777)))

(declare-fun res!32067 () Bool)

(assert (=> b!57285 (=> (not res!32067) (not e!37777))))

(assert (=> b!57285 (= res!32067 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57286 () Bool)

(assert (=> b!57286 (= e!37777 (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!10571 (not res!32066)) b!57285))

(assert (= (and b!57285 res!32067) b!57286))

(declare-fun m!48191 () Bool)

(assert (=> d!10571 m!48191))

(assert (=> b!57286 m!48105))

(declare-fun m!48193 () Bool)

(assert (=> b!57286 m!48193))

(assert (=> b!57212 d!10571))

(declare-fun d!10573 () Bool)

(declare-fun e!37780 () Bool)

(assert (=> d!10573 e!37780))

(declare-fun c!7063 () Bool)

(assert (=> d!10573 (= c!7063 (and (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!22636 () Unit!1488)

(declare-fun choose!295 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) (_ BitVec 32) Int) Unit!1488)

(assert (=> d!10573 (= lt!22636 (choose!295 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))))))

(assert (=> d!10573 (validMask!0 (mask!5896 (v!2365 (underlying!222 thiss!992))))))

(assert (=> d!10573 (= (lemmaListMapContainsThenArrayContainsFrom!26 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))) lt!22636)))

(declare-fun b!57291 () Bool)

(assert (=> b!57291 (= e!37780 (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!57292 () Bool)

(assert (=> b!57292 (= e!37780 (ite (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!10573 c!7063) b!57291))

(assert (= (and d!10573 (not c!7063)) b!57292))

(assert (=> d!10573 m!48105))

(declare-fun m!48195 () Bool)

(assert (=> d!10573 m!48195))

(assert (=> d!10573 m!48115))

(assert (=> b!57291 m!48105))

(assert (=> b!57291 m!48139))

(assert (=> b!57212 d!10573))

(declare-fun b!57303 () Bool)

(declare-fun e!37790 () Bool)

(declare-fun call!4071 () Bool)

(assert (=> b!57303 (= e!37790 call!4071)))

(declare-fun b!57304 () Bool)

(declare-fun e!37792 () Bool)

(declare-fun e!37791 () Bool)

(assert (=> b!57304 (= e!37792 e!37791)))

(declare-fun res!32075 () Bool)

(assert (=> b!57304 (=> (not res!32075) (not e!37791))))

(declare-fun e!37789 () Bool)

(assert (=> b!57304 (= res!32075 (not e!37789))))

(declare-fun res!32074 () Bool)

(assert (=> b!57304 (=> (not res!32074) (not e!37789))))

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!57304 (= res!32074 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun d!10575 () Bool)

(declare-fun res!32076 () Bool)

(assert (=> d!10575 (=> res!32076 e!37792)))

(assert (=> d!10575 (= res!32076 (bvsge from!355 (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> d!10575 (= (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) from!355 Nil!1447) e!37792)))

(declare-fun b!57305 () Bool)

(assert (=> b!57305 (= e!37790 call!4071)))

(declare-fun b!57306 () Bool)

(assert (=> b!57306 (= e!37791 e!37790)))

(declare-fun c!7066 () Bool)

(assert (=> b!57306 (= c!7066 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57307 () Bool)

(declare-fun contains!689 (List!1450 (_ BitVec 64)) Bool)

(assert (=> b!57307 (= e!37789 (contains!689 Nil!1447 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun bm!4068 () Bool)

(assert (=> bm!4068 (= call!4071 (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)))))

(assert (= (and d!10575 (not res!32076)) b!57304))

(assert (= (and b!57304 res!32074) b!57307))

(assert (= (and b!57304 res!32075) b!57306))

(assert (= (and b!57306 c!7066) b!57305))

(assert (= (and b!57306 (not c!7066)) b!57303))

(assert (= (or b!57305 b!57303) bm!4068))

(assert (=> b!57304 m!48105))

(assert (=> b!57304 m!48105))

(declare-fun m!48197 () Bool)

(assert (=> b!57304 m!48197))

(assert (=> b!57306 m!48105))

(assert (=> b!57306 m!48105))

(assert (=> b!57306 m!48197))

(assert (=> b!57307 m!48105))

(assert (=> b!57307 m!48105))

(declare-fun m!48199 () Bool)

(assert (=> b!57307 m!48199))

(assert (=> bm!4068 m!48105))

(declare-fun m!48201 () Bool)

(assert (=> bm!4068 m!48201))

(assert (=> b!57212 d!10575))

(declare-fun d!10577 () Bool)

(assert (=> d!10577 (= (validMask!0 (mask!5896 (v!2365 (underlying!222 thiss!992)))) (and (or (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000001111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000011111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000001111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000011111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000001111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000011111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000001111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000011111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000001111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000011111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000001111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000011111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000111111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000001111111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000011111111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000111111111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000001111111111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000011111111111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000111111111111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00001111111111111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00011111111111111111111111111111) (= (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!57209 d!10577))

(declare-fun d!10579 () Bool)

(assert (=> d!10579 (= (map!1104 newMap!16) (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun bs!2479 () Bool)

(assert (= bs!2479 d!10579))

(declare-fun m!48203 () Bool)

(assert (=> bs!2479 m!48203))

(assert (=> b!57208 d!10579))

(declare-fun b!57350 () Bool)

(declare-fun e!37825 () Bool)

(declare-fun call!4088 () Bool)

(assert (=> b!57350 (= e!37825 (not call!4088))))

(declare-fun c!7079 () Bool)

(declare-fun call!4091 () ListLongMap!1373)

(declare-fun bm!4083 () Bool)

(declare-fun call!4090 () ListLongMap!1373)

(declare-fun call!4089 () ListLongMap!1373)

(declare-fun c!7082 () Bool)

(declare-fun call!4087 () ListLongMap!1373)

(declare-fun +!80 (ListLongMap!1373 tuple2!2038) ListLongMap!1373)

(assert (=> bm!4083 (= call!4089 (+!80 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087)) (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!57351 () Bool)

(declare-fun res!32098 () Bool)

(declare-fun e!37829 () Bool)

(assert (=> b!57351 (=> (not res!32098) (not e!37829))))

(declare-fun e!37830 () Bool)

(assert (=> b!57351 (= res!32098 e!37830)))

(declare-fun c!7081 () Bool)

(assert (=> b!57351 (= c!7081 (not (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4084 () Bool)

(assert (=> bm!4084 (= call!4087 call!4090)))

(declare-fun b!57352 () Bool)

(declare-fun e!37820 () Bool)

(assert (=> b!57352 (= e!37820 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!57353 () Bool)

(declare-fun call!4092 () Bool)

(assert (=> b!57353 (= e!37830 (not call!4092))))

(declare-fun d!10581 () Bool)

(assert (=> d!10581 e!37829))

(declare-fun res!32095 () Bool)

(assert (=> d!10581 (=> (not res!32095) (not e!37829))))

(assert (=> d!10581 (= res!32095 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun lt!22695 () ListLongMap!1373)

(declare-fun lt!22686 () ListLongMap!1373)

(assert (=> d!10581 (= lt!22695 lt!22686)))

(declare-fun lt!22690 () Unit!1488)

(declare-fun e!37827 () Unit!1488)

(assert (=> d!10581 (= lt!22690 e!37827)))

(declare-fun c!7083 () Bool)

(assert (=> d!10581 (= c!7083 e!37820)))

(declare-fun res!32102 () Bool)

(assert (=> d!10581 (=> (not res!32102) (not e!37820))))

(assert (=> d!10581 (= res!32102 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun e!37824 () ListLongMap!1373)

(assert (=> d!10581 (= lt!22686 e!37824)))

(assert (=> d!10581 (= c!7082 (and (not (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10581 (validMask!0 (mask!5896 (v!2365 (underlying!222 thiss!992))))))

(assert (=> d!10581 (= (getCurrentListMap!400 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))) lt!22695)))

(declare-fun b!57354 () Bool)

(declare-fun e!37831 () Bool)

(declare-fun apply!65 (ListLongMap!1373 (_ BitVec 64)) V!2835)

(assert (=> b!57354 (= e!37831 (= (apply!65 lt!22695 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun e!37819 () Bool)

(declare-fun b!57355 () Bool)

(assert (=> b!57355 (= e!37819 (= (apply!65 lt!22695 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57355 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_values!2005 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> b!57355 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57356 () Bool)

(declare-fun e!37822 () ListLongMap!1373)

(assert (=> b!57356 (= e!37822 call!4087)))

(declare-fun bm!4085 () Bool)

(declare-fun getCurrentListMapNoExtraKeys!43 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) Int) ListLongMap!1373)

(assert (=> bm!4085 (= call!4091 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun b!57357 () Bool)

(assert (=> b!57357 (= e!37824 (+!80 call!4089 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57358 () Bool)

(assert (=> b!57358 (= e!37825 e!37831)))

(declare-fun res!32096 () Bool)

(assert (=> b!57358 (= res!32096 call!4088)))

(assert (=> b!57358 (=> (not res!32096) (not e!37831))))

(declare-fun bm!4086 () Bool)

(assert (=> bm!4086 (= call!4092 (contains!688 lt!22695 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4087 () Bool)

(assert (=> bm!4087 (= call!4088 (contains!688 lt!22695 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57359 () Bool)

(assert (=> b!57359 (= e!37829 e!37825)))

(declare-fun c!7084 () Bool)

(assert (=> b!57359 (= c!7084 (not (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!57360 () Bool)

(declare-fun res!32100 () Bool)

(assert (=> b!57360 (=> (not res!32100) (not e!37829))))

(declare-fun e!37828 () Bool)

(assert (=> b!57360 (= res!32100 e!37828)))

(declare-fun res!32099 () Bool)

(assert (=> b!57360 (=> res!32099 e!37828)))

(declare-fun e!37821 () Bool)

(assert (=> b!57360 (= res!32099 (not e!37821))))

(declare-fun res!32103 () Bool)

(assert (=> b!57360 (=> (not res!32103) (not e!37821))))

(assert (=> b!57360 (= res!32103 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57361 () Bool)

(assert (=> b!57361 (= e!37828 e!37819)))

(declare-fun res!32097 () Bool)

(assert (=> b!57361 (=> (not res!32097) (not e!37819))))

(assert (=> b!57361 (= res!32097 (contains!688 lt!22695 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57361 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57362 () Bool)

(declare-fun lt!22696 () Unit!1488)

(assert (=> b!57362 (= e!37827 lt!22696)))

(declare-fun lt!22702 () ListLongMap!1373)

(assert (=> b!57362 (= lt!22702 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun lt!22684 () (_ BitVec 64))

(assert (=> b!57362 (= lt!22684 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22700 () (_ BitVec 64))

(assert (=> b!57362 (= lt!22700 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22701 () Unit!1488)

(declare-fun addStillContains!41 (ListLongMap!1373 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1488)

(assert (=> b!57362 (= lt!22701 (addStillContains!41 lt!22702 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22700))))

(assert (=> b!57362 (contains!688 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22700)))

(declare-fun lt!22697 () Unit!1488)

(assert (=> b!57362 (= lt!22697 lt!22701)))

(declare-fun lt!22694 () ListLongMap!1373)

(assert (=> b!57362 (= lt!22694 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun lt!22688 () (_ BitVec 64))

(assert (=> b!57362 (= lt!22688 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22681 () (_ BitVec 64))

(assert (=> b!57362 (= lt!22681 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22692 () Unit!1488)

(declare-fun addApplyDifferent!41 (ListLongMap!1373 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1488)

(assert (=> b!57362 (= lt!22692 (addApplyDifferent!41 lt!22694 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22681))))

(assert (=> b!57362 (= (apply!65 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22681) (apply!65 lt!22694 lt!22681))))

(declare-fun lt!22685 () Unit!1488)

(assert (=> b!57362 (= lt!22685 lt!22692)))

(declare-fun lt!22682 () ListLongMap!1373)

(assert (=> b!57362 (= lt!22682 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun lt!22698 () (_ BitVec 64))

(assert (=> b!57362 (= lt!22698 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22689 () (_ BitVec 64))

(assert (=> b!57362 (= lt!22689 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!22693 () Unit!1488)

(assert (=> b!57362 (= lt!22693 (addApplyDifferent!41 lt!22682 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22689))))

(assert (=> b!57362 (= (apply!65 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22689) (apply!65 lt!22682 lt!22689))))

(declare-fun lt!22699 () Unit!1488)

(assert (=> b!57362 (= lt!22699 lt!22693)))

(declare-fun lt!22691 () ListLongMap!1373)

(assert (=> b!57362 (= lt!22691 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun lt!22687 () (_ BitVec 64))

(assert (=> b!57362 (= lt!22687 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22683 () (_ BitVec 64))

(assert (=> b!57362 (= lt!22683 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!57362 (= lt!22696 (addApplyDifferent!41 lt!22691 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22683))))

(assert (=> b!57362 (= (apply!65 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22683) (apply!65 lt!22691 lt!22683))))

(declare-fun b!57363 () Bool)

(assert (=> b!57363 (= e!37821 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!57364 () Bool)

(declare-fun call!4086 () ListLongMap!1373)

(assert (=> b!57364 (= e!37822 call!4086)))

(declare-fun bm!4088 () Bool)

(assert (=> bm!4088 (= call!4086 call!4089)))

(declare-fun bm!4089 () Bool)

(assert (=> bm!4089 (= call!4090 call!4091)))

(declare-fun b!57365 () Bool)

(declare-fun e!37826 () Bool)

(assert (=> b!57365 (= e!37826 (= (apply!65 lt!22695 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun b!57366 () Bool)

(declare-fun e!37823 () ListLongMap!1373)

(assert (=> b!57366 (= e!37824 e!37823)))

(assert (=> b!57366 (= c!7079 (and (not (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!57367 () Bool)

(assert (=> b!57367 (= e!37823 call!4086)))

(declare-fun b!57368 () Bool)

(assert (=> b!57368 (= e!37830 e!37826)))

(declare-fun res!32101 () Bool)

(assert (=> b!57368 (= res!32101 call!4092)))

(assert (=> b!57368 (=> (not res!32101) (not e!37826))))

(declare-fun b!57369 () Bool)

(declare-fun Unit!1496 () Unit!1488)

(assert (=> b!57369 (= e!37827 Unit!1496)))

(declare-fun b!57370 () Bool)

(declare-fun c!7080 () Bool)

(assert (=> b!57370 (= c!7080 (and (not (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57370 (= e!37823 e!37822)))

(assert (= (and d!10581 c!7082) b!57357))

(assert (= (and d!10581 (not c!7082)) b!57366))

(assert (= (and b!57366 c!7079) b!57367))

(assert (= (and b!57366 (not c!7079)) b!57370))

(assert (= (and b!57370 c!7080) b!57364))

(assert (= (and b!57370 (not c!7080)) b!57356))

(assert (= (or b!57364 b!57356) bm!4084))

(assert (= (or b!57367 bm!4084) bm!4089))

(assert (= (or b!57367 b!57364) bm!4088))

(assert (= (or b!57357 bm!4089) bm!4085))

(assert (= (or b!57357 bm!4088) bm!4083))

(assert (= (and d!10581 res!32102) b!57352))

(assert (= (and d!10581 c!7083) b!57362))

(assert (= (and d!10581 (not c!7083)) b!57369))

(assert (= (and d!10581 res!32095) b!57360))

(assert (= (and b!57360 res!32103) b!57363))

(assert (= (and b!57360 (not res!32099)) b!57361))

(assert (= (and b!57361 res!32097) b!57355))

(assert (= (and b!57360 res!32100) b!57351))

(assert (= (and b!57351 c!7081) b!57368))

(assert (= (and b!57351 (not c!7081)) b!57353))

(assert (= (and b!57368 res!32101) b!57365))

(assert (= (or b!57368 b!57353) bm!4086))

(assert (= (and b!57351 res!32098) b!57359))

(assert (= (and b!57359 c!7084) b!57358))

(assert (= (and b!57359 (not c!7084)) b!57350))

(assert (= (and b!57358 res!32096) b!57354))

(assert (= (or b!57358 b!57350) bm!4087))

(declare-fun b_lambda!2517 () Bool)

(assert (=> (not b_lambda!2517) (not b!57355)))

(assert (=> b!57355 t!4772))

(declare-fun b_and!3469 () Bool)

(assert (= b_and!3457 (and (=> t!4772 result!2347) b_and!3469)))

(assert (=> b!57355 t!4774))

(declare-fun b_and!3471 () Bool)

(assert (= b_and!3459 (and (=> t!4774 result!2351) b_and!3471)))

(assert (=> b!57355 m!48101))

(declare-fun m!48205 () Bool)

(assert (=> b!57355 m!48205))

(assert (=> b!57355 m!48101))

(declare-fun m!48207 () Bool)

(assert (=> b!57355 m!48207))

(assert (=> b!57355 m!48191))

(assert (=> b!57355 m!48205))

(assert (=> b!57355 m!48191))

(declare-fun m!48209 () Bool)

(assert (=> b!57355 m!48209))

(declare-fun m!48211 () Bool)

(assert (=> bm!4086 m!48211))

(declare-fun m!48213 () Bool)

(assert (=> b!57362 m!48213))

(declare-fun m!48215 () Bool)

(assert (=> b!57362 m!48215))

(declare-fun m!48217 () Bool)

(assert (=> b!57362 m!48217))

(declare-fun m!48219 () Bool)

(assert (=> b!57362 m!48219))

(declare-fun m!48221 () Bool)

(assert (=> b!57362 m!48221))

(assert (=> b!57362 m!48213))

(declare-fun m!48223 () Bool)

(assert (=> b!57362 m!48223))

(declare-fun m!48225 () Bool)

(assert (=> b!57362 m!48225))

(declare-fun m!48227 () Bool)

(assert (=> b!57362 m!48227))

(declare-fun m!48229 () Bool)

(assert (=> b!57362 m!48229))

(assert (=> b!57362 m!48191))

(declare-fun m!48231 () Bool)

(assert (=> b!57362 m!48231))

(declare-fun m!48233 () Bool)

(assert (=> b!57362 m!48233))

(assert (=> b!57362 m!48219))

(declare-fun m!48235 () Bool)

(assert (=> b!57362 m!48235))

(declare-fun m!48237 () Bool)

(assert (=> b!57362 m!48237))

(assert (=> b!57362 m!48227))

(assert (=> b!57362 m!48221))

(declare-fun m!48239 () Bool)

(assert (=> b!57362 m!48239))

(declare-fun m!48241 () Bool)

(assert (=> b!57362 m!48241))

(declare-fun m!48243 () Bool)

(assert (=> b!57362 m!48243))

(assert (=> b!57363 m!48191))

(assert (=> b!57363 m!48191))

(declare-fun m!48245 () Bool)

(assert (=> b!57363 m!48245))

(assert (=> b!57361 m!48191))

(assert (=> b!57361 m!48191))

(declare-fun m!48247 () Bool)

(assert (=> b!57361 m!48247))

(declare-fun m!48249 () Bool)

(assert (=> bm!4083 m!48249))

(assert (=> bm!4085 m!48215))

(declare-fun m!48251 () Bool)

(assert (=> b!57365 m!48251))

(declare-fun m!48253 () Bool)

(assert (=> b!57354 m!48253))

(declare-fun m!48255 () Bool)

(assert (=> bm!4087 m!48255))

(assert (=> d!10581 m!48115))

(assert (=> b!57352 m!48191))

(assert (=> b!57352 m!48191))

(assert (=> b!57352 m!48245))

(declare-fun m!48257 () Bool)

(assert (=> b!57357 m!48257))

(assert (=> b!57208 d!10581))

(declare-fun d!10583 () Bool)

(declare-fun res!32110 () Bool)

(declare-fun e!37834 () Bool)

(assert (=> d!10583 (=> (not res!32110) (not e!37834))))

(declare-fun simpleValid!40 (LongMapFixedSize!612) Bool)

(assert (=> d!10583 (= res!32110 (simpleValid!40 newMap!16))))

(assert (=> d!10583 (= (valid!246 newMap!16) e!37834)))

(declare-fun b!57377 () Bool)

(declare-fun res!32111 () Bool)

(assert (=> b!57377 (=> (not res!32111) (not e!37834))))

(declare-fun arrayCountValidKeys!0 (array!3706 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!57377 (= res!32111 (= (arrayCountValidKeys!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (_size!355 newMap!16)))))

(declare-fun b!57378 () Bool)

(declare-fun res!32112 () Bool)

(assert (=> b!57378 (=> (not res!32112) (not e!37834))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3706 (_ BitVec 32)) Bool)

(assert (=> b!57378 (= res!32112 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun b!57379 () Bool)

(assert (=> b!57379 (= e!37834 (arrayNoDuplicates!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 Nil!1447))))

(assert (= (and d!10583 res!32110) b!57377))

(assert (= (and b!57377 res!32111) b!57378))

(assert (= (and b!57378 res!32112) b!57379))

(declare-fun m!48259 () Bool)

(assert (=> d!10583 m!48259))

(declare-fun m!48261 () Bool)

(assert (=> b!57377 m!48261))

(declare-fun m!48263 () Bool)

(assert (=> b!57378 m!48263))

(declare-fun m!48265 () Bool)

(assert (=> b!57379 m!48265))

(assert (=> b!57204 d!10583))

(declare-fun d!10585 () Bool)

(assert (=> d!10585 (= (array_inv!1049 (_keys!3642 newMap!16)) (bvsge (size!2003 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57210 d!10585))

(declare-fun d!10587 () Bool)

(assert (=> d!10587 (= (array_inv!1050 (_values!2005 newMap!16)) (bvsge (size!2004 (_values!2005 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57210 d!10587))

(declare-fun d!10589 () Bool)

(declare-fun e!37840 () Bool)

(assert (=> d!10589 e!37840))

(declare-fun res!32115 () Bool)

(assert (=> d!10589 (=> res!32115 e!37840)))

(declare-fun lt!22711 () Bool)

(assert (=> d!10589 (= res!32115 (not lt!22711))))

(declare-fun lt!22712 () Bool)

(assert (=> d!10589 (= lt!22711 lt!22712)))

(declare-fun lt!22714 () Unit!1488)

(declare-fun e!37839 () Unit!1488)

(assert (=> d!10589 (= lt!22714 e!37839)))

(declare-fun c!7087 () Bool)

(assert (=> d!10589 (= c!7087 lt!22712)))

(declare-fun containsKey!126 (List!1449 (_ BitVec 64)) Bool)

(assert (=> d!10589 (= lt!22712 (containsKey!126 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10589 (= (contains!688 lt!22601 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) lt!22711)))

(declare-fun b!57386 () Bool)

(declare-fun lt!22713 () Unit!1488)

(assert (=> b!57386 (= e!37839 lt!22713)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!75 (List!1449 (_ BitVec 64)) Unit!1488)

(assert (=> b!57386 (= lt!22713 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-datatypes ((Option!128 0))(
  ( (Some!127 (v!2369 V!2835)) (None!126) )
))
(declare-fun isDefined!76 (Option!128) Bool)

(declare-fun getValueByKey!122 (List!1449 (_ BitVec 64)) Option!128)

(assert (=> b!57386 (isDefined!76 (getValueByKey!122 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57387 () Bool)

(declare-fun Unit!1497 () Unit!1488)

(assert (=> b!57387 (= e!37839 Unit!1497)))

(declare-fun b!57388 () Bool)

(assert (=> b!57388 (= e!37840 (isDefined!76 (getValueByKey!122 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (= (and d!10589 c!7087) b!57386))

(assert (= (and d!10589 (not c!7087)) b!57387))

(assert (= (and d!10589 (not res!32115)) b!57388))

(assert (=> d!10589 m!48105))

(declare-fun m!48267 () Bool)

(assert (=> d!10589 m!48267))

(assert (=> b!57386 m!48105))

(declare-fun m!48269 () Bool)

(assert (=> b!57386 m!48269))

(assert (=> b!57386 m!48105))

(declare-fun m!48271 () Bool)

(assert (=> b!57386 m!48271))

(assert (=> b!57386 m!48271))

(declare-fun m!48273 () Bool)

(assert (=> b!57386 m!48273))

(assert (=> b!57388 m!48105))

(assert (=> b!57388 m!48271))

(assert (=> b!57388 m!48271))

(assert (=> b!57388 m!48273))

(assert (=> b!57218 d!10589))

(declare-fun bm!4138 () Bool)

(declare-fun call!4161 () ListLongMap!1373)

(declare-fun lt!22784 () tuple2!2040)

(assert (=> bm!4138 (= call!4161 (map!1104 (_2!1030 lt!22784)))))

(declare-fun b!57473 () Bool)

(declare-fun e!37885 () Unit!1488)

(declare-fun lt!22769 () Unit!1488)

(assert (=> b!57473 (= e!37885 lt!22769)))

(declare-fun call!4152 () Unit!1488)

(assert (=> b!57473 (= lt!22769 call!4152)))

(declare-datatypes ((SeekEntryResult!236 0))(
  ( (MissingZero!236 (index!3066 (_ BitVec 32))) (Found!236 (index!3067 (_ BitVec 32))) (Intermediate!236 (undefined!1048 Bool) (index!3068 (_ BitVec 32)) (x!9868 (_ BitVec 32))) (Undefined!236) (MissingVacant!236 (index!3069 (_ BitVec 32))) )
))
(declare-fun lt!22786 () SeekEntryResult!236)

(declare-fun call!4164 () SeekEntryResult!236)

(assert (=> b!57473 (= lt!22786 call!4164)))

(declare-fun c!7128 () Bool)

(assert (=> b!57473 (= c!7128 ((_ is MissingZero!236) lt!22786))))

(declare-fun e!37895 () Bool)

(assert (=> b!57473 e!37895))

(declare-fun call!4144 () Bool)

(declare-fun bm!4139 () Bool)

(assert (=> bm!4139 (= call!4144 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!57475 () Bool)

(declare-fun lt!22789 () Unit!1488)

(declare-fun lt!22773 () Unit!1488)

(assert (=> b!57475 (= lt!22789 lt!22773)))

(declare-fun call!4150 () ListLongMap!1373)

(declare-fun call!4141 () ListLongMap!1373)

(assert (=> b!57475 (= call!4150 call!4141)))

(declare-fun lt!22790 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!14 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 V!2835 Int) Unit!1488)

(assert (=> b!57475 (= lt!22773 (lemmaChangeZeroKeyThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22790 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) (defaultEntry!2022 newMap!16)))))

(assert (=> b!57475 (= lt!22790 (bvor (extraKeys!1913 newMap!16) #b00000000000000000000000000000001))))

(declare-fun e!37894 () tuple2!2040)

(assert (=> b!57475 (= e!37894 (tuple2!2041 true (LongMapFixedSize!613 (defaultEntry!2022 newMap!16) (mask!5896 newMap!16) (bvor (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) (_size!355 newMap!16) (_keys!3642 newMap!16) (_values!2005 newMap!16) (_vacant!355 newMap!16))))))

(declare-fun b!57476 () Bool)

(declare-fun e!37902 () Bool)

(declare-fun call!4160 () Bool)

(assert (=> b!57476 (= e!37902 (not call!4160))))

(declare-fun bm!4140 () Bool)

(declare-fun c!7116 () Bool)

(declare-fun c!7122 () Bool)

(assert (=> bm!4140 (= c!7116 c!7122)))

(declare-fun e!37903 () ListLongMap!1373)

(declare-fun call!4143 () Bool)

(declare-fun lt!22774 () SeekEntryResult!236)

(assert (=> bm!4140 (= call!4143 (contains!688 e!37903 (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))

(declare-fun bm!4141 () Bool)

(declare-fun call!4155 () Bool)

(declare-fun call!4153 () Bool)

(assert (=> bm!4141 (= call!4155 call!4153)))

(declare-fun bm!4142 () Bool)

(declare-fun call!4149 () SeekEntryResult!236)

(assert (=> bm!4142 (= call!4164 call!4149)))

(declare-fun bm!4143 () Bool)

(declare-fun call!4163 () ListLongMap!1373)

(assert (=> bm!4143 (= call!4150 call!4163)))

(declare-fun lt!22782 () SeekEntryResult!236)

(declare-fun c!7120 () Bool)

(declare-fun lt!22779 () SeekEntryResult!236)

(declare-fun c!7118 () Bool)

(declare-fun bm!4144 () Bool)

(declare-fun call!4145 () Bool)

(declare-fun lt!22777 () SeekEntryResult!236)

(declare-fun c!7119 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4144 (= call!4145 (inRange!0 (ite c!7122 (ite c!7120 (index!3067 lt!22782) (ite c!7128 (index!3066 lt!22786) (index!3069 lt!22786))) (ite c!7118 (index!3067 lt!22777) (ite c!7119 (index!3066 lt!22779) (index!3069 lt!22779)))) (mask!5896 newMap!16)))))

(declare-fun b!57477 () Bool)

(declare-fun e!37891 () tuple2!2040)

(declare-fun lt!22793 () tuple2!2040)

(assert (=> b!57477 (= e!37891 (tuple2!2041 (_1!1030 lt!22793) (_2!1030 lt!22793)))))

(declare-fun call!4146 () tuple2!2040)

(assert (=> b!57477 (= lt!22793 call!4146)))

(declare-fun call!4162 () Unit!1488)

(declare-fun bm!4145 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) Int) Unit!1488)

(assert (=> bm!4145 (= call!4162 (lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(declare-fun b!57478 () Bool)

(declare-fun c!7126 () Bool)

(assert (=> b!57478 (= c!7126 ((_ is MissingVacant!236) lt!22779))))

(declare-fun e!37887 () Bool)

(declare-fun e!37896 () Bool)

(assert (=> b!57478 (= e!37887 e!37896)))

(declare-fun e!37898 () ListLongMap!1373)

(declare-fun c!7124 () Bool)

(declare-fun c!7127 () Bool)

(declare-fun bm!4146 () Bool)

(assert (=> bm!4146 (= call!4163 (+!80 e!37898 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!7121 () Bool)

(assert (=> bm!4146 (= c!7121 c!7124)))

(declare-fun b!57479 () Bool)

(assert (=> b!57479 (= e!37896 e!37902)))

(declare-fun res!32154 () Bool)

(declare-fun call!4142 () Bool)

(assert (=> b!57479 (= res!32154 call!4142)))

(assert (=> b!57479 (=> (not res!32154) (not e!37902))))

(declare-fun bm!4147 () Bool)

(declare-fun call!4156 () ListLongMap!1373)

(assert (=> bm!4147 (= call!4141 call!4156)))

(declare-fun bm!4148 () Bool)

(declare-fun call!4157 () SeekEntryResult!236)

(assert (=> bm!4148 (= call!4157 call!4149)))

(declare-fun b!57480 () Bool)

(declare-fun Unit!1498 () Unit!1488)

(assert (=> b!57480 (= e!37885 Unit!1498)))

(declare-fun lt!22791 () Unit!1488)

(assert (=> b!57480 (= lt!22791 call!4162)))

(assert (=> b!57480 (= lt!22782 call!4164)))

(declare-fun res!32148 () Bool)

(assert (=> b!57480 (= res!32148 ((_ is Found!236) lt!22782))))

(declare-fun e!37906 () Bool)

(assert (=> b!57480 (=> (not res!32148) (not e!37906))))

(assert (=> b!57480 e!37906))

(declare-fun lt!22780 () Unit!1488)

(assert (=> b!57480 (= lt!22780 lt!22791)))

(assert (=> b!57480 false))

(declare-fun bm!4149 () Bool)

(declare-fun call!4147 () ListLongMap!1373)

(declare-fun call!4158 () ListLongMap!1373)

(assert (=> bm!4149 (= call!4147 call!4158)))

(declare-fun b!57481 () Bool)

(declare-fun e!37905 () Bool)

(declare-fun call!4154 () Bool)

(assert (=> b!57481 (= e!37905 (not call!4154))))

(declare-fun b!57482 () Bool)

(declare-fun e!37890 () Bool)

(assert (=> b!57482 (= e!37890 e!37905)))

(declare-fun res!32155 () Bool)

(assert (=> b!57482 (= res!32155 call!4155)))

(assert (=> b!57482 (=> (not res!32155) (not e!37905))))

(declare-fun b!57483 () Bool)

(declare-fun e!37897 () Bool)

(assert (=> b!57483 (= e!37897 (not call!4154))))

(declare-fun b!57484 () Bool)

(declare-fun res!32153 () Bool)

(assert (=> b!57484 (= res!32153 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3069 lt!22779)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57484 (=> (not res!32153) (not e!37902))))

(declare-fun bm!4150 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) Int) Unit!1488)

(assert (=> bm!4150 (= call!4152 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(declare-fun b!57485 () Bool)

(declare-fun e!37889 () tuple2!2040)

(assert (=> b!57485 (= e!37891 e!37889)))

(declare-fun c!7117 () Bool)

(assert (=> b!57485 (= c!7117 ((_ is MissingZero!236) lt!22774))))

(declare-fun b!57486 () Bool)

(declare-fun lt!22778 () tuple2!2040)

(assert (=> b!57486 (= lt!22778 call!4146)))

(assert (=> b!57486 (= e!37889 (tuple2!2041 (_1!1030 lt!22778) (_2!1030 lt!22778)))))

(declare-fun b!57487 () Bool)

(declare-fun e!37900 () Bool)

(assert (=> b!57487 (= e!37900 (not call!4160))))

(declare-fun bm!4151 () Bool)

(assert (=> bm!4151 (= call!4154 call!4144)))

(declare-fun b!57488 () Bool)

(declare-fun e!37893 () Unit!1488)

(declare-fun lt!22781 () Unit!1488)

(assert (=> b!57488 (= e!37893 lt!22781)))

(assert (=> b!57488 (= lt!22781 call!4162)))

(assert (=> b!57488 (= lt!22777 call!4157)))

(declare-fun res!32144 () Bool)

(assert (=> b!57488 (= res!32144 ((_ is Found!236) lt!22777))))

(declare-fun e!37899 () Bool)

(assert (=> b!57488 (=> (not res!32144) (not e!37899))))

(assert (=> b!57488 e!37899))

(declare-fun b!57489 () Bool)

(declare-fun lt!22775 () Unit!1488)

(declare-fun lt!22792 () Unit!1488)

(assert (=> b!57489 (= lt!22775 lt!22792)))

(assert (=> b!57489 call!4143))

(declare-fun lt!22772 () array!3708)

(declare-fun lemmaValidKeyInArrayIsInListMap!72 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) Int) Unit!1488)

(assert (=> b!57489 (= lt!22792 (lemmaValidKeyInArrayIsInListMap!72 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3067 lt!22774) (defaultEntry!2022 newMap!16)))))

(assert (=> b!57489 (= lt!22772 (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))))

(declare-fun lt!22771 () Unit!1488)

(declare-fun lt!22787 () Unit!1488)

(assert (=> b!57489 (= lt!22771 lt!22787)))

(assert (=> b!57489 (= call!4163 call!4147)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!14 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) (_ BitVec 64) V!2835 Int) Unit!1488)

(assert (=> b!57489 (= lt!22787 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3067 lt!22774) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22794 () Unit!1488)

(assert (=> b!57489 (= lt!22794 e!37893)))

(assert (=> b!57489 (= c!7118 (contains!688 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!57489 (= e!37889 (tuple2!2041 true (LongMapFixedSize!613 (defaultEntry!2022 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (_size!355 newMap!16) (_keys!3642 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (_vacant!355 newMap!16))))))

(declare-fun b!57490 () Bool)

(declare-fun call!4159 () ListLongMap!1373)

(assert (=> b!57490 (= e!37898 call!4159)))

(declare-fun bm!4152 () Bool)

(assert (=> bm!4152 (= call!4158 (getCurrentListMap!400 (_keys!3642 newMap!16) (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun bm!4153 () Bool)

(declare-fun c!7123 () Bool)

(declare-fun updateHelperNewKey!14 (LongMapFixedSize!612 (_ BitVec 64) V!2835 (_ BitVec 32)) tuple2!2040)

(assert (=> bm!4153 (= call!4146 (updateHelperNewKey!14 newMap!16 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774))))))

(declare-fun b!57491 () Bool)

(declare-fun res!32157 () Bool)

(assert (=> b!57491 (=> (not res!32157) (not e!37897))))

(assert (=> b!57491 (= res!32157 call!4155)))

(assert (=> b!57491 (= e!37895 e!37897)))

(declare-fun b!57492 () Bool)

(declare-fun res!32149 () Bool)

(assert (=> b!57492 (= res!32149 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3069 lt!22786)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57492 (=> (not res!32149) (not e!37905))))

(declare-fun bm!4154 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3706 (_ BitVec 32)) SeekEntryResult!236)

(assert (=> bm!4154 (= call!4149 (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun bm!4155 () Bool)

(assert (=> bm!4155 (= call!4153 call!4145)))

(declare-fun b!57493 () Bool)

(declare-fun lt!22788 () Unit!1488)

(declare-fun lt!22783 () Unit!1488)

(assert (=> b!57493 (= lt!22788 lt!22783)))

(assert (=> b!57493 (= call!4150 call!4141)))

(declare-fun lt!22795 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!14 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 V!2835 Int) Unit!1488)

(assert (=> b!57493 (= lt!22783 (lemmaChangeLongMinValueKeyThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(assert (=> b!57493 (= lt!22795 (bvor (extraKeys!1913 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!57493 (= e!37894 (tuple2!2041 true (LongMapFixedSize!613 (defaultEntry!2022 newMap!16) (mask!5896 newMap!16) (bvor (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!355 newMap!16) (_keys!3642 newMap!16) (_values!2005 newMap!16) (_vacant!355 newMap!16))))))

(declare-fun b!57494 () Bool)

(declare-fun e!37901 () Bool)

(declare-fun call!4151 () ListLongMap!1373)

(assert (=> b!57494 (= e!37901 (= call!4161 call!4151))))

(declare-fun b!57495 () Bool)

(declare-fun res!32156 () Bool)

(assert (=> b!57495 (=> (not res!32156) (not e!37900))))

(assert (=> b!57495 (= res!32156 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3066 lt!22779)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57496 () Bool)

(declare-fun lt!22776 () Unit!1488)

(assert (=> b!57496 (= lt!22776 e!37885)))

(assert (=> b!57496 (= c!7120 call!4143)))

(declare-fun e!37892 () tuple2!2040)

(assert (=> b!57496 (= e!37892 (tuple2!2041 false newMap!16))))

(declare-fun b!57497 () Bool)

(declare-fun res!32145 () Bool)

(assert (=> b!57497 (=> (not res!32145) (not e!37897))))

(assert (=> b!57497 (= res!32145 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3066 lt!22786)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57474 () Bool)

(assert (=> b!57474 (= e!37906 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22782)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun d!10591 () Bool)

(declare-fun e!37904 () Bool)

(assert (=> d!10591 e!37904))

(declare-fun res!32150 () Bool)

(assert (=> d!10591 (=> (not res!32150) (not e!37904))))

(assert (=> d!10591 (= res!32150 (valid!246 (_2!1030 lt!22784)))))

(declare-fun e!37886 () tuple2!2040)

(assert (=> d!10591 (= lt!22784 e!37886)))

(assert (=> d!10591 (= c!7124 (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvneg (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10591 (valid!246 newMap!16)))

(assert (=> d!10591 (= (update!82 newMap!16 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!22784)))

(declare-fun b!57498 () Bool)

(assert (=> b!57498 (= e!37896 ((_ is Undefined!236) lt!22779))))

(declare-fun bm!4156 () Bool)

(assert (=> bm!4156 (= call!4160 call!4144)))

(declare-fun b!57499 () Bool)

(assert (=> b!57499 (= e!37903 call!4156)))

(declare-fun b!57500 () Bool)

(assert (=> b!57500 (= e!37890 ((_ is Undefined!236) lt!22786))))

(declare-fun bm!4157 () Bool)

(declare-fun call!4148 () Bool)

(assert (=> bm!4157 (= call!4142 call!4148)))

(declare-fun b!57501 () Bool)

(assert (=> b!57501 (= e!37903 call!4147)))

(declare-fun b!57502 () Bool)

(declare-fun res!32152 () Bool)

(assert (=> b!57502 (= res!32152 call!4153)))

(assert (=> b!57502 (=> (not res!32152) (not e!37906))))

(declare-fun b!57503 () Bool)

(declare-fun c!7125 () Bool)

(assert (=> b!57503 (= c!7125 ((_ is MissingVacant!236) lt!22786))))

(assert (=> b!57503 (= e!37895 e!37890)))

(declare-fun b!57504 () Bool)

(assert (=> b!57504 (= e!37898 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun bm!4158 () Bool)

(assert (=> bm!4158 (= call!4151 (map!1104 newMap!16))))

(declare-fun bm!4159 () Bool)

(assert (=> bm!4159 (= call!4159 call!4158)))

(declare-fun b!57505 () Bool)

(assert (=> b!57505 (= e!37904 e!37901)))

(declare-fun c!7129 () Bool)

(assert (=> b!57505 (= c!7129 (_1!1030 lt!22784))))

(declare-fun b!57506 () Bool)

(assert (=> b!57506 (= e!37886 e!37894)))

(assert (=> b!57506 (= c!7127 (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4160 () Bool)

(assert (=> bm!4160 (= call!4148 call!4145)))

(declare-fun b!57507 () Bool)

(assert (=> b!57507 (= c!7123 ((_ is MissingVacant!236) lt!22774))))

(assert (=> b!57507 (= e!37892 e!37891)))

(declare-fun b!57508 () Bool)

(assert (=> b!57508 (= e!37886 e!37892)))

(assert (=> b!57508 (= lt!22774 (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (=> b!57508 (= c!7122 ((_ is Undefined!236) lt!22774))))

(declare-fun bm!4161 () Bool)

(assert (=> bm!4161 (= call!4156 (getCurrentListMap!400 (_keys!3642 newMap!16) (ite c!7124 (_values!2005 newMap!16) lt!22772) (mask!5896 newMap!16) (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!57509 () Bool)

(declare-fun e!37888 () Bool)

(assert (=> b!57509 (= e!37901 e!37888)))

(declare-fun res!32146 () Bool)

(assert (=> b!57509 (= res!32146 (contains!688 call!4161 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!57509 (=> (not res!32146) (not e!37888))))

(declare-fun b!57510 () Bool)

(declare-fun res!32151 () Bool)

(assert (=> b!57510 (= res!32151 call!4148)))

(assert (=> b!57510 (=> (not res!32151) (not e!37899))))

(declare-fun b!57511 () Bool)

(declare-fun res!32147 () Bool)

(assert (=> b!57511 (=> (not res!32147) (not e!37900))))

(assert (=> b!57511 (= res!32147 call!4142)))

(assert (=> b!57511 (= e!37887 e!37900)))

(declare-fun b!57512 () Bool)

(assert (=> b!57512 (= e!37888 (= call!4161 (+!80 call!4151 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!57513 () Bool)

(declare-fun Unit!1499 () Unit!1488)

(assert (=> b!57513 (= e!37893 Unit!1499)))

(declare-fun lt!22770 () Unit!1488)

(assert (=> b!57513 (= lt!22770 call!4152)))

(assert (=> b!57513 (= lt!22779 call!4157)))

(assert (=> b!57513 (= c!7119 ((_ is MissingZero!236) lt!22779))))

(assert (=> b!57513 e!37887))

(declare-fun lt!22785 () Unit!1488)

(assert (=> b!57513 (= lt!22785 lt!22770)))

(assert (=> b!57513 false))

(declare-fun b!57514 () Bool)

(assert (=> b!57514 (= e!37899 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22777)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10591 c!7124) b!57506))

(assert (= (and d!10591 (not c!7124)) b!57508))

(assert (= (and b!57506 c!7127) b!57475))

(assert (= (and b!57506 (not c!7127)) b!57493))

(assert (= (or b!57475 b!57493) bm!4147))

(assert (= (or b!57475 b!57493) bm!4159))

(assert (= (or b!57475 b!57493) bm!4143))

(assert (= (and b!57508 c!7122) b!57496))

(assert (= (and b!57508 (not c!7122)) b!57507))

(assert (= (and b!57496 c!7120) b!57480))

(assert (= (and b!57496 (not c!7120)) b!57473))

(assert (= (and b!57480 res!32148) b!57502))

(assert (= (and b!57502 res!32152) b!57474))

(assert (= (and b!57473 c!7128) b!57491))

(assert (= (and b!57473 (not c!7128)) b!57503))

(assert (= (and b!57491 res!32157) b!57497))

(assert (= (and b!57497 res!32145) b!57483))

(assert (= (and b!57503 c!7125) b!57482))

(assert (= (and b!57503 (not c!7125)) b!57500))

(assert (= (and b!57482 res!32155) b!57492))

(assert (= (and b!57492 res!32149) b!57481))

(assert (= (or b!57491 b!57482) bm!4141))

(assert (= (or b!57483 b!57481) bm!4151))

(assert (= (or b!57502 bm!4141) bm!4155))

(assert (= (or b!57480 b!57473) bm!4142))

(assert (= (and b!57507 c!7123) b!57477))

(assert (= (and b!57507 (not c!7123)) b!57485))

(assert (= (and b!57485 c!7117) b!57486))

(assert (= (and b!57485 (not c!7117)) b!57489))

(assert (= (and b!57489 c!7118) b!57488))

(assert (= (and b!57489 (not c!7118)) b!57513))

(assert (= (and b!57488 res!32144) b!57510))

(assert (= (and b!57510 res!32151) b!57514))

(assert (= (and b!57513 c!7119) b!57511))

(assert (= (and b!57513 (not c!7119)) b!57478))

(assert (= (and b!57511 res!32147) b!57495))

(assert (= (and b!57495 res!32156) b!57487))

(assert (= (and b!57478 c!7126) b!57479))

(assert (= (and b!57478 (not c!7126)) b!57498))

(assert (= (and b!57479 res!32154) b!57484))

(assert (= (and b!57484 res!32153) b!57476))

(assert (= (or b!57511 b!57479) bm!4157))

(assert (= (or b!57487 b!57476) bm!4156))

(assert (= (or b!57510 bm!4157) bm!4160))

(assert (= (or b!57488 b!57513) bm!4148))

(assert (= (or b!57477 b!57486) bm!4153))

(assert (= (or b!57473 b!57513) bm!4150))

(assert (= (or bm!4151 bm!4156) bm!4139))

(assert (= (or bm!4155 bm!4160) bm!4144))

(assert (= (or bm!4142 bm!4148) bm!4154))

(assert (= (or b!57480 b!57488) bm!4145))

(assert (= (or b!57496 b!57489) bm!4149))

(assert (= (or b!57496 b!57489) bm!4140))

(assert (= (and bm!4140 c!7116) b!57501))

(assert (= (and bm!4140 (not c!7116)) b!57499))

(assert (= (or bm!4159 bm!4149) bm!4152))

(assert (= (or bm!4147 b!57499) bm!4161))

(assert (= (or bm!4143 b!57489) bm!4146))

(assert (= (and bm!4146 c!7121) b!57490))

(assert (= (and bm!4146 (not c!7121)) b!57504))

(assert (= (and d!10591 res!32150) b!57505))

(assert (= (and b!57505 c!7129) b!57509))

(assert (= (and b!57505 (not c!7129)) b!57494))

(assert (= (and b!57509 res!32146) b!57512))

(assert (= (or b!57509 b!57512 b!57494) bm!4138))

(assert (= (or b!57512 b!57494) bm!4158))

(declare-fun m!48275 () Bool)

(assert (=> b!57492 m!48275))

(assert (=> b!57493 m!48103))

(declare-fun m!48277 () Bool)

(assert (=> b!57493 m!48277))

(assert (=> b!57504 m!48203))

(declare-fun m!48279 () Bool)

(assert (=> b!57514 m!48279))

(assert (=> b!57489 m!48105))

(assert (=> b!57489 m!48103))

(declare-fun m!48281 () Bool)

(assert (=> b!57489 m!48281))

(declare-fun m!48283 () Bool)

(assert (=> b!57489 m!48283))

(assert (=> b!57489 m!48203))

(declare-fun m!48285 () Bool)

(assert (=> b!57489 m!48285))

(assert (=> b!57489 m!48203))

(assert (=> b!57489 m!48105))

(declare-fun m!48287 () Bool)

(assert (=> b!57489 m!48287))

(declare-fun m!48289 () Bool)

(assert (=> b!57495 m!48289))

(declare-fun m!48291 () Bool)

(assert (=> bm!4146 m!48291))

(assert (=> bm!4152 m!48283))

(declare-fun m!48293 () Bool)

(assert (=> bm!4152 m!48293))

(declare-fun m!48295 () Bool)

(assert (=> b!57474 m!48295))

(declare-fun m!48297 () Bool)

(assert (=> b!57484 m!48297))

(assert (=> bm!4150 m!48105))

(declare-fun m!48299 () Bool)

(assert (=> bm!4150 m!48299))

(declare-fun m!48301 () Bool)

(assert (=> bm!4144 m!48301))

(declare-fun m!48303 () Bool)

(assert (=> b!57512 m!48303))

(assert (=> bm!4145 m!48105))

(declare-fun m!48305 () Bool)

(assert (=> bm!4145 m!48305))

(assert (=> bm!4139 m!48105))

(declare-fun m!48307 () Bool)

(assert (=> bm!4139 m!48307))

(declare-fun m!48309 () Bool)

(assert (=> bm!4140 m!48309))

(declare-fun m!48311 () Bool)

(assert (=> bm!4140 m!48311))

(assert (=> bm!4154 m!48105))

(declare-fun m!48313 () Bool)

(assert (=> bm!4154 m!48313))

(declare-fun m!48315 () Bool)

(assert (=> bm!4138 m!48315))

(declare-fun m!48317 () Bool)

(assert (=> b!57497 m!48317))

(assert (=> bm!4153 m!48105))

(assert (=> bm!4153 m!48103))

(declare-fun m!48319 () Bool)

(assert (=> bm!4153 m!48319))

(assert (=> b!57509 m!48105))

(declare-fun m!48321 () Bool)

(assert (=> b!57509 m!48321))

(assert (=> b!57508 m!48105))

(assert (=> b!57508 m!48313))

(declare-fun m!48323 () Bool)

(assert (=> bm!4161 m!48323))

(assert (=> bm!4158 m!48121))

(declare-fun m!48325 () Bool)

(assert (=> d!10591 m!48325))

(assert (=> d!10591 m!48117))

(assert (=> b!57475 m!48103))

(declare-fun m!48327 () Bool)

(assert (=> b!57475 m!48327))

(assert (=> b!57218 d!10591))

(declare-fun d!10593 () Bool)

(declare-fun c!7132 () Bool)

(assert (=> d!10593 (= c!7132 ((_ is ValueCellFull!852) (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!37909 () V!2835)

(assert (=> d!10593 (= (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!37909)))

(declare-fun b!57519 () Bool)

(declare-fun get!1074 (ValueCell!852 V!2835) V!2835)

(assert (=> b!57519 (= e!37909 (get!1074 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57520 () Bool)

(declare-fun get!1075 (ValueCell!852 V!2835) V!2835)

(assert (=> b!57520 (= e!37909 (get!1075 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10593 c!7132) b!57519))

(assert (= (and d!10593 (not c!7132)) b!57520))

(assert (=> b!57519 m!48099))

(assert (=> b!57519 m!48101))

(declare-fun m!48329 () Bool)

(assert (=> b!57519 m!48329))

(assert (=> b!57520 m!48099))

(assert (=> b!57520 m!48101))

(declare-fun m!48331 () Bool)

(assert (=> b!57520 m!48331))

(assert (=> b!57218 d!10593))

(declare-fun d!10595 () Bool)

(assert (=> d!10595 (= (array_inv!1049 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvsge (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!57211 d!10595))

(declare-fun d!10597 () Bool)

(assert (=> d!10597 (= (array_inv!1050 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvsge (size!2004 (_values!2005 (v!2365 (underlying!222 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!57211 d!10597))

(declare-fun d!10599 () Bool)

(assert (=> d!10599 (= (valid!247 thiss!992) (valid!246 (v!2365 (underlying!222 thiss!992))))))

(declare-fun bs!2480 () Bool)

(assert (= bs!2480 d!10599))

(declare-fun m!48333 () Bool)

(assert (=> bs!2480 m!48333))

(assert (=> start!8434 d!10599))

(declare-fun b!57527 () Bool)

(declare-fun e!37915 () Bool)

(assert (=> b!57527 (= e!37915 tp_is_empty!2391)))

(declare-fun b!57528 () Bool)

(declare-fun e!37914 () Bool)

(assert (=> b!57528 (= e!37914 tp_is_empty!2391)))

(declare-fun condMapEmpty!2857 () Bool)

(declare-fun mapDefault!2857 () ValueCell!852)

(assert (=> mapNonEmpty!2848 (= condMapEmpty!2857 (= mapRest!2848 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2857)))))

(declare-fun mapRes!2857 () Bool)

(assert (=> mapNonEmpty!2848 (= tp!7953 (and e!37914 mapRes!2857))))

(declare-fun mapIsEmpty!2857 () Bool)

(assert (=> mapIsEmpty!2857 mapRes!2857))

(declare-fun mapNonEmpty!2857 () Bool)

(declare-fun tp!7969 () Bool)

(assert (=> mapNonEmpty!2857 (= mapRes!2857 (and tp!7969 e!37915))))

(declare-fun mapValue!2857 () ValueCell!852)

(declare-fun mapKey!2857 () (_ BitVec 32))

(declare-fun mapRest!2857 () (Array (_ BitVec 32) ValueCell!852))

(assert (=> mapNonEmpty!2857 (= mapRest!2848 (store mapRest!2857 mapKey!2857 mapValue!2857))))

(assert (= (and mapNonEmpty!2848 condMapEmpty!2857) mapIsEmpty!2857))

(assert (= (and mapNonEmpty!2848 (not condMapEmpty!2857)) mapNonEmpty!2857))

(assert (= (and mapNonEmpty!2857 ((_ is ValueCellFull!852) mapValue!2857)) b!57527))

(assert (= (and mapNonEmpty!2848 ((_ is ValueCellFull!852) mapDefault!2857)) b!57528))

(declare-fun m!48335 () Bool)

(assert (=> mapNonEmpty!2857 m!48335))

(declare-fun b!57529 () Bool)

(declare-fun e!37917 () Bool)

(assert (=> b!57529 (= e!37917 tp_is_empty!2391)))

(declare-fun b!57530 () Bool)

(declare-fun e!37916 () Bool)

(assert (=> b!57530 (= e!37916 tp_is_empty!2391)))

(declare-fun condMapEmpty!2858 () Bool)

(declare-fun mapDefault!2858 () ValueCell!852)

(assert (=> mapNonEmpty!2847 (= condMapEmpty!2858 (= mapRest!2847 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2858)))))

(declare-fun mapRes!2858 () Bool)

(assert (=> mapNonEmpty!2847 (= tp!7954 (and e!37916 mapRes!2858))))

(declare-fun mapIsEmpty!2858 () Bool)

(assert (=> mapIsEmpty!2858 mapRes!2858))

(declare-fun mapNonEmpty!2858 () Bool)

(declare-fun tp!7970 () Bool)

(assert (=> mapNonEmpty!2858 (= mapRes!2858 (and tp!7970 e!37917))))

(declare-fun mapRest!2858 () (Array (_ BitVec 32) ValueCell!852))

(declare-fun mapKey!2858 () (_ BitVec 32))

(declare-fun mapValue!2858 () ValueCell!852)

(assert (=> mapNonEmpty!2858 (= mapRest!2847 (store mapRest!2858 mapKey!2858 mapValue!2858))))

(assert (= (and mapNonEmpty!2847 condMapEmpty!2858) mapIsEmpty!2858))

(assert (= (and mapNonEmpty!2847 (not condMapEmpty!2858)) mapNonEmpty!2858))

(assert (= (and mapNonEmpty!2858 ((_ is ValueCellFull!852) mapValue!2858)) b!57529))

(assert (= (and mapNonEmpty!2847 ((_ is ValueCellFull!852) mapDefault!2858)) b!57530))

(declare-fun m!48337 () Bool)

(assert (=> mapNonEmpty!2858 m!48337))

(declare-fun b_lambda!2519 () Bool)

(assert (= b_lambda!2517 (or (and b!57211 b_free!1949) (and b!57210 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))))) b_lambda!2519)))

(check-sat (not b!57362) (not bm!4153) (not bm!4154) (not d!10591) (not b!57475) (not bm!4144) (not b!57355) (not mapNonEmpty!2858) (not b!57363) (not bm!4083) (not b!57291) (not b!57379) (not b_lambda!2519) (not b!57520) (not bm!4140) (not d!10569) (not b!57504) (not bm!4139) (not b!57386) (not b!57512) (not d!10579) (not b!57352) (not b!57365) tp_is_empty!2391 (not b!57509) (not bm!4161) (not b!57361) (not bm!4085) (not b!57489) (not b!57307) (not mapNonEmpty!2857) (not bm!4150) (not b!57378) (not b!57493) (not b!57519) (not b!57306) (not b_lambda!2515) (not d!10599) (not bm!4145) (not bm!4138) (not b!57286) (not b_next!1949) (not bm!4152) (not bm!4158) (not d!10583) (not bm!4146) (not b!57354) (not d!10581) (not b!57304) (not d!10589) b_and!3471 (not b!57508) (not b_next!1951) (not b!57357) (not b!57377) (not d!10567) (not b!57388) (not bm!4086) (not bm!4087) (not d!10573) b_and!3469 (not bm!4068))
(check-sat b_and!3469 b_and!3471 (not b_next!1949) (not b_next!1951))
(get-model)

(declare-fun b!57531 () Bool)

(declare-fun e!37924 () Bool)

(declare-fun call!4167 () Bool)

(assert (=> b!57531 (= e!37924 (not call!4167))))

(declare-fun c!7133 () Bool)

(declare-fun call!4166 () ListLongMap!1373)

(declare-fun call!4169 () ListLongMap!1373)

(declare-fun bm!4162 () Bool)

(declare-fun call!4168 () ListLongMap!1373)

(declare-fun call!4170 () ListLongMap!1373)

(declare-fun c!7136 () Bool)

(assert (=> bm!4162 (= call!4168 (+!80 (ite c!7136 call!4170 (ite c!7133 call!4169 call!4166)) (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!57532 () Bool)

(declare-fun res!32161 () Bool)

(declare-fun e!37928 () Bool)

(assert (=> b!57532 (=> (not res!32161) (not e!37928))))

(declare-fun e!37929 () Bool)

(assert (=> b!57532 (= res!32161 e!37929)))

(declare-fun c!7135 () Bool)

(assert (=> b!57532 (= c!7135 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4163 () Bool)

(assert (=> bm!4163 (= call!4166 call!4169)))

(declare-fun b!57533 () Bool)

(declare-fun e!37919 () Bool)

(assert (=> b!57533 (= e!37919 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57534 () Bool)

(declare-fun call!4171 () Bool)

(assert (=> b!57534 (= e!37929 (not call!4171))))

(declare-fun d!10601 () Bool)

(assert (=> d!10601 e!37928))

(declare-fun res!32158 () Bool)

(assert (=> d!10601 (=> (not res!32158) (not e!37928))))

(assert (=> d!10601 (= res!32158 (or (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))))

(declare-fun lt!22810 () ListLongMap!1373)

(declare-fun lt!22801 () ListLongMap!1373)

(assert (=> d!10601 (= lt!22810 lt!22801)))

(declare-fun lt!22805 () Unit!1488)

(declare-fun e!37926 () Unit!1488)

(assert (=> d!10601 (= lt!22805 e!37926)))

(declare-fun c!7137 () Bool)

(assert (=> d!10601 (= c!7137 e!37919)))

(declare-fun res!32165 () Bool)

(assert (=> d!10601 (=> (not res!32165) (not e!37919))))

(assert (=> d!10601 (= res!32165 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun e!37923 () ListLongMap!1373)

(assert (=> d!10601 (= lt!22801 e!37923)))

(assert (=> d!10601 (= c!7136 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10601 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10601 (= (getCurrentListMap!400 (_keys!3642 newMap!16) (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!22810)))

(declare-fun b!57535 () Bool)

(declare-fun e!37930 () Bool)

(assert (=> b!57535 (= e!37930 (= (apply!65 lt!22810 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!57536 () Bool)

(declare-fun e!37918 () Bool)

(assert (=> b!57536 (= e!37918 (= (apply!65 lt!22810 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57536 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))))))))

(assert (=> b!57536 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57537 () Bool)

(declare-fun e!37921 () ListLongMap!1373)

(assert (=> b!57537 (= e!37921 call!4166)))

(declare-fun bm!4164 () Bool)

(assert (=> bm!4164 (= call!4170 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!57538 () Bool)

(assert (=> b!57538 (= e!37923 (+!80 call!4168 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun b!57539 () Bool)

(assert (=> b!57539 (= e!37924 e!37930)))

(declare-fun res!32159 () Bool)

(assert (=> b!57539 (= res!32159 call!4167)))

(assert (=> b!57539 (=> (not res!32159) (not e!37930))))

(declare-fun bm!4165 () Bool)

(assert (=> bm!4165 (= call!4171 (contains!688 lt!22810 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4166 () Bool)

(assert (=> bm!4166 (= call!4167 (contains!688 lt!22810 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57540 () Bool)

(assert (=> b!57540 (= e!37928 e!37924)))

(declare-fun c!7138 () Bool)

(assert (=> b!57540 (= c!7138 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!57541 () Bool)

(declare-fun res!32163 () Bool)

(assert (=> b!57541 (=> (not res!32163) (not e!37928))))

(declare-fun e!37927 () Bool)

(assert (=> b!57541 (= res!32163 e!37927)))

(declare-fun res!32162 () Bool)

(assert (=> b!57541 (=> res!32162 e!37927)))

(declare-fun e!37920 () Bool)

(assert (=> b!57541 (= res!32162 (not e!37920))))

(declare-fun res!32166 () Bool)

(assert (=> b!57541 (=> (not res!32166) (not e!37920))))

(assert (=> b!57541 (= res!32166 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57542 () Bool)

(assert (=> b!57542 (= e!37927 e!37918)))

(declare-fun res!32160 () Bool)

(assert (=> b!57542 (=> (not res!32160) (not e!37918))))

(assert (=> b!57542 (= res!32160 (contains!688 lt!22810 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57542 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57543 () Bool)

(declare-fun lt!22811 () Unit!1488)

(assert (=> b!57543 (= e!37926 lt!22811)))

(declare-fun lt!22817 () ListLongMap!1373)

(assert (=> b!57543 (= lt!22817 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22799 () (_ BitVec 64))

(assert (=> b!57543 (= lt!22799 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22815 () (_ BitVec 64))

(assert (=> b!57543 (= lt!22815 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22816 () Unit!1488)

(assert (=> b!57543 (= lt!22816 (addStillContains!41 lt!22817 lt!22799 (zeroValue!1940 newMap!16) lt!22815))))

(assert (=> b!57543 (contains!688 (+!80 lt!22817 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16))) lt!22815)))

(declare-fun lt!22812 () Unit!1488)

(assert (=> b!57543 (= lt!22812 lt!22816)))

(declare-fun lt!22809 () ListLongMap!1373)

(assert (=> b!57543 (= lt!22809 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22803 () (_ BitVec 64))

(assert (=> b!57543 (= lt!22803 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22796 () (_ BitVec 64))

(assert (=> b!57543 (= lt!22796 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22807 () Unit!1488)

(assert (=> b!57543 (= lt!22807 (addApplyDifferent!41 lt!22809 lt!22803 (minValue!1940 newMap!16) lt!22796))))

(assert (=> b!57543 (= (apply!65 (+!80 lt!22809 (tuple2!2039 lt!22803 (minValue!1940 newMap!16))) lt!22796) (apply!65 lt!22809 lt!22796))))

(declare-fun lt!22800 () Unit!1488)

(assert (=> b!57543 (= lt!22800 lt!22807)))

(declare-fun lt!22797 () ListLongMap!1373)

(assert (=> b!57543 (= lt!22797 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22813 () (_ BitVec 64))

(assert (=> b!57543 (= lt!22813 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22804 () (_ BitVec 64))

(assert (=> b!57543 (= lt!22804 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22808 () Unit!1488)

(assert (=> b!57543 (= lt!22808 (addApplyDifferent!41 lt!22797 lt!22813 (zeroValue!1940 newMap!16) lt!22804))))

(assert (=> b!57543 (= (apply!65 (+!80 lt!22797 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16))) lt!22804) (apply!65 lt!22797 lt!22804))))

(declare-fun lt!22814 () Unit!1488)

(assert (=> b!57543 (= lt!22814 lt!22808)))

(declare-fun lt!22806 () ListLongMap!1373)

(assert (=> b!57543 (= lt!22806 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22802 () (_ BitVec 64))

(assert (=> b!57543 (= lt!22802 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22798 () (_ BitVec 64))

(assert (=> b!57543 (= lt!22798 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57543 (= lt!22811 (addApplyDifferent!41 lt!22806 lt!22802 (minValue!1940 newMap!16) lt!22798))))

(assert (=> b!57543 (= (apply!65 (+!80 lt!22806 (tuple2!2039 lt!22802 (minValue!1940 newMap!16))) lt!22798) (apply!65 lt!22806 lt!22798))))

(declare-fun b!57544 () Bool)

(assert (=> b!57544 (= e!37920 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57545 () Bool)

(declare-fun call!4165 () ListLongMap!1373)

(assert (=> b!57545 (= e!37921 call!4165)))

(declare-fun bm!4167 () Bool)

(assert (=> bm!4167 (= call!4165 call!4168)))

(declare-fun bm!4168 () Bool)

(assert (=> bm!4168 (= call!4169 call!4170)))

(declare-fun b!57546 () Bool)

(declare-fun e!37925 () Bool)

(assert (=> b!57546 (= e!37925 (= (apply!65 lt!22810 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!57547 () Bool)

(declare-fun e!37922 () ListLongMap!1373)

(assert (=> b!57547 (= e!37923 e!37922)))

(assert (=> b!57547 (= c!7133 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!57548 () Bool)

(assert (=> b!57548 (= e!37922 call!4165)))

(declare-fun b!57549 () Bool)

(assert (=> b!57549 (= e!37929 e!37925)))

(declare-fun res!32164 () Bool)

(assert (=> b!57549 (= res!32164 call!4171)))

(assert (=> b!57549 (=> (not res!32164) (not e!37925))))

(declare-fun b!57550 () Bool)

(declare-fun Unit!1500 () Unit!1488)

(assert (=> b!57550 (= e!37926 Unit!1500)))

(declare-fun b!57551 () Bool)

(declare-fun c!7134 () Bool)

(assert (=> b!57551 (= c!7134 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57551 (= e!37922 e!37921)))

(assert (= (and d!10601 c!7136) b!57538))

(assert (= (and d!10601 (not c!7136)) b!57547))

(assert (= (and b!57547 c!7133) b!57548))

(assert (= (and b!57547 (not c!7133)) b!57551))

(assert (= (and b!57551 c!7134) b!57545))

(assert (= (and b!57551 (not c!7134)) b!57537))

(assert (= (or b!57545 b!57537) bm!4163))

(assert (= (or b!57548 bm!4163) bm!4168))

(assert (= (or b!57548 b!57545) bm!4167))

(assert (= (or b!57538 bm!4168) bm!4164))

(assert (= (or b!57538 bm!4167) bm!4162))

(assert (= (and d!10601 res!32165) b!57533))

(assert (= (and d!10601 c!7137) b!57543))

(assert (= (and d!10601 (not c!7137)) b!57550))

(assert (= (and d!10601 res!32158) b!57541))

(assert (= (and b!57541 res!32166) b!57544))

(assert (= (and b!57541 (not res!32162)) b!57542))

(assert (= (and b!57542 res!32160) b!57536))

(assert (= (and b!57541 res!32163) b!57532))

(assert (= (and b!57532 c!7135) b!57549))

(assert (= (and b!57532 (not c!7135)) b!57534))

(assert (= (and b!57549 res!32164) b!57546))

(assert (= (or b!57549 b!57534) bm!4165))

(assert (= (and b!57532 res!32161) b!57540))

(assert (= (and b!57540 c!7138) b!57539))

(assert (= (and b!57540 (not c!7138)) b!57531))

(assert (= (and b!57539 res!32159) b!57535))

(assert (= (or b!57539 b!57531) bm!4166))

(declare-fun b_lambda!2521 () Bool)

(assert (=> (not b_lambda!2521) (not b!57536)))

(declare-fun tb!1309 () Bool)

(declare-fun t!4783 () Bool)

(assert (=> (and b!57211 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16)) t!4783) tb!1309))

(declare-fun result!2361 () Bool)

(assert (=> tb!1309 (= result!2361 tp_is_empty!2391)))

(assert (=> b!57536 t!4783))

(declare-fun b_and!3473 () Bool)

(assert (= b_and!3469 (and (=> t!4783 result!2361) b_and!3473)))

(declare-fun t!4785 () Bool)

(declare-fun tb!1311 () Bool)

(assert (=> (and b!57210 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 newMap!16)) t!4785) tb!1311))

(declare-fun result!2363 () Bool)

(assert (= result!2363 result!2361))

(assert (=> b!57536 t!4785))

(declare-fun b_and!3475 () Bool)

(assert (= b_and!3471 (and (=> t!4785 result!2363) b_and!3475)))

(declare-fun m!48339 () Bool)

(assert (=> b!57536 m!48339))

(declare-fun m!48341 () Bool)

(assert (=> b!57536 m!48341))

(assert (=> b!57536 m!48339))

(declare-fun m!48343 () Bool)

(assert (=> b!57536 m!48343))

(declare-fun m!48345 () Bool)

(assert (=> b!57536 m!48345))

(assert (=> b!57536 m!48341))

(assert (=> b!57536 m!48345))

(declare-fun m!48347 () Bool)

(assert (=> b!57536 m!48347))

(declare-fun m!48349 () Bool)

(assert (=> bm!4165 m!48349))

(declare-fun m!48351 () Bool)

(assert (=> b!57543 m!48351))

(declare-fun m!48353 () Bool)

(assert (=> b!57543 m!48353))

(declare-fun m!48355 () Bool)

(assert (=> b!57543 m!48355))

(declare-fun m!48357 () Bool)

(assert (=> b!57543 m!48357))

(declare-fun m!48359 () Bool)

(assert (=> b!57543 m!48359))

(assert (=> b!57543 m!48351))

(declare-fun m!48361 () Bool)

(assert (=> b!57543 m!48361))

(declare-fun m!48363 () Bool)

(assert (=> b!57543 m!48363))

(declare-fun m!48365 () Bool)

(assert (=> b!57543 m!48365))

(declare-fun m!48367 () Bool)

(assert (=> b!57543 m!48367))

(assert (=> b!57543 m!48345))

(declare-fun m!48369 () Bool)

(assert (=> b!57543 m!48369))

(declare-fun m!48371 () Bool)

(assert (=> b!57543 m!48371))

(assert (=> b!57543 m!48357))

(declare-fun m!48373 () Bool)

(assert (=> b!57543 m!48373))

(declare-fun m!48375 () Bool)

(assert (=> b!57543 m!48375))

(assert (=> b!57543 m!48365))

(assert (=> b!57543 m!48359))

(declare-fun m!48377 () Bool)

(assert (=> b!57543 m!48377))

(declare-fun m!48379 () Bool)

(assert (=> b!57543 m!48379))

(declare-fun m!48381 () Bool)

(assert (=> b!57543 m!48381))

(assert (=> b!57544 m!48345))

(assert (=> b!57544 m!48345))

(declare-fun m!48383 () Bool)

(assert (=> b!57544 m!48383))

(assert (=> b!57542 m!48345))

(assert (=> b!57542 m!48345))

(declare-fun m!48385 () Bool)

(assert (=> b!57542 m!48385))

(declare-fun m!48387 () Bool)

(assert (=> bm!4162 m!48387))

(assert (=> bm!4164 m!48353))

(declare-fun m!48389 () Bool)

(assert (=> b!57546 m!48389))

(declare-fun m!48391 () Bool)

(assert (=> b!57535 m!48391))

(declare-fun m!48393 () Bool)

(assert (=> bm!4166 m!48393))

(declare-fun m!48395 () Bool)

(assert (=> d!10601 m!48395))

(assert (=> b!57533 m!48345))

(assert (=> b!57533 m!48345))

(assert (=> b!57533 m!48383))

(declare-fun m!48397 () Bool)

(assert (=> b!57538 m!48397))

(assert (=> bm!4152 d!10601))

(declare-fun d!10603 () Bool)

(declare-fun e!37932 () Bool)

(assert (=> d!10603 e!37932))

(declare-fun res!32167 () Bool)

(assert (=> d!10603 (=> res!32167 e!37932)))

(declare-fun lt!22818 () Bool)

(assert (=> d!10603 (= res!32167 (not lt!22818))))

(declare-fun lt!22819 () Bool)

(assert (=> d!10603 (= lt!22818 lt!22819)))

(declare-fun lt!22821 () Unit!1488)

(declare-fun e!37931 () Unit!1488)

(assert (=> d!10603 (= lt!22821 e!37931)))

(declare-fun c!7139 () Bool)

(assert (=> d!10603 (= c!7139 lt!22819)))

(assert (=> d!10603 (= lt!22819 (containsKey!126 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10603 (= (contains!688 lt!22695 #b1000000000000000000000000000000000000000000000000000000000000000) lt!22818)))

(declare-fun b!57552 () Bool)

(declare-fun lt!22820 () Unit!1488)

(assert (=> b!57552 (= e!37931 lt!22820)))

(assert (=> b!57552 (= lt!22820 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57552 (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57553 () Bool)

(declare-fun Unit!1501 () Unit!1488)

(assert (=> b!57553 (= e!37931 Unit!1501)))

(declare-fun b!57554 () Bool)

(assert (=> b!57554 (= e!37932 (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10603 c!7139) b!57552))

(assert (= (and d!10603 (not c!7139)) b!57553))

(assert (= (and d!10603 (not res!32167)) b!57554))

(declare-fun m!48399 () Bool)

(assert (=> d!10603 m!48399))

(declare-fun m!48401 () Bool)

(assert (=> b!57552 m!48401))

(declare-fun m!48403 () Bool)

(assert (=> b!57552 m!48403))

(assert (=> b!57552 m!48403))

(declare-fun m!48405 () Bool)

(assert (=> b!57552 m!48405))

(assert (=> b!57554 m!48403))

(assert (=> b!57554 m!48403))

(assert (=> b!57554 m!48405))

(assert (=> bm!4087 d!10603))

(declare-fun d!10605 () Bool)

(declare-fun isEmpty!295 (Option!128) Bool)

(assert (=> d!10605 (= (isDefined!76 (getValueByKey!122 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))) (not (isEmpty!295 (getValueByKey!122 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun bs!2481 () Bool)

(assert (= bs!2481 d!10605))

(assert (=> bs!2481 m!48271))

(declare-fun m!48407 () Bool)

(assert (=> bs!2481 m!48407))

(assert (=> b!57388 d!10605))

(declare-fun b!57563 () Bool)

(declare-fun e!37937 () Option!128)

(assert (=> b!57563 (= e!37937 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22601)))))))

(declare-fun c!7144 () Bool)

(declare-fun d!10607 () Bool)

(assert (=> d!10607 (= c!7144 (and ((_ is Cons!1445) (toList!702 lt!22601)) (= (_1!1029 (h!2025 (toList!702 lt!22601))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10607 (= (getValueByKey!122 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) e!37937)))

(declare-fun b!57566 () Bool)

(declare-fun e!37938 () Option!128)

(assert (=> b!57566 (= e!37938 None!126)))

(declare-fun b!57564 () Bool)

(assert (=> b!57564 (= e!37937 e!37938)))

(declare-fun c!7145 () Bool)

(assert (=> b!57564 (= c!7145 (and ((_ is Cons!1445) (toList!702 lt!22601)) (not (= (_1!1029 (h!2025 (toList!702 lt!22601))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun b!57565 () Bool)

(assert (=> b!57565 (= e!37938 (getValueByKey!122 (t!4775 (toList!702 lt!22601)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10607 c!7144) b!57563))

(assert (= (and d!10607 (not c!7144)) b!57564))

(assert (= (and b!57564 c!7145) b!57565))

(assert (= (and b!57564 (not c!7145)) b!57566))

(assert (=> b!57565 m!48105))

(declare-fun m!48409 () Bool)

(assert (=> b!57565 m!48409))

(assert (=> b!57388 d!10607))

(declare-fun d!10609 () Bool)

(declare-fun res!32168 () Bool)

(declare-fun e!37939 () Bool)

(assert (=> d!10609 (=> (not res!32168) (not e!37939))))

(assert (=> d!10609 (= res!32168 (simpleValid!40 (v!2365 (underlying!222 thiss!992))))))

(assert (=> d!10609 (= (valid!246 (v!2365 (underlying!222 thiss!992))) e!37939)))

(declare-fun b!57567 () Bool)

(declare-fun res!32169 () Bool)

(assert (=> b!57567 (=> (not res!32169) (not e!37939))))

(assert (=> b!57567 (= res!32169 (= (arrayCountValidKeys!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000000 (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))) (_size!355 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun b!57568 () Bool)

(declare-fun res!32170 () Bool)

(assert (=> b!57568 (=> (not res!32170) (not e!37939))))

(assert (=> b!57568 (= res!32170 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun b!57569 () Bool)

(assert (=> b!57569 (= e!37939 (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000000 Nil!1447))))

(assert (= (and d!10609 res!32168) b!57567))

(assert (= (and b!57567 res!32169) b!57568))

(assert (= (and b!57568 res!32170) b!57569))

(declare-fun m!48411 () Bool)

(assert (=> d!10609 m!48411))

(declare-fun m!48413 () Bool)

(assert (=> b!57567 m!48413))

(declare-fun m!48415 () Bool)

(assert (=> b!57568 m!48415))

(declare-fun m!48417 () Bool)

(assert (=> b!57569 m!48417))

(assert (=> d!10599 d!10609))

(declare-fun d!10611 () Bool)

(declare-fun lt!22824 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!60 (List!1450) (InoxSet (_ BitVec 64)))

(assert (=> d!10611 (= lt!22824 (select (content!60 Nil!1447) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!37944 () Bool)

(assert (=> d!10611 (= lt!22824 e!37944)))

(declare-fun res!32175 () Bool)

(assert (=> d!10611 (=> (not res!32175) (not e!37944))))

(assert (=> d!10611 (= res!32175 ((_ is Cons!1446) Nil!1447))))

(assert (=> d!10611 (= (contains!689 Nil!1447 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) lt!22824)))

(declare-fun b!57574 () Bool)

(declare-fun e!37945 () Bool)

(assert (=> b!57574 (= e!37944 e!37945)))

(declare-fun res!32176 () Bool)

(assert (=> b!57574 (=> res!32176 e!37945)))

(assert (=> b!57574 (= res!32176 (= (h!2026 Nil!1447) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57575 () Bool)

(assert (=> b!57575 (= e!37945 (contains!689 (t!4776 Nil!1447) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10611 res!32175) b!57574))

(assert (= (and b!57574 (not res!32176)) b!57575))

(declare-fun m!48419 () Bool)

(assert (=> d!10611 m!48419))

(assert (=> d!10611 m!48105))

(declare-fun m!48421 () Bool)

(assert (=> d!10611 m!48421))

(assert (=> b!57575 m!48105))

(declare-fun m!48423 () Bool)

(assert (=> b!57575 m!48423))

(assert (=> b!57307 d!10611))

(declare-fun b!57588 () Bool)

(declare-fun e!37952 () SeekEntryResult!236)

(declare-fun lt!22833 () SeekEntryResult!236)

(assert (=> b!57588 (= e!37952 (MissingZero!236 (index!3068 lt!22833)))))

(declare-fun b!57589 () Bool)

(declare-fun e!37954 () SeekEntryResult!236)

(declare-fun e!37953 () SeekEntryResult!236)

(assert (=> b!57589 (= e!37954 e!37953)))

(declare-fun lt!22831 () (_ BitVec 64))

(assert (=> b!57589 (= lt!22831 (select (arr!1774 (_keys!3642 newMap!16)) (index!3068 lt!22833)))))

(declare-fun c!7154 () Bool)

(assert (=> b!57589 (= c!7154 (= lt!22831 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57590 () Bool)

(assert (=> b!57590 (= e!37953 (Found!236 (index!3068 lt!22833)))))

(declare-fun d!10613 () Bool)

(declare-fun lt!22832 () SeekEntryResult!236)

(assert (=> d!10613 (and (or ((_ is Undefined!236) lt!22832) (not ((_ is Found!236) lt!22832)) (and (bvsge (index!3067 lt!22832) #b00000000000000000000000000000000) (bvslt (index!3067 lt!22832) (size!2003 (_keys!3642 newMap!16))))) (or ((_ is Undefined!236) lt!22832) ((_ is Found!236) lt!22832) (not ((_ is MissingZero!236) lt!22832)) (and (bvsge (index!3066 lt!22832) #b00000000000000000000000000000000) (bvslt (index!3066 lt!22832) (size!2003 (_keys!3642 newMap!16))))) (or ((_ is Undefined!236) lt!22832) ((_ is Found!236) lt!22832) ((_ is MissingZero!236) lt!22832) (not ((_ is MissingVacant!236) lt!22832)) (and (bvsge (index!3069 lt!22832) #b00000000000000000000000000000000) (bvslt (index!3069 lt!22832) (size!2003 (_keys!3642 newMap!16))))) (or ((_ is Undefined!236) lt!22832) (ite ((_ is Found!236) lt!22832) (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22832)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (ite ((_ is MissingZero!236) lt!22832) (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3066 lt!22832)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!236) lt!22832) (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3069 lt!22832)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10613 (= lt!22832 e!37954)))

(declare-fun c!7153 () Bool)

(assert (=> d!10613 (= c!7153 (and ((_ is Intermediate!236) lt!22833) (undefined!1048 lt!22833)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3706 (_ BitVec 32)) SeekEntryResult!236)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!10613 (= lt!22833 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (mask!5896 newMap!16)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (=> d!10613 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10613 (= (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)) lt!22832)))

(declare-fun b!57591 () Bool)

(assert (=> b!57591 (= e!37954 Undefined!236)))

(declare-fun b!57592 () Bool)

(declare-fun c!7152 () Bool)

(assert (=> b!57592 (= c!7152 (= lt!22831 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57592 (= e!37953 e!37952)))

(declare-fun b!57593 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3706 (_ BitVec 32)) SeekEntryResult!236)

(assert (=> b!57593 (= e!37952 (seekKeyOrZeroReturnVacant!0 (x!9868 lt!22833) (index!3068 lt!22833) (index!3068 lt!22833) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (= (and d!10613 c!7153) b!57591))

(assert (= (and d!10613 (not c!7153)) b!57589))

(assert (= (and b!57589 c!7154) b!57590))

(assert (= (and b!57589 (not c!7154)) b!57592))

(assert (= (and b!57592 c!7152) b!57588))

(assert (= (and b!57592 (not c!7152)) b!57593))

(declare-fun m!48425 () Bool)

(assert (=> b!57589 m!48425))

(declare-fun m!48427 () Bool)

(assert (=> d!10613 m!48427))

(assert (=> d!10613 m!48395))

(declare-fun m!48429 () Bool)

(assert (=> d!10613 m!48429))

(assert (=> d!10613 m!48105))

(declare-fun m!48431 () Bool)

(assert (=> d!10613 m!48431))

(assert (=> d!10613 m!48105))

(assert (=> d!10613 m!48429))

(declare-fun m!48433 () Bool)

(assert (=> d!10613 m!48433))

(declare-fun m!48435 () Bool)

(assert (=> d!10613 m!48435))

(assert (=> b!57593 m!48105))

(declare-fun m!48437 () Bool)

(assert (=> b!57593 m!48437))

(assert (=> bm!4154 d!10613))

(declare-fun d!10615 () Bool)

(declare-fun e!37957 () Bool)

(assert (=> d!10615 e!37957))

(declare-fun res!32182 () Bool)

(assert (=> d!10615 (=> (not res!32182) (not e!37957))))

(declare-fun lt!22844 () ListLongMap!1373)

(assert (=> d!10615 (= res!32182 (contains!688 lt!22844 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun lt!22845 () List!1449)

(assert (=> d!10615 (= lt!22844 (ListLongMap!1374 lt!22845))))

(declare-fun lt!22842 () Unit!1488)

(declare-fun lt!22843 () Unit!1488)

(assert (=> d!10615 (= lt!22842 lt!22843)))

(assert (=> d!10615 (= (getValueByKey!122 lt!22845 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!41 (List!1449 (_ BitVec 64) V!2835) Unit!1488)

(assert (=> d!10615 (= lt!22843 (lemmaContainsTupThenGetReturnValue!41 lt!22845 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun insertStrictlySorted!43 (List!1449 (_ BitVec 64) V!2835) List!1449)

(assert (=> d!10615 (= lt!22845 (insertStrictlySorted!43 (toList!702 lt!22682) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10615 (= (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22844)))

(declare-fun b!57598 () Bool)

(declare-fun res!32181 () Bool)

(assert (=> b!57598 (=> (not res!32181) (not e!37957))))

(assert (=> b!57598 (= res!32181 (= (getValueByKey!122 (toList!702 lt!22844) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!57599 () Bool)

(declare-fun contains!690 (List!1449 tuple2!2038) Bool)

(assert (=> b!57599 (= e!37957 (contains!690 (toList!702 lt!22844) (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(assert (= (and d!10615 res!32182) b!57598))

(assert (= (and b!57598 res!32181) b!57599))

(declare-fun m!48439 () Bool)

(assert (=> d!10615 m!48439))

(declare-fun m!48441 () Bool)

(assert (=> d!10615 m!48441))

(declare-fun m!48443 () Bool)

(assert (=> d!10615 m!48443))

(declare-fun m!48445 () Bool)

(assert (=> d!10615 m!48445))

(declare-fun m!48447 () Bool)

(assert (=> b!57598 m!48447))

(declare-fun m!48449 () Bool)

(assert (=> b!57599 m!48449))

(assert (=> b!57362 d!10615))

(declare-fun d!10617 () Bool)

(assert (=> d!10617 (= (apply!65 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22689) (apply!65 lt!22682 lt!22689))))

(declare-fun lt!22848 () Unit!1488)

(declare-fun choose!296 (ListLongMap!1373 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1488)

(assert (=> d!10617 (= lt!22848 (choose!296 lt!22682 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22689))))

(declare-fun e!37960 () Bool)

(assert (=> d!10617 e!37960))

(declare-fun res!32185 () Bool)

(assert (=> d!10617 (=> (not res!32185) (not e!37960))))

(assert (=> d!10617 (= res!32185 (contains!688 lt!22682 lt!22689))))

(assert (=> d!10617 (= (addApplyDifferent!41 lt!22682 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22689) lt!22848)))

(declare-fun b!57603 () Bool)

(assert (=> b!57603 (= e!37960 (not (= lt!22689 lt!22698)))))

(assert (= (and d!10617 res!32185) b!57603))

(assert (=> d!10617 m!48221))

(declare-fun m!48451 () Bool)

(assert (=> d!10617 m!48451))

(assert (=> d!10617 m!48221))

(assert (=> d!10617 m!48239))

(declare-fun m!48453 () Bool)

(assert (=> d!10617 m!48453))

(assert (=> d!10617 m!48231))

(assert (=> b!57362 d!10617))

(declare-fun d!10619 () Bool)

(assert (=> d!10619 (= (apply!65 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22681) (apply!65 lt!22694 lt!22681))))

(declare-fun lt!22849 () Unit!1488)

(assert (=> d!10619 (= lt!22849 (choose!296 lt!22694 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22681))))

(declare-fun e!37961 () Bool)

(assert (=> d!10619 e!37961))

(declare-fun res!32186 () Bool)

(assert (=> d!10619 (=> (not res!32186) (not e!37961))))

(assert (=> d!10619 (= res!32186 (contains!688 lt!22694 lt!22681))))

(assert (=> d!10619 (= (addApplyDifferent!41 lt!22694 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22681) lt!22849)))

(declare-fun b!57604 () Bool)

(assert (=> b!57604 (= e!37961 (not (= lt!22681 lt!22688)))))

(assert (= (and d!10619 res!32186) b!57604))

(assert (=> d!10619 m!48213))

(declare-fun m!48455 () Bool)

(assert (=> d!10619 m!48455))

(assert (=> d!10619 m!48213))

(assert (=> d!10619 m!48223))

(declare-fun m!48457 () Bool)

(assert (=> d!10619 m!48457))

(assert (=> d!10619 m!48233))

(assert (=> b!57362 d!10619))

(declare-fun d!10621 () Bool)

(declare-fun e!37962 () Bool)

(assert (=> d!10621 e!37962))

(declare-fun res!32188 () Bool)

(assert (=> d!10621 (=> (not res!32188) (not e!37962))))

(declare-fun lt!22852 () ListLongMap!1373)

(assert (=> d!10621 (= res!32188 (contains!688 lt!22852 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun lt!22853 () List!1449)

(assert (=> d!10621 (= lt!22852 (ListLongMap!1374 lt!22853))))

(declare-fun lt!22850 () Unit!1488)

(declare-fun lt!22851 () Unit!1488)

(assert (=> d!10621 (= lt!22850 lt!22851)))

(assert (=> d!10621 (= (getValueByKey!122 lt!22853 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10621 (= lt!22851 (lemmaContainsTupThenGetReturnValue!41 lt!22853 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10621 (= lt!22853 (insertStrictlySorted!43 (toList!702 lt!22691) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10621 (= (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22852)))

(declare-fun b!57605 () Bool)

(declare-fun res!32187 () Bool)

(assert (=> b!57605 (=> (not res!32187) (not e!37962))))

(assert (=> b!57605 (= res!32187 (= (getValueByKey!122 (toList!702 lt!22852) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!57606 () Bool)

(assert (=> b!57606 (= e!37962 (contains!690 (toList!702 lt!22852) (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(assert (= (and d!10621 res!32188) b!57605))

(assert (= (and b!57605 res!32187) b!57606))

(declare-fun m!48459 () Bool)

(assert (=> d!10621 m!48459))

(declare-fun m!48461 () Bool)

(assert (=> d!10621 m!48461))

(declare-fun m!48463 () Bool)

(assert (=> d!10621 m!48463))

(declare-fun m!48465 () Bool)

(assert (=> d!10621 m!48465))

(declare-fun m!48467 () Bool)

(assert (=> b!57605 m!48467))

(declare-fun m!48469 () Bool)

(assert (=> b!57606 m!48469))

(assert (=> b!57362 d!10621))

(declare-fun d!10623 () Bool)

(declare-fun get!1076 (Option!128) V!2835)

(assert (=> d!10623 (= (apply!65 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22689) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22689)))))

(declare-fun bs!2482 () Bool)

(assert (= bs!2482 d!10623))

(declare-fun m!48471 () Bool)

(assert (=> bs!2482 m!48471))

(assert (=> bs!2482 m!48471))

(declare-fun m!48473 () Bool)

(assert (=> bs!2482 m!48473))

(assert (=> b!57362 d!10623))

(declare-fun d!10625 () Bool)

(assert (=> d!10625 (= (apply!65 lt!22682 lt!22689) (get!1076 (getValueByKey!122 (toList!702 lt!22682) lt!22689)))))

(declare-fun bs!2483 () Bool)

(assert (= bs!2483 d!10625))

(declare-fun m!48475 () Bool)

(assert (=> bs!2483 m!48475))

(assert (=> bs!2483 m!48475))

(declare-fun m!48477 () Bool)

(assert (=> bs!2483 m!48477))

(assert (=> b!57362 d!10625))

(declare-fun d!10627 () Bool)

(declare-fun e!37963 () Bool)

(assert (=> d!10627 e!37963))

(declare-fun res!32190 () Bool)

(assert (=> d!10627 (=> (not res!32190) (not e!37963))))

(declare-fun lt!22856 () ListLongMap!1373)

(assert (=> d!10627 (= res!32190 (contains!688 lt!22856 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun lt!22857 () List!1449)

(assert (=> d!10627 (= lt!22856 (ListLongMap!1374 lt!22857))))

(declare-fun lt!22854 () Unit!1488)

(declare-fun lt!22855 () Unit!1488)

(assert (=> d!10627 (= lt!22854 lt!22855)))

(assert (=> d!10627 (= (getValueByKey!122 lt!22857 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10627 (= lt!22855 (lemmaContainsTupThenGetReturnValue!41 lt!22857 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10627 (= lt!22857 (insertStrictlySorted!43 (toList!702 lt!22694) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10627 (= (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22856)))

(declare-fun b!57607 () Bool)

(declare-fun res!32189 () Bool)

(assert (=> b!57607 (=> (not res!32189) (not e!37963))))

(assert (=> b!57607 (= res!32189 (= (getValueByKey!122 (toList!702 lt!22856) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!57608 () Bool)

(assert (=> b!57608 (= e!37963 (contains!690 (toList!702 lt!22856) (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(assert (= (and d!10627 res!32190) b!57607))

(assert (= (and b!57607 res!32189) b!57608))

(declare-fun m!48479 () Bool)

(assert (=> d!10627 m!48479))

(declare-fun m!48481 () Bool)

(assert (=> d!10627 m!48481))

(declare-fun m!48483 () Bool)

(assert (=> d!10627 m!48483))

(declare-fun m!48485 () Bool)

(assert (=> d!10627 m!48485))

(declare-fun m!48487 () Bool)

(assert (=> b!57607 m!48487))

(declare-fun m!48489 () Bool)

(assert (=> b!57608 m!48489))

(assert (=> b!57362 d!10627))

(declare-fun d!10629 () Bool)

(assert (=> d!10629 (= (apply!65 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22683) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22683)))))

(declare-fun bs!2484 () Bool)

(assert (= bs!2484 d!10629))

(declare-fun m!48491 () Bool)

(assert (=> bs!2484 m!48491))

(assert (=> bs!2484 m!48491))

(declare-fun m!48493 () Bool)

(assert (=> bs!2484 m!48493))

(assert (=> b!57362 d!10629))

(declare-fun d!10631 () Bool)

(assert (=> d!10631 (contains!688 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22700)))

(declare-fun lt!22860 () Unit!1488)

(declare-fun choose!297 (ListLongMap!1373 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1488)

(assert (=> d!10631 (= lt!22860 (choose!297 lt!22702 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22700))))

(assert (=> d!10631 (contains!688 lt!22702 lt!22700)))

(assert (=> d!10631 (= (addStillContains!41 lt!22702 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22700) lt!22860)))

(declare-fun bs!2485 () Bool)

(assert (= bs!2485 d!10631))

(assert (=> bs!2485 m!48219))

(assert (=> bs!2485 m!48219))

(assert (=> bs!2485 m!48235))

(declare-fun m!48495 () Bool)

(assert (=> bs!2485 m!48495))

(declare-fun m!48497 () Bool)

(assert (=> bs!2485 m!48497))

(assert (=> b!57362 d!10631))

(declare-fun d!10633 () Bool)

(declare-fun e!37964 () Bool)

(assert (=> d!10633 e!37964))

(declare-fun res!32192 () Bool)

(assert (=> d!10633 (=> (not res!32192) (not e!37964))))

(declare-fun lt!22863 () ListLongMap!1373)

(assert (=> d!10633 (= res!32192 (contains!688 lt!22863 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun lt!22864 () List!1449)

(assert (=> d!10633 (= lt!22863 (ListLongMap!1374 lt!22864))))

(declare-fun lt!22861 () Unit!1488)

(declare-fun lt!22862 () Unit!1488)

(assert (=> d!10633 (= lt!22861 lt!22862)))

(assert (=> d!10633 (= (getValueByKey!122 lt!22864 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10633 (= lt!22862 (lemmaContainsTupThenGetReturnValue!41 lt!22864 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10633 (= lt!22864 (insertStrictlySorted!43 (toList!702 lt!22702) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10633 (= (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22863)))

(declare-fun b!57610 () Bool)

(declare-fun res!32191 () Bool)

(assert (=> b!57610 (=> (not res!32191) (not e!37964))))

(assert (=> b!57610 (= res!32191 (= (getValueByKey!122 (toList!702 lt!22863) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!57611 () Bool)

(assert (=> b!57611 (= e!37964 (contains!690 (toList!702 lt!22863) (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(assert (= (and d!10633 res!32192) b!57610))

(assert (= (and b!57610 res!32191) b!57611))

(declare-fun m!48499 () Bool)

(assert (=> d!10633 m!48499))

(declare-fun m!48501 () Bool)

(assert (=> d!10633 m!48501))

(declare-fun m!48503 () Bool)

(assert (=> d!10633 m!48503))

(declare-fun m!48505 () Bool)

(assert (=> d!10633 m!48505))

(declare-fun m!48507 () Bool)

(assert (=> b!57610 m!48507))

(declare-fun m!48509 () Bool)

(assert (=> b!57611 m!48509))

(assert (=> b!57362 d!10633))

(declare-fun d!10635 () Bool)

(declare-fun e!37966 () Bool)

(assert (=> d!10635 e!37966))

(declare-fun res!32193 () Bool)

(assert (=> d!10635 (=> res!32193 e!37966)))

(declare-fun lt!22865 () Bool)

(assert (=> d!10635 (= res!32193 (not lt!22865))))

(declare-fun lt!22866 () Bool)

(assert (=> d!10635 (= lt!22865 lt!22866)))

(declare-fun lt!22868 () Unit!1488)

(declare-fun e!37965 () Unit!1488)

(assert (=> d!10635 (= lt!22868 e!37965)))

(declare-fun c!7155 () Bool)

(assert (=> d!10635 (= c!7155 lt!22866)))

(assert (=> d!10635 (= lt!22866 (containsKey!126 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700))))

(assert (=> d!10635 (= (contains!688 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22700) lt!22865)))

(declare-fun b!57612 () Bool)

(declare-fun lt!22867 () Unit!1488)

(assert (=> b!57612 (= e!37965 lt!22867)))

(assert (=> b!57612 (= lt!22867 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700))))

(assert (=> b!57612 (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700))))

(declare-fun b!57613 () Bool)

(declare-fun Unit!1502 () Unit!1488)

(assert (=> b!57613 (= e!37965 Unit!1502)))

(declare-fun b!57614 () Bool)

(assert (=> b!57614 (= e!37966 (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700)))))

(assert (= (and d!10635 c!7155) b!57612))

(assert (= (and d!10635 (not c!7155)) b!57613))

(assert (= (and d!10635 (not res!32193)) b!57614))

(declare-fun m!48511 () Bool)

(assert (=> d!10635 m!48511))

(declare-fun m!48513 () Bool)

(assert (=> b!57612 m!48513))

(declare-fun m!48515 () Bool)

(assert (=> b!57612 m!48515))

(assert (=> b!57612 m!48515))

(declare-fun m!48517 () Bool)

(assert (=> b!57612 m!48517))

(assert (=> b!57614 m!48515))

(assert (=> b!57614 m!48515))

(assert (=> b!57614 m!48517))

(assert (=> b!57362 d!10635))

(declare-fun d!10637 () Bool)

(assert (=> d!10637 (= (apply!65 lt!22691 lt!22683) (get!1076 (getValueByKey!122 (toList!702 lt!22691) lt!22683)))))

(declare-fun bs!2486 () Bool)

(assert (= bs!2486 d!10637))

(declare-fun m!48519 () Bool)

(assert (=> bs!2486 m!48519))

(assert (=> bs!2486 m!48519))

(declare-fun m!48521 () Bool)

(assert (=> bs!2486 m!48521))

(assert (=> b!57362 d!10637))

(declare-fun d!10639 () Bool)

(assert (=> d!10639 (= (apply!65 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22683) (apply!65 lt!22691 lt!22683))))

(declare-fun lt!22869 () Unit!1488)

(assert (=> d!10639 (= lt!22869 (choose!296 lt!22691 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22683))))

(declare-fun e!37967 () Bool)

(assert (=> d!10639 e!37967))

(declare-fun res!32194 () Bool)

(assert (=> d!10639 (=> (not res!32194) (not e!37967))))

(assert (=> d!10639 (= res!32194 (contains!688 lt!22691 lt!22683))))

(assert (=> d!10639 (= (addApplyDifferent!41 lt!22691 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22683) lt!22869)))

(declare-fun b!57615 () Bool)

(assert (=> b!57615 (= e!37967 (not (= lt!22683 lt!22687)))))

(assert (= (and d!10639 res!32194) b!57615))

(assert (=> d!10639 m!48227))

(declare-fun m!48523 () Bool)

(assert (=> d!10639 m!48523))

(assert (=> d!10639 m!48227))

(assert (=> d!10639 m!48229))

(declare-fun m!48525 () Bool)

(assert (=> d!10639 m!48525))

(assert (=> d!10639 m!48241))

(assert (=> b!57362 d!10639))

(declare-fun b!57640 () Bool)

(declare-fun e!37987 () Bool)

(declare-fun e!37984 () Bool)

(assert (=> b!57640 (= e!37987 e!37984)))

(declare-fun c!7166 () Bool)

(assert (=> b!57640 (= c!7166 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57641 () Bool)

(assert (=> b!57641 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> b!57641 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2004 (_values!2005 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun e!37983 () Bool)

(declare-fun lt!22884 () ListLongMap!1373)

(assert (=> b!57641 (= e!37983 (= (apply!65 lt!22884 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!10641 () Bool)

(declare-fun e!37988 () Bool)

(assert (=> d!10641 e!37988))

(declare-fun res!32203 () Bool)

(assert (=> d!10641 (=> (not res!32203) (not e!37988))))

(assert (=> d!10641 (= res!32203 (not (contains!688 lt!22884 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!37982 () ListLongMap!1373)

(assert (=> d!10641 (= lt!22884 e!37982)))

(declare-fun c!7164 () Bool)

(assert (=> d!10641 (= c!7164 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> d!10641 (validMask!0 (mask!5896 (v!2365 (underlying!222 thiss!992))))))

(assert (=> d!10641 (= (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))) lt!22884)))

(declare-fun b!57642 () Bool)

(declare-fun isEmpty!296 (ListLongMap!1373) Bool)

(assert (=> b!57642 (= e!37984 (isEmpty!296 lt!22884))))

(declare-fun b!57643 () Bool)

(declare-fun res!32205 () Bool)

(assert (=> b!57643 (=> (not res!32205) (not e!37988))))

(assert (=> b!57643 (= res!32205 (not (contains!688 lt!22884 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57644 () Bool)

(assert (=> b!57644 (= e!37984 (= lt!22884 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57645 () Bool)

(declare-fun e!37986 () Bool)

(assert (=> b!57645 (= e!37986 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57645 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!57646 () Bool)

(declare-fun e!37985 () ListLongMap!1373)

(declare-fun call!4174 () ListLongMap!1373)

(assert (=> b!57646 (= e!37985 call!4174)))

(declare-fun b!57647 () Bool)

(assert (=> b!57647 (= e!37982 e!37985)))

(declare-fun c!7165 () Bool)

(assert (=> b!57647 (= c!7165 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!57648 () Bool)

(assert (=> b!57648 (= e!37987 e!37983)))

(assert (=> b!57648 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun res!32204 () Bool)

(assert (=> b!57648 (= res!32204 (contains!688 lt!22884 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57648 (=> (not res!32204) (not e!37983))))

(declare-fun bm!4171 () Bool)

(assert (=> bm!4171 (= call!4174 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun b!57649 () Bool)

(assert (=> b!57649 (= e!37982 (ListLongMap!1374 Nil!1446))))

(declare-fun b!57650 () Bool)

(assert (=> b!57650 (= e!37988 e!37987)))

(declare-fun c!7167 () Bool)

(assert (=> b!57650 (= c!7167 e!37986)))

(declare-fun res!32206 () Bool)

(assert (=> b!57650 (=> (not res!32206) (not e!37986))))

(assert (=> b!57650 (= res!32206 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57651 () Bool)

(declare-fun lt!22889 () Unit!1488)

(declare-fun lt!22885 () Unit!1488)

(assert (=> b!57651 (= lt!22889 lt!22885)))

(declare-fun lt!22887 () (_ BitVec 64))

(declare-fun lt!22886 () ListLongMap!1373)

(declare-fun lt!22890 () (_ BitVec 64))

(declare-fun lt!22888 () V!2835)

(assert (=> b!57651 (not (contains!688 (+!80 lt!22886 (tuple2!2039 lt!22887 lt!22888)) lt!22890))))

(declare-fun addStillNotContains!16 (ListLongMap!1373 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1488)

(assert (=> b!57651 (= lt!22885 (addStillNotContains!16 lt!22886 lt!22887 lt!22888 lt!22890))))

(assert (=> b!57651 (= lt!22890 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!57651 (= lt!22888 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!57651 (= lt!22887 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!57651 (= lt!22886 call!4174)))

(assert (=> b!57651 (= e!37985 (+!80 call!4174 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10641 c!7164) b!57649))

(assert (= (and d!10641 (not c!7164)) b!57647))

(assert (= (and b!57647 c!7165) b!57651))

(assert (= (and b!57647 (not c!7165)) b!57646))

(assert (= (or b!57651 b!57646) bm!4171))

(assert (= (and d!10641 res!32203) b!57643))

(assert (= (and b!57643 res!32205) b!57650))

(assert (= (and b!57650 res!32206) b!57645))

(assert (= (and b!57650 c!7167) b!57648))

(assert (= (and b!57650 (not c!7167)) b!57640))

(assert (= (and b!57648 res!32204) b!57641))

(assert (= (and b!57640 c!7166) b!57644))

(assert (= (and b!57640 (not c!7166)) b!57642))

(declare-fun b_lambda!2523 () Bool)

(assert (=> (not b_lambda!2523) (not b!57641)))

(assert (=> b!57641 t!4772))

(declare-fun b_and!3477 () Bool)

(assert (= b_and!3473 (and (=> t!4772 result!2347) b_and!3477)))

(assert (=> b!57641 t!4774))

(declare-fun b_and!3479 () Bool)

(assert (= b_and!3475 (and (=> t!4774 result!2351) b_and!3479)))

(declare-fun b_lambda!2525 () Bool)

(assert (=> (not b_lambda!2525) (not b!57651)))

(assert (=> b!57651 t!4772))

(declare-fun b_and!3481 () Bool)

(assert (= b_and!3477 (and (=> t!4772 result!2347) b_and!3481)))

(assert (=> b!57651 t!4774))

(declare-fun b_and!3483 () Bool)

(assert (= b_and!3479 (and (=> t!4774 result!2351) b_and!3483)))

(declare-fun m!48527 () Bool)

(assert (=> d!10641 m!48527))

(assert (=> d!10641 m!48115))

(assert (=> b!57647 m!48191))

(assert (=> b!57647 m!48191))

(assert (=> b!57647 m!48245))

(assert (=> b!57641 m!48191))

(assert (=> b!57641 m!48101))

(assert (=> b!57641 m!48191))

(declare-fun m!48529 () Bool)

(assert (=> b!57641 m!48529))

(assert (=> b!57641 m!48205))

(assert (=> b!57641 m!48205))

(assert (=> b!57641 m!48101))

(assert (=> b!57641 m!48207))

(assert (=> b!57645 m!48191))

(assert (=> b!57645 m!48191))

(assert (=> b!57645 m!48245))

(assert (=> b!57648 m!48191))

(assert (=> b!57648 m!48191))

(declare-fun m!48531 () Bool)

(assert (=> b!57648 m!48531))

(declare-fun m!48533 () Bool)

(assert (=> b!57644 m!48533))

(declare-fun m!48535 () Bool)

(assert (=> b!57642 m!48535))

(assert (=> b!57651 m!48191))

(declare-fun m!48537 () Bool)

(assert (=> b!57651 m!48537))

(declare-fun m!48539 () Bool)

(assert (=> b!57651 m!48539))

(assert (=> b!57651 m!48537))

(assert (=> b!57651 m!48101))

(assert (=> b!57651 m!48205))

(assert (=> b!57651 m!48205))

(assert (=> b!57651 m!48101))

(assert (=> b!57651 m!48207))

(declare-fun m!48541 () Bool)

(assert (=> b!57651 m!48541))

(declare-fun m!48543 () Bool)

(assert (=> b!57651 m!48543))

(assert (=> bm!4171 m!48533))

(declare-fun m!48545 () Bool)

(assert (=> b!57643 m!48545))

(assert (=> b!57362 d!10641))

(declare-fun d!10643 () Bool)

(assert (=> d!10643 (= (apply!65 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22681) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22681)))))

(declare-fun bs!2487 () Bool)

(assert (= bs!2487 d!10643))

(declare-fun m!48547 () Bool)

(assert (=> bs!2487 m!48547))

(assert (=> bs!2487 m!48547))

(declare-fun m!48549 () Bool)

(assert (=> bs!2487 m!48549))

(assert (=> b!57362 d!10643))

(declare-fun d!10645 () Bool)

(assert (=> d!10645 (= (apply!65 lt!22694 lt!22681) (get!1076 (getValueByKey!122 (toList!702 lt!22694) lt!22681)))))

(declare-fun bs!2488 () Bool)

(assert (= bs!2488 d!10645))

(declare-fun m!48551 () Bool)

(assert (=> bs!2488 m!48551))

(assert (=> bs!2488 m!48551))

(declare-fun m!48553 () Bool)

(assert (=> bs!2488 m!48553))

(assert (=> b!57362 d!10645))

(declare-fun b!57652 () Bool)

(declare-fun e!37995 () Bool)

(declare-fun call!4177 () Bool)

(assert (=> b!57652 (= e!37995 (not call!4177))))

(declare-fun call!4180 () ListLongMap!1373)

(declare-fun c!7168 () Bool)

(declare-fun call!4176 () ListLongMap!1373)

(declare-fun call!4179 () ListLongMap!1373)

(declare-fun call!4178 () ListLongMap!1373)

(declare-fun c!7171 () Bool)

(declare-fun bm!4172 () Bool)

(assert (=> bm!4172 (= call!4178 (+!80 (ite c!7171 call!4180 (ite c!7168 call!4179 call!4176)) (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(declare-fun b!57653 () Bool)

(declare-fun res!32210 () Bool)

(declare-fun e!37999 () Bool)

(assert (=> b!57653 (=> (not res!32210) (not e!37999))))

(declare-fun e!38000 () Bool)

(assert (=> b!57653 (= res!32210 e!38000)))

(declare-fun c!7170 () Bool)

(assert (=> b!57653 (= c!7170 (not (= (bvand (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4173 () Bool)

(assert (=> bm!4173 (= call!4176 call!4179)))

(declare-fun b!57654 () Bool)

(declare-fun e!37990 () Bool)

(assert (=> b!57654 (= e!37990 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57655 () Bool)

(declare-fun call!4181 () Bool)

(assert (=> b!57655 (= e!38000 (not call!4181))))

(declare-fun d!10647 () Bool)

(assert (=> d!10647 e!37999))

(declare-fun res!32207 () Bool)

(assert (=> d!10647 (=> (not res!32207) (not e!37999))))

(assert (=> d!10647 (= res!32207 (or (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))))

(declare-fun lt!22905 () ListLongMap!1373)

(declare-fun lt!22896 () ListLongMap!1373)

(assert (=> d!10647 (= lt!22905 lt!22896)))

(declare-fun lt!22900 () Unit!1488)

(declare-fun e!37997 () Unit!1488)

(assert (=> d!10647 (= lt!22900 e!37997)))

(declare-fun c!7172 () Bool)

(assert (=> d!10647 (= c!7172 e!37990)))

(declare-fun res!32214 () Bool)

(assert (=> d!10647 (=> (not res!32214) (not e!37990))))

(assert (=> d!10647 (= res!32214 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun e!37994 () ListLongMap!1373)

(assert (=> d!10647 (= lt!22896 e!37994)))

(assert (=> d!10647 (= c!7171 (and (not (= (bvand (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10647 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10647 (= (getCurrentListMap!400 (_keys!3642 newMap!16) (ite c!7124 (_values!2005 newMap!16) lt!22772) (mask!5896 newMap!16) (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!22905)))

(declare-fun e!38001 () Bool)

(declare-fun b!57656 () Bool)

(assert (=> b!57656 (= e!38001 (= (apply!65 lt!22905 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))

(declare-fun e!37989 () Bool)

(declare-fun b!57657 () Bool)

(assert (=> b!57657 (= e!37989 (= (apply!65 lt!22905 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 (ite c!7124 (_values!2005 newMap!16) lt!22772)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57657 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (ite c!7124 (_values!2005 newMap!16) lt!22772))))))

(assert (=> b!57657 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57658 () Bool)

(declare-fun e!37992 () ListLongMap!1373)

(assert (=> b!57658 (= e!37992 call!4176)))

(declare-fun bm!4174 () Bool)

(assert (=> bm!4174 (= call!4180 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7124 (_values!2005 newMap!16) lt!22772) (mask!5896 newMap!16) (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!57659 () Bool)

(assert (=> b!57659 (= e!37994 (+!80 call!4178 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))

(declare-fun b!57660 () Bool)

(assert (=> b!57660 (= e!37995 e!38001)))

(declare-fun res!32208 () Bool)

(assert (=> b!57660 (= res!32208 call!4177)))

(assert (=> b!57660 (=> (not res!32208) (not e!38001))))

(declare-fun bm!4175 () Bool)

(assert (=> bm!4175 (= call!4181 (contains!688 lt!22905 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4176 () Bool)

(assert (=> bm!4176 (= call!4177 (contains!688 lt!22905 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57661 () Bool)

(assert (=> b!57661 (= e!37999 e!37995)))

(declare-fun c!7173 () Bool)

(assert (=> b!57661 (= c!7173 (not (= (bvand (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!57662 () Bool)

(declare-fun res!32212 () Bool)

(assert (=> b!57662 (=> (not res!32212) (not e!37999))))

(declare-fun e!37998 () Bool)

(assert (=> b!57662 (= res!32212 e!37998)))

(declare-fun res!32211 () Bool)

(assert (=> b!57662 (=> res!32211 e!37998)))

(declare-fun e!37991 () Bool)

(assert (=> b!57662 (= res!32211 (not e!37991))))

(declare-fun res!32215 () Bool)

(assert (=> b!57662 (=> (not res!32215) (not e!37991))))

(assert (=> b!57662 (= res!32215 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57663 () Bool)

(assert (=> b!57663 (= e!37998 e!37989)))

(declare-fun res!32209 () Bool)

(assert (=> b!57663 (=> (not res!32209) (not e!37989))))

(assert (=> b!57663 (= res!32209 (contains!688 lt!22905 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57663 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57664 () Bool)

(declare-fun lt!22906 () Unit!1488)

(assert (=> b!57664 (= e!37997 lt!22906)))

(declare-fun lt!22912 () ListLongMap!1373)

(assert (=> b!57664 (= lt!22912 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7124 (_values!2005 newMap!16) lt!22772) (mask!5896 newMap!16) (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22894 () (_ BitVec 64))

(assert (=> b!57664 (= lt!22894 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22910 () (_ BitVec 64))

(assert (=> b!57664 (= lt!22910 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22911 () Unit!1488)

(assert (=> b!57664 (= lt!22911 (addStillContains!41 lt!22912 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22910))))

(assert (=> b!57664 (contains!688 (+!80 lt!22912 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22910)))

(declare-fun lt!22907 () Unit!1488)

(assert (=> b!57664 (= lt!22907 lt!22911)))

(declare-fun lt!22904 () ListLongMap!1373)

(assert (=> b!57664 (= lt!22904 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7124 (_values!2005 newMap!16) lt!22772) (mask!5896 newMap!16) (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22898 () (_ BitVec 64))

(assert (=> b!57664 (= lt!22898 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22891 () (_ BitVec 64))

(assert (=> b!57664 (= lt!22891 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22902 () Unit!1488)

(assert (=> b!57664 (= lt!22902 (addApplyDifferent!41 lt!22904 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!22891))))

(assert (=> b!57664 (= (apply!65 (+!80 lt!22904 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!22891) (apply!65 lt!22904 lt!22891))))

(declare-fun lt!22895 () Unit!1488)

(assert (=> b!57664 (= lt!22895 lt!22902)))

(declare-fun lt!22892 () ListLongMap!1373)

(assert (=> b!57664 (= lt!22892 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7124 (_values!2005 newMap!16) lt!22772) (mask!5896 newMap!16) (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22908 () (_ BitVec 64))

(assert (=> b!57664 (= lt!22908 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22899 () (_ BitVec 64))

(assert (=> b!57664 (= lt!22899 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22903 () Unit!1488)

(assert (=> b!57664 (= lt!22903 (addApplyDifferent!41 lt!22892 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22899))))

(assert (=> b!57664 (= (apply!65 (+!80 lt!22892 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22899) (apply!65 lt!22892 lt!22899))))

(declare-fun lt!22909 () Unit!1488)

(assert (=> b!57664 (= lt!22909 lt!22903)))

(declare-fun lt!22901 () ListLongMap!1373)

(assert (=> b!57664 (= lt!22901 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7124 (_values!2005 newMap!16) lt!22772) (mask!5896 newMap!16) (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22897 () (_ BitVec 64))

(assert (=> b!57664 (= lt!22897 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22893 () (_ BitVec 64))

(assert (=> b!57664 (= lt!22893 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57664 (= lt!22906 (addApplyDifferent!41 lt!22901 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!22893))))

(assert (=> b!57664 (= (apply!65 (+!80 lt!22901 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!22893) (apply!65 lt!22901 lt!22893))))

(declare-fun b!57665 () Bool)

(assert (=> b!57665 (= e!37991 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57666 () Bool)

(declare-fun call!4175 () ListLongMap!1373)

(assert (=> b!57666 (= e!37992 call!4175)))

(declare-fun bm!4177 () Bool)

(assert (=> bm!4177 (= call!4175 call!4178)))

(declare-fun bm!4178 () Bool)

(assert (=> bm!4178 (= call!4179 call!4180)))

(declare-fun e!37996 () Bool)

(declare-fun b!57667 () Bool)

(assert (=> b!57667 (= e!37996 (= (apply!65 lt!22905 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))

(declare-fun b!57668 () Bool)

(declare-fun e!37993 () ListLongMap!1373)

(assert (=> b!57668 (= e!37994 e!37993)))

(assert (=> b!57668 (= c!7168 (and (not (= (bvand (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!57669 () Bool)

(assert (=> b!57669 (= e!37993 call!4175)))

(declare-fun b!57670 () Bool)

(assert (=> b!57670 (= e!38000 e!37996)))

(declare-fun res!32213 () Bool)

(assert (=> b!57670 (= res!32213 call!4181)))

(assert (=> b!57670 (=> (not res!32213) (not e!37996))))

(declare-fun b!57671 () Bool)

(declare-fun Unit!1503 () Unit!1488)

(assert (=> b!57671 (= e!37997 Unit!1503)))

(declare-fun b!57672 () Bool)

(declare-fun c!7169 () Bool)

(assert (=> b!57672 (= c!7169 (and (not (= (bvand (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57672 (= e!37993 e!37992)))

(assert (= (and d!10647 c!7171) b!57659))

(assert (= (and d!10647 (not c!7171)) b!57668))

(assert (= (and b!57668 c!7168) b!57669))

(assert (= (and b!57668 (not c!7168)) b!57672))

(assert (= (and b!57672 c!7169) b!57666))

(assert (= (and b!57672 (not c!7169)) b!57658))

(assert (= (or b!57666 b!57658) bm!4173))

(assert (= (or b!57669 bm!4173) bm!4178))

(assert (= (or b!57669 b!57666) bm!4177))

(assert (= (or b!57659 bm!4178) bm!4174))

(assert (= (or b!57659 bm!4177) bm!4172))

(assert (= (and d!10647 res!32214) b!57654))

(assert (= (and d!10647 c!7172) b!57664))

(assert (= (and d!10647 (not c!7172)) b!57671))

(assert (= (and d!10647 res!32207) b!57662))

(assert (= (and b!57662 res!32215) b!57665))

(assert (= (and b!57662 (not res!32211)) b!57663))

(assert (= (and b!57663 res!32209) b!57657))

(assert (= (and b!57662 res!32212) b!57653))

(assert (= (and b!57653 c!7170) b!57670))

(assert (= (and b!57653 (not c!7170)) b!57655))

(assert (= (and b!57670 res!32213) b!57667))

(assert (= (or b!57670 b!57655) bm!4175))

(assert (= (and b!57653 res!32210) b!57661))

(assert (= (and b!57661 c!7173) b!57660))

(assert (= (and b!57661 (not c!7173)) b!57652))

(assert (= (and b!57660 res!32208) b!57656))

(assert (= (or b!57660 b!57652) bm!4176))

(declare-fun b_lambda!2527 () Bool)

(assert (=> (not b_lambda!2527) (not b!57657)))

(assert (=> b!57657 t!4783))

(declare-fun b_and!3485 () Bool)

(assert (= b_and!3481 (and (=> t!4783 result!2361) b_and!3485)))

(assert (=> b!57657 t!4785))

(declare-fun b_and!3487 () Bool)

(assert (= b_and!3483 (and (=> t!4785 result!2363) b_and!3487)))

(assert (=> b!57657 m!48339))

(declare-fun m!48555 () Bool)

(assert (=> b!57657 m!48555))

(assert (=> b!57657 m!48339))

(declare-fun m!48557 () Bool)

(assert (=> b!57657 m!48557))

(assert (=> b!57657 m!48345))

(assert (=> b!57657 m!48555))

(assert (=> b!57657 m!48345))

(declare-fun m!48559 () Bool)

(assert (=> b!57657 m!48559))

(declare-fun m!48561 () Bool)

(assert (=> bm!4175 m!48561))

(declare-fun m!48563 () Bool)

(assert (=> b!57664 m!48563))

(declare-fun m!48565 () Bool)

(assert (=> b!57664 m!48565))

(declare-fun m!48567 () Bool)

(assert (=> b!57664 m!48567))

(declare-fun m!48569 () Bool)

(assert (=> b!57664 m!48569))

(declare-fun m!48571 () Bool)

(assert (=> b!57664 m!48571))

(assert (=> b!57664 m!48563))

(declare-fun m!48573 () Bool)

(assert (=> b!57664 m!48573))

(declare-fun m!48575 () Bool)

(assert (=> b!57664 m!48575))

(declare-fun m!48577 () Bool)

(assert (=> b!57664 m!48577))

(declare-fun m!48579 () Bool)

(assert (=> b!57664 m!48579))

(assert (=> b!57664 m!48345))

(declare-fun m!48581 () Bool)

(assert (=> b!57664 m!48581))

(declare-fun m!48583 () Bool)

(assert (=> b!57664 m!48583))

(assert (=> b!57664 m!48569))

(declare-fun m!48585 () Bool)

(assert (=> b!57664 m!48585))

(declare-fun m!48587 () Bool)

(assert (=> b!57664 m!48587))

(assert (=> b!57664 m!48577))

(assert (=> b!57664 m!48571))

(declare-fun m!48589 () Bool)

(assert (=> b!57664 m!48589))

(declare-fun m!48591 () Bool)

(assert (=> b!57664 m!48591))

(declare-fun m!48593 () Bool)

(assert (=> b!57664 m!48593))

(assert (=> b!57665 m!48345))

(assert (=> b!57665 m!48345))

(assert (=> b!57665 m!48383))

(assert (=> b!57663 m!48345))

(assert (=> b!57663 m!48345))

(declare-fun m!48595 () Bool)

(assert (=> b!57663 m!48595))

(declare-fun m!48597 () Bool)

(assert (=> bm!4172 m!48597))

(assert (=> bm!4174 m!48565))

(declare-fun m!48599 () Bool)

(assert (=> b!57667 m!48599))

(declare-fun m!48601 () Bool)

(assert (=> b!57656 m!48601))

(declare-fun m!48603 () Bool)

(assert (=> bm!4176 m!48603))

(assert (=> d!10647 m!48395))

(assert (=> b!57654 m!48345))

(assert (=> b!57654 m!48345))

(assert (=> b!57654 m!48383))

(declare-fun m!48605 () Bool)

(assert (=> b!57659 m!48605))

(assert (=> bm!4161 d!10647))

(declare-fun d!10649 () Bool)

(assert (=> d!10649 (isDefined!76 (getValueByKey!122 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun lt!22915 () Unit!1488)

(declare-fun choose!298 (List!1449 (_ BitVec 64)) Unit!1488)

(assert (=> d!10649 (= lt!22915 (choose!298 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!38004 () Bool)

(assert (=> d!10649 e!38004))

(declare-fun res!32218 () Bool)

(assert (=> d!10649 (=> (not res!32218) (not e!38004))))

(declare-fun isStrictlySorted!278 (List!1449) Bool)

(assert (=> d!10649 (= res!32218 (isStrictlySorted!278 (toList!702 lt!22601)))))

(assert (=> d!10649 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) lt!22915)))

(declare-fun b!57675 () Bool)

(assert (=> b!57675 (= e!38004 (containsKey!126 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10649 res!32218) b!57675))

(assert (=> d!10649 m!48105))

(assert (=> d!10649 m!48271))

(assert (=> d!10649 m!48271))

(assert (=> d!10649 m!48273))

(assert (=> d!10649 m!48105))

(declare-fun m!48607 () Bool)

(assert (=> d!10649 m!48607))

(declare-fun m!48609 () Bool)

(assert (=> d!10649 m!48609))

(assert (=> b!57675 m!48105))

(assert (=> b!57675 m!48267))

(assert (=> b!57386 d!10649))

(assert (=> b!57386 d!10605))

(assert (=> b!57386 d!10607))

(declare-fun d!10651 () Bool)

(assert (=> d!10651 (= (+!80 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22918 () Unit!1488)

(declare-fun choose!299 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 V!2835 Int) Unit!1488)

(assert (=> d!10651 (= lt!22918 (choose!299 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10651 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10651 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)) lt!22918)))

(declare-fun bs!2489 () Bool)

(assert (= bs!2489 d!10651))

(assert (=> bs!2489 m!48103))

(declare-fun m!48611 () Bool)

(assert (=> bs!2489 m!48611))

(assert (=> bs!2489 m!48203))

(declare-fun m!48613 () Bool)

(assert (=> bs!2489 m!48613))

(assert (=> bs!2489 m!48395))

(assert (=> bs!2489 m!48103))

(declare-fun m!48615 () Bool)

(assert (=> bs!2489 m!48615))

(assert (=> bs!2489 m!48203))

(assert (=> b!57493 d!10651))

(declare-fun d!10653 () Bool)

(assert (=> d!10653 (= (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57352 d!10653))

(declare-fun d!10655 () Bool)

(declare-fun res!32219 () Bool)

(declare-fun e!38005 () Bool)

(assert (=> d!10655 (=> res!32219 e!38005)))

(assert (=> d!10655 (= res!32219 (= (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10655 (= (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000) e!38005)))

(declare-fun b!57676 () Bool)

(declare-fun e!38006 () Bool)

(assert (=> b!57676 (= e!38005 e!38006)))

(declare-fun res!32220 () Bool)

(assert (=> b!57676 (=> (not res!32220) (not e!38006))))

(assert (=> b!57676 (= res!32220 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57677 () Bool)

(assert (=> b!57677 (= e!38006 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!10655 (not res!32219)) b!57676))

(assert (= (and b!57676 res!32220) b!57677))

(assert (=> d!10655 m!48345))

(assert (=> b!57677 m!48105))

(declare-fun m!48617 () Bool)

(assert (=> b!57677 m!48617))

(assert (=> bm!4139 d!10655))

(declare-fun b!57686 () Bool)

(declare-fun e!38011 () (_ BitVec 32))

(declare-fun call!4184 () (_ BitVec 32))

(assert (=> b!57686 (= e!38011 (bvadd #b00000000000000000000000000000001 call!4184))))

(declare-fun b!57687 () Bool)

(assert (=> b!57687 (= e!38011 call!4184)))

(declare-fun bm!4181 () Bool)

(assert (=> bm!4181 (= call!4184 (arrayCountValidKeys!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57688 () Bool)

(declare-fun e!38012 () (_ BitVec 32))

(assert (=> b!57688 (= e!38012 #b00000000000000000000000000000000)))

(declare-fun b!57689 () Bool)

(assert (=> b!57689 (= e!38012 e!38011)))

(declare-fun c!7178 () Bool)

(assert (=> b!57689 (= c!7178 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!10657 () Bool)

(declare-fun lt!22921 () (_ BitVec 32))

(assert (=> d!10657 (and (bvsge lt!22921 #b00000000000000000000000000000000) (bvsle lt!22921 (bvsub (size!2003 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!10657 (= lt!22921 e!38012)))

(declare-fun c!7179 () Bool)

(assert (=> d!10657 (= c!7179 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!10657 (and (bvsle #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2003 (_keys!3642 newMap!16)) (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!10657 (= (arrayCountValidKeys!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) lt!22921)))

(assert (= (and d!10657 c!7179) b!57688))

(assert (= (and d!10657 (not c!7179)) b!57689))

(assert (= (and b!57689 c!7178) b!57686))

(assert (= (and b!57689 (not c!7178)) b!57687))

(assert (= (or b!57686 b!57687) bm!4181))

(declare-fun m!48619 () Bool)

(assert (=> bm!4181 m!48619))

(assert (=> b!57689 m!48345))

(assert (=> b!57689 m!48345))

(assert (=> b!57689 m!48383))

(assert (=> b!57377 d!10657))

(declare-fun d!10659 () Bool)

(assert (=> d!10659 (= (apply!65 lt!22695 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2490 () Bool)

(assert (= bs!2490 d!10659))

(assert (=> bs!2490 m!48403))

(assert (=> bs!2490 m!48403))

(declare-fun m!48621 () Bool)

(assert (=> bs!2490 m!48621))

(assert (=> b!57354 d!10659))

(declare-fun d!10661 () Bool)

(declare-fun e!38013 () Bool)

(assert (=> d!10661 e!38013))

(declare-fun res!32222 () Bool)

(assert (=> d!10661 (=> (not res!32222) (not e!38013))))

(declare-fun lt!22924 () ListLongMap!1373)

(assert (=> d!10661 (= res!32222 (contains!688 lt!22924 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!22925 () List!1449)

(assert (=> d!10661 (= lt!22924 (ListLongMap!1374 lt!22925))))

(declare-fun lt!22922 () Unit!1488)

(declare-fun lt!22923 () Unit!1488)

(assert (=> d!10661 (= lt!22922 lt!22923)))

(assert (=> d!10661 (= (getValueByKey!122 lt!22925 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10661 (= lt!22923 (lemmaContainsTupThenGetReturnValue!41 lt!22925 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10661 (= lt!22925 (insertStrictlySorted!43 (toList!702 call!4151) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10661 (= (+!80 call!4151 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!22924)))

(declare-fun b!57690 () Bool)

(declare-fun res!32221 () Bool)

(assert (=> b!57690 (=> (not res!32221) (not e!38013))))

(assert (=> b!57690 (= res!32221 (= (getValueByKey!122 (toList!702 lt!22924) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!57691 () Bool)

(assert (=> b!57691 (= e!38013 (contains!690 (toList!702 lt!22924) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10661 res!32222) b!57690))

(assert (= (and b!57690 res!32221) b!57691))

(declare-fun m!48623 () Bool)

(assert (=> d!10661 m!48623))

(declare-fun m!48625 () Bool)

(assert (=> d!10661 m!48625))

(declare-fun m!48627 () Bool)

(assert (=> d!10661 m!48627))

(declare-fun m!48629 () Bool)

(assert (=> d!10661 m!48629))

(declare-fun m!48631 () Bool)

(assert (=> b!57690 m!48631))

(declare-fun m!48633 () Bool)

(assert (=> b!57691 m!48633))

(assert (=> b!57512 d!10661))

(declare-fun d!10663 () Bool)

(assert (=> d!10663 (= (map!1104 (_2!1030 lt!22784)) (getCurrentListMap!400 (_keys!3642 (_2!1030 lt!22784)) (_values!2005 (_2!1030 lt!22784)) (mask!5896 (_2!1030 lt!22784)) (extraKeys!1913 (_2!1030 lt!22784)) (zeroValue!1940 (_2!1030 lt!22784)) (minValue!1940 (_2!1030 lt!22784)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1030 lt!22784))))))

(declare-fun bs!2491 () Bool)

(assert (= bs!2491 d!10663))

(declare-fun m!48635 () Bool)

(assert (=> bs!2491 m!48635))

(assert (=> bm!4138 d!10663))

(declare-fun d!10665 () Bool)

(declare-fun res!32223 () Bool)

(declare-fun e!38014 () Bool)

(assert (=> d!10665 (=> (not res!32223) (not e!38014))))

(assert (=> d!10665 (= res!32223 (simpleValid!40 (_2!1030 lt!22784)))))

(assert (=> d!10665 (= (valid!246 (_2!1030 lt!22784)) e!38014)))

(declare-fun b!57692 () Bool)

(declare-fun res!32224 () Bool)

(assert (=> b!57692 (=> (not res!32224) (not e!38014))))

(assert (=> b!57692 (= res!32224 (= (arrayCountValidKeys!0 (_keys!3642 (_2!1030 lt!22784)) #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))) (_size!355 (_2!1030 lt!22784))))))

(declare-fun b!57693 () Bool)

(declare-fun res!32225 () Bool)

(assert (=> b!57693 (=> (not res!32225) (not e!38014))))

(assert (=> b!57693 (= res!32225 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 (_2!1030 lt!22784)) (mask!5896 (_2!1030 lt!22784))))))

(declare-fun b!57694 () Bool)

(assert (=> b!57694 (= e!38014 (arrayNoDuplicates!0 (_keys!3642 (_2!1030 lt!22784)) #b00000000000000000000000000000000 Nil!1447))))

(assert (= (and d!10665 res!32223) b!57692))

(assert (= (and b!57692 res!32224) b!57693))

(assert (= (and b!57693 res!32225) b!57694))

(declare-fun m!48637 () Bool)

(assert (=> d!10665 m!48637))

(declare-fun m!48639 () Bool)

(assert (=> b!57692 m!48639))

(declare-fun m!48641 () Bool)

(assert (=> b!57693 m!48641))

(declare-fun m!48643 () Bool)

(assert (=> b!57694 m!48643))

(assert (=> d!10591 d!10665))

(assert (=> d!10591 d!10583))

(declare-fun d!10667 () Bool)

(declare-fun e!38015 () Bool)

(assert (=> d!10667 e!38015))

(declare-fun res!32227 () Bool)

(assert (=> d!10667 (=> (not res!32227) (not e!38015))))

(declare-fun lt!22928 () ListLongMap!1373)

(assert (=> d!10667 (= res!32227 (contains!688 lt!22928 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun lt!22929 () List!1449)

(assert (=> d!10667 (= lt!22928 (ListLongMap!1374 lt!22929))))

(declare-fun lt!22926 () Unit!1488)

(declare-fun lt!22927 () Unit!1488)

(assert (=> d!10667 (= lt!22926 lt!22927)))

(assert (=> d!10667 (= (getValueByKey!122 lt!22929 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10667 (= lt!22927 (lemmaContainsTupThenGetReturnValue!41 lt!22929 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10667 (= lt!22929 (insertStrictlySorted!43 (toList!702 call!4089) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10667 (= (+!80 call!4089 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22928)))

(declare-fun b!57695 () Bool)

(declare-fun res!32226 () Bool)

(assert (=> b!57695 (=> (not res!32226) (not e!38015))))

(assert (=> b!57695 (= res!32226 (= (getValueByKey!122 (toList!702 lt!22928) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!57696 () Bool)

(assert (=> b!57696 (= e!38015 (contains!690 (toList!702 lt!22928) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(assert (= (and d!10667 res!32227) b!57695))

(assert (= (and b!57695 res!32226) b!57696))

(declare-fun m!48645 () Bool)

(assert (=> d!10667 m!48645))

(declare-fun m!48647 () Bool)

(assert (=> d!10667 m!48647))

(declare-fun m!48649 () Bool)

(assert (=> d!10667 m!48649))

(declare-fun m!48651 () Bool)

(assert (=> d!10667 m!48651))

(declare-fun m!48653 () Bool)

(assert (=> b!57695 m!48653))

(declare-fun m!48655 () Bool)

(assert (=> b!57696 m!48655))

(assert (=> b!57357 d!10667))

(declare-fun b!57697 () Bool)

(declare-fun e!38022 () Bool)

(declare-fun call!4187 () Bool)

(assert (=> b!57697 (= e!38022 (not call!4187))))

(declare-fun call!4188 () ListLongMap!1373)

(declare-fun bm!4182 () Bool)

(declare-fun call!4190 () ListLongMap!1373)

(declare-fun call!4189 () ListLongMap!1373)

(declare-fun call!4186 () ListLongMap!1373)

(declare-fun c!7183 () Bool)

(declare-fun c!7180 () Bool)

(assert (=> bm!4182 (= call!4188 (+!80 (ite c!7183 call!4190 (ite c!7180 call!4189 call!4186)) (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!57698 () Bool)

(declare-fun res!32231 () Bool)

(declare-fun e!38026 () Bool)

(assert (=> b!57698 (=> (not res!32231) (not e!38026))))

(declare-fun e!38027 () Bool)

(assert (=> b!57698 (= res!32231 e!38027)))

(declare-fun c!7182 () Bool)

(assert (=> b!57698 (= c!7182 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4183 () Bool)

(assert (=> bm!4183 (= call!4186 call!4189)))

(declare-fun b!57699 () Bool)

(declare-fun e!38017 () Bool)

(assert (=> b!57699 (= e!38017 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57700 () Bool)

(declare-fun call!4191 () Bool)

(assert (=> b!57700 (= e!38027 (not call!4191))))

(declare-fun d!10669 () Bool)

(assert (=> d!10669 e!38026))

(declare-fun res!32228 () Bool)

(assert (=> d!10669 (=> (not res!32228) (not e!38026))))

(assert (=> d!10669 (= res!32228 (or (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))))

(declare-fun lt!22944 () ListLongMap!1373)

(declare-fun lt!22935 () ListLongMap!1373)

(assert (=> d!10669 (= lt!22944 lt!22935)))

(declare-fun lt!22939 () Unit!1488)

(declare-fun e!38024 () Unit!1488)

(assert (=> d!10669 (= lt!22939 e!38024)))

(declare-fun c!7184 () Bool)

(assert (=> d!10669 (= c!7184 e!38017)))

(declare-fun res!32235 () Bool)

(assert (=> d!10669 (=> (not res!32235) (not e!38017))))

(assert (=> d!10669 (= res!32235 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun e!38021 () ListLongMap!1373)

(assert (=> d!10669 (= lt!22935 e!38021)))

(assert (=> d!10669 (= c!7183 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10669 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10669 (= (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!22944)))

(declare-fun b!57701 () Bool)

(declare-fun e!38028 () Bool)

(assert (=> b!57701 (= e!38028 (= (apply!65 lt!22944 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!57702 () Bool)

(declare-fun e!38016 () Bool)

(assert (=> b!57702 (= e!38016 (= (apply!65 lt!22944 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57702 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_values!2005 newMap!16))))))

(assert (=> b!57702 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57703 () Bool)

(declare-fun e!38019 () ListLongMap!1373)

(assert (=> b!57703 (= e!38019 call!4186)))

(declare-fun bm!4184 () Bool)

(assert (=> bm!4184 (= call!4190 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!57704 () Bool)

(assert (=> b!57704 (= e!38021 (+!80 call!4188 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun b!57705 () Bool)

(assert (=> b!57705 (= e!38022 e!38028)))

(declare-fun res!32229 () Bool)

(assert (=> b!57705 (= res!32229 call!4187)))

(assert (=> b!57705 (=> (not res!32229) (not e!38028))))

(declare-fun bm!4185 () Bool)

(assert (=> bm!4185 (= call!4191 (contains!688 lt!22944 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4186 () Bool)

(assert (=> bm!4186 (= call!4187 (contains!688 lt!22944 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57706 () Bool)

(assert (=> b!57706 (= e!38026 e!38022)))

(declare-fun c!7185 () Bool)

(assert (=> b!57706 (= c!7185 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!57707 () Bool)

(declare-fun res!32233 () Bool)

(assert (=> b!57707 (=> (not res!32233) (not e!38026))))

(declare-fun e!38025 () Bool)

(assert (=> b!57707 (= res!32233 e!38025)))

(declare-fun res!32232 () Bool)

(assert (=> b!57707 (=> res!32232 e!38025)))

(declare-fun e!38018 () Bool)

(assert (=> b!57707 (= res!32232 (not e!38018))))

(declare-fun res!32236 () Bool)

(assert (=> b!57707 (=> (not res!32236) (not e!38018))))

(assert (=> b!57707 (= res!32236 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57708 () Bool)

(assert (=> b!57708 (= e!38025 e!38016)))

(declare-fun res!32230 () Bool)

(assert (=> b!57708 (=> (not res!32230) (not e!38016))))

(assert (=> b!57708 (= res!32230 (contains!688 lt!22944 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57708 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57709 () Bool)

(declare-fun lt!22945 () Unit!1488)

(assert (=> b!57709 (= e!38024 lt!22945)))

(declare-fun lt!22951 () ListLongMap!1373)

(assert (=> b!57709 (= lt!22951 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22933 () (_ BitVec 64))

(assert (=> b!57709 (= lt!22933 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22949 () (_ BitVec 64))

(assert (=> b!57709 (= lt!22949 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22950 () Unit!1488)

(assert (=> b!57709 (= lt!22950 (addStillContains!41 lt!22951 lt!22933 (zeroValue!1940 newMap!16) lt!22949))))

(assert (=> b!57709 (contains!688 (+!80 lt!22951 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16))) lt!22949)))

(declare-fun lt!22946 () Unit!1488)

(assert (=> b!57709 (= lt!22946 lt!22950)))

(declare-fun lt!22943 () ListLongMap!1373)

(assert (=> b!57709 (= lt!22943 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22937 () (_ BitVec 64))

(assert (=> b!57709 (= lt!22937 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22930 () (_ BitVec 64))

(assert (=> b!57709 (= lt!22930 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22941 () Unit!1488)

(assert (=> b!57709 (= lt!22941 (addApplyDifferent!41 lt!22943 lt!22937 (minValue!1940 newMap!16) lt!22930))))

(assert (=> b!57709 (= (apply!65 (+!80 lt!22943 (tuple2!2039 lt!22937 (minValue!1940 newMap!16))) lt!22930) (apply!65 lt!22943 lt!22930))))

(declare-fun lt!22934 () Unit!1488)

(assert (=> b!57709 (= lt!22934 lt!22941)))

(declare-fun lt!22931 () ListLongMap!1373)

(assert (=> b!57709 (= lt!22931 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22947 () (_ BitVec 64))

(assert (=> b!57709 (= lt!22947 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22938 () (_ BitVec 64))

(assert (=> b!57709 (= lt!22938 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!22942 () Unit!1488)

(assert (=> b!57709 (= lt!22942 (addApplyDifferent!41 lt!22931 lt!22947 (zeroValue!1940 newMap!16) lt!22938))))

(assert (=> b!57709 (= (apply!65 (+!80 lt!22931 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16))) lt!22938) (apply!65 lt!22931 lt!22938))))

(declare-fun lt!22948 () Unit!1488)

(assert (=> b!57709 (= lt!22948 lt!22942)))

(declare-fun lt!22940 () ListLongMap!1373)

(assert (=> b!57709 (= lt!22940 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22936 () (_ BitVec 64))

(assert (=> b!57709 (= lt!22936 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!22932 () (_ BitVec 64))

(assert (=> b!57709 (= lt!22932 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!57709 (= lt!22945 (addApplyDifferent!41 lt!22940 lt!22936 (minValue!1940 newMap!16) lt!22932))))

(assert (=> b!57709 (= (apply!65 (+!80 lt!22940 (tuple2!2039 lt!22936 (minValue!1940 newMap!16))) lt!22932) (apply!65 lt!22940 lt!22932))))

(declare-fun b!57710 () Bool)

(assert (=> b!57710 (= e!38018 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57711 () Bool)

(declare-fun call!4185 () ListLongMap!1373)

(assert (=> b!57711 (= e!38019 call!4185)))

(declare-fun bm!4187 () Bool)

(assert (=> bm!4187 (= call!4185 call!4188)))

(declare-fun bm!4188 () Bool)

(assert (=> bm!4188 (= call!4189 call!4190)))

(declare-fun b!57712 () Bool)

(declare-fun e!38023 () Bool)

(assert (=> b!57712 (= e!38023 (= (apply!65 lt!22944 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!57713 () Bool)

(declare-fun e!38020 () ListLongMap!1373)

(assert (=> b!57713 (= e!38021 e!38020)))

(assert (=> b!57713 (= c!7180 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!57714 () Bool)

(assert (=> b!57714 (= e!38020 call!4185)))

(declare-fun b!57715 () Bool)

(assert (=> b!57715 (= e!38027 e!38023)))

(declare-fun res!32234 () Bool)

(assert (=> b!57715 (= res!32234 call!4191)))

(assert (=> b!57715 (=> (not res!32234) (not e!38023))))

(declare-fun b!57716 () Bool)

(declare-fun Unit!1504 () Unit!1488)

(assert (=> b!57716 (= e!38024 Unit!1504)))

(declare-fun b!57717 () Bool)

(declare-fun c!7181 () Bool)

(assert (=> b!57717 (= c!7181 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!57717 (= e!38020 e!38019)))

(assert (= (and d!10669 c!7183) b!57704))

(assert (= (and d!10669 (not c!7183)) b!57713))

(assert (= (and b!57713 c!7180) b!57714))

(assert (= (and b!57713 (not c!7180)) b!57717))

(assert (= (and b!57717 c!7181) b!57711))

(assert (= (and b!57717 (not c!7181)) b!57703))

(assert (= (or b!57711 b!57703) bm!4183))

(assert (= (or b!57714 bm!4183) bm!4188))

(assert (= (or b!57714 b!57711) bm!4187))

(assert (= (or b!57704 bm!4188) bm!4184))

(assert (= (or b!57704 bm!4187) bm!4182))

(assert (= (and d!10669 res!32235) b!57699))

(assert (= (and d!10669 c!7184) b!57709))

(assert (= (and d!10669 (not c!7184)) b!57716))

(assert (= (and d!10669 res!32228) b!57707))

(assert (= (and b!57707 res!32236) b!57710))

(assert (= (and b!57707 (not res!32232)) b!57708))

(assert (= (and b!57708 res!32230) b!57702))

(assert (= (and b!57707 res!32233) b!57698))

(assert (= (and b!57698 c!7182) b!57715))

(assert (= (and b!57698 (not c!7182)) b!57700))

(assert (= (and b!57715 res!32234) b!57712))

(assert (= (or b!57715 b!57700) bm!4185))

(assert (= (and b!57698 res!32231) b!57706))

(assert (= (and b!57706 c!7185) b!57705))

(assert (= (and b!57706 (not c!7185)) b!57697))

(assert (= (and b!57705 res!32229) b!57701))

(assert (= (or b!57705 b!57697) bm!4186))

(declare-fun b_lambda!2529 () Bool)

(assert (=> (not b_lambda!2529) (not b!57702)))

(assert (=> b!57702 t!4783))

(declare-fun b_and!3489 () Bool)

(assert (= b_and!3485 (and (=> t!4783 result!2361) b_and!3489)))

(assert (=> b!57702 t!4785))

(declare-fun b_and!3491 () Bool)

(assert (= b_and!3487 (and (=> t!4785 result!2363) b_and!3491)))

(assert (=> b!57702 m!48339))

(declare-fun m!48657 () Bool)

(assert (=> b!57702 m!48657))

(assert (=> b!57702 m!48339))

(declare-fun m!48659 () Bool)

(assert (=> b!57702 m!48659))

(assert (=> b!57702 m!48345))

(assert (=> b!57702 m!48657))

(assert (=> b!57702 m!48345))

(declare-fun m!48661 () Bool)

(assert (=> b!57702 m!48661))

(declare-fun m!48663 () Bool)

(assert (=> bm!4185 m!48663))

(declare-fun m!48665 () Bool)

(assert (=> b!57709 m!48665))

(declare-fun m!48667 () Bool)

(assert (=> b!57709 m!48667))

(declare-fun m!48669 () Bool)

(assert (=> b!57709 m!48669))

(declare-fun m!48671 () Bool)

(assert (=> b!57709 m!48671))

(declare-fun m!48673 () Bool)

(assert (=> b!57709 m!48673))

(assert (=> b!57709 m!48665))

(declare-fun m!48675 () Bool)

(assert (=> b!57709 m!48675))

(declare-fun m!48677 () Bool)

(assert (=> b!57709 m!48677))

(declare-fun m!48679 () Bool)

(assert (=> b!57709 m!48679))

(declare-fun m!48681 () Bool)

(assert (=> b!57709 m!48681))

(assert (=> b!57709 m!48345))

(declare-fun m!48683 () Bool)

(assert (=> b!57709 m!48683))

(declare-fun m!48685 () Bool)

(assert (=> b!57709 m!48685))

(assert (=> b!57709 m!48671))

(declare-fun m!48687 () Bool)

(assert (=> b!57709 m!48687))

(declare-fun m!48689 () Bool)

(assert (=> b!57709 m!48689))

(assert (=> b!57709 m!48679))

(assert (=> b!57709 m!48673))

(declare-fun m!48691 () Bool)

(assert (=> b!57709 m!48691))

(declare-fun m!48693 () Bool)

(assert (=> b!57709 m!48693))

(declare-fun m!48695 () Bool)

(assert (=> b!57709 m!48695))

(assert (=> b!57710 m!48345))

(assert (=> b!57710 m!48345))

(assert (=> b!57710 m!48383))

(assert (=> b!57708 m!48345))

(assert (=> b!57708 m!48345))

(declare-fun m!48697 () Bool)

(assert (=> b!57708 m!48697))

(declare-fun m!48699 () Bool)

(assert (=> bm!4182 m!48699))

(assert (=> bm!4184 m!48667))

(declare-fun m!48701 () Bool)

(assert (=> b!57712 m!48701))

(declare-fun m!48703 () Bool)

(assert (=> b!57701 m!48703))

(declare-fun m!48705 () Bool)

(assert (=> bm!4186 m!48705))

(assert (=> d!10669 m!48395))

(assert (=> b!57699 m!48345))

(assert (=> b!57699 m!48345))

(assert (=> b!57699 m!48383))

(declare-fun m!48707 () Bool)

(assert (=> b!57704 m!48707))

(assert (=> d!10579 d!10669))

(declare-fun d!10671 () Bool)

(assert (=> d!10671 (= (get!1074 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2364 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!57519 d!10671))

(assert (=> d!10567 d!10571))

(declare-fun d!10673 () Bool)

(assert (=> d!10673 (not (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!10673 true))

(declare-fun _$68!28 () Unit!1488)

(assert (=> d!10673 (= (choose!68 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447)) _$68!28)))

(declare-fun bs!2492 () Bool)

(assert (= bs!2492 d!10673))

(assert (=> bs!2492 m!48105))

(assert (=> bs!2492 m!48139))

(assert (=> d!10567 d!10673))

(declare-fun d!10675 () Bool)

(assert (=> d!10675 (= (+!80 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22790 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!22954 () Unit!1488)

(declare-fun choose!300 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 V!2835 Int) Unit!1488)

(assert (=> d!10675 (= lt!22954 (choose!300 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22790 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10675 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10675 (= (lemmaChangeZeroKeyThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22790 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) (defaultEntry!2022 newMap!16)) lt!22954)))

(declare-fun bs!2493 () Bool)

(assert (= bs!2493 d!10675))

(assert (=> bs!2493 m!48203))

(assert (=> bs!2493 m!48203))

(declare-fun m!48709 () Bool)

(assert (=> bs!2493 m!48709))

(assert (=> bs!2493 m!48103))

(declare-fun m!48711 () Bool)

(assert (=> bs!2493 m!48711))

(assert (=> bs!2493 m!48103))

(declare-fun m!48713 () Bool)

(assert (=> bs!2493 m!48713))

(assert (=> bs!2493 m!48395))

(assert (=> b!57475 d!10675))

(declare-fun b!57718 () Bool)

(declare-fun e!38030 () Bool)

(declare-fun call!4192 () Bool)

(assert (=> b!57718 (= e!38030 call!4192)))

(declare-fun b!57719 () Bool)

(declare-fun e!38032 () Bool)

(declare-fun e!38031 () Bool)

(assert (=> b!57719 (= e!38032 e!38031)))

(declare-fun res!32238 () Bool)

(assert (=> b!57719 (=> (not res!32238) (not e!38031))))

(declare-fun e!38029 () Bool)

(assert (=> b!57719 (= res!32238 (not e!38029))))

(declare-fun res!32237 () Bool)

(assert (=> b!57719 (=> (not res!32237) (not e!38029))))

(assert (=> b!57719 (= res!32237 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!10677 () Bool)

(declare-fun res!32239 () Bool)

(assert (=> d!10677 (=> res!32239 e!38032)))

(assert (=> d!10677 (= res!32239 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!10677 (= (arrayNoDuplicates!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 Nil!1447) e!38032)))

(declare-fun b!57720 () Bool)

(assert (=> b!57720 (= e!38030 call!4192)))

(declare-fun b!57721 () Bool)

(assert (=> b!57721 (= e!38031 e!38030)))

(declare-fun c!7186 () Bool)

(assert (=> b!57721 (= c!7186 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57722 () Bool)

(assert (=> b!57722 (= e!38029 (contains!689 Nil!1447 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4189 () Bool)

(assert (=> bm!4189 (= call!4192 (arrayNoDuplicates!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7186 (Cons!1446 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) Nil!1447) Nil!1447)))))

(assert (= (and d!10677 (not res!32239)) b!57719))

(assert (= (and b!57719 res!32237) b!57722))

(assert (= (and b!57719 res!32238) b!57721))

(assert (= (and b!57721 c!7186) b!57720))

(assert (= (and b!57721 (not c!7186)) b!57718))

(assert (= (or b!57720 b!57718) bm!4189))

(assert (=> b!57719 m!48345))

(assert (=> b!57719 m!48345))

(assert (=> b!57719 m!48383))

(assert (=> b!57721 m!48345))

(assert (=> b!57721 m!48345))

(assert (=> b!57721 m!48383))

(assert (=> b!57722 m!48345))

(assert (=> b!57722 m!48345))

(declare-fun m!48715 () Bool)

(assert (=> b!57722 m!48715))

(assert (=> bm!4189 m!48345))

(declare-fun m!48717 () Bool)

(assert (=> bm!4189 m!48717))

(assert (=> b!57379 d!10677))

(declare-fun d!10679 () Bool)

(declare-fun e!38034 () Bool)

(assert (=> d!10679 e!38034))

(declare-fun res!32240 () Bool)

(assert (=> d!10679 (=> res!32240 e!38034)))

(declare-fun lt!22955 () Bool)

(assert (=> d!10679 (= res!32240 (not lt!22955))))

(declare-fun lt!22956 () Bool)

(assert (=> d!10679 (= lt!22955 lt!22956)))

(declare-fun lt!22958 () Unit!1488)

(declare-fun e!38033 () Unit!1488)

(assert (=> d!10679 (= lt!22958 e!38033)))

(declare-fun c!7187 () Bool)

(assert (=> d!10679 (= c!7187 lt!22956)))

(assert (=> d!10679 (= lt!22956 (containsKey!126 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))

(assert (=> d!10679 (= (contains!688 e!37903 (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))) lt!22955)))

(declare-fun b!57723 () Bool)

(declare-fun lt!22957 () Unit!1488)

(assert (=> b!57723 (= e!38033 lt!22957)))

(assert (=> b!57723 (= lt!22957 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))

(assert (=> b!57723 (isDefined!76 (getValueByKey!122 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))

(declare-fun b!57724 () Bool)

(declare-fun Unit!1505 () Unit!1488)

(assert (=> b!57724 (= e!38033 Unit!1505)))

(declare-fun b!57725 () Bool)

(assert (=> b!57725 (= e!38034 (isDefined!76 (getValueByKey!122 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774))))))))

(assert (= (and d!10679 c!7187) b!57723))

(assert (= (and d!10679 (not c!7187)) b!57724))

(assert (= (and d!10679 (not res!32240)) b!57725))

(declare-fun m!48719 () Bool)

(assert (=> d!10679 m!48719))

(declare-fun m!48721 () Bool)

(assert (=> b!57723 m!48721))

(declare-fun m!48723 () Bool)

(assert (=> b!57723 m!48723))

(assert (=> b!57723 m!48723))

(declare-fun m!48725 () Bool)

(assert (=> b!57723 m!48725))

(assert (=> b!57725 m!48723))

(assert (=> b!57725 m!48723))

(assert (=> b!57725 m!48725))

(assert (=> bm!4140 d!10679))

(declare-fun d!10681 () Bool)

(declare-fun e!38037 () Bool)

(assert (=> d!10681 e!38037))

(declare-fun res!32246 () Bool)

(assert (=> d!10681 (=> (not res!32246) (not e!38037))))

(declare-fun lt!22963 () SeekEntryResult!236)

(assert (=> d!10681 (= res!32246 ((_ is Found!236) lt!22963))))

(assert (=> d!10681 (= lt!22963 (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun lt!22964 () Unit!1488)

(declare-fun choose!301 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) Int) Unit!1488)

(assert (=> d!10681 (= lt!22964 (choose!301 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10681 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10681 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)) lt!22964)))

(declare-fun b!57730 () Bool)

(declare-fun res!32245 () Bool)

(assert (=> b!57730 (=> (not res!32245) (not e!38037))))

(assert (=> b!57730 (= res!32245 (inRange!0 (index!3067 lt!22963) (mask!5896 newMap!16)))))

(declare-fun b!57731 () Bool)

(assert (=> b!57731 (= e!38037 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22963)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!57731 (and (bvsge (index!3067 lt!22963) #b00000000000000000000000000000000) (bvslt (index!3067 lt!22963) (size!2003 (_keys!3642 newMap!16))))))

(assert (= (and d!10681 res!32246) b!57730))

(assert (= (and b!57730 res!32245) b!57731))

(assert (=> d!10681 m!48105))

(assert (=> d!10681 m!48313))

(assert (=> d!10681 m!48105))

(declare-fun m!48727 () Bool)

(assert (=> d!10681 m!48727))

(assert (=> d!10681 m!48395))

(declare-fun m!48729 () Bool)

(assert (=> b!57730 m!48729))

(declare-fun m!48731 () Bool)

(assert (=> b!57731 m!48731))

(assert (=> bm!4145 d!10681))

(declare-fun d!10683 () Bool)

(assert (=> d!10683 (= (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (and (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57304 d!10683))

(declare-fun d!10685 () Bool)

(declare-fun e!38039 () Bool)

(assert (=> d!10685 e!38039))

(declare-fun res!32247 () Bool)

(assert (=> d!10685 (=> res!32247 e!38039)))

(declare-fun lt!22965 () Bool)

(assert (=> d!10685 (= res!32247 (not lt!22965))))

(declare-fun lt!22966 () Bool)

(assert (=> d!10685 (= lt!22965 lt!22966)))

(declare-fun lt!22968 () Unit!1488)

(declare-fun e!38038 () Unit!1488)

(assert (=> d!10685 (= lt!22968 e!38038)))

(declare-fun c!7188 () Bool)

(assert (=> d!10685 (= c!7188 lt!22966)))

(assert (=> d!10685 (= lt!22966 (containsKey!126 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!10685 (= (contains!688 lt!22695 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!22965)))

(declare-fun b!57732 () Bool)

(declare-fun lt!22967 () Unit!1488)

(assert (=> b!57732 (= e!38038 lt!22967)))

(assert (=> b!57732 (= lt!22967 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57732 (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!57733 () Bool)

(declare-fun Unit!1506 () Unit!1488)

(assert (=> b!57733 (= e!38038 Unit!1506)))

(declare-fun b!57734 () Bool)

(assert (=> b!57734 (= e!38039 (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!10685 c!7188) b!57732))

(assert (= (and d!10685 (not c!7188)) b!57733))

(assert (= (and d!10685 (not res!32247)) b!57734))

(assert (=> d!10685 m!48191))

(declare-fun m!48733 () Bool)

(assert (=> d!10685 m!48733))

(assert (=> b!57732 m!48191))

(declare-fun m!48735 () Bool)

(assert (=> b!57732 m!48735))

(assert (=> b!57732 m!48191))

(declare-fun m!48737 () Bool)

(assert (=> b!57732 m!48737))

(assert (=> b!57732 m!48737))

(declare-fun m!48739 () Bool)

(assert (=> b!57732 m!48739))

(assert (=> b!57734 m!48191))

(assert (=> b!57734 m!48737))

(assert (=> b!57734 m!48737))

(assert (=> b!57734 m!48739))

(assert (=> b!57361 d!10685))

(declare-fun d!10687 () Bool)

(declare-fun e!38040 () Bool)

(assert (=> d!10687 e!38040))

(declare-fun res!32249 () Bool)

(assert (=> d!10687 (=> (not res!32249) (not e!38040))))

(declare-fun lt!22971 () ListLongMap!1373)

(assert (=> d!10687 (= res!32249 (contains!688 lt!22971 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!22972 () List!1449)

(assert (=> d!10687 (= lt!22971 (ListLongMap!1374 lt!22972))))

(declare-fun lt!22969 () Unit!1488)

(declare-fun lt!22970 () Unit!1488)

(assert (=> d!10687 (= lt!22969 lt!22970)))

(assert (=> d!10687 (= (getValueByKey!122 lt!22972 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!127 (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10687 (= lt!22970 (lemmaContainsTupThenGetReturnValue!41 lt!22972 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10687 (= lt!22972 (insertStrictlySorted!43 (toList!702 e!37898) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10687 (= (+!80 e!37898 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!22971)))

(declare-fun b!57735 () Bool)

(declare-fun res!32248 () Bool)

(assert (=> b!57735 (=> (not res!32248) (not e!38040))))

(assert (=> b!57735 (= res!32248 (= (getValueByKey!122 (toList!702 lt!22971) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!127 (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!57736 () Bool)

(assert (=> b!57736 (= e!38040 (contains!690 (toList!702 lt!22971) (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!10687 res!32249) b!57735))

(assert (= (and b!57735 res!32248) b!57736))

(declare-fun m!48741 () Bool)

(assert (=> d!10687 m!48741))

(declare-fun m!48743 () Bool)

(assert (=> d!10687 m!48743))

(declare-fun m!48745 () Bool)

(assert (=> d!10687 m!48745))

(declare-fun m!48747 () Bool)

(assert (=> d!10687 m!48747))

(declare-fun m!48749 () Bool)

(assert (=> b!57735 m!48749))

(declare-fun m!48751 () Bool)

(assert (=> b!57736 m!48751))

(assert (=> bm!4146 d!10687))

(assert (=> b!57306 d!10683))

(declare-fun d!10689 () Bool)

(declare-fun e!38042 () Bool)

(assert (=> d!10689 e!38042))

(declare-fun res!32250 () Bool)

(assert (=> d!10689 (=> res!32250 e!38042)))

(declare-fun lt!22973 () Bool)

(assert (=> d!10689 (= res!32250 (not lt!22973))))

(declare-fun lt!22974 () Bool)

(assert (=> d!10689 (= lt!22973 lt!22974)))

(declare-fun lt!22976 () Unit!1488)

(declare-fun e!38041 () Unit!1488)

(assert (=> d!10689 (= lt!22976 e!38041)))

(declare-fun c!7189 () Bool)

(assert (=> d!10689 (= c!7189 lt!22974)))

(assert (=> d!10689 (= lt!22974 (containsKey!126 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10689 (= (contains!688 lt!22695 #b0000000000000000000000000000000000000000000000000000000000000000) lt!22973)))

(declare-fun b!57737 () Bool)

(declare-fun lt!22975 () Unit!1488)

(assert (=> b!57737 (= e!38041 lt!22975)))

(assert (=> b!57737 (= lt!22975 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57737 (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57738 () Bool)

(declare-fun Unit!1507 () Unit!1488)

(assert (=> b!57738 (= e!38041 Unit!1507)))

(declare-fun b!57739 () Bool)

(assert (=> b!57739 (= e!38042 (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10689 c!7189) b!57737))

(assert (= (and d!10689 (not c!7189)) b!57738))

(assert (= (and d!10689 (not res!32250)) b!57739))

(declare-fun m!48753 () Bool)

(assert (=> d!10689 m!48753))

(declare-fun m!48755 () Bool)

(assert (=> b!57737 m!48755))

(declare-fun m!48757 () Bool)

(assert (=> b!57737 m!48757))

(assert (=> b!57737 m!48757))

(declare-fun m!48759 () Bool)

(assert (=> b!57737 m!48759))

(assert (=> b!57739 m!48757))

(assert (=> b!57739 m!48757))

(assert (=> b!57739 m!48759))

(assert (=> bm!4086 d!10689))

(assert (=> bm!4158 d!10579))

(declare-fun d!10691 () Bool)

(assert (=> d!10691 (= (inRange!0 (ite c!7122 (ite c!7120 (index!3067 lt!22782) (ite c!7128 (index!3066 lt!22786) (index!3069 lt!22786))) (ite c!7118 (index!3067 lt!22777) (ite c!7119 (index!3066 lt!22779) (index!3069 lt!22779)))) (mask!5896 newMap!16)) (and (bvsge (ite c!7122 (ite c!7120 (index!3067 lt!22782) (ite c!7128 (index!3066 lt!22786) (index!3069 lt!22786))) (ite c!7118 (index!3067 lt!22777) (ite c!7119 (index!3066 lt!22779) (index!3069 lt!22779)))) #b00000000000000000000000000000000) (bvslt (ite c!7122 (ite c!7120 (index!3067 lt!22782) (ite c!7128 (index!3066 lt!22786) (index!3069 lt!22786))) (ite c!7118 (index!3067 lt!22777) (ite c!7119 (index!3066 lt!22779) (index!3069 lt!22779)))) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4144 d!10691))

(declare-fun d!10693 () Bool)

(declare-fun e!38062 () Bool)

(assert (=> d!10693 e!38062))

(declare-fun res!32277 () Bool)

(assert (=> d!10693 (=> (not res!32277) (not e!38062))))

(declare-fun lt!23038 () tuple2!2040)

(assert (=> d!10693 (= res!32277 (_1!1030 lt!23038))))

(assert (=> d!10693 (= lt!23038 (tuple2!2041 true (LongMapFixedSize!613 (defaultEntry!2022 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (bvadd (_size!355 newMap!16) #b00000000000000000000000000000001) (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (_vacant!355 newMap!16))))))

(declare-fun lt!23065 () Unit!1488)

(declare-fun lt!23054 () Unit!1488)

(assert (=> d!10693 (= lt!23065 lt!23054)))

(declare-fun lt!23061 () array!3708)

(declare-fun lt!23066 () array!3706)

(assert (=> d!10693 (contains!688 (getCurrentListMap!400 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774))))))

(assert (=> d!10693 (= lt!23054 (lemmaValidKeyInArrayIsInListMap!72 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10693 (= lt!23061 (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))))

(assert (=> d!10693 (= lt!23066 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun lt!23060 () Unit!1488)

(declare-fun lt!23050 () Unit!1488)

(assert (=> d!10693 (= lt!23060 lt!23050)))

(declare-fun lt!23043 () array!3706)

(assert (=> d!10693 (= (arrayCountValidKeys!0 lt!23043 (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (bvadd (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3706 (_ BitVec 32)) Unit!1488)

(assert (=> d!10693 (= lt!23050 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!23043 (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774))))))

(assert (=> d!10693 (= lt!23043 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun lt!23052 () Unit!1488)

(declare-fun lt!23048 () Unit!1488)

(assert (=> d!10693 (= lt!23052 lt!23048)))

(declare-fun lt!23039 () array!3706)

(assert (=> d!10693 (arrayContainsKey!0 lt!23039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3706 (_ BitVec 64) (_ BitVec 32)) Unit!1488)

(assert (=> d!10693 (= lt!23048 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!23039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774))))))

(assert (=> d!10693 (= lt!23039 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun lt!23040 () Unit!1488)

(declare-fun lt!23041 () Unit!1488)

(assert (=> d!10693 (= lt!23040 lt!23041)))

(assert (=> d!10693 (= (+!80 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!400 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!4 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) (_ BitVec 64) V!2835 Int) Unit!1488)

(assert (=> d!10693 (= lt!23041 (lemmaAddValidKeyToArrayThenAddPairToListMap!4 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23046 () Unit!1488)

(declare-fun lt!23047 () Unit!1488)

(assert (=> d!10693 (= lt!23046 lt!23047)))

(assert (=> d!10693 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (mask!5896 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3706 (_ BitVec 32) (_ BitVec 32)) Unit!1488)

(assert (=> d!10693 (= lt!23047 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (mask!5896 newMap!16)))))

(declare-fun lt!23064 () Unit!1488)

(declare-fun lt!23042 () Unit!1488)

(assert (=> d!10693 (= lt!23064 lt!23042)))

(assert (=> d!10693 (= (arrayCountValidKeys!0 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3706 (_ BitVec 32) (_ BitVec 64)) Unit!1488)

(assert (=> d!10693 (= lt!23042 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3642 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun lt!23045 () Unit!1488)

(declare-fun lt!23055 () Unit!1488)

(assert (=> d!10693 (= lt!23045 lt!23055)))

(declare-fun lt!23037 () (_ BitVec 32))

(declare-fun lt!23049 () List!1450)

(assert (=> d!10693 (arrayNoDuplicates!0 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) lt!23037 lt!23049)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3706 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1450) Unit!1488)

(assert (=> d!10693 (= lt!23055 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) lt!23037 lt!23049))))

(assert (=> d!10693 (= lt!23049 Nil!1447)))

(assert (=> d!10693 (= lt!23037 #b00000000000000000000000000000000)))

(declare-fun lt!23063 () Unit!1488)

(declare-fun e!38066 () Unit!1488)

(assert (=> d!10693 (= lt!23063 e!38066)))

(declare-fun c!7199 () Bool)

(assert (=> d!10693 (= c!7199 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!23057 () Unit!1488)

(declare-fun e!38065 () Unit!1488)

(assert (=> d!10693 (= lt!23057 e!38065)))

(declare-fun c!7198 () Bool)

(assert (=> d!10693 (= c!7198 (contains!688 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10693 (valid!246 newMap!16)))

(assert (=> d!10693 (= (updateHelperNewKey!14 newMap!16 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774))) lt!23038)))

(declare-fun b!57774 () Bool)

(declare-fun c!7201 () Bool)

(declare-fun lt!23051 () SeekEntryResult!236)

(assert (=> b!57774 (= c!7201 ((_ is MissingVacant!236) lt!23051))))

(declare-fun e!38061 () Bool)

(declare-fun e!38059 () Bool)

(assert (=> b!57774 (= e!38061 e!38059)))

(declare-fun b!57775 () Bool)

(declare-fun res!32274 () Bool)

(assert (=> b!57775 (=> (not res!32274) (not e!38062))))

(assert (=> b!57775 (= res!32274 (valid!246 (_2!1030 lt!23038)))))

(declare-fun call!4201 () SeekEntryResult!236)

(declare-fun bm!4198 () Bool)

(assert (=> bm!4198 (= call!4201 (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun b!57776 () Bool)

(declare-fun Unit!1508 () Unit!1488)

(assert (=> b!57776 (= e!38066 Unit!1508)))

(declare-fun lt!23053 () Unit!1488)

(declare-fun lemmaArrayContainsKeyThenInListMap!4 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) (_ BitVec 32) Int) Unit!1488)

(assert (=> b!57776 (= lt!23053 (lemmaArrayContainsKeyThenInListMap!4 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(assert (=> b!57776 (contains!688 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))

(declare-fun lt!23044 () Unit!1488)

(assert (=> b!57776 (= lt!23044 lt!23053)))

(assert (=> b!57776 false))

(declare-fun b!57777 () Bool)

(declare-fun e!38064 () Bool)

(declare-fun call!4204 () Bool)

(assert (=> b!57777 (= e!38064 (not call!4204))))

(declare-fun call!4203 () Bool)

(declare-fun lt!23058 () SeekEntryResult!236)

(declare-fun c!7200 () Bool)

(declare-fun bm!4199 () Bool)

(assert (=> bm!4199 (= call!4203 (inRange!0 (ite c!7198 (index!3067 lt!23058) (ite c!7200 (index!3066 lt!23051) (index!3069 lt!23051))) (mask!5896 newMap!16)))))

(declare-fun b!57778 () Bool)

(declare-fun lt!23056 () Unit!1488)

(assert (=> b!57778 (= e!38065 lt!23056)))

(assert (=> b!57778 (= lt!23056 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(assert (=> b!57778 (= lt!23051 call!4201)))

(assert (=> b!57778 (= c!7200 ((_ is MissingZero!236) lt!23051))))

(assert (=> b!57778 e!38061))

(declare-fun b!57779 () Bool)

(declare-fun res!32271 () Bool)

(assert (=> b!57779 (= res!32271 call!4203)))

(declare-fun e!38060 () Bool)

(assert (=> b!57779 (=> (not res!32271) (not e!38060))))

(declare-fun b!57780 () Bool)

(assert (=> b!57780 (= e!38062 (= (map!1104 (_2!1030 lt!23038)) (+!80 (map!1104 newMap!16) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!57781 () Bool)

(assert (=> b!57781 (= e!38060 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!23058)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57782 () Bool)

(declare-fun Unit!1509 () Unit!1488)

(assert (=> b!57782 (= e!38065 Unit!1509)))

(declare-fun lt!23059 () Unit!1488)

(assert (=> b!57782 (= lt!23059 (lemmaInListMapThenSeekEntryOrOpenFindsIt!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(assert (=> b!57782 (= lt!23058 call!4201)))

(declare-fun res!32269 () Bool)

(assert (=> b!57782 (= res!32269 ((_ is Found!236) lt!23058))))

(assert (=> b!57782 (=> (not res!32269) (not e!38060))))

(assert (=> b!57782 e!38060))

(declare-fun lt!23062 () Unit!1488)

(assert (=> b!57782 (= lt!23062 lt!23059)))

(assert (=> b!57782 false))

(declare-fun b!57783 () Bool)

(declare-fun res!32273 () Bool)

(assert (=> b!57783 (=> (not res!32273) (not e!38062))))

(assert (=> b!57783 (= res!32273 (contains!688 (map!1104 (_2!1030 lt!23038)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57784 () Bool)

(declare-fun res!32275 () Bool)

(declare-fun e!38063 () Bool)

(assert (=> b!57784 (=> (not res!32275) (not e!38063))))

(assert (=> b!57784 (= res!32275 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3066 lt!23051)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57785 () Bool)

(declare-fun res!32276 () Bool)

(assert (=> b!57785 (=> (not res!32276) (not e!38063))))

(declare-fun call!4202 () Bool)

(assert (=> b!57785 (= res!32276 call!4202)))

(assert (=> b!57785 (= e!38061 e!38063)))

(declare-fun bm!4200 () Bool)

(assert (=> bm!4200 (= call!4204 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!57786 () Bool)

(declare-fun res!32272 () Bool)

(assert (=> b!57786 (= res!32272 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3069 lt!23051)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57786 (=> (not res!32272) (not e!38064))))

(declare-fun b!57787 () Bool)

(assert (=> b!57787 (= e!38063 (not call!4204))))

(declare-fun b!57788 () Bool)

(assert (=> b!57788 (= e!38059 e!38064)))

(declare-fun res!32270 () Bool)

(assert (=> b!57788 (= res!32270 call!4202)))

(assert (=> b!57788 (=> (not res!32270) (not e!38064))))

(declare-fun b!57789 () Bool)

(declare-fun Unit!1510 () Unit!1488)

(assert (=> b!57789 (= e!38066 Unit!1510)))

(declare-fun b!57790 () Bool)

(assert (=> b!57790 (= e!38059 ((_ is Undefined!236) lt!23051))))

(declare-fun bm!4201 () Bool)

(assert (=> bm!4201 (= call!4202 call!4203)))

(assert (= (and d!10693 c!7198) b!57782))

(assert (= (and d!10693 (not c!7198)) b!57778))

(assert (= (and b!57782 res!32269) b!57779))

(assert (= (and b!57779 res!32271) b!57781))

(assert (= (and b!57778 c!7200) b!57785))

(assert (= (and b!57778 (not c!7200)) b!57774))

(assert (= (and b!57785 res!32276) b!57784))

(assert (= (and b!57784 res!32275) b!57787))

(assert (= (and b!57774 c!7201) b!57788))

(assert (= (and b!57774 (not c!7201)) b!57790))

(assert (= (and b!57788 res!32270) b!57786))

(assert (= (and b!57786 res!32272) b!57777))

(assert (= (or b!57785 b!57788) bm!4201))

(assert (= (or b!57787 b!57777) bm!4200))

(assert (= (or b!57779 bm!4201) bm!4199))

(assert (= (or b!57782 b!57778) bm!4198))

(assert (= (and d!10693 c!7199) b!57776))

(assert (= (and d!10693 (not c!7199)) b!57789))

(assert (= (and d!10693 res!32277) b!57775))

(assert (= (and b!57775 res!32274) b!57783))

(assert (= (and b!57783 res!32273) b!57780))

(assert (=> b!57778 m!48105))

(assert (=> b!57778 m!48299))

(declare-fun m!48761 () Bool)

(assert (=> b!57783 m!48761))

(assert (=> b!57783 m!48761))

(assert (=> b!57783 m!48105))

(declare-fun m!48763 () Bool)

(assert (=> b!57783 m!48763))

(assert (=> b!57782 m!48105))

(assert (=> b!57782 m!48305))

(declare-fun m!48765 () Bool)

(assert (=> b!57786 m!48765))

(assert (=> b!57776 m!48105))

(declare-fun m!48767 () Bool)

(assert (=> b!57776 m!48767))

(assert (=> b!57776 m!48203))

(assert (=> b!57776 m!48203))

(assert (=> b!57776 m!48105))

(assert (=> b!57776 m!48287))

(declare-fun m!48769 () Bool)

(assert (=> b!57784 m!48769))

(declare-fun m!48771 () Bool)

(assert (=> b!57781 m!48771))

(declare-fun m!48773 () Bool)

(assert (=> d!10693 m!48773))

(assert (=> d!10693 m!48105))

(declare-fun m!48775 () Bool)

(assert (=> d!10693 m!48775))

(assert (=> d!10693 m!48203))

(declare-fun m!48777 () Bool)

(assert (=> d!10693 m!48777))

(assert (=> d!10693 m!48105))

(assert (=> d!10693 m!48307))

(assert (=> d!10693 m!48203))

(assert (=> d!10693 m!48105))

(assert (=> d!10693 m!48287))

(assert (=> d!10693 m!48105))

(declare-fun m!48779 () Bool)

(assert (=> d!10693 m!48779))

(assert (=> d!10693 m!48117))

(declare-fun m!48781 () Bool)

(assert (=> d!10693 m!48781))

(assert (=> d!10693 m!48105))

(declare-fun m!48783 () Bool)

(assert (=> d!10693 m!48783))

(declare-fun m!48785 () Bool)

(assert (=> d!10693 m!48785))

(assert (=> d!10693 m!48105))

(declare-fun m!48787 () Bool)

(assert (=> d!10693 m!48787))

(declare-fun m!48789 () Bool)

(assert (=> d!10693 m!48789))

(assert (=> d!10693 m!48105))

(declare-fun m!48791 () Bool)

(assert (=> d!10693 m!48791))

(declare-fun m!48793 () Bool)

(assert (=> d!10693 m!48793))

(assert (=> d!10693 m!48203))

(assert (=> d!10693 m!48105))

(assert (=> d!10693 m!48103))

(declare-fun m!48795 () Bool)

(assert (=> d!10693 m!48795))

(declare-fun m!48797 () Bool)

(assert (=> d!10693 m!48797))

(declare-fun m!48799 () Bool)

(assert (=> d!10693 m!48799))

(declare-fun m!48801 () Bool)

(assert (=> d!10693 m!48801))

(declare-fun m!48803 () Bool)

(assert (=> d!10693 m!48803))

(declare-fun m!48805 () Bool)

(assert (=> d!10693 m!48805))

(assert (=> d!10693 m!48261))

(assert (=> d!10693 m!48801))

(assert (=> d!10693 m!48785))

(declare-fun m!48807 () Bool)

(assert (=> d!10693 m!48807))

(declare-fun m!48809 () Bool)

(assert (=> d!10693 m!48809))

(declare-fun m!48811 () Bool)

(assert (=> bm!4199 m!48811))

(declare-fun m!48813 () Bool)

(assert (=> b!57775 m!48813))

(assert (=> bm!4200 m!48105))

(assert (=> bm!4200 m!48307))

(assert (=> b!57780 m!48761))

(assert (=> b!57780 m!48121))

(assert (=> b!57780 m!48121))

(declare-fun m!48815 () Bool)

(assert (=> b!57780 m!48815))

(assert (=> bm!4198 m!48105))

(assert (=> bm!4198 m!48313))

(assert (=> bm!4153 d!10693))

(declare-fun d!10695 () Bool)

(declare-fun e!38068 () Bool)

(assert (=> d!10695 e!38068))

(declare-fun res!32278 () Bool)

(assert (=> d!10695 (=> res!32278 e!38068)))

(declare-fun lt!23067 () Bool)

(assert (=> d!10695 (= res!32278 (not lt!23067))))

(declare-fun lt!23068 () Bool)

(assert (=> d!10695 (= lt!23067 lt!23068)))

(declare-fun lt!23070 () Unit!1488)

(declare-fun e!38067 () Unit!1488)

(assert (=> d!10695 (= lt!23070 e!38067)))

(declare-fun c!7202 () Bool)

(assert (=> d!10695 (= c!7202 lt!23068)))

(assert (=> d!10695 (= lt!23068 (containsKey!126 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10695 (= (contains!688 call!4161 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) lt!23067)))

(declare-fun b!57791 () Bool)

(declare-fun lt!23069 () Unit!1488)

(assert (=> b!57791 (= e!38067 lt!23069)))

(assert (=> b!57791 (= lt!23069 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!57791 (isDefined!76 (getValueByKey!122 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57792 () Bool)

(declare-fun Unit!1511 () Unit!1488)

(assert (=> b!57792 (= e!38067 Unit!1511)))

(declare-fun b!57793 () Bool)

(assert (=> b!57793 (= e!38068 (isDefined!76 (getValueByKey!122 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (= (and d!10695 c!7202) b!57791))

(assert (= (and d!10695 (not c!7202)) b!57792))

(assert (= (and d!10695 (not res!32278)) b!57793))

(assert (=> d!10695 m!48105))

(declare-fun m!48817 () Bool)

(assert (=> d!10695 m!48817))

(assert (=> b!57791 m!48105))

(declare-fun m!48819 () Bool)

(assert (=> b!57791 m!48819))

(assert (=> b!57791 m!48105))

(declare-fun m!48821 () Bool)

(assert (=> b!57791 m!48821))

(assert (=> b!57791 m!48821))

(declare-fun m!48823 () Bool)

(assert (=> b!57791 m!48823))

(assert (=> b!57793 m!48105))

(assert (=> b!57793 m!48821))

(assert (=> b!57793 m!48821))

(assert (=> b!57793 m!48823))

(assert (=> b!57509 d!10695))

(declare-fun d!10697 () Bool)

(assert (=> d!10697 (= (apply!65 lt!22695 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2494 () Bool)

(assert (= bs!2494 d!10697))

(assert (=> bs!2494 m!48757))

(assert (=> bs!2494 m!48757))

(declare-fun m!48825 () Bool)

(assert (=> bs!2494 m!48825))

(assert (=> b!57365 d!10697))

(assert (=> b!57363 d!10653))

(assert (=> d!10581 d!10577))

(assert (=> b!57508 d!10613))

(declare-fun d!10699 () Bool)

(declare-fun res!32279 () Bool)

(declare-fun e!38069 () Bool)

(assert (=> d!10699 (=> res!32279 e!38069)))

(assert (=> d!10699 (= res!32279 (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10699 (= (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!38069)))

(declare-fun b!57794 () Bool)

(declare-fun e!38070 () Bool)

(assert (=> b!57794 (= e!38069 e!38070)))

(declare-fun res!32280 () Bool)

(assert (=> b!57794 (=> (not res!32280) (not e!38070))))

(assert (=> b!57794 (= res!32280 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57795 () Bool)

(assert (=> b!57795 (= e!38070 (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!10699 (not res!32279)) b!57794))

(assert (= (and b!57794 res!32280) b!57795))

(declare-fun m!48827 () Bool)

(assert (=> d!10699 m!48827))

(assert (=> b!57795 m!48105))

(declare-fun m!48829 () Bool)

(assert (=> b!57795 m!48829))

(assert (=> b!57286 d!10699))

(declare-fun b!57796 () Bool)

(declare-fun e!38072 () Bool)

(declare-fun call!4205 () Bool)

(assert (=> b!57796 (= e!38072 call!4205)))

(declare-fun b!57797 () Bool)

(declare-fun e!38074 () Bool)

(declare-fun e!38073 () Bool)

(assert (=> b!57797 (= e!38074 e!38073)))

(declare-fun res!32282 () Bool)

(assert (=> b!57797 (=> (not res!32282) (not e!38073))))

(declare-fun e!38071 () Bool)

(assert (=> b!57797 (= res!32282 (not e!38071))))

(declare-fun res!32281 () Bool)

(assert (=> b!57797 (=> (not res!32281) (not e!38071))))

(assert (=> b!57797 (= res!32281 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun d!10701 () Bool)

(declare-fun res!32283 () Bool)

(assert (=> d!10701 (=> res!32283 e!38074)))

(assert (=> d!10701 (= res!32283 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> d!10701 (= (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)) e!38074)))

(declare-fun b!57798 () Bool)

(assert (=> b!57798 (= e!38072 call!4205)))

(declare-fun b!57799 () Bool)

(assert (=> b!57799 (= e!38073 e!38072)))

(declare-fun c!7203 () Bool)

(assert (=> b!57799 (= c!7203 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!57800 () Bool)

(assert (=> b!57800 (= e!38071 (contains!689 (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun bm!4202 () Bool)

(assert (=> bm!4202 (= call!4205 (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7203 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447))))))

(assert (= (and d!10701 (not res!32283)) b!57797))

(assert (= (and b!57797 res!32281) b!57800))

(assert (= (and b!57797 res!32282) b!57799))

(assert (= (and b!57799 c!7203) b!57798))

(assert (= (and b!57799 (not c!7203)) b!57796))

(assert (= (or b!57798 b!57796) bm!4202))

(declare-fun m!48831 () Bool)

(assert (=> b!57797 m!48831))

(assert (=> b!57797 m!48831))

(declare-fun m!48833 () Bool)

(assert (=> b!57797 m!48833))

(assert (=> b!57799 m!48831))

(assert (=> b!57799 m!48831))

(assert (=> b!57799 m!48833))

(assert (=> b!57800 m!48831))

(assert (=> b!57800 m!48831))

(declare-fun m!48835 () Bool)

(assert (=> b!57800 m!48835))

(assert (=> bm!4202 m!48831))

(declare-fun m!48837 () Bool)

(assert (=> bm!4202 m!48837))

(assert (=> bm!4068 d!10701))

(declare-fun d!10703 () Bool)

(declare-fun res!32293 () Bool)

(declare-fun e!38077 () Bool)

(assert (=> d!10703 (=> (not res!32293) (not e!38077))))

(assert (=> d!10703 (= res!32293 (validMask!0 (mask!5896 newMap!16)))))

(assert (=> d!10703 (= (simpleValid!40 newMap!16) e!38077)))

(declare-fun b!57810 () Bool)

(declare-fun res!32295 () Bool)

(assert (=> b!57810 (=> (not res!32295) (not e!38077))))

(declare-fun size!2007 (LongMapFixedSize!612) (_ BitVec 32))

(assert (=> b!57810 (= res!32295 (bvsge (size!2007 newMap!16) (_size!355 newMap!16)))))

(declare-fun b!57809 () Bool)

(declare-fun res!32292 () Bool)

(assert (=> b!57809 (=> (not res!32292) (not e!38077))))

(assert (=> b!57809 (= res!32292 (and (= (size!2004 (_values!2005 newMap!16)) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001)) (= (size!2003 (_keys!3642 newMap!16)) (size!2004 (_values!2005 newMap!16))) (bvsge (_size!355 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!355 newMap!16) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!57812 () Bool)

(assert (=> b!57812 (= e!38077 (and (bvsge (extraKeys!1913 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1913 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!355 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!57811 () Bool)

(declare-fun res!32294 () Bool)

(assert (=> b!57811 (=> (not res!32294) (not e!38077))))

(assert (=> b!57811 (= res!32294 (= (size!2007 newMap!16) (bvadd (_size!355 newMap!16) (bvsdiv (bvadd (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!10703 res!32293) b!57809))

(assert (= (and b!57809 res!32292) b!57810))

(assert (= (and b!57810 res!32295) b!57811))

(assert (= (and b!57811 res!32294) b!57812))

(assert (=> d!10703 m!48395))

(declare-fun m!48839 () Bool)

(assert (=> b!57810 m!48839))

(assert (=> b!57811 m!48839))

(assert (=> d!10583 d!10703))

(declare-fun b!57821 () Bool)

(declare-fun e!38084 () Bool)

(declare-fun call!4208 () Bool)

(assert (=> b!57821 (= e!38084 call!4208)))

(declare-fun bm!4205 () Bool)

(assert (=> bm!4205 (= call!4208 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun d!10705 () Bool)

(declare-fun res!32300 () Bool)

(declare-fun e!38085 () Bool)

(assert (=> d!10705 (=> res!32300 e!38085)))

(assert (=> d!10705 (= res!32300 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!10705 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 newMap!16) (mask!5896 newMap!16)) e!38085)))

(declare-fun b!57822 () Bool)

(assert (=> b!57822 (= e!38085 e!38084)))

(declare-fun c!7206 () Bool)

(assert (=> b!57822 (= c!7206 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57823 () Bool)

(declare-fun e!38086 () Bool)

(assert (=> b!57823 (= e!38086 call!4208)))

(declare-fun b!57824 () Bool)

(assert (=> b!57824 (= e!38084 e!38086)))

(declare-fun lt!23078 () (_ BitVec 64))

(assert (=> b!57824 (= lt!23078 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23077 () Unit!1488)

(assert (=> b!57824 (= lt!23077 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3642 newMap!16) lt!23078 #b00000000000000000000000000000000))))

(assert (=> b!57824 (arrayContainsKey!0 (_keys!3642 newMap!16) lt!23078 #b00000000000000000000000000000000)))

(declare-fun lt!23079 () Unit!1488)

(assert (=> b!57824 (= lt!23079 lt!23077)))

(declare-fun res!32301 () Bool)

(assert (=> b!57824 (= res!32301 (= (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (_keys!3642 newMap!16) (mask!5896 newMap!16)) (Found!236 #b00000000000000000000000000000000)))))

(assert (=> b!57824 (=> (not res!32301) (not e!38086))))

(assert (= (and d!10705 (not res!32300)) b!57822))

(assert (= (and b!57822 c!7206) b!57824))

(assert (= (and b!57822 (not c!7206)) b!57821))

(assert (= (and b!57824 res!32301) b!57823))

(assert (= (or b!57823 b!57821) bm!4205))

(declare-fun m!48841 () Bool)

(assert (=> bm!4205 m!48841))

(assert (=> b!57822 m!48345))

(assert (=> b!57822 m!48345))

(assert (=> b!57822 m!48383))

(assert (=> b!57824 m!48345))

(declare-fun m!48843 () Bool)

(assert (=> b!57824 m!48843))

(declare-fun m!48845 () Bool)

(assert (=> b!57824 m!48845))

(assert (=> b!57824 m!48345))

(declare-fun m!48847 () Bool)

(assert (=> b!57824 m!48847))

(assert (=> b!57378 d!10705))

(declare-fun c!7212 () Bool)

(declare-fun lt!23084 () SeekEntryResult!236)

(declare-fun bm!4210 () Bool)

(declare-fun call!4213 () Bool)

(assert (=> bm!4210 (= call!4213 (inRange!0 (ite c!7212 (index!3066 lt!23084) (index!3069 lt!23084)) (mask!5896 newMap!16)))))

(declare-fun call!4214 () Bool)

(declare-fun bm!4211 () Bool)

(assert (=> bm!4211 (= call!4214 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!57841 () Bool)

(declare-fun e!38098 () Bool)

(declare-fun e!38097 () Bool)

(assert (=> b!57841 (= e!38098 e!38097)))

(declare-fun res!32310 () Bool)

(assert (=> b!57841 (= res!32310 call!4213)))

(assert (=> b!57841 (=> (not res!32310) (not e!38097))))

(declare-fun b!57842 () Bool)

(declare-fun e!38095 () Bool)

(assert (=> b!57842 (= e!38095 (not call!4214))))

(declare-fun b!57843 () Bool)

(assert (=> b!57843 (and (bvsge (index!3066 lt!23084) #b00000000000000000000000000000000) (bvslt (index!3066 lt!23084) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun res!32312 () Bool)

(assert (=> b!57843 (= res!32312 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3066 lt!23084)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57843 (=> (not res!32312) (not e!38097))))

(declare-fun b!57844 () Bool)

(declare-fun e!38096 () Bool)

(assert (=> b!57844 (= e!38098 e!38096)))

(declare-fun c!7211 () Bool)

(assert (=> b!57844 (= c!7211 ((_ is MissingVacant!236) lt!23084))))

(declare-fun b!57845 () Bool)

(declare-fun res!32311 () Bool)

(assert (=> b!57845 (=> (not res!32311) (not e!38095))))

(assert (=> b!57845 (= res!32311 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3069 lt!23084)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57845 (and (bvsge (index!3069 lt!23084) #b00000000000000000000000000000000) (bvslt (index!3069 lt!23084) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!57846 () Bool)

(assert (=> b!57846 (= e!38097 (not call!4214))))

(declare-fun b!57847 () Bool)

(declare-fun res!32313 () Bool)

(assert (=> b!57847 (=> (not res!32313) (not e!38095))))

(assert (=> b!57847 (= res!32313 call!4213)))

(assert (=> b!57847 (= e!38096 e!38095)))

(declare-fun d!10707 () Bool)

(assert (=> d!10707 e!38098))

(assert (=> d!10707 (= c!7212 ((_ is MissingZero!236) lt!23084))))

(assert (=> d!10707 (= lt!23084 (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun lt!23085 () Unit!1488)

(declare-fun choose!302 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) Int) Unit!1488)

(assert (=> d!10707 (= lt!23085 (choose!302 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10707 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10707 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)) lt!23085)))

(declare-fun b!57848 () Bool)

(assert (=> b!57848 (= e!38096 ((_ is Undefined!236) lt!23084))))

(assert (= (and d!10707 c!7212) b!57841))

(assert (= (and d!10707 (not c!7212)) b!57844))

(assert (= (and b!57841 res!32310) b!57843))

(assert (= (and b!57843 res!32312) b!57846))

(assert (= (and b!57844 c!7211) b!57847))

(assert (= (and b!57844 (not c!7211)) b!57848))

(assert (= (and b!57847 res!32313) b!57845))

(assert (= (and b!57845 res!32311) b!57842))

(assert (= (or b!57841 b!57847) bm!4210))

(assert (= (or b!57846 b!57842) bm!4211))

(assert (=> d!10707 m!48105))

(assert (=> d!10707 m!48313))

(assert (=> d!10707 m!48105))

(declare-fun m!48849 () Bool)

(assert (=> d!10707 m!48849))

(assert (=> d!10707 m!48395))

(assert (=> bm!4211 m!48105))

(assert (=> bm!4211 m!48307))

(declare-fun m!48851 () Bool)

(assert (=> b!57843 m!48851))

(declare-fun m!48853 () Bool)

(assert (=> bm!4210 m!48853))

(declare-fun m!48855 () Bool)

(assert (=> b!57845 m!48855))

(assert (=> bm!4150 d!10707))

(declare-fun d!10709 () Bool)

(declare-fun res!32318 () Bool)

(declare-fun e!38103 () Bool)

(assert (=> d!10709 (=> res!32318 e!38103)))

(assert (=> d!10709 (= res!32318 (and ((_ is Cons!1445) (toList!702 lt!22601)) (= (_1!1029 (h!2025 (toList!702 lt!22601))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10709 (= (containsKey!126 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) e!38103)))

(declare-fun b!57853 () Bool)

(declare-fun e!38104 () Bool)

(assert (=> b!57853 (= e!38103 e!38104)))

(declare-fun res!32319 () Bool)

(assert (=> b!57853 (=> (not res!32319) (not e!38104))))

(assert (=> b!57853 (= res!32319 (and (or (not ((_ is Cons!1445) (toList!702 lt!22601))) (bvsle (_1!1029 (h!2025 (toList!702 lt!22601))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))) ((_ is Cons!1445) (toList!702 lt!22601)) (bvslt (_1!1029 (h!2025 (toList!702 lt!22601))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(declare-fun b!57854 () Bool)

(assert (=> b!57854 (= e!38104 (containsKey!126 (t!4775 (toList!702 lt!22601)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10709 (not res!32318)) b!57853))

(assert (= (and b!57853 res!32319) b!57854))

(assert (=> b!57854 m!48105))

(declare-fun m!48857 () Bool)

(assert (=> b!57854 m!48857))

(assert (=> d!10589 d!10709))

(assert (=> b!57291 d!10571))

(declare-fun d!10711 () Bool)

(declare-fun e!38105 () Bool)

(assert (=> d!10711 e!38105))

(declare-fun res!32321 () Bool)

(assert (=> d!10711 (=> (not res!32321) (not e!38105))))

(declare-fun lt!23088 () ListLongMap!1373)

(assert (=> d!10711 (= res!32321 (contains!688 lt!23088 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun lt!23089 () List!1449)

(assert (=> d!10711 (= lt!23088 (ListLongMap!1374 lt!23089))))

(declare-fun lt!23086 () Unit!1488)

(declare-fun lt!23087 () Unit!1488)

(assert (=> d!10711 (= lt!23086 lt!23087)))

(assert (=> d!10711 (= (getValueByKey!122 lt!23089 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) (Some!127 (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10711 (= lt!23087 (lemmaContainsTupThenGetReturnValue!41 lt!23089 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10711 (= lt!23089 (insertStrictlySorted!43 (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087))) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10711 (= (+!80 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087)) (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23088)))

(declare-fun b!57855 () Bool)

(declare-fun res!32320 () Bool)

(assert (=> b!57855 (=> (not res!32320) (not e!38105))))

(assert (=> b!57855 (= res!32320 (= (getValueByKey!122 (toList!702 lt!23088) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) (Some!127 (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!57856 () Bool)

(assert (=> b!57856 (= e!38105 (contains!690 (toList!702 lt!23088) (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!10711 res!32321) b!57855))

(assert (= (and b!57855 res!32320) b!57856))

(declare-fun m!48859 () Bool)

(assert (=> d!10711 m!48859))

(declare-fun m!48861 () Bool)

(assert (=> d!10711 m!48861))

(declare-fun m!48863 () Bool)

(assert (=> d!10711 m!48863))

(declare-fun m!48865 () Bool)

(assert (=> d!10711 m!48865))

(declare-fun m!48867 () Bool)

(assert (=> b!57855 m!48867))

(declare-fun m!48869 () Bool)

(assert (=> b!57856 m!48869))

(assert (=> bm!4083 d!10711))

(declare-fun d!10713 () Bool)

(declare-fun e!38108 () Bool)

(assert (=> d!10713 e!38108))

(declare-fun c!7215 () Bool)

(assert (=> d!10713 (= c!7215 (and (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!10713 true))

(declare-fun _$29!63 () Unit!1488)

(assert (=> d!10713 (= (choose!295 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))) _$29!63)))

(declare-fun b!57861 () Bool)

(assert (=> b!57861 (= e!38108 (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!57862 () Bool)

(assert (=> b!57862 (= e!38108 (ite (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!10713 c!7215) b!57861))

(assert (= (and d!10713 (not c!7215)) b!57862))

(assert (=> b!57861 m!48105))

(assert (=> b!57861 m!48139))

(assert (=> d!10573 d!10713))

(assert (=> d!10573 d!10577))

(assert (=> d!10569 d!10575))

(declare-fun d!10715 () Bool)

(assert (=> d!10715 (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) from!355 Nil!1447)))

(assert (=> d!10715 true))

(declare-fun _$71!69 () Unit!1488)

(assert (=> d!10715 (= (choose!39 (_keys!3642 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!69)))

(declare-fun bs!2495 () Bool)

(assert (= bs!2495 d!10715))

(assert (=> bs!2495 m!48135))

(assert (=> d!10569 d!10715))

(assert (=> bm!4085 d!10641))

(assert (=> b!57504 d!10669))

(declare-fun d!10717 () Bool)

(declare-fun e!38111 () Bool)

(assert (=> d!10717 e!38111))

(declare-fun res!32324 () Bool)

(assert (=> d!10717 (=> (not res!32324) (not e!38111))))

(assert (=> d!10717 (= res!32324 (and (bvsge (index!3067 lt!22774) #b00000000000000000000000000000000) (bvslt (index!3067 lt!22774) (size!2003 (_keys!3642 newMap!16)))))))

(declare-fun lt!23092 () Unit!1488)

(declare-fun choose!303 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) Int) Unit!1488)

(assert (=> d!10717 (= lt!23092 (choose!303 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3067 lt!22774) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10717 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10717 (= (lemmaValidKeyInArrayIsInListMap!72 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3067 lt!22774) (defaultEntry!2022 newMap!16)) lt!23092)))

(declare-fun b!57865 () Bool)

(assert (=> b!57865 (= e!38111 (contains!688 (getCurrentListMap!400 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774))))))

(assert (= (and d!10717 res!32324) b!57865))

(declare-fun m!48871 () Bool)

(assert (=> d!10717 m!48871))

(assert (=> d!10717 m!48395))

(declare-fun m!48873 () Bool)

(assert (=> b!57865 m!48873))

(assert (=> b!57865 m!48309))

(assert (=> b!57865 m!48873))

(assert (=> b!57865 m!48309))

(declare-fun m!48875 () Bool)

(assert (=> b!57865 m!48875))

(assert (=> b!57489 d!10717))

(declare-fun d!10719 () Bool)

(declare-fun e!38114 () Bool)

(assert (=> d!10719 e!38114))

(declare-fun res!32327 () Bool)

(assert (=> d!10719 (=> (not res!32327) (not e!38114))))

(assert (=> d!10719 (= res!32327 (and (bvsge (index!3067 lt!22774) #b00000000000000000000000000000000) (bvslt (index!3067 lt!22774) (size!2004 (_values!2005 newMap!16)))))))

(declare-fun lt!23095 () Unit!1488)

(declare-fun choose!304 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) (_ BitVec 64) V!2835 Int) Unit!1488)

(assert (=> d!10719 (= lt!23095 (choose!304 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3067 lt!22774) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(assert (=> d!10719 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10719 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!14 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3067 lt!22774) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)) lt!23095)))

(declare-fun b!57868 () Bool)

(assert (=> b!57868 (= e!38114 (= (+!80 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!400 (_keys!3642 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))))))

(assert (= (and d!10719 res!32327) b!57868))

(assert (=> d!10719 m!48105))

(assert (=> d!10719 m!48103))

(declare-fun m!48877 () Bool)

(assert (=> d!10719 m!48877))

(assert (=> d!10719 m!48395))

(assert (=> b!57868 m!48203))

(assert (=> b!57868 m!48203))

(assert (=> b!57868 m!48777))

(assert (=> b!57868 m!48283))

(declare-fun m!48879 () Bool)

(assert (=> b!57868 m!48879))

(assert (=> b!57489 d!10719))

(declare-fun d!10721 () Bool)

(declare-fun e!38116 () Bool)

(assert (=> d!10721 e!38116))

(declare-fun res!32328 () Bool)

(assert (=> d!10721 (=> res!32328 e!38116)))

(declare-fun lt!23096 () Bool)

(assert (=> d!10721 (= res!32328 (not lt!23096))))

(declare-fun lt!23097 () Bool)

(assert (=> d!10721 (= lt!23096 lt!23097)))

(declare-fun lt!23099 () Unit!1488)

(declare-fun e!38115 () Unit!1488)

(assert (=> d!10721 (= lt!23099 e!38115)))

(declare-fun c!7216 () Bool)

(assert (=> d!10721 (= c!7216 lt!23097)))

(assert (=> d!10721 (= lt!23097 (containsKey!126 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10721 (= (contains!688 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) lt!23096)))

(declare-fun b!57869 () Bool)

(declare-fun lt!23098 () Unit!1488)

(assert (=> b!57869 (= e!38115 lt!23098)))

(assert (=> b!57869 (= lt!23098 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!57869 (isDefined!76 (getValueByKey!122 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!57870 () Bool)

(declare-fun Unit!1512 () Unit!1488)

(assert (=> b!57870 (= e!38115 Unit!1512)))

(declare-fun b!57871 () Bool)

(assert (=> b!57871 (= e!38116 (isDefined!76 (getValueByKey!122 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (= (and d!10721 c!7216) b!57869))

(assert (= (and d!10721 (not c!7216)) b!57870))

(assert (= (and d!10721 (not res!32328)) b!57871))

(assert (=> d!10721 m!48105))

(declare-fun m!48881 () Bool)

(assert (=> d!10721 m!48881))

(assert (=> b!57869 m!48105))

(declare-fun m!48883 () Bool)

(assert (=> b!57869 m!48883))

(assert (=> b!57869 m!48105))

(declare-fun m!48885 () Bool)

(assert (=> b!57869 m!48885))

(assert (=> b!57869 m!48885))

(declare-fun m!48887 () Bool)

(assert (=> b!57869 m!48887))

(assert (=> b!57871 m!48105))

(assert (=> b!57871 m!48885))

(assert (=> b!57871 m!48885))

(assert (=> b!57871 m!48887))

(assert (=> b!57489 d!10721))

(assert (=> b!57489 d!10669))

(declare-fun d!10723 () Bool)

(assert (=> d!10723 (= (get!1075 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57520 d!10723))

(declare-fun d!10725 () Bool)

(assert (=> d!10725 (= (apply!65 lt!22695 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1076 (getValueByKey!122 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2496 () Bool)

(assert (= bs!2496 d!10725))

(assert (=> bs!2496 m!48191))

(assert (=> bs!2496 m!48737))

(assert (=> bs!2496 m!48737))

(declare-fun m!48889 () Bool)

(assert (=> bs!2496 m!48889))

(assert (=> b!57355 d!10725))

(declare-fun d!10727 () Bool)

(declare-fun c!7217 () Bool)

(assert (=> d!10727 (= c!7217 ((_ is ValueCellFull!852) (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!38117 () V!2835)

(assert (=> d!10727 (= (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38117)))

(declare-fun b!57872 () Bool)

(assert (=> b!57872 (= e!38117 (get!1074 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57873 () Bool)

(assert (=> b!57873 (= e!38117 (get!1075 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10727 c!7217) b!57872))

(assert (= (and d!10727 (not c!7217)) b!57873))

(assert (=> b!57872 m!48205))

(assert (=> b!57872 m!48101))

(declare-fun m!48891 () Bool)

(assert (=> b!57872 m!48891))

(assert (=> b!57873 m!48205))

(assert (=> b!57873 m!48101))

(declare-fun m!48893 () Bool)

(assert (=> b!57873 m!48893))

(assert (=> b!57355 d!10727))

(declare-fun b!57874 () Bool)

(declare-fun e!38119 () Bool)

(assert (=> b!57874 (= e!38119 tp_is_empty!2391)))

(declare-fun b!57875 () Bool)

(declare-fun e!38118 () Bool)

(assert (=> b!57875 (= e!38118 tp_is_empty!2391)))

(declare-fun condMapEmpty!2859 () Bool)

(declare-fun mapDefault!2859 () ValueCell!852)

(assert (=> mapNonEmpty!2858 (= condMapEmpty!2859 (= mapRest!2858 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2859)))))

(declare-fun mapRes!2859 () Bool)

(assert (=> mapNonEmpty!2858 (= tp!7970 (and e!38118 mapRes!2859))))

(declare-fun mapIsEmpty!2859 () Bool)

(assert (=> mapIsEmpty!2859 mapRes!2859))

(declare-fun mapNonEmpty!2859 () Bool)

(declare-fun tp!7971 () Bool)

(assert (=> mapNonEmpty!2859 (= mapRes!2859 (and tp!7971 e!38119))))

(declare-fun mapValue!2859 () ValueCell!852)

(declare-fun mapRest!2859 () (Array (_ BitVec 32) ValueCell!852))

(declare-fun mapKey!2859 () (_ BitVec 32))

(assert (=> mapNonEmpty!2859 (= mapRest!2858 (store mapRest!2859 mapKey!2859 mapValue!2859))))

(assert (= (and mapNonEmpty!2858 condMapEmpty!2859) mapIsEmpty!2859))

(assert (= (and mapNonEmpty!2858 (not condMapEmpty!2859)) mapNonEmpty!2859))

(assert (= (and mapNonEmpty!2859 ((_ is ValueCellFull!852) mapValue!2859)) b!57874))

(assert (= (and mapNonEmpty!2858 ((_ is ValueCellFull!852) mapDefault!2859)) b!57875))

(declare-fun m!48895 () Bool)

(assert (=> mapNonEmpty!2859 m!48895))

(declare-fun b!57876 () Bool)

(declare-fun e!38121 () Bool)

(assert (=> b!57876 (= e!38121 tp_is_empty!2391)))

(declare-fun b!57877 () Bool)

(declare-fun e!38120 () Bool)

(assert (=> b!57877 (= e!38120 tp_is_empty!2391)))

(declare-fun condMapEmpty!2860 () Bool)

(declare-fun mapDefault!2860 () ValueCell!852)

(assert (=> mapNonEmpty!2857 (= condMapEmpty!2860 (= mapRest!2857 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2860)))))

(declare-fun mapRes!2860 () Bool)

(assert (=> mapNonEmpty!2857 (= tp!7969 (and e!38120 mapRes!2860))))

(declare-fun mapIsEmpty!2860 () Bool)

(assert (=> mapIsEmpty!2860 mapRes!2860))

(declare-fun mapNonEmpty!2860 () Bool)

(declare-fun tp!7972 () Bool)

(assert (=> mapNonEmpty!2860 (= mapRes!2860 (and tp!7972 e!38121))))

(declare-fun mapValue!2860 () ValueCell!852)

(declare-fun mapKey!2860 () (_ BitVec 32))

(declare-fun mapRest!2860 () (Array (_ BitVec 32) ValueCell!852))

(assert (=> mapNonEmpty!2860 (= mapRest!2857 (store mapRest!2860 mapKey!2860 mapValue!2860))))

(assert (= (and mapNonEmpty!2857 condMapEmpty!2860) mapIsEmpty!2860))

(assert (= (and mapNonEmpty!2857 (not condMapEmpty!2860)) mapNonEmpty!2860))

(assert (= (and mapNonEmpty!2860 ((_ is ValueCellFull!852) mapValue!2860)) b!57876))

(assert (= (and mapNonEmpty!2857 ((_ is ValueCellFull!852) mapDefault!2860)) b!57877))

(declare-fun m!48897 () Bool)

(assert (=> mapNonEmpty!2860 m!48897))

(declare-fun b_lambda!2531 () Bool)

(assert (= b_lambda!2525 (or (and b!57211 b_free!1949) (and b!57210 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))))) b_lambda!2531)))

(declare-fun b_lambda!2533 () Bool)

(assert (= b_lambda!2527 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2533)))

(declare-fun b_lambda!2535 () Bool)

(assert (= b_lambda!2521 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2535)))

(declare-fun b_lambda!2537 () Bool)

(assert (= b_lambda!2523 (or (and b!57211 b_free!1949) (and b!57210 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))))) b_lambda!2537)))

(declare-fun b_lambda!2539 () Bool)

(assert (= b_lambda!2529 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2539)))

(check-sat (not b!57725) (not b_lambda!2537) (not d!10639) (not b!57721) (not bm!4172) (not b!57544) (not b!57536) (not b!57780) (not b_lambda!2519) (not b!57778) (not b!57614) (not b!57575) (not b!57664) (not b!57667) (not b!57739) (not d!10613) (not d!10693) (not d!10687) b_and!3491 (not b!57546) (not b!57797) (not d!10619) (not b!57865) (not b!57689) (not b!57868) (not d!10647) (not b!57605) (not b!57675) (not b!57799) (not d!10719) (not d!10675) (not d!10609) (not d!10641) (not b!57873) (not d!10633) (not d!10679) (not b!57734) (not b!57612) (not b!57598) (not d!10721) (not d!10631) (not b!57793) (not mapNonEmpty!2860) (not bm!4210) (not b!57692) (not bm!4165) (not d!10645) (not bm!4202) (not d!10665) (not d!10617) (not b!57533) (not bm!4162) (not b!57800) tp_is_empty!2391 (not b!57694) (not b!57569) (not b!57651) (not b!57611) (not b!57855) (not b!57606) (not b_lambda!2531) (not d!10689) b_and!3489 (not d!10661) (not b!57663) (not b!57735) (not b!57811) (not d!10605) (not d!10629) (not b!57690) (not b!57736) (not d!10611) (not b!57593) (not bm!4164) (not d!10649) (not d!10697) (not b_lambda!2539) (not b!57610) (not b!57730) (not d!10615) (not b!57659) (not bm!4176) (not b!57654) (not bm!4181) (not b!57872) (not bm!4211) (not bm!4185) (not d!10659) (not mapNonEmpty!2859) (not b!57567) (not d!10603) (not d!10601) (not b!57608) (not b!57543) (not d!10621) (not b!57552) (not b!57554) (not d!10703) (not b!57737) (not bm!4182) (not b!57693) (not d!10715) (not d!10643) (not bm!4199) (not bm!4205) (not b!57565) (not b!57647) (not b!57691) (not b!57656) (not bm!4174) (not d!10623) (not bm!4186) (not b!57719) (not b!57775) (not b!57535) (not b!57599) (not b!57710) (not b!57782) (not d!10663) (not b!57871) (not b!57783) (not b_lambda!2515) (not bm!4189) (not d!10627) (not b_next!1949) (not b!57677) (not b!57869) (not b_lambda!2535) (not d!10725) (not d!10695) (not b!57861) (not b!57641) (not b!57709) (not d!10637) (not b!57712) (not b_lambda!2533) (not d!10681) (not b!57723) (not d!10711) (not b!57644) (not b!57708) (not d!10625) (not b!57657) (not bm!4198) (not b!57645) (not b!57856) (not b!57824) (not b!57854) (not b!57607) (not bm!4175) (not b!57732) (not b!57538) (not b!57722) (not b!57568) (not bm!4184) (not d!10673) (not d!10717) (not b!57822) (not b!57665) (not b_next!1951) (not d!10667) (not b!57642) (not d!10685) (not b!57699) (not b!57776) (not b!57810) (not b!57696) (not b!57702) (not bm!4200) (not b!57648) (not bm!4166) (not d!10669) (not b!57795) (not d!10707) (not bm!4171) (not b!57643) (not b!57791) (not b!57695) (not b!57701) (not d!10651) (not b!57542) (not b!57704) (not d!10635))
(check-sat b_and!3489 b_and!3491 (not b_next!1949) (not b_next!1951))
(get-model)

(declare-fun b!57878 () Bool)

(declare-fun e!38122 () Option!128)

(assert (=> b!57878 (= e!38122 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22928)))))))

(declare-fun d!10729 () Bool)

(declare-fun c!7218 () Bool)

(assert (=> d!10729 (= c!7218 (and ((_ is Cons!1445) (toList!702 lt!22928)) (= (_1!1029 (h!2025 (toList!702 lt!22928))) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10729 (= (getValueByKey!122 (toList!702 lt!22928) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) e!38122)))

(declare-fun b!57881 () Bool)

(declare-fun e!38123 () Option!128)

(assert (=> b!57881 (= e!38123 None!126)))

(declare-fun b!57879 () Bool)

(assert (=> b!57879 (= e!38122 e!38123)))

(declare-fun c!7219 () Bool)

(assert (=> b!57879 (= c!7219 (and ((_ is Cons!1445) (toList!702 lt!22928)) (not (= (_1!1029 (h!2025 (toList!702 lt!22928))) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!57880 () Bool)

(assert (=> b!57880 (= e!38123 (getValueByKey!122 (t!4775 (toList!702 lt!22928)) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!10729 c!7218) b!57878))

(assert (= (and d!10729 (not c!7218)) b!57879))

(assert (= (and b!57879 c!7219) b!57880))

(assert (= (and b!57879 (not c!7219)) b!57881))

(declare-fun m!48899 () Bool)

(assert (=> b!57880 m!48899))

(assert (=> b!57695 d!10729))

(declare-fun b!57900 () Bool)

(declare-fun lt!23105 () SeekEntryResult!236)

(assert (=> b!57900 (and (bvsge (index!3068 lt!23105) #b00000000000000000000000000000000) (bvslt (index!3068 lt!23105) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun res!32337 () Bool)

(assert (=> b!57900 (= res!32337 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3068 lt!23105)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!38137 () Bool)

(assert (=> b!57900 (=> res!32337 e!38137)))

(declare-fun e!38135 () Bool)

(assert (=> b!57900 (= e!38135 e!38137)))

(declare-fun d!10731 () Bool)

(declare-fun e!38134 () Bool)

(assert (=> d!10731 e!38134))

(declare-fun c!7226 () Bool)

(assert (=> d!10731 (= c!7226 (and ((_ is Intermediate!236) lt!23105) (undefined!1048 lt!23105)))))

(declare-fun e!38138 () SeekEntryResult!236)

(assert (=> d!10731 (= lt!23105 e!38138)))

(declare-fun c!7227 () Bool)

(assert (=> d!10731 (= c!7227 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!23104 () (_ BitVec 64))

(assert (=> d!10731 (= lt!23104 (select (arr!1774 (_keys!3642 newMap!16)) (toIndex!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (mask!5896 newMap!16))))))

(assert (=> d!10731 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10731 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (mask!5896 newMap!16)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)) lt!23105)))

(declare-fun b!57901 () Bool)

(assert (=> b!57901 (= e!38138 (Intermediate!236 true (toIndex!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (mask!5896 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!57902 () Bool)

(assert (=> b!57902 (= e!38134 e!38135)))

(declare-fun res!32335 () Bool)

(assert (=> b!57902 (= res!32335 (and ((_ is Intermediate!236) lt!23105) (not (undefined!1048 lt!23105)) (bvslt (x!9868 lt!23105) #b01111111111111111111111111111110) (bvsge (x!9868 lt!23105) #b00000000000000000000000000000000) (bvsge (x!9868 lt!23105) #b00000000000000000000000000000000)))))

(assert (=> b!57902 (=> (not res!32335) (not e!38135))))

(declare-fun e!38136 () SeekEntryResult!236)

(declare-fun b!57903 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!57903 (= e!38136 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (mask!5896 newMap!16)) #b00000000000000000000000000000000 (mask!5896 newMap!16)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun b!57904 () Bool)

(assert (=> b!57904 (and (bvsge (index!3068 lt!23105) #b00000000000000000000000000000000) (bvslt (index!3068 lt!23105) (size!2003 (_keys!3642 newMap!16))))))

(assert (=> b!57904 (= e!38137 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3068 lt!23105)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57905 () Bool)

(assert (=> b!57905 (and (bvsge (index!3068 lt!23105) #b00000000000000000000000000000000) (bvslt (index!3068 lt!23105) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun res!32336 () Bool)

(assert (=> b!57905 (= res!32336 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3068 lt!23105)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57905 (=> res!32336 e!38137)))

(declare-fun b!57906 () Bool)

(assert (=> b!57906 (= e!38136 (Intermediate!236 false (toIndex!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (mask!5896 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!57907 () Bool)

(assert (=> b!57907 (= e!38134 (bvsge (x!9868 lt!23105) #b01111111111111111111111111111110))))

(declare-fun b!57908 () Bool)

(assert (=> b!57908 (= e!38138 e!38136)))

(declare-fun c!7228 () Bool)

(assert (=> b!57908 (= c!7228 (or (= lt!23104 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (= (bvadd lt!23104 lt!23104) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10731 c!7227) b!57901))

(assert (= (and d!10731 (not c!7227)) b!57908))

(assert (= (and b!57908 c!7228) b!57906))

(assert (= (and b!57908 (not c!7228)) b!57903))

(assert (= (and d!10731 c!7226) b!57907))

(assert (= (and d!10731 (not c!7226)) b!57902))

(assert (= (and b!57902 res!32335) b!57900))

(assert (= (and b!57900 (not res!32337)) b!57905))

(assert (= (and b!57905 (not res!32336)) b!57904))

(assert (=> b!57903 m!48429))

(declare-fun m!48901 () Bool)

(assert (=> b!57903 m!48901))

(assert (=> b!57903 m!48901))

(assert (=> b!57903 m!48105))

(declare-fun m!48903 () Bool)

(assert (=> b!57903 m!48903))

(declare-fun m!48905 () Bool)

(assert (=> b!57904 m!48905))

(assert (=> d!10731 m!48429))

(declare-fun m!48907 () Bool)

(assert (=> d!10731 m!48907))

(assert (=> d!10731 m!48395))

(assert (=> b!57900 m!48905))

(assert (=> b!57905 m!48905))

(assert (=> d!10613 d!10731))

(declare-fun d!10733 () Bool)

(declare-fun lt!23111 () (_ BitVec 32))

(declare-fun lt!23110 () (_ BitVec 32))

(assert (=> d!10733 (= lt!23111 (bvmul (bvxor lt!23110 (bvlshr lt!23110 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!10733 (= lt!23110 ((_ extract 31 0) (bvand (bvxor (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvlshr (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!10733 (and (bvsge (mask!5896 newMap!16) #b00000000000000000000000000000000) (let ((res!32338 (let ((h!2028 ((_ extract 31 0) (bvand (bvxor (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvlshr (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!9971 (bvmul (bvxor h!2028 (bvlshr h!2028 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!9971 (bvlshr x!9971 #b00000000000000000000000000001101)) (mask!5896 newMap!16)))))) (and (bvslt res!32338 (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001)) (bvsge res!32338 #b00000000000000000000000000000000))))))

(assert (=> d!10733 (= (toIndex!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (mask!5896 newMap!16)) (bvand (bvxor lt!23111 (bvlshr lt!23111 #b00000000000000000000000000001101)) (mask!5896 newMap!16)))))

(assert (=> d!10613 d!10733))

(declare-fun d!10735 () Bool)

(assert (=> d!10735 (= (validMask!0 (mask!5896 newMap!16)) (and (or (= (mask!5896 newMap!16) #b00000000000000000000000000000111) (= (mask!5896 newMap!16) #b00000000000000000000000000001111) (= (mask!5896 newMap!16) #b00000000000000000000000000011111) (= (mask!5896 newMap!16) #b00000000000000000000000000111111) (= (mask!5896 newMap!16) #b00000000000000000000000001111111) (= (mask!5896 newMap!16) #b00000000000000000000000011111111) (= (mask!5896 newMap!16) #b00000000000000000000000111111111) (= (mask!5896 newMap!16) #b00000000000000000000001111111111) (= (mask!5896 newMap!16) #b00000000000000000000011111111111) (= (mask!5896 newMap!16) #b00000000000000000000111111111111) (= (mask!5896 newMap!16) #b00000000000000000001111111111111) (= (mask!5896 newMap!16) #b00000000000000000011111111111111) (= (mask!5896 newMap!16) #b00000000000000000111111111111111) (= (mask!5896 newMap!16) #b00000000000000001111111111111111) (= (mask!5896 newMap!16) #b00000000000000011111111111111111) (= (mask!5896 newMap!16) #b00000000000000111111111111111111) (= (mask!5896 newMap!16) #b00000000000001111111111111111111) (= (mask!5896 newMap!16) #b00000000000011111111111111111111) (= (mask!5896 newMap!16) #b00000000000111111111111111111111) (= (mask!5896 newMap!16) #b00000000001111111111111111111111) (= (mask!5896 newMap!16) #b00000000011111111111111111111111) (= (mask!5896 newMap!16) #b00000000111111111111111111111111) (= (mask!5896 newMap!16) #b00000001111111111111111111111111) (= (mask!5896 newMap!16) #b00000011111111111111111111111111) (= (mask!5896 newMap!16) #b00000111111111111111111111111111) (= (mask!5896 newMap!16) #b00001111111111111111111111111111) (= (mask!5896 newMap!16) #b00011111111111111111111111111111) (= (mask!5896 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5896 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!10613 d!10735))

(declare-fun d!10737 () Bool)

(declare-fun res!32339 () Bool)

(declare-fun e!38139 () Bool)

(assert (=> d!10737 (=> res!32339 e!38139)))

(assert (=> d!10737 (= res!32339 (and ((_ is Cons!1445) (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))) (= (_1!1029 (h!2025 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10737 (= (containsKey!126 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) e!38139)))

(declare-fun b!57909 () Bool)

(declare-fun e!38140 () Bool)

(assert (=> b!57909 (= e!38139 e!38140)))

(declare-fun res!32340 () Bool)

(assert (=> b!57909 (=> (not res!32340) (not e!38140))))

(assert (=> b!57909 (= res!32340 (and (or (not ((_ is Cons!1445) (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))))) (bvsle (_1!1029 (h!2025 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))) ((_ is Cons!1445) (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))) (bvslt (_1!1029 (h!2025 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(declare-fun b!57910 () Bool)

(assert (=> b!57910 (= e!38140 (containsKey!126 (t!4775 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10737 (not res!32339)) b!57909))

(assert (= (and b!57909 res!32340) b!57910))

(assert (=> b!57910 m!48105))

(declare-fun m!48909 () Bool)

(assert (=> b!57910 m!48909))

(assert (=> d!10721 d!10737))

(declare-fun d!10739 () Bool)

(declare-fun e!38142 () Bool)

(assert (=> d!10739 e!38142))

(declare-fun res!32341 () Bool)

(assert (=> d!10739 (=> res!32341 e!38142)))

(declare-fun lt!23112 () Bool)

(assert (=> d!10739 (= res!32341 (not lt!23112))))

(declare-fun lt!23113 () Bool)

(assert (=> d!10739 (= lt!23112 lt!23113)))

(declare-fun lt!23115 () Unit!1488)

(declare-fun e!38141 () Unit!1488)

(assert (=> d!10739 (= lt!23115 e!38141)))

(declare-fun c!7229 () Bool)

(assert (=> d!10739 (= c!7229 lt!23113)))

(assert (=> d!10739 (= lt!23113 (containsKey!126 (toList!702 lt!22905) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10739 (= (contains!688 lt!22905 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23112)))

(declare-fun b!57911 () Bool)

(declare-fun lt!23114 () Unit!1488)

(assert (=> b!57911 (= e!38141 lt!23114)))

(assert (=> b!57911 (= lt!23114 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22905) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57911 (isDefined!76 (getValueByKey!122 (toList!702 lt!22905) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57912 () Bool)

(declare-fun Unit!1513 () Unit!1488)

(assert (=> b!57912 (= e!38141 Unit!1513)))

(declare-fun b!57913 () Bool)

(assert (=> b!57913 (= e!38142 (isDefined!76 (getValueByKey!122 (toList!702 lt!22905) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10739 c!7229) b!57911))

(assert (= (and d!10739 (not c!7229)) b!57912))

(assert (= (and d!10739 (not res!32341)) b!57913))

(declare-fun m!48911 () Bool)

(assert (=> d!10739 m!48911))

(declare-fun m!48913 () Bool)

(assert (=> b!57911 m!48913))

(declare-fun m!48915 () Bool)

(assert (=> b!57911 m!48915))

(assert (=> b!57911 m!48915))

(declare-fun m!48917 () Bool)

(assert (=> b!57911 m!48917))

(assert (=> b!57913 m!48915))

(assert (=> b!57913 m!48915))

(assert (=> b!57913 m!48917))

(assert (=> bm!4175 d!10739))

(assert (=> b!57778 d!10707))

(declare-fun d!10741 () Bool)

(assert (=> d!10741 (= (inRange!0 (ite c!7212 (index!3066 lt!23084) (index!3069 lt!23084)) (mask!5896 newMap!16)) (and (bvsge (ite c!7212 (index!3066 lt!23084) (index!3069 lt!23084)) #b00000000000000000000000000000000) (bvslt (ite c!7212 (index!3066 lt!23084) (index!3069 lt!23084)) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4210 d!10741))

(declare-fun b!57914 () Bool)

(declare-fun e!38148 () Bool)

(declare-fun e!38145 () Bool)

(assert (=> b!57914 (= e!38148 e!38145)))

(declare-fun c!7232 () Bool)

(assert (=> b!57914 (= c!7232 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57915 () Bool)

(assert (=> b!57915 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> b!57915 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2004 (_values!2005 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun e!38144 () Bool)

(declare-fun lt!23116 () ListLongMap!1373)

(assert (=> b!57915 (= e!38144 (= (apply!65 lt!23116 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!10743 () Bool)

(declare-fun e!38149 () Bool)

(assert (=> d!10743 e!38149))

(declare-fun res!32342 () Bool)

(assert (=> d!10743 (=> (not res!32342) (not e!38149))))

(assert (=> d!10743 (= res!32342 (not (contains!688 lt!23116 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!38143 () ListLongMap!1373)

(assert (=> d!10743 (= lt!23116 e!38143)))

(declare-fun c!7230 () Bool)

(assert (=> d!10743 (= c!7230 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> d!10743 (validMask!0 (mask!5896 (v!2365 (underlying!222 thiss!992))))))

(assert (=> d!10743 (= (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))) lt!23116)))

(declare-fun b!57916 () Bool)

(assert (=> b!57916 (= e!38145 (isEmpty!296 lt!23116))))

(declare-fun b!57917 () Bool)

(declare-fun res!32344 () Bool)

(assert (=> b!57917 (=> (not res!32344) (not e!38149))))

(assert (=> b!57917 (= res!32344 (not (contains!688 lt!23116 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!57918 () Bool)

(assert (=> b!57918 (= e!38145 (= lt!23116 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57919 () Bool)

(declare-fun e!38147 () Bool)

(assert (=> b!57919 (= e!38147 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!57919 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!57920 () Bool)

(declare-fun e!38146 () ListLongMap!1373)

(declare-fun call!4215 () ListLongMap!1373)

(assert (=> b!57920 (= e!38146 call!4215)))

(declare-fun b!57921 () Bool)

(assert (=> b!57921 (= e!38143 e!38146)))

(declare-fun c!7231 () Bool)

(assert (=> b!57921 (= c!7231 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!57922 () Bool)

(assert (=> b!57922 (= e!38148 e!38144)))

(assert (=> b!57922 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun res!32343 () Bool)

(assert (=> b!57922 (= res!32343 (contains!688 lt!23116 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!57922 (=> (not res!32343) (not e!38144))))

(declare-fun bm!4212 () Bool)

(assert (=> bm!4212 (= call!4215 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (_values!2005 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992))) (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) (minValue!1940 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun b!57923 () Bool)

(assert (=> b!57923 (= e!38143 (ListLongMap!1374 Nil!1446))))

(declare-fun b!57924 () Bool)

(assert (=> b!57924 (= e!38149 e!38148)))

(declare-fun c!7233 () Bool)

(assert (=> b!57924 (= c!7233 e!38147)))

(declare-fun res!32345 () Bool)

(assert (=> b!57924 (=> (not res!32345) (not e!38147))))

(assert (=> b!57924 (= res!32345 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!57925 () Bool)

(declare-fun lt!23121 () Unit!1488)

(declare-fun lt!23117 () Unit!1488)

(assert (=> b!57925 (= lt!23121 lt!23117)))

(declare-fun lt!23120 () V!2835)

(declare-fun lt!23122 () (_ BitVec 64))

(declare-fun lt!23118 () ListLongMap!1373)

(declare-fun lt!23119 () (_ BitVec 64))

(assert (=> b!57925 (not (contains!688 (+!80 lt!23118 (tuple2!2039 lt!23119 lt!23120)) lt!23122))))

(assert (=> b!57925 (= lt!23117 (addStillNotContains!16 lt!23118 lt!23119 lt!23120 lt!23122))))

(assert (=> b!57925 (= lt!23122 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!57925 (= lt!23120 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!57925 (= lt!23119 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!57925 (= lt!23118 call!4215)))

(assert (=> b!57925 (= e!38146 (+!80 call!4215 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10743 c!7230) b!57923))

(assert (= (and d!10743 (not c!7230)) b!57921))

(assert (= (and b!57921 c!7231) b!57925))

(assert (= (and b!57921 (not c!7231)) b!57920))

(assert (= (or b!57925 b!57920) bm!4212))

(assert (= (and d!10743 res!32342) b!57917))

(assert (= (and b!57917 res!32344) b!57924))

(assert (= (and b!57924 res!32345) b!57919))

(assert (= (and b!57924 c!7233) b!57922))

(assert (= (and b!57924 (not c!7233)) b!57914))

(assert (= (and b!57922 res!32343) b!57915))

(assert (= (and b!57914 c!7232) b!57918))

(assert (= (and b!57914 (not c!7232)) b!57916))

(declare-fun b_lambda!2541 () Bool)

(assert (=> (not b_lambda!2541) (not b!57915)))

(assert (=> b!57915 t!4772))

(declare-fun b_and!3493 () Bool)

(assert (= b_and!3489 (and (=> t!4772 result!2347) b_and!3493)))

(assert (=> b!57915 t!4774))

(declare-fun b_and!3495 () Bool)

(assert (= b_and!3491 (and (=> t!4774 result!2351) b_and!3495)))

(declare-fun b_lambda!2543 () Bool)

(assert (=> (not b_lambda!2543) (not b!57925)))

(assert (=> b!57925 t!4772))

(declare-fun b_and!3497 () Bool)

(assert (= b_and!3493 (and (=> t!4772 result!2347) b_and!3497)))

(assert (=> b!57925 t!4774))

(declare-fun b_and!3499 () Bool)

(assert (= b_and!3495 (and (=> t!4774 result!2351) b_and!3499)))

(declare-fun m!48919 () Bool)

(assert (=> d!10743 m!48919))

(assert (=> d!10743 m!48115))

(assert (=> b!57921 m!48827))

(assert (=> b!57921 m!48827))

(declare-fun m!48921 () Bool)

(assert (=> b!57921 m!48921))

(assert (=> b!57915 m!48827))

(assert (=> b!57915 m!48101))

(assert (=> b!57915 m!48827))

(declare-fun m!48923 () Bool)

(assert (=> b!57915 m!48923))

(declare-fun m!48925 () Bool)

(assert (=> b!57915 m!48925))

(assert (=> b!57915 m!48925))

(assert (=> b!57915 m!48101))

(declare-fun m!48927 () Bool)

(assert (=> b!57915 m!48927))

(assert (=> b!57919 m!48827))

(assert (=> b!57919 m!48827))

(assert (=> b!57919 m!48921))

(assert (=> b!57922 m!48827))

(assert (=> b!57922 m!48827))

(declare-fun m!48929 () Bool)

(assert (=> b!57922 m!48929))

(declare-fun m!48931 () Bool)

(assert (=> b!57918 m!48931))

(declare-fun m!48933 () Bool)

(assert (=> b!57916 m!48933))

(assert (=> b!57925 m!48827))

(declare-fun m!48935 () Bool)

(assert (=> b!57925 m!48935))

(declare-fun m!48937 () Bool)

(assert (=> b!57925 m!48937))

(assert (=> b!57925 m!48935))

(assert (=> b!57925 m!48101))

(assert (=> b!57925 m!48925))

(assert (=> b!57925 m!48925))

(assert (=> b!57925 m!48101))

(assert (=> b!57925 m!48927))

(declare-fun m!48939 () Bool)

(assert (=> b!57925 m!48939))

(declare-fun m!48941 () Bool)

(assert (=> b!57925 m!48941))

(assert (=> bm!4212 m!48931))

(declare-fun m!48943 () Bool)

(assert (=> b!57917 m!48943))

(assert (=> b!57644 d!10743))

(declare-fun d!10745 () Bool)

(assert (=> d!10745 (= (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57533 d!10745))

(declare-fun d!10747 () Bool)

(assert (=> d!10747 (= (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22681)) (v!2369 (getValueByKey!122 (toList!702 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22681)))))

(assert (=> d!10643 d!10747))

(declare-fun b!57926 () Bool)

(declare-fun e!38150 () Option!128)

(assert (=> b!57926 (= e!38150 (Some!127 (_2!1029 (h!2025 (toList!702 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))))

(declare-fun c!7234 () Bool)

(declare-fun d!10749 () Bool)

(assert (=> d!10749 (= c!7234 (and ((_ is Cons!1445) (toList!702 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) (= (_1!1029 (h!2025 (toList!702 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))) lt!22681)))))

(assert (=> d!10749 (= (getValueByKey!122 (toList!702 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22681) e!38150)))

(declare-fun b!57929 () Bool)

(declare-fun e!38151 () Option!128)

(assert (=> b!57929 (= e!38151 None!126)))

(declare-fun b!57927 () Bool)

(assert (=> b!57927 (= e!38150 e!38151)))

(declare-fun c!7235 () Bool)

(assert (=> b!57927 (= c!7235 (and ((_ is Cons!1445) (toList!702 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) (not (= (_1!1029 (h!2025 (toList!702 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))) lt!22681))))))

(declare-fun b!57928 () Bool)

(assert (=> b!57928 (= e!38151 (getValueByKey!122 (t!4775 (toList!702 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) lt!22681))))

(assert (= (and d!10749 c!7234) b!57926))

(assert (= (and d!10749 (not c!7234)) b!57927))

(assert (= (and b!57927 c!7235) b!57928))

(assert (= (and b!57927 (not c!7235)) b!57929))

(declare-fun m!48945 () Bool)

(assert (=> b!57928 m!48945))

(assert (=> d!10643 d!10749))

(assert (=> b!57721 d!10745))

(declare-fun d!10751 () Bool)

(declare-fun e!38153 () Bool)

(assert (=> d!10751 e!38153))

(declare-fun res!32346 () Bool)

(assert (=> d!10751 (=> res!32346 e!38153)))

(declare-fun lt!23123 () Bool)

(assert (=> d!10751 (= res!32346 (not lt!23123))))

(declare-fun lt!23124 () Bool)

(assert (=> d!10751 (= lt!23123 lt!23124)))

(declare-fun lt!23126 () Unit!1488)

(declare-fun e!38152 () Unit!1488)

(assert (=> d!10751 (= lt!23126 e!38152)))

(declare-fun c!7236 () Bool)

(assert (=> d!10751 (= c!7236 lt!23124)))

(assert (=> d!10751 (= lt!23124 (containsKey!126 (toList!702 lt!22863) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10751 (= (contains!688 lt!22863 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23123)))

(declare-fun b!57930 () Bool)

(declare-fun lt!23125 () Unit!1488)

(assert (=> b!57930 (= e!38152 lt!23125)))

(assert (=> b!57930 (= lt!23125 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22863) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> b!57930 (isDefined!76 (getValueByKey!122 (toList!702 lt!22863) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!57931 () Bool)

(declare-fun Unit!1514 () Unit!1488)

(assert (=> b!57931 (= e!38152 Unit!1514)))

(declare-fun b!57932 () Bool)

(assert (=> b!57932 (= e!38153 (isDefined!76 (getValueByKey!122 (toList!702 lt!22863) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!10751 c!7236) b!57930))

(assert (= (and d!10751 (not c!7236)) b!57931))

(assert (= (and d!10751 (not res!32346)) b!57932))

(declare-fun m!48947 () Bool)

(assert (=> d!10751 m!48947))

(declare-fun m!48949 () Bool)

(assert (=> b!57930 m!48949))

(assert (=> b!57930 m!48507))

(assert (=> b!57930 m!48507))

(declare-fun m!48951 () Bool)

(assert (=> b!57930 m!48951))

(assert (=> b!57932 m!48507))

(assert (=> b!57932 m!48507))

(assert (=> b!57932 m!48951))

(assert (=> d!10633 d!10751))

(declare-fun b!57933 () Bool)

(declare-fun e!38154 () Option!128)

(assert (=> b!57933 (= e!38154 (Some!127 (_2!1029 (h!2025 lt!22864))))))

(declare-fun c!7237 () Bool)

(declare-fun d!10753 () Bool)

(assert (=> d!10753 (= c!7237 (and ((_ is Cons!1445) lt!22864) (= (_1!1029 (h!2025 lt!22864)) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10753 (= (getValueByKey!122 lt!22864 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) e!38154)))

(declare-fun b!57936 () Bool)

(declare-fun e!38155 () Option!128)

(assert (=> b!57936 (= e!38155 None!126)))

(declare-fun b!57934 () Bool)

(assert (=> b!57934 (= e!38154 e!38155)))

(declare-fun c!7238 () Bool)

(assert (=> b!57934 (= c!7238 (and ((_ is Cons!1445) lt!22864) (not (= (_1!1029 (h!2025 lt!22864)) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!57935 () Bool)

(assert (=> b!57935 (= e!38155 (getValueByKey!122 (t!4775 lt!22864) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!10753 c!7237) b!57933))

(assert (= (and d!10753 (not c!7237)) b!57934))

(assert (= (and b!57934 c!7238) b!57935))

(assert (= (and b!57934 (not c!7238)) b!57936))

(declare-fun m!48953 () Bool)

(assert (=> b!57935 m!48953))

(assert (=> d!10633 d!10753))

(declare-fun d!10755 () Bool)

(assert (=> d!10755 (= (getValueByKey!122 lt!22864 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun lt!23129 () Unit!1488)

(declare-fun choose!305 (List!1449 (_ BitVec 64) V!2835) Unit!1488)

(assert (=> d!10755 (= lt!23129 (choose!305 lt!22864 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun e!38158 () Bool)

(assert (=> d!10755 e!38158))

(declare-fun res!32351 () Bool)

(assert (=> d!10755 (=> (not res!32351) (not e!38158))))

(assert (=> d!10755 (= res!32351 (isStrictlySorted!278 lt!22864))))

(assert (=> d!10755 (= (lemmaContainsTupThenGetReturnValue!41 lt!22864 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23129)))

(declare-fun b!57941 () Bool)

(declare-fun res!32352 () Bool)

(assert (=> b!57941 (=> (not res!32352) (not e!38158))))

(assert (=> b!57941 (= res!32352 (containsKey!126 lt!22864 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!57942 () Bool)

(assert (=> b!57942 (= e!38158 (contains!690 lt!22864 (tuple2!2039 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!10755 res!32351) b!57941))

(assert (= (and b!57941 res!32352) b!57942))

(assert (=> d!10755 m!48501))

(declare-fun m!48955 () Bool)

(assert (=> d!10755 m!48955))

(declare-fun m!48957 () Bool)

(assert (=> d!10755 m!48957))

(declare-fun m!48959 () Bool)

(assert (=> b!57941 m!48959))

(declare-fun m!48961 () Bool)

(assert (=> b!57942 m!48961))

(assert (=> d!10633 d!10755))

(declare-fun b!57963 () Bool)

(declare-fun res!32357 () Bool)

(declare-fun e!38170 () Bool)

(assert (=> b!57963 (=> (not res!32357) (not e!38170))))

(declare-fun lt!23132 () List!1449)

(assert (=> b!57963 (= res!32357 (containsKey!126 lt!23132 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun d!10757 () Bool)

(assert (=> d!10757 e!38170))

(declare-fun res!32358 () Bool)

(assert (=> d!10757 (=> (not res!32358) (not e!38170))))

(assert (=> d!10757 (= res!32358 (isStrictlySorted!278 lt!23132))))

(declare-fun e!38173 () List!1449)

(assert (=> d!10757 (= lt!23132 e!38173)))

(declare-fun c!7247 () Bool)

(assert (=> d!10757 (= c!7247 (and ((_ is Cons!1445) (toList!702 lt!22702)) (bvslt (_1!1029 (h!2025 (toList!702 lt!22702))) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10757 (isStrictlySorted!278 (toList!702 lt!22702))))

(assert (=> d!10757 (= (insertStrictlySorted!43 (toList!702 lt!22702) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23132)))

(declare-fun b!57964 () Bool)

(declare-fun e!38169 () List!1449)

(declare-fun call!4224 () List!1449)

(assert (=> b!57964 (= e!38169 call!4224)))

(declare-fun b!57965 () Bool)

(declare-fun e!38172 () List!1449)

(declare-fun c!7250 () Bool)

(declare-fun c!7249 () Bool)

(assert (=> b!57965 (= e!38172 (ite c!7249 (t!4775 (toList!702 lt!22702)) (ite c!7250 (Cons!1445 (h!2025 (toList!702 lt!22702)) (t!4775 (toList!702 lt!22702))) Nil!1446)))))

(declare-fun b!57966 () Bool)

(assert (=> b!57966 (= e!38170 (contains!690 lt!23132 (tuple2!2039 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!57967 () Bool)

(assert (=> b!57967 (= e!38172 (insertStrictlySorted!43 (t!4775 (toList!702 lt!22702)) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun bm!4219 () Bool)

(declare-fun call!4223 () List!1449)

(declare-fun $colon$colon!58 (List!1449 tuple2!2038) List!1449)

(assert (=> bm!4219 (= call!4223 ($colon$colon!58 e!38172 (ite c!7247 (h!2025 (toList!702 lt!22702)) (tuple2!2039 (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun c!7248 () Bool)

(assert (=> bm!4219 (= c!7248 c!7247)))

(declare-fun b!57968 () Bool)

(declare-fun e!38171 () List!1449)

(declare-fun call!4222 () List!1449)

(assert (=> b!57968 (= e!38171 call!4222)))

(declare-fun bm!4220 () Bool)

(assert (=> bm!4220 (= call!4222 call!4223)))

(declare-fun b!57969 () Bool)

(assert (=> b!57969 (= c!7250 (and ((_ is Cons!1445) (toList!702 lt!22702)) (bvsgt (_1!1029 (h!2025 (toList!702 lt!22702))) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> b!57969 (= e!38171 e!38169)))

(declare-fun b!57970 () Bool)

(assert (=> b!57970 (= e!38173 call!4223)))

(declare-fun b!57971 () Bool)

(assert (=> b!57971 (= e!38169 call!4224)))

(declare-fun b!57972 () Bool)

(assert (=> b!57972 (= e!38173 e!38171)))

(assert (=> b!57972 (= c!7249 (and ((_ is Cons!1445) (toList!702 lt!22702)) (= (_1!1029 (h!2025 (toList!702 lt!22702))) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun bm!4221 () Bool)

(assert (=> bm!4221 (= call!4224 call!4222)))

(assert (= (and d!10757 c!7247) b!57970))

(assert (= (and d!10757 (not c!7247)) b!57972))

(assert (= (and b!57972 c!7249) b!57968))

(assert (= (and b!57972 (not c!7249)) b!57969))

(assert (= (and b!57969 c!7250) b!57964))

(assert (= (and b!57969 (not c!7250)) b!57971))

(assert (= (or b!57964 b!57971) bm!4221))

(assert (= (or b!57968 bm!4221) bm!4220))

(assert (= (or b!57970 bm!4220) bm!4219))

(assert (= (and bm!4219 c!7248) b!57967))

(assert (= (and bm!4219 (not c!7248)) b!57965))

(assert (= (and d!10757 res!32358) b!57963))

(assert (= (and b!57963 res!32357) b!57966))

(declare-fun m!48963 () Bool)

(assert (=> b!57963 m!48963))

(declare-fun m!48965 () Bool)

(assert (=> d!10757 m!48965))

(declare-fun m!48967 () Bool)

(assert (=> d!10757 m!48967))

(declare-fun m!48969 () Bool)

(assert (=> b!57966 m!48969))

(declare-fun m!48971 () Bool)

(assert (=> b!57967 m!48971))

(declare-fun m!48973 () Bool)

(assert (=> bm!4219 m!48973))

(assert (=> d!10633 d!10757))

(declare-fun b!57973 () Bool)

(declare-fun e!38174 () Option!128)

(assert (=> b!57973 (= e!38174 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22856)))))))

(declare-fun c!7251 () Bool)

(declare-fun d!10759 () Bool)

(assert (=> d!10759 (= c!7251 (and ((_ is Cons!1445) (toList!702 lt!22856)) (= (_1!1029 (h!2025 (toList!702 lt!22856))) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10759 (= (getValueByKey!122 (toList!702 lt!22856) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) e!38174)))

(declare-fun b!57976 () Bool)

(declare-fun e!38175 () Option!128)

(assert (=> b!57976 (= e!38175 None!126)))

(declare-fun b!57974 () Bool)

(assert (=> b!57974 (= e!38174 e!38175)))

(declare-fun c!7252 () Bool)

(assert (=> b!57974 (= c!7252 (and ((_ is Cons!1445) (toList!702 lt!22856)) (not (= (_1!1029 (h!2025 (toList!702 lt!22856))) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!57975 () Bool)

(assert (=> b!57975 (= e!38175 (getValueByKey!122 (t!4775 (toList!702 lt!22856)) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!10759 c!7251) b!57973))

(assert (= (and d!10759 (not c!7251)) b!57974))

(assert (= (and b!57974 c!7252) b!57975))

(assert (= (and b!57974 (not c!7252)) b!57976))

(declare-fun m!48975 () Bool)

(assert (=> b!57975 m!48975))

(assert (=> b!57607 d!10759))

(declare-fun d!10761 () Bool)

(declare-fun e!38177 () Bool)

(assert (=> d!10761 e!38177))

(declare-fun res!32359 () Bool)

(assert (=> d!10761 (=> res!32359 e!38177)))

(declare-fun lt!23133 () Bool)

(assert (=> d!10761 (= res!32359 (not lt!23133))))

(declare-fun lt!23134 () Bool)

(assert (=> d!10761 (= lt!23133 lt!23134)))

(declare-fun lt!23136 () Unit!1488)

(declare-fun e!38176 () Unit!1488)

(assert (=> d!10761 (= lt!23136 e!38176)))

(declare-fun c!7253 () Bool)

(assert (=> d!10761 (= c!7253 lt!23134)))

(assert (=> d!10761 (= lt!23134 (containsKey!126 (toList!702 lt!22810) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10761 (= (contains!688 lt!22810 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23133)))

(declare-fun b!57977 () Bool)

(declare-fun lt!23135 () Unit!1488)

(assert (=> b!57977 (= e!38176 lt!23135)))

(assert (=> b!57977 (= lt!23135 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22810) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57977 (isDefined!76 (getValueByKey!122 (toList!702 lt!22810) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!57978 () Bool)

(declare-fun Unit!1515 () Unit!1488)

(assert (=> b!57978 (= e!38176 Unit!1515)))

(declare-fun b!57979 () Bool)

(assert (=> b!57979 (= e!38177 (isDefined!76 (getValueByKey!122 (toList!702 lt!22810) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10761 c!7253) b!57977))

(assert (= (and d!10761 (not c!7253)) b!57978))

(assert (= (and d!10761 (not res!32359)) b!57979))

(declare-fun m!48977 () Bool)

(assert (=> d!10761 m!48977))

(declare-fun m!48979 () Bool)

(assert (=> b!57977 m!48979))

(declare-fun m!48981 () Bool)

(assert (=> b!57977 m!48981))

(assert (=> b!57977 m!48981))

(declare-fun m!48983 () Bool)

(assert (=> b!57977 m!48983))

(assert (=> b!57979 m!48981))

(assert (=> b!57979 m!48981))

(assert (=> b!57979 m!48983))

(assert (=> bm!4165 d!10761))

(declare-fun d!10763 () Bool)

(declare-fun e!38179 () Bool)

(assert (=> d!10763 e!38179))

(declare-fun res!32360 () Bool)

(assert (=> d!10763 (=> res!32360 e!38179)))

(declare-fun lt!23137 () Bool)

(assert (=> d!10763 (= res!32360 (not lt!23137))))

(declare-fun lt!23138 () Bool)

(assert (=> d!10763 (= lt!23137 lt!23138)))

(declare-fun lt!23140 () Unit!1488)

(declare-fun e!38178 () Unit!1488)

(assert (=> d!10763 (= lt!23140 e!38178)))

(declare-fun c!7254 () Bool)

(assert (=> d!10763 (= c!7254 lt!23138)))

(assert (=> d!10763 (= lt!23138 (containsKey!126 (toList!702 lt!22905) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!10763 (= (contains!688 lt!22905 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) lt!23137)))

(declare-fun b!57980 () Bool)

(declare-fun lt!23139 () Unit!1488)

(assert (=> b!57980 (= e!38178 lt!23139)))

(assert (=> b!57980 (= lt!23139 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22905) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57980 (isDefined!76 (getValueByKey!122 (toList!702 lt!22905) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57981 () Bool)

(declare-fun Unit!1516 () Unit!1488)

(assert (=> b!57981 (= e!38178 Unit!1516)))

(declare-fun b!57982 () Bool)

(assert (=> b!57982 (= e!38179 (isDefined!76 (getValueByKey!122 (toList!702 lt!22905) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!10763 c!7254) b!57980))

(assert (= (and d!10763 (not c!7254)) b!57981))

(assert (= (and d!10763 (not res!32360)) b!57982))

(assert (=> d!10763 m!48345))

(declare-fun m!48985 () Bool)

(assert (=> d!10763 m!48985))

(assert (=> b!57980 m!48345))

(declare-fun m!48987 () Bool)

(assert (=> b!57980 m!48987))

(assert (=> b!57980 m!48345))

(declare-fun m!48989 () Bool)

(assert (=> b!57980 m!48989))

(assert (=> b!57980 m!48989))

(declare-fun m!48991 () Bool)

(assert (=> b!57980 m!48991))

(assert (=> b!57982 m!48345))

(assert (=> b!57982 m!48989))

(assert (=> b!57982 m!48989))

(assert (=> b!57982 m!48991))

(assert (=> b!57663 d!10763))

(assert (=> b!57782 d!10681))

(assert (=> bm!4200 d!10655))

(declare-fun d!10765 () Bool)

(declare-fun e!38181 () Bool)

(assert (=> d!10765 e!38181))

(declare-fun res!32361 () Bool)

(assert (=> d!10765 (=> res!32361 e!38181)))

(declare-fun lt!23141 () Bool)

(assert (=> d!10765 (= res!32361 (not lt!23141))))

(declare-fun lt!23142 () Bool)

(assert (=> d!10765 (= lt!23141 lt!23142)))

(declare-fun lt!23144 () Unit!1488)

(declare-fun e!38180 () Unit!1488)

(assert (=> d!10765 (= lt!23144 e!38180)))

(declare-fun c!7255 () Bool)

(assert (=> d!10765 (= c!7255 lt!23142)))

(assert (=> d!10765 (= lt!23142 (containsKey!126 (toList!702 lt!22884) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!10765 (= (contains!688 lt!22884 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!23141)))

(declare-fun b!57983 () Bool)

(declare-fun lt!23143 () Unit!1488)

(assert (=> b!57983 (= e!38180 lt!23143)))

(assert (=> b!57983 (= lt!23143 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22884) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57983 (isDefined!76 (getValueByKey!122 (toList!702 lt!22884) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!57984 () Bool)

(declare-fun Unit!1517 () Unit!1488)

(assert (=> b!57984 (= e!38180 Unit!1517)))

(declare-fun b!57985 () Bool)

(assert (=> b!57985 (= e!38181 (isDefined!76 (getValueByKey!122 (toList!702 lt!22884) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!10765 c!7255) b!57983))

(assert (= (and d!10765 (not c!7255)) b!57984))

(assert (= (and d!10765 (not res!32361)) b!57985))

(assert (=> d!10765 m!48191))

(declare-fun m!48993 () Bool)

(assert (=> d!10765 m!48993))

(assert (=> b!57983 m!48191))

(declare-fun m!48995 () Bool)

(assert (=> b!57983 m!48995))

(assert (=> b!57983 m!48191))

(declare-fun m!48997 () Bool)

(assert (=> b!57983 m!48997))

(assert (=> b!57983 m!48997))

(declare-fun m!48999 () Bool)

(assert (=> b!57983 m!48999))

(assert (=> b!57985 m!48191))

(assert (=> b!57985 m!48997))

(assert (=> b!57985 m!48997))

(assert (=> b!57985 m!48999))

(assert (=> b!57648 d!10765))

(assert (=> d!10649 d!10605))

(assert (=> d!10649 d!10607))

(declare-fun d!10767 () Bool)

(assert (=> d!10767 (isDefined!76 (getValueByKey!122 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10767 true))

(declare-fun _$12!302 () Unit!1488)

(assert (=> d!10767 (= (choose!298 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) _$12!302)))

(declare-fun bs!2497 () Bool)

(assert (= bs!2497 d!10767))

(assert (=> bs!2497 m!48105))

(assert (=> bs!2497 m!48271))

(assert (=> bs!2497 m!48271))

(assert (=> bs!2497 m!48273))

(assert (=> d!10649 d!10767))

(declare-fun d!10769 () Bool)

(declare-fun res!32366 () Bool)

(declare-fun e!38186 () Bool)

(assert (=> d!10769 (=> res!32366 e!38186)))

(assert (=> d!10769 (= res!32366 (or ((_ is Nil!1446) (toList!702 lt!22601)) ((_ is Nil!1446) (t!4775 (toList!702 lt!22601)))))))

(assert (=> d!10769 (= (isStrictlySorted!278 (toList!702 lt!22601)) e!38186)))

(declare-fun b!57990 () Bool)

(declare-fun e!38187 () Bool)

(assert (=> b!57990 (= e!38186 e!38187)))

(declare-fun res!32367 () Bool)

(assert (=> b!57990 (=> (not res!32367) (not e!38187))))

(assert (=> b!57990 (= res!32367 (bvslt (_1!1029 (h!2025 (toList!702 lt!22601))) (_1!1029 (h!2025 (t!4775 (toList!702 lt!22601))))))))

(declare-fun b!57991 () Bool)

(assert (=> b!57991 (= e!38187 (isStrictlySorted!278 (t!4775 (toList!702 lt!22601))))))

(assert (= (and d!10769 (not res!32366)) b!57990))

(assert (= (and b!57990 res!32367) b!57991))

(declare-fun m!49001 () Bool)

(assert (=> b!57991 m!49001))

(assert (=> d!10649 d!10769))

(declare-fun d!10771 () Bool)

(declare-fun e!38189 () Bool)

(assert (=> d!10771 e!38189))

(declare-fun res!32368 () Bool)

(assert (=> d!10771 (=> res!32368 e!38189)))

(declare-fun lt!23145 () Bool)

(assert (=> d!10771 (= res!32368 (not lt!23145))))

(declare-fun lt!23146 () Bool)

(assert (=> d!10771 (= lt!23145 lt!23146)))

(declare-fun lt!23148 () Unit!1488)

(declare-fun e!38188 () Unit!1488)

(assert (=> d!10771 (= lt!23148 e!38188)))

(declare-fun c!7256 () Bool)

(assert (=> d!10771 (= c!7256 lt!23146)))

(assert (=> d!10771 (= lt!23146 (containsKey!126 (toList!702 lt!22810) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!10771 (= (contains!688 lt!22810 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) lt!23145)))

(declare-fun b!57992 () Bool)

(declare-fun lt!23147 () Unit!1488)

(assert (=> b!57992 (= e!38188 lt!23147)))

(assert (=> b!57992 (= lt!23147 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22810) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!57992 (isDefined!76 (getValueByKey!122 (toList!702 lt!22810) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!57993 () Bool)

(declare-fun Unit!1518 () Unit!1488)

(assert (=> b!57993 (= e!38188 Unit!1518)))

(declare-fun b!57994 () Bool)

(assert (=> b!57994 (= e!38189 (isDefined!76 (getValueByKey!122 (toList!702 lt!22810) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!10771 c!7256) b!57992))

(assert (= (and d!10771 (not c!7256)) b!57993))

(assert (= (and d!10771 (not res!32368)) b!57994))

(assert (=> d!10771 m!48345))

(declare-fun m!49003 () Bool)

(assert (=> d!10771 m!49003))

(assert (=> b!57992 m!48345))

(declare-fun m!49005 () Bool)

(assert (=> b!57992 m!49005))

(assert (=> b!57992 m!48345))

(declare-fun m!49007 () Bool)

(assert (=> b!57992 m!49007))

(assert (=> b!57992 m!49007))

(declare-fun m!49009 () Bool)

(assert (=> b!57992 m!49009))

(assert (=> b!57994 m!48345))

(assert (=> b!57994 m!49007))

(assert (=> b!57994 m!49007))

(assert (=> b!57994 m!49009))

(assert (=> b!57542 d!10771))

(declare-fun d!10773 () Bool)

(declare-fun e!38191 () Bool)

(assert (=> d!10773 e!38191))

(declare-fun res!32369 () Bool)

(assert (=> d!10773 (=> res!32369 e!38191)))

(declare-fun lt!23149 () Bool)

(assert (=> d!10773 (= res!32369 (not lt!23149))))

(declare-fun lt!23150 () Bool)

(assert (=> d!10773 (= lt!23149 lt!23150)))

(declare-fun lt!23152 () Unit!1488)

(declare-fun e!38190 () Unit!1488)

(assert (=> d!10773 (= lt!23152 e!38190)))

(declare-fun c!7257 () Bool)

(assert (=> d!10773 (= c!7257 lt!23150)))

(assert (=> d!10773 (= lt!23150 (containsKey!126 (toList!702 lt!22694) lt!22681))))

(assert (=> d!10773 (= (contains!688 lt!22694 lt!22681) lt!23149)))

(declare-fun b!57995 () Bool)

(declare-fun lt!23151 () Unit!1488)

(assert (=> b!57995 (= e!38190 lt!23151)))

(assert (=> b!57995 (= lt!23151 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22694) lt!22681))))

(assert (=> b!57995 (isDefined!76 (getValueByKey!122 (toList!702 lt!22694) lt!22681))))

(declare-fun b!57996 () Bool)

(declare-fun Unit!1519 () Unit!1488)

(assert (=> b!57996 (= e!38190 Unit!1519)))

(declare-fun b!57997 () Bool)

(assert (=> b!57997 (= e!38191 (isDefined!76 (getValueByKey!122 (toList!702 lt!22694) lt!22681)))))

(assert (= (and d!10773 c!7257) b!57995))

(assert (= (and d!10773 (not c!7257)) b!57996))

(assert (= (and d!10773 (not res!32369)) b!57997))

(declare-fun m!49011 () Bool)

(assert (=> d!10773 m!49011))

(declare-fun m!49013 () Bool)

(assert (=> b!57995 m!49013))

(assert (=> b!57995 m!48551))

(assert (=> b!57995 m!48551))

(declare-fun m!49015 () Bool)

(assert (=> b!57995 m!49015))

(assert (=> b!57997 m!48551))

(assert (=> b!57997 m!48551))

(assert (=> b!57997 m!49015))

(assert (=> d!10619 d!10773))

(assert (=> d!10619 d!10627))

(assert (=> d!10619 d!10643))

(declare-fun d!10775 () Bool)

(assert (=> d!10775 (= (apply!65 (+!80 lt!22694 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22681) (apply!65 lt!22694 lt!22681))))

(assert (=> d!10775 true))

(declare-fun _$34!751 () Unit!1488)

(assert (=> d!10775 (= (choose!296 lt!22694 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22681) _$34!751)))

(declare-fun bs!2498 () Bool)

(assert (= bs!2498 d!10775))

(assert (=> bs!2498 m!48213))

(assert (=> bs!2498 m!48213))

(assert (=> bs!2498 m!48223))

(assert (=> bs!2498 m!48233))

(assert (=> d!10619 d!10775))

(assert (=> d!10619 d!10645))

(assert (=> b!57651 d!10727))

(declare-fun d!10777 () Bool)

(declare-fun e!38192 () Bool)

(assert (=> d!10777 e!38192))

(declare-fun res!32371 () Bool)

(assert (=> d!10777 (=> (not res!32371) (not e!38192))))

(declare-fun lt!23155 () ListLongMap!1373)

(assert (=> d!10777 (= res!32371 (contains!688 lt!23155 (_1!1029 (tuple2!2039 lt!22887 lt!22888))))))

(declare-fun lt!23156 () List!1449)

(assert (=> d!10777 (= lt!23155 (ListLongMap!1374 lt!23156))))

(declare-fun lt!23153 () Unit!1488)

(declare-fun lt!23154 () Unit!1488)

(assert (=> d!10777 (= lt!23153 lt!23154)))

(assert (=> d!10777 (= (getValueByKey!122 lt!23156 (_1!1029 (tuple2!2039 lt!22887 lt!22888))) (Some!127 (_2!1029 (tuple2!2039 lt!22887 lt!22888))))))

(assert (=> d!10777 (= lt!23154 (lemmaContainsTupThenGetReturnValue!41 lt!23156 (_1!1029 (tuple2!2039 lt!22887 lt!22888)) (_2!1029 (tuple2!2039 lt!22887 lt!22888))))))

(assert (=> d!10777 (= lt!23156 (insertStrictlySorted!43 (toList!702 lt!22886) (_1!1029 (tuple2!2039 lt!22887 lt!22888)) (_2!1029 (tuple2!2039 lt!22887 lt!22888))))))

(assert (=> d!10777 (= (+!80 lt!22886 (tuple2!2039 lt!22887 lt!22888)) lt!23155)))

(declare-fun b!57999 () Bool)

(declare-fun res!32370 () Bool)

(assert (=> b!57999 (=> (not res!32370) (not e!38192))))

(assert (=> b!57999 (= res!32370 (= (getValueByKey!122 (toList!702 lt!23155) (_1!1029 (tuple2!2039 lt!22887 lt!22888))) (Some!127 (_2!1029 (tuple2!2039 lt!22887 lt!22888)))))))

(declare-fun b!58000 () Bool)

(assert (=> b!58000 (= e!38192 (contains!690 (toList!702 lt!23155) (tuple2!2039 lt!22887 lt!22888)))))

(assert (= (and d!10777 res!32371) b!57999))

(assert (= (and b!57999 res!32370) b!58000))

(declare-fun m!49017 () Bool)

(assert (=> d!10777 m!49017))

(declare-fun m!49019 () Bool)

(assert (=> d!10777 m!49019))

(declare-fun m!49021 () Bool)

(assert (=> d!10777 m!49021))

(declare-fun m!49023 () Bool)

(assert (=> d!10777 m!49023))

(declare-fun m!49025 () Bool)

(assert (=> b!57999 m!49025))

(declare-fun m!49027 () Bool)

(assert (=> b!58000 m!49027))

(assert (=> b!57651 d!10777))

(declare-fun d!10779 () Bool)

(declare-fun e!38194 () Bool)

(assert (=> d!10779 e!38194))

(declare-fun res!32372 () Bool)

(assert (=> d!10779 (=> res!32372 e!38194)))

(declare-fun lt!23157 () Bool)

(assert (=> d!10779 (= res!32372 (not lt!23157))))

(declare-fun lt!23158 () Bool)

(assert (=> d!10779 (= lt!23157 lt!23158)))

(declare-fun lt!23160 () Unit!1488)

(declare-fun e!38193 () Unit!1488)

(assert (=> d!10779 (= lt!23160 e!38193)))

(declare-fun c!7258 () Bool)

(assert (=> d!10779 (= c!7258 lt!23158)))

(assert (=> d!10779 (= lt!23158 (containsKey!126 (toList!702 (+!80 lt!22886 (tuple2!2039 lt!22887 lt!22888))) lt!22890))))

(assert (=> d!10779 (= (contains!688 (+!80 lt!22886 (tuple2!2039 lt!22887 lt!22888)) lt!22890) lt!23157)))

(declare-fun b!58001 () Bool)

(declare-fun lt!23159 () Unit!1488)

(assert (=> b!58001 (= e!38193 lt!23159)))

(assert (=> b!58001 (= lt!23159 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 (+!80 lt!22886 (tuple2!2039 lt!22887 lt!22888))) lt!22890))))

(assert (=> b!58001 (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22886 (tuple2!2039 lt!22887 lt!22888))) lt!22890))))

(declare-fun b!58002 () Bool)

(declare-fun Unit!1520 () Unit!1488)

(assert (=> b!58002 (= e!38193 Unit!1520)))

(declare-fun b!58003 () Bool)

(assert (=> b!58003 (= e!38194 (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22886 (tuple2!2039 lt!22887 lt!22888))) lt!22890)))))

(assert (= (and d!10779 c!7258) b!58001))

(assert (= (and d!10779 (not c!7258)) b!58002))

(assert (= (and d!10779 (not res!32372)) b!58003))

(declare-fun m!49029 () Bool)

(assert (=> d!10779 m!49029))

(declare-fun m!49031 () Bool)

(assert (=> b!58001 m!49031))

(declare-fun m!49033 () Bool)

(assert (=> b!58001 m!49033))

(assert (=> b!58001 m!49033))

(declare-fun m!49035 () Bool)

(assert (=> b!58001 m!49035))

(assert (=> b!58003 m!49033))

(assert (=> b!58003 m!49033))

(assert (=> b!58003 m!49035))

(assert (=> b!57651 d!10779))

(declare-fun d!10781 () Bool)

(assert (=> d!10781 (not (contains!688 (+!80 lt!22886 (tuple2!2039 lt!22887 lt!22888)) lt!22890))))

(declare-fun lt!23163 () Unit!1488)

(declare-fun choose!306 (ListLongMap!1373 (_ BitVec 64) V!2835 (_ BitVec 64)) Unit!1488)

(assert (=> d!10781 (= lt!23163 (choose!306 lt!22886 lt!22887 lt!22888 lt!22890))))

(declare-fun e!38197 () Bool)

(assert (=> d!10781 e!38197))

(declare-fun res!32375 () Bool)

(assert (=> d!10781 (=> (not res!32375) (not e!38197))))

(assert (=> d!10781 (= res!32375 (not (contains!688 lt!22886 lt!22890)))))

(assert (=> d!10781 (= (addStillNotContains!16 lt!22886 lt!22887 lt!22888 lt!22890) lt!23163)))

(declare-fun b!58007 () Bool)

(assert (=> b!58007 (= e!38197 (not (= lt!22887 lt!22890)))))

(assert (= (and d!10781 res!32375) b!58007))

(assert (=> d!10781 m!48537))

(assert (=> d!10781 m!48537))

(assert (=> d!10781 m!48539))

(declare-fun m!49037 () Bool)

(assert (=> d!10781 m!49037))

(declare-fun m!49039 () Bool)

(assert (=> d!10781 m!49039))

(assert (=> b!57651 d!10781))

(declare-fun d!10783 () Bool)

(declare-fun e!38198 () Bool)

(assert (=> d!10783 e!38198))

(declare-fun res!32377 () Bool)

(assert (=> d!10783 (=> (not res!32377) (not e!38198))))

(declare-fun lt!23166 () ListLongMap!1373)

(assert (=> d!10783 (= res!32377 (contains!688 lt!23166 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23167 () List!1449)

(assert (=> d!10783 (= lt!23166 (ListLongMap!1374 lt!23167))))

(declare-fun lt!23164 () Unit!1488)

(declare-fun lt!23165 () Unit!1488)

(assert (=> d!10783 (= lt!23164 lt!23165)))

(assert (=> d!10783 (= (getValueByKey!122 lt!23167 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10783 (= lt!23165 (lemmaContainsTupThenGetReturnValue!41 lt!23167 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10783 (= lt!23167 (insertStrictlySorted!43 (toList!702 call!4174) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10783 (= (+!80 call!4174 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23166)))

(declare-fun b!58008 () Bool)

(declare-fun res!32376 () Bool)

(assert (=> b!58008 (=> (not res!32376) (not e!38198))))

(assert (=> b!58008 (= res!32376 (= (getValueByKey!122 (toList!702 lt!23166) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58009 () Bool)

(assert (=> b!58009 (= e!38198 (contains!690 (toList!702 lt!23166) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10783 res!32377) b!58008))

(assert (= (and b!58008 res!32376) b!58009))

(declare-fun m!49041 () Bool)

(assert (=> d!10783 m!49041))

(declare-fun m!49043 () Bool)

(assert (=> d!10783 m!49043))

(declare-fun m!49045 () Bool)

(assert (=> d!10783 m!49045))

(declare-fun m!49047 () Bool)

(assert (=> d!10783 m!49047))

(declare-fun m!49049 () Bool)

(assert (=> b!58008 m!49049))

(declare-fun m!49051 () Bool)

(assert (=> b!58009 m!49051))

(assert (=> b!57651 d!10783))

(declare-fun d!10785 () Bool)

(declare-fun res!32378 () Bool)

(declare-fun e!38199 () Bool)

(assert (=> d!10785 (=> res!32378 e!38199)))

(assert (=> d!10785 (= res!32378 (and ((_ is Cons!1445) (toList!702 e!37903)) (= (_1!1029 (h!2025 (toList!702 e!37903))) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774))))))))

(assert (=> d!10785 (= (containsKey!126 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))) e!38199)))

(declare-fun b!58010 () Bool)

(declare-fun e!38200 () Bool)

(assert (=> b!58010 (= e!38199 e!38200)))

(declare-fun res!32379 () Bool)

(assert (=> b!58010 (=> (not res!32379) (not e!38200))))

(assert (=> b!58010 (= res!32379 (and (or (not ((_ is Cons!1445) (toList!702 e!37903))) (bvsle (_1!1029 (h!2025 (toList!702 e!37903))) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774))))) ((_ is Cons!1445) (toList!702 e!37903)) (bvslt (_1!1029 (h!2025 (toList!702 e!37903))) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774))))))))

(declare-fun b!58011 () Bool)

(assert (=> b!58011 (= e!38200 (containsKey!126 (t!4775 (toList!702 e!37903)) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))

(assert (= (and d!10785 (not res!32378)) b!58010))

(assert (= (and b!58010 res!32379) b!58011))

(declare-fun m!49053 () Bool)

(assert (=> b!58011 m!49053))

(assert (=> d!10679 d!10785))

(assert (=> d!10681 d!10613))

(declare-fun d!10787 () Bool)

(declare-fun e!38203 () Bool)

(assert (=> d!10787 e!38203))

(declare-fun res!32385 () Bool)

(assert (=> d!10787 (=> (not res!32385) (not e!38203))))

(declare-fun lt!23170 () SeekEntryResult!236)

(assert (=> d!10787 (= res!32385 ((_ is Found!236) lt!23170))))

(assert (=> d!10787 (= lt!23170 (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (=> d!10787 true))

(declare-fun _$33!39 () Unit!1488)

(assert (=> d!10787 (= (choose!301 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)) _$33!39)))

(declare-fun b!58016 () Bool)

(declare-fun res!32384 () Bool)

(assert (=> b!58016 (=> (not res!32384) (not e!38203))))

(assert (=> b!58016 (= res!32384 (inRange!0 (index!3067 lt!23170) (mask!5896 newMap!16)))))

(declare-fun b!58017 () Bool)

(assert (=> b!58017 (= e!38203 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!23170)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10787 res!32385) b!58016))

(assert (= (and b!58016 res!32384) b!58017))

(assert (=> d!10787 m!48105))

(assert (=> d!10787 m!48313))

(declare-fun m!49055 () Bool)

(assert (=> b!58016 m!49055))

(declare-fun m!49057 () Bool)

(assert (=> b!58017 m!49057))

(assert (=> d!10681 d!10787))

(assert (=> d!10681 d!10735))

(declare-fun b!58018 () Bool)

(declare-fun e!38204 () Option!128)

(assert (=> b!58018 (= e!38204 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22863)))))))

(declare-fun d!10789 () Bool)

(declare-fun c!7259 () Bool)

(assert (=> d!10789 (= c!7259 (and ((_ is Cons!1445) (toList!702 lt!22863)) (= (_1!1029 (h!2025 (toList!702 lt!22863))) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10789 (= (getValueByKey!122 (toList!702 lt!22863) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) e!38204)))

(declare-fun b!58021 () Bool)

(declare-fun e!38205 () Option!128)

(assert (=> b!58021 (= e!38205 None!126)))

(declare-fun b!58019 () Bool)

(assert (=> b!58019 (= e!38204 e!38205)))

(declare-fun c!7260 () Bool)

(assert (=> b!58019 (= c!7260 (and ((_ is Cons!1445) (toList!702 lt!22863)) (not (= (_1!1029 (h!2025 (toList!702 lt!22863))) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!58020 () Bool)

(assert (=> b!58020 (= e!38205 (getValueByKey!122 (t!4775 (toList!702 lt!22863)) (_1!1029 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!10789 c!7259) b!58018))

(assert (= (and d!10789 (not c!7259)) b!58019))

(assert (= (and b!58019 c!7260) b!58020))

(assert (= (and b!58019 (not c!7260)) b!58021))

(declare-fun m!49059 () Bool)

(assert (=> b!58020 m!49059))

(assert (=> b!57610 d!10789))

(assert (=> d!10715 d!10575))

(declare-fun d!10791 () Bool)

(assert (=> d!10791 (= (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!57797 d!10791))

(declare-fun b!58022 () Bool)

(declare-fun e!38206 () Option!128)

(assert (=> b!58022 (= e!38206 (Some!127 (_2!1029 (h!2025 (t!4775 (toList!702 lt!22601))))))))

(declare-fun d!10793 () Bool)

(declare-fun c!7261 () Bool)

(assert (=> d!10793 (= c!7261 (and ((_ is Cons!1445) (t!4775 (toList!702 lt!22601))) (= (_1!1029 (h!2025 (t!4775 (toList!702 lt!22601)))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10793 (= (getValueByKey!122 (t!4775 (toList!702 lt!22601)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) e!38206)))

(declare-fun b!58025 () Bool)

(declare-fun e!38207 () Option!128)

(assert (=> b!58025 (= e!38207 None!126)))

(declare-fun b!58023 () Bool)

(assert (=> b!58023 (= e!38206 e!38207)))

(declare-fun c!7262 () Bool)

(assert (=> b!58023 (= c!7262 (and ((_ is Cons!1445) (t!4775 (toList!702 lt!22601))) (not (= (_1!1029 (h!2025 (t!4775 (toList!702 lt!22601)))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun b!58024 () Bool)

(assert (=> b!58024 (= e!38207 (getValueByKey!122 (t!4775 (t!4775 (toList!702 lt!22601))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10793 c!7261) b!58022))

(assert (= (and d!10793 (not c!7261)) b!58023))

(assert (= (and b!58023 c!7262) b!58024))

(assert (= (and b!58023 (not c!7262)) b!58025))

(assert (=> b!58024 m!48105))

(declare-fun m!49061 () Bool)

(assert (=> b!58024 m!49061))

(assert (=> b!57565 d!10793))

(declare-fun b!58026 () Bool)

(declare-fun e!38214 () Bool)

(declare-fun call!4227 () Bool)

(assert (=> b!58026 (= e!38214 (not call!4227))))

(declare-fun call!4228 () ListLongMap!1373)

(declare-fun c!7266 () Bool)

(declare-fun call!4226 () ListLongMap!1373)

(declare-fun c!7263 () Bool)

(declare-fun bm!4222 () Bool)

(declare-fun call!4229 () ListLongMap!1373)

(declare-fun call!4230 () ListLongMap!1373)

(assert (=> bm!4222 (= call!4228 (+!80 (ite c!7266 call!4230 (ite c!7263 call!4229 call!4226)) (ite (or c!7266 c!7263) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (_2!1030 lt!22784))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (_2!1030 lt!22784))))))))

(declare-fun b!58027 () Bool)

(declare-fun res!32389 () Bool)

(declare-fun e!38218 () Bool)

(assert (=> b!58027 (=> (not res!32389) (not e!38218))))

(declare-fun e!38219 () Bool)

(assert (=> b!58027 (= res!32389 e!38219)))

(declare-fun c!7265 () Bool)

(assert (=> b!58027 (= c!7265 (not (= (bvand (extraKeys!1913 (_2!1030 lt!22784)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4223 () Bool)

(assert (=> bm!4223 (= call!4226 call!4229)))

(declare-fun b!58028 () Bool)

(declare-fun e!38209 () Bool)

(assert (=> b!58028 (= e!38209 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000)))))

(declare-fun b!58029 () Bool)

(declare-fun call!4231 () Bool)

(assert (=> b!58029 (= e!38219 (not call!4231))))

(declare-fun d!10795 () Bool)

(assert (=> d!10795 e!38218))

(declare-fun res!32386 () Bool)

(assert (=> d!10795 (=> (not res!32386) (not e!38218))))

(assert (=> d!10795 (= res!32386 (or (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))))))))

(declare-fun lt!23185 () ListLongMap!1373)

(declare-fun lt!23176 () ListLongMap!1373)

(assert (=> d!10795 (= lt!23185 lt!23176)))

(declare-fun lt!23180 () Unit!1488)

(declare-fun e!38216 () Unit!1488)

(assert (=> d!10795 (= lt!23180 e!38216)))

(declare-fun c!7267 () Bool)

(assert (=> d!10795 (= c!7267 e!38209)))

(declare-fun res!32393 () Bool)

(assert (=> d!10795 (=> (not res!32393) (not e!38209))))

(assert (=> d!10795 (= res!32393 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))))))

(declare-fun e!38213 () ListLongMap!1373)

(assert (=> d!10795 (= lt!23176 e!38213)))

(assert (=> d!10795 (= c!7266 (and (not (= (bvand (extraKeys!1913 (_2!1030 lt!22784)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 (_2!1030 lt!22784)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10795 (validMask!0 (mask!5896 (_2!1030 lt!22784)))))

(assert (=> d!10795 (= (getCurrentListMap!400 (_keys!3642 (_2!1030 lt!22784)) (_values!2005 (_2!1030 lt!22784)) (mask!5896 (_2!1030 lt!22784)) (extraKeys!1913 (_2!1030 lt!22784)) (zeroValue!1940 (_2!1030 lt!22784)) (minValue!1940 (_2!1030 lt!22784)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1030 lt!22784))) lt!23185)))

(declare-fun b!58030 () Bool)

(declare-fun e!38220 () Bool)

(assert (=> b!58030 (= e!38220 (= (apply!65 lt!23185 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 (_2!1030 lt!22784))))))

(declare-fun b!58031 () Bool)

(declare-fun e!38208 () Bool)

(assert (=> b!58031 (= e!38208 (= (apply!65 lt!23185 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 (_values!2005 (_2!1030 lt!22784))) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 (_2!1030 lt!22784)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58031 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_values!2005 (_2!1030 lt!22784)))))))

(assert (=> b!58031 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))))))

(declare-fun b!58032 () Bool)

(declare-fun e!38211 () ListLongMap!1373)

(assert (=> b!58032 (= e!38211 call!4226)))

(declare-fun bm!4224 () Bool)

(assert (=> bm!4224 (= call!4230 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (_2!1030 lt!22784)) (_values!2005 (_2!1030 lt!22784)) (mask!5896 (_2!1030 lt!22784)) (extraKeys!1913 (_2!1030 lt!22784)) (zeroValue!1940 (_2!1030 lt!22784)) (minValue!1940 (_2!1030 lt!22784)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1030 lt!22784))))))

(declare-fun b!58033 () Bool)

(assert (=> b!58033 (= e!38213 (+!80 call!4228 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (_2!1030 lt!22784)))))))

(declare-fun b!58034 () Bool)

(assert (=> b!58034 (= e!38214 e!38220)))

(declare-fun res!32387 () Bool)

(assert (=> b!58034 (= res!32387 call!4227)))

(assert (=> b!58034 (=> (not res!32387) (not e!38220))))

(declare-fun bm!4225 () Bool)

(assert (=> bm!4225 (= call!4231 (contains!688 lt!23185 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4226 () Bool)

(assert (=> bm!4226 (= call!4227 (contains!688 lt!23185 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58035 () Bool)

(assert (=> b!58035 (= e!38218 e!38214)))

(declare-fun c!7268 () Bool)

(assert (=> b!58035 (= c!7268 (not (= (bvand (extraKeys!1913 (_2!1030 lt!22784)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58036 () Bool)

(declare-fun res!32391 () Bool)

(assert (=> b!58036 (=> (not res!32391) (not e!38218))))

(declare-fun e!38217 () Bool)

(assert (=> b!58036 (= res!32391 e!38217)))

(declare-fun res!32390 () Bool)

(assert (=> b!58036 (=> res!32390 e!38217)))

(declare-fun e!38210 () Bool)

(assert (=> b!58036 (= res!32390 (not e!38210))))

(declare-fun res!32394 () Bool)

(assert (=> b!58036 (=> (not res!32394) (not e!38210))))

(assert (=> b!58036 (= res!32394 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))))))

(declare-fun b!58037 () Bool)

(assert (=> b!58037 (= e!38217 e!38208)))

(declare-fun res!32388 () Bool)

(assert (=> b!58037 (=> (not res!32388) (not e!38208))))

(assert (=> b!58037 (= res!32388 (contains!688 lt!23185 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000)))))

(assert (=> b!58037 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))))))

(declare-fun b!58038 () Bool)

(declare-fun lt!23186 () Unit!1488)

(assert (=> b!58038 (= e!38216 lt!23186)))

(declare-fun lt!23192 () ListLongMap!1373)

(assert (=> b!58038 (= lt!23192 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (_2!1030 lt!22784)) (_values!2005 (_2!1030 lt!22784)) (mask!5896 (_2!1030 lt!22784)) (extraKeys!1913 (_2!1030 lt!22784)) (zeroValue!1940 (_2!1030 lt!22784)) (minValue!1940 (_2!1030 lt!22784)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1030 lt!22784))))))

(declare-fun lt!23174 () (_ BitVec 64))

(assert (=> b!58038 (= lt!23174 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23190 () (_ BitVec 64))

(assert (=> b!58038 (= lt!23190 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000))))

(declare-fun lt!23191 () Unit!1488)

(assert (=> b!58038 (= lt!23191 (addStillContains!41 lt!23192 lt!23174 (zeroValue!1940 (_2!1030 lt!22784)) lt!23190))))

(assert (=> b!58038 (contains!688 (+!80 lt!23192 (tuple2!2039 lt!23174 (zeroValue!1940 (_2!1030 lt!22784)))) lt!23190)))

(declare-fun lt!23187 () Unit!1488)

(assert (=> b!58038 (= lt!23187 lt!23191)))

(declare-fun lt!23184 () ListLongMap!1373)

(assert (=> b!58038 (= lt!23184 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (_2!1030 lt!22784)) (_values!2005 (_2!1030 lt!22784)) (mask!5896 (_2!1030 lt!22784)) (extraKeys!1913 (_2!1030 lt!22784)) (zeroValue!1940 (_2!1030 lt!22784)) (minValue!1940 (_2!1030 lt!22784)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1030 lt!22784))))))

(declare-fun lt!23178 () (_ BitVec 64))

(assert (=> b!58038 (= lt!23178 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23171 () (_ BitVec 64))

(assert (=> b!58038 (= lt!23171 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000))))

(declare-fun lt!23182 () Unit!1488)

(assert (=> b!58038 (= lt!23182 (addApplyDifferent!41 lt!23184 lt!23178 (minValue!1940 (_2!1030 lt!22784)) lt!23171))))

(assert (=> b!58038 (= (apply!65 (+!80 lt!23184 (tuple2!2039 lt!23178 (minValue!1940 (_2!1030 lt!22784)))) lt!23171) (apply!65 lt!23184 lt!23171))))

(declare-fun lt!23175 () Unit!1488)

(assert (=> b!58038 (= lt!23175 lt!23182)))

(declare-fun lt!23172 () ListLongMap!1373)

(assert (=> b!58038 (= lt!23172 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (_2!1030 lt!22784)) (_values!2005 (_2!1030 lt!22784)) (mask!5896 (_2!1030 lt!22784)) (extraKeys!1913 (_2!1030 lt!22784)) (zeroValue!1940 (_2!1030 lt!22784)) (minValue!1940 (_2!1030 lt!22784)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1030 lt!22784))))))

(declare-fun lt!23188 () (_ BitVec 64))

(assert (=> b!58038 (= lt!23188 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23179 () (_ BitVec 64))

(assert (=> b!58038 (= lt!23179 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000))))

(declare-fun lt!23183 () Unit!1488)

(assert (=> b!58038 (= lt!23183 (addApplyDifferent!41 lt!23172 lt!23188 (zeroValue!1940 (_2!1030 lt!22784)) lt!23179))))

(assert (=> b!58038 (= (apply!65 (+!80 lt!23172 (tuple2!2039 lt!23188 (zeroValue!1940 (_2!1030 lt!22784)))) lt!23179) (apply!65 lt!23172 lt!23179))))

(declare-fun lt!23189 () Unit!1488)

(assert (=> b!58038 (= lt!23189 lt!23183)))

(declare-fun lt!23181 () ListLongMap!1373)

(assert (=> b!58038 (= lt!23181 (getCurrentListMapNoExtraKeys!43 (_keys!3642 (_2!1030 lt!22784)) (_values!2005 (_2!1030 lt!22784)) (mask!5896 (_2!1030 lt!22784)) (extraKeys!1913 (_2!1030 lt!22784)) (zeroValue!1940 (_2!1030 lt!22784)) (minValue!1940 (_2!1030 lt!22784)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1030 lt!22784))))))

(declare-fun lt!23177 () (_ BitVec 64))

(assert (=> b!58038 (= lt!23177 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23173 () (_ BitVec 64))

(assert (=> b!58038 (= lt!23173 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000))))

(assert (=> b!58038 (= lt!23186 (addApplyDifferent!41 lt!23181 lt!23177 (minValue!1940 (_2!1030 lt!22784)) lt!23173))))

(assert (=> b!58038 (= (apply!65 (+!80 lt!23181 (tuple2!2039 lt!23177 (minValue!1940 (_2!1030 lt!22784)))) lt!23173) (apply!65 lt!23181 lt!23173))))

(declare-fun b!58039 () Bool)

(assert (=> b!58039 (= e!38210 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000)))))

(declare-fun b!58040 () Bool)

(declare-fun call!4225 () ListLongMap!1373)

(assert (=> b!58040 (= e!38211 call!4225)))

(declare-fun bm!4227 () Bool)

(assert (=> bm!4227 (= call!4225 call!4228)))

(declare-fun bm!4228 () Bool)

(assert (=> bm!4228 (= call!4229 call!4230)))

(declare-fun b!58041 () Bool)

(declare-fun e!38215 () Bool)

(assert (=> b!58041 (= e!38215 (= (apply!65 lt!23185 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 (_2!1030 lt!22784))))))

(declare-fun b!58042 () Bool)

(declare-fun e!38212 () ListLongMap!1373)

(assert (=> b!58042 (= e!38213 e!38212)))

(assert (=> b!58042 (= c!7263 (and (not (= (bvand (extraKeys!1913 (_2!1030 lt!22784)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 (_2!1030 lt!22784)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58043 () Bool)

(assert (=> b!58043 (= e!38212 call!4225)))

(declare-fun b!58044 () Bool)

(assert (=> b!58044 (= e!38219 e!38215)))

(declare-fun res!32392 () Bool)

(assert (=> b!58044 (= res!32392 call!4231)))

(assert (=> b!58044 (=> (not res!32392) (not e!38215))))

(declare-fun b!58045 () Bool)

(declare-fun Unit!1521 () Unit!1488)

(assert (=> b!58045 (= e!38216 Unit!1521)))

(declare-fun b!58046 () Bool)

(declare-fun c!7264 () Bool)

(assert (=> b!58046 (= c!7264 (and (not (= (bvand (extraKeys!1913 (_2!1030 lt!22784)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 (_2!1030 lt!22784)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58046 (= e!38212 e!38211)))

(assert (= (and d!10795 c!7266) b!58033))

(assert (= (and d!10795 (not c!7266)) b!58042))

(assert (= (and b!58042 c!7263) b!58043))

(assert (= (and b!58042 (not c!7263)) b!58046))

(assert (= (and b!58046 c!7264) b!58040))

(assert (= (and b!58046 (not c!7264)) b!58032))

(assert (= (or b!58040 b!58032) bm!4223))

(assert (= (or b!58043 bm!4223) bm!4228))

(assert (= (or b!58043 b!58040) bm!4227))

(assert (= (or b!58033 bm!4228) bm!4224))

(assert (= (or b!58033 bm!4227) bm!4222))

(assert (= (and d!10795 res!32393) b!58028))

(assert (= (and d!10795 c!7267) b!58038))

(assert (= (and d!10795 (not c!7267)) b!58045))

(assert (= (and d!10795 res!32386) b!58036))

(assert (= (and b!58036 res!32394) b!58039))

(assert (= (and b!58036 (not res!32390)) b!58037))

(assert (= (and b!58037 res!32388) b!58031))

(assert (= (and b!58036 res!32391) b!58027))

(assert (= (and b!58027 c!7265) b!58044))

(assert (= (and b!58027 (not c!7265)) b!58029))

(assert (= (and b!58044 res!32392) b!58041))

(assert (= (or b!58044 b!58029) bm!4225))

(assert (= (and b!58027 res!32389) b!58035))

(assert (= (and b!58035 c!7268) b!58034))

(assert (= (and b!58035 (not c!7268)) b!58026))

(assert (= (and b!58034 res!32387) b!58030))

(assert (= (or b!58034 b!58026) bm!4226))

(declare-fun b_lambda!2545 () Bool)

(assert (=> (not b_lambda!2545) (not b!58031)))

(declare-fun tb!1313 () Bool)

(declare-fun t!4787 () Bool)

(assert (=> (and b!57211 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 (_2!1030 lt!22784))) t!4787) tb!1313))

(declare-fun result!2365 () Bool)

(assert (=> tb!1313 (= result!2365 tp_is_empty!2391)))

(assert (=> b!58031 t!4787))

(declare-fun b_and!3501 () Bool)

(assert (= b_and!3497 (and (=> t!4787 result!2365) b_and!3501)))

(declare-fun t!4789 () Bool)

(declare-fun tb!1315 () Bool)

(assert (=> (and b!57210 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (_2!1030 lt!22784))) t!4789) tb!1315))

(declare-fun result!2367 () Bool)

(assert (= result!2367 result!2365))

(assert (=> b!58031 t!4789))

(declare-fun b_and!3503 () Bool)

(assert (= b_and!3499 (and (=> t!4789 result!2367) b_and!3503)))

(declare-fun m!49063 () Bool)

(assert (=> b!58031 m!49063))

(declare-fun m!49065 () Bool)

(assert (=> b!58031 m!49065))

(assert (=> b!58031 m!49063))

(declare-fun m!49067 () Bool)

(assert (=> b!58031 m!49067))

(declare-fun m!49069 () Bool)

(assert (=> b!58031 m!49069))

(assert (=> b!58031 m!49065))

(assert (=> b!58031 m!49069))

(declare-fun m!49071 () Bool)

(assert (=> b!58031 m!49071))

(declare-fun m!49073 () Bool)

(assert (=> bm!4225 m!49073))

(declare-fun m!49075 () Bool)

(assert (=> b!58038 m!49075))

(declare-fun m!49077 () Bool)

(assert (=> b!58038 m!49077))

(declare-fun m!49079 () Bool)

(assert (=> b!58038 m!49079))

(declare-fun m!49081 () Bool)

(assert (=> b!58038 m!49081))

(declare-fun m!49083 () Bool)

(assert (=> b!58038 m!49083))

(assert (=> b!58038 m!49075))

(declare-fun m!49085 () Bool)

(assert (=> b!58038 m!49085))

(declare-fun m!49087 () Bool)

(assert (=> b!58038 m!49087))

(declare-fun m!49089 () Bool)

(assert (=> b!58038 m!49089))

(declare-fun m!49091 () Bool)

(assert (=> b!58038 m!49091))

(assert (=> b!58038 m!49069))

(declare-fun m!49093 () Bool)

(assert (=> b!58038 m!49093))

(declare-fun m!49095 () Bool)

(assert (=> b!58038 m!49095))

(assert (=> b!58038 m!49081))

(declare-fun m!49097 () Bool)

(assert (=> b!58038 m!49097))

(declare-fun m!49099 () Bool)

(assert (=> b!58038 m!49099))

(assert (=> b!58038 m!49089))

(assert (=> b!58038 m!49083))

(declare-fun m!49101 () Bool)

(assert (=> b!58038 m!49101))

(declare-fun m!49103 () Bool)

(assert (=> b!58038 m!49103))

(declare-fun m!49105 () Bool)

(assert (=> b!58038 m!49105))

(assert (=> b!58039 m!49069))

(assert (=> b!58039 m!49069))

(declare-fun m!49107 () Bool)

(assert (=> b!58039 m!49107))

(assert (=> b!58037 m!49069))

(assert (=> b!58037 m!49069))

(declare-fun m!49109 () Bool)

(assert (=> b!58037 m!49109))

(declare-fun m!49111 () Bool)

(assert (=> bm!4222 m!49111))

(assert (=> bm!4224 m!49077))

(declare-fun m!49113 () Bool)

(assert (=> b!58041 m!49113))

(declare-fun m!49115 () Bool)

(assert (=> b!58030 m!49115))

(declare-fun m!49117 () Bool)

(assert (=> bm!4226 m!49117))

(declare-fun m!49119 () Bool)

(assert (=> d!10795 m!49119))

(assert (=> b!58028 m!49069))

(assert (=> b!58028 m!49069))

(assert (=> b!58028 m!49107))

(declare-fun m!49121 () Bool)

(assert (=> b!58033 m!49121))

(assert (=> d!10663 d!10795))

(declare-fun d!10797 () Bool)

(assert (=> d!10797 (= (size!2007 newMap!16) (bvadd (_size!355 newMap!16) (bvsdiv (bvadd (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!57810 d!10797))

(declare-fun d!10799 () Bool)

(assert (=> d!10799 (= (apply!65 lt!22905 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1076 (getValueByKey!122 (toList!702 lt!22905) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2499 () Bool)

(assert (= bs!2499 d!10799))

(assert (=> bs!2499 m!48345))

(assert (=> bs!2499 m!48989))

(assert (=> bs!2499 m!48989))

(declare-fun m!49123 () Bool)

(assert (=> bs!2499 m!49123))

(assert (=> b!57657 d!10799))

(declare-fun c!7269 () Bool)

(declare-fun d!10801 () Bool)

(assert (=> d!10801 (= c!7269 ((_ is ValueCellFull!852) (select (arr!1775 (ite c!7124 (_values!2005 newMap!16) lt!22772)) #b00000000000000000000000000000000)))))

(declare-fun e!38221 () V!2835)

(assert (=> d!10801 (= (get!1073 (select (arr!1775 (ite c!7124 (_values!2005 newMap!16) lt!22772)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38221)))

(declare-fun b!58047 () Bool)

(assert (=> b!58047 (= e!38221 (get!1074 (select (arr!1775 (ite c!7124 (_values!2005 newMap!16) lt!22772)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58048 () Bool)

(assert (=> b!58048 (= e!38221 (get!1075 (select (arr!1775 (ite c!7124 (_values!2005 newMap!16) lt!22772)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10801 c!7269) b!58047))

(assert (= (and d!10801 (not c!7269)) b!58048))

(assert (=> b!58047 m!48555))

(assert (=> b!58047 m!48339))

(declare-fun m!49125 () Bool)

(assert (=> b!58047 m!49125))

(assert (=> b!58048 m!48555))

(assert (=> b!58048 m!48339))

(declare-fun m!49127 () Bool)

(assert (=> b!58048 m!49127))

(assert (=> b!57657 d!10801))

(declare-fun d!10803 () Bool)

(assert (=> d!10803 (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!23193 () Unit!1488)

(assert (=> d!10803 (= lt!23193 (choose!298 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!38222 () Bool)

(assert (=> d!10803 e!38222))

(declare-fun res!32395 () Bool)

(assert (=> d!10803 (=> (not res!32395) (not e!38222))))

(assert (=> d!10803 (= res!32395 (isStrictlySorted!278 (toList!702 lt!22695)))))

(assert (=> d!10803 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!23193)))

(declare-fun b!58049 () Bool)

(assert (=> b!58049 (= e!38222 (containsKey!126 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!10803 res!32395) b!58049))

(assert (=> d!10803 m!48191))

(assert (=> d!10803 m!48737))

(assert (=> d!10803 m!48737))

(assert (=> d!10803 m!48739))

(assert (=> d!10803 m!48191))

(declare-fun m!49129 () Bool)

(assert (=> d!10803 m!49129))

(declare-fun m!49131 () Bool)

(assert (=> d!10803 m!49131))

(assert (=> b!58049 m!48191))

(assert (=> b!58049 m!48733))

(assert (=> b!57732 d!10803))

(declare-fun d!10805 () Bool)

(assert (=> d!10805 (= (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!295 (getValueByKey!122 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2500 () Bool)

(assert (= bs!2500 d!10805))

(assert (=> bs!2500 m!48737))

(declare-fun m!49133 () Bool)

(assert (=> bs!2500 m!49133))

(assert (=> b!57732 d!10805))

(declare-fun b!58050 () Bool)

(declare-fun e!38223 () Option!128)

(assert (=> b!58050 (= e!38223 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22695)))))))

(declare-fun d!10807 () Bool)

(declare-fun c!7270 () Bool)

(assert (=> d!10807 (= c!7270 (and ((_ is Cons!1445) (toList!702 lt!22695)) (= (_1!1029 (h!2025 (toList!702 lt!22695))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!10807 (= (getValueByKey!122 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!38223)))

(declare-fun b!58053 () Bool)

(declare-fun e!38224 () Option!128)

(assert (=> b!58053 (= e!38224 None!126)))

(declare-fun b!58051 () Bool)

(assert (=> b!58051 (= e!38223 e!38224)))

(declare-fun c!7271 () Bool)

(assert (=> b!58051 (= c!7271 (and ((_ is Cons!1445) (toList!702 lt!22695)) (not (= (_1!1029 (h!2025 (toList!702 lt!22695))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!58052 () Bool)

(assert (=> b!58052 (= e!38224 (getValueByKey!122 (t!4775 (toList!702 lt!22695)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!10807 c!7270) b!58050))

(assert (= (and d!10807 (not c!7270)) b!58051))

(assert (= (and b!58051 c!7271) b!58052))

(assert (= (and b!58051 (not c!7271)) b!58053))

(assert (=> b!58052 m!48191))

(declare-fun m!49135 () Bool)

(assert (=> b!58052 m!49135))

(assert (=> b!57732 d!10807))

(declare-fun d!10809 () Bool)

(assert (=> d!10809 (= (apply!65 lt!22944 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!702 lt!22944) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2501 () Bool)

(assert (= bs!2501 d!10809))

(declare-fun m!49137 () Bool)

(assert (=> bs!2501 m!49137))

(assert (=> bs!2501 m!49137))

(declare-fun m!49139 () Bool)

(assert (=> bs!2501 m!49139))

(assert (=> b!57701 d!10809))

(declare-fun d!10811 () Bool)

(declare-fun res!32396 () Bool)

(declare-fun e!38225 () Bool)

(assert (=> d!10811 (=> (not res!32396) (not e!38225))))

(assert (=> d!10811 (= res!32396 (simpleValid!40 (_2!1030 lt!23038)))))

(assert (=> d!10811 (= (valid!246 (_2!1030 lt!23038)) e!38225)))

(declare-fun b!58054 () Bool)

(declare-fun res!32397 () Bool)

(assert (=> b!58054 (=> (not res!32397) (not e!38225))))

(assert (=> b!58054 (= res!32397 (= (arrayCountValidKeys!0 (_keys!3642 (_2!1030 lt!23038)) #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!23038)))) (_size!355 (_2!1030 lt!23038))))))

(declare-fun b!58055 () Bool)

(declare-fun res!32398 () Bool)

(assert (=> b!58055 (=> (not res!32398) (not e!38225))))

(assert (=> b!58055 (= res!32398 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 (_2!1030 lt!23038)) (mask!5896 (_2!1030 lt!23038))))))

(declare-fun b!58056 () Bool)

(assert (=> b!58056 (= e!38225 (arrayNoDuplicates!0 (_keys!3642 (_2!1030 lt!23038)) #b00000000000000000000000000000000 Nil!1447))))

(assert (= (and d!10811 res!32396) b!58054))

(assert (= (and b!58054 res!32397) b!58055))

(assert (= (and b!58055 res!32398) b!58056))

(declare-fun m!49141 () Bool)

(assert (=> d!10811 m!49141))

(declare-fun m!49143 () Bool)

(assert (=> b!58054 m!49143))

(declare-fun m!49145 () Bool)

(assert (=> b!58055 m!49145))

(declare-fun m!49147 () Bool)

(assert (=> b!58056 m!49147))

(assert (=> b!57775 d!10811))

(declare-fun lt!23196 () Bool)

(declare-fun d!10813 () Bool)

(declare-fun content!61 (List!1449) (InoxSet tuple2!2038))

(assert (=> d!10813 (= lt!23196 (select (content!61 (toList!702 lt!22971)) (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!38230 () Bool)

(assert (=> d!10813 (= lt!23196 e!38230)))

(declare-fun res!32403 () Bool)

(assert (=> d!10813 (=> (not res!32403) (not e!38230))))

(assert (=> d!10813 (= res!32403 ((_ is Cons!1445) (toList!702 lt!22971)))))

(assert (=> d!10813 (= (contains!690 (toList!702 lt!22971) (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23196)))

(declare-fun b!58061 () Bool)

(declare-fun e!38231 () Bool)

(assert (=> b!58061 (= e!38230 e!38231)))

(declare-fun res!32404 () Bool)

(assert (=> b!58061 (=> res!32404 e!38231)))

(assert (=> b!58061 (= res!32404 (= (h!2025 (toList!702 lt!22971)) (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58062 () Bool)

(assert (=> b!58062 (= e!38231 (contains!690 (t!4775 (toList!702 lt!22971)) (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!10813 res!32403) b!58061))

(assert (= (and b!58061 (not res!32404)) b!58062))

(declare-fun m!49149 () Bool)

(assert (=> d!10813 m!49149))

(declare-fun m!49151 () Bool)

(assert (=> d!10813 m!49151))

(declare-fun m!49153 () Bool)

(assert (=> b!58062 m!49153))

(assert (=> b!57736 d!10813))

(declare-fun d!10815 () Bool)

(declare-fun lt!23197 () Bool)

(assert (=> d!10815 (= lt!23197 (select (content!61 (toList!702 lt!22844)) (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun e!38232 () Bool)

(assert (=> d!10815 (= lt!23197 e!38232)))

(declare-fun res!32405 () Bool)

(assert (=> d!10815 (=> (not res!32405) (not e!38232))))

(assert (=> d!10815 (= res!32405 ((_ is Cons!1445) (toList!702 lt!22844)))))

(assert (=> d!10815 (= (contains!690 (toList!702 lt!22844) (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!23197)))

(declare-fun b!58063 () Bool)

(declare-fun e!38233 () Bool)

(assert (=> b!58063 (= e!38232 e!38233)))

(declare-fun res!32406 () Bool)

(assert (=> b!58063 (=> res!32406 e!38233)))

(assert (=> b!58063 (= res!32406 (= (h!2025 (toList!702 lt!22844)) (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!58064 () Bool)

(assert (=> b!58064 (= e!38233 (contains!690 (t!4775 (toList!702 lt!22844)) (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(assert (= (and d!10815 res!32405) b!58063))

(assert (= (and b!58063 (not res!32406)) b!58064))

(declare-fun m!49155 () Bool)

(assert (=> d!10815 m!49155))

(declare-fun m!49157 () Bool)

(assert (=> d!10815 m!49157))

(declare-fun m!49159 () Bool)

(assert (=> b!58064 m!49159))

(assert (=> b!57599 d!10815))

(declare-fun lt!23198 () Bool)

(declare-fun d!10817 () Bool)

(assert (=> d!10817 (= lt!23198 (select (content!61 (toList!702 lt!23088)) (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun e!38234 () Bool)

(assert (=> d!10817 (= lt!23198 e!38234)))

(declare-fun res!32407 () Bool)

(assert (=> d!10817 (=> (not res!32407) (not e!38234))))

(assert (=> d!10817 (= res!32407 ((_ is Cons!1445) (toList!702 lt!23088)))))

(assert (=> d!10817 (= (contains!690 (toList!702 lt!23088) (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23198)))

(declare-fun b!58065 () Bool)

(declare-fun e!38235 () Bool)

(assert (=> b!58065 (= e!38234 e!38235)))

(declare-fun res!32408 () Bool)

(assert (=> b!58065 (=> res!32408 e!38235)))

(assert (=> b!58065 (= res!32408 (= (h!2025 (toList!702 lt!23088)) (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!58066 () Bool)

(assert (=> b!58066 (= e!38235 (contains!690 (t!4775 (toList!702 lt!23088)) (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!10817 res!32407) b!58065))

(assert (= (and b!58065 (not res!32408)) b!58066))

(declare-fun m!49161 () Bool)

(assert (=> d!10817 m!49161))

(declare-fun m!49163 () Bool)

(assert (=> d!10817 m!49163))

(declare-fun m!49165 () Bool)

(assert (=> b!58066 m!49165))

(assert (=> b!57856 d!10817))

(declare-fun d!10819 () Bool)

(declare-fun res!32409 () Bool)

(declare-fun e!38236 () Bool)

(assert (=> d!10819 (=> res!32409 e!38236)))

(assert (=> d!10819 (= res!32409 (= (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10819 (= (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!38236)))

(declare-fun b!58067 () Bool)

(declare-fun e!38237 () Bool)

(assert (=> b!58067 (= e!38236 e!38237)))

(declare-fun res!32410 () Bool)

(assert (=> b!58067 (=> (not res!32410) (not e!38237))))

(assert (=> b!58067 (= res!32410 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!58068 () Bool)

(assert (=> b!58068 (= e!38237 (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!10819 (not res!32409)) b!58067))

(assert (= (and b!58067 res!32410) b!58068))

(declare-fun m!49167 () Bool)

(assert (=> d!10819 m!49167))

(assert (=> b!58068 m!48105))

(declare-fun m!49169 () Bool)

(assert (=> b!58068 m!49169))

(assert (=> b!57795 d!10819))

(declare-fun d!10821 () Bool)

(assert (=> d!10821 (= (isDefined!76 (getValueByKey!122 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))) (not (isEmpty!295 (getValueByKey!122 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun bs!2502 () Bool)

(assert (= bs!2502 d!10821))

(assert (=> bs!2502 m!48821))

(declare-fun m!49171 () Bool)

(assert (=> bs!2502 m!49171))

(assert (=> b!57793 d!10821))

(declare-fun b!58069 () Bool)

(declare-fun e!38238 () Option!128)

(assert (=> b!58069 (= e!38238 (Some!127 (_2!1029 (h!2025 (toList!702 call!4161)))))))

(declare-fun d!10823 () Bool)

(declare-fun c!7272 () Bool)

(assert (=> d!10823 (= c!7272 (and ((_ is Cons!1445) (toList!702 call!4161)) (= (_1!1029 (h!2025 (toList!702 call!4161))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10823 (= (getValueByKey!122 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) e!38238)))

(declare-fun b!58072 () Bool)

(declare-fun e!38239 () Option!128)

(assert (=> b!58072 (= e!38239 None!126)))

(declare-fun b!58070 () Bool)

(assert (=> b!58070 (= e!38238 e!38239)))

(declare-fun c!7273 () Bool)

(assert (=> b!58070 (= c!7273 (and ((_ is Cons!1445) (toList!702 call!4161)) (not (= (_1!1029 (h!2025 (toList!702 call!4161))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun b!58071 () Bool)

(assert (=> b!58071 (= e!38239 (getValueByKey!122 (t!4775 (toList!702 call!4161)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10823 c!7272) b!58069))

(assert (= (and d!10823 (not c!7272)) b!58070))

(assert (= (and b!58070 c!7273) b!58071))

(assert (= (and b!58070 (not c!7273)) b!58072))

(assert (=> b!58071 m!48105))

(declare-fun m!49173 () Bool)

(assert (=> b!58071 m!49173))

(assert (=> b!57793 d!10823))

(declare-fun b!58073 () Bool)

(declare-fun e!38241 () Bool)

(declare-fun call!4232 () Bool)

(assert (=> b!58073 (= e!38241 call!4232)))

(declare-fun b!58074 () Bool)

(declare-fun e!38243 () Bool)

(declare-fun e!38242 () Bool)

(assert (=> b!58074 (= e!38243 e!38242)))

(declare-fun res!32412 () Bool)

(assert (=> b!58074 (=> (not res!32412) (not e!38242))))

(declare-fun e!38240 () Bool)

(assert (=> b!58074 (= res!32412 (not e!38240))))

(declare-fun res!32411 () Bool)

(assert (=> b!58074 (=> (not res!32411) (not e!38240))))

(assert (=> b!58074 (= res!32411 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun d!10825 () Bool)

(declare-fun res!32413 () Bool)

(assert (=> d!10825 (=> res!32413 e!38243)))

(assert (=> d!10825 (= res!32413 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> d!10825 (= (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7203 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447))) e!38243)))

(declare-fun b!58075 () Bool)

(assert (=> b!58075 (= e!38241 call!4232)))

(declare-fun b!58076 () Bool)

(assert (=> b!58076 (= e!38242 e!38241)))

(declare-fun c!7274 () Bool)

(assert (=> b!58076 (= c!7274 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!58077 () Bool)

(assert (=> b!58077 (= e!38240 (contains!689 (ite c!7203 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun bm!4229 () Bool)

(assert (=> bm!4229 (= call!4232 (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7274 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!7203 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447))) (ite c!7203 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)))))))

(assert (= (and d!10825 (not res!32413)) b!58074))

(assert (= (and b!58074 res!32411) b!58077))

(assert (= (and b!58074 res!32412) b!58076))

(assert (= (and b!58076 c!7274) b!58075))

(assert (= (and b!58076 (not c!7274)) b!58073))

(assert (= (or b!58075 b!58073) bm!4229))

(declare-fun m!49175 () Bool)

(assert (=> b!58074 m!49175))

(assert (=> b!58074 m!49175))

(declare-fun m!49177 () Bool)

(assert (=> b!58074 m!49177))

(assert (=> b!58076 m!49175))

(assert (=> b!58076 m!49175))

(assert (=> b!58076 m!49177))

(assert (=> b!58077 m!49175))

(assert (=> b!58077 m!49175))

(declare-fun m!49179 () Bool)

(assert (=> b!58077 m!49179))

(assert (=> bm!4229 m!49175))

(declare-fun m!49181 () Bool)

(assert (=> bm!4229 m!49181))

(assert (=> bm!4202 d!10825))

(declare-fun d!10827 () Bool)

(declare-fun e!38245 () Bool)

(assert (=> d!10827 e!38245))

(declare-fun res!32414 () Bool)

(assert (=> d!10827 (=> res!32414 e!38245)))

(declare-fun lt!23199 () Bool)

(assert (=> d!10827 (= res!32414 (not lt!23199))))

(declare-fun lt!23200 () Bool)

(assert (=> d!10827 (= lt!23199 lt!23200)))

(declare-fun lt!23202 () Unit!1488)

(declare-fun e!38244 () Unit!1488)

(assert (=> d!10827 (= lt!23202 e!38244)))

(declare-fun c!7275 () Bool)

(assert (=> d!10827 (= c!7275 lt!23200)))

(assert (=> d!10827 (= lt!23200 (containsKey!126 (toList!702 lt!22944) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10827 (= (contains!688 lt!22944 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23199)))

(declare-fun b!58078 () Bool)

(declare-fun lt!23201 () Unit!1488)

(assert (=> b!58078 (= e!38244 lt!23201)))

(assert (=> b!58078 (= lt!23201 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22944) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58078 (isDefined!76 (getValueByKey!122 (toList!702 lt!22944) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58079 () Bool)

(declare-fun Unit!1522 () Unit!1488)

(assert (=> b!58079 (= e!38244 Unit!1522)))

(declare-fun b!58080 () Bool)

(assert (=> b!58080 (= e!38245 (isDefined!76 (getValueByKey!122 (toList!702 lt!22944) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10827 c!7275) b!58078))

(assert (= (and d!10827 (not c!7275)) b!58079))

(assert (= (and d!10827 (not res!32414)) b!58080))

(declare-fun m!49183 () Bool)

(assert (=> d!10827 m!49183))

(declare-fun m!49185 () Bool)

(assert (=> b!58078 m!49185))

(declare-fun m!49187 () Bool)

(assert (=> b!58078 m!49187))

(assert (=> b!58078 m!49187))

(declare-fun m!49189 () Bool)

(assert (=> b!58078 m!49189))

(assert (=> b!58080 m!49187))

(assert (=> b!58080 m!49187))

(assert (=> b!58080 m!49189))

(assert (=> bm!4185 d!10827))

(assert (=> d!10601 d!10735))

(declare-fun d!10829 () Bool)

(assert (=> d!10829 (= (apply!65 lt!22884 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1076 (getValueByKey!122 (toList!702 lt!22884) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2503 () Bool)

(assert (= bs!2503 d!10829))

(assert (=> bs!2503 m!48191))

(assert (=> bs!2503 m!48997))

(assert (=> bs!2503 m!48997))

(declare-fun m!49191 () Bool)

(assert (=> bs!2503 m!49191))

(assert (=> b!57641 d!10829))

(assert (=> b!57641 d!10727))

(declare-fun d!10831 () Bool)

(declare-fun e!38247 () Bool)

(assert (=> d!10831 e!38247))

(declare-fun res!32415 () Bool)

(assert (=> d!10831 (=> res!32415 e!38247)))

(declare-fun lt!23203 () Bool)

(assert (=> d!10831 (= res!32415 (not lt!23203))))

(declare-fun lt!23204 () Bool)

(assert (=> d!10831 (= lt!23203 lt!23204)))

(declare-fun lt!23206 () Unit!1488)

(declare-fun e!38246 () Unit!1488)

(assert (=> d!10831 (= lt!23206 e!38246)))

(declare-fun c!7276 () Bool)

(assert (=> d!10831 (= c!7276 lt!23204)))

(assert (=> d!10831 (= lt!23204 (containsKey!126 (toList!702 lt!22852) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10831 (= (contains!688 lt!22852 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23203)))

(declare-fun b!58081 () Bool)

(declare-fun lt!23205 () Unit!1488)

(assert (=> b!58081 (= e!38246 lt!23205)))

(assert (=> b!58081 (= lt!23205 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22852) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> b!58081 (isDefined!76 (getValueByKey!122 (toList!702 lt!22852) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!58082 () Bool)

(declare-fun Unit!1523 () Unit!1488)

(assert (=> b!58082 (= e!38246 Unit!1523)))

(declare-fun b!58083 () Bool)

(assert (=> b!58083 (= e!38247 (isDefined!76 (getValueByKey!122 (toList!702 lt!22852) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!10831 c!7276) b!58081))

(assert (= (and d!10831 (not c!7276)) b!58082))

(assert (= (and d!10831 (not res!32415)) b!58083))

(declare-fun m!49193 () Bool)

(assert (=> d!10831 m!49193))

(declare-fun m!49195 () Bool)

(assert (=> b!58081 m!49195))

(assert (=> b!58081 m!48467))

(assert (=> b!58081 m!48467))

(declare-fun m!49197 () Bool)

(assert (=> b!58081 m!49197))

(assert (=> b!58083 m!48467))

(assert (=> b!58083 m!48467))

(assert (=> b!58083 m!49197))

(assert (=> d!10621 d!10831))

(declare-fun b!58084 () Bool)

(declare-fun e!38248 () Option!128)

(assert (=> b!58084 (= e!38248 (Some!127 (_2!1029 (h!2025 lt!22853))))))

(declare-fun d!10833 () Bool)

(declare-fun c!7277 () Bool)

(assert (=> d!10833 (= c!7277 (and ((_ is Cons!1445) lt!22853) (= (_1!1029 (h!2025 lt!22853)) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10833 (= (getValueByKey!122 lt!22853 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) e!38248)))

(declare-fun b!58087 () Bool)

(declare-fun e!38249 () Option!128)

(assert (=> b!58087 (= e!38249 None!126)))

(declare-fun b!58085 () Bool)

(assert (=> b!58085 (= e!38248 e!38249)))

(declare-fun c!7278 () Bool)

(assert (=> b!58085 (= c!7278 (and ((_ is Cons!1445) lt!22853) (not (= (_1!1029 (h!2025 lt!22853)) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!58086 () Bool)

(assert (=> b!58086 (= e!38249 (getValueByKey!122 (t!4775 lt!22853) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!10833 c!7277) b!58084))

(assert (= (and d!10833 (not c!7277)) b!58085))

(assert (= (and b!58085 c!7278) b!58086))

(assert (= (and b!58085 (not c!7278)) b!58087))

(declare-fun m!49199 () Bool)

(assert (=> b!58086 m!49199))

(assert (=> d!10621 d!10833))

(declare-fun d!10835 () Bool)

(assert (=> d!10835 (= (getValueByKey!122 lt!22853 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun lt!23207 () Unit!1488)

(assert (=> d!10835 (= lt!23207 (choose!305 lt!22853 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun e!38250 () Bool)

(assert (=> d!10835 e!38250))

(declare-fun res!32416 () Bool)

(assert (=> d!10835 (=> (not res!32416) (not e!38250))))

(assert (=> d!10835 (= res!32416 (isStrictlySorted!278 lt!22853))))

(assert (=> d!10835 (= (lemmaContainsTupThenGetReturnValue!41 lt!22853 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23207)))

(declare-fun b!58088 () Bool)

(declare-fun res!32417 () Bool)

(assert (=> b!58088 (=> (not res!32417) (not e!38250))))

(assert (=> b!58088 (= res!32417 (containsKey!126 lt!22853 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!58089 () Bool)

(assert (=> b!58089 (= e!38250 (contains!690 lt!22853 (tuple2!2039 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!10835 res!32416) b!58088))

(assert (= (and b!58088 res!32417) b!58089))

(assert (=> d!10835 m!48461))

(declare-fun m!49201 () Bool)

(assert (=> d!10835 m!49201))

(declare-fun m!49203 () Bool)

(assert (=> d!10835 m!49203))

(declare-fun m!49205 () Bool)

(assert (=> b!58088 m!49205))

(declare-fun m!49207 () Bool)

(assert (=> b!58089 m!49207))

(assert (=> d!10621 d!10835))

(declare-fun b!58090 () Bool)

(declare-fun res!32418 () Bool)

(declare-fun e!38252 () Bool)

(assert (=> b!58090 (=> (not res!32418) (not e!38252))))

(declare-fun lt!23208 () List!1449)

(assert (=> b!58090 (= res!32418 (containsKey!126 lt!23208 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun d!10837 () Bool)

(assert (=> d!10837 e!38252))

(declare-fun res!32419 () Bool)

(assert (=> d!10837 (=> (not res!32419) (not e!38252))))

(assert (=> d!10837 (= res!32419 (isStrictlySorted!278 lt!23208))))

(declare-fun e!38255 () List!1449)

(assert (=> d!10837 (= lt!23208 e!38255)))

(declare-fun c!7279 () Bool)

(assert (=> d!10837 (= c!7279 (and ((_ is Cons!1445) (toList!702 lt!22691)) (bvslt (_1!1029 (h!2025 (toList!702 lt!22691))) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10837 (isStrictlySorted!278 (toList!702 lt!22691))))

(assert (=> d!10837 (= (insertStrictlySorted!43 (toList!702 lt!22691) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23208)))

(declare-fun b!58091 () Bool)

(declare-fun e!38251 () List!1449)

(declare-fun call!4235 () List!1449)

(assert (=> b!58091 (= e!38251 call!4235)))

(declare-fun c!7282 () Bool)

(declare-fun e!38254 () List!1449)

(declare-fun b!58092 () Bool)

(declare-fun c!7281 () Bool)

(assert (=> b!58092 (= e!38254 (ite c!7281 (t!4775 (toList!702 lt!22691)) (ite c!7282 (Cons!1445 (h!2025 (toList!702 lt!22691)) (t!4775 (toList!702 lt!22691))) Nil!1446)))))

(declare-fun b!58093 () Bool)

(assert (=> b!58093 (= e!38252 (contains!690 lt!23208 (tuple2!2039 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!58094 () Bool)

(assert (=> b!58094 (= e!38254 (insertStrictlySorted!43 (t!4775 (toList!702 lt!22691)) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun bm!4230 () Bool)

(declare-fun call!4234 () List!1449)

(assert (=> bm!4230 (= call!4234 ($colon$colon!58 e!38254 (ite c!7279 (h!2025 (toList!702 lt!22691)) (tuple2!2039 (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun c!7280 () Bool)

(assert (=> bm!4230 (= c!7280 c!7279)))

(declare-fun b!58095 () Bool)

(declare-fun e!38253 () List!1449)

(declare-fun call!4233 () List!1449)

(assert (=> b!58095 (= e!38253 call!4233)))

(declare-fun bm!4231 () Bool)

(assert (=> bm!4231 (= call!4233 call!4234)))

(declare-fun b!58096 () Bool)

(assert (=> b!58096 (= c!7282 (and ((_ is Cons!1445) (toList!702 lt!22691)) (bvsgt (_1!1029 (h!2025 (toList!702 lt!22691))) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> b!58096 (= e!38253 e!38251)))

(declare-fun b!58097 () Bool)

(assert (=> b!58097 (= e!38255 call!4234)))

(declare-fun b!58098 () Bool)

(assert (=> b!58098 (= e!38251 call!4235)))

(declare-fun b!58099 () Bool)

(assert (=> b!58099 (= e!38255 e!38253)))

(assert (=> b!58099 (= c!7281 (and ((_ is Cons!1445) (toList!702 lt!22691)) (= (_1!1029 (h!2025 (toList!702 lt!22691))) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun bm!4232 () Bool)

(assert (=> bm!4232 (= call!4235 call!4233)))

(assert (= (and d!10837 c!7279) b!58097))

(assert (= (and d!10837 (not c!7279)) b!58099))

(assert (= (and b!58099 c!7281) b!58095))

(assert (= (and b!58099 (not c!7281)) b!58096))

(assert (= (and b!58096 c!7282) b!58091))

(assert (= (and b!58096 (not c!7282)) b!58098))

(assert (= (or b!58091 b!58098) bm!4232))

(assert (= (or b!58095 bm!4232) bm!4231))

(assert (= (or b!58097 bm!4231) bm!4230))

(assert (= (and bm!4230 c!7280) b!58094))

(assert (= (and bm!4230 (not c!7280)) b!58092))

(assert (= (and d!10837 res!32419) b!58090))

(assert (= (and b!58090 res!32418) b!58093))

(declare-fun m!49209 () Bool)

(assert (=> b!58090 m!49209))

(declare-fun m!49211 () Bool)

(assert (=> d!10837 m!49211))

(declare-fun m!49213 () Bool)

(assert (=> d!10837 m!49213))

(declare-fun m!49215 () Bool)

(assert (=> b!58093 m!49215))

(declare-fun m!49217 () Bool)

(assert (=> b!58094 m!49217))

(declare-fun m!49219 () Bool)

(assert (=> bm!4230 m!49219))

(assert (=> d!10621 d!10837))

(declare-fun b!58100 () Bool)

(declare-fun e!38256 () Option!128)

(assert (=> b!58100 (= e!38256 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22924)))))))

(declare-fun d!10839 () Bool)

(declare-fun c!7283 () Bool)

(assert (=> d!10839 (= c!7283 (and ((_ is Cons!1445) (toList!702 lt!22924)) (= (_1!1029 (h!2025 (toList!702 lt!22924))) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!10839 (= (getValueByKey!122 (toList!702 lt!22924) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!38256)))

(declare-fun b!58103 () Bool)

(declare-fun e!38257 () Option!128)

(assert (=> b!58103 (= e!38257 None!126)))

(declare-fun b!58101 () Bool)

(assert (=> b!58101 (= e!38256 e!38257)))

(declare-fun c!7284 () Bool)

(assert (=> b!58101 (= c!7284 (and ((_ is Cons!1445) (toList!702 lt!22924)) (not (= (_1!1029 (h!2025 (toList!702 lt!22924))) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!58102 () Bool)

(assert (=> b!58102 (= e!38257 (getValueByKey!122 (t!4775 (toList!702 lt!22924)) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!10839 c!7283) b!58100))

(assert (= (and d!10839 (not c!7283)) b!58101))

(assert (= (and b!58101 c!7284) b!58102))

(assert (= (and b!58101 (not c!7284)) b!58103))

(declare-fun m!49221 () Bool)

(assert (=> b!58102 m!49221))

(assert (=> b!57690 d!10839))

(declare-fun b!58104 () Bool)

(declare-fun e!38258 () (_ BitVec 32))

(declare-fun call!4236 () (_ BitVec 32))

(assert (=> b!58104 (= e!38258 (bvadd #b00000000000000000000000000000001 call!4236))))

(declare-fun b!58105 () Bool)

(assert (=> b!58105 (= e!38258 call!4236)))

(declare-fun bm!4233 () Bool)

(assert (=> bm!4233 (= call!4236 (arrayCountValidKeys!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!58106 () Bool)

(declare-fun e!38259 () (_ BitVec 32))

(assert (=> b!58106 (= e!38259 #b00000000000000000000000000000000)))

(declare-fun b!58107 () Bool)

(assert (=> b!58107 (= e!38259 e!38258)))

(declare-fun c!7285 () Bool)

(assert (=> b!58107 (= c!7285 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!10841 () Bool)

(declare-fun lt!23209 () (_ BitVec 32))

(assert (=> d!10841 (and (bvsge lt!23209 #b00000000000000000000000000000000) (bvsle lt!23209 (bvsub (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!10841 (= lt!23209 e!38259)))

(declare-fun c!7286 () Bool)

(assert (=> d!10841 (= c!7286 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> d!10841 (and (bvsle #b00000000000000000000000000000000 (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> d!10841 (= (arrayCountValidKeys!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000000 (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))) lt!23209)))

(assert (= (and d!10841 c!7286) b!58106))

(assert (= (and d!10841 (not c!7286)) b!58107))

(assert (= (and b!58107 c!7285) b!58104))

(assert (= (and b!58107 (not c!7285)) b!58105))

(assert (= (or b!58104 b!58105) bm!4233))

(declare-fun m!49223 () Bool)

(assert (=> bm!4233 m!49223))

(declare-fun m!49225 () Bool)

(assert (=> b!58107 m!49225))

(assert (=> b!58107 m!49225))

(declare-fun m!49227 () Bool)

(assert (=> b!58107 m!49227))

(assert (=> b!57567 d!10841))

(declare-fun d!10843 () Bool)

(declare-fun res!32420 () Bool)

(declare-fun e!38260 () Bool)

(assert (=> d!10843 (=> res!32420 e!38260)))

(assert (=> d!10843 (= res!32420 (= (select (arr!1774 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10843 (= (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!38260)))

(declare-fun b!58108 () Bool)

(declare-fun e!38261 () Bool)

(assert (=> b!58108 (= e!38260 e!38261)))

(declare-fun res!32421 () Bool)

(assert (=> b!58108 (=> (not res!32421) (not e!38261))))

(assert (=> b!58108 (= res!32421 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58109 () Bool)

(assert (=> b!58109 (= e!38261 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!10843 (not res!32420)) b!58108))

(assert (= (and b!58108 res!32421) b!58109))

(declare-fun m!49229 () Bool)

(assert (=> d!10843 m!49229))

(assert (=> b!58109 m!48105))

(declare-fun m!49231 () Bool)

(assert (=> b!58109 m!49231))

(assert (=> b!57677 d!10843))

(assert (=> b!57645 d!10653))

(assert (=> b!57689 d!10745))

(declare-fun d!10845 () Bool)

(declare-fun lt!23210 () Bool)

(assert (=> d!10845 (= lt!23210 (select (content!60 Nil!1447) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!38262 () Bool)

(assert (=> d!10845 (= lt!23210 e!38262)))

(declare-fun res!32422 () Bool)

(assert (=> d!10845 (=> (not res!32422) (not e!38262))))

(assert (=> d!10845 (= res!32422 ((_ is Cons!1446) Nil!1447))))

(assert (=> d!10845 (= (contains!689 Nil!1447 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) lt!23210)))

(declare-fun b!58110 () Bool)

(declare-fun e!38263 () Bool)

(assert (=> b!58110 (= e!38262 e!38263)))

(declare-fun res!32423 () Bool)

(assert (=> b!58110 (=> res!32423 e!38263)))

(assert (=> b!58110 (= res!32423 (= (h!2026 Nil!1447) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58111 () Bool)

(assert (=> b!58111 (= e!38263 (contains!689 (t!4776 Nil!1447) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!10845 res!32422) b!58110))

(assert (= (and b!58110 (not res!32423)) b!58111))

(assert (=> d!10845 m!48419))

(assert (=> d!10845 m!48345))

(declare-fun m!49233 () Bool)

(assert (=> d!10845 m!49233))

(assert (=> b!58111 m!48345))

(declare-fun m!49235 () Bool)

(assert (=> b!58111 m!49235))

(assert (=> b!57722 d!10845))

(declare-fun b!58112 () Bool)

(declare-fun e!38264 () (_ BitVec 32))

(declare-fun call!4237 () (_ BitVec 32))

(assert (=> b!58112 (= e!38264 (bvadd #b00000000000000000000000000000001 call!4237))))

(declare-fun b!58113 () Bool)

(assert (=> b!58113 (= e!38264 call!4237)))

(declare-fun bm!4234 () Bool)

(assert (=> bm!4234 (= call!4237 (arrayCountValidKeys!0 (_keys!3642 (_2!1030 lt!22784)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 (_keys!3642 (_2!1030 lt!22784)))))))

(declare-fun b!58114 () Bool)

(declare-fun e!38265 () (_ BitVec 32))

(assert (=> b!58114 (= e!38265 #b00000000000000000000000000000000)))

(declare-fun b!58115 () Bool)

(assert (=> b!58115 (= e!38265 e!38264)))

(declare-fun c!7287 () Bool)

(assert (=> b!58115 (= c!7287 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000)))))

(declare-fun d!10847 () Bool)

(declare-fun lt!23211 () (_ BitVec 32))

(assert (=> d!10847 (and (bvsge lt!23211 #b00000000000000000000000000000000) (bvsle lt!23211 (bvsub (size!2003 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000)))))

(assert (=> d!10847 (= lt!23211 e!38265)))

(declare-fun c!7288 () Bool)

(assert (=> d!10847 (= c!7288 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))))))

(assert (=> d!10847 (and (bvsle #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2003 (_keys!3642 (_2!1030 lt!22784))) (size!2003 (_keys!3642 (_2!1030 lt!22784)))))))

(assert (=> d!10847 (= (arrayCountValidKeys!0 (_keys!3642 (_2!1030 lt!22784)) #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))) lt!23211)))

(assert (= (and d!10847 c!7288) b!58114))

(assert (= (and d!10847 (not c!7288)) b!58115))

(assert (= (and b!58115 c!7287) b!58112))

(assert (= (and b!58115 (not c!7287)) b!58113))

(assert (= (or b!58112 b!58113) bm!4234))

(declare-fun m!49237 () Bool)

(assert (=> bm!4234 m!49237))

(assert (=> b!58115 m!49069))

(assert (=> b!58115 m!49069))

(assert (=> b!58115 m!49107))

(assert (=> b!57692 d!10847))

(declare-fun d!10849 () Bool)

(declare-fun lt!23212 () Bool)

(assert (=> d!10849 (= lt!23212 (select (content!61 (toList!702 lt!22928)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun e!38266 () Bool)

(assert (=> d!10849 (= lt!23212 e!38266)))

(declare-fun res!32424 () Bool)

(assert (=> d!10849 (=> (not res!32424) (not e!38266))))

(assert (=> d!10849 (= res!32424 ((_ is Cons!1445) (toList!702 lt!22928)))))

(assert (=> d!10849 (= (contains!690 (toList!702 lt!22928) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!23212)))

(declare-fun b!58116 () Bool)

(declare-fun e!38267 () Bool)

(assert (=> b!58116 (= e!38266 e!38267)))

(declare-fun res!32425 () Bool)

(assert (=> b!58116 (=> res!32425 e!38267)))

(assert (=> b!58116 (= res!32425 (= (h!2025 (toList!702 lt!22928)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!58117 () Bool)

(assert (=> b!58117 (= e!38267 (contains!690 (t!4775 (toList!702 lt!22928)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(assert (= (and d!10849 res!32424) b!58116))

(assert (= (and b!58116 (not res!32425)) b!58117))

(declare-fun m!49239 () Bool)

(assert (=> d!10849 m!49239))

(declare-fun m!49241 () Bool)

(assert (=> d!10849 m!49241))

(declare-fun m!49243 () Bool)

(assert (=> b!58117 m!49243))

(assert (=> b!57696 d!10849))

(declare-fun d!10851 () Bool)

(declare-fun e!38269 () Bool)

(assert (=> d!10851 e!38269))

(declare-fun res!32426 () Bool)

(assert (=> d!10851 (=> res!32426 e!38269)))

(declare-fun lt!23213 () Bool)

(assert (=> d!10851 (= res!32426 (not lt!23213))))

(declare-fun lt!23214 () Bool)

(assert (=> d!10851 (= lt!23213 lt!23214)))

(declare-fun lt!23216 () Unit!1488)

(declare-fun e!38268 () Unit!1488)

(assert (=> d!10851 (= lt!23216 e!38268)))

(declare-fun c!7289 () Bool)

(assert (=> d!10851 (= c!7289 lt!23214)))

(assert (=> d!10851 (= lt!23214 (containsKey!126 (toList!702 lt!22905) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10851 (= (contains!688 lt!22905 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23213)))

(declare-fun b!58118 () Bool)

(declare-fun lt!23215 () Unit!1488)

(assert (=> b!58118 (= e!38268 lt!23215)))

(assert (=> b!58118 (= lt!23215 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22905) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58118 (isDefined!76 (getValueByKey!122 (toList!702 lt!22905) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58119 () Bool)

(declare-fun Unit!1524 () Unit!1488)

(assert (=> b!58119 (= e!38268 Unit!1524)))

(declare-fun b!58120 () Bool)

(assert (=> b!58120 (= e!38269 (isDefined!76 (getValueByKey!122 (toList!702 lt!22905) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10851 c!7289) b!58118))

(assert (= (and d!10851 (not c!7289)) b!58119))

(assert (= (and d!10851 (not res!32426)) b!58120))

(declare-fun m!49245 () Bool)

(assert (=> d!10851 m!49245))

(declare-fun m!49247 () Bool)

(assert (=> b!58118 m!49247))

(declare-fun m!49249 () Bool)

(assert (=> b!58118 m!49249))

(assert (=> b!58118 m!49249))

(declare-fun m!49251 () Bool)

(assert (=> b!58118 m!49251))

(assert (=> b!58120 m!49249))

(assert (=> b!58120 m!49249))

(assert (=> b!58120 m!49251))

(assert (=> bm!4176 d!10851))

(declare-fun d!10853 () Bool)

(assert (=> d!10853 (= (apply!65 lt!22892 lt!22899) (get!1076 (getValueByKey!122 (toList!702 lt!22892) lt!22899)))))

(declare-fun bs!2504 () Bool)

(assert (= bs!2504 d!10853))

(declare-fun m!49253 () Bool)

(assert (=> bs!2504 m!49253))

(assert (=> bs!2504 m!49253))

(declare-fun m!49255 () Bool)

(assert (=> bs!2504 m!49255))

(assert (=> b!57664 d!10853))

(declare-fun d!10855 () Bool)

(assert (=> d!10855 (contains!688 (+!80 lt!22912 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22910)))

(declare-fun lt!23217 () Unit!1488)

(assert (=> d!10855 (= lt!23217 (choose!297 lt!22912 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22910))))

(assert (=> d!10855 (contains!688 lt!22912 lt!22910)))

(assert (=> d!10855 (= (addStillContains!41 lt!22912 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22910) lt!23217)))

(declare-fun bs!2505 () Bool)

(assert (= bs!2505 d!10855))

(assert (=> bs!2505 m!48569))

(assert (=> bs!2505 m!48569))

(assert (=> bs!2505 m!48585))

(declare-fun m!49257 () Bool)

(assert (=> bs!2505 m!49257))

(declare-fun m!49259 () Bool)

(assert (=> bs!2505 m!49259))

(assert (=> b!57664 d!10855))

(declare-fun d!10857 () Bool)

(assert (=> d!10857 (= (apply!65 (+!80 lt!22901 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!22893) (apply!65 lt!22901 lt!22893))))

(declare-fun lt!23218 () Unit!1488)

(assert (=> d!10857 (= lt!23218 (choose!296 lt!22901 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!22893))))

(declare-fun e!38270 () Bool)

(assert (=> d!10857 e!38270))

(declare-fun res!32427 () Bool)

(assert (=> d!10857 (=> (not res!32427) (not e!38270))))

(assert (=> d!10857 (= res!32427 (contains!688 lt!22901 lt!22893))))

(assert (=> d!10857 (= (addApplyDifferent!41 lt!22901 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!22893) lt!23218)))

(declare-fun b!58121 () Bool)

(assert (=> b!58121 (= e!38270 (not (= lt!22893 lt!22897)))))

(assert (= (and d!10857 res!32427) b!58121))

(assert (=> d!10857 m!48577))

(declare-fun m!49261 () Bool)

(assert (=> d!10857 m!49261))

(assert (=> d!10857 m!48577))

(assert (=> d!10857 m!48579))

(declare-fun m!49263 () Bool)

(assert (=> d!10857 m!49263))

(assert (=> d!10857 m!48591))

(assert (=> b!57664 d!10857))

(declare-fun d!10859 () Bool)

(assert (=> d!10859 (= (apply!65 (+!80 lt!22904 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!22891) (apply!65 lt!22904 lt!22891))))

(declare-fun lt!23219 () Unit!1488)

(assert (=> d!10859 (= lt!23219 (choose!296 lt!22904 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!22891))))

(declare-fun e!38271 () Bool)

(assert (=> d!10859 e!38271))

(declare-fun res!32428 () Bool)

(assert (=> d!10859 (=> (not res!32428) (not e!38271))))

(assert (=> d!10859 (= res!32428 (contains!688 lt!22904 lt!22891))))

(assert (=> d!10859 (= (addApplyDifferent!41 lt!22904 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) lt!22891) lt!23219)))

(declare-fun b!58122 () Bool)

(assert (=> b!58122 (= e!38271 (not (= lt!22891 lt!22898)))))

(assert (= (and d!10859 res!32428) b!58122))

(assert (=> d!10859 m!48563))

(declare-fun m!49265 () Bool)

(assert (=> d!10859 m!49265))

(assert (=> d!10859 m!48563))

(assert (=> d!10859 m!48573))

(declare-fun m!49267 () Bool)

(assert (=> d!10859 m!49267))

(assert (=> d!10859 m!48583))

(assert (=> b!57664 d!10859))

(declare-fun d!10861 () Bool)

(declare-fun e!38272 () Bool)

(assert (=> d!10861 e!38272))

(declare-fun res!32430 () Bool)

(assert (=> d!10861 (=> (not res!32430) (not e!38272))))

(declare-fun lt!23222 () ListLongMap!1373)

(assert (=> d!10861 (= res!32430 (contains!688 lt!23222 (_1!1029 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(declare-fun lt!23223 () List!1449)

(assert (=> d!10861 (= lt!23222 (ListLongMap!1374 lt!23223))))

(declare-fun lt!23220 () Unit!1488)

(declare-fun lt!23221 () Unit!1488)

(assert (=> d!10861 (= lt!23220 lt!23221)))

(assert (=> d!10861 (= (getValueByKey!122 lt!23223 (_1!1029 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) (Some!127 (_2!1029 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10861 (= lt!23221 (lemmaContainsTupThenGetReturnValue!41 lt!23223 (_1!1029 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) (_2!1029 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10861 (= lt!23223 (insertStrictlySorted!43 (toList!702 lt!22912) (_1!1029 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) (_2!1029 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10861 (= (+!80 lt!22912 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!23222)))

(declare-fun b!58123 () Bool)

(declare-fun res!32429 () Bool)

(assert (=> b!58123 (=> (not res!32429) (not e!38272))))

(assert (=> b!58123 (= res!32429 (= (getValueByKey!122 (toList!702 lt!23222) (_1!1029 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) (Some!127 (_2!1029 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))))))))

(declare-fun b!58124 () Bool)

(assert (=> b!58124 (= e!38272 (contains!690 (toList!702 lt!23222) (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))))))

(assert (= (and d!10861 res!32430) b!58123))

(assert (= (and b!58123 res!32429) b!58124))

(declare-fun m!49269 () Bool)

(assert (=> d!10861 m!49269))

(declare-fun m!49271 () Bool)

(assert (=> d!10861 m!49271))

(declare-fun m!49273 () Bool)

(assert (=> d!10861 m!49273))

(declare-fun m!49275 () Bool)

(assert (=> d!10861 m!49275))

(declare-fun m!49277 () Bool)

(assert (=> b!58123 m!49277))

(declare-fun m!49279 () Bool)

(assert (=> b!58124 m!49279))

(assert (=> b!57664 d!10861))

(declare-fun d!10863 () Bool)

(assert (=> d!10863 (= (apply!65 (+!80 lt!22892 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22899) (apply!65 lt!22892 lt!22899))))

(declare-fun lt!23224 () Unit!1488)

(assert (=> d!10863 (= lt!23224 (choose!296 lt!22892 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22899))))

(declare-fun e!38273 () Bool)

(assert (=> d!10863 e!38273))

(declare-fun res!32431 () Bool)

(assert (=> d!10863 (=> (not res!32431) (not e!38273))))

(assert (=> d!10863 (= res!32431 (contains!688 lt!22892 lt!22899))))

(assert (=> d!10863 (= (addApplyDifferent!41 lt!22892 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) lt!22899) lt!23224)))

(declare-fun b!58125 () Bool)

(assert (=> b!58125 (= e!38273 (not (= lt!22899 lt!22908)))))

(assert (= (and d!10863 res!32431) b!58125))

(assert (=> d!10863 m!48571))

(declare-fun m!49281 () Bool)

(assert (=> d!10863 m!49281))

(assert (=> d!10863 m!48571))

(assert (=> d!10863 m!48589))

(declare-fun m!49283 () Bool)

(assert (=> d!10863 m!49283))

(assert (=> d!10863 m!48581))

(assert (=> b!57664 d!10863))

(declare-fun b!58126 () Bool)

(declare-fun e!38279 () Bool)

(declare-fun e!38276 () Bool)

(assert (=> b!58126 (= e!38279 e!38276)))

(declare-fun c!7292 () Bool)

(assert (=> b!58126 (= c!7292 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58127 () Bool)

(assert (=> b!58127 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(assert (=> b!58127 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (ite c!7124 (_values!2005 newMap!16) lt!22772))))))

(declare-fun e!38275 () Bool)

(declare-fun lt!23225 () ListLongMap!1373)

(assert (=> b!58127 (= e!38275 (= (apply!65 lt!23225 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 (ite c!7124 (_values!2005 newMap!16) lt!22772)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!10865 () Bool)

(declare-fun e!38280 () Bool)

(assert (=> d!10865 e!38280))

(declare-fun res!32432 () Bool)

(assert (=> d!10865 (=> (not res!32432) (not e!38280))))

(assert (=> d!10865 (= res!32432 (not (contains!688 lt!23225 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!38274 () ListLongMap!1373)

(assert (=> d!10865 (= lt!23225 e!38274)))

(declare-fun c!7290 () Bool)

(assert (=> d!10865 (= c!7290 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!10865 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10865 (= (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7124 (_values!2005 newMap!16) lt!22772) (mask!5896 newMap!16) (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23225)))

(declare-fun b!58128 () Bool)

(assert (=> b!58128 (= e!38276 (isEmpty!296 lt!23225))))

(declare-fun b!58129 () Bool)

(declare-fun res!32434 () Bool)

(assert (=> b!58129 (=> (not res!32434) (not e!38280))))

(assert (=> b!58129 (= res!32434 (not (contains!688 lt!23225 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58130 () Bool)

(assert (=> b!58130 (= e!38276 (= lt!23225 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7124 (_values!2005 newMap!16) lt!22772) (mask!5896 newMap!16) (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16))))))

(declare-fun b!58131 () Bool)

(declare-fun e!38278 () Bool)

(assert (=> b!58131 (= e!38278 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58131 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!58132 () Bool)

(declare-fun e!38277 () ListLongMap!1373)

(declare-fun call!4238 () ListLongMap!1373)

(assert (=> b!58132 (= e!38277 call!4238)))

(declare-fun b!58133 () Bool)

(assert (=> b!58133 (= e!38274 e!38277)))

(declare-fun c!7291 () Bool)

(assert (=> b!58133 (= c!7291 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58134 () Bool)

(assert (=> b!58134 (= e!38279 e!38275)))

(assert (=> b!58134 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun res!32433 () Bool)

(assert (=> b!58134 (= res!32433 (contains!688 lt!23225 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58134 (=> (not res!32433) (not e!38275))))

(declare-fun bm!4235 () Bool)

(assert (=> bm!4235 (= call!4238 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite c!7124 (_values!2005 newMap!16) lt!22772) (mask!5896 newMap!16) (ite c!7124 (ite c!7127 lt!22790 lt!22795) (extraKeys!1913 newMap!16)) (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)) (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16)))))

(declare-fun b!58135 () Bool)

(assert (=> b!58135 (= e!38274 (ListLongMap!1374 Nil!1446))))

(declare-fun b!58136 () Bool)

(assert (=> b!58136 (= e!38280 e!38279)))

(declare-fun c!7293 () Bool)

(assert (=> b!58136 (= c!7293 e!38278)))

(declare-fun res!32435 () Bool)

(assert (=> b!58136 (=> (not res!32435) (not e!38278))))

(assert (=> b!58136 (= res!32435 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58137 () Bool)

(declare-fun lt!23230 () Unit!1488)

(declare-fun lt!23226 () Unit!1488)

(assert (=> b!58137 (= lt!23230 lt!23226)))

(declare-fun lt!23231 () (_ BitVec 64))

(declare-fun lt!23229 () V!2835)

(declare-fun lt!23227 () ListLongMap!1373)

(declare-fun lt!23228 () (_ BitVec 64))

(assert (=> b!58137 (not (contains!688 (+!80 lt!23227 (tuple2!2039 lt!23228 lt!23229)) lt!23231))))

(assert (=> b!58137 (= lt!23226 (addStillNotContains!16 lt!23227 lt!23228 lt!23229 lt!23231))))

(assert (=> b!58137 (= lt!23231 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!58137 (= lt!23229 (get!1073 (select (arr!1775 (ite c!7124 (_values!2005 newMap!16) lt!22772)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!58137 (= lt!23228 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58137 (= lt!23227 call!4238)))

(assert (=> b!58137 (= e!38277 (+!80 call!4238 (tuple2!2039 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (get!1073 (select (arr!1775 (ite c!7124 (_values!2005 newMap!16) lt!22772)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10865 c!7290) b!58135))

(assert (= (and d!10865 (not c!7290)) b!58133))

(assert (= (and b!58133 c!7291) b!58137))

(assert (= (and b!58133 (not c!7291)) b!58132))

(assert (= (or b!58137 b!58132) bm!4235))

(assert (= (and d!10865 res!32432) b!58129))

(assert (= (and b!58129 res!32434) b!58136))

(assert (= (and b!58136 res!32435) b!58131))

(assert (= (and b!58136 c!7293) b!58134))

(assert (= (and b!58136 (not c!7293)) b!58126))

(assert (= (and b!58134 res!32433) b!58127))

(assert (= (and b!58126 c!7292) b!58130))

(assert (= (and b!58126 (not c!7292)) b!58128))

(declare-fun b_lambda!2547 () Bool)

(assert (=> (not b_lambda!2547) (not b!58127)))

(assert (=> b!58127 t!4783))

(declare-fun b_and!3505 () Bool)

(assert (= b_and!3501 (and (=> t!4783 result!2361) b_and!3505)))

(assert (=> b!58127 t!4785))

(declare-fun b_and!3507 () Bool)

(assert (= b_and!3503 (and (=> t!4785 result!2363) b_and!3507)))

(declare-fun b_lambda!2549 () Bool)

(assert (=> (not b_lambda!2549) (not b!58137)))

(assert (=> b!58137 t!4783))

(declare-fun b_and!3509 () Bool)

(assert (= b_and!3505 (and (=> t!4783 result!2361) b_and!3509)))

(assert (=> b!58137 t!4785))

(declare-fun b_and!3511 () Bool)

(assert (= b_and!3507 (and (=> t!4785 result!2363) b_and!3511)))

(declare-fun m!49285 () Bool)

(assert (=> d!10865 m!49285))

(assert (=> d!10865 m!48395))

(assert (=> b!58133 m!48345))

(assert (=> b!58133 m!48345))

(assert (=> b!58133 m!48383))

(assert (=> b!58127 m!48345))

(assert (=> b!58127 m!48339))

(assert (=> b!58127 m!48345))

(declare-fun m!49287 () Bool)

(assert (=> b!58127 m!49287))

(assert (=> b!58127 m!48555))

(assert (=> b!58127 m!48555))

(assert (=> b!58127 m!48339))

(assert (=> b!58127 m!48557))

(assert (=> b!58131 m!48345))

(assert (=> b!58131 m!48345))

(assert (=> b!58131 m!48383))

(assert (=> b!58134 m!48345))

(assert (=> b!58134 m!48345))

(declare-fun m!49289 () Bool)

(assert (=> b!58134 m!49289))

(declare-fun m!49291 () Bool)

(assert (=> b!58130 m!49291))

(declare-fun m!49293 () Bool)

(assert (=> b!58128 m!49293))

(assert (=> b!58137 m!48345))

(declare-fun m!49295 () Bool)

(assert (=> b!58137 m!49295))

(declare-fun m!49297 () Bool)

(assert (=> b!58137 m!49297))

(assert (=> b!58137 m!49295))

(assert (=> b!58137 m!48339))

(assert (=> b!58137 m!48555))

(assert (=> b!58137 m!48555))

(assert (=> b!58137 m!48339))

(assert (=> b!58137 m!48557))

(declare-fun m!49299 () Bool)

(assert (=> b!58137 m!49299))

(declare-fun m!49301 () Bool)

(assert (=> b!58137 m!49301))

(assert (=> bm!4235 m!49291))

(declare-fun m!49303 () Bool)

(assert (=> b!58129 m!49303))

(assert (=> b!57664 d!10865))

(declare-fun d!10867 () Bool)

(assert (=> d!10867 (= (apply!65 lt!22901 lt!22893) (get!1076 (getValueByKey!122 (toList!702 lt!22901) lt!22893)))))

(declare-fun bs!2506 () Bool)

(assert (= bs!2506 d!10867))

(declare-fun m!49305 () Bool)

(assert (=> bs!2506 m!49305))

(assert (=> bs!2506 m!49305))

(declare-fun m!49307 () Bool)

(assert (=> bs!2506 m!49307))

(assert (=> b!57664 d!10867))

(declare-fun d!10869 () Bool)

(declare-fun e!38281 () Bool)

(assert (=> d!10869 e!38281))

(declare-fun res!32437 () Bool)

(assert (=> d!10869 (=> (not res!32437) (not e!38281))))

(declare-fun lt!23234 () ListLongMap!1373)

(assert (=> d!10869 (= res!32437 (contains!688 lt!23234 (_1!1029 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(declare-fun lt!23235 () List!1449)

(assert (=> d!10869 (= lt!23234 (ListLongMap!1374 lt!23235))))

(declare-fun lt!23232 () Unit!1488)

(declare-fun lt!23233 () Unit!1488)

(assert (=> d!10869 (= lt!23232 lt!23233)))

(assert (=> d!10869 (= (getValueByKey!122 lt!23235 (_1!1029 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!127 (_2!1029 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10869 (= lt!23233 (lemmaContainsTupThenGetReturnValue!41 lt!23235 (_1!1029 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1029 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10869 (= lt!23235 (insertStrictlySorted!43 (toList!702 lt!22901) (_1!1029 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1029 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10869 (= (+!80 lt!22901 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23234)))

(declare-fun b!58138 () Bool)

(declare-fun res!32436 () Bool)

(assert (=> b!58138 (=> (not res!32436) (not e!38281))))

(assert (=> b!58138 (= res!32436 (= (getValueByKey!122 (toList!702 lt!23234) (_1!1029 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!127 (_2!1029 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(declare-fun b!58139 () Bool)

(assert (=> b!58139 (= e!38281 (contains!690 (toList!702 lt!23234) (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))

(assert (= (and d!10869 res!32437) b!58138))

(assert (= (and b!58138 res!32436) b!58139))

(declare-fun m!49309 () Bool)

(assert (=> d!10869 m!49309))

(declare-fun m!49311 () Bool)

(assert (=> d!10869 m!49311))

(declare-fun m!49313 () Bool)

(assert (=> d!10869 m!49313))

(declare-fun m!49315 () Bool)

(assert (=> d!10869 m!49315))

(declare-fun m!49317 () Bool)

(assert (=> b!58138 m!49317))

(declare-fun m!49319 () Bool)

(assert (=> b!58139 m!49319))

(assert (=> b!57664 d!10869))

(declare-fun d!10871 () Bool)

(declare-fun e!38282 () Bool)

(assert (=> d!10871 e!38282))

(declare-fun res!32439 () Bool)

(assert (=> d!10871 (=> (not res!32439) (not e!38282))))

(declare-fun lt!23238 () ListLongMap!1373)

(assert (=> d!10871 (= res!32439 (contains!688 lt!23238 (_1!1029 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(declare-fun lt!23239 () List!1449)

(assert (=> d!10871 (= lt!23238 (ListLongMap!1374 lt!23239))))

(declare-fun lt!23236 () Unit!1488)

(declare-fun lt!23237 () Unit!1488)

(assert (=> d!10871 (= lt!23236 lt!23237)))

(assert (=> d!10871 (= (getValueByKey!122 lt!23239 (_1!1029 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!127 (_2!1029 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10871 (= lt!23237 (lemmaContainsTupThenGetReturnValue!41 lt!23239 (_1!1029 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1029 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10871 (= lt!23239 (insertStrictlySorted!43 (toList!702 lt!22904) (_1!1029 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1029 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!10871 (= (+!80 lt!22904 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23238)))

(declare-fun b!58140 () Bool)

(declare-fun res!32438 () Bool)

(assert (=> b!58140 (=> (not res!32438) (not e!38282))))

(assert (=> b!58140 (= res!32438 (= (getValueByKey!122 (toList!702 lt!23238) (_1!1029 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!127 (_2!1029 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(declare-fun b!58141 () Bool)

(assert (=> b!58141 (= e!38282 (contains!690 (toList!702 lt!23238) (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))

(assert (= (and d!10871 res!32439) b!58140))

(assert (= (and b!58140 res!32438) b!58141))

(declare-fun m!49321 () Bool)

(assert (=> d!10871 m!49321))

(declare-fun m!49323 () Bool)

(assert (=> d!10871 m!49323))

(declare-fun m!49325 () Bool)

(assert (=> d!10871 m!49325))

(declare-fun m!49327 () Bool)

(assert (=> d!10871 m!49327))

(declare-fun m!49329 () Bool)

(assert (=> b!58140 m!49329))

(declare-fun m!49331 () Bool)

(assert (=> b!58141 m!49331))

(assert (=> b!57664 d!10871))

(declare-fun d!10873 () Bool)

(assert (=> d!10873 (= (apply!65 lt!22904 lt!22891) (get!1076 (getValueByKey!122 (toList!702 lt!22904) lt!22891)))))

(declare-fun bs!2507 () Bool)

(assert (= bs!2507 d!10873))

(declare-fun m!49333 () Bool)

(assert (=> bs!2507 m!49333))

(assert (=> bs!2507 m!49333))

(declare-fun m!49335 () Bool)

(assert (=> bs!2507 m!49335))

(assert (=> b!57664 d!10873))

(declare-fun d!10875 () Bool)

(declare-fun e!38283 () Bool)

(assert (=> d!10875 e!38283))

(declare-fun res!32441 () Bool)

(assert (=> d!10875 (=> (not res!32441) (not e!38283))))

(declare-fun lt!23242 () ListLongMap!1373)

(assert (=> d!10875 (= res!32441 (contains!688 lt!23242 (_1!1029 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(declare-fun lt!23243 () List!1449)

(assert (=> d!10875 (= lt!23242 (ListLongMap!1374 lt!23243))))

(declare-fun lt!23240 () Unit!1488)

(declare-fun lt!23241 () Unit!1488)

(assert (=> d!10875 (= lt!23240 lt!23241)))

(assert (=> d!10875 (= (getValueByKey!122 lt!23243 (_1!1029 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) (Some!127 (_2!1029 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10875 (= lt!23241 (lemmaContainsTupThenGetReturnValue!41 lt!23243 (_1!1029 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) (_2!1029 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10875 (= lt!23243 (insertStrictlySorted!43 (toList!702 lt!22892) (_1!1029 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) (_2!1029 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))))))

(assert (=> d!10875 (= (+!80 lt!22892 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!23242)))

(declare-fun b!58142 () Bool)

(declare-fun res!32440 () Bool)

(assert (=> b!58142 (=> (not res!32440) (not e!38283))))

(assert (=> b!58142 (= res!32440 (= (getValueByKey!122 (toList!702 lt!23242) (_1!1029 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) (Some!127 (_2!1029 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))))))))

(declare-fun b!58143 () Bool)

(assert (=> b!58143 (= e!38283 (contains!690 (toList!702 lt!23242) (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))))))

(assert (= (and d!10875 res!32441) b!58142))

(assert (= (and b!58142 res!32440) b!58143))

(declare-fun m!49337 () Bool)

(assert (=> d!10875 m!49337))

(declare-fun m!49339 () Bool)

(assert (=> d!10875 m!49339))

(declare-fun m!49341 () Bool)

(assert (=> d!10875 m!49341))

(declare-fun m!49343 () Bool)

(assert (=> d!10875 m!49343))

(declare-fun m!49345 () Bool)

(assert (=> b!58142 m!49345))

(declare-fun m!49347 () Bool)

(assert (=> b!58143 m!49347))

(assert (=> b!57664 d!10875))

(declare-fun d!10877 () Bool)

(assert (=> d!10877 (= (apply!65 (+!80 lt!22892 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22899) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22892 (tuple2!2039 lt!22908 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) lt!22899)))))

(declare-fun bs!2508 () Bool)

(assert (= bs!2508 d!10877))

(declare-fun m!49349 () Bool)

(assert (=> bs!2508 m!49349))

(assert (=> bs!2508 m!49349))

(declare-fun m!49351 () Bool)

(assert (=> bs!2508 m!49351))

(assert (=> b!57664 d!10877))

(declare-fun d!10879 () Bool)

(assert (=> d!10879 (= (apply!65 (+!80 lt!22904 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!22891) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22904 (tuple2!2039 lt!22898 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) lt!22891)))))

(declare-fun bs!2509 () Bool)

(assert (= bs!2509 d!10879))

(declare-fun m!49353 () Bool)

(assert (=> bs!2509 m!49353))

(assert (=> bs!2509 m!49353))

(declare-fun m!49355 () Bool)

(assert (=> bs!2509 m!49355))

(assert (=> b!57664 d!10879))

(declare-fun d!10881 () Bool)

(assert (=> d!10881 (= (apply!65 (+!80 lt!22901 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!22893) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22901 (tuple2!2039 lt!22897 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) lt!22893)))))

(declare-fun bs!2510 () Bool)

(assert (= bs!2510 d!10881))

(declare-fun m!49357 () Bool)

(assert (=> bs!2510 m!49357))

(assert (=> bs!2510 m!49357))

(declare-fun m!49359 () Bool)

(assert (=> bs!2510 m!49359))

(assert (=> b!57664 d!10881))

(declare-fun d!10883 () Bool)

(declare-fun e!38285 () Bool)

(assert (=> d!10883 e!38285))

(declare-fun res!32442 () Bool)

(assert (=> d!10883 (=> res!32442 e!38285)))

(declare-fun lt!23244 () Bool)

(assert (=> d!10883 (= res!32442 (not lt!23244))))

(declare-fun lt!23245 () Bool)

(assert (=> d!10883 (= lt!23244 lt!23245)))

(declare-fun lt!23247 () Unit!1488)

(declare-fun e!38284 () Unit!1488)

(assert (=> d!10883 (= lt!23247 e!38284)))

(declare-fun c!7294 () Bool)

(assert (=> d!10883 (= c!7294 lt!23245)))

(assert (=> d!10883 (= lt!23245 (containsKey!126 (toList!702 (+!80 lt!22912 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) lt!22910))))

(assert (=> d!10883 (= (contains!688 (+!80 lt!22912 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16)))) lt!22910) lt!23244)))

(declare-fun b!58144 () Bool)

(declare-fun lt!23246 () Unit!1488)

(assert (=> b!58144 (= e!38284 lt!23246)))

(assert (=> b!58144 (= lt!23246 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 (+!80 lt!22912 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) lt!22910))))

(assert (=> b!58144 (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22912 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) lt!22910))))

(declare-fun b!58145 () Bool)

(declare-fun Unit!1525 () Unit!1488)

(assert (=> b!58145 (= e!38284 Unit!1525)))

(declare-fun b!58146 () Bool)

(assert (=> b!58146 (= e!38285 (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22912 (tuple2!2039 lt!22894 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))))) lt!22910)))))

(assert (= (and d!10883 c!7294) b!58144))

(assert (= (and d!10883 (not c!7294)) b!58145))

(assert (= (and d!10883 (not res!32442)) b!58146))

(declare-fun m!49361 () Bool)

(assert (=> d!10883 m!49361))

(declare-fun m!49363 () Bool)

(assert (=> b!58144 m!49363))

(declare-fun m!49365 () Bool)

(assert (=> b!58144 m!49365))

(assert (=> b!58144 m!49365))

(declare-fun m!49367 () Bool)

(assert (=> b!58144 m!49367))

(assert (=> b!58146 m!49365))

(assert (=> b!58146 m!49365))

(assert (=> b!58146 m!49367))

(assert (=> b!57664 d!10883))

(declare-fun d!10885 () Bool)

(assert (=> d!10885 (= (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!295 (getValueByKey!122 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2511 () Bool)

(assert (= bs!2511 d!10885))

(assert (=> bs!2511 m!48403))

(declare-fun m!49369 () Bool)

(assert (=> bs!2511 m!49369))

(assert (=> b!57554 d!10885))

(declare-fun b!58147 () Bool)

(declare-fun e!38286 () Option!128)

(assert (=> b!58147 (= e!38286 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22695)))))))

(declare-fun d!10887 () Bool)

(declare-fun c!7295 () Bool)

(assert (=> d!10887 (= c!7295 (and ((_ is Cons!1445) (toList!702 lt!22695)) (= (_1!1029 (h!2025 (toList!702 lt!22695))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10887 (= (getValueByKey!122 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000) e!38286)))

(declare-fun b!58150 () Bool)

(declare-fun e!38287 () Option!128)

(assert (=> b!58150 (= e!38287 None!126)))

(declare-fun b!58148 () Bool)

(assert (=> b!58148 (= e!38286 e!38287)))

(declare-fun c!7296 () Bool)

(assert (=> b!58148 (= c!7296 (and ((_ is Cons!1445) (toList!702 lt!22695)) (not (= (_1!1029 (h!2025 (toList!702 lt!22695))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58149 () Bool)

(assert (=> b!58149 (= e!38287 (getValueByKey!122 (t!4775 (toList!702 lt!22695)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!10887 c!7295) b!58147))

(assert (= (and d!10887 (not c!7295)) b!58148))

(assert (= (and b!58148 c!7296) b!58149))

(assert (= (and b!58148 (not c!7296)) b!58150))

(declare-fun m!49371 () Bool)

(assert (=> b!58149 m!49371))

(assert (=> b!57554 d!10887))

(declare-fun d!10889 () Bool)

(assert (=> d!10889 (arrayContainsKey!0 (_keys!3642 newMap!16) lt!23078 #b00000000000000000000000000000000)))

(declare-fun lt!23250 () Unit!1488)

(declare-fun choose!13 (array!3706 (_ BitVec 64) (_ BitVec 32)) Unit!1488)

(assert (=> d!10889 (= lt!23250 (choose!13 (_keys!3642 newMap!16) lt!23078 #b00000000000000000000000000000000))))

(assert (=> d!10889 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!10889 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3642 newMap!16) lt!23078 #b00000000000000000000000000000000) lt!23250)))

(declare-fun bs!2512 () Bool)

(assert (= bs!2512 d!10889))

(assert (=> bs!2512 m!48845))

(declare-fun m!49373 () Bool)

(assert (=> bs!2512 m!49373))

(assert (=> b!57824 d!10889))

(declare-fun d!10891 () Bool)

(declare-fun res!32443 () Bool)

(declare-fun e!38288 () Bool)

(assert (=> d!10891 (=> res!32443 e!38288)))

(assert (=> d!10891 (= res!32443 (= (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) lt!23078))))

(assert (=> d!10891 (= (arrayContainsKey!0 (_keys!3642 newMap!16) lt!23078 #b00000000000000000000000000000000) e!38288)))

(declare-fun b!58151 () Bool)

(declare-fun e!38289 () Bool)

(assert (=> b!58151 (= e!38288 e!38289)))

(declare-fun res!32444 () Bool)

(assert (=> b!58151 (=> (not res!32444) (not e!38289))))

(assert (=> b!58151 (= res!32444 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58152 () Bool)

(assert (=> b!58152 (= e!38289 (arrayContainsKey!0 (_keys!3642 newMap!16) lt!23078 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!10891 (not res!32443)) b!58151))

(assert (= (and b!58151 res!32444) b!58152))

(assert (=> d!10891 m!48345))

(declare-fun m!49375 () Bool)

(assert (=> b!58152 m!49375))

(assert (=> b!57824 d!10891))

(declare-fun b!58153 () Bool)

(declare-fun e!38290 () SeekEntryResult!236)

(declare-fun lt!23253 () SeekEntryResult!236)

(assert (=> b!58153 (= e!38290 (MissingZero!236 (index!3068 lt!23253)))))

(declare-fun b!58154 () Bool)

(declare-fun e!38292 () SeekEntryResult!236)

(declare-fun e!38291 () SeekEntryResult!236)

(assert (=> b!58154 (= e!38292 e!38291)))

(declare-fun lt!23251 () (_ BitVec 64))

(assert (=> b!58154 (= lt!23251 (select (arr!1774 (_keys!3642 newMap!16)) (index!3068 lt!23253)))))

(declare-fun c!7299 () Bool)

(assert (=> b!58154 (= c!7299 (= lt!23251 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58155 () Bool)

(assert (=> b!58155 (= e!38291 (Found!236 (index!3068 lt!23253)))))

(declare-fun d!10893 () Bool)

(declare-fun lt!23252 () SeekEntryResult!236)

(assert (=> d!10893 (and (or ((_ is Undefined!236) lt!23252) (not ((_ is Found!236) lt!23252)) (and (bvsge (index!3067 lt!23252) #b00000000000000000000000000000000) (bvslt (index!3067 lt!23252) (size!2003 (_keys!3642 newMap!16))))) (or ((_ is Undefined!236) lt!23252) ((_ is Found!236) lt!23252) (not ((_ is MissingZero!236) lt!23252)) (and (bvsge (index!3066 lt!23252) #b00000000000000000000000000000000) (bvslt (index!3066 lt!23252) (size!2003 (_keys!3642 newMap!16))))) (or ((_ is Undefined!236) lt!23252) ((_ is Found!236) lt!23252) ((_ is MissingZero!236) lt!23252) (not ((_ is MissingVacant!236) lt!23252)) (and (bvsge (index!3069 lt!23252) #b00000000000000000000000000000000) (bvslt (index!3069 lt!23252) (size!2003 (_keys!3642 newMap!16))))) (or ((_ is Undefined!236) lt!23252) (ite ((_ is Found!236) lt!23252) (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!23252)) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!236) lt!23252) (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3066 lt!23252)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!236) lt!23252) (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3069 lt!23252)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10893 (= lt!23252 e!38292)))

(declare-fun c!7298 () Bool)

(assert (=> d!10893 (= c!7298 (and ((_ is Intermediate!236) lt!23253) (undefined!1048 lt!23253)))))

(assert (=> d!10893 (= lt!23253 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (mask!5896 newMap!16)) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (=> d!10893 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10893 (= (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (_keys!3642 newMap!16) (mask!5896 newMap!16)) lt!23252)))

(declare-fun b!58156 () Bool)

(assert (=> b!58156 (= e!38292 Undefined!236)))

(declare-fun b!58157 () Bool)

(declare-fun c!7297 () Bool)

(assert (=> b!58157 (= c!7297 (= lt!23251 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58157 (= e!38291 e!38290)))

(declare-fun b!58158 () Bool)

(assert (=> b!58158 (= e!38290 (seekKeyOrZeroReturnVacant!0 (x!9868 lt!23253) (index!3068 lt!23253) (index!3068 lt!23253) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (= (and d!10893 c!7298) b!58156))

(assert (= (and d!10893 (not c!7298)) b!58154))

(assert (= (and b!58154 c!7299) b!58155))

(assert (= (and b!58154 (not c!7299)) b!58157))

(assert (= (and b!58157 c!7297) b!58153))

(assert (= (and b!58157 (not c!7297)) b!58158))

(declare-fun m!49377 () Bool)

(assert (=> b!58154 m!49377))

(declare-fun m!49379 () Bool)

(assert (=> d!10893 m!49379))

(assert (=> d!10893 m!48395))

(declare-fun m!49381 () Bool)

(assert (=> d!10893 m!49381))

(assert (=> d!10893 m!48345))

(declare-fun m!49383 () Bool)

(assert (=> d!10893 m!49383))

(assert (=> d!10893 m!48345))

(assert (=> d!10893 m!49381))

(declare-fun m!49385 () Bool)

(assert (=> d!10893 m!49385))

(declare-fun m!49387 () Bool)

(assert (=> d!10893 m!49387))

(assert (=> b!58158 m!48345))

(declare-fun m!49389 () Bool)

(assert (=> b!58158 m!49389))

(assert (=> b!57824 d!10893))

(declare-fun d!10895 () Bool)

(declare-fun e!38294 () Bool)

(assert (=> d!10895 e!38294))

(declare-fun res!32445 () Bool)

(assert (=> d!10895 (=> res!32445 e!38294)))

(declare-fun lt!23254 () Bool)

(assert (=> d!10895 (= res!32445 (not lt!23254))))

(declare-fun lt!23255 () Bool)

(assert (=> d!10895 (= lt!23254 lt!23255)))

(declare-fun lt!23257 () Unit!1488)

(declare-fun e!38293 () Unit!1488)

(assert (=> d!10895 (= lt!23257 e!38293)))

(declare-fun c!7300 () Bool)

(assert (=> d!10895 (= c!7300 lt!23255)))

(assert (=> d!10895 (= lt!23255 (containsKey!126 (toList!702 lt!22944) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!10895 (= (contains!688 lt!22944 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) lt!23254)))

(declare-fun b!58159 () Bool)

(declare-fun lt!23256 () Unit!1488)

(assert (=> b!58159 (= e!38293 lt!23256)))

(assert (=> b!58159 (= lt!23256 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22944) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58159 (isDefined!76 (getValueByKey!122 (toList!702 lt!22944) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58160 () Bool)

(declare-fun Unit!1526 () Unit!1488)

(assert (=> b!58160 (= e!38293 Unit!1526)))

(declare-fun b!58161 () Bool)

(assert (=> b!58161 (= e!38294 (isDefined!76 (getValueByKey!122 (toList!702 lt!22944) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!10895 c!7300) b!58159))

(assert (= (and d!10895 (not c!7300)) b!58160))

(assert (= (and d!10895 (not res!32445)) b!58161))

(assert (=> d!10895 m!48345))

(declare-fun m!49391 () Bool)

(assert (=> d!10895 m!49391))

(assert (=> b!58159 m!48345))

(declare-fun m!49393 () Bool)

(assert (=> b!58159 m!49393))

(assert (=> b!58159 m!48345))

(declare-fun m!49395 () Bool)

(assert (=> b!58159 m!49395))

(assert (=> b!58159 m!49395))

(declare-fun m!49397 () Bool)

(assert (=> b!58159 m!49397))

(assert (=> b!58161 m!48345))

(assert (=> b!58161 m!49395))

(assert (=> b!58161 m!49395))

(assert (=> b!58161 m!49397))

(assert (=> b!57708 d!10895))

(declare-fun d!10897 () Bool)

(declare-fun e!38296 () Bool)

(assert (=> d!10897 e!38296))

(declare-fun res!32446 () Bool)

(assert (=> d!10897 (=> res!32446 e!38296)))

(declare-fun lt!23258 () Bool)

(assert (=> d!10897 (= res!32446 (not lt!23258))))

(declare-fun lt!23259 () Bool)

(assert (=> d!10897 (= lt!23258 lt!23259)))

(declare-fun lt!23261 () Unit!1488)

(declare-fun e!38295 () Unit!1488)

(assert (=> d!10897 (= lt!23261 e!38295)))

(declare-fun c!7301 () Bool)

(assert (=> d!10897 (= c!7301 lt!23259)))

(assert (=> d!10897 (= lt!23259 (containsKey!126 (toList!702 (map!1104 (_2!1030 lt!23038))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!10897 (= (contains!688 (map!1104 (_2!1030 lt!23038)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) lt!23258)))

(declare-fun b!58162 () Bool)

(declare-fun lt!23260 () Unit!1488)

(assert (=> b!58162 (= e!38295 lt!23260)))

(assert (=> b!58162 (= lt!23260 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 (map!1104 (_2!1030 lt!23038))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> b!58162 (isDefined!76 (getValueByKey!122 (toList!702 (map!1104 (_2!1030 lt!23038))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!58163 () Bool)

(declare-fun Unit!1527 () Unit!1488)

(assert (=> b!58163 (= e!38295 Unit!1527)))

(declare-fun b!58164 () Bool)

(assert (=> b!58164 (= e!38296 (isDefined!76 (getValueByKey!122 (toList!702 (map!1104 (_2!1030 lt!23038))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (= (and d!10897 c!7301) b!58162))

(assert (= (and d!10897 (not c!7301)) b!58163))

(assert (= (and d!10897 (not res!32446)) b!58164))

(assert (=> d!10897 m!48105))

(declare-fun m!49399 () Bool)

(assert (=> d!10897 m!49399))

(assert (=> b!58162 m!48105))

(declare-fun m!49401 () Bool)

(assert (=> b!58162 m!49401))

(assert (=> b!58162 m!48105))

(declare-fun m!49403 () Bool)

(assert (=> b!58162 m!49403))

(assert (=> b!58162 m!49403))

(declare-fun m!49405 () Bool)

(assert (=> b!58162 m!49405))

(assert (=> b!58164 m!48105))

(assert (=> b!58164 m!49403))

(assert (=> b!58164 m!49403))

(assert (=> b!58164 m!49405))

(assert (=> b!57783 d!10897))

(declare-fun d!10899 () Bool)

(assert (=> d!10899 (= (map!1104 (_2!1030 lt!23038)) (getCurrentListMap!400 (_keys!3642 (_2!1030 lt!23038)) (_values!2005 (_2!1030 lt!23038)) (mask!5896 (_2!1030 lt!23038)) (extraKeys!1913 (_2!1030 lt!23038)) (zeroValue!1940 (_2!1030 lt!23038)) (minValue!1940 (_2!1030 lt!23038)) #b00000000000000000000000000000000 (defaultEntry!2022 (_2!1030 lt!23038))))))

(declare-fun bs!2513 () Bool)

(assert (= bs!2513 d!10899))

(declare-fun m!49407 () Bool)

(assert (=> bs!2513 m!49407))

(assert (=> b!57783 d!10899))

(assert (=> bm!4211 d!10655))

(declare-fun d!10901 () Bool)

(declare-fun res!32447 () Bool)

(declare-fun e!38297 () Bool)

(assert (=> d!10901 (=> res!32447 e!38297)))

(assert (=> d!10901 (= res!32447 (and ((_ is Cons!1445) (toList!702 lt!22695)) (= (_1!1029 (h!2025 (toList!702 lt!22695))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10901 (= (containsKey!126 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000) e!38297)))

(declare-fun b!58165 () Bool)

(declare-fun e!38298 () Bool)

(assert (=> b!58165 (= e!38297 e!38298)))

(declare-fun res!32448 () Bool)

(assert (=> b!58165 (=> (not res!32448) (not e!38298))))

(assert (=> b!58165 (= res!32448 (and (or (not ((_ is Cons!1445) (toList!702 lt!22695))) (bvsle (_1!1029 (h!2025 (toList!702 lt!22695))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1445) (toList!702 lt!22695)) (bvslt (_1!1029 (h!2025 (toList!702 lt!22695))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58166 () Bool)

(assert (=> b!58166 (= e!38298 (containsKey!126 (t!4775 (toList!702 lt!22695)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!10901 (not res!32447)) b!58165))

(assert (= (and b!58165 res!32448) b!58166))

(declare-fun m!49409 () Bool)

(assert (=> b!58166 m!49409))

(assert (=> d!10689 d!10901))

(assert (=> d!10617 d!10615))

(assert (=> d!10617 d!10623))

(assert (=> d!10617 d!10625))

(declare-fun d!10903 () Bool)

(assert (=> d!10903 (= (apply!65 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22689) (apply!65 lt!22682 lt!22689))))

(assert (=> d!10903 true))

(declare-fun _$34!752 () Unit!1488)

(assert (=> d!10903 (= (choose!296 lt!22682 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22689) _$34!752)))

(declare-fun bs!2514 () Bool)

(assert (= bs!2514 d!10903))

(assert (=> bs!2514 m!48221))

(assert (=> bs!2514 m!48221))

(assert (=> bs!2514 m!48239))

(assert (=> bs!2514 m!48231))

(assert (=> d!10617 d!10903))

(declare-fun d!10905 () Bool)

(declare-fun e!38300 () Bool)

(assert (=> d!10905 e!38300))

(declare-fun res!32449 () Bool)

(assert (=> d!10905 (=> res!32449 e!38300)))

(declare-fun lt!23262 () Bool)

(assert (=> d!10905 (= res!32449 (not lt!23262))))

(declare-fun lt!23263 () Bool)

(assert (=> d!10905 (= lt!23262 lt!23263)))

(declare-fun lt!23265 () Unit!1488)

(declare-fun e!38299 () Unit!1488)

(assert (=> d!10905 (= lt!23265 e!38299)))

(declare-fun c!7302 () Bool)

(assert (=> d!10905 (= c!7302 lt!23263)))

(assert (=> d!10905 (= lt!23263 (containsKey!126 (toList!702 lt!22682) lt!22689))))

(assert (=> d!10905 (= (contains!688 lt!22682 lt!22689) lt!23262)))

(declare-fun b!58167 () Bool)

(declare-fun lt!23264 () Unit!1488)

(assert (=> b!58167 (= e!38299 lt!23264)))

(assert (=> b!58167 (= lt!23264 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22682) lt!22689))))

(assert (=> b!58167 (isDefined!76 (getValueByKey!122 (toList!702 lt!22682) lt!22689))))

(declare-fun b!58168 () Bool)

(declare-fun Unit!1528 () Unit!1488)

(assert (=> b!58168 (= e!38299 Unit!1528)))

(declare-fun b!58169 () Bool)

(assert (=> b!58169 (= e!38300 (isDefined!76 (getValueByKey!122 (toList!702 lt!22682) lt!22689)))))

(assert (= (and d!10905 c!7302) b!58167))

(assert (= (and d!10905 (not c!7302)) b!58168))

(assert (= (and d!10905 (not res!32449)) b!58169))

(declare-fun m!49411 () Bool)

(assert (=> d!10905 m!49411))

(declare-fun m!49413 () Bool)

(assert (=> b!58167 m!49413))

(assert (=> b!58167 m!48475))

(assert (=> b!58167 m!48475))

(declare-fun m!49415 () Bool)

(assert (=> b!58167 m!49415))

(assert (=> b!58169 m!48475))

(assert (=> b!58169 m!48475))

(assert (=> b!58169 m!49415))

(assert (=> d!10617 d!10905))

(declare-fun d!10907 () Bool)

(declare-fun res!32450 () Bool)

(declare-fun e!38301 () Bool)

(assert (=> d!10907 (=> res!32450 e!38301)))

(assert (=> d!10907 (= res!32450 (and ((_ is Cons!1445) (toList!702 call!4161)) (= (_1!1029 (h!2025 (toList!702 call!4161))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10907 (= (containsKey!126 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) e!38301)))

(declare-fun b!58170 () Bool)

(declare-fun e!38302 () Bool)

(assert (=> b!58170 (= e!38301 e!38302)))

(declare-fun res!32451 () Bool)

(assert (=> b!58170 (=> (not res!32451) (not e!38302))))

(assert (=> b!58170 (= res!32451 (and (or (not ((_ is Cons!1445) (toList!702 call!4161))) (bvsle (_1!1029 (h!2025 (toList!702 call!4161))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))) ((_ is Cons!1445) (toList!702 call!4161)) (bvslt (_1!1029 (h!2025 (toList!702 call!4161))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(declare-fun b!58171 () Bool)

(assert (=> b!58171 (= e!38302 (containsKey!126 (t!4775 (toList!702 call!4161)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10907 (not res!32450)) b!58170))

(assert (= (and b!58170 res!32451) b!58171))

(assert (=> b!58171 m!48105))

(declare-fun m!49417 () Bool)

(assert (=> b!58171 m!49417))

(assert (=> d!10695 d!10907))

(declare-fun b!58172 () Bool)

(declare-fun e!38308 () Bool)

(declare-fun e!38305 () Bool)

(assert (=> b!58172 (= e!38308 e!38305)))

(declare-fun c!7305 () Bool)

(assert (=> b!58172 (= c!7305 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58173 () Bool)

(assert (=> b!58173 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(assert (=> b!58173 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))))))))

(declare-fun e!38304 () Bool)

(declare-fun lt!23266 () ListLongMap!1373)

(assert (=> b!58173 (= e!38304 (= (apply!65 lt!23266 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!10909 () Bool)

(declare-fun e!38309 () Bool)

(assert (=> d!10909 e!38309))

(declare-fun res!32452 () Bool)

(assert (=> d!10909 (=> (not res!32452) (not e!38309))))

(assert (=> d!10909 (= res!32452 (not (contains!688 lt!23266 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!38303 () ListLongMap!1373)

(assert (=> d!10909 (= lt!23266 e!38303)))

(declare-fun c!7303 () Bool)

(assert (=> d!10909 (= c!7303 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!10909 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10909 (= (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23266)))

(declare-fun b!58174 () Bool)

(assert (=> b!58174 (= e!38305 (isEmpty!296 lt!23266))))

(declare-fun b!58175 () Bool)

(declare-fun res!32454 () Bool)

(assert (=> b!58175 (=> (not res!32454) (not e!38309))))

(assert (=> b!58175 (= res!32454 (not (contains!688 lt!23266 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58176 () Bool)

(assert (=> b!58176 (= e!38305 (= lt!23266 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16))))))

(declare-fun b!58177 () Bool)

(declare-fun e!38307 () Bool)

(assert (=> b!58177 (= e!38307 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58177 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!58178 () Bool)

(declare-fun e!38306 () ListLongMap!1373)

(declare-fun call!4239 () ListLongMap!1373)

(assert (=> b!58178 (= e!38306 call!4239)))

(declare-fun b!58179 () Bool)

(assert (=> b!58179 (= e!38303 e!38306)))

(declare-fun c!7304 () Bool)

(assert (=> b!58179 (= c!7304 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58180 () Bool)

(assert (=> b!58180 (= e!38308 e!38304)))

(assert (=> b!58180 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun res!32453 () Bool)

(assert (=> b!58180 (= res!32453 (contains!688 lt!23266 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58180 (=> (not res!32453) (not e!38304))))

(declare-fun bm!4236 () Bool)

(assert (=> bm!4236 (= call!4239 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16)))))

(declare-fun b!58181 () Bool)

(assert (=> b!58181 (= e!38303 (ListLongMap!1374 Nil!1446))))

(declare-fun b!58182 () Bool)

(assert (=> b!58182 (= e!38309 e!38308)))

(declare-fun c!7306 () Bool)

(assert (=> b!58182 (= c!7306 e!38307)))

(declare-fun res!32455 () Bool)

(assert (=> b!58182 (=> (not res!32455) (not e!38307))))

(assert (=> b!58182 (= res!32455 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58183 () Bool)

(declare-fun lt!23271 () Unit!1488)

(declare-fun lt!23267 () Unit!1488)

(assert (=> b!58183 (= lt!23271 lt!23267)))

(declare-fun lt!23272 () (_ BitVec 64))

(declare-fun lt!23268 () ListLongMap!1373)

(declare-fun lt!23270 () V!2835)

(declare-fun lt!23269 () (_ BitVec 64))

(assert (=> b!58183 (not (contains!688 (+!80 lt!23268 (tuple2!2039 lt!23269 lt!23270)) lt!23272))))

(assert (=> b!58183 (= lt!23267 (addStillNotContains!16 lt!23268 lt!23269 lt!23270 lt!23272))))

(assert (=> b!58183 (= lt!23272 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!58183 (= lt!23270 (get!1073 (select (arr!1775 (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!58183 (= lt!23269 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58183 (= lt!23268 call!4239)))

(assert (=> b!58183 (= e!38306 (+!80 call!4239 (tuple2!2039 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (get!1073 (select (arr!1775 (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10909 c!7303) b!58181))

(assert (= (and d!10909 (not c!7303)) b!58179))

(assert (= (and b!58179 c!7304) b!58183))

(assert (= (and b!58179 (not c!7304)) b!58178))

(assert (= (or b!58183 b!58178) bm!4236))

(assert (= (and d!10909 res!32452) b!58175))

(assert (= (and b!58175 res!32454) b!58182))

(assert (= (and b!58182 res!32455) b!58177))

(assert (= (and b!58182 c!7306) b!58180))

(assert (= (and b!58182 (not c!7306)) b!58172))

(assert (= (and b!58180 res!32453) b!58173))

(assert (= (and b!58172 c!7305) b!58176))

(assert (= (and b!58172 (not c!7305)) b!58174))

(declare-fun b_lambda!2551 () Bool)

(assert (=> (not b_lambda!2551) (not b!58173)))

(assert (=> b!58173 t!4783))

(declare-fun b_and!3513 () Bool)

(assert (= b_and!3509 (and (=> t!4783 result!2361) b_and!3513)))

(assert (=> b!58173 t!4785))

(declare-fun b_and!3515 () Bool)

(assert (= b_and!3511 (and (=> t!4785 result!2363) b_and!3515)))

(declare-fun b_lambda!2553 () Bool)

(assert (=> (not b_lambda!2553) (not b!58183)))

(assert (=> b!58183 t!4783))

(declare-fun b_and!3517 () Bool)

(assert (= b_and!3513 (and (=> t!4783 result!2361) b_and!3517)))

(assert (=> b!58183 t!4785))

(declare-fun b_and!3519 () Bool)

(assert (= b_and!3515 (and (=> t!4785 result!2363) b_and!3519)))

(declare-fun m!49419 () Bool)

(assert (=> d!10909 m!49419))

(assert (=> d!10909 m!48395))

(assert (=> b!58179 m!48345))

(assert (=> b!58179 m!48345))

(assert (=> b!58179 m!48383))

(assert (=> b!58173 m!48345))

(assert (=> b!58173 m!48339))

(assert (=> b!58173 m!48345))

(declare-fun m!49421 () Bool)

(assert (=> b!58173 m!49421))

(assert (=> b!58173 m!48341))

(assert (=> b!58173 m!48341))

(assert (=> b!58173 m!48339))

(assert (=> b!58173 m!48343))

(assert (=> b!58177 m!48345))

(assert (=> b!58177 m!48345))

(assert (=> b!58177 m!48383))

(assert (=> b!58180 m!48345))

(assert (=> b!58180 m!48345))

(declare-fun m!49423 () Bool)

(assert (=> b!58180 m!49423))

(declare-fun m!49425 () Bool)

(assert (=> b!58176 m!49425))

(declare-fun m!49427 () Bool)

(assert (=> b!58174 m!49427))

(assert (=> b!58183 m!48345))

(declare-fun m!49429 () Bool)

(assert (=> b!58183 m!49429))

(declare-fun m!49431 () Bool)

(assert (=> b!58183 m!49431))

(assert (=> b!58183 m!49429))

(assert (=> b!58183 m!48339))

(assert (=> b!58183 m!48341))

(assert (=> b!58183 m!48341))

(assert (=> b!58183 m!48339))

(assert (=> b!58183 m!48343))

(declare-fun m!49433 () Bool)

(assert (=> b!58183 m!49433))

(declare-fun m!49435 () Bool)

(assert (=> b!58183 m!49435))

(assert (=> bm!4236 m!49425))

(declare-fun m!49437 () Bool)

(assert (=> b!58175 m!49437))

(assert (=> bm!4164 d!10909))

(assert (=> bm!4171 d!10743))

(declare-fun b!58184 () Bool)

(declare-fun e!38310 () Option!128)

(assert (=> b!58184 (= e!38310 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22852)))))))

(declare-fun d!10911 () Bool)

(declare-fun c!7307 () Bool)

(assert (=> d!10911 (= c!7307 (and ((_ is Cons!1445) (toList!702 lt!22852)) (= (_1!1029 (h!2025 (toList!702 lt!22852))) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10911 (= (getValueByKey!122 (toList!702 lt!22852) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) e!38310)))

(declare-fun b!58187 () Bool)

(declare-fun e!38311 () Option!128)

(assert (=> b!58187 (= e!38311 None!126)))

(declare-fun b!58185 () Bool)

(assert (=> b!58185 (= e!38310 e!38311)))

(declare-fun c!7308 () Bool)

(assert (=> b!58185 (= c!7308 (and ((_ is Cons!1445) (toList!702 lt!22852)) (not (= (_1!1029 (h!2025 (toList!702 lt!22852))) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!58186 () Bool)

(assert (=> b!58186 (= e!38311 (getValueByKey!122 (t!4775 (toList!702 lt!22852)) (_1!1029 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!10911 c!7307) b!58184))

(assert (= (and d!10911 (not c!7307)) b!58185))

(assert (= (and b!58185 c!7308) b!58186))

(assert (= (and b!58185 (not c!7308)) b!58187))

(declare-fun m!49439 () Bool)

(assert (=> b!58186 m!49439))

(assert (=> b!57605 d!10911))

(declare-fun d!10913 () Bool)

(assert (=> d!10913 (= (get!1076 (getValueByKey!122 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2369 (getValueByKey!122 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10697 d!10913))

(declare-fun b!58188 () Bool)

(declare-fun e!38312 () Option!128)

(assert (=> b!58188 (= e!38312 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22695)))))))

(declare-fun d!10915 () Bool)

(declare-fun c!7309 () Bool)

(assert (=> d!10915 (= c!7309 (and ((_ is Cons!1445) (toList!702 lt!22695)) (= (_1!1029 (h!2025 (toList!702 lt!22695))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10915 (= (getValueByKey!122 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000) e!38312)))

(declare-fun b!58191 () Bool)

(declare-fun e!38313 () Option!128)

(assert (=> b!58191 (= e!38313 None!126)))

(declare-fun b!58189 () Bool)

(assert (=> b!58189 (= e!38312 e!38313)))

(declare-fun c!7310 () Bool)

(assert (=> b!58189 (= c!7310 (and ((_ is Cons!1445) (toList!702 lt!22695)) (not (= (_1!1029 (h!2025 (toList!702 lt!22695))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58190 () Bool)

(assert (=> b!58190 (= e!38313 (getValueByKey!122 (t!4775 (toList!702 lt!22695)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!10915 c!7309) b!58188))

(assert (= (and d!10915 (not c!7309)) b!58189))

(assert (= (and b!58189 c!7310) b!58190))

(assert (= (and b!58189 (not c!7310)) b!58191))

(declare-fun m!49441 () Bool)

(assert (=> b!58190 m!49441))

(assert (=> d!10697 d!10915))

(declare-fun d!10917 () Bool)

(assert (=> d!10917 (= (get!1076 (getValueByKey!122 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2369 (getValueByKey!122 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!10659 d!10917))

(assert (=> d!10659 d!10887))

(declare-fun d!10919 () Bool)

(declare-fun lt!23273 () Bool)

(assert (=> d!10919 (= lt!23273 (select (content!61 (toList!702 lt!22856)) (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun e!38314 () Bool)

(assert (=> d!10919 (= lt!23273 e!38314)))

(declare-fun res!32456 () Bool)

(assert (=> d!10919 (=> (not res!32456) (not e!38314))))

(assert (=> d!10919 (= res!32456 ((_ is Cons!1445) (toList!702 lt!22856)))))

(assert (=> d!10919 (= (contains!690 (toList!702 lt!22856) (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!23273)))

(declare-fun b!58192 () Bool)

(declare-fun e!38315 () Bool)

(assert (=> b!58192 (= e!38314 e!38315)))

(declare-fun res!32457 () Bool)

(assert (=> b!58192 (=> res!32457 e!38315)))

(assert (=> b!58192 (= res!32457 (= (h!2025 (toList!702 lt!22856)) (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!58193 () Bool)

(assert (=> b!58193 (= e!38315 (contains!690 (t!4775 (toList!702 lt!22856)) (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(assert (= (and d!10919 res!32456) b!58192))

(assert (= (and b!58192 (not res!32457)) b!58193))

(declare-fun m!49443 () Bool)

(assert (=> d!10919 m!49443))

(declare-fun m!49445 () Bool)

(assert (=> d!10919 m!49445))

(declare-fun m!49447 () Bool)

(assert (=> b!58193 m!49447))

(assert (=> b!57608 d!10919))

(assert (=> d!10631 d!10635))

(assert (=> d!10631 d!10633))

(declare-fun d!10921 () Bool)

(assert (=> d!10921 (contains!688 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22700)))

(assert (=> d!10921 true))

(declare-fun _$35!297 () Unit!1488)

(assert (=> d!10921 (= (choose!297 lt!22702 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22700) _$35!297)))

(declare-fun bs!2515 () Bool)

(assert (= bs!2515 d!10921))

(assert (=> bs!2515 m!48219))

(assert (=> bs!2515 m!48219))

(assert (=> bs!2515 m!48235))

(assert (=> d!10631 d!10921))

(declare-fun d!10923 () Bool)

(declare-fun e!38317 () Bool)

(assert (=> d!10923 e!38317))

(declare-fun res!32458 () Bool)

(assert (=> d!10923 (=> res!32458 e!38317)))

(declare-fun lt!23274 () Bool)

(assert (=> d!10923 (= res!32458 (not lt!23274))))

(declare-fun lt!23275 () Bool)

(assert (=> d!10923 (= lt!23274 lt!23275)))

(declare-fun lt!23277 () Unit!1488)

(declare-fun e!38316 () Unit!1488)

(assert (=> d!10923 (= lt!23277 e!38316)))

(declare-fun c!7311 () Bool)

(assert (=> d!10923 (= c!7311 lt!23275)))

(assert (=> d!10923 (= lt!23275 (containsKey!126 (toList!702 lt!22702) lt!22700))))

(assert (=> d!10923 (= (contains!688 lt!22702 lt!22700) lt!23274)))

(declare-fun b!58195 () Bool)

(declare-fun lt!23276 () Unit!1488)

(assert (=> b!58195 (= e!38316 lt!23276)))

(assert (=> b!58195 (= lt!23276 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22702) lt!22700))))

(assert (=> b!58195 (isDefined!76 (getValueByKey!122 (toList!702 lt!22702) lt!22700))))

(declare-fun b!58196 () Bool)

(declare-fun Unit!1529 () Unit!1488)

(assert (=> b!58196 (= e!38316 Unit!1529)))

(declare-fun b!58197 () Bool)

(assert (=> b!58197 (= e!38317 (isDefined!76 (getValueByKey!122 (toList!702 lt!22702) lt!22700)))))

(assert (= (and d!10923 c!7311) b!58195))

(assert (= (and d!10923 (not c!7311)) b!58196))

(assert (= (and d!10923 (not res!32458)) b!58197))

(declare-fun m!49449 () Bool)

(assert (=> d!10923 m!49449))

(declare-fun m!49451 () Bool)

(assert (=> b!58195 m!49451))

(declare-fun m!49453 () Bool)

(assert (=> b!58195 m!49453))

(assert (=> b!58195 m!49453))

(declare-fun m!49455 () Bool)

(assert (=> b!58195 m!49455))

(assert (=> b!58197 m!49453))

(assert (=> b!58197 m!49453))

(assert (=> b!58197 m!49455))

(assert (=> d!10631 d!10923))

(assert (=> d!10703 d!10735))

(assert (=> b!57861 d!10571))

(declare-fun d!10925 () Bool)

(declare-fun e!38318 () Bool)

(assert (=> d!10925 e!38318))

(declare-fun res!32460 () Bool)

(assert (=> d!10925 (=> (not res!32460) (not e!38318))))

(declare-fun lt!23280 () ListLongMap!1373)

(assert (=> d!10925 (= res!32460 (contains!688 lt!23280 (_1!1029 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16)))))))

(declare-fun lt!23281 () List!1449)

(assert (=> d!10925 (= lt!23280 (ListLongMap!1374 lt!23281))))

(declare-fun lt!23278 () Unit!1488)

(declare-fun lt!23279 () Unit!1488)

(assert (=> d!10925 (= lt!23278 lt!23279)))

(assert (=> d!10925 (= (getValueByKey!122 lt!23281 (_1!1029 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10925 (= lt!23279 (lemmaContainsTupThenGetReturnValue!41 lt!23281 (_1!1029 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10925 (= lt!23281 (insertStrictlySorted!43 (toList!702 lt!22817) (_1!1029 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10925 (= (+!80 lt!22817 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16))) lt!23280)))

(declare-fun b!58198 () Bool)

(declare-fun res!32459 () Bool)

(assert (=> b!58198 (=> (not res!32459) (not e!38318))))

(assert (=> b!58198 (= res!32459 (= (getValueByKey!122 (toList!702 lt!23280) (_1!1029 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16))))))))

(declare-fun b!58199 () Bool)

(assert (=> b!58199 (= e!38318 (contains!690 (toList!702 lt!23280) (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16))))))

(assert (= (and d!10925 res!32460) b!58198))

(assert (= (and b!58198 res!32459) b!58199))

(declare-fun m!49457 () Bool)

(assert (=> d!10925 m!49457))

(declare-fun m!49459 () Bool)

(assert (=> d!10925 m!49459))

(declare-fun m!49461 () Bool)

(assert (=> d!10925 m!49461))

(declare-fun m!49463 () Bool)

(assert (=> d!10925 m!49463))

(declare-fun m!49465 () Bool)

(assert (=> b!58198 m!49465))

(declare-fun m!49467 () Bool)

(assert (=> b!58199 m!49467))

(assert (=> b!57543 d!10925))

(declare-fun d!10927 () Bool)

(assert (=> d!10927 (= (apply!65 (+!80 lt!22809 (tuple2!2039 lt!22803 (minValue!1940 newMap!16))) lt!22796) (apply!65 lt!22809 lt!22796))))

(declare-fun lt!23282 () Unit!1488)

(assert (=> d!10927 (= lt!23282 (choose!296 lt!22809 lt!22803 (minValue!1940 newMap!16) lt!22796))))

(declare-fun e!38319 () Bool)

(assert (=> d!10927 e!38319))

(declare-fun res!32461 () Bool)

(assert (=> d!10927 (=> (not res!32461) (not e!38319))))

(assert (=> d!10927 (= res!32461 (contains!688 lt!22809 lt!22796))))

(assert (=> d!10927 (= (addApplyDifferent!41 lt!22809 lt!22803 (minValue!1940 newMap!16) lt!22796) lt!23282)))

(declare-fun b!58200 () Bool)

(assert (=> b!58200 (= e!38319 (not (= lt!22796 lt!22803)))))

(assert (= (and d!10927 res!32461) b!58200))

(assert (=> d!10927 m!48351))

(declare-fun m!49469 () Bool)

(assert (=> d!10927 m!49469))

(assert (=> d!10927 m!48351))

(assert (=> d!10927 m!48361))

(declare-fun m!49471 () Bool)

(assert (=> d!10927 m!49471))

(assert (=> d!10927 m!48371))

(assert (=> b!57543 d!10927))

(declare-fun d!10929 () Bool)

(declare-fun e!38320 () Bool)

(assert (=> d!10929 e!38320))

(declare-fun res!32463 () Bool)

(assert (=> d!10929 (=> (not res!32463) (not e!38320))))

(declare-fun lt!23285 () ListLongMap!1373)

(assert (=> d!10929 (= res!32463 (contains!688 lt!23285 (_1!1029 (tuple2!2039 lt!22802 (minValue!1940 newMap!16)))))))

(declare-fun lt!23286 () List!1449)

(assert (=> d!10929 (= lt!23285 (ListLongMap!1374 lt!23286))))

(declare-fun lt!23283 () Unit!1488)

(declare-fun lt!23284 () Unit!1488)

(assert (=> d!10929 (= lt!23283 lt!23284)))

(assert (=> d!10929 (= (getValueByKey!122 lt!23286 (_1!1029 (tuple2!2039 lt!22802 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22802 (minValue!1940 newMap!16)))))))

(assert (=> d!10929 (= lt!23284 (lemmaContainsTupThenGetReturnValue!41 lt!23286 (_1!1029 (tuple2!2039 lt!22802 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22802 (minValue!1940 newMap!16)))))))

(assert (=> d!10929 (= lt!23286 (insertStrictlySorted!43 (toList!702 lt!22806) (_1!1029 (tuple2!2039 lt!22802 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22802 (minValue!1940 newMap!16)))))))

(assert (=> d!10929 (= (+!80 lt!22806 (tuple2!2039 lt!22802 (minValue!1940 newMap!16))) lt!23285)))

(declare-fun b!58201 () Bool)

(declare-fun res!32462 () Bool)

(assert (=> b!58201 (=> (not res!32462) (not e!38320))))

(assert (=> b!58201 (= res!32462 (= (getValueByKey!122 (toList!702 lt!23285) (_1!1029 (tuple2!2039 lt!22802 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22802 (minValue!1940 newMap!16))))))))

(declare-fun b!58202 () Bool)

(assert (=> b!58202 (= e!38320 (contains!690 (toList!702 lt!23285) (tuple2!2039 lt!22802 (minValue!1940 newMap!16))))))

(assert (= (and d!10929 res!32463) b!58201))

(assert (= (and b!58201 res!32462) b!58202))

(declare-fun m!49473 () Bool)

(assert (=> d!10929 m!49473))

(declare-fun m!49475 () Bool)

(assert (=> d!10929 m!49475))

(declare-fun m!49477 () Bool)

(assert (=> d!10929 m!49477))

(declare-fun m!49479 () Bool)

(assert (=> d!10929 m!49479))

(declare-fun m!49481 () Bool)

(assert (=> b!58201 m!49481))

(declare-fun m!49483 () Bool)

(assert (=> b!58202 m!49483))

(assert (=> b!57543 d!10929))

(declare-fun d!10931 () Bool)

(declare-fun e!38321 () Bool)

(assert (=> d!10931 e!38321))

(declare-fun res!32465 () Bool)

(assert (=> d!10931 (=> (not res!32465) (not e!38321))))

(declare-fun lt!23289 () ListLongMap!1373)

(assert (=> d!10931 (= res!32465 (contains!688 lt!23289 (_1!1029 (tuple2!2039 lt!22803 (minValue!1940 newMap!16)))))))

(declare-fun lt!23290 () List!1449)

(assert (=> d!10931 (= lt!23289 (ListLongMap!1374 lt!23290))))

(declare-fun lt!23287 () Unit!1488)

(declare-fun lt!23288 () Unit!1488)

(assert (=> d!10931 (= lt!23287 lt!23288)))

(assert (=> d!10931 (= (getValueByKey!122 lt!23290 (_1!1029 (tuple2!2039 lt!22803 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22803 (minValue!1940 newMap!16)))))))

(assert (=> d!10931 (= lt!23288 (lemmaContainsTupThenGetReturnValue!41 lt!23290 (_1!1029 (tuple2!2039 lt!22803 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22803 (minValue!1940 newMap!16)))))))

(assert (=> d!10931 (= lt!23290 (insertStrictlySorted!43 (toList!702 lt!22809) (_1!1029 (tuple2!2039 lt!22803 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22803 (minValue!1940 newMap!16)))))))

(assert (=> d!10931 (= (+!80 lt!22809 (tuple2!2039 lt!22803 (minValue!1940 newMap!16))) lt!23289)))

(declare-fun b!58203 () Bool)

(declare-fun res!32464 () Bool)

(assert (=> b!58203 (=> (not res!32464) (not e!38321))))

(assert (=> b!58203 (= res!32464 (= (getValueByKey!122 (toList!702 lt!23289) (_1!1029 (tuple2!2039 lt!22803 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22803 (minValue!1940 newMap!16))))))))

(declare-fun b!58204 () Bool)

(assert (=> b!58204 (= e!38321 (contains!690 (toList!702 lt!23289) (tuple2!2039 lt!22803 (minValue!1940 newMap!16))))))

(assert (= (and d!10931 res!32465) b!58203))

(assert (= (and b!58203 res!32464) b!58204))

(declare-fun m!49485 () Bool)

(assert (=> d!10931 m!49485))

(declare-fun m!49487 () Bool)

(assert (=> d!10931 m!49487))

(declare-fun m!49489 () Bool)

(assert (=> d!10931 m!49489))

(declare-fun m!49491 () Bool)

(assert (=> d!10931 m!49491))

(declare-fun m!49493 () Bool)

(assert (=> b!58203 m!49493))

(declare-fun m!49495 () Bool)

(assert (=> b!58204 m!49495))

(assert (=> b!57543 d!10931))

(declare-fun d!10933 () Bool)

(declare-fun e!38322 () Bool)

(assert (=> d!10933 e!38322))

(declare-fun res!32467 () Bool)

(assert (=> d!10933 (=> (not res!32467) (not e!38322))))

(declare-fun lt!23293 () ListLongMap!1373)

(assert (=> d!10933 (= res!32467 (contains!688 lt!23293 (_1!1029 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16)))))))

(declare-fun lt!23294 () List!1449)

(assert (=> d!10933 (= lt!23293 (ListLongMap!1374 lt!23294))))

(declare-fun lt!23291 () Unit!1488)

(declare-fun lt!23292 () Unit!1488)

(assert (=> d!10933 (= lt!23291 lt!23292)))

(assert (=> d!10933 (= (getValueByKey!122 lt!23294 (_1!1029 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10933 (= lt!23292 (lemmaContainsTupThenGetReturnValue!41 lt!23294 (_1!1029 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10933 (= lt!23294 (insertStrictlySorted!43 (toList!702 lt!22797) (_1!1029 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16)))))))

(assert (=> d!10933 (= (+!80 lt!22797 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16))) lt!23293)))

(declare-fun b!58205 () Bool)

(declare-fun res!32466 () Bool)

(assert (=> b!58205 (=> (not res!32466) (not e!38322))))

(assert (=> b!58205 (= res!32466 (= (getValueByKey!122 (toList!702 lt!23293) (_1!1029 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16))))))))

(declare-fun b!58206 () Bool)

(assert (=> b!58206 (= e!38322 (contains!690 (toList!702 lt!23293) (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16))))))

(assert (= (and d!10933 res!32467) b!58205))

(assert (= (and b!58205 res!32466) b!58206))

(declare-fun m!49497 () Bool)

(assert (=> d!10933 m!49497))

(declare-fun m!49499 () Bool)

(assert (=> d!10933 m!49499))

(declare-fun m!49501 () Bool)

(assert (=> d!10933 m!49501))

(declare-fun m!49503 () Bool)

(assert (=> d!10933 m!49503))

(declare-fun m!49505 () Bool)

(assert (=> b!58205 m!49505))

(declare-fun m!49507 () Bool)

(assert (=> b!58206 m!49507))

(assert (=> b!57543 d!10933))

(declare-fun d!10935 () Bool)

(assert (=> d!10935 (contains!688 (+!80 lt!22817 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16))) lt!22815)))

(declare-fun lt!23295 () Unit!1488)

(assert (=> d!10935 (= lt!23295 (choose!297 lt!22817 lt!22799 (zeroValue!1940 newMap!16) lt!22815))))

(assert (=> d!10935 (contains!688 lt!22817 lt!22815)))

(assert (=> d!10935 (= (addStillContains!41 lt!22817 lt!22799 (zeroValue!1940 newMap!16) lt!22815) lt!23295)))

(declare-fun bs!2516 () Bool)

(assert (= bs!2516 d!10935))

(assert (=> bs!2516 m!48357))

(assert (=> bs!2516 m!48357))

(assert (=> bs!2516 m!48373))

(declare-fun m!49509 () Bool)

(assert (=> bs!2516 m!49509))

(declare-fun m!49511 () Bool)

(assert (=> bs!2516 m!49511))

(assert (=> b!57543 d!10935))

(declare-fun d!10937 () Bool)

(assert (=> d!10937 (= (apply!65 lt!22809 lt!22796) (get!1076 (getValueByKey!122 (toList!702 lt!22809) lt!22796)))))

(declare-fun bs!2517 () Bool)

(assert (= bs!2517 d!10937))

(declare-fun m!49513 () Bool)

(assert (=> bs!2517 m!49513))

(assert (=> bs!2517 m!49513))

(declare-fun m!49515 () Bool)

(assert (=> bs!2517 m!49515))

(assert (=> b!57543 d!10937))

(declare-fun d!10939 () Bool)

(assert (=> d!10939 (= (apply!65 (+!80 lt!22797 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16))) lt!22804) (apply!65 lt!22797 lt!22804))))

(declare-fun lt!23296 () Unit!1488)

(assert (=> d!10939 (= lt!23296 (choose!296 lt!22797 lt!22813 (zeroValue!1940 newMap!16) lt!22804))))

(declare-fun e!38323 () Bool)

(assert (=> d!10939 e!38323))

(declare-fun res!32468 () Bool)

(assert (=> d!10939 (=> (not res!32468) (not e!38323))))

(assert (=> d!10939 (= res!32468 (contains!688 lt!22797 lt!22804))))

(assert (=> d!10939 (= (addApplyDifferent!41 lt!22797 lt!22813 (zeroValue!1940 newMap!16) lt!22804) lt!23296)))

(declare-fun b!58207 () Bool)

(assert (=> b!58207 (= e!38323 (not (= lt!22804 lt!22813)))))

(assert (= (and d!10939 res!32468) b!58207))

(assert (=> d!10939 m!48359))

(declare-fun m!49517 () Bool)

(assert (=> d!10939 m!49517))

(assert (=> d!10939 m!48359))

(assert (=> d!10939 m!48377))

(declare-fun m!49519 () Bool)

(assert (=> d!10939 m!49519))

(assert (=> d!10939 m!48369))

(assert (=> b!57543 d!10939))

(declare-fun d!10941 () Bool)

(declare-fun e!38325 () Bool)

(assert (=> d!10941 e!38325))

(declare-fun res!32469 () Bool)

(assert (=> d!10941 (=> res!32469 e!38325)))

(declare-fun lt!23297 () Bool)

(assert (=> d!10941 (= res!32469 (not lt!23297))))

(declare-fun lt!23298 () Bool)

(assert (=> d!10941 (= lt!23297 lt!23298)))

(declare-fun lt!23300 () Unit!1488)

(declare-fun e!38324 () Unit!1488)

(assert (=> d!10941 (= lt!23300 e!38324)))

(declare-fun c!7312 () Bool)

(assert (=> d!10941 (= c!7312 lt!23298)))

(assert (=> d!10941 (= lt!23298 (containsKey!126 (toList!702 (+!80 lt!22817 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16)))) lt!22815))))

(assert (=> d!10941 (= (contains!688 (+!80 lt!22817 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16))) lt!22815) lt!23297)))

(declare-fun b!58208 () Bool)

(declare-fun lt!23299 () Unit!1488)

(assert (=> b!58208 (= e!38324 lt!23299)))

(assert (=> b!58208 (= lt!23299 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 (+!80 lt!22817 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16)))) lt!22815))))

(assert (=> b!58208 (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22817 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16)))) lt!22815))))

(declare-fun b!58209 () Bool)

(declare-fun Unit!1530 () Unit!1488)

(assert (=> b!58209 (= e!38324 Unit!1530)))

(declare-fun b!58210 () Bool)

(assert (=> b!58210 (= e!38325 (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22817 (tuple2!2039 lt!22799 (zeroValue!1940 newMap!16)))) lt!22815)))))

(assert (= (and d!10941 c!7312) b!58208))

(assert (= (and d!10941 (not c!7312)) b!58209))

(assert (= (and d!10941 (not res!32469)) b!58210))

(declare-fun m!49521 () Bool)

(assert (=> d!10941 m!49521))

(declare-fun m!49523 () Bool)

(assert (=> b!58208 m!49523))

(declare-fun m!49525 () Bool)

(assert (=> b!58208 m!49525))

(assert (=> b!58208 m!49525))

(declare-fun m!49527 () Bool)

(assert (=> b!58208 m!49527))

(assert (=> b!58210 m!49525))

(assert (=> b!58210 m!49525))

(assert (=> b!58210 m!49527))

(assert (=> b!57543 d!10941))

(declare-fun d!10943 () Bool)

(assert (=> d!10943 (= (apply!65 (+!80 lt!22797 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16))) lt!22804) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22797 (tuple2!2039 lt!22813 (zeroValue!1940 newMap!16)))) lt!22804)))))

(declare-fun bs!2518 () Bool)

(assert (= bs!2518 d!10943))

(declare-fun m!49529 () Bool)

(assert (=> bs!2518 m!49529))

(assert (=> bs!2518 m!49529))

(declare-fun m!49531 () Bool)

(assert (=> bs!2518 m!49531))

(assert (=> b!57543 d!10943))

(declare-fun d!10945 () Bool)

(assert (=> d!10945 (= (apply!65 (+!80 lt!22806 (tuple2!2039 lt!22802 (minValue!1940 newMap!16))) lt!22798) (apply!65 lt!22806 lt!22798))))

(declare-fun lt!23301 () Unit!1488)

(assert (=> d!10945 (= lt!23301 (choose!296 lt!22806 lt!22802 (minValue!1940 newMap!16) lt!22798))))

(declare-fun e!38326 () Bool)

(assert (=> d!10945 e!38326))

(declare-fun res!32470 () Bool)

(assert (=> d!10945 (=> (not res!32470) (not e!38326))))

(assert (=> d!10945 (= res!32470 (contains!688 lt!22806 lt!22798))))

(assert (=> d!10945 (= (addApplyDifferent!41 lt!22806 lt!22802 (minValue!1940 newMap!16) lt!22798) lt!23301)))

(declare-fun b!58211 () Bool)

(assert (=> b!58211 (= e!38326 (not (= lt!22798 lt!22802)))))

(assert (= (and d!10945 res!32470) b!58211))

(assert (=> d!10945 m!48365))

(declare-fun m!49533 () Bool)

(assert (=> d!10945 m!49533))

(assert (=> d!10945 m!48365))

(assert (=> d!10945 m!48367))

(declare-fun m!49535 () Bool)

(assert (=> d!10945 m!49535))

(assert (=> d!10945 m!48379))

(assert (=> b!57543 d!10945))

(assert (=> b!57543 d!10909))

(declare-fun d!10947 () Bool)

(assert (=> d!10947 (= (apply!65 lt!22797 lt!22804) (get!1076 (getValueByKey!122 (toList!702 lt!22797) lt!22804)))))

(declare-fun bs!2519 () Bool)

(assert (= bs!2519 d!10947))

(declare-fun m!49537 () Bool)

(assert (=> bs!2519 m!49537))

(assert (=> bs!2519 m!49537))

(declare-fun m!49539 () Bool)

(assert (=> bs!2519 m!49539))

(assert (=> b!57543 d!10947))

(declare-fun d!10949 () Bool)

(assert (=> d!10949 (= (apply!65 (+!80 lt!22806 (tuple2!2039 lt!22802 (minValue!1940 newMap!16))) lt!22798) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22806 (tuple2!2039 lt!22802 (minValue!1940 newMap!16)))) lt!22798)))))

(declare-fun bs!2520 () Bool)

(assert (= bs!2520 d!10949))

(declare-fun m!49541 () Bool)

(assert (=> bs!2520 m!49541))

(assert (=> bs!2520 m!49541))

(declare-fun m!49543 () Bool)

(assert (=> bs!2520 m!49543))

(assert (=> b!57543 d!10949))

(declare-fun d!10951 () Bool)

(assert (=> d!10951 (= (apply!65 (+!80 lt!22809 (tuple2!2039 lt!22803 (minValue!1940 newMap!16))) lt!22796) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22809 (tuple2!2039 lt!22803 (minValue!1940 newMap!16)))) lt!22796)))))

(declare-fun bs!2521 () Bool)

(assert (= bs!2521 d!10951))

(declare-fun m!49545 () Bool)

(assert (=> bs!2521 m!49545))

(assert (=> bs!2521 m!49545))

(declare-fun m!49547 () Bool)

(assert (=> bs!2521 m!49547))

(assert (=> b!57543 d!10951))

(declare-fun d!10953 () Bool)

(assert (=> d!10953 (= (apply!65 lt!22806 lt!22798) (get!1076 (getValueByKey!122 (toList!702 lt!22806) lt!22798)))))

(declare-fun bs!2522 () Bool)

(assert (= bs!2522 d!10953))

(declare-fun m!49549 () Bool)

(assert (=> bs!2522 m!49549))

(assert (=> bs!2522 m!49549))

(declare-fun m!49551 () Bool)

(assert (=> bs!2522 m!49551))

(assert (=> b!57543 d!10953))

(declare-fun lt!23302 () Bool)

(declare-fun d!10955 () Bool)

(assert (=> d!10955 (= lt!23302 (select (content!61 (toList!702 lt!22863)) (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun e!38327 () Bool)

(assert (=> d!10955 (= lt!23302 e!38327)))

(declare-fun res!32471 () Bool)

(assert (=> d!10955 (=> (not res!32471) (not e!38327))))

(assert (=> d!10955 (= res!32471 ((_ is Cons!1445) (toList!702 lt!22863)))))

(assert (=> d!10955 (= (contains!690 (toList!702 lt!22863) (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!23302)))

(declare-fun b!58212 () Bool)

(declare-fun e!38328 () Bool)

(assert (=> b!58212 (= e!38327 e!38328)))

(declare-fun res!32472 () Bool)

(assert (=> b!58212 (=> res!32472 e!38328)))

(assert (=> b!58212 (= res!32472 (= (h!2025 (toList!702 lt!22863)) (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!58213 () Bool)

(assert (=> b!58213 (= e!38328 (contains!690 (t!4775 (toList!702 lt!22863)) (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(assert (= (and d!10955 res!32471) b!58212))

(assert (= (and b!58212 (not res!32472)) b!58213))

(declare-fun m!49553 () Bool)

(assert (=> d!10955 m!49553))

(declare-fun m!49555 () Bool)

(assert (=> d!10955 m!49555))

(declare-fun m!49557 () Bool)

(assert (=> b!58213 m!49557))

(assert (=> b!57611 d!10955))

(declare-fun d!10957 () Bool)

(assert (=> d!10957 (= (apply!65 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!22683) (apply!65 lt!22691 lt!22683))))

(assert (=> d!10957 true))

(declare-fun _$34!753 () Unit!1488)

(assert (=> d!10957 (= (choose!296 lt!22691 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))) lt!22683) _$34!753)))

(declare-fun bs!2523 () Bool)

(assert (= bs!2523 d!10957))

(assert (=> bs!2523 m!48227))

(assert (=> bs!2523 m!48227))

(assert (=> bs!2523 m!48229))

(assert (=> bs!2523 m!48241))

(assert (=> d!10639 d!10957))

(assert (=> d!10639 d!10637))

(assert (=> d!10639 d!10621))

(declare-fun d!10959 () Bool)

(declare-fun e!38330 () Bool)

(assert (=> d!10959 e!38330))

(declare-fun res!32473 () Bool)

(assert (=> d!10959 (=> res!32473 e!38330)))

(declare-fun lt!23303 () Bool)

(assert (=> d!10959 (= res!32473 (not lt!23303))))

(declare-fun lt!23304 () Bool)

(assert (=> d!10959 (= lt!23303 lt!23304)))

(declare-fun lt!23306 () Unit!1488)

(declare-fun e!38329 () Unit!1488)

(assert (=> d!10959 (= lt!23306 e!38329)))

(declare-fun c!7313 () Bool)

(assert (=> d!10959 (= c!7313 lt!23304)))

(assert (=> d!10959 (= lt!23304 (containsKey!126 (toList!702 lt!22691) lt!22683))))

(assert (=> d!10959 (= (contains!688 lt!22691 lt!22683) lt!23303)))

(declare-fun b!58214 () Bool)

(declare-fun lt!23305 () Unit!1488)

(assert (=> b!58214 (= e!38329 lt!23305)))

(assert (=> b!58214 (= lt!23305 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22691) lt!22683))))

(assert (=> b!58214 (isDefined!76 (getValueByKey!122 (toList!702 lt!22691) lt!22683))))

(declare-fun b!58215 () Bool)

(declare-fun Unit!1531 () Unit!1488)

(assert (=> b!58215 (= e!38329 Unit!1531)))

(declare-fun b!58216 () Bool)

(assert (=> b!58216 (= e!38330 (isDefined!76 (getValueByKey!122 (toList!702 lt!22691) lt!22683)))))

(assert (= (and d!10959 c!7313) b!58214))

(assert (= (and d!10959 (not c!7313)) b!58215))

(assert (= (and d!10959 (not res!32473)) b!58216))

(declare-fun m!49559 () Bool)

(assert (=> d!10959 m!49559))

(declare-fun m!49561 () Bool)

(assert (=> b!58214 m!49561))

(assert (=> b!58214 m!48519))

(assert (=> b!58214 m!48519))

(declare-fun m!49563 () Bool)

(assert (=> b!58214 m!49563))

(assert (=> b!58216 m!48519))

(assert (=> b!58216 m!48519))

(assert (=> b!58216 m!49563))

(assert (=> d!10639 d!10959))

(assert (=> d!10639 d!10629))

(declare-fun d!10961 () Bool)

(assert (not d!10961))

(assert (=> b!57575 d!10961))

(declare-fun d!10963 () Bool)

(assert (=> d!10963 (isDefined!76 (getValueByKey!122 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun lt!23307 () Unit!1488)

(assert (=> d!10963 (= lt!23307 (choose!298 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!38331 () Bool)

(assert (=> d!10963 e!38331))

(declare-fun res!32474 () Bool)

(assert (=> d!10963 (=> (not res!32474) (not e!38331))))

(assert (=> d!10963 (= res!32474 (isStrictlySorted!278 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))))

(assert (=> d!10963 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) lt!23307)))

(declare-fun b!58217 () Bool)

(assert (=> b!58217 (= e!38331 (containsKey!126 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10963 res!32474) b!58217))

(assert (=> d!10963 m!48105))

(assert (=> d!10963 m!48885))

(assert (=> d!10963 m!48885))

(assert (=> d!10963 m!48887))

(assert (=> d!10963 m!48105))

(declare-fun m!49565 () Bool)

(assert (=> d!10963 m!49565))

(declare-fun m!49567 () Bool)

(assert (=> d!10963 m!49567))

(assert (=> b!58217 m!48105))

(assert (=> b!58217 m!48881))

(assert (=> b!57869 d!10963))

(declare-fun d!10965 () Bool)

(assert (=> d!10965 (= (isDefined!76 (getValueByKey!122 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))) (not (isEmpty!295 (getValueByKey!122 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun bs!2524 () Bool)

(assert (= bs!2524 d!10965))

(assert (=> bs!2524 m!48885))

(declare-fun m!49569 () Bool)

(assert (=> bs!2524 m!49569))

(assert (=> b!57869 d!10965))

(declare-fun b!58218 () Bool)

(declare-fun e!38332 () Option!128)

(assert (=> b!58218 (= e!38332 (Some!127 (_2!1029 (h!2025 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))))))

(declare-fun c!7314 () Bool)

(declare-fun d!10967 () Bool)

(assert (=> d!10967 (= c!7314 (and ((_ is Cons!1445) (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))) (= (_1!1029 (h!2025 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!10967 (= (getValueByKey!122 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) e!38332)))

(declare-fun b!58221 () Bool)

(declare-fun e!38333 () Option!128)

(assert (=> b!58221 (= e!38333 None!126)))

(declare-fun b!58219 () Bool)

(assert (=> b!58219 (= e!38332 e!38333)))

(declare-fun c!7315 () Bool)

(assert (=> b!58219 (= c!7315 (and ((_ is Cons!1445) (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))) (not (= (_1!1029 (h!2025 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))))

(declare-fun b!58220 () Bool)

(assert (=> b!58220 (= e!38333 (getValueByKey!122 (t!4775 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!10967 c!7314) b!58218))

(assert (= (and d!10967 (not c!7314)) b!58219))

(assert (= (and b!58219 c!7315) b!58220))

(assert (= (and b!58219 (not c!7315)) b!58221))

(assert (=> b!58220 m!48105))

(declare-fun m!49571 () Bool)

(assert (=> b!58220 m!49571))

(assert (=> b!57869 d!10967))

(declare-fun d!10969 () Bool)

(declare-fun e!38335 () Bool)

(assert (=> d!10969 e!38335))

(declare-fun res!32475 () Bool)

(assert (=> d!10969 (=> res!32475 e!38335)))

(declare-fun lt!23308 () Bool)

(assert (=> d!10969 (= res!32475 (not lt!23308))))

(declare-fun lt!23309 () Bool)

(assert (=> d!10969 (= lt!23308 lt!23309)))

(declare-fun lt!23311 () Unit!1488)

(declare-fun e!38334 () Unit!1488)

(assert (=> d!10969 (= lt!23311 e!38334)))

(declare-fun c!7316 () Bool)

(assert (=> d!10969 (= c!7316 lt!23309)))

(assert (=> d!10969 (= lt!23309 (containsKey!126 (toList!702 lt!22810) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!10969 (= (contains!688 lt!22810 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23308)))

(declare-fun b!58222 () Bool)

(declare-fun lt!23310 () Unit!1488)

(assert (=> b!58222 (= e!38334 lt!23310)))

(assert (=> b!58222 (= lt!23310 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22810) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58222 (isDefined!76 (getValueByKey!122 (toList!702 lt!22810) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58223 () Bool)

(declare-fun Unit!1532 () Unit!1488)

(assert (=> b!58223 (= e!38334 Unit!1532)))

(declare-fun b!58224 () Bool)

(assert (=> b!58224 (= e!38335 (isDefined!76 (getValueByKey!122 (toList!702 lt!22810) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10969 c!7316) b!58222))

(assert (= (and d!10969 (not c!7316)) b!58223))

(assert (= (and d!10969 (not res!32475)) b!58224))

(declare-fun m!49573 () Bool)

(assert (=> d!10969 m!49573))

(declare-fun m!49575 () Bool)

(assert (=> b!58222 m!49575))

(declare-fun m!49577 () Bool)

(assert (=> b!58222 m!49577))

(assert (=> b!58222 m!49577))

(declare-fun m!49579 () Bool)

(assert (=> b!58222 m!49579))

(assert (=> b!58224 m!49577))

(assert (=> b!58224 m!49577))

(assert (=> b!58224 m!49579))

(assert (=> bm!4166 d!10969))

(declare-fun d!10971 () Bool)

(declare-fun e!38337 () Bool)

(assert (=> d!10971 e!38337))

(declare-fun res!32476 () Bool)

(assert (=> d!10971 (=> res!32476 e!38337)))

(declare-fun lt!23312 () Bool)

(assert (=> d!10971 (= res!32476 (not lt!23312))))

(declare-fun lt!23313 () Bool)

(assert (=> d!10971 (= lt!23312 lt!23313)))

(declare-fun lt!23315 () Unit!1488)

(declare-fun e!38336 () Unit!1488)

(assert (=> d!10971 (= lt!23315 e!38336)))

(declare-fun c!7317 () Bool)

(assert (=> d!10971 (= c!7317 lt!23313)))

(assert (=> d!10971 (= lt!23313 (containsKey!126 (toList!702 lt!22928) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10971 (= (contains!688 lt!22928 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23312)))

(declare-fun b!58225 () Bool)

(declare-fun lt!23314 () Unit!1488)

(assert (=> b!58225 (= e!38336 lt!23314)))

(assert (=> b!58225 (= lt!23314 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22928) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> b!58225 (isDefined!76 (getValueByKey!122 (toList!702 lt!22928) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!58226 () Bool)

(declare-fun Unit!1533 () Unit!1488)

(assert (=> b!58226 (= e!38336 Unit!1533)))

(declare-fun b!58227 () Bool)

(assert (=> b!58227 (= e!38337 (isDefined!76 (getValueByKey!122 (toList!702 lt!22928) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!10971 c!7317) b!58225))

(assert (= (and d!10971 (not c!7317)) b!58226))

(assert (= (and d!10971 (not res!32476)) b!58227))

(declare-fun m!49581 () Bool)

(assert (=> d!10971 m!49581))

(declare-fun m!49583 () Bool)

(assert (=> b!58225 m!49583))

(assert (=> b!58225 m!48653))

(assert (=> b!58225 m!48653))

(declare-fun m!49585 () Bool)

(assert (=> b!58225 m!49585))

(assert (=> b!58227 m!48653))

(assert (=> b!58227 m!48653))

(assert (=> b!58227 m!49585))

(assert (=> d!10667 d!10971))

(declare-fun b!58228 () Bool)

(declare-fun e!38338 () Option!128)

(assert (=> b!58228 (= e!38338 (Some!127 (_2!1029 (h!2025 lt!22929))))))

(declare-fun d!10973 () Bool)

(declare-fun c!7318 () Bool)

(assert (=> d!10973 (= c!7318 (and ((_ is Cons!1445) lt!22929) (= (_1!1029 (h!2025 lt!22929)) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10973 (= (getValueByKey!122 lt!22929 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) e!38338)))

(declare-fun b!58231 () Bool)

(declare-fun e!38339 () Option!128)

(assert (=> b!58231 (= e!38339 None!126)))

(declare-fun b!58229 () Bool)

(assert (=> b!58229 (= e!38338 e!38339)))

(declare-fun c!7319 () Bool)

(assert (=> b!58229 (= c!7319 (and ((_ is Cons!1445) lt!22929) (not (= (_1!1029 (h!2025 lt!22929)) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!58230 () Bool)

(assert (=> b!58230 (= e!38339 (getValueByKey!122 (t!4775 lt!22929) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!10973 c!7318) b!58228))

(assert (= (and d!10973 (not c!7318)) b!58229))

(assert (= (and b!58229 c!7319) b!58230))

(assert (= (and b!58229 (not c!7319)) b!58231))

(declare-fun m!49587 () Bool)

(assert (=> b!58230 m!49587))

(assert (=> d!10667 d!10973))

(declare-fun d!10975 () Bool)

(assert (=> d!10975 (= (getValueByKey!122 lt!22929 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun lt!23316 () Unit!1488)

(assert (=> d!10975 (= lt!23316 (choose!305 lt!22929 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun e!38340 () Bool)

(assert (=> d!10975 e!38340))

(declare-fun res!32477 () Bool)

(assert (=> d!10975 (=> (not res!32477) (not e!38340))))

(assert (=> d!10975 (= res!32477 (isStrictlySorted!278 lt!22929))))

(assert (=> d!10975 (= (lemmaContainsTupThenGetReturnValue!41 lt!22929 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23316)))

(declare-fun b!58232 () Bool)

(declare-fun res!32478 () Bool)

(assert (=> b!58232 (=> (not res!32478) (not e!38340))))

(assert (=> b!58232 (= res!32478 (containsKey!126 lt!22929 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!58233 () Bool)

(assert (=> b!58233 (= e!38340 (contains!690 lt!22929 (tuple2!2039 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!10975 res!32477) b!58232))

(assert (= (and b!58232 res!32478) b!58233))

(assert (=> d!10975 m!48647))

(declare-fun m!49589 () Bool)

(assert (=> d!10975 m!49589))

(declare-fun m!49591 () Bool)

(assert (=> d!10975 m!49591))

(declare-fun m!49593 () Bool)

(assert (=> b!58232 m!49593))

(declare-fun m!49595 () Bool)

(assert (=> b!58233 m!49595))

(assert (=> d!10667 d!10975))

(declare-fun b!58234 () Bool)

(declare-fun res!32479 () Bool)

(declare-fun e!38342 () Bool)

(assert (=> b!58234 (=> (not res!32479) (not e!38342))))

(declare-fun lt!23317 () List!1449)

(assert (=> b!58234 (= res!32479 (containsKey!126 lt!23317 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun d!10977 () Bool)

(assert (=> d!10977 e!38342))

(declare-fun res!32480 () Bool)

(assert (=> d!10977 (=> (not res!32480) (not e!38342))))

(assert (=> d!10977 (= res!32480 (isStrictlySorted!278 lt!23317))))

(declare-fun e!38345 () List!1449)

(assert (=> d!10977 (= lt!23317 e!38345)))

(declare-fun c!7320 () Bool)

(assert (=> d!10977 (= c!7320 (and ((_ is Cons!1445) (toList!702 call!4089)) (bvslt (_1!1029 (h!2025 (toList!702 call!4089))) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10977 (isStrictlySorted!278 (toList!702 call!4089))))

(assert (=> d!10977 (= (insertStrictlySorted!43 (toList!702 call!4089) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23317)))

(declare-fun b!58235 () Bool)

(declare-fun e!38341 () List!1449)

(declare-fun call!4242 () List!1449)

(assert (=> b!58235 (= e!38341 call!4242)))

(declare-fun e!38344 () List!1449)

(declare-fun c!7322 () Bool)

(declare-fun c!7323 () Bool)

(declare-fun b!58236 () Bool)

(assert (=> b!58236 (= e!38344 (ite c!7322 (t!4775 (toList!702 call!4089)) (ite c!7323 (Cons!1445 (h!2025 (toList!702 call!4089)) (t!4775 (toList!702 call!4089))) Nil!1446)))))

(declare-fun b!58237 () Bool)

(assert (=> b!58237 (= e!38342 (contains!690 lt!23317 (tuple2!2039 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!58238 () Bool)

(assert (=> b!58238 (= e!38344 (insertStrictlySorted!43 (t!4775 (toList!702 call!4089)) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun bm!4237 () Bool)

(declare-fun call!4241 () List!1449)

(assert (=> bm!4237 (= call!4241 ($colon$colon!58 e!38344 (ite c!7320 (h!2025 (toList!702 call!4089)) (tuple2!2039 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun c!7321 () Bool)

(assert (=> bm!4237 (= c!7321 c!7320)))

(declare-fun b!58239 () Bool)

(declare-fun e!38343 () List!1449)

(declare-fun call!4240 () List!1449)

(assert (=> b!58239 (= e!38343 call!4240)))

(declare-fun bm!4238 () Bool)

(assert (=> bm!4238 (= call!4240 call!4241)))

(declare-fun b!58240 () Bool)

(assert (=> b!58240 (= c!7323 (and ((_ is Cons!1445) (toList!702 call!4089)) (bvsgt (_1!1029 (h!2025 (toList!702 call!4089))) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> b!58240 (= e!38343 e!38341)))

(declare-fun b!58241 () Bool)

(assert (=> b!58241 (= e!38345 call!4241)))

(declare-fun b!58242 () Bool)

(assert (=> b!58242 (= e!38341 call!4242)))

(declare-fun b!58243 () Bool)

(assert (=> b!58243 (= e!38345 e!38343)))

(assert (=> b!58243 (= c!7322 (and ((_ is Cons!1445) (toList!702 call!4089)) (= (_1!1029 (h!2025 (toList!702 call!4089))) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun bm!4239 () Bool)

(assert (=> bm!4239 (= call!4242 call!4240)))

(assert (= (and d!10977 c!7320) b!58241))

(assert (= (and d!10977 (not c!7320)) b!58243))

(assert (= (and b!58243 c!7322) b!58239))

(assert (= (and b!58243 (not c!7322)) b!58240))

(assert (= (and b!58240 c!7323) b!58235))

(assert (= (and b!58240 (not c!7323)) b!58242))

(assert (= (or b!58235 b!58242) bm!4239))

(assert (= (or b!58239 bm!4239) bm!4238))

(assert (= (or b!58241 bm!4238) bm!4237))

(assert (= (and bm!4237 c!7321) b!58238))

(assert (= (and bm!4237 (not c!7321)) b!58236))

(assert (= (and d!10977 res!32480) b!58234))

(assert (= (and b!58234 res!32479) b!58237))

(declare-fun m!49597 () Bool)

(assert (=> b!58234 m!49597))

(declare-fun m!49599 () Bool)

(assert (=> d!10977 m!49599))

(declare-fun m!49601 () Bool)

(assert (=> d!10977 m!49601))

(declare-fun m!49603 () Bool)

(assert (=> b!58237 m!49603))

(declare-fun m!49605 () Bool)

(assert (=> b!58238 m!49605))

(declare-fun m!49607 () Bool)

(assert (=> bm!4237 m!49607))

(assert (=> d!10667 d!10977))

(assert (=> b!57654 d!10745))

(declare-fun d!10979 () Bool)

(assert (=> d!10979 (= (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700)) (not (isEmpty!295 (getValueByKey!122 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700))))))

(declare-fun bs!2525 () Bool)

(assert (= bs!2525 d!10979))

(assert (=> bs!2525 m!48515))

(declare-fun m!49609 () Bool)

(assert (=> bs!2525 m!49609))

(assert (=> b!57614 d!10979))

(declare-fun e!38346 () Option!128)

(declare-fun b!58244 () Bool)

(assert (=> b!58244 (= e!38346 (Some!127 (_2!1029 (h!2025 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))))

(declare-fun d!10981 () Bool)

(declare-fun c!7324 () Bool)

(assert (=> d!10981 (= c!7324 (and ((_ is Cons!1445) (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))) (= (_1!1029 (h!2025 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))) lt!22700)))))

(assert (=> d!10981 (= (getValueByKey!122 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700) e!38346)))

(declare-fun b!58247 () Bool)

(declare-fun e!38347 () Option!128)

(assert (=> b!58247 (= e!38347 None!126)))

(declare-fun b!58245 () Bool)

(assert (=> b!58245 (= e!38346 e!38347)))

(declare-fun c!7325 () Bool)

(assert (=> b!58245 (= c!7325 (and ((_ is Cons!1445) (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))) (not (= (_1!1029 (h!2025 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))) lt!22700))))))

(declare-fun b!58246 () Bool)

(assert (=> b!58246 (= e!38347 (getValueByKey!122 (t!4775 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))) lt!22700))))

(assert (= (and d!10981 c!7324) b!58244))

(assert (= (and d!10981 (not c!7324)) b!58245))

(assert (= (and b!58245 c!7325) b!58246))

(assert (= (and b!58245 (not c!7325)) b!58247))

(declare-fun m!49611 () Bool)

(assert (=> b!58246 m!49611))

(assert (=> b!57614 d!10981))

(declare-fun d!10983 () Bool)

(assert (=> d!10983 (= (content!60 Nil!1447) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!10611 d!10983))

(declare-fun d!10985 () Bool)

(declare-fun e!38348 () Bool)

(assert (=> d!10985 e!38348))

(declare-fun res!32482 () Bool)

(assert (=> d!10985 (=> (not res!32482) (not e!38348))))

(declare-fun lt!23320 () ListLongMap!1373)

(assert (=> d!10985 (= res!32482 (contains!688 lt!23320 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23321 () List!1449)

(assert (=> d!10985 (= lt!23320 (ListLongMap!1374 lt!23321))))

(declare-fun lt!23318 () Unit!1488)

(declare-fun lt!23319 () Unit!1488)

(assert (=> d!10985 (= lt!23318 lt!23319)))

(assert (=> d!10985 (= (getValueByKey!122 lt!23321 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10985 (= lt!23319 (lemmaContainsTupThenGetReturnValue!41 lt!23321 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10985 (= lt!23321 (insertStrictlySorted!43 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!10985 (= (+!80 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23320)))

(declare-fun b!58248 () Bool)

(declare-fun res!32481 () Bool)

(assert (=> b!58248 (=> (not res!32481) (not e!38348))))

(assert (=> b!58248 (= res!32481 (= (getValueByKey!122 (toList!702 lt!23320) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58249 () Bool)

(assert (=> b!58249 (= e!38348 (contains!690 (toList!702 lt!23320) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!10985 res!32482) b!58248))

(assert (= (and b!58248 res!32481) b!58249))

(declare-fun m!49613 () Bool)

(assert (=> d!10985 m!49613))

(declare-fun m!49615 () Bool)

(assert (=> d!10985 m!49615))

(declare-fun m!49617 () Bool)

(assert (=> d!10985 m!49617))

(declare-fun m!49619 () Bool)

(assert (=> d!10985 m!49619))

(declare-fun m!49621 () Bool)

(assert (=> b!58248 m!49621))

(declare-fun m!49623 () Bool)

(assert (=> b!58249 m!49623))

(assert (=> d!10651 d!10985))

(declare-fun b!58250 () Bool)

(declare-fun e!38355 () Bool)

(declare-fun call!4245 () Bool)

(assert (=> b!58250 (= e!38355 (not call!4245))))

(declare-fun bm!4240 () Bool)

(declare-fun call!4246 () ListLongMap!1373)

(declare-fun call!4248 () ListLongMap!1373)

(declare-fun c!7326 () Bool)

(declare-fun c!7329 () Bool)

(declare-fun call!4247 () ListLongMap!1373)

(declare-fun call!4244 () ListLongMap!1373)

(assert (=> bm!4240 (= call!4246 (+!80 (ite c!7329 call!4248 (ite c!7326 call!4247 call!4244)) (ite (or c!7329 c!7326) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58251 () Bool)

(declare-fun res!32486 () Bool)

(declare-fun e!38359 () Bool)

(assert (=> b!58251 (=> (not res!32486) (not e!38359))))

(declare-fun e!38360 () Bool)

(assert (=> b!58251 (= res!32486 e!38360)))

(declare-fun c!7328 () Bool)

(assert (=> b!58251 (= c!7328 (not (= (bvand lt!22795 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4241 () Bool)

(assert (=> bm!4241 (= call!4244 call!4247)))

(declare-fun b!58252 () Bool)

(declare-fun e!38350 () Bool)

(assert (=> b!58252 (= e!38350 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58253 () Bool)

(declare-fun call!4249 () Bool)

(assert (=> b!58253 (= e!38360 (not call!4249))))

(declare-fun d!10987 () Bool)

(assert (=> d!10987 e!38359))

(declare-fun res!32483 () Bool)

(assert (=> d!10987 (=> (not res!32483) (not e!38359))))

(assert (=> d!10987 (= res!32483 (or (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))))

(declare-fun lt!23336 () ListLongMap!1373)

(declare-fun lt!23327 () ListLongMap!1373)

(assert (=> d!10987 (= lt!23336 lt!23327)))

(declare-fun lt!23331 () Unit!1488)

(declare-fun e!38357 () Unit!1488)

(assert (=> d!10987 (= lt!23331 e!38357)))

(declare-fun c!7330 () Bool)

(assert (=> d!10987 (= c!7330 e!38350)))

(declare-fun res!32490 () Bool)

(assert (=> d!10987 (=> (not res!32490) (not e!38350))))

(assert (=> d!10987 (= res!32490 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun e!38354 () ListLongMap!1373)

(assert (=> d!10987 (= lt!23327 e!38354)))

(assert (=> d!10987 (= c!7329 (and (not (= (bvand lt!22795 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!22795 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!10987 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!10987 (= (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23336)))

(declare-fun e!38361 () Bool)

(declare-fun b!58254 () Bool)

(assert (=> b!58254 (= e!38361 (= (apply!65 lt!23336 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58255 () Bool)

(declare-fun e!38349 () Bool)

(assert (=> b!58255 (= e!38349 (= (apply!65 lt!23336 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58255 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_values!2005 newMap!16))))))

(assert (=> b!58255 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58256 () Bool)

(declare-fun e!38352 () ListLongMap!1373)

(assert (=> b!58256 (= e!38352 call!4244)))

(declare-fun bm!4242 () Bool)

(assert (=> bm!4242 (= call!4248 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58257 () Bool)

(assert (=> b!58257 (= e!38354 (+!80 call!4246 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!58258 () Bool)

(assert (=> b!58258 (= e!38355 e!38361)))

(declare-fun res!32484 () Bool)

(assert (=> b!58258 (= res!32484 call!4245)))

(assert (=> b!58258 (=> (not res!32484) (not e!38361))))

(declare-fun bm!4243 () Bool)

(assert (=> bm!4243 (= call!4249 (contains!688 lt!23336 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4244 () Bool)

(assert (=> bm!4244 (= call!4245 (contains!688 lt!23336 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58259 () Bool)

(assert (=> b!58259 (= e!38359 e!38355)))

(declare-fun c!7331 () Bool)

(assert (=> b!58259 (= c!7331 (not (= (bvand lt!22795 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58260 () Bool)

(declare-fun res!32488 () Bool)

(assert (=> b!58260 (=> (not res!32488) (not e!38359))))

(declare-fun e!38358 () Bool)

(assert (=> b!58260 (= res!32488 e!38358)))

(declare-fun res!32487 () Bool)

(assert (=> b!58260 (=> res!32487 e!38358)))

(declare-fun e!38351 () Bool)

(assert (=> b!58260 (= res!32487 (not e!38351))))

(declare-fun res!32491 () Bool)

(assert (=> b!58260 (=> (not res!32491) (not e!38351))))

(assert (=> b!58260 (= res!32491 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58261 () Bool)

(assert (=> b!58261 (= e!38358 e!38349)))

(declare-fun res!32485 () Bool)

(assert (=> b!58261 (=> (not res!32485) (not e!38349))))

(assert (=> b!58261 (= res!32485 (contains!688 lt!23336 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58261 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58262 () Bool)

(declare-fun lt!23337 () Unit!1488)

(assert (=> b!58262 (= e!38357 lt!23337)))

(declare-fun lt!23343 () ListLongMap!1373)

(assert (=> b!58262 (= lt!23343 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23325 () (_ BitVec 64))

(assert (=> b!58262 (= lt!23325 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23341 () (_ BitVec 64))

(assert (=> b!58262 (= lt!23341 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23342 () Unit!1488)

(assert (=> b!58262 (= lt!23342 (addStillContains!41 lt!23343 lt!23325 (zeroValue!1940 newMap!16) lt!23341))))

(assert (=> b!58262 (contains!688 (+!80 lt!23343 (tuple2!2039 lt!23325 (zeroValue!1940 newMap!16))) lt!23341)))

(declare-fun lt!23338 () Unit!1488)

(assert (=> b!58262 (= lt!23338 lt!23342)))

(declare-fun lt!23335 () ListLongMap!1373)

(assert (=> b!58262 (= lt!23335 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23329 () (_ BitVec 64))

(assert (=> b!58262 (= lt!23329 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23322 () (_ BitVec 64))

(assert (=> b!58262 (= lt!23322 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23333 () Unit!1488)

(assert (=> b!58262 (= lt!23333 (addApplyDifferent!41 lt!23335 lt!23329 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23322))))

(assert (=> b!58262 (= (apply!65 (+!80 lt!23335 (tuple2!2039 lt!23329 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23322) (apply!65 lt!23335 lt!23322))))

(declare-fun lt!23326 () Unit!1488)

(assert (=> b!58262 (= lt!23326 lt!23333)))

(declare-fun lt!23323 () ListLongMap!1373)

(assert (=> b!58262 (= lt!23323 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23339 () (_ BitVec 64))

(assert (=> b!58262 (= lt!23339 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23330 () (_ BitVec 64))

(assert (=> b!58262 (= lt!23330 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23334 () Unit!1488)

(assert (=> b!58262 (= lt!23334 (addApplyDifferent!41 lt!23323 lt!23339 (zeroValue!1940 newMap!16) lt!23330))))

(assert (=> b!58262 (= (apply!65 (+!80 lt!23323 (tuple2!2039 lt!23339 (zeroValue!1940 newMap!16))) lt!23330) (apply!65 lt!23323 lt!23330))))

(declare-fun lt!23340 () Unit!1488)

(assert (=> b!58262 (= lt!23340 lt!23334)))

(declare-fun lt!23332 () ListLongMap!1373)

(assert (=> b!58262 (= lt!23332 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23328 () (_ BitVec 64))

(assert (=> b!58262 (= lt!23328 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23324 () (_ BitVec 64))

(assert (=> b!58262 (= lt!23324 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58262 (= lt!23337 (addApplyDifferent!41 lt!23332 lt!23328 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23324))))

(assert (=> b!58262 (= (apply!65 (+!80 lt!23332 (tuple2!2039 lt!23328 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23324) (apply!65 lt!23332 lt!23324))))

(declare-fun b!58263 () Bool)

(assert (=> b!58263 (= e!38351 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58264 () Bool)

(declare-fun call!4243 () ListLongMap!1373)

(assert (=> b!58264 (= e!38352 call!4243)))

(declare-fun bm!4245 () Bool)

(assert (=> bm!4245 (= call!4243 call!4246)))

(declare-fun bm!4246 () Bool)

(assert (=> bm!4246 (= call!4247 call!4248)))

(declare-fun b!58265 () Bool)

(declare-fun e!38356 () Bool)

(assert (=> b!58265 (= e!38356 (= (apply!65 lt!23336 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!58266 () Bool)

(declare-fun e!38353 () ListLongMap!1373)

(assert (=> b!58266 (= e!38354 e!38353)))

(assert (=> b!58266 (= c!7326 (and (not (= (bvand lt!22795 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!22795 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58267 () Bool)

(assert (=> b!58267 (= e!38353 call!4243)))

(declare-fun b!58268 () Bool)

(assert (=> b!58268 (= e!38360 e!38356)))

(declare-fun res!32489 () Bool)

(assert (=> b!58268 (= res!32489 call!4249)))

(assert (=> b!58268 (=> (not res!32489) (not e!38356))))

(declare-fun b!58269 () Bool)

(declare-fun Unit!1534 () Unit!1488)

(assert (=> b!58269 (= e!38357 Unit!1534)))

(declare-fun b!58270 () Bool)

(declare-fun c!7327 () Bool)

(assert (=> b!58270 (= c!7327 (and (not (= (bvand lt!22795 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!22795 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58270 (= e!38353 e!38352)))

(assert (= (and d!10987 c!7329) b!58257))

(assert (= (and d!10987 (not c!7329)) b!58266))

(assert (= (and b!58266 c!7326) b!58267))

(assert (= (and b!58266 (not c!7326)) b!58270))

(assert (= (and b!58270 c!7327) b!58264))

(assert (= (and b!58270 (not c!7327)) b!58256))

(assert (= (or b!58264 b!58256) bm!4241))

(assert (= (or b!58267 bm!4241) bm!4246))

(assert (= (or b!58267 b!58264) bm!4245))

(assert (= (or b!58257 bm!4246) bm!4242))

(assert (= (or b!58257 bm!4245) bm!4240))

(assert (= (and d!10987 res!32490) b!58252))

(assert (= (and d!10987 c!7330) b!58262))

(assert (= (and d!10987 (not c!7330)) b!58269))

(assert (= (and d!10987 res!32483) b!58260))

(assert (= (and b!58260 res!32491) b!58263))

(assert (= (and b!58260 (not res!32487)) b!58261))

(assert (= (and b!58261 res!32485) b!58255))

(assert (= (and b!58260 res!32488) b!58251))

(assert (= (and b!58251 c!7328) b!58268))

(assert (= (and b!58251 (not c!7328)) b!58253))

(assert (= (and b!58268 res!32489) b!58265))

(assert (= (or b!58268 b!58253) bm!4243))

(assert (= (and b!58251 res!32486) b!58259))

(assert (= (and b!58259 c!7331) b!58258))

(assert (= (and b!58259 (not c!7331)) b!58250))

(assert (= (and b!58258 res!32484) b!58254))

(assert (= (or b!58258 b!58250) bm!4244))

(declare-fun b_lambda!2555 () Bool)

(assert (=> (not b_lambda!2555) (not b!58255)))

(assert (=> b!58255 t!4783))

(declare-fun b_and!3521 () Bool)

(assert (= b_and!3517 (and (=> t!4783 result!2361) b_and!3521)))

(assert (=> b!58255 t!4785))

(declare-fun b_and!3523 () Bool)

(assert (= b_and!3519 (and (=> t!4785 result!2363) b_and!3523)))

(assert (=> b!58255 m!48339))

(assert (=> b!58255 m!48657))

(assert (=> b!58255 m!48339))

(assert (=> b!58255 m!48659))

(assert (=> b!58255 m!48345))

(assert (=> b!58255 m!48657))

(assert (=> b!58255 m!48345))

(declare-fun m!49625 () Bool)

(assert (=> b!58255 m!49625))

(declare-fun m!49627 () Bool)

(assert (=> bm!4243 m!49627))

(declare-fun m!49629 () Bool)

(assert (=> b!58262 m!49629))

(assert (=> b!58262 m!48103))

(declare-fun m!49631 () Bool)

(assert (=> b!58262 m!49631))

(assert (=> b!58262 m!48103))

(declare-fun m!49633 () Bool)

(assert (=> b!58262 m!49633))

(declare-fun m!49635 () Bool)

(assert (=> b!58262 m!49635))

(declare-fun m!49637 () Bool)

(assert (=> b!58262 m!49637))

(assert (=> b!58262 m!49629))

(declare-fun m!49639 () Bool)

(assert (=> b!58262 m!49639))

(declare-fun m!49641 () Bool)

(assert (=> b!58262 m!49641))

(declare-fun m!49643 () Bool)

(assert (=> b!58262 m!49643))

(declare-fun m!49645 () Bool)

(assert (=> b!58262 m!49645))

(assert (=> b!58262 m!48345))

(declare-fun m!49647 () Bool)

(assert (=> b!58262 m!49647))

(declare-fun m!49649 () Bool)

(assert (=> b!58262 m!49649))

(assert (=> b!58262 m!49635))

(declare-fun m!49651 () Bool)

(assert (=> b!58262 m!49651))

(assert (=> b!58262 m!48103))

(declare-fun m!49653 () Bool)

(assert (=> b!58262 m!49653))

(assert (=> b!58262 m!49643))

(assert (=> b!58262 m!49637))

(declare-fun m!49655 () Bool)

(assert (=> b!58262 m!49655))

(declare-fun m!49657 () Bool)

(assert (=> b!58262 m!49657))

(declare-fun m!49659 () Bool)

(assert (=> b!58262 m!49659))

(assert (=> b!58263 m!48345))

(assert (=> b!58263 m!48345))

(assert (=> b!58263 m!48383))

(assert (=> b!58261 m!48345))

(assert (=> b!58261 m!48345))

(declare-fun m!49661 () Bool)

(assert (=> b!58261 m!49661))

(declare-fun m!49663 () Bool)

(assert (=> bm!4240 m!49663))

(assert (=> bm!4242 m!48103))

(assert (=> bm!4242 m!49631))

(declare-fun m!49665 () Bool)

(assert (=> b!58265 m!49665))

(declare-fun m!49667 () Bool)

(assert (=> b!58254 m!49667))

(declare-fun m!49669 () Bool)

(assert (=> bm!4244 m!49669))

(assert (=> d!10987 m!48395))

(assert (=> b!58252 m!48345))

(assert (=> b!58252 m!48345))

(assert (=> b!58252 m!48383))

(declare-fun m!49671 () Bool)

(assert (=> b!58257 m!49671))

(assert (=> d!10651 d!10987))

(declare-fun d!10989 () Bool)

(assert (=> d!10989 (= (+!80 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(assert (=> d!10989 true))

(declare-fun _$8!43 () Unit!1488)

(assert (=> d!10989 (= (choose!299 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22795 (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)) _$8!43)))

(declare-fun bs!2526 () Bool)

(assert (= bs!2526 d!10989))

(assert (=> bs!2526 m!48203))

(assert (=> bs!2526 m!48203))

(assert (=> bs!2526 m!48613))

(assert (=> bs!2526 m!48103))

(assert (=> bs!2526 m!48615))

(assert (=> d!10651 d!10989))

(assert (=> d!10651 d!10669))

(assert (=> d!10651 d!10735))

(declare-fun d!10991 () Bool)

(assert (=> d!10991 (= (apply!65 lt!22944 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1076 (getValueByKey!122 (toList!702 lt!22944) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2527 () Bool)

(assert (= bs!2527 d!10991))

(assert (=> bs!2527 m!48345))

(assert (=> bs!2527 m!49395))

(assert (=> bs!2527 m!49395))

(declare-fun m!49673 () Bool)

(assert (=> bs!2527 m!49673))

(assert (=> b!57702 d!10991))

(declare-fun d!10993 () Bool)

(declare-fun c!7332 () Bool)

(assert (=> d!10993 (= c!7332 ((_ is ValueCellFull!852) (select (arr!1775 (_values!2005 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!38362 () V!2835)

(assert (=> d!10993 (= (get!1073 (select (arr!1775 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38362)))

(declare-fun b!58271 () Bool)

(assert (=> b!58271 (= e!38362 (get!1074 (select (arr!1775 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58272 () Bool)

(assert (=> b!58272 (= e!38362 (get!1075 (select (arr!1775 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!10993 c!7332) b!58271))

(assert (= (and d!10993 (not c!7332)) b!58272))

(assert (=> b!58271 m!48657))

(assert (=> b!58271 m!48339))

(declare-fun m!49675 () Bool)

(assert (=> b!58271 m!49675))

(assert (=> b!58272 m!48657))

(assert (=> b!58272 m!48339))

(declare-fun m!49677 () Bool)

(assert (=> b!58272 m!49677))

(assert (=> b!57702 d!10993))

(assert (=> b!57811 d!10797))

(declare-fun d!10995 () Bool)

(declare-fun res!32493 () Bool)

(declare-fun e!38363 () Bool)

(assert (=> d!10995 (=> (not res!32493) (not e!38363))))

(assert (=> d!10995 (= res!32493 (validMask!0 (mask!5896 (v!2365 (underlying!222 thiss!992)))))))

(assert (=> d!10995 (= (simpleValid!40 (v!2365 (underlying!222 thiss!992))) e!38363)))

(declare-fun b!58274 () Bool)

(declare-fun res!32495 () Bool)

(assert (=> b!58274 (=> (not res!32495) (not e!38363))))

(assert (=> b!58274 (= res!32495 (bvsge (size!2007 (v!2365 (underlying!222 thiss!992))) (_size!355 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun b!58273 () Bool)

(declare-fun res!32492 () Bool)

(assert (=> b!58273 (=> (not res!32492) (not e!38363))))

(assert (=> b!58273 (= res!32492 (and (= (size!2004 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000001)) (= (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (size!2004 (_values!2005 (v!2365 (underlying!222 thiss!992))))) (bvsge (_size!355 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!355 (v!2365 (underlying!222 thiss!992))) (bvadd (mask!5896 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!58276 () Bool)

(assert (=> b!58276 (= e!38363 (and (bvsge (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!355 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!58275 () Bool)

(declare-fun res!32494 () Bool)

(assert (=> b!58275 (=> (not res!32494) (not e!38363))))

(assert (=> b!58275 (= res!32494 (= (size!2007 (v!2365 (underlying!222 thiss!992))) (bvadd (_size!355 (v!2365 (underlying!222 thiss!992))) (bvsdiv (bvadd (extraKeys!1913 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!10995 res!32493) b!58273))

(assert (= (and b!58273 res!32492) b!58274))

(assert (= (and b!58274 res!32495) b!58275))

(assert (= (and b!58275 res!32494) b!58276))

(assert (=> d!10995 m!48115))

(declare-fun m!49679 () Bool)

(assert (=> b!58274 m!49679))

(assert (=> b!58275 m!49679))

(assert (=> d!10609 d!10995))

(declare-fun d!10997 () Bool)

(declare-fun e!38365 () Bool)

(assert (=> d!10997 e!38365))

(declare-fun res!32496 () Bool)

(assert (=> d!10997 (=> res!32496 e!38365)))

(declare-fun lt!23344 () Bool)

(assert (=> d!10997 (= res!32496 (not lt!23344))))

(declare-fun lt!23345 () Bool)

(assert (=> d!10997 (= lt!23344 lt!23345)))

(declare-fun lt!23347 () Unit!1488)

(declare-fun e!38364 () Unit!1488)

(assert (=> d!10997 (= lt!23347 e!38364)))

(declare-fun c!7333 () Bool)

(assert (=> d!10997 (= c!7333 lt!23345)))

(assert (=> d!10997 (= lt!23345 (containsKey!126 (toList!702 lt!22856) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!10997 (= (contains!688 lt!22856 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23344)))

(declare-fun b!58277 () Bool)

(declare-fun lt!23346 () Unit!1488)

(assert (=> b!58277 (= e!38364 lt!23346)))

(assert (=> b!58277 (= lt!23346 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22856) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> b!58277 (isDefined!76 (getValueByKey!122 (toList!702 lt!22856) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!58278 () Bool)

(declare-fun Unit!1535 () Unit!1488)

(assert (=> b!58278 (= e!38364 Unit!1535)))

(declare-fun b!58279 () Bool)

(assert (=> b!58279 (= e!38365 (isDefined!76 (getValueByKey!122 (toList!702 lt!22856) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!10997 c!7333) b!58277))

(assert (= (and d!10997 (not c!7333)) b!58278))

(assert (= (and d!10997 (not res!32496)) b!58279))

(declare-fun m!49681 () Bool)

(assert (=> d!10997 m!49681))

(declare-fun m!49683 () Bool)

(assert (=> b!58277 m!49683))

(assert (=> b!58277 m!48487))

(assert (=> b!58277 m!48487))

(declare-fun m!49685 () Bool)

(assert (=> b!58277 m!49685))

(assert (=> b!58279 m!48487))

(assert (=> b!58279 m!48487))

(assert (=> b!58279 m!49685))

(assert (=> d!10627 d!10997))

(declare-fun b!58280 () Bool)

(declare-fun e!38366 () Option!128)

(assert (=> b!58280 (= e!38366 (Some!127 (_2!1029 (h!2025 lt!22857))))))

(declare-fun c!7334 () Bool)

(declare-fun d!10999 () Bool)

(assert (=> d!10999 (= c!7334 (and ((_ is Cons!1445) lt!22857) (= (_1!1029 (h!2025 lt!22857)) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!10999 (= (getValueByKey!122 lt!22857 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) e!38366)))

(declare-fun b!58283 () Bool)

(declare-fun e!38367 () Option!128)

(assert (=> b!58283 (= e!38367 None!126)))

(declare-fun b!58281 () Bool)

(assert (=> b!58281 (= e!38366 e!38367)))

(declare-fun c!7335 () Bool)

(assert (=> b!58281 (= c!7335 (and ((_ is Cons!1445) lt!22857) (not (= (_1!1029 (h!2025 lt!22857)) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!58282 () Bool)

(assert (=> b!58282 (= e!38367 (getValueByKey!122 (t!4775 lt!22857) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!10999 c!7334) b!58280))

(assert (= (and d!10999 (not c!7334)) b!58281))

(assert (= (and b!58281 c!7335) b!58282))

(assert (= (and b!58281 (not c!7335)) b!58283))

(declare-fun m!49687 () Bool)

(assert (=> b!58282 m!49687))

(assert (=> d!10627 d!10999))

(declare-fun d!11001 () Bool)

(assert (=> d!11001 (= (getValueByKey!122 lt!22857 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun lt!23348 () Unit!1488)

(assert (=> d!11001 (= lt!23348 (choose!305 lt!22857 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun e!38368 () Bool)

(assert (=> d!11001 e!38368))

(declare-fun res!32497 () Bool)

(assert (=> d!11001 (=> (not res!32497) (not e!38368))))

(assert (=> d!11001 (= res!32497 (isStrictlySorted!278 lt!22857))))

(assert (=> d!11001 (= (lemmaContainsTupThenGetReturnValue!41 lt!22857 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23348)))

(declare-fun b!58284 () Bool)

(declare-fun res!32498 () Bool)

(assert (=> b!58284 (=> (not res!32498) (not e!38368))))

(assert (=> b!58284 (= res!32498 (containsKey!126 lt!22857 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!58285 () Bool)

(assert (=> b!58285 (= e!38368 (contains!690 lt!22857 (tuple2!2039 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!11001 res!32497) b!58284))

(assert (= (and b!58284 res!32498) b!58285))

(assert (=> d!11001 m!48481))

(declare-fun m!49689 () Bool)

(assert (=> d!11001 m!49689))

(declare-fun m!49691 () Bool)

(assert (=> d!11001 m!49691))

(declare-fun m!49693 () Bool)

(assert (=> b!58284 m!49693))

(declare-fun m!49695 () Bool)

(assert (=> b!58285 m!49695))

(assert (=> d!10627 d!11001))

(declare-fun b!58286 () Bool)

(declare-fun res!32499 () Bool)

(declare-fun e!38370 () Bool)

(assert (=> b!58286 (=> (not res!32499) (not e!38370))))

(declare-fun lt!23349 () List!1449)

(assert (=> b!58286 (= res!32499 (containsKey!126 lt!23349 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun d!11003 () Bool)

(assert (=> d!11003 e!38370))

(declare-fun res!32500 () Bool)

(assert (=> d!11003 (=> (not res!32500) (not e!38370))))

(assert (=> d!11003 (= res!32500 (isStrictlySorted!278 lt!23349))))

(declare-fun e!38373 () List!1449)

(assert (=> d!11003 (= lt!23349 e!38373)))

(declare-fun c!7336 () Bool)

(assert (=> d!11003 (= c!7336 (and ((_ is Cons!1445) (toList!702 lt!22694)) (bvslt (_1!1029 (h!2025 (toList!702 lt!22694))) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!11003 (isStrictlySorted!278 (toList!702 lt!22694))))

(assert (=> d!11003 (= (insertStrictlySorted!43 (toList!702 lt!22694) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23349)))

(declare-fun b!58287 () Bool)

(declare-fun e!38369 () List!1449)

(declare-fun call!4252 () List!1449)

(assert (=> b!58287 (= e!38369 call!4252)))

(declare-fun e!38372 () List!1449)

(declare-fun c!7339 () Bool)

(declare-fun c!7338 () Bool)

(declare-fun b!58288 () Bool)

(assert (=> b!58288 (= e!38372 (ite c!7338 (t!4775 (toList!702 lt!22694)) (ite c!7339 (Cons!1445 (h!2025 (toList!702 lt!22694)) (t!4775 (toList!702 lt!22694))) Nil!1446)))))

(declare-fun b!58289 () Bool)

(assert (=> b!58289 (= e!38370 (contains!690 lt!23349 (tuple2!2039 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!58290 () Bool)

(assert (=> b!58290 (= e!38372 (insertStrictlySorted!43 (t!4775 (toList!702 lt!22694)) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun bm!4247 () Bool)

(declare-fun call!4251 () List!1449)

(assert (=> bm!4247 (= call!4251 ($colon$colon!58 e!38372 (ite c!7336 (h!2025 (toList!702 lt!22694)) (tuple2!2039 (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun c!7337 () Bool)

(assert (=> bm!4247 (= c!7337 c!7336)))

(declare-fun b!58291 () Bool)

(declare-fun e!38371 () List!1449)

(declare-fun call!4250 () List!1449)

(assert (=> b!58291 (= e!38371 call!4250)))

(declare-fun bm!4248 () Bool)

(assert (=> bm!4248 (= call!4250 call!4251)))

(declare-fun b!58292 () Bool)

(assert (=> b!58292 (= c!7339 (and ((_ is Cons!1445) (toList!702 lt!22694)) (bvsgt (_1!1029 (h!2025 (toList!702 lt!22694))) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> b!58292 (= e!38371 e!38369)))

(declare-fun b!58293 () Bool)

(assert (=> b!58293 (= e!38373 call!4251)))

(declare-fun b!58294 () Bool)

(assert (=> b!58294 (= e!38369 call!4252)))

(declare-fun b!58295 () Bool)

(assert (=> b!58295 (= e!38373 e!38371)))

(assert (=> b!58295 (= c!7338 (and ((_ is Cons!1445) (toList!702 lt!22694)) (= (_1!1029 (h!2025 (toList!702 lt!22694))) (_1!1029 (tuple2!2039 lt!22688 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun bm!4249 () Bool)

(assert (=> bm!4249 (= call!4252 call!4250)))

(assert (= (and d!11003 c!7336) b!58293))

(assert (= (and d!11003 (not c!7336)) b!58295))

(assert (= (and b!58295 c!7338) b!58291))

(assert (= (and b!58295 (not c!7338)) b!58292))

(assert (= (and b!58292 c!7339) b!58287))

(assert (= (and b!58292 (not c!7339)) b!58294))

(assert (= (or b!58287 b!58294) bm!4249))

(assert (= (or b!58291 bm!4249) bm!4248))

(assert (= (or b!58293 bm!4248) bm!4247))

(assert (= (and bm!4247 c!7337) b!58290))

(assert (= (and bm!4247 (not c!7337)) b!58288))

(assert (= (and d!11003 res!32500) b!58286))

(assert (= (and b!58286 res!32499) b!58289))

(declare-fun m!49697 () Bool)

(assert (=> b!58286 m!49697))

(declare-fun m!49699 () Bool)

(assert (=> d!11003 m!49699))

(declare-fun m!49701 () Bool)

(assert (=> d!11003 m!49701))

(declare-fun m!49703 () Bool)

(assert (=> b!58289 m!49703))

(declare-fun m!49705 () Bool)

(assert (=> b!58290 m!49705))

(declare-fun m!49707 () Bool)

(assert (=> bm!4247 m!49707))

(assert (=> d!10627 d!11003))

(declare-fun d!11005 () Bool)

(assert (=> d!11005 (isDefined!76 (getValueByKey!122 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))

(declare-fun lt!23350 () Unit!1488)

(assert (=> d!11005 (= lt!23350 (choose!298 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))

(declare-fun e!38374 () Bool)

(assert (=> d!11005 e!38374))

(declare-fun res!32501 () Bool)

(assert (=> d!11005 (=> (not res!32501) (not e!38374))))

(assert (=> d!11005 (= res!32501 (isStrictlySorted!278 (toList!702 e!37903)))))

(assert (=> d!11005 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))) lt!23350)))

(declare-fun b!58296 () Bool)

(assert (=> b!58296 (= e!38374 (containsKey!126 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))

(assert (= (and d!11005 res!32501) b!58296))

(assert (=> d!11005 m!48723))

(assert (=> d!11005 m!48723))

(assert (=> d!11005 m!48725))

(declare-fun m!49709 () Bool)

(assert (=> d!11005 m!49709))

(declare-fun m!49711 () Bool)

(assert (=> d!11005 m!49711))

(assert (=> b!58296 m!48719))

(assert (=> b!57723 d!11005))

(declare-fun d!11007 () Bool)

(assert (=> d!11007 (= (isDefined!76 (getValueByKey!122 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774))))) (not (isEmpty!295 (getValueByKey!122 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))))

(declare-fun bs!2528 () Bool)

(assert (= bs!2528 d!11007))

(assert (=> bs!2528 m!48723))

(declare-fun m!49713 () Bool)

(assert (=> bs!2528 m!49713))

(assert (=> b!57723 d!11007))

(declare-fun b!58297 () Bool)

(declare-fun e!38375 () Option!128)

(assert (=> b!58297 (= e!38375 (Some!127 (_2!1029 (h!2025 (toList!702 e!37903)))))))

(declare-fun d!11009 () Bool)

(declare-fun c!7340 () Bool)

(assert (=> d!11009 (= c!7340 (and ((_ is Cons!1445) (toList!702 e!37903)) (= (_1!1029 (h!2025 (toList!702 e!37903))) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774))))))))

(assert (=> d!11009 (= (getValueByKey!122 (toList!702 e!37903) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))) e!38375)))

(declare-fun b!58300 () Bool)

(declare-fun e!38376 () Option!128)

(assert (=> b!58300 (= e!38376 None!126)))

(declare-fun b!58298 () Bool)

(assert (=> b!58298 (= e!38375 e!38376)))

(declare-fun c!7341 () Bool)

(assert (=> b!58298 (= c!7341 (and ((_ is Cons!1445) (toList!702 e!37903)) (not (= (_1!1029 (h!2025 (toList!702 e!37903))) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))))

(declare-fun b!58299 () Bool)

(assert (=> b!58299 (= e!38376 (getValueByKey!122 (t!4775 (toList!702 e!37903)) (ite c!7122 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))

(assert (= (and d!11009 c!7340) b!58297))

(assert (= (and d!11009 (not c!7340)) b!58298))

(assert (= (and b!58298 c!7341) b!58299))

(assert (= (and b!58298 (not c!7341)) b!58300))

(declare-fun m!49715 () Bool)

(assert (=> b!58299 m!49715))

(assert (=> b!57723 d!11009))

(declare-fun d!11011 () Bool)

(declare-fun res!32503 () Bool)

(declare-fun e!38377 () Bool)

(assert (=> d!11011 (=> (not res!32503) (not e!38377))))

(assert (=> d!11011 (= res!32503 (validMask!0 (mask!5896 (_2!1030 lt!22784))))))

(assert (=> d!11011 (= (simpleValid!40 (_2!1030 lt!22784)) e!38377)))

(declare-fun b!58302 () Bool)

(declare-fun res!32505 () Bool)

(assert (=> b!58302 (=> (not res!32505) (not e!38377))))

(assert (=> b!58302 (= res!32505 (bvsge (size!2007 (_2!1030 lt!22784)) (_size!355 (_2!1030 lt!22784))))))

(declare-fun b!58301 () Bool)

(declare-fun res!32502 () Bool)

(assert (=> b!58301 (=> (not res!32502) (not e!38377))))

(assert (=> b!58301 (= res!32502 (and (= (size!2004 (_values!2005 (_2!1030 lt!22784))) (bvadd (mask!5896 (_2!1030 lt!22784)) #b00000000000000000000000000000001)) (= (size!2003 (_keys!3642 (_2!1030 lt!22784))) (size!2004 (_values!2005 (_2!1030 lt!22784)))) (bvsge (_size!355 (_2!1030 lt!22784)) #b00000000000000000000000000000000) (bvsle (_size!355 (_2!1030 lt!22784)) (bvadd (mask!5896 (_2!1030 lt!22784)) #b00000000000000000000000000000001))))))

(declare-fun b!58304 () Bool)

(assert (=> b!58304 (= e!38377 (and (bvsge (extraKeys!1913 (_2!1030 lt!22784)) #b00000000000000000000000000000000) (bvsle (extraKeys!1913 (_2!1030 lt!22784)) #b00000000000000000000000000000011) (bvsge (_vacant!355 (_2!1030 lt!22784)) #b00000000000000000000000000000000)))))

(declare-fun b!58303 () Bool)

(declare-fun res!32504 () Bool)

(assert (=> b!58303 (=> (not res!32504) (not e!38377))))

(assert (=> b!58303 (= res!32504 (= (size!2007 (_2!1030 lt!22784)) (bvadd (_size!355 (_2!1030 lt!22784)) (bvsdiv (bvadd (extraKeys!1913 (_2!1030 lt!22784)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!11011 res!32503) b!58301))

(assert (= (and b!58301 res!32502) b!58302))

(assert (= (and b!58302 res!32505) b!58303))

(assert (= (and b!58303 res!32504) b!58304))

(assert (=> d!11011 m!49119))

(declare-fun m!49717 () Bool)

(assert (=> b!58302 m!49717))

(assert (=> b!58303 m!49717))

(assert (=> d!10665 d!11011))

(declare-fun d!11013 () Bool)

(assert (=> d!11013 (= (inRange!0 (index!3067 lt!22963) (mask!5896 newMap!16)) (and (bvsge (index!3067 lt!22963) #b00000000000000000000000000000000) (bvslt (index!3067 lt!22963) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!57730 d!11013))

(assert (=> bm!4198 d!10613))

(declare-fun d!11015 () Bool)

(declare-fun isEmpty!297 (List!1449) Bool)

(assert (=> d!11015 (= (isEmpty!296 lt!22884) (isEmpty!297 (toList!702 lt!22884)))))

(declare-fun bs!2529 () Bool)

(assert (= bs!2529 d!11015))

(declare-fun m!49719 () Bool)

(assert (=> bs!2529 m!49719))

(assert (=> b!57642 d!11015))

(declare-fun d!11017 () Bool)

(assert (=> d!11017 (= (apply!65 lt!22810 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!702 lt!22810) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2530 () Bool)

(assert (= bs!2530 d!11017))

(assert (=> bs!2530 m!49577))

(assert (=> bs!2530 m!49577))

(declare-fun m!49721 () Bool)

(assert (=> bs!2530 m!49721))

(assert (=> b!57535 d!11017))

(assert (=> b!57719 d!10745))

(declare-fun d!11019 () Bool)

(declare-fun lt!23351 () Bool)

(assert (=> d!11019 (= lt!23351 (select (content!61 (toList!702 lt!22924)) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!38378 () Bool)

(assert (=> d!11019 (= lt!23351 e!38378)))

(declare-fun res!32506 () Bool)

(assert (=> d!11019 (=> (not res!32506) (not e!38378))))

(assert (=> d!11019 (= res!32506 ((_ is Cons!1445) (toList!702 lt!22924)))))

(assert (=> d!11019 (= (contains!690 (toList!702 lt!22924) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23351)))

(declare-fun b!58305 () Bool)

(declare-fun e!38379 () Bool)

(assert (=> b!58305 (= e!38378 e!38379)))

(declare-fun res!32507 () Bool)

(assert (=> b!58305 (=> res!32507 e!38379)))

(assert (=> b!58305 (= res!32507 (= (h!2025 (toList!702 lt!22924)) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!58306 () Bool)

(assert (=> b!58306 (= e!38379 (contains!690 (t!4775 (toList!702 lt!22924)) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11019 res!32506) b!58305))

(assert (= (and b!58305 (not res!32507)) b!58306))

(declare-fun m!49723 () Bool)

(assert (=> d!11019 m!49723))

(declare-fun m!49725 () Bool)

(assert (=> d!11019 m!49725))

(declare-fun m!49727 () Bool)

(assert (=> b!58306 m!49727))

(assert (=> b!57691 d!11019))

(declare-fun d!11021 () Bool)

(assert (=> d!11021 (= (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22683)) (v!2369 (getValueByKey!122 (toList!702 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22683)))))

(assert (=> d!10629 d!11021))

(declare-fun e!38380 () Option!128)

(declare-fun b!58307 () Bool)

(assert (=> b!58307 (= e!38380 (Some!127 (_2!1029 (h!2025 (toList!702 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))))

(declare-fun d!11023 () Bool)

(declare-fun c!7342 () Bool)

(assert (=> d!11023 (= c!7342 (and ((_ is Cons!1445) (toList!702 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) (= (_1!1029 (h!2025 (toList!702 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))) lt!22683)))))

(assert (=> d!11023 (= (getValueByKey!122 (toList!702 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22683) e!38380)))

(declare-fun b!58310 () Bool)

(declare-fun e!38381 () Option!128)

(assert (=> b!58310 (= e!38381 None!126)))

(declare-fun b!58308 () Bool)

(assert (=> b!58308 (= e!38380 e!38381)))

(declare-fun c!7343 () Bool)

(assert (=> b!58308 (= c!7343 (and ((_ is Cons!1445) (toList!702 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) (not (= (_1!1029 (h!2025 (toList!702 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))) lt!22683))))))

(declare-fun b!58309 () Bool)

(assert (=> b!58309 (= e!38381 (getValueByKey!122 (t!4775 (toList!702 (+!80 lt!22691 (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) lt!22683))))

(assert (= (and d!11023 c!7342) b!58307))

(assert (= (and d!11023 (not c!7342)) b!58308))

(assert (= (and b!58308 c!7343) b!58309))

(assert (= (and b!58308 (not c!7343)) b!58310))

(declare-fun m!49729 () Bool)

(assert (=> b!58309 m!49729))

(assert (=> d!10629 d!11023))

(assert (=> b!57725 d!11007))

(assert (=> b!57725 d!11009))

(declare-fun d!11025 () Bool)

(declare-fun e!38382 () Bool)

(assert (=> d!11025 e!38382))

(declare-fun res!32509 () Bool)

(assert (=> d!11025 (=> (not res!32509) (not e!38382))))

(declare-fun lt!23354 () ListLongMap!1373)

(assert (=> d!11025 (= res!32509 (contains!688 lt!23354 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(declare-fun lt!23355 () List!1449)

(assert (=> d!11025 (= lt!23354 (ListLongMap!1374 lt!23355))))

(declare-fun lt!23352 () Unit!1488)

(declare-fun lt!23353 () Unit!1488)

(assert (=> d!11025 (= lt!23352 lt!23353)))

(assert (=> d!11025 (= (getValueByKey!122 lt!23355 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!127 (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!11025 (= lt!23353 (lemmaContainsTupThenGetReturnValue!41 lt!23355 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!11025 (= lt!23355 (insertStrictlySorted!43 (toList!702 call!4178) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (=> d!11025 (= (+!80 call!4178 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))) lt!23354)))

(declare-fun b!58311 () Bool)

(declare-fun res!32508 () Bool)

(assert (=> b!58311 (=> (not res!32508) (not e!38382))))

(assert (=> b!58311 (= res!32508 (= (getValueByKey!122 (toList!702 lt!23354) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (Some!127 (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(declare-fun b!58312 () Bool)

(assert (=> b!58312 (= e!38382 (contains!690 (toList!702 lt!23354) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))

(assert (= (and d!11025 res!32509) b!58311))

(assert (= (and b!58311 res!32508) b!58312))

(declare-fun m!49731 () Bool)

(assert (=> d!11025 m!49731))

(declare-fun m!49733 () Bool)

(assert (=> d!11025 m!49733))

(declare-fun m!49735 () Bool)

(assert (=> d!11025 m!49735))

(declare-fun m!49737 () Bool)

(assert (=> d!11025 m!49737))

(declare-fun m!49739 () Bool)

(assert (=> b!58311 m!49739))

(declare-fun m!49741 () Bool)

(assert (=> b!58312 m!49741))

(assert (=> b!57659 d!11025))

(declare-fun b!58313 () Bool)

(declare-fun e!38384 () Bool)

(declare-fun call!4253 () Bool)

(assert (=> b!58313 (= e!38384 call!4253)))

(declare-fun b!58314 () Bool)

(declare-fun e!38386 () Bool)

(declare-fun e!38385 () Bool)

(assert (=> b!58314 (= e!38386 e!38385)))

(declare-fun res!32511 () Bool)

(assert (=> b!58314 (=> (not res!32511) (not e!38385))))

(declare-fun e!38383 () Bool)

(assert (=> b!58314 (= res!32511 (not e!38383))))

(declare-fun res!32510 () Bool)

(assert (=> b!58314 (=> (not res!32510) (not e!38383))))

(assert (=> b!58314 (= res!32510 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!11027 () Bool)

(declare-fun res!32512 () Bool)

(assert (=> d!11027 (=> res!32512 e!38386)))

(assert (=> d!11027 (= res!32512 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!11027 (= (arrayNoDuplicates!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7186 (Cons!1446 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) Nil!1447) Nil!1447)) e!38386)))

(declare-fun b!58315 () Bool)

(assert (=> b!58315 (= e!38384 call!4253)))

(declare-fun b!58316 () Bool)

(assert (=> b!58316 (= e!38385 e!38384)))

(declare-fun c!7344 () Bool)

(assert (=> b!58316 (= c!7344 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!58317 () Bool)

(assert (=> b!58317 (= e!38383 (contains!689 (ite c!7186 (Cons!1446 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) Nil!1447) Nil!1447) (select (arr!1774 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!4250 () Bool)

(assert (=> bm!4250 (= call!4253 (arrayNoDuplicates!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7344 (Cons!1446 (select (arr!1774 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!7186 (Cons!1446 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) Nil!1447) Nil!1447)) (ite c!7186 (Cons!1446 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) Nil!1447) Nil!1447))))))

(assert (= (and d!11027 (not res!32512)) b!58314))

(assert (= (and b!58314 res!32510) b!58317))

(assert (= (and b!58314 res!32511) b!58316))

(assert (= (and b!58316 c!7344) b!58315))

(assert (= (and b!58316 (not c!7344)) b!58313))

(assert (= (or b!58315 b!58313) bm!4250))

(assert (=> b!58314 m!49229))

(assert (=> b!58314 m!49229))

(declare-fun m!49743 () Bool)

(assert (=> b!58314 m!49743))

(assert (=> b!58316 m!49229))

(assert (=> b!58316 m!49229))

(assert (=> b!58316 m!49743))

(assert (=> b!58317 m!49229))

(assert (=> b!58317 m!49229))

(declare-fun m!49745 () Bool)

(assert (=> b!58317 m!49745))

(assert (=> bm!4250 m!49229))

(declare-fun m!49747 () Bool)

(assert (=> bm!4250 m!49747))

(assert (=> bm!4189 d!11027))

(declare-fun b!58318 () Bool)

(declare-fun e!38387 () Bool)

(declare-fun call!4254 () Bool)

(assert (=> b!58318 (= e!38387 call!4254)))

(declare-fun bm!4251 () Bool)

(assert (=> bm!4251 (= call!4254 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3642 (_2!1030 lt!22784)) (mask!5896 (_2!1030 lt!22784))))))

(declare-fun d!11029 () Bool)

(declare-fun res!32513 () Bool)

(declare-fun e!38388 () Bool)

(assert (=> d!11029 (=> res!32513 e!38388)))

(assert (=> d!11029 (= res!32513 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))))))

(assert (=> d!11029 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 (_2!1030 lt!22784)) (mask!5896 (_2!1030 lt!22784))) e!38388)))

(declare-fun b!58319 () Bool)

(assert (=> b!58319 (= e!38388 e!38387)))

(declare-fun c!7345 () Bool)

(assert (=> b!58319 (= c!7345 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000)))))

(declare-fun b!58320 () Bool)

(declare-fun e!38389 () Bool)

(assert (=> b!58320 (= e!38389 call!4254)))

(declare-fun b!58321 () Bool)

(assert (=> b!58321 (= e!38387 e!38389)))

(declare-fun lt!23357 () (_ BitVec 64))

(assert (=> b!58321 (= lt!23357 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000))))

(declare-fun lt!23356 () Unit!1488)

(assert (=> b!58321 (= lt!23356 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3642 (_2!1030 lt!22784)) lt!23357 #b00000000000000000000000000000000))))

(assert (=> b!58321 (arrayContainsKey!0 (_keys!3642 (_2!1030 lt!22784)) lt!23357 #b00000000000000000000000000000000)))

(declare-fun lt!23358 () Unit!1488)

(assert (=> b!58321 (= lt!23358 lt!23356)))

(declare-fun res!32514 () Bool)

(assert (=> b!58321 (= res!32514 (= (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000) (_keys!3642 (_2!1030 lt!22784)) (mask!5896 (_2!1030 lt!22784))) (Found!236 #b00000000000000000000000000000000)))))

(assert (=> b!58321 (=> (not res!32514) (not e!38389))))

(assert (= (and d!11029 (not res!32513)) b!58319))

(assert (= (and b!58319 c!7345) b!58321))

(assert (= (and b!58319 (not c!7345)) b!58318))

(assert (= (and b!58321 res!32514) b!58320))

(assert (= (or b!58320 b!58318) bm!4251))

(declare-fun m!49749 () Bool)

(assert (=> bm!4251 m!49749))

(assert (=> b!58319 m!49069))

(assert (=> b!58319 m!49069))

(assert (=> b!58319 m!49107))

(assert (=> b!58321 m!49069))

(declare-fun m!49751 () Bool)

(assert (=> b!58321 m!49751))

(declare-fun m!49753 () Bool)

(assert (=> b!58321 m!49753))

(assert (=> b!58321 m!49069))

(declare-fun m!49755 () Bool)

(assert (=> b!58321 m!49755))

(assert (=> b!57693 d!11029))

(declare-fun d!11031 () Bool)

(assert (=> d!11031 (contains!688 (getCurrentListMap!400 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))

(assert (=> d!11031 true))

(declare-fun _$16!75 () Unit!1488)

(assert (=> d!11031 (= (choose!303 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3067 lt!22774) (defaultEntry!2022 newMap!16)) _$16!75)))

(declare-fun bs!2531 () Bool)

(assert (= bs!2531 d!11031))

(assert (=> bs!2531 m!48873))

(assert (=> bs!2531 m!48309))

(assert (=> bs!2531 m!48873))

(assert (=> bs!2531 m!48309))

(assert (=> bs!2531 m!48875))

(assert (=> d!10717 d!11031))

(assert (=> d!10717 d!10735))

(declare-fun d!11033 () Bool)

(declare-fun res!32515 () Bool)

(declare-fun e!38390 () Bool)

(assert (=> d!11033 (=> res!32515 e!38390)))

(assert (=> d!11033 (= res!32515 (and ((_ is Cons!1445) (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))) (= (_1!1029 (h!2025 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))) lt!22700)))))

(assert (=> d!11033 (= (containsKey!126 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700) e!38390)))

(declare-fun b!58322 () Bool)

(declare-fun e!38391 () Bool)

(assert (=> b!58322 (= e!38390 e!38391)))

(declare-fun res!32516 () Bool)

(assert (=> b!58322 (=> (not res!32516) (not e!38391))))

(assert (=> b!58322 (= res!32516 (and (or (not ((_ is Cons!1445) (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))) (bvsle (_1!1029 (h!2025 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))) lt!22700)) ((_ is Cons!1445) (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))) (bvslt (_1!1029 (h!2025 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))) lt!22700)))))

(declare-fun b!58323 () Bool)

(assert (=> b!58323 (= e!38391 (containsKey!126 (t!4775 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))) lt!22700))))

(assert (= (and d!11033 (not res!32515)) b!58322))

(assert (= (and b!58322 res!32516) b!58323))

(declare-fun m!49757 () Bool)

(assert (=> b!58323 m!49757))

(assert (=> d!10635 d!11033))

(declare-fun b!58324 () Bool)

(declare-fun e!38392 () Bool)

(declare-fun call!4255 () Bool)

(assert (=> b!58324 (= e!38392 call!4255)))

(declare-fun bm!4252 () Bool)

(assert (=> bm!4252 (= call!4255 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(declare-fun d!11035 () Bool)

(declare-fun res!32517 () Bool)

(declare-fun e!38393 () Bool)

(assert (=> d!11035 (=> res!32517 e!38393)))

(assert (=> d!11035 (= res!32517 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!11035 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3642 newMap!16) (mask!5896 newMap!16)) e!38393)))

(declare-fun b!58325 () Bool)

(assert (=> b!58325 (= e!38393 e!38392)))

(declare-fun c!7346 () Bool)

(assert (=> b!58325 (= c!7346 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!58326 () Bool)

(declare-fun e!38394 () Bool)

(assert (=> b!58326 (= e!38394 call!4255)))

(declare-fun b!58327 () Bool)

(assert (=> b!58327 (= e!38392 e!38394)))

(declare-fun lt!23360 () (_ BitVec 64))

(assert (=> b!58327 (= lt!23360 (select (arr!1774 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!23359 () Unit!1488)

(assert (=> b!58327 (= lt!23359 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3642 newMap!16) lt!23360 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!58327 (arrayContainsKey!0 (_keys!3642 newMap!16) lt!23360 #b00000000000000000000000000000000)))

(declare-fun lt!23361 () Unit!1488)

(assert (=> b!58327 (= lt!23361 lt!23359)))

(declare-fun res!32518 () Bool)

(assert (=> b!58327 (= res!32518 (= (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3642 newMap!16) (mask!5896 newMap!16)) (Found!236 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!58327 (=> (not res!32518) (not e!38394))))

(assert (= (and d!11035 (not res!32517)) b!58325))

(assert (= (and b!58325 c!7346) b!58327))

(assert (= (and b!58325 (not c!7346)) b!58324))

(assert (= (and b!58327 res!32518) b!58326))

(assert (= (or b!58326 b!58324) bm!4252))

(declare-fun m!49759 () Bool)

(assert (=> bm!4252 m!49759))

(assert (=> b!58325 m!49229))

(assert (=> b!58325 m!49229))

(assert (=> b!58325 m!49743))

(assert (=> b!58327 m!49229))

(declare-fun m!49761 () Bool)

(assert (=> b!58327 m!49761))

(declare-fun m!49763 () Bool)

(assert (=> b!58327 m!49763))

(assert (=> b!58327 m!49229))

(declare-fun m!49765 () Bool)

(assert (=> b!58327 m!49765))

(assert (=> bm!4205 d!11035))

(declare-fun b!58328 () Bool)

(declare-fun e!38395 () Bool)

(declare-fun call!4256 () Bool)

(assert (=> b!58328 (= e!38395 call!4256)))

(declare-fun bm!4253 () Bool)

(assert (=> bm!4253 (= call!4256 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3642 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992)))))))

(declare-fun d!11037 () Bool)

(declare-fun res!32519 () Bool)

(declare-fun e!38396 () Bool)

(assert (=> d!11037 (=> res!32519 e!38396)))

(assert (=> d!11037 (= res!32519 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> d!11037 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992)))) e!38396)))

(declare-fun b!58329 () Bool)

(assert (=> b!58329 (= e!38396 e!38395)))

(declare-fun c!7347 () Bool)

(assert (=> b!58329 (= c!7347 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!58330 () Bool)

(declare-fun e!38397 () Bool)

(assert (=> b!58330 (= e!38397 call!4256)))

(declare-fun b!58331 () Bool)

(assert (=> b!58331 (= e!38395 e!38397)))

(declare-fun lt!23363 () (_ BitVec 64))

(assert (=> b!58331 (= lt!23363 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!23362 () Unit!1488)

(assert (=> b!58331 (= lt!23362 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) lt!23363 #b00000000000000000000000000000000))))

(assert (=> b!58331 (arrayContainsKey!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) lt!23363 #b00000000000000000000000000000000)))

(declare-fun lt!23364 () Unit!1488)

(assert (=> b!58331 (= lt!23364 lt!23362)))

(declare-fun res!32520 () Bool)

(assert (=> b!58331 (= res!32520 (= (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b00000000000000000000000000000000) (_keys!3642 (v!2365 (underlying!222 thiss!992))) (mask!5896 (v!2365 (underlying!222 thiss!992)))) (Found!236 #b00000000000000000000000000000000)))))

(assert (=> b!58331 (=> (not res!32520) (not e!38397))))

(assert (= (and d!11037 (not res!32519)) b!58329))

(assert (= (and b!58329 c!7347) b!58331))

(assert (= (and b!58329 (not c!7347)) b!58328))

(assert (= (and b!58331 res!32520) b!58330))

(assert (= (or b!58330 b!58328) bm!4253))

(declare-fun m!49767 () Bool)

(assert (=> bm!4253 m!49767))

(assert (=> b!58329 m!49225))

(assert (=> b!58329 m!49225))

(assert (=> b!58329 m!49227))

(assert (=> b!58331 m!49225))

(declare-fun m!49769 () Bool)

(assert (=> b!58331 m!49769))

(declare-fun m!49771 () Bool)

(assert (=> b!58331 m!49771))

(assert (=> b!58331 m!49225))

(declare-fun m!49773 () Bool)

(assert (=> b!58331 m!49773))

(assert (=> b!57568 d!11037))

(declare-fun d!11039 () Bool)

(assert (=> d!11039 (= (get!1076 (getValueByKey!122 (toList!702 lt!22691) lt!22683)) (v!2369 (getValueByKey!122 (toList!702 lt!22691) lt!22683)))))

(assert (=> d!10637 d!11039))

(declare-fun b!58332 () Bool)

(declare-fun e!38398 () Option!128)

(assert (=> b!58332 (= e!38398 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22691)))))))

(declare-fun d!11041 () Bool)

(declare-fun c!7348 () Bool)

(assert (=> d!11041 (= c!7348 (and ((_ is Cons!1445) (toList!702 lt!22691)) (= (_1!1029 (h!2025 (toList!702 lt!22691))) lt!22683)))))

(assert (=> d!11041 (= (getValueByKey!122 (toList!702 lt!22691) lt!22683) e!38398)))

(declare-fun b!58335 () Bool)

(declare-fun e!38399 () Option!128)

(assert (=> b!58335 (= e!38399 None!126)))

(declare-fun b!58333 () Bool)

(assert (=> b!58333 (= e!38398 e!38399)))

(declare-fun c!7349 () Bool)

(assert (=> b!58333 (= c!7349 (and ((_ is Cons!1445) (toList!702 lt!22691)) (not (= (_1!1029 (h!2025 (toList!702 lt!22691))) lt!22683))))))

(declare-fun b!58334 () Bool)

(assert (=> b!58334 (= e!38399 (getValueByKey!122 (t!4775 (toList!702 lt!22691)) lt!22683))))

(assert (= (and d!11041 c!7348) b!58332))

(assert (= (and d!11041 (not c!7348)) b!58333))

(assert (= (and b!58333 c!7349) b!58334))

(assert (= (and b!58333 (not c!7349)) b!58335))

(declare-fun m!49775 () Bool)

(assert (=> b!58334 m!49775))

(assert (=> d!10637 d!11041))

(assert (=> b!57780 d!10899))

(declare-fun d!11043 () Bool)

(declare-fun e!38400 () Bool)

(assert (=> d!11043 e!38400))

(declare-fun res!32522 () Bool)

(assert (=> d!11043 (=> (not res!32522) (not e!38400))))

(declare-fun lt!23367 () ListLongMap!1373)

(assert (=> d!11043 (= res!32522 (contains!688 lt!23367 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23368 () List!1449)

(assert (=> d!11043 (= lt!23367 (ListLongMap!1374 lt!23368))))

(declare-fun lt!23365 () Unit!1488)

(declare-fun lt!23366 () Unit!1488)

(assert (=> d!11043 (= lt!23365 lt!23366)))

(assert (=> d!11043 (= (getValueByKey!122 lt!23368 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11043 (= lt!23366 (lemmaContainsTupThenGetReturnValue!41 lt!23368 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11043 (= lt!23368 (insertStrictlySorted!43 (toList!702 (map!1104 newMap!16)) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11043 (= (+!80 (map!1104 newMap!16) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23367)))

(declare-fun b!58336 () Bool)

(declare-fun res!32521 () Bool)

(assert (=> b!58336 (=> (not res!32521) (not e!38400))))

(assert (=> b!58336 (= res!32521 (= (getValueByKey!122 (toList!702 lt!23367) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58337 () Bool)

(assert (=> b!58337 (= e!38400 (contains!690 (toList!702 lt!23367) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11043 res!32522) b!58336))

(assert (= (and b!58336 res!32521) b!58337))

(declare-fun m!49777 () Bool)

(assert (=> d!11043 m!49777))

(declare-fun m!49779 () Bool)

(assert (=> d!11043 m!49779))

(declare-fun m!49781 () Bool)

(assert (=> d!11043 m!49781))

(declare-fun m!49783 () Bool)

(assert (=> d!11043 m!49783))

(declare-fun m!49785 () Bool)

(assert (=> b!58336 m!49785))

(declare-fun m!49787 () Bool)

(assert (=> b!58337 m!49787))

(assert (=> b!57780 d!11043))

(assert (=> b!57780 d!10579))

(declare-fun d!11045 () Bool)

(declare-fun e!38402 () Bool)

(assert (=> d!11045 e!38402))

(declare-fun res!32523 () Bool)

(assert (=> d!11045 (=> res!32523 e!38402)))

(declare-fun lt!23369 () Bool)

(assert (=> d!11045 (= res!32523 (not lt!23369))))

(declare-fun lt!23370 () Bool)

(assert (=> d!11045 (= lt!23369 lt!23370)))

(declare-fun lt!23372 () Unit!1488)

(declare-fun e!38401 () Unit!1488)

(assert (=> d!11045 (= lt!23372 e!38401)))

(declare-fun c!7350 () Bool)

(assert (=> d!11045 (= c!7350 lt!23370)))

(assert (=> d!11045 (= lt!23370 (containsKey!126 (toList!702 lt!22944) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11045 (= (contains!688 lt!22944 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23369)))

(declare-fun b!58338 () Bool)

(declare-fun lt!23371 () Unit!1488)

(assert (=> b!58338 (= e!38401 lt!23371)))

(assert (=> b!58338 (= lt!23371 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22944) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58338 (isDefined!76 (getValueByKey!122 (toList!702 lt!22944) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58339 () Bool)

(declare-fun Unit!1536 () Unit!1488)

(assert (=> b!58339 (= e!38401 Unit!1536)))

(declare-fun b!58340 () Bool)

(assert (=> b!58340 (= e!38402 (isDefined!76 (getValueByKey!122 (toList!702 lt!22944) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11045 c!7350) b!58338))

(assert (= (and d!11045 (not c!7350)) b!58339))

(assert (= (and d!11045 (not res!32523)) b!58340))

(declare-fun m!49789 () Bool)

(assert (=> d!11045 m!49789))

(declare-fun m!49791 () Bool)

(assert (=> b!58338 m!49791))

(assert (=> b!58338 m!49137))

(assert (=> b!58338 m!49137))

(declare-fun m!49793 () Bool)

(assert (=> b!58338 m!49793))

(assert (=> b!58340 m!49137))

(assert (=> b!58340 m!49137))

(assert (=> b!58340 m!49793))

(assert (=> bm!4186 d!11045))

(declare-fun d!11047 () Bool)

(declare-fun e!38404 () Bool)

(assert (=> d!11047 e!38404))

(declare-fun res!32524 () Bool)

(assert (=> d!11047 (=> res!32524 e!38404)))

(declare-fun lt!23373 () Bool)

(assert (=> d!11047 (= res!32524 (not lt!23373))))

(declare-fun lt!23374 () Bool)

(assert (=> d!11047 (= lt!23373 lt!23374)))

(declare-fun lt!23376 () Unit!1488)

(declare-fun e!38403 () Unit!1488)

(assert (=> d!11047 (= lt!23376 e!38403)))

(declare-fun c!7351 () Bool)

(assert (=> d!11047 (= c!7351 lt!23374)))

(assert (=> d!11047 (= lt!23374 (containsKey!126 (toList!702 lt!22844) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> d!11047 (= (contains!688 lt!22844 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23373)))

(declare-fun b!58341 () Bool)

(declare-fun lt!23375 () Unit!1488)

(assert (=> b!58341 (= e!38403 lt!23375)))

(assert (=> b!58341 (= lt!23375 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22844) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (=> b!58341 (isDefined!76 (getValueByKey!122 (toList!702 lt!22844) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!58342 () Bool)

(declare-fun Unit!1537 () Unit!1488)

(assert (=> b!58342 (= e!38403 Unit!1537)))

(declare-fun b!58343 () Bool)

(assert (=> b!58343 (= e!38404 (isDefined!76 (getValueByKey!122 (toList!702 lt!22844) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!11047 c!7351) b!58341))

(assert (= (and d!11047 (not c!7351)) b!58342))

(assert (= (and d!11047 (not res!32524)) b!58343))

(declare-fun m!49795 () Bool)

(assert (=> d!11047 m!49795))

(declare-fun m!49797 () Bool)

(assert (=> b!58341 m!49797))

(assert (=> b!58341 m!48447))

(assert (=> b!58341 m!48447))

(declare-fun m!49799 () Bool)

(assert (=> b!58341 m!49799))

(assert (=> b!58343 m!48447))

(assert (=> b!58343 m!48447))

(assert (=> b!58343 m!49799))

(assert (=> d!10615 d!11047))

(declare-fun b!58344 () Bool)

(declare-fun e!38405 () Option!128)

(assert (=> b!58344 (= e!38405 (Some!127 (_2!1029 (h!2025 lt!22845))))))

(declare-fun d!11049 () Bool)

(declare-fun c!7352 () Bool)

(assert (=> d!11049 (= c!7352 (and ((_ is Cons!1445) lt!22845) (= (_1!1029 (h!2025 lt!22845)) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!11049 (= (getValueByKey!122 lt!22845 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) e!38405)))

(declare-fun b!58347 () Bool)

(declare-fun e!38406 () Option!128)

(assert (=> b!58347 (= e!38406 None!126)))

(declare-fun b!58345 () Bool)

(assert (=> b!58345 (= e!38405 e!38406)))

(declare-fun c!7353 () Bool)

(assert (=> b!58345 (= c!7353 (and ((_ is Cons!1445) lt!22845) (not (= (_1!1029 (h!2025 lt!22845)) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!58346 () Bool)

(assert (=> b!58346 (= e!38406 (getValueByKey!122 (t!4775 lt!22845) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!11049 c!7352) b!58344))

(assert (= (and d!11049 (not c!7352)) b!58345))

(assert (= (and b!58345 c!7353) b!58346))

(assert (= (and b!58345 (not c!7353)) b!58347))

(declare-fun m!49801 () Bool)

(assert (=> b!58346 m!49801))

(assert (=> d!10615 d!11049))

(declare-fun d!11051 () Bool)

(assert (=> d!11051 (= (getValueByKey!122 lt!22845 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun lt!23377 () Unit!1488)

(assert (=> d!11051 (= lt!23377 (choose!305 lt!22845 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun e!38407 () Bool)

(assert (=> d!11051 e!38407))

(declare-fun res!32525 () Bool)

(assert (=> d!11051 (=> (not res!32525) (not e!38407))))

(assert (=> d!11051 (= res!32525 (isStrictlySorted!278 lt!22845))))

(assert (=> d!11051 (= (lemmaContainsTupThenGetReturnValue!41 lt!22845 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23377)))

(declare-fun b!58348 () Bool)

(declare-fun res!32526 () Bool)

(assert (=> b!58348 (=> (not res!32526) (not e!38407))))

(assert (=> b!58348 (= res!32526 (containsKey!126 lt!22845 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun b!58349 () Bool)

(assert (=> b!58349 (= e!38407 (contains!690 lt!22845 (tuple2!2039 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!11051 res!32525) b!58348))

(assert (= (and b!58348 res!32526) b!58349))

(assert (=> d!11051 m!48441))

(declare-fun m!49803 () Bool)

(assert (=> d!11051 m!49803))

(declare-fun m!49805 () Bool)

(assert (=> d!11051 m!49805))

(declare-fun m!49807 () Bool)

(assert (=> b!58348 m!49807))

(declare-fun m!49809 () Bool)

(assert (=> b!58349 m!49809))

(assert (=> d!10615 d!11051))

(declare-fun b!58350 () Bool)

(declare-fun res!32527 () Bool)

(declare-fun e!38409 () Bool)

(assert (=> b!58350 (=> (not res!32527) (not e!38409))))

(declare-fun lt!23378 () List!1449)

(assert (=> b!58350 (= res!32527 (containsKey!126 lt!23378 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun d!11053 () Bool)

(assert (=> d!11053 e!38409))

(declare-fun res!32528 () Bool)

(assert (=> d!11053 (=> (not res!32528) (not e!38409))))

(assert (=> d!11053 (= res!32528 (isStrictlySorted!278 lt!23378))))

(declare-fun e!38412 () List!1449)

(assert (=> d!11053 (= lt!23378 e!38412)))

(declare-fun c!7354 () Bool)

(assert (=> d!11053 (= c!7354 (and ((_ is Cons!1445) (toList!702 lt!22682)) (bvslt (_1!1029 (h!2025 (toList!702 lt!22682))) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!11053 (isStrictlySorted!278 (toList!702 lt!22682))))

(assert (=> d!11053 (= (insertStrictlySorted!43 (toList!702 lt!22682) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!23378)))

(declare-fun b!58351 () Bool)

(declare-fun e!38408 () List!1449)

(declare-fun call!4259 () List!1449)

(assert (=> b!58351 (= e!38408 call!4259)))

(declare-fun c!7356 () Bool)

(declare-fun c!7357 () Bool)

(declare-fun b!58352 () Bool)

(declare-fun e!38411 () List!1449)

(assert (=> b!58352 (= e!38411 (ite c!7356 (t!4775 (toList!702 lt!22682)) (ite c!7357 (Cons!1445 (h!2025 (toList!702 lt!22682)) (t!4775 (toList!702 lt!22682))) Nil!1446)))))

(declare-fun b!58353 () Bool)

(assert (=> b!58353 (= e!38409 (contains!690 lt!23378 (tuple2!2039 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!58354 () Bool)

(assert (=> b!58354 (= e!38411 (insertStrictlySorted!43 (t!4775 (toList!702 lt!22682)) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(declare-fun bm!4254 () Bool)

(declare-fun call!4258 () List!1449)

(assert (=> bm!4254 (= call!4258 ($colon$colon!58 e!38411 (ite c!7354 (h!2025 (toList!702 lt!22682)) (tuple2!2039 (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))) (_2!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun c!7355 () Bool)

(assert (=> bm!4254 (= c!7355 c!7354)))

(declare-fun b!58355 () Bool)

(declare-fun e!38410 () List!1449)

(declare-fun call!4257 () List!1449)

(assert (=> b!58355 (= e!38410 call!4257)))

(declare-fun bm!4255 () Bool)

(assert (=> bm!4255 (= call!4257 call!4258)))

(declare-fun b!58356 () Bool)

(assert (=> b!58356 (= c!7357 (and ((_ is Cons!1445) (toList!702 lt!22682)) (bvsgt (_1!1029 (h!2025 (toList!702 lt!22682))) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> b!58356 (= e!38410 e!38408)))

(declare-fun b!58357 () Bool)

(assert (=> b!58357 (= e!38412 call!4258)))

(declare-fun b!58358 () Bool)

(assert (=> b!58358 (= e!38408 call!4259)))

(declare-fun b!58359 () Bool)

(assert (=> b!58359 (= e!38412 e!38410)))

(assert (=> b!58359 (= c!7356 (and ((_ is Cons!1445) (toList!702 lt!22682)) (= (_1!1029 (h!2025 (toList!702 lt!22682))) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun bm!4256 () Bool)

(assert (=> bm!4256 (= call!4259 call!4257)))

(assert (= (and d!11053 c!7354) b!58357))

(assert (= (and d!11053 (not c!7354)) b!58359))

(assert (= (and b!58359 c!7356) b!58355))

(assert (= (and b!58359 (not c!7356)) b!58356))

(assert (= (and b!58356 c!7357) b!58351))

(assert (= (and b!58356 (not c!7357)) b!58358))

(assert (= (or b!58351 b!58358) bm!4256))

(assert (= (or b!58355 bm!4256) bm!4255))

(assert (= (or b!58357 bm!4255) bm!4254))

(assert (= (and bm!4254 c!7355) b!58354))

(assert (= (and bm!4254 (not c!7355)) b!58352))

(assert (= (and d!11053 res!32528) b!58350))

(assert (= (and b!58350 res!32527) b!58353))

(declare-fun m!49811 () Bool)

(assert (=> b!58350 m!49811))

(declare-fun m!49813 () Bool)

(assert (=> d!11053 m!49813))

(declare-fun m!49815 () Bool)

(assert (=> d!11053 m!49815))

(declare-fun m!49817 () Bool)

(assert (=> b!58353 m!49817))

(declare-fun m!49819 () Bool)

(assert (=> b!58354 m!49819))

(declare-fun m!49821 () Bool)

(assert (=> bm!4254 m!49821))

(assert (=> d!10615 d!11053))

(declare-fun d!11055 () Bool)

(assert (=> d!11055 (= (get!1076 (getValueByKey!122 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2369 (getValueByKey!122 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!10725 d!11055))

(assert (=> d!10725 d!10807))

(declare-fun d!11057 () Bool)

(assert (=> d!11057 (= (apply!65 (+!80 lt!22931 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16))) lt!22938) (apply!65 lt!22931 lt!22938))))

(declare-fun lt!23379 () Unit!1488)

(assert (=> d!11057 (= lt!23379 (choose!296 lt!22931 lt!22947 (zeroValue!1940 newMap!16) lt!22938))))

(declare-fun e!38413 () Bool)

(assert (=> d!11057 e!38413))

(declare-fun res!32529 () Bool)

(assert (=> d!11057 (=> (not res!32529) (not e!38413))))

(assert (=> d!11057 (= res!32529 (contains!688 lt!22931 lt!22938))))

(assert (=> d!11057 (= (addApplyDifferent!41 lt!22931 lt!22947 (zeroValue!1940 newMap!16) lt!22938) lt!23379)))

(declare-fun b!58360 () Bool)

(assert (=> b!58360 (= e!38413 (not (= lt!22938 lt!22947)))))

(assert (= (and d!11057 res!32529) b!58360))

(assert (=> d!11057 m!48673))

(declare-fun m!49823 () Bool)

(assert (=> d!11057 m!49823))

(assert (=> d!11057 m!48673))

(assert (=> d!11057 m!48691))

(declare-fun m!49825 () Bool)

(assert (=> d!11057 m!49825))

(assert (=> d!11057 m!48683))

(assert (=> b!57709 d!11057))

(declare-fun d!11059 () Bool)

(declare-fun e!38414 () Bool)

(assert (=> d!11059 e!38414))

(declare-fun res!32531 () Bool)

(assert (=> d!11059 (=> (not res!32531) (not e!38414))))

(declare-fun lt!23382 () ListLongMap!1373)

(assert (=> d!11059 (= res!32531 (contains!688 lt!23382 (_1!1029 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16)))))))

(declare-fun lt!23383 () List!1449)

(assert (=> d!11059 (= lt!23382 (ListLongMap!1374 lt!23383))))

(declare-fun lt!23380 () Unit!1488)

(declare-fun lt!23381 () Unit!1488)

(assert (=> d!11059 (= lt!23380 lt!23381)))

(assert (=> d!11059 (= (getValueByKey!122 lt!23383 (_1!1029 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16)))))))

(assert (=> d!11059 (= lt!23381 (lemmaContainsTupThenGetReturnValue!41 lt!23383 (_1!1029 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16)))))))

(assert (=> d!11059 (= lt!23383 (insertStrictlySorted!43 (toList!702 lt!22951) (_1!1029 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16)))))))

(assert (=> d!11059 (= (+!80 lt!22951 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16))) lt!23382)))

(declare-fun b!58361 () Bool)

(declare-fun res!32530 () Bool)

(assert (=> b!58361 (=> (not res!32530) (not e!38414))))

(assert (=> b!58361 (= res!32530 (= (getValueByKey!122 (toList!702 lt!23382) (_1!1029 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16))))))))

(declare-fun b!58362 () Bool)

(assert (=> b!58362 (= e!38414 (contains!690 (toList!702 lt!23382) (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16))))))

(assert (= (and d!11059 res!32531) b!58361))

(assert (= (and b!58361 res!32530) b!58362))

(declare-fun m!49827 () Bool)

(assert (=> d!11059 m!49827))

(declare-fun m!49829 () Bool)

(assert (=> d!11059 m!49829))

(declare-fun m!49831 () Bool)

(assert (=> d!11059 m!49831))

(declare-fun m!49833 () Bool)

(assert (=> d!11059 m!49833))

(declare-fun m!49835 () Bool)

(assert (=> b!58361 m!49835))

(declare-fun m!49837 () Bool)

(assert (=> b!58362 m!49837))

(assert (=> b!57709 d!11059))

(declare-fun d!11061 () Bool)

(assert (=> d!11061 (= (apply!65 lt!22931 lt!22938) (get!1076 (getValueByKey!122 (toList!702 lt!22931) lt!22938)))))

(declare-fun bs!2532 () Bool)

(assert (= bs!2532 d!11061))

(declare-fun m!49839 () Bool)

(assert (=> bs!2532 m!49839))

(assert (=> bs!2532 m!49839))

(declare-fun m!49841 () Bool)

(assert (=> bs!2532 m!49841))

(assert (=> b!57709 d!11061))

(declare-fun d!11063 () Bool)

(assert (=> d!11063 (= (apply!65 lt!22940 lt!22932) (get!1076 (getValueByKey!122 (toList!702 lt!22940) lt!22932)))))

(declare-fun bs!2533 () Bool)

(assert (= bs!2533 d!11063))

(declare-fun m!49843 () Bool)

(assert (=> bs!2533 m!49843))

(assert (=> bs!2533 m!49843))

(declare-fun m!49845 () Bool)

(assert (=> bs!2533 m!49845))

(assert (=> b!57709 d!11063))

(declare-fun d!11065 () Bool)

(declare-fun e!38416 () Bool)

(assert (=> d!11065 e!38416))

(declare-fun res!32532 () Bool)

(assert (=> d!11065 (=> res!32532 e!38416)))

(declare-fun lt!23384 () Bool)

(assert (=> d!11065 (= res!32532 (not lt!23384))))

(declare-fun lt!23385 () Bool)

(assert (=> d!11065 (= lt!23384 lt!23385)))

(declare-fun lt!23387 () Unit!1488)

(declare-fun e!38415 () Unit!1488)

(assert (=> d!11065 (= lt!23387 e!38415)))

(declare-fun c!7358 () Bool)

(assert (=> d!11065 (= c!7358 lt!23385)))

(assert (=> d!11065 (= lt!23385 (containsKey!126 (toList!702 (+!80 lt!22951 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16)))) lt!22949))))

(assert (=> d!11065 (= (contains!688 (+!80 lt!22951 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16))) lt!22949) lt!23384)))

(declare-fun b!58363 () Bool)

(declare-fun lt!23386 () Unit!1488)

(assert (=> b!58363 (= e!38415 lt!23386)))

(assert (=> b!58363 (= lt!23386 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 (+!80 lt!22951 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16)))) lt!22949))))

(assert (=> b!58363 (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22951 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16)))) lt!22949))))

(declare-fun b!58364 () Bool)

(declare-fun Unit!1538 () Unit!1488)

(assert (=> b!58364 (= e!38415 Unit!1538)))

(declare-fun b!58365 () Bool)

(assert (=> b!58365 (= e!38416 (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22951 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16)))) lt!22949)))))

(assert (= (and d!11065 c!7358) b!58363))

(assert (= (and d!11065 (not c!7358)) b!58364))

(assert (= (and d!11065 (not res!32532)) b!58365))

(declare-fun m!49847 () Bool)

(assert (=> d!11065 m!49847))

(declare-fun m!49849 () Bool)

(assert (=> b!58363 m!49849))

(declare-fun m!49851 () Bool)

(assert (=> b!58363 m!49851))

(assert (=> b!58363 m!49851))

(declare-fun m!49853 () Bool)

(assert (=> b!58363 m!49853))

(assert (=> b!58365 m!49851))

(assert (=> b!58365 m!49851))

(assert (=> b!58365 m!49853))

(assert (=> b!57709 d!11065))

(declare-fun d!11067 () Bool)

(declare-fun e!38417 () Bool)

(assert (=> d!11067 e!38417))

(declare-fun res!32534 () Bool)

(assert (=> d!11067 (=> (not res!32534) (not e!38417))))

(declare-fun lt!23390 () ListLongMap!1373)

(assert (=> d!11067 (= res!32534 (contains!688 lt!23390 (_1!1029 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16)))))))

(declare-fun lt!23391 () List!1449)

(assert (=> d!11067 (= lt!23390 (ListLongMap!1374 lt!23391))))

(declare-fun lt!23388 () Unit!1488)

(declare-fun lt!23389 () Unit!1488)

(assert (=> d!11067 (= lt!23388 lt!23389)))

(assert (=> d!11067 (= (getValueByKey!122 lt!23391 (_1!1029 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16)))))))

(assert (=> d!11067 (= lt!23389 (lemmaContainsTupThenGetReturnValue!41 lt!23391 (_1!1029 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16)))))))

(assert (=> d!11067 (= lt!23391 (insertStrictlySorted!43 (toList!702 lt!22931) (_1!1029 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16)))))))

(assert (=> d!11067 (= (+!80 lt!22931 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16))) lt!23390)))

(declare-fun b!58366 () Bool)

(declare-fun res!32533 () Bool)

(assert (=> b!58366 (=> (not res!32533) (not e!38417))))

(assert (=> b!58366 (= res!32533 (= (getValueByKey!122 (toList!702 lt!23390) (_1!1029 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16))))))))

(declare-fun b!58367 () Bool)

(assert (=> b!58367 (= e!38417 (contains!690 (toList!702 lt!23390) (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16))))))

(assert (= (and d!11067 res!32534) b!58366))

(assert (= (and b!58366 res!32533) b!58367))

(declare-fun m!49855 () Bool)

(assert (=> d!11067 m!49855))

(declare-fun m!49857 () Bool)

(assert (=> d!11067 m!49857))

(declare-fun m!49859 () Bool)

(assert (=> d!11067 m!49859))

(declare-fun m!49861 () Bool)

(assert (=> d!11067 m!49861))

(declare-fun m!49863 () Bool)

(assert (=> b!58366 m!49863))

(declare-fun m!49865 () Bool)

(assert (=> b!58367 m!49865))

(assert (=> b!57709 d!11067))

(declare-fun d!11069 () Bool)

(assert (=> d!11069 (= (apply!65 (+!80 lt!22931 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16))) lt!22938) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22931 (tuple2!2039 lt!22947 (zeroValue!1940 newMap!16)))) lt!22938)))))

(declare-fun bs!2534 () Bool)

(assert (= bs!2534 d!11069))

(declare-fun m!49867 () Bool)

(assert (=> bs!2534 m!49867))

(assert (=> bs!2534 m!49867))

(declare-fun m!49869 () Bool)

(assert (=> bs!2534 m!49869))

(assert (=> b!57709 d!11069))

(declare-fun b!58368 () Bool)

(declare-fun e!38423 () Bool)

(declare-fun e!38420 () Bool)

(assert (=> b!58368 (= e!38423 e!38420)))

(declare-fun c!7361 () Bool)

(assert (=> b!58368 (= c!7361 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58369 () Bool)

(assert (=> b!58369 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(assert (=> b!58369 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_values!2005 newMap!16))))))

(declare-fun e!38419 () Bool)

(declare-fun lt!23392 () ListLongMap!1373)

(assert (=> b!58369 (= e!38419 (= (apply!65 lt!23392 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!11071 () Bool)

(declare-fun e!38424 () Bool)

(assert (=> d!11071 e!38424))

(declare-fun res!32535 () Bool)

(assert (=> d!11071 (=> (not res!32535) (not e!38424))))

(assert (=> d!11071 (= res!32535 (not (contains!688 lt!23392 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!38418 () ListLongMap!1373)

(assert (=> d!11071 (= lt!23392 e!38418)))

(declare-fun c!7359 () Bool)

(assert (=> d!11071 (= c!7359 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!11071 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11071 (= (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23392)))

(declare-fun b!58370 () Bool)

(assert (=> b!58370 (= e!38420 (isEmpty!296 lt!23392))))

(declare-fun b!58371 () Bool)

(declare-fun res!32537 () Bool)

(assert (=> b!58371 (=> (not res!32537) (not e!38424))))

(assert (=> b!58371 (= res!32537 (not (contains!688 lt!23392 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58372 () Bool)

(assert (=> b!58372 (= e!38420 (= lt!23392 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16))))))

(declare-fun b!58373 () Bool)

(declare-fun e!38422 () Bool)

(assert (=> b!58373 (= e!38422 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58373 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!58374 () Bool)

(declare-fun e!38421 () ListLongMap!1373)

(declare-fun call!4260 () ListLongMap!1373)

(assert (=> b!58374 (= e!38421 call!4260)))

(declare-fun b!58375 () Bool)

(assert (=> b!58375 (= e!38418 e!38421)))

(declare-fun c!7360 () Bool)

(assert (=> b!58375 (= c!7360 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58376 () Bool)

(assert (=> b!58376 (= e!38423 e!38419)))

(assert (=> b!58376 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun res!32536 () Bool)

(assert (=> b!58376 (= res!32536 (contains!688 lt!23392 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58376 (=> (not res!32536) (not e!38419))))

(declare-fun bm!4257 () Bool)

(assert (=> bm!4257 (= call!4260 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2022 newMap!16)))))

(declare-fun b!58377 () Bool)

(assert (=> b!58377 (= e!38418 (ListLongMap!1374 Nil!1446))))

(declare-fun b!58378 () Bool)

(assert (=> b!58378 (= e!38424 e!38423)))

(declare-fun c!7362 () Bool)

(assert (=> b!58378 (= c!7362 e!38422)))

(declare-fun res!32538 () Bool)

(assert (=> b!58378 (=> (not res!32538) (not e!38422))))

(assert (=> b!58378 (= res!32538 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58379 () Bool)

(declare-fun lt!23397 () Unit!1488)

(declare-fun lt!23393 () Unit!1488)

(assert (=> b!58379 (= lt!23397 lt!23393)))

(declare-fun lt!23394 () ListLongMap!1373)

(declare-fun lt!23396 () V!2835)

(declare-fun lt!23395 () (_ BitVec 64))

(declare-fun lt!23398 () (_ BitVec 64))

(assert (=> b!58379 (not (contains!688 (+!80 lt!23394 (tuple2!2039 lt!23395 lt!23396)) lt!23398))))

(assert (=> b!58379 (= lt!23393 (addStillNotContains!16 lt!23394 lt!23395 lt!23396 lt!23398))))

(assert (=> b!58379 (= lt!23398 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!58379 (= lt!23396 (get!1073 (select (arr!1775 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!58379 (= lt!23395 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58379 (= lt!23394 call!4260)))

(assert (=> b!58379 (= e!38421 (+!80 call!4260 (tuple2!2039 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000) (get!1073 (select (arr!1775 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11071 c!7359) b!58377))

(assert (= (and d!11071 (not c!7359)) b!58375))

(assert (= (and b!58375 c!7360) b!58379))

(assert (= (and b!58375 (not c!7360)) b!58374))

(assert (= (or b!58379 b!58374) bm!4257))

(assert (= (and d!11071 res!32535) b!58371))

(assert (= (and b!58371 res!32537) b!58378))

(assert (= (and b!58378 res!32538) b!58373))

(assert (= (and b!58378 c!7362) b!58376))

(assert (= (and b!58378 (not c!7362)) b!58368))

(assert (= (and b!58376 res!32536) b!58369))

(assert (= (and b!58368 c!7361) b!58372))

(assert (= (and b!58368 (not c!7361)) b!58370))

(declare-fun b_lambda!2557 () Bool)

(assert (=> (not b_lambda!2557) (not b!58369)))

(assert (=> b!58369 t!4783))

(declare-fun b_and!3525 () Bool)

(assert (= b_and!3521 (and (=> t!4783 result!2361) b_and!3525)))

(assert (=> b!58369 t!4785))

(declare-fun b_and!3527 () Bool)

(assert (= b_and!3523 (and (=> t!4785 result!2363) b_and!3527)))

(declare-fun b_lambda!2559 () Bool)

(assert (=> (not b_lambda!2559) (not b!58379)))

(assert (=> b!58379 t!4783))

(declare-fun b_and!3529 () Bool)

(assert (= b_and!3525 (and (=> t!4783 result!2361) b_and!3529)))

(assert (=> b!58379 t!4785))

(declare-fun b_and!3531 () Bool)

(assert (= b_and!3527 (and (=> t!4785 result!2363) b_and!3531)))

(declare-fun m!49871 () Bool)

(assert (=> d!11071 m!49871))

(assert (=> d!11071 m!48395))

(assert (=> b!58375 m!48345))

(assert (=> b!58375 m!48345))

(assert (=> b!58375 m!48383))

(assert (=> b!58369 m!48345))

(assert (=> b!58369 m!48339))

(assert (=> b!58369 m!48345))

(declare-fun m!49873 () Bool)

(assert (=> b!58369 m!49873))

(assert (=> b!58369 m!48657))

(assert (=> b!58369 m!48657))

(assert (=> b!58369 m!48339))

(assert (=> b!58369 m!48659))

(assert (=> b!58373 m!48345))

(assert (=> b!58373 m!48345))

(assert (=> b!58373 m!48383))

(assert (=> b!58376 m!48345))

(assert (=> b!58376 m!48345))

(declare-fun m!49875 () Bool)

(assert (=> b!58376 m!49875))

(declare-fun m!49877 () Bool)

(assert (=> b!58372 m!49877))

(declare-fun m!49879 () Bool)

(assert (=> b!58370 m!49879))

(assert (=> b!58379 m!48345))

(declare-fun m!49881 () Bool)

(assert (=> b!58379 m!49881))

(declare-fun m!49883 () Bool)

(assert (=> b!58379 m!49883))

(assert (=> b!58379 m!49881))

(assert (=> b!58379 m!48339))

(assert (=> b!58379 m!48657))

(assert (=> b!58379 m!48657))

(assert (=> b!58379 m!48339))

(assert (=> b!58379 m!48659))

(declare-fun m!49885 () Bool)

(assert (=> b!58379 m!49885))

(declare-fun m!49887 () Bool)

(assert (=> b!58379 m!49887))

(assert (=> bm!4257 m!49877))

(declare-fun m!49889 () Bool)

(assert (=> b!58371 m!49889))

(assert (=> b!57709 d!11071))

(declare-fun d!11073 () Bool)

(assert (=> d!11073 (= (apply!65 (+!80 lt!22940 (tuple2!2039 lt!22936 (minValue!1940 newMap!16))) lt!22932) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22940 (tuple2!2039 lt!22936 (minValue!1940 newMap!16)))) lt!22932)))))

(declare-fun bs!2535 () Bool)

(assert (= bs!2535 d!11073))

(declare-fun m!49891 () Bool)

(assert (=> bs!2535 m!49891))

(assert (=> bs!2535 m!49891))

(declare-fun m!49893 () Bool)

(assert (=> bs!2535 m!49893))

(assert (=> b!57709 d!11073))

(declare-fun d!11075 () Bool)

(declare-fun e!38425 () Bool)

(assert (=> d!11075 e!38425))

(declare-fun res!32540 () Bool)

(assert (=> d!11075 (=> (not res!32540) (not e!38425))))

(declare-fun lt!23401 () ListLongMap!1373)

(assert (=> d!11075 (= res!32540 (contains!688 lt!23401 (_1!1029 (tuple2!2039 lt!22936 (minValue!1940 newMap!16)))))))

(declare-fun lt!23402 () List!1449)

(assert (=> d!11075 (= lt!23401 (ListLongMap!1374 lt!23402))))

(declare-fun lt!23399 () Unit!1488)

(declare-fun lt!23400 () Unit!1488)

(assert (=> d!11075 (= lt!23399 lt!23400)))

(assert (=> d!11075 (= (getValueByKey!122 lt!23402 (_1!1029 (tuple2!2039 lt!22936 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22936 (minValue!1940 newMap!16)))))))

(assert (=> d!11075 (= lt!23400 (lemmaContainsTupThenGetReturnValue!41 lt!23402 (_1!1029 (tuple2!2039 lt!22936 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22936 (minValue!1940 newMap!16)))))))

(assert (=> d!11075 (= lt!23402 (insertStrictlySorted!43 (toList!702 lt!22940) (_1!1029 (tuple2!2039 lt!22936 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22936 (minValue!1940 newMap!16)))))))

(assert (=> d!11075 (= (+!80 lt!22940 (tuple2!2039 lt!22936 (minValue!1940 newMap!16))) lt!23401)))

(declare-fun b!58380 () Bool)

(declare-fun res!32539 () Bool)

(assert (=> b!58380 (=> (not res!32539) (not e!38425))))

(assert (=> b!58380 (= res!32539 (= (getValueByKey!122 (toList!702 lt!23401) (_1!1029 (tuple2!2039 lt!22936 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22936 (minValue!1940 newMap!16))))))))

(declare-fun b!58381 () Bool)

(assert (=> b!58381 (= e!38425 (contains!690 (toList!702 lt!23401) (tuple2!2039 lt!22936 (minValue!1940 newMap!16))))))

(assert (= (and d!11075 res!32540) b!58380))

(assert (= (and b!58380 res!32539) b!58381))

(declare-fun m!49895 () Bool)

(assert (=> d!11075 m!49895))

(declare-fun m!49897 () Bool)

(assert (=> d!11075 m!49897))

(declare-fun m!49899 () Bool)

(assert (=> d!11075 m!49899))

(declare-fun m!49901 () Bool)

(assert (=> d!11075 m!49901))

(declare-fun m!49903 () Bool)

(assert (=> b!58380 m!49903))

(declare-fun m!49905 () Bool)

(assert (=> b!58381 m!49905))

(assert (=> b!57709 d!11075))

(declare-fun d!11077 () Bool)

(declare-fun e!38426 () Bool)

(assert (=> d!11077 e!38426))

(declare-fun res!32542 () Bool)

(assert (=> d!11077 (=> (not res!32542) (not e!38426))))

(declare-fun lt!23405 () ListLongMap!1373)

(assert (=> d!11077 (= res!32542 (contains!688 lt!23405 (_1!1029 (tuple2!2039 lt!22937 (minValue!1940 newMap!16)))))))

(declare-fun lt!23406 () List!1449)

(assert (=> d!11077 (= lt!23405 (ListLongMap!1374 lt!23406))))

(declare-fun lt!23403 () Unit!1488)

(declare-fun lt!23404 () Unit!1488)

(assert (=> d!11077 (= lt!23403 lt!23404)))

(assert (=> d!11077 (= (getValueByKey!122 lt!23406 (_1!1029 (tuple2!2039 lt!22937 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22937 (minValue!1940 newMap!16)))))))

(assert (=> d!11077 (= lt!23404 (lemmaContainsTupThenGetReturnValue!41 lt!23406 (_1!1029 (tuple2!2039 lt!22937 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22937 (minValue!1940 newMap!16)))))))

(assert (=> d!11077 (= lt!23406 (insertStrictlySorted!43 (toList!702 lt!22943) (_1!1029 (tuple2!2039 lt!22937 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 lt!22937 (minValue!1940 newMap!16)))))))

(assert (=> d!11077 (= (+!80 lt!22943 (tuple2!2039 lt!22937 (minValue!1940 newMap!16))) lt!23405)))

(declare-fun b!58382 () Bool)

(declare-fun res!32541 () Bool)

(assert (=> b!58382 (=> (not res!32541) (not e!38426))))

(assert (=> b!58382 (= res!32541 (= (getValueByKey!122 (toList!702 lt!23405) (_1!1029 (tuple2!2039 lt!22937 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 lt!22937 (minValue!1940 newMap!16))))))))

(declare-fun b!58383 () Bool)

(assert (=> b!58383 (= e!38426 (contains!690 (toList!702 lt!23405) (tuple2!2039 lt!22937 (minValue!1940 newMap!16))))))

(assert (= (and d!11077 res!32542) b!58382))

(assert (= (and b!58382 res!32541) b!58383))

(declare-fun m!49907 () Bool)

(assert (=> d!11077 m!49907))

(declare-fun m!49909 () Bool)

(assert (=> d!11077 m!49909))

(declare-fun m!49911 () Bool)

(assert (=> d!11077 m!49911))

(declare-fun m!49913 () Bool)

(assert (=> d!11077 m!49913))

(declare-fun m!49915 () Bool)

(assert (=> b!58382 m!49915))

(declare-fun m!49917 () Bool)

(assert (=> b!58383 m!49917))

(assert (=> b!57709 d!11077))

(declare-fun d!11079 () Bool)

(assert (=> d!11079 (= (apply!65 lt!22943 lt!22930) (get!1076 (getValueByKey!122 (toList!702 lt!22943) lt!22930)))))

(declare-fun bs!2536 () Bool)

(assert (= bs!2536 d!11079))

(declare-fun m!49919 () Bool)

(assert (=> bs!2536 m!49919))

(assert (=> bs!2536 m!49919))

(declare-fun m!49921 () Bool)

(assert (=> bs!2536 m!49921))

(assert (=> b!57709 d!11079))

(declare-fun d!11081 () Bool)

(assert (=> d!11081 (= (apply!65 (+!80 lt!22943 (tuple2!2039 lt!22937 (minValue!1940 newMap!16))) lt!22930) (apply!65 lt!22943 lt!22930))))

(declare-fun lt!23407 () Unit!1488)

(assert (=> d!11081 (= lt!23407 (choose!296 lt!22943 lt!22937 (minValue!1940 newMap!16) lt!22930))))

(declare-fun e!38427 () Bool)

(assert (=> d!11081 e!38427))

(declare-fun res!32543 () Bool)

(assert (=> d!11081 (=> (not res!32543) (not e!38427))))

(assert (=> d!11081 (= res!32543 (contains!688 lt!22943 lt!22930))))

(assert (=> d!11081 (= (addApplyDifferent!41 lt!22943 lt!22937 (minValue!1940 newMap!16) lt!22930) lt!23407)))

(declare-fun b!58384 () Bool)

(assert (=> b!58384 (= e!38427 (not (= lt!22930 lt!22937)))))

(assert (= (and d!11081 res!32543) b!58384))

(assert (=> d!11081 m!48665))

(declare-fun m!49923 () Bool)

(assert (=> d!11081 m!49923))

(assert (=> d!11081 m!48665))

(assert (=> d!11081 m!48675))

(declare-fun m!49925 () Bool)

(assert (=> d!11081 m!49925))

(assert (=> d!11081 m!48685))

(assert (=> b!57709 d!11081))

(declare-fun d!11083 () Bool)

(assert (=> d!11083 (= (apply!65 (+!80 lt!22943 (tuple2!2039 lt!22937 (minValue!1940 newMap!16))) lt!22930) (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22943 (tuple2!2039 lt!22937 (minValue!1940 newMap!16)))) lt!22930)))))

(declare-fun bs!2537 () Bool)

(assert (= bs!2537 d!11083))

(declare-fun m!49927 () Bool)

(assert (=> bs!2537 m!49927))

(assert (=> bs!2537 m!49927))

(declare-fun m!49929 () Bool)

(assert (=> bs!2537 m!49929))

(assert (=> b!57709 d!11083))

(declare-fun d!11085 () Bool)

(assert (=> d!11085 (= (apply!65 (+!80 lt!22940 (tuple2!2039 lt!22936 (minValue!1940 newMap!16))) lt!22932) (apply!65 lt!22940 lt!22932))))

(declare-fun lt!23408 () Unit!1488)

(assert (=> d!11085 (= lt!23408 (choose!296 lt!22940 lt!22936 (minValue!1940 newMap!16) lt!22932))))

(declare-fun e!38428 () Bool)

(assert (=> d!11085 e!38428))

(declare-fun res!32544 () Bool)

(assert (=> d!11085 (=> (not res!32544) (not e!38428))))

(assert (=> d!11085 (= res!32544 (contains!688 lt!22940 lt!22932))))

(assert (=> d!11085 (= (addApplyDifferent!41 lt!22940 lt!22936 (minValue!1940 newMap!16) lt!22932) lt!23408)))

(declare-fun b!58385 () Bool)

(assert (=> b!58385 (= e!38428 (not (= lt!22932 lt!22936)))))

(assert (= (and d!11085 res!32544) b!58385))

(assert (=> d!11085 m!48679))

(declare-fun m!49931 () Bool)

(assert (=> d!11085 m!49931))

(assert (=> d!11085 m!48679))

(assert (=> d!11085 m!48681))

(declare-fun m!49933 () Bool)

(assert (=> d!11085 m!49933))

(assert (=> d!11085 m!48693))

(assert (=> b!57709 d!11085))

(declare-fun d!11087 () Bool)

(assert (=> d!11087 (contains!688 (+!80 lt!22951 (tuple2!2039 lt!22933 (zeroValue!1940 newMap!16))) lt!22949)))

(declare-fun lt!23409 () Unit!1488)

(assert (=> d!11087 (= lt!23409 (choose!297 lt!22951 lt!22933 (zeroValue!1940 newMap!16) lt!22949))))

(assert (=> d!11087 (contains!688 lt!22951 lt!22949)))

(assert (=> d!11087 (= (addStillContains!41 lt!22951 lt!22933 (zeroValue!1940 newMap!16) lt!22949) lt!23409)))

(declare-fun bs!2538 () Bool)

(assert (= bs!2538 d!11087))

(assert (=> bs!2538 m!48671))

(assert (=> bs!2538 m!48671))

(assert (=> bs!2538 m!48687))

(declare-fun m!49935 () Bool)

(assert (=> bs!2538 m!49935))

(declare-fun m!49937 () Bool)

(assert (=> bs!2538 m!49937))

(assert (=> b!57709 d!11087))

(declare-fun lt!23410 () Bool)

(declare-fun d!11089 () Bool)

(assert (=> d!11089 (= lt!23410 (select (content!61 (toList!702 lt!22852)) (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun e!38429 () Bool)

(assert (=> d!11089 (= lt!23410 e!38429)))

(declare-fun res!32545 () Bool)

(assert (=> d!11089 (=> (not res!32545) (not e!38429))))

(assert (=> d!11089 (= res!32545 ((_ is Cons!1445) (toList!702 lt!22852)))))

(assert (=> d!11089 (= (contains!690 (toList!702 lt!22852) (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))) lt!23410)))

(declare-fun b!58386 () Bool)

(declare-fun e!38430 () Bool)

(assert (=> b!58386 (= e!38429 e!38430)))

(declare-fun res!32546 () Bool)

(assert (=> b!58386 (=> res!32546 e!38430)))

(assert (=> b!58386 (= res!32546 (= (h!2025 (toList!702 lt!22852)) (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(declare-fun b!58387 () Bool)

(assert (=> b!58387 (= e!38430 (contains!690 (t!4775 (toList!702 lt!22852)) (tuple2!2039 lt!22687 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))

(assert (= (and d!11089 res!32545) b!58386))

(assert (= (and b!58386 (not res!32546)) b!58387))

(declare-fun m!49939 () Bool)

(assert (=> d!11089 m!49939))

(declare-fun m!49941 () Bool)

(assert (=> d!11089 m!49941))

(declare-fun m!49943 () Bool)

(assert (=> b!58387 m!49943))

(assert (=> b!57606 d!11089))

(declare-fun d!11091 () Bool)

(declare-fun e!38431 () Bool)

(assert (=> d!11091 e!38431))

(declare-fun res!32548 () Bool)

(assert (=> d!11091 (=> (not res!32548) (not e!38431))))

(declare-fun lt!23413 () ListLongMap!1373)

(assert (=> d!11091 (= res!32548 (contains!688 lt!23413 (_1!1029 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23414 () List!1449)

(assert (=> d!11091 (= lt!23413 (ListLongMap!1374 lt!23414))))

(declare-fun lt!23411 () Unit!1488)

(declare-fun lt!23412 () Unit!1488)

(assert (=> d!11091 (= lt!23411 lt!23412)))

(assert (=> d!11091 (= (getValueByKey!122 lt!23414 (_1!1029 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11091 (= lt!23412 (lemmaContainsTupThenGetReturnValue!41 lt!23414 (_1!1029 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11091 (= lt!23414 (insertStrictlySorted!43 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (_1!1029 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11091 (= (+!80 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23413)))

(declare-fun b!58388 () Bool)

(declare-fun res!32547 () Bool)

(assert (=> b!58388 (=> (not res!32547) (not e!38431))))

(assert (=> b!58388 (= res!32547 (= (getValueByKey!122 (toList!702 lt!23413) (_1!1029 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58389 () Bool)

(assert (=> b!58389 (= e!38431 (contains!690 (toList!702 lt!23413) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11091 res!32548) b!58388))

(assert (= (and b!58388 res!32547) b!58389))

(declare-fun m!49945 () Bool)

(assert (=> d!11091 m!49945))

(declare-fun m!49947 () Bool)

(assert (=> d!11091 m!49947))

(declare-fun m!49949 () Bool)

(assert (=> d!11091 m!49949))

(declare-fun m!49951 () Bool)

(assert (=> d!11091 m!49951))

(declare-fun m!49953 () Bool)

(assert (=> b!58388 m!49953))

(declare-fun m!49955 () Bool)

(assert (=> b!58389 m!49955))

(assert (=> d!10675 d!11091))

(declare-fun d!11093 () Bool)

(assert (=> d!11093 (= (+!80 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22790 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(assert (=> d!11093 true))

(declare-fun _$7!41 () Unit!1488)

(assert (=> d!11093 (= (choose!300 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) lt!22790 (zeroValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) (defaultEntry!2022 newMap!16)) _$7!41)))

(declare-fun bs!2539 () Bool)

(assert (= bs!2539 d!11093))

(assert (=> bs!2539 m!48203))

(assert (=> bs!2539 m!48203))

(assert (=> bs!2539 m!48709))

(assert (=> bs!2539 m!48103))

(assert (=> bs!2539 m!48711))

(assert (=> d!10675 d!11093))

(assert (=> d!10675 d!10669))

(declare-fun b!58390 () Bool)

(declare-fun e!38438 () Bool)

(declare-fun call!4263 () Bool)

(assert (=> b!58390 (= e!38438 (not call!4263))))

(declare-fun bm!4258 () Bool)

(declare-fun call!4266 () ListLongMap!1373)

(declare-fun call!4264 () ListLongMap!1373)

(declare-fun call!4262 () ListLongMap!1373)

(declare-fun c!7363 () Bool)

(declare-fun call!4265 () ListLongMap!1373)

(declare-fun c!7366 () Bool)

(assert (=> bm!4258 (= call!4264 (+!80 (ite c!7366 call!4266 (ite c!7363 call!4265 call!4262)) (ite (or c!7366 c!7363) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!58391 () Bool)

(declare-fun res!32552 () Bool)

(declare-fun e!38442 () Bool)

(assert (=> b!58391 (=> (not res!32552) (not e!38442))))

(declare-fun e!38443 () Bool)

(assert (=> b!58391 (= res!32552 e!38443)))

(declare-fun c!7365 () Bool)

(assert (=> b!58391 (= c!7365 (not (= (bvand lt!22790 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4259 () Bool)

(assert (=> bm!4259 (= call!4262 call!4265)))

(declare-fun b!58392 () Bool)

(declare-fun e!38433 () Bool)

(assert (=> b!58392 (= e!38433 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58393 () Bool)

(declare-fun call!4267 () Bool)

(assert (=> b!58393 (= e!38443 (not call!4267))))

(declare-fun d!11095 () Bool)

(assert (=> d!11095 e!38442))

(declare-fun res!32549 () Bool)

(assert (=> d!11095 (=> (not res!32549) (not e!38442))))

(assert (=> d!11095 (= res!32549 (or (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))))

(declare-fun lt!23429 () ListLongMap!1373)

(declare-fun lt!23420 () ListLongMap!1373)

(assert (=> d!11095 (= lt!23429 lt!23420)))

(declare-fun lt!23424 () Unit!1488)

(declare-fun e!38440 () Unit!1488)

(assert (=> d!11095 (= lt!23424 e!38440)))

(declare-fun c!7367 () Bool)

(assert (=> d!11095 (= c!7367 e!38433)))

(declare-fun res!32556 () Bool)

(assert (=> d!11095 (=> (not res!32556) (not e!38433))))

(assert (=> d!11095 (= res!32556 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun e!38437 () ListLongMap!1373)

(assert (=> d!11095 (= lt!23420 e!38437)))

(assert (=> d!11095 (= c!7366 (and (not (= (bvand lt!22790 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!22790 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11095 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11095 (= (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22790 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23429)))

(declare-fun b!58394 () Bool)

(declare-fun e!38444 () Bool)

(assert (=> b!58394 (= e!38444 (= (apply!65 lt!23429 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!58395 () Bool)

(declare-fun e!38432 () Bool)

(assert (=> b!58395 (= e!38432 (= (apply!65 lt!23429 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 (_values!2005 newMap!16)) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58395 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (_values!2005 newMap!16))))))

(assert (=> b!58395 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58396 () Bool)

(declare-fun e!38435 () ListLongMap!1373)

(assert (=> b!58396 (= e!38435 call!4262)))

(declare-fun bm!4260 () Bool)

(assert (=> bm!4260 (= call!4266 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22790 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58397 () Bool)

(assert (=> b!58397 (= e!38437 (+!80 call!4264 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun b!58398 () Bool)

(assert (=> b!58398 (= e!38438 e!38444)))

(declare-fun res!32550 () Bool)

(assert (=> b!58398 (= res!32550 call!4263)))

(assert (=> b!58398 (=> (not res!32550) (not e!38444))))

(declare-fun bm!4261 () Bool)

(assert (=> bm!4261 (= call!4267 (contains!688 lt!23429 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4262 () Bool)

(assert (=> bm!4262 (= call!4263 (contains!688 lt!23429 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58399 () Bool)

(assert (=> b!58399 (= e!38442 e!38438)))

(declare-fun c!7368 () Bool)

(assert (=> b!58399 (= c!7368 (not (= (bvand lt!22790 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58400 () Bool)

(declare-fun res!32554 () Bool)

(assert (=> b!58400 (=> (not res!32554) (not e!38442))))

(declare-fun e!38441 () Bool)

(assert (=> b!58400 (= res!32554 e!38441)))

(declare-fun res!32553 () Bool)

(assert (=> b!58400 (=> res!32553 e!38441)))

(declare-fun e!38434 () Bool)

(assert (=> b!58400 (= res!32553 (not e!38434))))

(declare-fun res!32557 () Bool)

(assert (=> b!58400 (=> (not res!32557) (not e!38434))))

(assert (=> b!58400 (= res!32557 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58401 () Bool)

(assert (=> b!58401 (= e!38441 e!38432)))

(declare-fun res!32551 () Bool)

(assert (=> b!58401 (=> (not res!32551) (not e!38432))))

(assert (=> b!58401 (= res!32551 (contains!688 lt!23429 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58401 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58402 () Bool)

(declare-fun lt!23430 () Unit!1488)

(assert (=> b!58402 (= e!38440 lt!23430)))

(declare-fun lt!23436 () ListLongMap!1373)

(assert (=> b!58402 (= lt!23436 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22790 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23418 () (_ BitVec 64))

(assert (=> b!58402 (= lt!23418 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23434 () (_ BitVec 64))

(assert (=> b!58402 (= lt!23434 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23435 () Unit!1488)

(assert (=> b!58402 (= lt!23435 (addStillContains!41 lt!23436 lt!23418 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23434))))

(assert (=> b!58402 (contains!688 (+!80 lt!23436 (tuple2!2039 lt!23418 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23434)))

(declare-fun lt!23431 () Unit!1488)

(assert (=> b!58402 (= lt!23431 lt!23435)))

(declare-fun lt!23428 () ListLongMap!1373)

(assert (=> b!58402 (= lt!23428 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22790 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23422 () (_ BitVec 64))

(assert (=> b!58402 (= lt!23422 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23415 () (_ BitVec 64))

(assert (=> b!58402 (= lt!23415 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23426 () Unit!1488)

(assert (=> b!58402 (= lt!23426 (addApplyDifferent!41 lt!23428 lt!23422 (minValue!1940 newMap!16) lt!23415))))

(assert (=> b!58402 (= (apply!65 (+!80 lt!23428 (tuple2!2039 lt!23422 (minValue!1940 newMap!16))) lt!23415) (apply!65 lt!23428 lt!23415))))

(declare-fun lt!23419 () Unit!1488)

(assert (=> b!58402 (= lt!23419 lt!23426)))

(declare-fun lt!23416 () ListLongMap!1373)

(assert (=> b!58402 (= lt!23416 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22790 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23432 () (_ BitVec 64))

(assert (=> b!58402 (= lt!23432 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23423 () (_ BitVec 64))

(assert (=> b!58402 (= lt!23423 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23427 () Unit!1488)

(assert (=> b!58402 (= lt!23427 (addApplyDifferent!41 lt!23416 lt!23432 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!23423))))

(assert (=> b!58402 (= (apply!65 (+!80 lt!23416 (tuple2!2039 lt!23432 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23423) (apply!65 lt!23416 lt!23423))))

(declare-fun lt!23433 () Unit!1488)

(assert (=> b!58402 (= lt!23433 lt!23427)))

(declare-fun lt!23425 () ListLongMap!1373)

(assert (=> b!58402 (= lt!23425 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) lt!22790 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23421 () (_ BitVec 64))

(assert (=> b!58402 (= lt!23421 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23417 () (_ BitVec 64))

(assert (=> b!58402 (= lt!23417 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58402 (= lt!23430 (addApplyDifferent!41 lt!23425 lt!23421 (minValue!1940 newMap!16) lt!23417))))

(assert (=> b!58402 (= (apply!65 (+!80 lt!23425 (tuple2!2039 lt!23421 (minValue!1940 newMap!16))) lt!23417) (apply!65 lt!23425 lt!23417))))

(declare-fun b!58403 () Bool)

(assert (=> b!58403 (= e!38434 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58404 () Bool)

(declare-fun call!4261 () ListLongMap!1373)

(assert (=> b!58404 (= e!38435 call!4261)))

(declare-fun bm!4263 () Bool)

(assert (=> bm!4263 (= call!4261 call!4264)))

(declare-fun bm!4264 () Bool)

(assert (=> bm!4264 (= call!4265 call!4266)))

(declare-fun e!38439 () Bool)

(declare-fun b!58405 () Bool)

(assert (=> b!58405 (= e!38439 (= (apply!65 lt!23429 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58406 () Bool)

(declare-fun e!38436 () ListLongMap!1373)

(assert (=> b!58406 (= e!38437 e!38436)))

(assert (=> b!58406 (= c!7363 (and (not (= (bvand lt!22790 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!22790 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58407 () Bool)

(assert (=> b!58407 (= e!38436 call!4261)))

(declare-fun b!58408 () Bool)

(assert (=> b!58408 (= e!38443 e!38439)))

(declare-fun res!32555 () Bool)

(assert (=> b!58408 (= res!32555 call!4267)))

(assert (=> b!58408 (=> (not res!32555) (not e!38439))))

(declare-fun b!58409 () Bool)

(declare-fun Unit!1539 () Unit!1488)

(assert (=> b!58409 (= e!38440 Unit!1539)))

(declare-fun b!58410 () Bool)

(declare-fun c!7364 () Bool)

(assert (=> b!58410 (= c!7364 (and (not (= (bvand lt!22790 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!22790 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58410 (= e!38436 e!38435)))

(assert (= (and d!11095 c!7366) b!58397))

(assert (= (and d!11095 (not c!7366)) b!58406))

(assert (= (and b!58406 c!7363) b!58407))

(assert (= (and b!58406 (not c!7363)) b!58410))

(assert (= (and b!58410 c!7364) b!58404))

(assert (= (and b!58410 (not c!7364)) b!58396))

(assert (= (or b!58404 b!58396) bm!4259))

(assert (= (or b!58407 bm!4259) bm!4264))

(assert (= (or b!58407 b!58404) bm!4263))

(assert (= (or b!58397 bm!4264) bm!4260))

(assert (= (or b!58397 bm!4263) bm!4258))

(assert (= (and d!11095 res!32556) b!58392))

(assert (= (and d!11095 c!7367) b!58402))

(assert (= (and d!11095 (not c!7367)) b!58409))

(assert (= (and d!11095 res!32549) b!58400))

(assert (= (and b!58400 res!32557) b!58403))

(assert (= (and b!58400 (not res!32553)) b!58401))

(assert (= (and b!58401 res!32551) b!58395))

(assert (= (and b!58400 res!32554) b!58391))

(assert (= (and b!58391 c!7365) b!58408))

(assert (= (and b!58391 (not c!7365)) b!58393))

(assert (= (and b!58408 res!32555) b!58405))

(assert (= (or b!58408 b!58393) bm!4261))

(assert (= (and b!58391 res!32552) b!58399))

(assert (= (and b!58399 c!7368) b!58398))

(assert (= (and b!58399 (not c!7368)) b!58390))

(assert (= (and b!58398 res!32550) b!58394))

(assert (= (or b!58398 b!58390) bm!4262))

(declare-fun b_lambda!2561 () Bool)

(assert (=> (not b_lambda!2561) (not b!58395)))

(assert (=> b!58395 t!4783))

(declare-fun b_and!3533 () Bool)

(assert (= b_and!3529 (and (=> t!4783 result!2361) b_and!3533)))

(assert (=> b!58395 t!4785))

(declare-fun b_and!3535 () Bool)

(assert (= b_and!3531 (and (=> t!4785 result!2363) b_and!3535)))

(assert (=> b!58395 m!48339))

(assert (=> b!58395 m!48657))

(assert (=> b!58395 m!48339))

(assert (=> b!58395 m!48659))

(assert (=> b!58395 m!48345))

(assert (=> b!58395 m!48657))

(assert (=> b!58395 m!48345))

(declare-fun m!49957 () Bool)

(assert (=> b!58395 m!49957))

(declare-fun m!49959 () Bool)

(assert (=> bm!4261 m!49959))

(declare-fun m!49961 () Bool)

(assert (=> b!58402 m!49961))

(assert (=> b!58402 m!48103))

(declare-fun m!49963 () Bool)

(assert (=> b!58402 m!49963))

(declare-fun m!49965 () Bool)

(assert (=> b!58402 m!49965))

(declare-fun m!49967 () Bool)

(assert (=> b!58402 m!49967))

(declare-fun m!49969 () Bool)

(assert (=> b!58402 m!49969))

(assert (=> b!58402 m!49961))

(declare-fun m!49971 () Bool)

(assert (=> b!58402 m!49971))

(assert (=> b!58402 m!48103))

(declare-fun m!49973 () Bool)

(assert (=> b!58402 m!49973))

(declare-fun m!49975 () Bool)

(assert (=> b!58402 m!49975))

(declare-fun m!49977 () Bool)

(assert (=> b!58402 m!49977))

(assert (=> b!58402 m!48345))

(declare-fun m!49979 () Bool)

(assert (=> b!58402 m!49979))

(declare-fun m!49981 () Bool)

(assert (=> b!58402 m!49981))

(assert (=> b!58402 m!49967))

(declare-fun m!49983 () Bool)

(assert (=> b!58402 m!49983))

(declare-fun m!49985 () Bool)

(assert (=> b!58402 m!49985))

(assert (=> b!58402 m!49975))

(assert (=> b!58402 m!49969))

(declare-fun m!49987 () Bool)

(assert (=> b!58402 m!49987))

(declare-fun m!49989 () Bool)

(assert (=> b!58402 m!49989))

(assert (=> b!58402 m!48103))

(declare-fun m!49991 () Bool)

(assert (=> b!58402 m!49991))

(assert (=> b!58403 m!48345))

(assert (=> b!58403 m!48345))

(assert (=> b!58403 m!48383))

(assert (=> b!58401 m!48345))

(assert (=> b!58401 m!48345))

(declare-fun m!49993 () Bool)

(assert (=> b!58401 m!49993))

(declare-fun m!49995 () Bool)

(assert (=> bm!4258 m!49995))

(assert (=> bm!4260 m!48103))

(assert (=> bm!4260 m!49963))

(declare-fun m!49997 () Bool)

(assert (=> b!58405 m!49997))

(declare-fun m!49999 () Bool)

(assert (=> b!58394 m!49999))

(declare-fun m!50001 () Bool)

(assert (=> bm!4262 m!50001))

(assert (=> d!11095 m!48395))

(assert (=> b!58392 m!48345))

(assert (=> b!58392 m!48345))

(assert (=> b!58392 m!48383))

(declare-fun m!50003 () Bool)

(assert (=> b!58397 m!50003))

(assert (=> d!10675 d!11095))

(assert (=> d!10675 d!10735))

(declare-fun d!11097 () Bool)

(declare-fun e!38445 () Bool)

(assert (=> d!11097 e!38445))

(declare-fun res!32559 () Bool)

(assert (=> d!11097 (=> (not res!32559) (not e!38445))))

(declare-fun lt!23439 () ListLongMap!1373)

(assert (=> d!11097 (= res!32559 (contains!688 lt!23439 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun lt!23440 () List!1449)

(assert (=> d!11097 (= lt!23439 (ListLongMap!1374 lt!23440))))

(declare-fun lt!23437 () Unit!1488)

(declare-fun lt!23438 () Unit!1488)

(assert (=> d!11097 (= lt!23437 lt!23438)))

(assert (=> d!11097 (= (getValueByKey!122 lt!23440 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11097 (= lt!23438 (lemmaContainsTupThenGetReturnValue!41 lt!23440 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11097 (= lt!23440 (insertStrictlySorted!43 (toList!702 call!4168) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11097 (= (+!80 call!4168 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) lt!23439)))

(declare-fun b!58411 () Bool)

(declare-fun res!32558 () Bool)

(assert (=> b!58411 (=> (not res!32558) (not e!38445))))

(assert (=> b!58411 (= res!32558 (= (getValueByKey!122 (toList!702 lt!23439) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(declare-fun b!58412 () Bool)

(assert (=> b!58412 (= e!38445 (contains!690 (toList!702 lt!23439) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(assert (= (and d!11097 res!32559) b!58411))

(assert (= (and b!58411 res!32558) b!58412))

(declare-fun m!50005 () Bool)

(assert (=> d!11097 m!50005))

(declare-fun m!50007 () Bool)

(assert (=> d!11097 m!50007))

(declare-fun m!50009 () Bool)

(assert (=> d!11097 m!50009))

(declare-fun m!50011 () Bool)

(assert (=> d!11097 m!50011))

(declare-fun m!50013 () Bool)

(assert (=> b!58411 m!50013))

(declare-fun m!50015 () Bool)

(assert (=> b!58412 m!50015))

(assert (=> b!57538 d!11097))

(assert (=> b!57665 d!10745))

(declare-fun d!11099 () Bool)

(declare-fun e!38446 () Bool)

(assert (=> d!11099 e!38446))

(declare-fun res!32561 () Bool)

(assert (=> d!11099 (=> (not res!32561) (not e!38446))))

(declare-fun lt!23443 () ListLongMap!1373)

(assert (=> d!11099 (= res!32561 (contains!688 lt!23443 (_1!1029 (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(declare-fun lt!23444 () List!1449)

(assert (=> d!11099 (= lt!23443 (ListLongMap!1374 lt!23444))))

(declare-fun lt!23441 () Unit!1488)

(declare-fun lt!23442 () Unit!1488)

(assert (=> d!11099 (= lt!23441 lt!23442)))

(assert (=> d!11099 (= (getValueByKey!122 lt!23444 (_1!1029 (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))) (Some!127 (_2!1029 (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(assert (=> d!11099 (= lt!23442 (lemmaContainsTupThenGetReturnValue!41 lt!23444 (_1!1029 (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (_2!1029 (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(assert (=> d!11099 (= lt!23444 (insertStrictlySorted!43 (toList!702 (ite c!7171 call!4180 (ite c!7168 call!4179 call!4176))) (_1!1029 (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) (_2!1029 (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))))))

(assert (=> d!11099 (= (+!80 (ite c!7171 call!4180 (ite c!7168 call!4179 call!4176)) (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))) lt!23443)))

(declare-fun b!58413 () Bool)

(declare-fun res!32560 () Bool)

(assert (=> b!58413 (=> (not res!32560) (not e!38446))))

(assert (=> b!58413 (= res!32560 (= (getValueByKey!122 (toList!702 lt!23443) (_1!1029 (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16)))))) (Some!127 (_2!1029 (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))))

(declare-fun b!58414 () Bool)

(assert (=> b!58414 (= e!38446 (contains!690 (toList!702 lt!23443) (ite (or c!7171 c!7168) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7124 c!7127) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1940 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7124 (ite c!7127 (minValue!1940 newMap!16) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1940 newMap!16))))))))

(assert (= (and d!11099 res!32561) b!58413))

(assert (= (and b!58413 res!32560) b!58414))

(declare-fun m!50017 () Bool)

(assert (=> d!11099 m!50017))

(declare-fun m!50019 () Bool)

(assert (=> d!11099 m!50019))

(declare-fun m!50021 () Bool)

(assert (=> d!11099 m!50021))

(declare-fun m!50023 () Bool)

(assert (=> d!11099 m!50023))

(declare-fun m!50025 () Bool)

(assert (=> b!58413 m!50025))

(declare-fun m!50027 () Bool)

(assert (=> b!58414 m!50027))

(assert (=> bm!4172 d!11099))

(declare-fun d!11101 () Bool)

(assert (=> d!11101 (= (apply!65 lt!22905 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!702 lt!22905) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2540 () Bool)

(assert (= bs!2540 d!11101))

(assert (=> bs!2540 m!48915))

(assert (=> bs!2540 m!48915))

(declare-fun m!50029 () Bool)

(assert (=> bs!2540 m!50029))

(assert (=> b!57667 d!11101))

(assert (=> b!57544 d!10745))

(assert (=> b!57699 d!10745))

(declare-fun d!11103 () Bool)

(assert (=> d!11103 (= (get!1074 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2364 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!57872 d!11103))

(declare-fun d!11105 () Bool)

(assert (=> d!11105 (= (get!1076 (getValueByKey!122 (toList!702 lt!22682) lt!22689)) (v!2369 (getValueByKey!122 (toList!702 lt!22682) lt!22689)))))

(assert (=> d!10625 d!11105))

(declare-fun b!58415 () Bool)

(declare-fun e!38447 () Option!128)

(assert (=> b!58415 (= e!38447 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22682)))))))

(declare-fun d!11107 () Bool)

(declare-fun c!7369 () Bool)

(assert (=> d!11107 (= c!7369 (and ((_ is Cons!1445) (toList!702 lt!22682)) (= (_1!1029 (h!2025 (toList!702 lt!22682))) lt!22689)))))

(assert (=> d!11107 (= (getValueByKey!122 (toList!702 lt!22682) lt!22689) e!38447)))

(declare-fun b!58418 () Bool)

(declare-fun e!38448 () Option!128)

(assert (=> b!58418 (= e!38448 None!126)))

(declare-fun b!58416 () Bool)

(assert (=> b!58416 (= e!38447 e!38448)))

(declare-fun c!7370 () Bool)

(assert (=> b!58416 (= c!7370 (and ((_ is Cons!1445) (toList!702 lt!22682)) (not (= (_1!1029 (h!2025 (toList!702 lt!22682))) lt!22689))))))

(declare-fun b!58417 () Bool)

(assert (=> b!58417 (= e!38448 (getValueByKey!122 (t!4775 (toList!702 lt!22682)) lt!22689))))

(assert (= (and d!11107 c!7369) b!58415))

(assert (= (and d!11107 (not c!7369)) b!58416))

(assert (= (and b!58416 c!7370) b!58417))

(assert (= (and b!58416 (not c!7370)) b!58418))

(declare-fun m!50031 () Bool)

(assert (=> b!58417 m!50031))

(assert (=> d!10625 d!11107))

(declare-fun d!11109 () Bool)

(declare-fun e!38450 () Bool)

(assert (=> d!11109 e!38450))

(declare-fun res!32562 () Bool)

(assert (=> d!11109 (=> res!32562 e!38450)))

(declare-fun lt!23445 () Bool)

(assert (=> d!11109 (= res!32562 (not lt!23445))))

(declare-fun lt!23446 () Bool)

(assert (=> d!11109 (= lt!23445 lt!23446)))

(declare-fun lt!23448 () Unit!1488)

(declare-fun e!38449 () Unit!1488)

(assert (=> d!11109 (= lt!23448 e!38449)))

(declare-fun c!7371 () Bool)

(assert (=> d!11109 (= c!7371 lt!23446)))

(assert (=> d!11109 (= lt!23446 (containsKey!126 (toList!702 lt!22924) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11109 (= (contains!688 lt!22924 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23445)))

(declare-fun b!58419 () Bool)

(declare-fun lt!23447 () Unit!1488)

(assert (=> b!58419 (= e!38449 lt!23447)))

(assert (=> b!58419 (= lt!23447 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22924) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!58419 (isDefined!76 (getValueByKey!122 (toList!702 lt!22924) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58420 () Bool)

(declare-fun Unit!1540 () Unit!1488)

(assert (=> b!58420 (= e!38449 Unit!1540)))

(declare-fun b!58421 () Bool)

(assert (=> b!58421 (= e!38450 (isDefined!76 (getValueByKey!122 (toList!702 lt!22924) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11109 c!7371) b!58419))

(assert (= (and d!11109 (not c!7371)) b!58420))

(assert (= (and d!11109 (not res!32562)) b!58421))

(declare-fun m!50033 () Bool)

(assert (=> d!11109 m!50033))

(declare-fun m!50035 () Bool)

(assert (=> b!58419 m!50035))

(assert (=> b!58419 m!48631))

(assert (=> b!58419 m!48631))

(declare-fun m!50037 () Bool)

(assert (=> b!58419 m!50037))

(assert (=> b!58421 m!48631))

(assert (=> b!58421 m!48631))

(assert (=> b!58421 m!50037))

(assert (=> d!10661 d!11109))

(declare-fun b!58422 () Bool)

(declare-fun e!38451 () Option!128)

(assert (=> b!58422 (= e!38451 (Some!127 (_2!1029 (h!2025 lt!22925))))))

(declare-fun c!7372 () Bool)

(declare-fun d!11111 () Bool)

(assert (=> d!11111 (= c!7372 (and ((_ is Cons!1445) lt!22925) (= (_1!1029 (h!2025 lt!22925)) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11111 (= (getValueByKey!122 lt!22925 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!38451)))

(declare-fun b!58425 () Bool)

(declare-fun e!38452 () Option!128)

(assert (=> b!58425 (= e!38452 None!126)))

(declare-fun b!58423 () Bool)

(assert (=> b!58423 (= e!38451 e!38452)))

(declare-fun c!7373 () Bool)

(assert (=> b!58423 (= c!7373 (and ((_ is Cons!1445) lt!22925) (not (= (_1!1029 (h!2025 lt!22925)) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!58424 () Bool)

(assert (=> b!58424 (= e!38452 (getValueByKey!122 (t!4775 lt!22925) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11111 c!7372) b!58422))

(assert (= (and d!11111 (not c!7372)) b!58423))

(assert (= (and b!58423 c!7373) b!58424))

(assert (= (and b!58423 (not c!7373)) b!58425))

(declare-fun m!50039 () Bool)

(assert (=> b!58424 m!50039))

(assert (=> d!10661 d!11111))

(declare-fun d!11113 () Bool)

(assert (=> d!11113 (= (getValueByKey!122 lt!22925 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23449 () Unit!1488)

(assert (=> d!11113 (= lt!23449 (choose!305 lt!22925 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!38453 () Bool)

(assert (=> d!11113 e!38453))

(declare-fun res!32563 () Bool)

(assert (=> d!11113 (=> (not res!32563) (not e!38453))))

(assert (=> d!11113 (= res!32563 (isStrictlySorted!278 lt!22925))))

(assert (=> d!11113 (= (lemmaContainsTupThenGetReturnValue!41 lt!22925 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23449)))

(declare-fun b!58426 () Bool)

(declare-fun res!32564 () Bool)

(assert (=> b!58426 (=> (not res!32564) (not e!38453))))

(assert (=> b!58426 (= res!32564 (containsKey!126 lt!22925 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58427 () Bool)

(assert (=> b!58427 (= e!38453 (contains!690 lt!22925 (tuple2!2039 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11113 res!32563) b!58426))

(assert (= (and b!58426 res!32564) b!58427))

(assert (=> d!11113 m!48625))

(declare-fun m!50041 () Bool)

(assert (=> d!11113 m!50041))

(declare-fun m!50043 () Bool)

(assert (=> d!11113 m!50043))

(declare-fun m!50045 () Bool)

(assert (=> b!58426 m!50045))

(declare-fun m!50047 () Bool)

(assert (=> b!58427 m!50047))

(assert (=> d!10661 d!11113))

(declare-fun b!58428 () Bool)

(declare-fun res!32565 () Bool)

(declare-fun e!38455 () Bool)

(assert (=> b!58428 (=> (not res!32565) (not e!38455))))

(declare-fun lt!23450 () List!1449)

(assert (=> b!58428 (= res!32565 (containsKey!126 lt!23450 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun d!11115 () Bool)

(assert (=> d!11115 e!38455))

(declare-fun res!32566 () Bool)

(assert (=> d!11115 (=> (not res!32566) (not e!38455))))

(assert (=> d!11115 (= res!32566 (isStrictlySorted!278 lt!23450))))

(declare-fun e!38458 () List!1449)

(assert (=> d!11115 (= lt!23450 e!38458)))

(declare-fun c!7374 () Bool)

(assert (=> d!11115 (= c!7374 (and ((_ is Cons!1445) (toList!702 call!4151)) (bvslt (_1!1029 (h!2025 (toList!702 call!4151))) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11115 (isStrictlySorted!278 (toList!702 call!4151))))

(assert (=> d!11115 (= (insertStrictlySorted!43 (toList!702 call!4151) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23450)))

(declare-fun b!58429 () Bool)

(declare-fun e!38454 () List!1449)

(declare-fun call!4270 () List!1449)

(assert (=> b!58429 (= e!38454 call!4270)))

(declare-fun c!7377 () Bool)

(declare-fun c!7376 () Bool)

(declare-fun e!38457 () List!1449)

(declare-fun b!58430 () Bool)

(assert (=> b!58430 (= e!38457 (ite c!7376 (t!4775 (toList!702 call!4151)) (ite c!7377 (Cons!1445 (h!2025 (toList!702 call!4151)) (t!4775 (toList!702 call!4151))) Nil!1446)))))

(declare-fun b!58431 () Bool)

(assert (=> b!58431 (= e!38455 (contains!690 lt!23450 (tuple2!2039 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58432 () Bool)

(assert (=> b!58432 (= e!38457 (insertStrictlySorted!43 (t!4775 (toList!702 call!4151)) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun call!4269 () List!1449)

(declare-fun bm!4265 () Bool)

(assert (=> bm!4265 (= call!4269 ($colon$colon!58 e!38457 (ite c!7374 (h!2025 (toList!702 call!4151)) (tuple2!2039 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!7375 () Bool)

(assert (=> bm!4265 (= c!7375 c!7374)))

(declare-fun b!58433 () Bool)

(declare-fun e!38456 () List!1449)

(declare-fun call!4268 () List!1449)

(assert (=> b!58433 (= e!38456 call!4268)))

(declare-fun bm!4266 () Bool)

(assert (=> bm!4266 (= call!4268 call!4269)))

(declare-fun b!58434 () Bool)

(assert (=> b!58434 (= c!7377 (and ((_ is Cons!1445) (toList!702 call!4151)) (bvsgt (_1!1029 (h!2025 (toList!702 call!4151))) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!58434 (= e!38456 e!38454)))

(declare-fun b!58435 () Bool)

(assert (=> b!58435 (= e!38458 call!4269)))

(declare-fun b!58436 () Bool)

(assert (=> b!58436 (= e!38454 call!4270)))

(declare-fun b!58437 () Bool)

(assert (=> b!58437 (= e!38458 e!38456)))

(assert (=> b!58437 (= c!7376 (and ((_ is Cons!1445) (toList!702 call!4151)) (= (_1!1029 (h!2025 (toList!702 call!4151))) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!4267 () Bool)

(assert (=> bm!4267 (= call!4270 call!4268)))

(assert (= (and d!11115 c!7374) b!58435))

(assert (= (and d!11115 (not c!7374)) b!58437))

(assert (= (and b!58437 c!7376) b!58433))

(assert (= (and b!58437 (not c!7376)) b!58434))

(assert (= (and b!58434 c!7377) b!58429))

(assert (= (and b!58434 (not c!7377)) b!58436))

(assert (= (or b!58429 b!58436) bm!4267))

(assert (= (or b!58433 bm!4267) bm!4266))

(assert (= (or b!58435 bm!4266) bm!4265))

(assert (= (and bm!4265 c!7375) b!58432))

(assert (= (and bm!4265 (not c!7375)) b!58430))

(assert (= (and d!11115 res!32566) b!58428))

(assert (= (and b!58428 res!32565) b!58431))

(declare-fun m!50049 () Bool)

(assert (=> b!58428 m!50049))

(declare-fun m!50051 () Bool)

(assert (=> d!11115 m!50051))

(declare-fun m!50053 () Bool)

(assert (=> d!11115 m!50053))

(declare-fun m!50055 () Bool)

(assert (=> b!58431 m!50055))

(declare-fun m!50057 () Bool)

(assert (=> b!58432 m!50057))

(declare-fun m!50059 () Bool)

(assert (=> bm!4265 m!50059))

(assert (=> d!10661 d!11115))

(declare-fun d!11117 () Bool)

(assert (=> d!11117 (isDefined!76 (getValueByKey!122 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun lt!23451 () Unit!1488)

(assert (=> d!11117 (= lt!23451 (choose!298 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun e!38459 () Bool)

(assert (=> d!11117 e!38459))

(declare-fun res!32567 () Bool)

(assert (=> d!11117 (=> (not res!32567) (not e!38459))))

(assert (=> d!11117 (= res!32567 (isStrictlySorted!278 (toList!702 call!4161)))))

(assert (=> d!11117 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) lt!23451)))

(declare-fun b!58438 () Bool)

(assert (=> b!58438 (= e!38459 (containsKey!126 (toList!702 call!4161) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!11117 res!32567) b!58438))

(assert (=> d!11117 m!48105))

(assert (=> d!11117 m!48821))

(assert (=> d!11117 m!48821))

(assert (=> d!11117 m!48823))

(assert (=> d!11117 m!48105))

(declare-fun m!50061 () Bool)

(assert (=> d!11117 m!50061))

(declare-fun m!50063 () Bool)

(assert (=> d!11117 m!50063))

(assert (=> b!58438 m!48105))

(assert (=> b!58438 m!48817))

(assert (=> b!57791 d!11117))

(assert (=> b!57791 d!10821))

(assert (=> b!57791 d!10823))

(declare-fun d!11119 () Bool)

(assert (=> d!11119 (= (apply!65 lt!22810 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!702 lt!22810) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2541 () Bool)

(assert (= bs!2541 d!11119))

(assert (=> bs!2541 m!48981))

(assert (=> bs!2541 m!48981))

(declare-fun m!50065 () Bool)

(assert (=> bs!2541 m!50065))

(assert (=> b!57546 d!11119))

(assert (=> d!10647 d!10735))

(assert (=> b!57799 d!10791))

(declare-fun d!11121 () Bool)

(declare-fun e!38460 () Bool)

(assert (=> d!11121 e!38460))

(declare-fun res!32569 () Bool)

(assert (=> d!11121 (=> (not res!32569) (not e!38460))))

(declare-fun lt!23454 () ListLongMap!1373)

(assert (=> d!11121 (= res!32569 (contains!688 lt!23454 (_1!1029 (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(declare-fun lt!23455 () List!1449)

(assert (=> d!11121 (= lt!23454 (ListLongMap!1374 lt!23455))))

(declare-fun lt!23452 () Unit!1488)

(declare-fun lt!23453 () Unit!1488)

(assert (=> d!11121 (= lt!23452 lt!23453)))

(assert (=> d!11121 (= (getValueByKey!122 lt!23455 (_1!1029 (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))) (Some!127 (_2!1029 (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!11121 (= lt!23453 (lemmaContainsTupThenGetReturnValue!41 lt!23455 (_1!1029 (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (_2!1029 (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!11121 (= lt!23455 (insertStrictlySorted!43 (toList!702 (ite c!7136 call!4170 (ite c!7133 call!4169 call!4166))) (_1!1029 (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (_2!1029 (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!11121 (= (+!80 (ite c!7136 call!4170 (ite c!7133 call!4169 call!4166)) (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) lt!23454)))

(declare-fun b!58439 () Bool)

(declare-fun res!32568 () Bool)

(assert (=> b!58439 (=> (not res!32568) (not e!38460))))

(assert (=> b!58439 (= res!32568 (= (getValueByKey!122 (toList!702 lt!23454) (_1!1029 (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))) (Some!127 (_2!1029 (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))))

(declare-fun b!58440 () Bool)

(assert (=> b!58440 (= e!38460 (contains!690 (toList!702 lt!23454) (ite (or c!7136 c!7133) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (= (and d!11121 res!32569) b!58439))

(assert (= (and b!58439 res!32568) b!58440))

(declare-fun m!50067 () Bool)

(assert (=> d!11121 m!50067))

(declare-fun m!50069 () Bool)

(assert (=> d!11121 m!50069))

(declare-fun m!50071 () Bool)

(assert (=> d!11121 m!50071))

(declare-fun m!50073 () Bool)

(assert (=> d!11121 m!50073))

(declare-fun m!50075 () Bool)

(assert (=> b!58439 m!50075))

(declare-fun m!50077 () Bool)

(assert (=> b!58440 m!50077))

(assert (=> bm!4162 d!11121))

(assert (=> bm!4174 d!10865))

(assert (=> b!57734 d!10805))

(assert (=> b!57734 d!10807))

(declare-fun d!11123 () Bool)

(assert (=> d!11123 (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!23456 () Unit!1488)

(assert (=> d!11123 (= lt!23456 (choose!298 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38461 () Bool)

(assert (=> d!11123 e!38461))

(declare-fun res!32570 () Bool)

(assert (=> d!11123 (=> (not res!32570) (not e!38461))))

(assert (=> d!11123 (= res!32570 (isStrictlySorted!278 (toList!702 lt!22695)))))

(assert (=> d!11123 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000) lt!23456)))

(declare-fun b!58441 () Bool)

(assert (=> b!58441 (= e!38461 (containsKey!126 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11123 res!32570) b!58441))

(assert (=> d!11123 m!48757))

(assert (=> d!11123 m!48757))

(assert (=> d!11123 m!48759))

(declare-fun m!50079 () Bool)

(assert (=> d!11123 m!50079))

(assert (=> d!11123 m!49131))

(assert (=> b!58441 m!48753))

(assert (=> b!57737 d!11123))

(declare-fun d!11125 () Bool)

(assert (=> d!11125 (= (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!295 (getValueByKey!122 (toList!702 lt!22695) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2542 () Bool)

(assert (= bs!2542 d!11125))

(assert (=> bs!2542 m!48757))

(declare-fun m!50081 () Bool)

(assert (=> bs!2542 m!50081))

(assert (=> b!57737 d!11125))

(assert (=> b!57737 d!10915))

(declare-fun d!11127 () Bool)

(assert (=> d!11127 (contains!688 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))

(declare-fun lt!23459 () Unit!1488)

(declare-fun choose!307 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 64) (_ BitVec 32) Int) Unit!1488)

(assert (=> d!11127 (= lt!23459 (choose!307 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(assert (=> d!11127 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11127 (= (lemmaArrayContainsKeyThenInListMap!4 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23459)))

(declare-fun bs!2543 () Bool)

(assert (= bs!2543 d!11127))

(assert (=> bs!2543 m!48203))

(assert (=> bs!2543 m!48203))

(assert (=> bs!2543 m!48105))

(assert (=> bs!2543 m!48287))

(assert (=> bs!2543 m!48105))

(declare-fun m!50083 () Bool)

(assert (=> bs!2543 m!50083))

(assert (=> bs!2543 m!48395))

(assert (=> b!57776 d!11127))

(assert (=> b!57776 d!10721))

(assert (=> b!57776 d!10669))

(declare-fun b!58442 () Bool)

(declare-fun e!38462 () (_ BitVec 32))

(declare-fun call!4271 () (_ BitVec 32))

(assert (=> b!58442 (= e!38462 (bvadd #b00000000000000000000000000000001 call!4271))))

(declare-fun b!58443 () Bool)

(assert (=> b!58443 (= e!38462 call!4271)))

(declare-fun bm!4268 () Bool)

(assert (=> bm!4268 (= call!4271 (arrayCountValidKeys!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58444 () Bool)

(declare-fun e!38463 () (_ BitVec 32))

(assert (=> b!58444 (= e!38463 #b00000000000000000000000000000000)))

(declare-fun b!58445 () Bool)

(assert (=> b!58445 (= e!38463 e!38462)))

(declare-fun c!7378 () Bool)

(assert (=> b!58445 (= c!7378 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!11129 () Bool)

(declare-fun lt!23460 () (_ BitVec 32))

(assert (=> d!11129 (and (bvsge lt!23460 #b00000000000000000000000000000000) (bvsle lt!23460 (bvsub (size!2003 (_keys!3642 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!11129 (= lt!23460 e!38463)))

(declare-fun c!7379 () Bool)

(assert (=> d!11129 (= c!7379 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!11129 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 (_keys!3642 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2003 (_keys!3642 newMap!16)) (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!11129 (= (arrayCountValidKeys!0 (_keys!3642 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 (_keys!3642 newMap!16))) lt!23460)))

(assert (= (and d!11129 c!7379) b!58444))

(assert (= (and d!11129 (not c!7379)) b!58445))

(assert (= (and b!58445 c!7378) b!58442))

(assert (= (and b!58445 (not c!7378)) b!58443))

(assert (= (or b!58442 b!58443) bm!4268))

(declare-fun m!50085 () Bool)

(assert (=> bm!4268 m!50085))

(assert (=> b!58445 m!49229))

(assert (=> b!58445 m!49229))

(assert (=> b!58445 m!49743))

(assert (=> bm!4181 d!11129))

(declare-fun d!11131 () Bool)

(assert (=> d!11131 (= (apply!65 lt!22810 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1076 (getValueByKey!122 (toList!702 lt!22810) (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2544 () Bool)

(assert (= bs!2544 d!11131))

(assert (=> bs!2544 m!48345))

(assert (=> bs!2544 m!49007))

(assert (=> bs!2544 m!49007))

(declare-fun m!50087 () Bool)

(assert (=> bs!2544 m!50087))

(assert (=> b!57536 d!11131))

(declare-fun d!11133 () Bool)

(declare-fun c!7380 () Bool)

(assert (=> d!11133 (= c!7380 ((_ is ValueCellFull!852) (select (arr!1775 (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!38464 () V!2835)

(assert (=> d!11133 (= (get!1073 (select (arr!1775 (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38464)))

(declare-fun b!58446 () Bool)

(assert (=> b!58446 (= e!38464 (get!1074 (select (arr!1775 (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58447 () Bool)

(assert (=> b!58447 (= e!38464 (get!1075 (select (arr!1775 (ite (or c!7124 c!7122) (_values!2005 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11133 c!7380) b!58446))

(assert (= (and d!11133 (not c!7380)) b!58447))

(assert (=> b!58446 m!48341))

(assert (=> b!58446 m!48339))

(declare-fun m!50089 () Bool)

(assert (=> b!58446 m!50089))

(assert (=> b!58447 m!48341))

(assert (=> b!58447 m!48339))

(declare-fun m!50091 () Bool)

(assert (=> b!58447 m!50091))

(assert (=> b!57536 d!11133))

(assert (=> b!57739 d!11125))

(assert (=> b!57739 d!10915))

(declare-fun d!11135 () Bool)

(declare-fun e!38465 () Bool)

(assert (=> d!11135 e!38465))

(declare-fun res!32572 () Bool)

(assert (=> d!11135 (=> (not res!32572) (not e!38465))))

(declare-fun lt!23463 () ListLongMap!1373)

(assert (=> d!11135 (= res!32572 (contains!688 lt!23463 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun lt!23464 () List!1449)

(assert (=> d!11135 (= lt!23463 (ListLongMap!1374 lt!23464))))

(declare-fun lt!23461 () Unit!1488)

(declare-fun lt!23462 () Unit!1488)

(assert (=> d!11135 (= lt!23461 lt!23462)))

(assert (=> d!11135 (= (getValueByKey!122 lt!23464 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11135 (= lt!23462 (lemmaContainsTupThenGetReturnValue!41 lt!23464 (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11135 (= lt!23464 (insertStrictlySorted!43 (toList!702 call!4188) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (=> d!11135 (= (+!80 call!4188 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))) lt!23463)))

(declare-fun b!58448 () Bool)

(declare-fun res!32571 () Bool)

(assert (=> b!58448 (=> (not res!32571) (not e!38465))))

(assert (=> b!58448 (= res!32571 (= (getValueByKey!122 (toList!702 lt!23463) (_1!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (Some!127 (_2!1029 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(declare-fun b!58449 () Bool)

(assert (=> b!58449 (= e!38465 (contains!690 (toList!702 lt!23463) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(assert (= (and d!11135 res!32572) b!58448))

(assert (= (and b!58448 res!32571) b!58449))

(declare-fun m!50093 () Bool)

(assert (=> d!11135 m!50093))

(declare-fun m!50095 () Bool)

(assert (=> d!11135 m!50095))

(declare-fun m!50097 () Bool)

(assert (=> d!11135 m!50097))

(declare-fun m!50099 () Bool)

(assert (=> d!11135 m!50099))

(declare-fun m!50101 () Bool)

(assert (=> b!58448 m!50101))

(declare-fun m!50103 () Bool)

(assert (=> b!58449 m!50103))

(assert (=> b!57704 d!11135))

(declare-fun d!11137 () Bool)

(assert (=> d!11137 (= (inRange!0 (ite c!7198 (index!3067 lt!23058) (ite c!7200 (index!3066 lt!23051) (index!3069 lt!23051))) (mask!5896 newMap!16)) (and (bvsge (ite c!7198 (index!3067 lt!23058) (ite c!7200 (index!3066 lt!23051) (index!3069 lt!23051))) #b00000000000000000000000000000000) (bvslt (ite c!7198 (index!3067 lt!23058) (ite c!7200 (index!3066 lt!23051) (index!3069 lt!23051))) (bvadd (mask!5896 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4199 d!11137))

(assert (=> b!57822 d!10745))

(declare-fun b!58450 () Bool)

(declare-fun e!38467 () Bool)

(declare-fun call!4272 () Bool)

(assert (=> b!58450 (= e!38467 call!4272)))

(declare-fun b!58451 () Bool)

(declare-fun e!38469 () Bool)

(declare-fun e!38468 () Bool)

(assert (=> b!58451 (= e!38469 e!38468)))

(declare-fun res!32574 () Bool)

(assert (=> b!58451 (=> (not res!32574) (not e!38468))))

(declare-fun e!38466 () Bool)

(assert (=> b!58451 (= res!32574 (not e!38466))))

(declare-fun res!32573 () Bool)

(assert (=> b!58451 (=> (not res!32573) (not e!38466))))

(assert (=> b!58451 (= res!32573 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!11139 () Bool)

(declare-fun res!32575 () Bool)

(assert (=> d!11139 (=> res!32575 e!38469)))

(assert (=> d!11139 (= res!32575 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 (v!2365 (underlying!222 thiss!992))))))))

(assert (=> d!11139 (= (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) #b00000000000000000000000000000000 Nil!1447) e!38469)))

(declare-fun b!58452 () Bool)

(assert (=> b!58452 (= e!38467 call!4272)))

(declare-fun b!58453 () Bool)

(assert (=> b!58453 (= e!38468 e!38467)))

(declare-fun c!7381 () Bool)

(assert (=> b!58453 (= c!7381 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!58454 () Bool)

(assert (=> b!58454 (= e!38466 (contains!689 Nil!1447 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!4269 () Bool)

(assert (=> bm!4269 (= call!4272 (arrayNoDuplicates!0 (_keys!3642 (v!2365 (underlying!222 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7381 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) #b00000000000000000000000000000000) Nil!1447) Nil!1447)))))

(assert (= (and d!11139 (not res!32575)) b!58451))

(assert (= (and b!58451 res!32573) b!58454))

(assert (= (and b!58451 res!32574) b!58453))

(assert (= (and b!58453 c!7381) b!58452))

(assert (= (and b!58453 (not c!7381)) b!58450))

(assert (= (or b!58452 b!58450) bm!4269))

(assert (=> b!58451 m!49225))

(assert (=> b!58451 m!49225))

(assert (=> b!58451 m!49227))

(assert (=> b!58453 m!49225))

(assert (=> b!58453 m!49225))

(assert (=> b!58453 m!49227))

(assert (=> b!58454 m!49225))

(assert (=> b!58454 m!49225))

(declare-fun m!50105 () Bool)

(assert (=> b!58454 m!50105))

(assert (=> bm!4269 m!49225))

(declare-fun m!50107 () Bool)

(assert (=> bm!4269 m!50107))

(assert (=> b!57569 d!11139))

(declare-fun d!11141 () Bool)

(declare-fun e!38471 () Bool)

(assert (=> d!11141 e!38471))

(declare-fun res!32576 () Bool)

(assert (=> d!11141 (=> res!32576 e!38471)))

(declare-fun lt!23465 () Bool)

(assert (=> d!11141 (= res!32576 (not lt!23465))))

(declare-fun lt!23466 () Bool)

(assert (=> d!11141 (= lt!23465 lt!23466)))

(declare-fun lt!23468 () Unit!1488)

(declare-fun e!38470 () Unit!1488)

(assert (=> d!11141 (= lt!23468 e!38470)))

(declare-fun c!7382 () Bool)

(assert (=> d!11141 (= c!7382 lt!23466)))

(assert (=> d!11141 (= lt!23466 (containsKey!126 (toList!702 lt!22884) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11141 (= (contains!688 lt!22884 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23465)))

(declare-fun b!58455 () Bool)

(declare-fun lt!23467 () Unit!1488)

(assert (=> b!58455 (= e!38470 lt!23467)))

(assert (=> b!58455 (= lt!23467 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22884) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58455 (isDefined!76 (getValueByKey!122 (toList!702 lt!22884) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58456 () Bool)

(declare-fun Unit!1541 () Unit!1488)

(assert (=> b!58456 (= e!38470 Unit!1541)))

(declare-fun b!58457 () Bool)

(assert (=> b!58457 (= e!38471 (isDefined!76 (getValueByKey!122 (toList!702 lt!22884) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11141 c!7382) b!58455))

(assert (= (and d!11141 (not c!7382)) b!58456))

(assert (= (and d!11141 (not res!32576)) b!58457))

(declare-fun m!50109 () Bool)

(assert (=> d!11141 m!50109))

(declare-fun m!50111 () Bool)

(assert (=> b!58455 m!50111))

(declare-fun m!50113 () Bool)

(assert (=> b!58455 m!50113))

(assert (=> b!58455 m!50113))

(declare-fun m!50115 () Bool)

(assert (=> b!58455 m!50115))

(assert (=> b!58457 m!50113))

(assert (=> b!58457 m!50113))

(assert (=> b!58457 m!50115))

(assert (=> b!57643 d!11141))

(declare-fun d!11143 () Bool)

(assert (=> d!11143 (= (get!1076 (getValueByKey!122 (toList!702 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22689)) (v!2369 (getValueByKey!122 (toList!702 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22689)))))

(assert (=> d!10623 d!11143))

(declare-fun b!58458 () Bool)

(declare-fun e!38472 () Option!128)

(assert (=> b!58458 (= e!38472 (Some!127 (_2!1029 (h!2025 (toList!702 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))))

(declare-fun c!7383 () Bool)

(declare-fun d!11145 () Bool)

(assert (=> d!11145 (= c!7383 (and ((_ is Cons!1445) (toList!702 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))) (= (_1!1029 (h!2025 (toList!702 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))) lt!22689)))))

(assert (=> d!11145 (= (getValueByKey!122 (toList!702 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22689) e!38472)))

(declare-fun b!58461 () Bool)

(declare-fun e!38473 () Option!128)

(assert (=> b!58461 (= e!38473 None!126)))

(declare-fun b!58459 () Bool)

(assert (=> b!58459 (= e!38472 e!38473)))

(declare-fun c!7384 () Bool)

(assert (=> b!58459 (= c!7384 (and ((_ is Cons!1445) (toList!702 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))) (not (= (_1!1029 (h!2025 (toList!702 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))) lt!22689))))))

(declare-fun b!58460 () Bool)

(assert (=> b!58460 (= e!38473 (getValueByKey!122 (t!4775 (toList!702 (+!80 lt!22682 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))) lt!22689))))

(assert (= (and d!11145 c!7383) b!58458))

(assert (= (and d!11145 (not c!7383)) b!58459))

(assert (= (and b!58459 c!7384) b!58460))

(assert (= (and b!58459 (not c!7384)) b!58461))

(declare-fun m!50117 () Bool)

(assert (=> b!58460 m!50117))

(assert (=> d!10623 d!11145))

(declare-fun d!11147 () Bool)

(declare-fun res!32577 () Bool)

(declare-fun e!38474 () Bool)

(assert (=> d!11147 (=> res!32577 e!38474)))

(assert (=> d!11147 (= res!32577 (and ((_ is Cons!1445) (t!4775 (toList!702 lt!22601))) (= (_1!1029 (h!2025 (t!4775 (toList!702 lt!22601)))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(assert (=> d!11147 (= (containsKey!126 (t!4775 (toList!702 lt!22601)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) e!38474)))

(declare-fun b!58462 () Bool)

(declare-fun e!38475 () Bool)

(assert (=> b!58462 (= e!38474 e!38475)))

(declare-fun res!32578 () Bool)

(assert (=> b!58462 (=> (not res!32578) (not e!38475))))

(assert (=> b!58462 (= res!32578 (and (or (not ((_ is Cons!1445) (t!4775 (toList!702 lt!22601)))) (bvsle (_1!1029 (h!2025 (t!4775 (toList!702 lt!22601)))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))) ((_ is Cons!1445) (t!4775 (toList!702 lt!22601))) (bvslt (_1!1029 (h!2025 (t!4775 (toList!702 lt!22601)))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))))))

(declare-fun b!58463 () Bool)

(assert (=> b!58463 (= e!38475 (containsKey!126 (t!4775 (t!4775 (toList!702 lt!22601))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (= (and d!11147 (not res!32577)) b!58462))

(assert (= (and b!58462 res!32578) b!58463))

(assert (=> b!58463 m!48105))

(declare-fun m!50119 () Bool)

(assert (=> b!58463 m!50119))

(assert (=> b!57854 d!11147))

(assert (=> b!57675 d!10709))

(assert (=> b!57647 d!10653))

(declare-fun d!11149 () Bool)

(declare-fun e!38477 () Bool)

(assert (=> d!11149 e!38477))

(declare-fun res!32579 () Bool)

(assert (=> d!11149 (=> res!32579 e!38477)))

(declare-fun lt!23469 () Bool)

(assert (=> d!11149 (= res!32579 (not lt!23469))))

(declare-fun lt!23470 () Bool)

(assert (=> d!11149 (= lt!23469 lt!23470)))

(declare-fun lt!23472 () Unit!1488)

(declare-fun e!38476 () Unit!1488)

(assert (=> d!11149 (= lt!23472 e!38476)))

(declare-fun c!7385 () Bool)

(assert (=> d!11149 (= c!7385 lt!23470)))

(assert (=> d!11149 (= lt!23470 (containsKey!126 (toList!702 lt!23088) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!11149 (= (contains!688 lt!23088 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) lt!23469)))

(declare-fun b!58464 () Bool)

(declare-fun lt!23471 () Unit!1488)

(assert (=> b!58464 (= e!38476 lt!23471)))

(assert (=> b!58464 (= lt!23471 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!23088) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> b!58464 (isDefined!76 (getValueByKey!122 (toList!702 lt!23088) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!58465 () Bool)

(declare-fun Unit!1542 () Unit!1488)

(assert (=> b!58465 (= e!38476 Unit!1542)))

(declare-fun b!58466 () Bool)

(assert (=> b!58466 (= e!38477 (isDefined!76 (getValueByKey!122 (toList!702 lt!23088) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(assert (= (and d!11149 c!7385) b!58464))

(assert (= (and d!11149 (not c!7385)) b!58465))

(assert (= (and d!11149 (not res!32579)) b!58466))

(declare-fun m!50121 () Bool)

(assert (=> d!11149 m!50121))

(declare-fun m!50123 () Bool)

(assert (=> b!58464 m!50123))

(assert (=> b!58464 m!48867))

(assert (=> b!58464 m!48867))

(declare-fun m!50125 () Bool)

(assert (=> b!58464 m!50125))

(assert (=> b!58466 m!48867))

(assert (=> b!58466 m!48867))

(assert (=> b!58466 m!50125))

(assert (=> d!10711 d!11149))

(declare-fun b!58467 () Bool)

(declare-fun e!38478 () Option!128)

(assert (=> b!58467 (= e!38478 (Some!127 (_2!1029 (h!2025 lt!23089))))))

(declare-fun c!7386 () Bool)

(declare-fun d!11151 () Bool)

(assert (=> d!11151 (= c!7386 (and ((_ is Cons!1445) lt!23089) (= (_1!1029 (h!2025 lt!23089)) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(assert (=> d!11151 (= (getValueByKey!122 lt!23089 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) e!38478)))

(declare-fun b!58470 () Bool)

(declare-fun e!38479 () Option!128)

(assert (=> b!58470 (= e!38479 None!126)))

(declare-fun b!58468 () Bool)

(assert (=> b!58468 (= e!38478 e!38479)))

(declare-fun c!7387 () Bool)

(assert (=> b!58468 (= c!7387 (and ((_ is Cons!1445) lt!23089) (not (= (_1!1029 (h!2025 lt!23089)) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))))

(declare-fun b!58469 () Bool)

(assert (=> b!58469 (= e!38479 (getValueByKey!122 (t!4775 lt!23089) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!11151 c!7386) b!58467))

(assert (= (and d!11151 (not c!7386)) b!58468))

(assert (= (and b!58468 c!7387) b!58469))

(assert (= (and b!58468 (not c!7387)) b!58470))

(declare-fun m!50127 () Bool)

(assert (=> b!58469 m!50127))

(assert (=> d!10711 d!11151))

(declare-fun d!11153 () Bool)

(assert (=> d!11153 (= (getValueByKey!122 lt!23089 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) (Some!127 (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun lt!23473 () Unit!1488)

(assert (=> d!11153 (= lt!23473 (choose!305 lt!23089 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun e!38480 () Bool)

(assert (=> d!11153 e!38480))

(declare-fun res!32580 () Bool)

(assert (=> d!11153 (=> (not res!32580) (not e!38480))))

(assert (=> d!11153 (= res!32580 (isStrictlySorted!278 lt!23089))))

(assert (=> d!11153 (= (lemmaContainsTupThenGetReturnValue!41 lt!23089 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) lt!23473)))

(declare-fun b!58471 () Bool)

(declare-fun res!32581 () Bool)

(assert (=> b!58471 (=> (not res!32581) (not e!38480))))

(assert (=> b!58471 (= res!32581 (containsKey!126 lt!23089 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun b!58472 () Bool)

(assert (=> b!58472 (= e!38480 (contains!690 lt!23089 (tuple2!2039 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(assert (= (and d!11153 res!32580) b!58471))

(assert (= (and b!58471 res!32581) b!58472))

(assert (=> d!11153 m!48861))

(declare-fun m!50129 () Bool)

(assert (=> d!11153 m!50129))

(declare-fun m!50131 () Bool)

(assert (=> d!11153 m!50131))

(declare-fun m!50133 () Bool)

(assert (=> b!58471 m!50133))

(declare-fun m!50135 () Bool)

(assert (=> b!58472 m!50135))

(assert (=> d!10711 d!11153))

(declare-fun b!58473 () Bool)

(declare-fun res!32582 () Bool)

(declare-fun e!38482 () Bool)

(assert (=> b!58473 (=> (not res!32582) (not e!38482))))

(declare-fun lt!23474 () List!1449)

(assert (=> b!58473 (= res!32582 (containsKey!126 lt!23474 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun d!11155 () Bool)

(assert (=> d!11155 e!38482))

(declare-fun res!32583 () Bool)

(assert (=> d!11155 (=> (not res!32583) (not e!38482))))

(assert (=> d!11155 (= res!32583 (isStrictlySorted!278 lt!23474))))

(declare-fun e!38485 () List!1449)

(assert (=> d!11155 (= lt!23474 e!38485)))

(declare-fun c!7388 () Bool)

(assert (=> d!11155 (= c!7388 (and ((_ is Cons!1445) (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087)))) (bvslt (_1!1029 (h!2025 (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087))))) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(assert (=> d!11155 (isStrictlySorted!278 (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087))))))

(assert (=> d!11155 (= (insertStrictlySorted!43 (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087))) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) lt!23474)))

(declare-fun b!58474 () Bool)

(declare-fun e!38481 () List!1449)

(declare-fun call!4275 () List!1449)

(assert (=> b!58474 (= e!38481 call!4275)))

(declare-fun b!58475 () Bool)

(declare-fun c!7390 () Bool)

(declare-fun e!38484 () List!1449)

(declare-fun c!7391 () Bool)

(assert (=> b!58475 (= e!38484 (ite c!7390 (t!4775 (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087)))) (ite c!7391 (Cons!1445 (h!2025 (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087)))) (t!4775 (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087))))) Nil!1446)))))

(declare-fun b!58476 () Bool)

(assert (=> b!58476 (= e!38482 (contains!690 lt!23474 (tuple2!2039 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!58477 () Bool)

(assert (=> b!58477 (= e!38484 (insertStrictlySorted!43 (t!4775 (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087)))) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(declare-fun call!4274 () List!1449)

(declare-fun bm!4270 () Bool)

(assert (=> bm!4270 (= call!4274 ($colon$colon!58 e!38484 (ite c!7388 (h!2025 (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087)))) (tuple2!2039 (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))) (_2!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))))

(declare-fun c!7389 () Bool)

(assert (=> bm!4270 (= c!7389 c!7388)))

(declare-fun b!58478 () Bool)

(declare-fun e!38483 () List!1449)

(declare-fun call!4273 () List!1449)

(assert (=> b!58478 (= e!38483 call!4273)))

(declare-fun bm!4271 () Bool)

(assert (=> bm!4271 (= call!4273 call!4274)))

(declare-fun b!58479 () Bool)

(assert (=> b!58479 (= c!7391 (and ((_ is Cons!1445) (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087)))) (bvsgt (_1!1029 (h!2025 (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087))))) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(assert (=> b!58479 (= e!38483 e!38481)))

(declare-fun b!58480 () Bool)

(assert (=> b!58480 (= e!38485 call!4274)))

(declare-fun b!58481 () Bool)

(assert (=> b!58481 (= e!38481 call!4275)))

(declare-fun b!58482 () Bool)

(assert (=> b!58482 (= e!38485 e!38483)))

(assert (=> b!58482 (= c!7390 (and ((_ is Cons!1445) (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087)))) (= (_1!1029 (h!2025 (toList!702 (ite c!7082 call!4091 (ite c!7079 call!4090 call!4087))))) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun bm!4272 () Bool)

(assert (=> bm!4272 (= call!4275 call!4273)))

(assert (= (and d!11155 c!7388) b!58480))

(assert (= (and d!11155 (not c!7388)) b!58482))

(assert (= (and b!58482 c!7390) b!58478))

(assert (= (and b!58482 (not c!7390)) b!58479))

(assert (= (and b!58479 c!7391) b!58474))

(assert (= (and b!58479 (not c!7391)) b!58481))

(assert (= (or b!58474 b!58481) bm!4272))

(assert (= (or b!58478 bm!4272) bm!4271))

(assert (= (or b!58480 bm!4271) bm!4270))

(assert (= (and bm!4270 c!7389) b!58477))

(assert (= (and bm!4270 (not c!7389)) b!58475))

(assert (= (and d!11155 res!32583) b!58473))

(assert (= (and b!58473 res!32582) b!58476))

(declare-fun m!50137 () Bool)

(assert (=> b!58473 m!50137))

(declare-fun m!50139 () Bool)

(assert (=> d!11155 m!50139))

(declare-fun m!50141 () Bool)

(assert (=> d!11155 m!50141))

(declare-fun m!50143 () Bool)

(assert (=> b!58476 m!50143))

(declare-fun m!50145 () Bool)

(assert (=> b!58477 m!50145))

(declare-fun m!50147 () Bool)

(assert (=> bm!4270 m!50147))

(assert (=> d!10711 d!11155))

(declare-fun b!58483 () Bool)

(declare-fun e!38487 () Bool)

(declare-fun call!4276 () Bool)

(assert (=> b!58483 (= e!38487 call!4276)))

(declare-fun b!58484 () Bool)

(declare-fun e!38489 () Bool)

(declare-fun e!38488 () Bool)

(assert (=> b!58484 (= e!38489 e!38488)))

(declare-fun res!32585 () Bool)

(assert (=> b!58484 (=> (not res!32585) (not e!38488))))

(declare-fun e!38486 () Bool)

(assert (=> b!58484 (= res!32585 (not e!38486))))

(declare-fun res!32584 () Bool)

(assert (=> b!58484 (=> (not res!32584) (not e!38486))))

(assert (=> b!58484 (= res!32584 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000)))))

(declare-fun d!11157 () Bool)

(declare-fun res!32586 () Bool)

(assert (=> d!11157 (=> res!32586 e!38489)))

(assert (=> d!11157 (= res!32586 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 (_2!1030 lt!22784)))))))

(assert (=> d!11157 (= (arrayNoDuplicates!0 (_keys!3642 (_2!1030 lt!22784)) #b00000000000000000000000000000000 Nil!1447) e!38489)))

(declare-fun b!58485 () Bool)

(assert (=> b!58485 (= e!38487 call!4276)))

(declare-fun b!58486 () Bool)

(assert (=> b!58486 (= e!38488 e!38487)))

(declare-fun c!7392 () Bool)

(assert (=> b!58486 (= c!7392 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000)))))

(declare-fun b!58487 () Bool)

(assert (=> b!58487 (= e!38486 (contains!689 Nil!1447 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000)))))

(declare-fun bm!4273 () Bool)

(assert (=> bm!4273 (= call!4276 (arrayNoDuplicates!0 (_keys!3642 (_2!1030 lt!22784)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7392 (Cons!1446 (select (arr!1774 (_keys!3642 (_2!1030 lt!22784))) #b00000000000000000000000000000000) Nil!1447) Nil!1447)))))

(assert (= (and d!11157 (not res!32586)) b!58484))

(assert (= (and b!58484 res!32584) b!58487))

(assert (= (and b!58484 res!32585) b!58486))

(assert (= (and b!58486 c!7392) b!58485))

(assert (= (and b!58486 (not c!7392)) b!58483))

(assert (= (or b!58485 b!58483) bm!4273))

(assert (=> b!58484 m!49069))

(assert (=> b!58484 m!49069))

(assert (=> b!58484 m!49107))

(assert (=> b!58486 m!49069))

(assert (=> b!58486 m!49069))

(assert (=> b!58486 m!49107))

(assert (=> b!58487 m!49069))

(assert (=> b!58487 m!49069))

(declare-fun m!50149 () Bool)

(assert (=> b!58487 m!50149))

(assert (=> bm!4273 m!49069))

(declare-fun m!50151 () Bool)

(assert (=> bm!4273 m!50151))

(assert (=> b!57694 d!11157))

(declare-fun d!11159 () Bool)

(declare-fun e!38491 () Bool)

(assert (=> d!11159 e!38491))

(declare-fun res!32587 () Bool)

(assert (=> d!11159 (=> res!32587 e!38491)))

(declare-fun lt!23475 () Bool)

(assert (=> d!11159 (= res!32587 (not lt!23475))))

(declare-fun lt!23476 () Bool)

(assert (=> d!11159 (= lt!23475 lt!23476)))

(declare-fun lt!23478 () Unit!1488)

(declare-fun e!38490 () Unit!1488)

(assert (=> d!11159 (= lt!23478 e!38490)))

(declare-fun c!7393 () Bool)

(assert (=> d!11159 (= c!7393 lt!23476)))

(assert (=> d!11159 (= lt!23476 (containsKey!126 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774))))))

(assert (=> d!11159 (= (contains!688 (getCurrentListMap!400 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774))) lt!23475)))

(declare-fun b!58488 () Bool)

(declare-fun lt!23477 () Unit!1488)

(assert (=> b!58488 (= e!38490 lt!23477)))

(assert (=> b!58488 (= lt!23477 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774))))))

(assert (=> b!58488 (isDefined!76 (getValueByKey!122 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774))))))

(declare-fun b!58489 () Bool)

(declare-fun Unit!1543 () Unit!1488)

(assert (=> b!58489 (= e!38490 Unit!1543)))

(declare-fun b!58490 () Bool)

(assert (=> b!58490 (= e!38491 (isDefined!76 (getValueByKey!122 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!22774)))))))

(assert (= (and d!11159 c!7393) b!58488))

(assert (= (and d!11159 (not c!7393)) b!58489))

(assert (= (and d!11159 (not res!32587)) b!58490))

(assert (=> d!11159 m!48309))

(declare-fun m!50153 () Bool)

(assert (=> d!11159 m!50153))

(assert (=> b!58488 m!48309))

(declare-fun m!50155 () Bool)

(assert (=> b!58488 m!50155))

(assert (=> b!58488 m!48309))

(declare-fun m!50157 () Bool)

(assert (=> b!58488 m!50157))

(assert (=> b!58488 m!50157))

(declare-fun m!50159 () Bool)

(assert (=> b!58488 m!50159))

(assert (=> b!58490 m!48309))

(assert (=> b!58490 m!50157))

(assert (=> b!58490 m!50157))

(assert (=> b!58490 m!50159))

(assert (=> b!57865 d!11159))

(declare-fun b!58491 () Bool)

(declare-fun e!38498 () Bool)

(declare-fun call!4279 () Bool)

(assert (=> b!58491 (= e!38498 (not call!4279))))

(declare-fun call!4278 () ListLongMap!1373)

(declare-fun c!7397 () Bool)

(declare-fun call!4281 () ListLongMap!1373)

(declare-fun bm!4274 () Bool)

(declare-fun call!4282 () ListLongMap!1373)

(declare-fun call!4280 () ListLongMap!1373)

(declare-fun c!7394 () Bool)

(assert (=> bm!4274 (= call!4280 (+!80 (ite c!7397 call!4282 (ite c!7394 call!4281 call!4278)) (ite (or c!7397 c!7394) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!58492 () Bool)

(declare-fun res!32591 () Bool)

(declare-fun e!38502 () Bool)

(assert (=> b!58492 (=> (not res!32591) (not e!38502))))

(declare-fun e!38503 () Bool)

(assert (=> b!58492 (= res!32591 e!38503)))

(declare-fun c!7396 () Bool)

(assert (=> b!58492 (= c!7396 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4275 () Bool)

(assert (=> bm!4275 (= call!4278 call!4281)))

(declare-fun b!58493 () Bool)

(declare-fun e!38493 () Bool)

(assert (=> b!58493 (= e!38493 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58494 () Bool)

(declare-fun call!4283 () Bool)

(assert (=> b!58494 (= e!38503 (not call!4283))))

(declare-fun d!11161 () Bool)

(assert (=> d!11161 e!38502))

(declare-fun res!32588 () Bool)

(assert (=> d!11161 (=> (not res!32588) (not e!38502))))

(assert (=> d!11161 (= res!32588 (or (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))))

(declare-fun lt!23493 () ListLongMap!1373)

(declare-fun lt!23484 () ListLongMap!1373)

(assert (=> d!11161 (= lt!23493 lt!23484)))

(declare-fun lt!23488 () Unit!1488)

(declare-fun e!38500 () Unit!1488)

(assert (=> d!11161 (= lt!23488 e!38500)))

(declare-fun c!7398 () Bool)

(assert (=> d!11161 (= c!7398 e!38493)))

(declare-fun res!32595 () Bool)

(assert (=> d!11161 (=> (not res!32595) (not e!38493))))

(assert (=> d!11161 (= res!32595 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun e!38497 () ListLongMap!1373)

(assert (=> d!11161 (= lt!23484 e!38497)))

(assert (=> d!11161 (= c!7397 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11161 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11161 (= (getCurrentListMap!400 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23493)))

(declare-fun b!58495 () Bool)

(declare-fun e!38504 () Bool)

(assert (=> b!58495 (= e!38504 (= (apply!65 lt!23493 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!58496 () Bool)

(declare-fun e!38492 () Bool)

(assert (=> b!58496 (= e!38492 (= (apply!65 lt!23493 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 lt!22772) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58496 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 lt!22772)))))

(assert (=> b!58496 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58497 () Bool)

(declare-fun e!38495 () ListLongMap!1373)

(assert (=> b!58497 (= e!38495 call!4278)))

(declare-fun bm!4276 () Bool)

(assert (=> bm!4276 (= call!4282 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58498 () Bool)

(assert (=> b!58498 (= e!38497 (+!80 call!4280 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun b!58499 () Bool)

(assert (=> b!58499 (= e!38498 e!38504)))

(declare-fun res!32589 () Bool)

(assert (=> b!58499 (= res!32589 call!4279)))

(assert (=> b!58499 (=> (not res!32589) (not e!38504))))

(declare-fun bm!4277 () Bool)

(assert (=> bm!4277 (= call!4283 (contains!688 lt!23493 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4278 () Bool)

(assert (=> bm!4278 (= call!4279 (contains!688 lt!23493 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58500 () Bool)

(assert (=> b!58500 (= e!38502 e!38498)))

(declare-fun c!7399 () Bool)

(assert (=> b!58500 (= c!7399 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58501 () Bool)

(declare-fun res!32593 () Bool)

(assert (=> b!58501 (=> (not res!32593) (not e!38502))))

(declare-fun e!38501 () Bool)

(assert (=> b!58501 (= res!32593 e!38501)))

(declare-fun res!32592 () Bool)

(assert (=> b!58501 (=> res!32592 e!38501)))

(declare-fun e!38494 () Bool)

(assert (=> b!58501 (= res!32592 (not e!38494))))

(declare-fun res!32596 () Bool)

(assert (=> b!58501 (=> (not res!32596) (not e!38494))))

(assert (=> b!58501 (= res!32596 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58502 () Bool)

(assert (=> b!58502 (= e!38501 e!38492)))

(declare-fun res!32590 () Bool)

(assert (=> b!58502 (=> (not res!32590) (not e!38492))))

(assert (=> b!58502 (= res!32590 (contains!688 lt!23493 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58502 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58503 () Bool)

(declare-fun lt!23494 () Unit!1488)

(assert (=> b!58503 (= e!38500 lt!23494)))

(declare-fun lt!23500 () ListLongMap!1373)

(assert (=> b!58503 (= lt!23500 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23482 () (_ BitVec 64))

(assert (=> b!58503 (= lt!23482 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23498 () (_ BitVec 64))

(assert (=> b!58503 (= lt!23498 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23499 () Unit!1488)

(assert (=> b!58503 (= lt!23499 (addStillContains!41 lt!23500 lt!23482 (zeroValue!1940 newMap!16) lt!23498))))

(assert (=> b!58503 (contains!688 (+!80 lt!23500 (tuple2!2039 lt!23482 (zeroValue!1940 newMap!16))) lt!23498)))

(declare-fun lt!23495 () Unit!1488)

(assert (=> b!58503 (= lt!23495 lt!23499)))

(declare-fun lt!23492 () ListLongMap!1373)

(assert (=> b!58503 (= lt!23492 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23486 () (_ BitVec 64))

(assert (=> b!58503 (= lt!23486 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23479 () (_ BitVec 64))

(assert (=> b!58503 (= lt!23479 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23490 () Unit!1488)

(assert (=> b!58503 (= lt!23490 (addApplyDifferent!41 lt!23492 lt!23486 (minValue!1940 newMap!16) lt!23479))))

(assert (=> b!58503 (= (apply!65 (+!80 lt!23492 (tuple2!2039 lt!23486 (minValue!1940 newMap!16))) lt!23479) (apply!65 lt!23492 lt!23479))))

(declare-fun lt!23483 () Unit!1488)

(assert (=> b!58503 (= lt!23483 lt!23490)))

(declare-fun lt!23480 () ListLongMap!1373)

(assert (=> b!58503 (= lt!23480 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23496 () (_ BitVec 64))

(assert (=> b!58503 (= lt!23496 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23487 () (_ BitVec 64))

(assert (=> b!58503 (= lt!23487 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23491 () Unit!1488)

(assert (=> b!58503 (= lt!23491 (addApplyDifferent!41 lt!23480 lt!23496 (zeroValue!1940 newMap!16) lt!23487))))

(assert (=> b!58503 (= (apply!65 (+!80 lt!23480 (tuple2!2039 lt!23496 (zeroValue!1940 newMap!16))) lt!23487) (apply!65 lt!23480 lt!23487))))

(declare-fun lt!23497 () Unit!1488)

(assert (=> b!58503 (= lt!23497 lt!23491)))

(declare-fun lt!23489 () ListLongMap!1373)

(assert (=> b!58503 (= lt!23489 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) lt!22772 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23485 () (_ BitVec 64))

(assert (=> b!58503 (= lt!23485 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23481 () (_ BitVec 64))

(assert (=> b!58503 (= lt!23481 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58503 (= lt!23494 (addApplyDifferent!41 lt!23489 lt!23485 (minValue!1940 newMap!16) lt!23481))))

(assert (=> b!58503 (= (apply!65 (+!80 lt!23489 (tuple2!2039 lt!23485 (minValue!1940 newMap!16))) lt!23481) (apply!65 lt!23489 lt!23481))))

(declare-fun b!58504 () Bool)

(assert (=> b!58504 (= e!38494 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58505 () Bool)

(declare-fun call!4277 () ListLongMap!1373)

(assert (=> b!58505 (= e!38495 call!4277)))

(declare-fun bm!4279 () Bool)

(assert (=> bm!4279 (= call!4277 call!4280)))

(declare-fun bm!4280 () Bool)

(assert (=> bm!4280 (= call!4281 call!4282)))

(declare-fun b!58506 () Bool)

(declare-fun e!38499 () Bool)

(assert (=> b!58506 (= e!38499 (= (apply!65 lt!23493 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!58507 () Bool)

(declare-fun e!38496 () ListLongMap!1373)

(assert (=> b!58507 (= e!38497 e!38496)))

(assert (=> b!58507 (= c!7394 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58508 () Bool)

(assert (=> b!58508 (= e!38496 call!4277)))

(declare-fun b!58509 () Bool)

(assert (=> b!58509 (= e!38503 e!38499)))

(declare-fun res!32594 () Bool)

(assert (=> b!58509 (= res!32594 call!4283)))

(assert (=> b!58509 (=> (not res!32594) (not e!38499))))

(declare-fun b!58510 () Bool)

(declare-fun Unit!1544 () Unit!1488)

(assert (=> b!58510 (= e!38500 Unit!1544)))

(declare-fun b!58511 () Bool)

(declare-fun c!7395 () Bool)

(assert (=> b!58511 (= c!7395 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58511 (= e!38496 e!38495)))

(assert (= (and d!11161 c!7397) b!58498))

(assert (= (and d!11161 (not c!7397)) b!58507))

(assert (= (and b!58507 c!7394) b!58508))

(assert (= (and b!58507 (not c!7394)) b!58511))

(assert (= (and b!58511 c!7395) b!58505))

(assert (= (and b!58511 (not c!7395)) b!58497))

(assert (= (or b!58505 b!58497) bm!4275))

(assert (= (or b!58508 bm!4275) bm!4280))

(assert (= (or b!58508 b!58505) bm!4279))

(assert (= (or b!58498 bm!4280) bm!4276))

(assert (= (or b!58498 bm!4279) bm!4274))

(assert (= (and d!11161 res!32595) b!58493))

(assert (= (and d!11161 c!7398) b!58503))

(assert (= (and d!11161 (not c!7398)) b!58510))

(assert (= (and d!11161 res!32588) b!58501))

(assert (= (and b!58501 res!32596) b!58504))

(assert (= (and b!58501 (not res!32592)) b!58502))

(assert (= (and b!58502 res!32590) b!58496))

(assert (= (and b!58501 res!32593) b!58492))

(assert (= (and b!58492 c!7396) b!58509))

(assert (= (and b!58492 (not c!7396)) b!58494))

(assert (= (and b!58509 res!32594) b!58506))

(assert (= (or b!58509 b!58494) bm!4277))

(assert (= (and b!58492 res!32591) b!58500))

(assert (= (and b!58500 c!7399) b!58499))

(assert (= (and b!58500 (not c!7399)) b!58491))

(assert (= (and b!58499 res!32589) b!58495))

(assert (= (or b!58499 b!58491) bm!4278))

(declare-fun b_lambda!2563 () Bool)

(assert (=> (not b_lambda!2563) (not b!58496)))

(assert (=> b!58496 t!4783))

(declare-fun b_and!3537 () Bool)

(assert (= b_and!3533 (and (=> t!4783 result!2361) b_and!3537)))

(assert (=> b!58496 t!4785))

(declare-fun b_and!3539 () Bool)

(assert (= b_and!3535 (and (=> t!4785 result!2363) b_and!3539)))

(assert (=> b!58496 m!48339))

(declare-fun m!50161 () Bool)

(assert (=> b!58496 m!50161))

(assert (=> b!58496 m!48339))

(declare-fun m!50163 () Bool)

(assert (=> b!58496 m!50163))

(assert (=> b!58496 m!48345))

(assert (=> b!58496 m!50161))

(assert (=> b!58496 m!48345))

(declare-fun m!50165 () Bool)

(assert (=> b!58496 m!50165))

(declare-fun m!50167 () Bool)

(assert (=> bm!4277 m!50167))

(declare-fun m!50169 () Bool)

(assert (=> b!58503 m!50169))

(declare-fun m!50171 () Bool)

(assert (=> b!58503 m!50171))

(declare-fun m!50173 () Bool)

(assert (=> b!58503 m!50173))

(declare-fun m!50175 () Bool)

(assert (=> b!58503 m!50175))

(declare-fun m!50177 () Bool)

(assert (=> b!58503 m!50177))

(assert (=> b!58503 m!50169))

(declare-fun m!50179 () Bool)

(assert (=> b!58503 m!50179))

(declare-fun m!50181 () Bool)

(assert (=> b!58503 m!50181))

(declare-fun m!50183 () Bool)

(assert (=> b!58503 m!50183))

(declare-fun m!50185 () Bool)

(assert (=> b!58503 m!50185))

(assert (=> b!58503 m!48345))

(declare-fun m!50187 () Bool)

(assert (=> b!58503 m!50187))

(declare-fun m!50189 () Bool)

(assert (=> b!58503 m!50189))

(assert (=> b!58503 m!50175))

(declare-fun m!50191 () Bool)

(assert (=> b!58503 m!50191))

(declare-fun m!50193 () Bool)

(assert (=> b!58503 m!50193))

(assert (=> b!58503 m!50183))

(assert (=> b!58503 m!50177))

(declare-fun m!50195 () Bool)

(assert (=> b!58503 m!50195))

(declare-fun m!50197 () Bool)

(assert (=> b!58503 m!50197))

(declare-fun m!50199 () Bool)

(assert (=> b!58503 m!50199))

(assert (=> b!58504 m!48345))

(assert (=> b!58504 m!48345))

(assert (=> b!58504 m!48383))

(assert (=> b!58502 m!48345))

(assert (=> b!58502 m!48345))

(declare-fun m!50201 () Bool)

(assert (=> b!58502 m!50201))

(declare-fun m!50203 () Bool)

(assert (=> bm!4274 m!50203))

(assert (=> bm!4276 m!50171))

(declare-fun m!50205 () Bool)

(assert (=> b!58506 m!50205))

(declare-fun m!50207 () Bool)

(assert (=> b!58495 m!50207))

(declare-fun m!50209 () Bool)

(assert (=> bm!4278 m!50209))

(assert (=> d!11161 m!48395))

(assert (=> b!58493 m!48345))

(assert (=> b!58493 m!48345))

(assert (=> b!58493 m!48383))

(declare-fun m!50211 () Bool)

(assert (=> b!58498 m!50211))

(assert (=> b!57865 d!11161))

(declare-fun d!11163 () Bool)

(assert (=> d!11163 (= (get!1076 (getValueByKey!122 (toList!702 lt!22694) lt!22681)) (v!2369 (getValueByKey!122 (toList!702 lt!22694) lt!22681)))))

(assert (=> d!10645 d!11163))

(declare-fun b!58512 () Bool)

(declare-fun e!38505 () Option!128)

(assert (=> b!58512 (= e!38505 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22694)))))))

(declare-fun d!11165 () Bool)

(declare-fun c!7400 () Bool)

(assert (=> d!11165 (= c!7400 (and ((_ is Cons!1445) (toList!702 lt!22694)) (= (_1!1029 (h!2025 (toList!702 lt!22694))) lt!22681)))))

(assert (=> d!11165 (= (getValueByKey!122 (toList!702 lt!22694) lt!22681) e!38505)))

(declare-fun b!58515 () Bool)

(declare-fun e!38506 () Option!128)

(assert (=> b!58515 (= e!38506 None!126)))

(declare-fun b!58513 () Bool)

(assert (=> b!58513 (= e!38505 e!38506)))

(declare-fun c!7401 () Bool)

(assert (=> b!58513 (= c!7401 (and ((_ is Cons!1445) (toList!702 lt!22694)) (not (= (_1!1029 (h!2025 (toList!702 lt!22694))) lt!22681))))))

(declare-fun b!58514 () Bool)

(assert (=> b!58514 (= e!38506 (getValueByKey!122 (t!4775 (toList!702 lt!22694)) lt!22681))))

(assert (= (and d!11165 c!7400) b!58512))

(assert (= (and d!11165 (not c!7400)) b!58513))

(assert (= (and b!58513 c!7401) b!58514))

(assert (= (and b!58513 (not c!7401)) b!58515))

(declare-fun m!50213 () Bool)

(assert (=> b!58514 m!50213))

(assert (=> d!10645 d!11165))

(declare-fun d!11167 () Bool)

(declare-fun res!32597 () Bool)

(declare-fun e!38507 () Bool)

(assert (=> d!11167 (=> res!32597 e!38507)))

(assert (=> d!11167 (= res!32597 (and ((_ is Cons!1445) (toList!702 lt!22695)) (= (_1!1029 (h!2025 (toList!702 lt!22695))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11167 (= (containsKey!126 (toList!702 lt!22695) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!38507)))

(declare-fun b!58516 () Bool)

(declare-fun e!38508 () Bool)

(assert (=> b!58516 (= e!38507 e!38508)))

(declare-fun res!32598 () Bool)

(assert (=> b!58516 (=> (not res!32598) (not e!38508))))

(assert (=> b!58516 (= res!32598 (and (or (not ((_ is Cons!1445) (toList!702 lt!22695))) (bvsle (_1!1029 (h!2025 (toList!702 lt!22695))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1445) (toList!702 lt!22695)) (bvslt (_1!1029 (h!2025 (toList!702 lt!22695))) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!58517 () Bool)

(assert (=> b!58517 (= e!38508 (containsKey!126 (t!4775 (toList!702 lt!22695)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11167 (not res!32597)) b!58516))

(assert (= (and b!58516 res!32598) b!58517))

(assert (=> b!58517 m!48191))

(declare-fun m!50215 () Bool)

(assert (=> b!58517 m!50215))

(assert (=> d!10685 d!11167))

(declare-fun d!11169 () Bool)

(declare-fun e!38510 () Bool)

(assert (=> d!11169 e!38510))

(declare-fun res!32599 () Bool)

(assert (=> d!11169 (=> res!32599 e!38510)))

(declare-fun lt!23501 () Bool)

(assert (=> d!11169 (= res!32599 (not lt!23501))))

(declare-fun lt!23502 () Bool)

(assert (=> d!11169 (= lt!23501 lt!23502)))

(declare-fun lt!23504 () Unit!1488)

(declare-fun e!38509 () Unit!1488)

(assert (=> d!11169 (= lt!23504 e!38509)))

(declare-fun c!7402 () Bool)

(assert (=> d!11169 (= c!7402 lt!23502)))

(assert (=> d!11169 (= lt!23502 (containsKey!126 (toList!702 lt!22971) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11169 (= (contains!688 lt!22971 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!23501)))

(declare-fun b!58518 () Bool)

(declare-fun lt!23503 () Unit!1488)

(assert (=> b!58518 (= e!38509 lt!23503)))

(assert (=> b!58518 (= lt!23503 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22971) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!58518 (isDefined!76 (getValueByKey!122 (toList!702 lt!22971) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58519 () Bool)

(declare-fun Unit!1545 () Unit!1488)

(assert (=> b!58519 (= e!38509 Unit!1545)))

(declare-fun b!58520 () Bool)

(assert (=> b!58520 (= e!38510 (isDefined!76 (getValueByKey!122 (toList!702 lt!22971) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!11169 c!7402) b!58518))

(assert (= (and d!11169 (not c!7402)) b!58519))

(assert (= (and d!11169 (not res!32599)) b!58520))

(declare-fun m!50217 () Bool)

(assert (=> d!11169 m!50217))

(declare-fun m!50219 () Bool)

(assert (=> b!58518 m!50219))

(assert (=> b!58518 m!48749))

(assert (=> b!58518 m!48749))

(declare-fun m!50221 () Bool)

(assert (=> b!58518 m!50221))

(assert (=> b!58520 m!48749))

(assert (=> b!58520 m!48749))

(assert (=> b!58520 m!50221))

(assert (=> d!10687 d!11169))

(declare-fun b!58521 () Bool)

(declare-fun e!38511 () Option!128)

(assert (=> b!58521 (= e!38511 (Some!127 (_2!1029 (h!2025 lt!22972))))))

(declare-fun c!7403 () Bool)

(declare-fun d!11171 () Bool)

(assert (=> d!11171 (= c!7403 (and ((_ is Cons!1445) lt!22972) (= (_1!1029 (h!2025 lt!22972)) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11171 (= (getValueByKey!122 lt!22972 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!38511)))

(declare-fun b!58524 () Bool)

(declare-fun e!38512 () Option!128)

(assert (=> b!58524 (= e!38512 None!126)))

(declare-fun b!58522 () Bool)

(assert (=> b!58522 (= e!38511 e!38512)))

(declare-fun c!7404 () Bool)

(assert (=> b!58522 (= c!7404 (and ((_ is Cons!1445) lt!22972) (not (= (_1!1029 (h!2025 lt!22972)) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!58523 () Bool)

(assert (=> b!58523 (= e!38512 (getValueByKey!122 (t!4775 lt!22972) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11171 c!7403) b!58521))

(assert (= (and d!11171 (not c!7403)) b!58522))

(assert (= (and b!58522 c!7404) b!58523))

(assert (= (and b!58522 (not c!7404)) b!58524))

(declare-fun m!50223 () Bool)

(assert (=> b!58523 m!50223))

(assert (=> d!10687 d!11171))

(declare-fun d!11173 () Bool)

(assert (=> d!11173 (= (getValueByKey!122 lt!22972 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!127 (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!23505 () Unit!1488)

(assert (=> d!11173 (= lt!23505 (choose!305 lt!22972 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!38513 () Bool)

(assert (=> d!11173 e!38513))

(declare-fun res!32600 () Bool)

(assert (=> d!11173 (=> (not res!32600) (not e!38513))))

(assert (=> d!11173 (= res!32600 (isStrictlySorted!278 lt!22972))))

(assert (=> d!11173 (= (lemmaContainsTupThenGetReturnValue!41 lt!22972 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!23505)))

(declare-fun b!58525 () Bool)

(declare-fun res!32601 () Bool)

(assert (=> b!58525 (=> (not res!32601) (not e!38513))))

(assert (=> b!58525 (= res!32601 (containsKey!126 lt!22972 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58526 () Bool)

(assert (=> b!58526 (= e!38513 (contains!690 lt!22972 (tuple2!2039 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!11173 res!32600) b!58525))

(assert (= (and b!58525 res!32601) b!58526))

(assert (=> d!11173 m!48743))

(declare-fun m!50225 () Bool)

(assert (=> d!11173 m!50225))

(declare-fun m!50227 () Bool)

(assert (=> d!11173 m!50227))

(declare-fun m!50229 () Bool)

(assert (=> b!58525 m!50229))

(declare-fun m!50231 () Bool)

(assert (=> b!58526 m!50231))

(assert (=> d!10687 d!11173))

(declare-fun b!58527 () Bool)

(declare-fun res!32602 () Bool)

(declare-fun e!38515 () Bool)

(assert (=> b!58527 (=> (not res!32602) (not e!38515))))

(declare-fun lt!23506 () List!1449)

(assert (=> b!58527 (= res!32602 (containsKey!126 lt!23506 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun d!11175 () Bool)

(assert (=> d!11175 e!38515))

(declare-fun res!32603 () Bool)

(assert (=> d!11175 (=> (not res!32603) (not e!38515))))

(assert (=> d!11175 (= res!32603 (isStrictlySorted!278 lt!23506))))

(declare-fun e!38518 () List!1449)

(assert (=> d!11175 (= lt!23506 e!38518)))

(declare-fun c!7405 () Bool)

(assert (=> d!11175 (= c!7405 (and ((_ is Cons!1445) (toList!702 e!37898)) (bvslt (_1!1029 (h!2025 (toList!702 e!37898))) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11175 (isStrictlySorted!278 (toList!702 e!37898))))

(assert (=> d!11175 (= (insertStrictlySorted!43 (toList!702 e!37898) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!23506)))

(declare-fun b!58528 () Bool)

(declare-fun e!38514 () List!1449)

(declare-fun call!4286 () List!1449)

(assert (=> b!58528 (= e!38514 call!4286)))

(declare-fun c!7408 () Bool)

(declare-fun b!58529 () Bool)

(declare-fun c!7407 () Bool)

(declare-fun e!38517 () List!1449)

(assert (=> b!58529 (= e!38517 (ite c!7407 (t!4775 (toList!702 e!37898)) (ite c!7408 (Cons!1445 (h!2025 (toList!702 e!37898)) (t!4775 (toList!702 e!37898))) Nil!1446)))))

(declare-fun b!58530 () Bool)

(assert (=> b!58530 (= e!38515 (contains!690 lt!23506 (tuple2!2039 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!58531 () Bool)

(assert (=> b!58531 (= e!38517 (insertStrictlySorted!43 (t!4775 (toList!702 e!37898)) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!4281 () Bool)

(declare-fun call!4285 () List!1449)

(assert (=> bm!4281 (= call!4285 ($colon$colon!58 e!38517 (ite c!7405 (h!2025 (toList!702 e!37898)) (tuple2!2039 (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!7406 () Bool)

(assert (=> bm!4281 (= c!7406 c!7405)))

(declare-fun b!58532 () Bool)

(declare-fun e!38516 () List!1449)

(declare-fun call!4284 () List!1449)

(assert (=> b!58532 (= e!38516 call!4284)))

(declare-fun bm!4282 () Bool)

(assert (=> bm!4282 (= call!4284 call!4285)))

(declare-fun b!58533 () Bool)

(assert (=> b!58533 (= c!7408 (and ((_ is Cons!1445) (toList!702 e!37898)) (bvsgt (_1!1029 (h!2025 (toList!702 e!37898))) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!58533 (= e!38516 e!38514)))

(declare-fun b!58534 () Bool)

(assert (=> b!58534 (= e!38518 call!4285)))

(declare-fun b!58535 () Bool)

(assert (=> b!58535 (= e!38514 call!4286)))

(declare-fun b!58536 () Bool)

(assert (=> b!58536 (= e!38518 e!38516)))

(assert (=> b!58536 (= c!7407 (and ((_ is Cons!1445) (toList!702 e!37898)) (= (_1!1029 (h!2025 (toList!702 e!37898))) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun bm!4283 () Bool)

(assert (=> bm!4283 (= call!4286 call!4284)))

(assert (= (and d!11175 c!7405) b!58534))

(assert (= (and d!11175 (not c!7405)) b!58536))

(assert (= (and b!58536 c!7407) b!58532))

(assert (= (and b!58536 (not c!7407)) b!58533))

(assert (= (and b!58533 c!7408) b!58528))

(assert (= (and b!58533 (not c!7408)) b!58535))

(assert (= (or b!58528 b!58535) bm!4283))

(assert (= (or b!58532 bm!4283) bm!4282))

(assert (= (or b!58534 bm!4282) bm!4281))

(assert (= (and bm!4281 c!7406) b!58531))

(assert (= (and bm!4281 (not c!7406)) b!58529))

(assert (= (and d!11175 res!32603) b!58527))

(assert (= (and b!58527 res!32602) b!58530))

(declare-fun m!50233 () Bool)

(assert (=> b!58527 m!50233))

(declare-fun m!50235 () Bool)

(assert (=> d!11175 m!50235))

(declare-fun m!50237 () Bool)

(assert (=> d!11175 m!50237))

(declare-fun m!50239 () Bool)

(assert (=> b!58530 m!50239))

(declare-fun m!50241 () Bool)

(assert (=> b!58531 m!50241))

(declare-fun m!50243 () Bool)

(assert (=> bm!4281 m!50243))

(assert (=> d!10687 d!11175))

(declare-fun d!11177 () Bool)

(assert (=> d!11177 (isDefined!76 (getValueByKey!122 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!23507 () Unit!1488)

(assert (=> d!11177 (= lt!23507 (choose!298 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38519 () Bool)

(assert (=> d!11177 e!38519))

(declare-fun res!32604 () Bool)

(assert (=> d!11177 (=> (not res!32604) (not e!38519))))

(assert (=> d!11177 (= res!32604 (isStrictlySorted!278 (toList!702 lt!22695)))))

(assert (=> d!11177 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000) lt!23507)))

(declare-fun b!58537 () Bool)

(assert (=> b!58537 (= e!38519 (containsKey!126 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11177 res!32604) b!58537))

(assert (=> d!11177 m!48403))

(assert (=> d!11177 m!48403))

(assert (=> d!11177 m!48405))

(declare-fun m!50245 () Bool)

(assert (=> d!11177 m!50245))

(assert (=> d!11177 m!49131))

(assert (=> b!58537 m!48399))

(assert (=> b!57552 d!11177))

(assert (=> b!57552 d!10885))

(assert (=> b!57552 d!10887))

(assert (=> b!57710 d!10745))

(declare-fun b!58550 () Bool)

(declare-fun e!38527 () SeekEntryResult!236)

(declare-fun e!38528 () SeekEntryResult!236)

(assert (=> b!58550 (= e!38527 e!38528)))

(declare-fun c!7417 () Bool)

(declare-fun lt!23513 () (_ BitVec 64))

(assert (=> b!58550 (= c!7417 (= lt!23513 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!58551 () Bool)

(assert (=> b!58551 (= e!38527 Undefined!236)))

(declare-fun b!58552 () Bool)

(declare-fun c!7415 () Bool)

(assert (=> b!58552 (= c!7415 (= lt!23513 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38526 () SeekEntryResult!236)

(assert (=> b!58552 (= e!38528 e!38526)))

(declare-fun b!58553 () Bool)

(assert (=> b!58553 (= e!38528 (Found!236 (index!3068 lt!22833)))))

(declare-fun b!58554 () Bool)

(assert (=> b!58554 (= e!38526 (MissingVacant!236 (index!3068 lt!22833)))))

(declare-fun lt!23512 () SeekEntryResult!236)

(declare-fun d!11179 () Bool)

(assert (=> d!11179 (and (or ((_ is Undefined!236) lt!23512) (not ((_ is Found!236) lt!23512)) (and (bvsge (index!3067 lt!23512) #b00000000000000000000000000000000) (bvslt (index!3067 lt!23512) (size!2003 (_keys!3642 newMap!16))))) (or ((_ is Undefined!236) lt!23512) ((_ is Found!236) lt!23512) (not ((_ is MissingVacant!236) lt!23512)) (not (= (index!3069 lt!23512) (index!3068 lt!22833))) (and (bvsge (index!3069 lt!23512) #b00000000000000000000000000000000) (bvslt (index!3069 lt!23512) (size!2003 (_keys!3642 newMap!16))))) (or ((_ is Undefined!236) lt!23512) (ite ((_ is Found!236) lt!23512) (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3067 lt!23512)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (and ((_ is MissingVacant!236) lt!23512) (= (index!3069 lt!23512) (index!3068 lt!22833)) (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3069 lt!23512)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!11179 (= lt!23512 e!38527)))

(declare-fun c!7416 () Bool)

(assert (=> d!11179 (= c!7416 (bvsge (x!9868 lt!22833) #b01111111111111111111111111111110))))

(assert (=> d!11179 (= lt!23513 (select (arr!1774 (_keys!3642 newMap!16)) (index!3068 lt!22833)))))

(assert (=> d!11179 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11179 (= (seekKeyOrZeroReturnVacant!0 (x!9868 lt!22833) (index!3068 lt!22833) (index!3068 lt!22833) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)) lt!23512)))

(declare-fun b!58555 () Bool)

(assert (=> b!58555 (= e!38526 (seekKeyOrZeroReturnVacant!0 (bvadd (x!9868 lt!22833) #b00000000000000000000000000000001) (nextIndex!0 (index!3068 lt!22833) (x!9868 lt!22833) (mask!5896 newMap!16)) (index!3068 lt!22833) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (= (and d!11179 c!7416) b!58551))

(assert (= (and d!11179 (not c!7416)) b!58550))

(assert (= (and b!58550 c!7417) b!58553))

(assert (= (and b!58550 (not c!7417)) b!58552))

(assert (= (and b!58552 c!7415) b!58554))

(assert (= (and b!58552 (not c!7415)) b!58555))

(declare-fun m!50247 () Bool)

(assert (=> d!11179 m!50247))

(declare-fun m!50249 () Bool)

(assert (=> d!11179 m!50249))

(assert (=> d!11179 m!48425))

(assert (=> d!11179 m!48395))

(declare-fun m!50251 () Bool)

(assert (=> b!58555 m!50251))

(assert (=> b!58555 m!50251))

(assert (=> b!58555 m!48105))

(declare-fun m!50253 () Bool)

(assert (=> b!58555 m!50253))

(assert (=> b!57593 d!11179))

(assert (=> b!57871 d!10965))

(assert (=> b!57871 d!10967))

(declare-fun d!11181 () Bool)

(declare-fun e!38529 () Bool)

(assert (=> d!11181 e!38529))

(declare-fun res!32606 () Bool)

(assert (=> d!11181 (=> (not res!32606) (not e!38529))))

(declare-fun lt!23516 () ListLongMap!1373)

(assert (=> d!11181 (= res!32606 (contains!688 lt!23516 (_1!1029 (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(declare-fun lt!23517 () List!1449)

(assert (=> d!11181 (= lt!23516 (ListLongMap!1374 lt!23517))))

(declare-fun lt!23514 () Unit!1488)

(declare-fun lt!23515 () Unit!1488)

(assert (=> d!11181 (= lt!23514 lt!23515)))

(assert (=> d!11181 (= (getValueByKey!122 lt!23517 (_1!1029 (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))) (Some!127 (_2!1029 (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!11181 (= lt!23515 (lemmaContainsTupThenGetReturnValue!41 lt!23517 (_1!1029 (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (_2!1029 (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!11181 (= lt!23517 (insertStrictlySorted!43 (toList!702 (ite c!7183 call!4190 (ite c!7180 call!4189 call!4186))) (_1!1029 (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) (_2!1029 (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))))

(assert (=> d!11181 (= (+!80 (ite c!7183 call!4190 (ite c!7180 call!4189 call!4186)) (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))) lt!23516)))

(declare-fun b!58556 () Bool)

(declare-fun res!32605 () Bool)

(assert (=> b!58556 (=> (not res!32605) (not e!38529))))

(assert (=> b!58556 (= res!32605 (= (getValueByKey!122 (toList!702 lt!23516) (_1!1029 (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))) (Some!127 (_2!1029 (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))))

(declare-fun b!58557 () Bool)

(assert (=> b!58557 (= e!38529 (contains!690 (toList!702 lt!23516) (ite (or c!7183 c!7180) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(assert (= (and d!11181 res!32606) b!58556))

(assert (= (and b!58556 res!32605) b!58557))

(declare-fun m!50255 () Bool)

(assert (=> d!11181 m!50255))

(declare-fun m!50257 () Bool)

(assert (=> d!11181 m!50257))

(declare-fun m!50259 () Bool)

(assert (=> d!11181 m!50259))

(declare-fun m!50261 () Bool)

(assert (=> d!11181 m!50261))

(declare-fun m!50263 () Bool)

(assert (=> b!58556 m!50263))

(declare-fun m!50265 () Bool)

(assert (=> b!58557 m!50265))

(assert (=> bm!4182 d!11181))

(declare-fun d!11183 () Bool)

(assert (=> d!11183 (= (apply!65 lt!22944 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!702 lt!22944) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2545 () Bool)

(assert (= bs!2545 d!11183))

(assert (=> bs!2545 m!49187))

(assert (=> bs!2545 m!49187))

(declare-fun m!50267 () Bool)

(assert (=> bs!2545 m!50267))

(assert (=> b!57712 d!11183))

(declare-fun b!58558 () Bool)

(declare-fun e!38530 () Option!128)

(assert (=> b!58558 (= e!38530 (Some!127 (_2!1029 (h!2025 (toList!702 lt!23088)))))))

(declare-fun d!11185 () Bool)

(declare-fun c!7418 () Bool)

(assert (=> d!11185 (= c!7418 (and ((_ is Cons!1445) (toList!702 lt!23088)) (= (_1!1029 (h!2025 (toList!702 lt!23088))) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(assert (=> d!11185 (= (getValueByKey!122 (toList!702 lt!23088) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))) e!38530)))

(declare-fun b!58561 () Bool)

(declare-fun e!38531 () Option!128)

(assert (=> b!58561 (= e!38531 None!126)))

(declare-fun b!58559 () Bool)

(assert (=> b!58559 (= e!38530 e!38531)))

(declare-fun c!7419 () Bool)

(assert (=> b!58559 (= c!7419 (and ((_ is Cons!1445) (toList!702 lt!23088)) (not (= (_1!1029 (h!2025 (toList!702 lt!23088))) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))))

(declare-fun b!58560 () Bool)

(assert (=> b!58560 (= e!38531 (getValueByKey!122 (t!4775 (toList!702 lt!23088)) (_1!1029 (ite (or c!7082 c!7079) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (= (and d!11185 c!7418) b!58558))

(assert (= (and d!11185 (not c!7418)) b!58559))

(assert (= (and b!58559 c!7419) b!58560))

(assert (= (and b!58559 (not c!7419)) b!58561))

(declare-fun m!50269 () Bool)

(assert (=> b!58560 m!50269))

(assert (=> b!57855 d!11185))

(declare-fun d!11187 () Bool)

(assert (=> d!11187 (isDefined!76 (getValueByKey!122 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700))))

(declare-fun lt!23518 () Unit!1488)

(assert (=> d!11187 (= lt!23518 (choose!298 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700))))

(declare-fun e!38532 () Bool)

(assert (=> d!11187 e!38532))

(declare-fun res!32607 () Bool)

(assert (=> d!11187 (=> (not res!32607) (not e!38532))))

(assert (=> d!11187 (= res!32607 (isStrictlySorted!278 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!11187 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700) lt!23518)))

(declare-fun b!58562 () Bool)

(assert (=> b!58562 (= e!38532 (containsKey!126 (toList!702 (+!80 lt!22702 (tuple2!2039 lt!22684 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) lt!22700))))

(assert (= (and d!11187 res!32607) b!58562))

(assert (=> d!11187 m!48515))

(assert (=> d!11187 m!48515))

(assert (=> d!11187 m!48517))

(declare-fun m!50271 () Bool)

(assert (=> d!11187 m!50271))

(declare-fun m!50273 () Bool)

(assert (=> d!11187 m!50273))

(assert (=> b!58562 m!48511))

(assert (=> b!57612 d!11187))

(assert (=> b!57612 d!10979))

(assert (=> b!57612 d!10981))

(declare-fun d!11189 () Bool)

(assert (=> d!11189 (= (+!80 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!400 (_keys!3642 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(assert (=> d!11189 true))

(declare-fun _$5!59 () Unit!1488)

(assert (=> d!11189 (= (choose!304 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (index!3067 lt!22774) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)) _$5!59)))

(declare-fun bs!2546 () Bool)

(assert (= bs!2546 d!11189))

(assert (=> bs!2546 m!48203))

(assert (=> bs!2546 m!48203))

(assert (=> bs!2546 m!48777))

(assert (=> bs!2546 m!48283))

(assert (=> bs!2546 m!48879))

(assert (=> d!10719 d!11189))

(assert (=> d!10719 d!10735))

(declare-fun d!11191 () Bool)

(assert (=> d!11191 (= (isEmpty!295 (getValueByKey!122 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355))) (not ((_ is Some!127) (getValueByKey!122 (toList!702 lt!22601) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))))

(assert (=> d!10605 d!11191))

(declare-fun d!11193 () Bool)

(declare-fun res!32608 () Bool)

(declare-fun e!38533 () Bool)

(assert (=> d!11193 (=> res!32608 e!38533)))

(assert (=> d!11193 (= res!32608 (and ((_ is Cons!1445) (toList!702 lt!22695)) (= (_1!1029 (h!2025 (toList!702 lt!22695))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11193 (= (containsKey!126 (toList!702 lt!22695) #b1000000000000000000000000000000000000000000000000000000000000000) e!38533)))

(declare-fun b!58563 () Bool)

(declare-fun e!38534 () Bool)

(assert (=> b!58563 (= e!38533 e!38534)))

(declare-fun res!32609 () Bool)

(assert (=> b!58563 (=> (not res!32609) (not e!38534))))

(assert (=> b!58563 (= res!32609 (and (or (not ((_ is Cons!1445) (toList!702 lt!22695))) (bvsle (_1!1029 (h!2025 (toList!702 lt!22695))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1445) (toList!702 lt!22695)) (bvslt (_1!1029 (h!2025 (toList!702 lt!22695))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58564 () Bool)

(assert (=> b!58564 (= e!38534 (containsKey!126 (t!4775 (toList!702 lt!22695)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11193 (not res!32608)) b!58563))

(assert (= (and b!58563 res!32609) b!58564))

(declare-fun m!50275 () Bool)

(assert (=> b!58564 m!50275))

(assert (=> d!10603 d!11193))

(declare-fun d!11195 () Bool)

(declare-fun e!38535 () Bool)

(assert (=> d!11195 e!38535))

(declare-fun res!32611 () Bool)

(assert (=> d!11195 (=> (not res!32611) (not e!38535))))

(declare-fun lt!23521 () ListLongMap!1373)

(assert (=> d!11195 (= res!32611 (contains!688 lt!23521 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23522 () List!1449)

(assert (=> d!11195 (= lt!23521 (ListLongMap!1374 lt!23522))))

(declare-fun lt!23519 () Unit!1488)

(declare-fun lt!23520 () Unit!1488)

(assert (=> d!11195 (= lt!23519 lt!23520)))

(assert (=> d!11195 (= (getValueByKey!122 lt!23522 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11195 (= lt!23520 (lemmaContainsTupThenGetReturnValue!41 lt!23522 (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11195 (= lt!23522 (insertStrictlySorted!43 (toList!702 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11195 (= (+!80 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23521)))

(declare-fun b!58565 () Bool)

(declare-fun res!32610 () Bool)

(assert (=> b!58565 (=> (not res!32610) (not e!38535))))

(assert (=> b!58565 (= res!32610 (= (getValueByKey!122 (toList!702 lt!23521) (_1!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!58566 () Bool)

(assert (=> b!58566 (= e!38535 (contains!690 (toList!702 lt!23521) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11195 res!32611) b!58565))

(assert (= (and b!58565 res!32610) b!58566))

(declare-fun m!50277 () Bool)

(assert (=> d!11195 m!50277))

(declare-fun m!50279 () Bool)

(assert (=> d!11195 m!50279))

(declare-fun m!50281 () Bool)

(assert (=> d!11195 m!50281))

(declare-fun m!50283 () Bool)

(assert (=> d!11195 m!50283))

(declare-fun m!50285 () Bool)

(assert (=> b!58565 m!50285))

(declare-fun m!50287 () Bool)

(assert (=> b!58566 m!50287))

(assert (=> b!57868 d!11195))

(assert (=> b!57868 d!10669))

(declare-fun b!58567 () Bool)

(declare-fun e!38542 () Bool)

(declare-fun call!4289 () Bool)

(assert (=> b!58567 (= e!38542 (not call!4289))))

(declare-fun c!7420 () Bool)

(declare-fun call!4288 () ListLongMap!1373)

(declare-fun call!4292 () ListLongMap!1373)

(declare-fun call!4291 () ListLongMap!1373)

(declare-fun c!7423 () Bool)

(declare-fun bm!4284 () Bool)

(declare-fun call!4290 () ListLongMap!1373)

(assert (=> bm!4284 (= call!4290 (+!80 (ite c!7423 call!4292 (ite c!7420 call!4291 call!4288)) (ite (or c!7423 c!7420) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!58568 () Bool)

(declare-fun res!32615 () Bool)

(declare-fun e!38546 () Bool)

(assert (=> b!58568 (=> (not res!32615) (not e!38546))))

(declare-fun e!38547 () Bool)

(assert (=> b!58568 (= res!32615 e!38547)))

(declare-fun c!7422 () Bool)

(assert (=> b!58568 (= c!7422 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4285 () Bool)

(assert (=> bm!4285 (= call!4288 call!4291)))

(declare-fun b!58569 () Bool)

(declare-fun e!38537 () Bool)

(assert (=> b!58569 (= e!38537 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58570 () Bool)

(declare-fun call!4293 () Bool)

(assert (=> b!58570 (= e!38547 (not call!4293))))

(declare-fun d!11197 () Bool)

(assert (=> d!11197 e!38546))

(declare-fun res!32612 () Bool)

(assert (=> d!11197 (=> (not res!32612) (not e!38546))))

(assert (=> d!11197 (= res!32612 (or (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))))

(declare-fun lt!23537 () ListLongMap!1373)

(declare-fun lt!23528 () ListLongMap!1373)

(assert (=> d!11197 (= lt!23537 lt!23528)))

(declare-fun lt!23532 () Unit!1488)

(declare-fun e!38544 () Unit!1488)

(assert (=> d!11197 (= lt!23532 e!38544)))

(declare-fun c!7424 () Bool)

(assert (=> d!11197 (= c!7424 e!38537)))

(declare-fun res!32619 () Bool)

(assert (=> d!11197 (=> (not res!32619) (not e!38537))))

(assert (=> d!11197 (= res!32619 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun e!38541 () ListLongMap!1373)

(assert (=> d!11197 (= lt!23528 e!38541)))

(assert (=> d!11197 (= c!7423 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11197 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11197 (= (getCurrentListMap!400 (_keys!3642 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23537)))

(declare-fun b!58571 () Bool)

(declare-fun e!38548 () Bool)

(assert (=> b!58571 (= e!38548 (= (apply!65 lt!23537 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun e!38536 () Bool)

(declare-fun b!58572 () Bool)

(assert (=> b!58572 (= e!38536 (= (apply!65 lt!23537 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58572 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))))))

(assert (=> b!58572 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58573 () Bool)

(declare-fun e!38539 () ListLongMap!1373)

(assert (=> b!58573 (= e!38539 call!4288)))

(declare-fun bm!4286 () Bool)

(assert (=> bm!4286 (= call!4292 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58574 () Bool)

(assert (=> b!58574 (= e!38541 (+!80 call!4290 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun b!58575 () Bool)

(assert (=> b!58575 (= e!38542 e!38548)))

(declare-fun res!32613 () Bool)

(assert (=> b!58575 (= res!32613 call!4289)))

(assert (=> b!58575 (=> (not res!32613) (not e!38548))))

(declare-fun bm!4287 () Bool)

(assert (=> bm!4287 (= call!4293 (contains!688 lt!23537 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4288 () Bool)

(assert (=> bm!4288 (= call!4289 (contains!688 lt!23537 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58576 () Bool)

(assert (=> b!58576 (= e!38546 e!38542)))

(declare-fun c!7425 () Bool)

(assert (=> b!58576 (= c!7425 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58577 () Bool)

(declare-fun res!32617 () Bool)

(assert (=> b!58577 (=> (not res!32617) (not e!38546))))

(declare-fun e!38545 () Bool)

(assert (=> b!58577 (= res!32617 e!38545)))

(declare-fun res!32616 () Bool)

(assert (=> b!58577 (=> res!32616 e!38545)))

(declare-fun e!38538 () Bool)

(assert (=> b!58577 (= res!32616 (not e!38538))))

(declare-fun res!32620 () Bool)

(assert (=> b!58577 (=> (not res!32620) (not e!38538))))

(assert (=> b!58577 (= res!32620 (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58578 () Bool)

(assert (=> b!58578 (= e!38545 e!38536)))

(declare-fun res!32614 () Bool)

(assert (=> b!58578 (=> (not res!32614) (not e!38536))))

(assert (=> b!58578 (= res!32614 (contains!688 lt!23537 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!58578 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58579 () Bool)

(declare-fun lt!23538 () Unit!1488)

(assert (=> b!58579 (= e!38544 lt!23538)))

(declare-fun lt!23544 () ListLongMap!1373)

(assert (=> b!58579 (= lt!23544 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23526 () (_ BitVec 64))

(assert (=> b!58579 (= lt!23526 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23542 () (_ BitVec 64))

(assert (=> b!58579 (= lt!23542 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23543 () Unit!1488)

(assert (=> b!58579 (= lt!23543 (addStillContains!41 lt!23544 lt!23526 (zeroValue!1940 newMap!16) lt!23542))))

(assert (=> b!58579 (contains!688 (+!80 lt!23544 (tuple2!2039 lt!23526 (zeroValue!1940 newMap!16))) lt!23542)))

(declare-fun lt!23539 () Unit!1488)

(assert (=> b!58579 (= lt!23539 lt!23543)))

(declare-fun lt!23536 () ListLongMap!1373)

(assert (=> b!58579 (= lt!23536 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23530 () (_ BitVec 64))

(assert (=> b!58579 (= lt!23530 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23523 () (_ BitVec 64))

(assert (=> b!58579 (= lt!23523 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23534 () Unit!1488)

(assert (=> b!58579 (= lt!23534 (addApplyDifferent!41 lt!23536 lt!23530 (minValue!1940 newMap!16) lt!23523))))

(assert (=> b!58579 (= (apply!65 (+!80 lt!23536 (tuple2!2039 lt!23530 (minValue!1940 newMap!16))) lt!23523) (apply!65 lt!23536 lt!23523))))

(declare-fun lt!23527 () Unit!1488)

(assert (=> b!58579 (= lt!23527 lt!23534)))

(declare-fun lt!23524 () ListLongMap!1373)

(assert (=> b!58579 (= lt!23524 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23540 () (_ BitVec 64))

(assert (=> b!58579 (= lt!23540 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23531 () (_ BitVec 64))

(assert (=> b!58579 (= lt!23531 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23535 () Unit!1488)

(assert (=> b!58579 (= lt!23535 (addApplyDifferent!41 lt!23524 lt!23540 (zeroValue!1940 newMap!16) lt!23531))))

(assert (=> b!58579 (= (apply!65 (+!80 lt!23524 (tuple2!2039 lt!23540 (zeroValue!1940 newMap!16))) lt!23531) (apply!65 lt!23524 lt!23531))))

(declare-fun lt!23541 () Unit!1488)

(assert (=> b!58579 (= lt!23541 lt!23535)))

(declare-fun lt!23533 () ListLongMap!1373)

(assert (=> b!58579 (= lt!23533 (getCurrentListMapNoExtraKeys!43 (_keys!3642 newMap!16) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (index!3067 lt!22774) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23529 () (_ BitVec 64))

(assert (=> b!58579 (= lt!23529 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23525 () (_ BitVec 64))

(assert (=> b!58579 (= lt!23525 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58579 (= lt!23538 (addApplyDifferent!41 lt!23533 lt!23529 (minValue!1940 newMap!16) lt!23525))))

(assert (=> b!58579 (= (apply!65 (+!80 lt!23533 (tuple2!2039 lt!23529 (minValue!1940 newMap!16))) lt!23525) (apply!65 lt!23533 lt!23525))))

(declare-fun b!58580 () Bool)

(assert (=> b!58580 (= e!38538 (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!58581 () Bool)

(declare-fun call!4287 () ListLongMap!1373)

(assert (=> b!58581 (= e!38539 call!4287)))

(declare-fun bm!4289 () Bool)

(assert (=> bm!4289 (= call!4287 call!4290)))

(declare-fun bm!4290 () Bool)

(assert (=> bm!4290 (= call!4291 call!4292)))

(declare-fun b!58582 () Bool)

(declare-fun e!38543 () Bool)

(assert (=> b!58582 (= e!38543 (= (apply!65 lt!23537 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!58583 () Bool)

(declare-fun e!38540 () ListLongMap!1373)

(assert (=> b!58583 (= e!38541 e!38540)))

(assert (=> b!58583 (= c!7420 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58584 () Bool)

(assert (=> b!58584 (= e!38540 call!4287)))

(declare-fun b!58585 () Bool)

(assert (=> b!58585 (= e!38547 e!38543)))

(declare-fun res!32618 () Bool)

(assert (=> b!58585 (= res!32618 call!4293)))

(assert (=> b!58585 (=> (not res!32618) (not e!38543))))

(declare-fun b!58586 () Bool)

(declare-fun Unit!1546 () Unit!1488)

(assert (=> b!58586 (= e!38544 Unit!1546)))

(declare-fun b!58587 () Bool)

(declare-fun c!7421 () Bool)

(assert (=> b!58587 (= c!7421 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58587 (= e!38540 e!38539)))

(assert (= (and d!11197 c!7423) b!58574))

(assert (= (and d!11197 (not c!7423)) b!58583))

(assert (= (and b!58583 c!7420) b!58584))

(assert (= (and b!58583 (not c!7420)) b!58587))

(assert (= (and b!58587 c!7421) b!58581))

(assert (= (and b!58587 (not c!7421)) b!58573))

(assert (= (or b!58581 b!58573) bm!4285))

(assert (= (or b!58584 bm!4285) bm!4290))

(assert (= (or b!58584 b!58581) bm!4289))

(assert (= (or b!58574 bm!4290) bm!4286))

(assert (= (or b!58574 bm!4289) bm!4284))

(assert (= (and d!11197 res!32619) b!58569))

(assert (= (and d!11197 c!7424) b!58579))

(assert (= (and d!11197 (not c!7424)) b!58586))

(assert (= (and d!11197 res!32612) b!58577))

(assert (= (and b!58577 res!32620) b!58580))

(assert (= (and b!58577 (not res!32616)) b!58578))

(assert (= (and b!58578 res!32614) b!58572))

(assert (= (and b!58577 res!32617) b!58568))

(assert (= (and b!58568 c!7422) b!58585))

(assert (= (and b!58568 (not c!7422)) b!58570))

(assert (= (and b!58585 res!32618) b!58582))

(assert (= (or b!58585 b!58570) bm!4287))

(assert (= (and b!58568 res!32615) b!58576))

(assert (= (and b!58576 c!7425) b!58575))

(assert (= (and b!58576 (not c!7425)) b!58567))

(assert (= (and b!58575 res!32613) b!58571))

(assert (= (or b!58575 b!58567) bm!4288))

(declare-fun b_lambda!2565 () Bool)

(assert (=> (not b_lambda!2565) (not b!58572)))

(assert (=> b!58572 t!4783))

(declare-fun b_and!3541 () Bool)

(assert (= b_and!3537 (and (=> t!4783 result!2361) b_and!3541)))

(assert (=> b!58572 t!4785))

(declare-fun b_and!3543 () Bool)

(assert (= b_and!3539 (and (=> t!4785 result!2363) b_and!3543)))

(assert (=> b!58572 m!48339))

(declare-fun m!50289 () Bool)

(assert (=> b!58572 m!50289))

(assert (=> b!58572 m!48339))

(declare-fun m!50291 () Bool)

(assert (=> b!58572 m!50291))

(assert (=> b!58572 m!48345))

(assert (=> b!58572 m!50289))

(assert (=> b!58572 m!48345))

(declare-fun m!50293 () Bool)

(assert (=> b!58572 m!50293))

(declare-fun m!50295 () Bool)

(assert (=> bm!4287 m!50295))

(declare-fun m!50297 () Bool)

(assert (=> b!58579 m!50297))

(declare-fun m!50299 () Bool)

(assert (=> b!58579 m!50299))

(declare-fun m!50301 () Bool)

(assert (=> b!58579 m!50301))

(declare-fun m!50303 () Bool)

(assert (=> b!58579 m!50303))

(declare-fun m!50305 () Bool)

(assert (=> b!58579 m!50305))

(assert (=> b!58579 m!50297))

(declare-fun m!50307 () Bool)

(assert (=> b!58579 m!50307))

(declare-fun m!50309 () Bool)

(assert (=> b!58579 m!50309))

(declare-fun m!50311 () Bool)

(assert (=> b!58579 m!50311))

(declare-fun m!50313 () Bool)

(assert (=> b!58579 m!50313))

(assert (=> b!58579 m!48345))

(declare-fun m!50315 () Bool)

(assert (=> b!58579 m!50315))

(declare-fun m!50317 () Bool)

(assert (=> b!58579 m!50317))

(assert (=> b!58579 m!50303))

(declare-fun m!50319 () Bool)

(assert (=> b!58579 m!50319))

(declare-fun m!50321 () Bool)

(assert (=> b!58579 m!50321))

(assert (=> b!58579 m!50311))

(assert (=> b!58579 m!50305))

(declare-fun m!50323 () Bool)

(assert (=> b!58579 m!50323))

(declare-fun m!50325 () Bool)

(assert (=> b!58579 m!50325))

(declare-fun m!50327 () Bool)

(assert (=> b!58579 m!50327))

(assert (=> b!58580 m!48345))

(assert (=> b!58580 m!48345))

(assert (=> b!58580 m!48383))

(assert (=> b!58578 m!48345))

(assert (=> b!58578 m!48345))

(declare-fun m!50329 () Bool)

(assert (=> b!58578 m!50329))

(declare-fun m!50331 () Bool)

(assert (=> bm!4284 m!50331))

(assert (=> bm!4286 m!50299))

(declare-fun m!50333 () Bool)

(assert (=> b!58582 m!50333))

(declare-fun m!50335 () Bool)

(assert (=> b!58571 m!50335))

(declare-fun m!50337 () Bool)

(assert (=> bm!4288 m!50337))

(assert (=> d!11197 m!48395))

(assert (=> b!58569 m!48345))

(assert (=> b!58569 m!48345))

(assert (=> b!58569 m!48383))

(declare-fun m!50339 () Bool)

(assert (=> b!58574 m!50339))

(assert (=> b!57868 d!11197))

(assert (=> d!10669 d!10735))

(declare-fun d!11199 () Bool)

(assert (=> d!11199 (= (apply!65 lt!22905 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!702 lt!22905) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2547 () Bool)

(assert (= bs!2547 d!11199))

(assert (=> bs!2547 m!49249))

(assert (=> bs!2547 m!49249))

(declare-fun m!50341 () Bool)

(assert (=> bs!2547 m!50341))

(assert (=> b!57656 d!11199))

(declare-fun d!11201 () Bool)

(assert (=> d!11201 (= (get!1075 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!57873 d!11201))

(declare-fun b!58588 () Bool)

(declare-fun e!38549 () Option!128)

(assert (=> b!58588 (= e!38549 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22971)))))))

(declare-fun d!11203 () Bool)

(declare-fun c!7426 () Bool)

(assert (=> d!11203 (= c!7426 (and ((_ is Cons!1445) (toList!702 lt!22971)) (= (_1!1029 (h!2025 (toList!702 lt!22971))) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11203 (= (getValueByKey!122 (toList!702 lt!22971) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!38549)))

(declare-fun b!58591 () Bool)

(declare-fun e!38550 () Option!128)

(assert (=> b!58591 (= e!38550 None!126)))

(declare-fun b!58589 () Bool)

(assert (=> b!58589 (= e!38549 e!38550)))

(declare-fun c!7427 () Bool)

(assert (=> b!58589 (= c!7427 (and ((_ is Cons!1445) (toList!702 lt!22971)) (not (= (_1!1029 (h!2025 (toList!702 lt!22971))) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!58590 () Bool)

(assert (=> b!58590 (= e!38550 (getValueByKey!122 (t!4775 (toList!702 lt!22971)) (_1!1029 (ite c!7124 (ite c!7127 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11203 c!7426) b!58588))

(assert (= (and d!11203 (not c!7426)) b!58589))

(assert (= (and b!58589 c!7427) b!58590))

(assert (= (and b!58589 (not c!7427)) b!58591))

(declare-fun m!50343 () Bool)

(assert (=> b!58590 m!50343))

(assert (=> b!57735 d!11203))

(assert (=> d!10707 d!10613))

(declare-fun d!11205 () Bool)

(declare-fun e!38560 () Bool)

(assert (=> d!11205 e!38560))

(declare-fun c!7432 () Bool)

(declare-fun lt!23547 () SeekEntryResult!236)

(assert (=> d!11205 (= c!7432 ((_ is MissingZero!236) lt!23547))))

(assert (=> d!11205 (= lt!23547 (seekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (mask!5896 newMap!16)))))

(assert (=> d!11205 true))

(declare-fun _$34!756 () Unit!1488)

(assert (=> d!11205 (= (choose!302 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (defaultEntry!2022 newMap!16)) _$34!756)))

(declare-fun b!58608 () Bool)

(declare-fun e!38561 () Bool)

(assert (=> b!58608 (= e!38560 e!38561)))

(declare-fun c!7433 () Bool)

(assert (=> b!58608 (= c!7433 ((_ is MissingVacant!236) lt!23547))))

(declare-fun b!58609 () Bool)

(declare-fun e!38562 () Bool)

(declare-fun call!4299 () Bool)

(assert (=> b!58609 (= e!38562 (not call!4299))))

(declare-fun b!58610 () Bool)

(declare-fun res!32631 () Bool)

(assert (=> b!58610 (= res!32631 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3066 lt!23547)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58610 (=> (not res!32631) (not e!38562))))

(declare-fun bm!4295 () Bool)

(assert (=> bm!4295 (= call!4299 (arrayContainsKey!0 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!58611 () Bool)

(declare-fun res!32630 () Bool)

(declare-fun e!38559 () Bool)

(assert (=> b!58611 (=> (not res!32630) (not e!38559))))

(assert (=> b!58611 (= res!32630 (= (select (arr!1774 (_keys!3642 newMap!16)) (index!3069 lt!23547)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58612 () Bool)

(assert (=> b!58612 (= e!38559 (not call!4299))))

(declare-fun b!58613 () Bool)

(assert (=> b!58613 (= e!38560 e!38562)))

(declare-fun res!32629 () Bool)

(declare-fun call!4298 () Bool)

(assert (=> b!58613 (= res!32629 call!4298)))

(assert (=> b!58613 (=> (not res!32629) (not e!38562))))

(declare-fun bm!4296 () Bool)

(assert (=> bm!4296 (= call!4298 (inRange!0 (ite c!7432 (index!3066 lt!23547) (index!3069 lt!23547)) (mask!5896 newMap!16)))))

(declare-fun b!58614 () Bool)

(assert (=> b!58614 (= e!38561 ((_ is Undefined!236) lt!23547))))

(declare-fun b!58615 () Bool)

(declare-fun res!32632 () Bool)

(assert (=> b!58615 (=> (not res!32632) (not e!38559))))

(assert (=> b!58615 (= res!32632 call!4298)))

(assert (=> b!58615 (= e!38561 e!38559)))

(assert (= (and d!11205 c!7432) b!58613))

(assert (= (and d!11205 (not c!7432)) b!58608))

(assert (= (and b!58613 res!32629) b!58610))

(assert (= (and b!58610 res!32631) b!58609))

(assert (= (and b!58608 c!7433) b!58615))

(assert (= (and b!58608 (not c!7433)) b!58614))

(assert (= (and b!58615 res!32632) b!58611))

(assert (= (and b!58611 res!32630) b!58612))

(assert (= (or b!58613 b!58615) bm!4296))

(assert (= (or b!58609 b!58612) bm!4295))

(assert (=> d!11205 m!48105))

(assert (=> d!11205 m!48313))

(declare-fun m!50345 () Bool)

(assert (=> bm!4296 m!50345))

(declare-fun m!50347 () Bool)

(assert (=> b!58610 m!50347))

(assert (=> bm!4295 m!48105))

(assert (=> bm!4295 m!48307))

(declare-fun m!50349 () Bool)

(assert (=> b!58611 m!50349))

(assert (=> d!10707 d!11205))

(assert (=> d!10707 d!10735))

(assert (=> d!10693 d!11195))

(declare-fun d!11207 () Bool)

(declare-fun e!38564 () Bool)

(assert (=> d!11207 e!38564))

(declare-fun res!32633 () Bool)

(assert (=> d!11207 (=> res!32633 e!38564)))

(declare-fun lt!23548 () Bool)

(assert (=> d!11207 (= res!32633 (not lt!23548))))

(declare-fun lt!23549 () Bool)

(assert (=> d!11207 (= lt!23548 lt!23549)))

(declare-fun lt!23551 () Unit!1488)

(declare-fun e!38563 () Unit!1488)

(assert (=> d!11207 (= lt!23551 e!38563)))

(declare-fun c!7434 () Bool)

(assert (=> d!11207 (= c!7434 lt!23549)))

(assert (=> d!11207 (= lt!23549 (containsKey!126 (toList!702 (getCurrentListMap!400 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)))))))

(assert (=> d!11207 (= (contains!688 (getCurrentListMap!400 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)))) lt!23548)))

(declare-fun b!58616 () Bool)

(declare-fun lt!23550 () Unit!1488)

(assert (=> b!58616 (= e!38563 lt!23550)))

(assert (=> b!58616 (= lt!23550 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 (getCurrentListMap!400 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)))))))

(assert (=> b!58616 (isDefined!76 (getValueByKey!122 (toList!702 (getCurrentListMap!400 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)))))))

(declare-fun b!58617 () Bool)

(declare-fun Unit!1547 () Unit!1488)

(assert (=> b!58617 (= e!38563 Unit!1547)))

(declare-fun b!58618 () Bool)

(assert (=> b!58618 (= e!38564 (isDefined!76 (getValueByKey!122 (toList!702 (getCurrentListMap!400 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))) (select (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774))))))))

(assert (= (and d!11207 c!7434) b!58616))

(assert (= (and d!11207 (not c!7434)) b!58617))

(assert (= (and d!11207 (not res!32633)) b!58618))

(assert (=> d!11207 m!48785))

(declare-fun m!50351 () Bool)

(assert (=> d!11207 m!50351))

(assert (=> b!58616 m!48785))

(declare-fun m!50353 () Bool)

(assert (=> b!58616 m!50353))

(assert (=> b!58616 m!48785))

(declare-fun m!50355 () Bool)

(assert (=> b!58616 m!50355))

(assert (=> b!58616 m!50355))

(declare-fun m!50357 () Bool)

(assert (=> b!58616 m!50357))

(assert (=> b!58618 m!48785))

(assert (=> b!58618 m!50355))

(assert (=> b!58618 m!50355))

(assert (=> b!58618 m!50357))

(assert (=> d!10693 d!11207))

(declare-fun d!11209 () Bool)

(declare-fun e!38567 () Bool)

(assert (=> d!11209 e!38567))

(declare-fun res!32636 () Bool)

(assert (=> d!11209 (=> (not res!32636) (not e!38567))))

(assert (=> d!11209 (= res!32636 (and (bvsge (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000000) (bvslt (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (size!2003 (_keys!3642 newMap!16)))))))

(declare-fun lt!23554 () Unit!1488)

(declare-fun choose!41 (array!3706 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1450) Unit!1488)

(assert (=> d!11209 (= lt!23554 (choose!41 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) lt!23037 lt!23049))))

(assert (=> d!11209 (bvslt (size!2003 (_keys!3642 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!11209 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3642 newMap!16) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) lt!23037 lt!23049) lt!23554)))

(declare-fun b!58621 () Bool)

(assert (=> b!58621 (= e!38567 (arrayNoDuplicates!0 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) lt!23037 lt!23049))))

(assert (= (and d!11209 res!32636) b!58621))

(assert (=> d!11209 m!48105))

(declare-fun m!50359 () Bool)

(assert (=> d!11209 m!50359))

(assert (=> b!58621 m!48797))

(assert (=> b!58621 m!48789))

(assert (=> d!10693 d!11209))

(declare-fun b!58622 () Bool)

(declare-fun e!38574 () Bool)

(declare-fun call!4302 () Bool)

(assert (=> b!58622 (= e!38574 (not call!4302))))

(declare-fun c!7438 () Bool)

(declare-fun bm!4297 () Bool)

(declare-fun call!4303 () ListLongMap!1373)

(declare-fun call!4304 () ListLongMap!1373)

(declare-fun call!4305 () ListLongMap!1373)

(declare-fun call!4301 () ListLongMap!1373)

(declare-fun c!7435 () Bool)

(assert (=> bm!4297 (= call!4303 (+!80 (ite c!7438 call!4305 (ite c!7435 call!4304 call!4301)) (ite (or c!7438 c!7435) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!58623 () Bool)

(declare-fun res!32640 () Bool)

(declare-fun e!38578 () Bool)

(assert (=> b!58623 (=> (not res!32640) (not e!38578))))

(declare-fun e!38579 () Bool)

(assert (=> b!58623 (= res!32640 e!38579)))

(declare-fun c!7437 () Bool)

(assert (=> b!58623 (= c!7437 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4298 () Bool)

(assert (=> bm!4298 (= call!4301 call!4304)))

(declare-fun b!58624 () Bool)

(declare-fun e!38569 () Bool)

(assert (=> b!58624 (= e!38569 (validKeyInArray!0 (select (arr!1774 lt!23066) #b00000000000000000000000000000000)))))

(declare-fun b!58625 () Bool)

(declare-fun call!4306 () Bool)

(assert (=> b!58625 (= e!38579 (not call!4306))))

(declare-fun d!11211 () Bool)

(assert (=> d!11211 e!38578))

(declare-fun res!32637 () Bool)

(assert (=> d!11211 (=> (not res!32637) (not e!38578))))

(assert (=> d!11211 (= res!32637 (or (bvsge #b00000000000000000000000000000000 (size!2003 lt!23066)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 lt!23066)))))))

(declare-fun lt!23569 () ListLongMap!1373)

(declare-fun lt!23560 () ListLongMap!1373)

(assert (=> d!11211 (= lt!23569 lt!23560)))

(declare-fun lt!23564 () Unit!1488)

(declare-fun e!38576 () Unit!1488)

(assert (=> d!11211 (= lt!23564 e!38576)))

(declare-fun c!7439 () Bool)

(assert (=> d!11211 (= c!7439 e!38569)))

(declare-fun res!32644 () Bool)

(assert (=> d!11211 (=> (not res!32644) (not e!38569))))

(assert (=> d!11211 (= res!32644 (bvslt #b00000000000000000000000000000000 (size!2003 lt!23066)))))

(declare-fun e!38573 () ListLongMap!1373)

(assert (=> d!11211 (= lt!23560 e!38573)))

(assert (=> d!11211 (= c!7438 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11211 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11211 (= (getCurrentListMap!400 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23569)))

(declare-fun b!58626 () Bool)

(declare-fun e!38580 () Bool)

(assert (=> b!58626 (= e!38580 (= (apply!65 lt!23569 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun b!58627 () Bool)

(declare-fun e!38568 () Bool)

(assert (=> b!58627 (= e!38568 (= (apply!65 lt!23569 (select (arr!1774 lt!23066) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 lt!23061) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58627 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 lt!23061)))))

(assert (=> b!58627 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 lt!23066)))))

(declare-fun b!58628 () Bool)

(declare-fun e!38571 () ListLongMap!1373)

(assert (=> b!58628 (= e!38571 call!4301)))

(declare-fun bm!4299 () Bool)

(assert (=> bm!4299 (= call!4305 (getCurrentListMapNoExtraKeys!43 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58629 () Bool)

(assert (=> b!58629 (= e!38573 (+!80 call!4303 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun b!58630 () Bool)

(assert (=> b!58630 (= e!38574 e!38580)))

(declare-fun res!32638 () Bool)

(assert (=> b!58630 (= res!32638 call!4302)))

(assert (=> b!58630 (=> (not res!32638) (not e!38580))))

(declare-fun bm!4300 () Bool)

(assert (=> bm!4300 (= call!4306 (contains!688 lt!23569 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4301 () Bool)

(assert (=> bm!4301 (= call!4302 (contains!688 lt!23569 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58631 () Bool)

(assert (=> b!58631 (= e!38578 e!38574)))

(declare-fun c!7440 () Bool)

(assert (=> b!58631 (= c!7440 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58632 () Bool)

(declare-fun res!32642 () Bool)

(assert (=> b!58632 (=> (not res!32642) (not e!38578))))

(declare-fun e!38577 () Bool)

(assert (=> b!58632 (= res!32642 e!38577)))

(declare-fun res!32641 () Bool)

(assert (=> b!58632 (=> res!32641 e!38577)))

(declare-fun e!38570 () Bool)

(assert (=> b!58632 (= res!32641 (not e!38570))))

(declare-fun res!32645 () Bool)

(assert (=> b!58632 (=> (not res!32645) (not e!38570))))

(assert (=> b!58632 (= res!32645 (bvslt #b00000000000000000000000000000000 (size!2003 lt!23066)))))

(declare-fun b!58633 () Bool)

(assert (=> b!58633 (= e!38577 e!38568)))

(declare-fun res!32639 () Bool)

(assert (=> b!58633 (=> (not res!32639) (not e!38568))))

(assert (=> b!58633 (= res!32639 (contains!688 lt!23569 (select (arr!1774 lt!23066) #b00000000000000000000000000000000)))))

(assert (=> b!58633 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 lt!23066)))))

(declare-fun b!58634 () Bool)

(declare-fun lt!23570 () Unit!1488)

(assert (=> b!58634 (= e!38576 lt!23570)))

(declare-fun lt!23576 () ListLongMap!1373)

(assert (=> b!58634 (= lt!23576 (getCurrentListMapNoExtraKeys!43 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23558 () (_ BitVec 64))

(assert (=> b!58634 (= lt!23558 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23574 () (_ BitVec 64))

(assert (=> b!58634 (= lt!23574 (select (arr!1774 lt!23066) #b00000000000000000000000000000000))))

(declare-fun lt!23575 () Unit!1488)

(assert (=> b!58634 (= lt!23575 (addStillContains!41 lt!23576 lt!23558 (zeroValue!1940 newMap!16) lt!23574))))

(assert (=> b!58634 (contains!688 (+!80 lt!23576 (tuple2!2039 lt!23558 (zeroValue!1940 newMap!16))) lt!23574)))

(declare-fun lt!23571 () Unit!1488)

(assert (=> b!58634 (= lt!23571 lt!23575)))

(declare-fun lt!23568 () ListLongMap!1373)

(assert (=> b!58634 (= lt!23568 (getCurrentListMapNoExtraKeys!43 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23562 () (_ BitVec 64))

(assert (=> b!58634 (= lt!23562 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23555 () (_ BitVec 64))

(assert (=> b!58634 (= lt!23555 (select (arr!1774 lt!23066) #b00000000000000000000000000000000))))

(declare-fun lt!23566 () Unit!1488)

(assert (=> b!58634 (= lt!23566 (addApplyDifferent!41 lt!23568 lt!23562 (minValue!1940 newMap!16) lt!23555))))

(assert (=> b!58634 (= (apply!65 (+!80 lt!23568 (tuple2!2039 lt!23562 (minValue!1940 newMap!16))) lt!23555) (apply!65 lt!23568 lt!23555))))

(declare-fun lt!23559 () Unit!1488)

(assert (=> b!58634 (= lt!23559 lt!23566)))

(declare-fun lt!23556 () ListLongMap!1373)

(assert (=> b!58634 (= lt!23556 (getCurrentListMapNoExtraKeys!43 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23572 () (_ BitVec 64))

(assert (=> b!58634 (= lt!23572 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23563 () (_ BitVec 64))

(assert (=> b!58634 (= lt!23563 (select (arr!1774 lt!23066) #b00000000000000000000000000000000))))

(declare-fun lt!23567 () Unit!1488)

(assert (=> b!58634 (= lt!23567 (addApplyDifferent!41 lt!23556 lt!23572 (zeroValue!1940 newMap!16) lt!23563))))

(assert (=> b!58634 (= (apply!65 (+!80 lt!23556 (tuple2!2039 lt!23572 (zeroValue!1940 newMap!16))) lt!23563) (apply!65 lt!23556 lt!23563))))

(declare-fun lt!23573 () Unit!1488)

(assert (=> b!58634 (= lt!23573 lt!23567)))

(declare-fun lt!23565 () ListLongMap!1373)

(assert (=> b!58634 (= lt!23565 (getCurrentListMapNoExtraKeys!43 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23561 () (_ BitVec 64))

(assert (=> b!58634 (= lt!23561 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23557 () (_ BitVec 64))

(assert (=> b!58634 (= lt!23557 (select (arr!1774 lt!23066) #b00000000000000000000000000000000))))

(assert (=> b!58634 (= lt!23570 (addApplyDifferent!41 lt!23565 lt!23561 (minValue!1940 newMap!16) lt!23557))))

(assert (=> b!58634 (= (apply!65 (+!80 lt!23565 (tuple2!2039 lt!23561 (minValue!1940 newMap!16))) lt!23557) (apply!65 lt!23565 lt!23557))))

(declare-fun b!58635 () Bool)

(assert (=> b!58635 (= e!38570 (validKeyInArray!0 (select (arr!1774 lt!23066) #b00000000000000000000000000000000)))))

(declare-fun b!58636 () Bool)

(declare-fun call!4300 () ListLongMap!1373)

(assert (=> b!58636 (= e!38571 call!4300)))

(declare-fun bm!4302 () Bool)

(assert (=> bm!4302 (= call!4300 call!4303)))

(declare-fun bm!4303 () Bool)

(assert (=> bm!4303 (= call!4304 call!4305)))

(declare-fun b!58637 () Bool)

(declare-fun e!38575 () Bool)

(assert (=> b!58637 (= e!38575 (= (apply!65 lt!23569 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!58638 () Bool)

(declare-fun e!38572 () ListLongMap!1373)

(assert (=> b!58638 (= e!38573 e!38572)))

(assert (=> b!58638 (= c!7435 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58639 () Bool)

(assert (=> b!58639 (= e!38572 call!4300)))

(declare-fun b!58640 () Bool)

(assert (=> b!58640 (= e!38579 e!38575)))

(declare-fun res!32643 () Bool)

(assert (=> b!58640 (= res!32643 call!4306)))

(assert (=> b!58640 (=> (not res!32643) (not e!38575))))

(declare-fun b!58641 () Bool)

(declare-fun Unit!1548 () Unit!1488)

(assert (=> b!58641 (= e!38576 Unit!1548)))

(declare-fun b!58642 () Bool)

(declare-fun c!7436 () Bool)

(assert (=> b!58642 (= c!7436 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58642 (= e!38572 e!38571)))

(assert (= (and d!11211 c!7438) b!58629))

(assert (= (and d!11211 (not c!7438)) b!58638))

(assert (= (and b!58638 c!7435) b!58639))

(assert (= (and b!58638 (not c!7435)) b!58642))

(assert (= (and b!58642 c!7436) b!58636))

(assert (= (and b!58642 (not c!7436)) b!58628))

(assert (= (or b!58636 b!58628) bm!4298))

(assert (= (or b!58639 bm!4298) bm!4303))

(assert (= (or b!58639 b!58636) bm!4302))

(assert (= (or b!58629 bm!4303) bm!4299))

(assert (= (or b!58629 bm!4302) bm!4297))

(assert (= (and d!11211 res!32644) b!58624))

(assert (= (and d!11211 c!7439) b!58634))

(assert (= (and d!11211 (not c!7439)) b!58641))

(assert (= (and d!11211 res!32637) b!58632))

(assert (= (and b!58632 res!32645) b!58635))

(assert (= (and b!58632 (not res!32641)) b!58633))

(assert (= (and b!58633 res!32639) b!58627))

(assert (= (and b!58632 res!32642) b!58623))

(assert (= (and b!58623 c!7437) b!58640))

(assert (= (and b!58623 (not c!7437)) b!58625))

(assert (= (and b!58640 res!32643) b!58637))

(assert (= (or b!58640 b!58625) bm!4300))

(assert (= (and b!58623 res!32640) b!58631))

(assert (= (and b!58631 c!7440) b!58630))

(assert (= (and b!58631 (not c!7440)) b!58622))

(assert (= (and b!58630 res!32638) b!58626))

(assert (= (or b!58630 b!58622) bm!4301))

(declare-fun b_lambda!2567 () Bool)

(assert (=> (not b_lambda!2567) (not b!58627)))

(assert (=> b!58627 t!4783))

(declare-fun b_and!3545 () Bool)

(assert (= b_and!3541 (and (=> t!4783 result!2361) b_and!3545)))

(assert (=> b!58627 t!4785))

(declare-fun b_and!3547 () Bool)

(assert (= b_and!3543 (and (=> t!4785 result!2363) b_and!3547)))

(assert (=> b!58627 m!48339))

(declare-fun m!50361 () Bool)

(assert (=> b!58627 m!50361))

(assert (=> b!58627 m!48339))

(declare-fun m!50363 () Bool)

(assert (=> b!58627 m!50363))

(declare-fun m!50365 () Bool)

(assert (=> b!58627 m!50365))

(assert (=> b!58627 m!50361))

(assert (=> b!58627 m!50365))

(declare-fun m!50367 () Bool)

(assert (=> b!58627 m!50367))

(declare-fun m!50369 () Bool)

(assert (=> bm!4300 m!50369))

(declare-fun m!50371 () Bool)

(assert (=> b!58634 m!50371))

(declare-fun m!50373 () Bool)

(assert (=> b!58634 m!50373))

(declare-fun m!50375 () Bool)

(assert (=> b!58634 m!50375))

(declare-fun m!50377 () Bool)

(assert (=> b!58634 m!50377))

(declare-fun m!50379 () Bool)

(assert (=> b!58634 m!50379))

(assert (=> b!58634 m!50371))

(declare-fun m!50381 () Bool)

(assert (=> b!58634 m!50381))

(declare-fun m!50383 () Bool)

(assert (=> b!58634 m!50383))

(declare-fun m!50385 () Bool)

(assert (=> b!58634 m!50385))

(declare-fun m!50387 () Bool)

(assert (=> b!58634 m!50387))

(assert (=> b!58634 m!50365))

(declare-fun m!50389 () Bool)

(assert (=> b!58634 m!50389))

(declare-fun m!50391 () Bool)

(assert (=> b!58634 m!50391))

(assert (=> b!58634 m!50377))

(declare-fun m!50393 () Bool)

(assert (=> b!58634 m!50393))

(declare-fun m!50395 () Bool)

(assert (=> b!58634 m!50395))

(assert (=> b!58634 m!50385))

(assert (=> b!58634 m!50379))

(declare-fun m!50397 () Bool)

(assert (=> b!58634 m!50397))

(declare-fun m!50399 () Bool)

(assert (=> b!58634 m!50399))

(declare-fun m!50401 () Bool)

(assert (=> b!58634 m!50401))

(assert (=> b!58635 m!50365))

(assert (=> b!58635 m!50365))

(declare-fun m!50403 () Bool)

(assert (=> b!58635 m!50403))

(assert (=> b!58633 m!50365))

(assert (=> b!58633 m!50365))

(declare-fun m!50405 () Bool)

(assert (=> b!58633 m!50405))

(declare-fun m!50407 () Bool)

(assert (=> bm!4297 m!50407))

(assert (=> bm!4299 m!50373))

(declare-fun m!50409 () Bool)

(assert (=> b!58637 m!50409))

(declare-fun m!50411 () Bool)

(assert (=> b!58626 m!50411))

(declare-fun m!50413 () Bool)

(assert (=> bm!4301 m!50413))

(assert (=> d!11211 m!48395))

(assert (=> b!58624 m!50365))

(assert (=> b!58624 m!50365))

(assert (=> b!58624 m!50403))

(declare-fun m!50415 () Bool)

(assert (=> b!58629 m!50415))

(assert (=> d!10693 d!11211))

(assert (=> d!10693 d!10721))

(assert (=> d!10693 d!10583))

(assert (=> d!10693 d!10655))

(declare-fun d!11213 () Bool)

(assert (=> d!11213 (= (arrayCountValidKeys!0 lt!23043 (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (bvadd (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!23579 () Unit!1488)

(declare-fun choose!2 (array!3706 (_ BitVec 32)) Unit!1488)

(assert (=> d!11213 (= lt!23579 (choose!2 lt!23043 (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774))))))

(declare-fun e!38583 () Bool)

(assert (=> d!11213 e!38583))

(declare-fun res!32650 () Bool)

(assert (=> d!11213 (=> (not res!32650) (not e!38583))))

(assert (=> d!11213 (= res!32650 (and (bvsge (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000000) (bvslt (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (size!2003 lt!23043))))))

(assert (=> d!11213 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!23043 (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774))) lt!23579)))

(declare-fun b!58647 () Bool)

(declare-fun res!32651 () Bool)

(assert (=> b!58647 (=> (not res!32651) (not e!38583))))

(assert (=> b!58647 (= res!32651 (validKeyInArray!0 (select (arr!1774 lt!23043) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)))))))

(declare-fun b!58648 () Bool)

(assert (=> b!58648 (= e!38583 (bvslt (size!2003 lt!23043) #b01111111111111111111111111111111))))

(assert (= (and d!11213 res!32650) b!58647))

(assert (= (and b!58647 res!32651) b!58648))

(assert (=> d!11213 m!48803))

(declare-fun m!50417 () Bool)

(assert (=> d!11213 m!50417))

(declare-fun m!50419 () Bool)

(assert (=> b!58647 m!50419))

(assert (=> b!58647 m!50419))

(declare-fun m!50421 () Bool)

(assert (=> b!58647 m!50421))

(assert (=> d!10693 d!11213))

(assert (=> d!10693 d!10657))

(declare-fun d!11215 () Bool)

(declare-fun res!32652 () Bool)

(declare-fun e!38584 () Bool)

(assert (=> d!11215 (=> res!32652 e!38584)))

(assert (=> d!11215 (= res!32652 (= (select (arr!1774 lt!23039) #b00000000000000000000000000000000) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!11215 (= (arrayContainsKey!0 lt!23039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000) e!38584)))

(declare-fun b!58649 () Bool)

(declare-fun e!38585 () Bool)

(assert (=> b!58649 (= e!38584 e!38585)))

(declare-fun res!32653 () Bool)

(assert (=> b!58649 (=> (not res!32653) (not e!38585))))

(assert (=> b!58649 (= res!32653 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 lt!23039)))))

(declare-fun b!58650 () Bool)

(assert (=> b!58650 (= e!38585 (arrayContainsKey!0 lt!23039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!11215 (not res!32652)) b!58649))

(assert (= (and b!58649 res!32653) b!58650))

(declare-fun m!50423 () Bool)

(assert (=> d!11215 m!50423))

(assert (=> b!58650 m!48105))

(declare-fun m!50425 () Bool)

(assert (=> b!58650 m!50425))

(assert (=> d!10693 d!11215))

(declare-fun b!58651 () Bool)

(declare-fun e!38586 () (_ BitVec 32))

(declare-fun call!4307 () (_ BitVec 32))

(assert (=> b!58651 (= e!38586 (bvadd #b00000000000000000000000000000001 call!4307))))

(declare-fun b!58652 () Bool)

(assert (=> b!58652 (= e!38586 call!4307)))

(declare-fun bm!4304 () Bool)

(assert (=> bm!4304 (= call!4307 (arrayCountValidKeys!0 lt!23043 (bvadd (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000001) (bvadd (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000001)))))

(declare-fun b!58653 () Bool)

(declare-fun e!38587 () (_ BitVec 32))

(assert (=> b!58653 (= e!38587 #b00000000000000000000000000000000)))

(declare-fun b!58654 () Bool)

(assert (=> b!58654 (= e!38587 e!38586)))

(declare-fun c!7441 () Bool)

(assert (=> b!58654 (= c!7441 (validKeyInArray!0 (select (arr!1774 lt!23043) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)))))))

(declare-fun lt!23580 () (_ BitVec 32))

(declare-fun d!11217 () Bool)

(assert (=> d!11217 (and (bvsge lt!23580 #b00000000000000000000000000000000) (bvsle lt!23580 (bvsub (size!2003 lt!23043) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)))))))

(assert (=> d!11217 (= lt!23580 e!38587)))

(declare-fun c!7442 () Bool)

(assert (=> d!11217 (= c!7442 (bvsge (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (bvadd (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000001)))))

(assert (=> d!11217 (and (bvsle (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (bvadd (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000001)) (bvsge (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000001) (size!2003 lt!23043)))))

(assert (=> d!11217 (= (arrayCountValidKeys!0 lt!23043 (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (bvadd (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000001)) lt!23580)))

(assert (= (and d!11217 c!7442) b!58653))

(assert (= (and d!11217 (not c!7442)) b!58654))

(assert (= (and b!58654 c!7441) b!58651))

(assert (= (and b!58654 (not c!7441)) b!58652))

(assert (= (or b!58651 b!58652) bm!4304))

(declare-fun m!50427 () Bool)

(assert (=> bm!4304 m!50427))

(assert (=> b!58654 m!50419))

(assert (=> b!58654 m!50419))

(assert (=> b!58654 m!50421))

(assert (=> d!10693 d!11217))

(declare-fun b!58655 () Bool)

(declare-fun e!38589 () Bool)

(declare-fun call!4308 () Bool)

(assert (=> b!58655 (= e!38589 call!4308)))

(declare-fun b!58656 () Bool)

(declare-fun e!38591 () Bool)

(declare-fun e!38590 () Bool)

(assert (=> b!58656 (= e!38591 e!38590)))

(declare-fun res!32655 () Bool)

(assert (=> b!58656 (=> (not res!32655) (not e!38590))))

(declare-fun e!38588 () Bool)

(assert (=> b!58656 (= res!32655 (not e!38588))))

(declare-fun res!32654 () Bool)

(assert (=> b!58656 (=> (not res!32654) (not e!38588))))

(assert (=> b!58656 (= res!32654 (validKeyInArray!0 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) lt!23037)))))

(declare-fun d!11219 () Bool)

(declare-fun res!32656 () Bool)

(assert (=> d!11219 (=> res!32656 e!38591)))

(assert (=> d!11219 (= res!32656 (bvsge lt!23037 (size!2003 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))))))

(assert (=> d!11219 (= (arrayNoDuplicates!0 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) lt!23037 lt!23049) e!38591)))

(declare-fun b!58657 () Bool)

(assert (=> b!58657 (= e!38589 call!4308)))

(declare-fun b!58658 () Bool)

(assert (=> b!58658 (= e!38590 e!38589)))

(declare-fun c!7443 () Bool)

(assert (=> b!58658 (= c!7443 (validKeyInArray!0 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) lt!23037)))))

(declare-fun b!58659 () Bool)

(assert (=> b!58659 (= e!38588 (contains!689 lt!23049 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) lt!23037)))))

(declare-fun bm!4305 () Bool)

(assert (=> bm!4305 (= call!4308 (arrayNoDuplicates!0 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (bvadd lt!23037 #b00000000000000000000000000000001) (ite c!7443 (Cons!1446 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) lt!23037) lt!23049) lt!23049)))))

(assert (= (and d!11219 (not res!32656)) b!58656))

(assert (= (and b!58656 res!32654) b!58659))

(assert (= (and b!58656 res!32655) b!58658))

(assert (= (and b!58658 c!7443) b!58657))

(assert (= (and b!58658 (not c!7443)) b!58655))

(assert (= (or b!58657 b!58655) bm!4305))

(declare-fun m!50429 () Bool)

(assert (=> b!58656 m!50429))

(assert (=> b!58656 m!50429))

(declare-fun m!50431 () Bool)

(assert (=> b!58656 m!50431))

(assert (=> b!58658 m!50429))

(assert (=> b!58658 m!50429))

(assert (=> b!58658 m!50431))

(assert (=> b!58659 m!50429))

(assert (=> b!58659 m!50429))

(declare-fun m!50433 () Bool)

(assert (=> b!58659 m!50433))

(assert (=> bm!4305 m!50429))

(declare-fun m!50435 () Bool)

(assert (=> bm!4305 m!50435))

(assert (=> d!10693 d!11219))

(declare-fun d!11221 () Bool)

(declare-fun e!38594 () Bool)

(assert (=> d!11221 e!38594))

(declare-fun res!32659 () Bool)

(assert (=> d!11221 (=> (not res!32659) (not e!38594))))

(assert (=> d!11221 (= res!32659 (and (bvsge (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000000) (bvslt (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (size!2003 (_keys!3642 newMap!16)))))))

(declare-fun lt!23583 () Unit!1488)

(declare-fun choose!102 ((_ BitVec 64) array!3706 (_ BitVec 32) (_ BitVec 32)) Unit!1488)

(assert (=> d!11221 (= lt!23583 (choose!102 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (mask!5896 newMap!16)))))

(assert (=> d!11221 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11221 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (_keys!3642 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (mask!5896 newMap!16)) lt!23583)))

(declare-fun b!58662 () Bool)

(assert (=> b!58662 (= e!38594 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (mask!5896 newMap!16)))))

(assert (= (and d!11221 res!32659) b!58662))

(assert (=> d!11221 m!48105))

(declare-fun m!50437 () Bool)

(assert (=> d!11221 m!50437))

(assert (=> d!11221 m!48395))

(assert (=> b!58662 m!48797))

(assert (=> b!58662 m!48805))

(assert (=> d!10693 d!11221))

(declare-fun b!58663 () Bool)

(declare-fun e!38601 () Bool)

(declare-fun call!4311 () Bool)

(assert (=> b!58663 (= e!38601 (not call!4311))))

(declare-fun c!7447 () Bool)

(declare-fun call!4314 () ListLongMap!1373)

(declare-fun bm!4306 () Bool)

(declare-fun call!4310 () ListLongMap!1373)

(declare-fun c!7444 () Bool)

(declare-fun call!4313 () ListLongMap!1373)

(declare-fun call!4312 () ListLongMap!1373)

(assert (=> bm!4306 (= call!4312 (+!80 (ite c!7447 call!4314 (ite c!7444 call!4313 call!4310)) (ite (or c!7447 c!7444) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1940 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16)))))))

(declare-fun b!58664 () Bool)

(declare-fun res!32663 () Bool)

(declare-fun e!38605 () Bool)

(assert (=> b!58664 (=> (not res!32663) (not e!38605))))

(declare-fun e!38606 () Bool)

(assert (=> b!58664 (= res!32663 e!38606)))

(declare-fun c!7446 () Bool)

(assert (=> b!58664 (= c!7446 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4307 () Bool)

(assert (=> bm!4307 (= call!4310 call!4313)))

(declare-fun b!58665 () Bool)

(declare-fun e!38596 () Bool)

(assert (=> b!58665 (= e!38596 (validKeyInArray!0 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!58666 () Bool)

(declare-fun call!4315 () Bool)

(assert (=> b!58666 (= e!38606 (not call!4315))))

(declare-fun d!11223 () Bool)

(assert (=> d!11223 e!38605))

(declare-fun res!32660 () Bool)

(assert (=> d!11223 (=> (not res!32660) (not e!38605))))

(assert (=> d!11223 (= res!32660 (or (bvsge #b00000000000000000000000000000000 (size!2003 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))))))))

(declare-fun lt!23598 () ListLongMap!1373)

(declare-fun lt!23589 () ListLongMap!1373)

(assert (=> d!11223 (= lt!23598 lt!23589)))

(declare-fun lt!23593 () Unit!1488)

(declare-fun e!38603 () Unit!1488)

(assert (=> d!11223 (= lt!23593 e!38603)))

(declare-fun c!7448 () Bool)

(assert (=> d!11223 (= c!7448 e!38596)))

(declare-fun res!32667 () Bool)

(assert (=> d!11223 (=> (not res!32667) (not e!38596))))

(assert (=> d!11223 (= res!32667 (bvslt #b00000000000000000000000000000000 (size!2003 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))))))

(declare-fun e!38600 () ListLongMap!1373)

(assert (=> d!11223 (= lt!23589 e!38600)))

(assert (=> d!11223 (= c!7447 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11223 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11223 (= (getCurrentListMap!400 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) lt!23598)))

(declare-fun b!58667 () Bool)

(declare-fun e!38607 () Bool)

(assert (=> b!58667 (= e!38607 (= (apply!65 lt!23598 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1940 newMap!16)))))

(declare-fun e!38595 () Bool)

(declare-fun b!58668 () Bool)

(assert (=> b!58668 (= e!38595 (= (apply!65 lt!23598 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)) (get!1073 (select (arr!1775 (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!310 (defaultEntry!2022 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58668 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2004 (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))))))))

(assert (=> b!58668 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))))))

(declare-fun b!58669 () Bool)

(declare-fun e!38598 () ListLongMap!1373)

(assert (=> b!58669 (= e!38598 call!4310)))

(declare-fun bm!4308 () Bool)

(assert (=> bm!4308 (= call!4314 (getCurrentListMapNoExtraKeys!43 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun b!58670 () Bool)

(assert (=> b!58670 (= e!38600 (+!80 call!4312 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1940 newMap!16))))))

(declare-fun b!58671 () Bool)

(assert (=> b!58671 (= e!38601 e!38607)))

(declare-fun res!32661 () Bool)

(assert (=> b!58671 (= res!32661 call!4311)))

(assert (=> b!58671 (=> (not res!32661) (not e!38607))))

(declare-fun bm!4309 () Bool)

(assert (=> bm!4309 (= call!4315 (contains!688 lt!23598 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4310 () Bool)

(assert (=> bm!4310 (= call!4311 (contains!688 lt!23598 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58672 () Bool)

(assert (=> b!58672 (= e!38605 e!38601)))

(declare-fun c!7449 () Bool)

(assert (=> b!58672 (= c!7449 (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58673 () Bool)

(declare-fun res!32665 () Bool)

(assert (=> b!58673 (=> (not res!32665) (not e!38605))))

(declare-fun e!38604 () Bool)

(assert (=> b!58673 (= res!32665 e!38604)))

(declare-fun res!32664 () Bool)

(assert (=> b!58673 (=> res!32664 e!38604)))

(declare-fun e!38597 () Bool)

(assert (=> b!58673 (= res!32664 (not e!38597))))

(declare-fun res!32668 () Bool)

(assert (=> b!58673 (=> (not res!32668) (not e!38597))))

(assert (=> b!58673 (= res!32668 (bvslt #b00000000000000000000000000000000 (size!2003 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))))))

(declare-fun b!58674 () Bool)

(assert (=> b!58674 (= e!38604 e!38595)))

(declare-fun res!32662 () Bool)

(assert (=> b!58674 (=> (not res!32662) (not e!38595))))

(assert (=> b!58674 (= res!32662 (contains!688 lt!23598 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!58674 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))))))

(declare-fun b!58675 () Bool)

(declare-fun lt!23599 () Unit!1488)

(assert (=> b!58675 (= e!38603 lt!23599)))

(declare-fun lt!23605 () ListLongMap!1373)

(assert (=> b!58675 (= lt!23605 (getCurrentListMapNoExtraKeys!43 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23587 () (_ BitVec 64))

(assert (=> b!58675 (= lt!23587 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23603 () (_ BitVec 64))

(assert (=> b!58675 (= lt!23603 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23604 () Unit!1488)

(assert (=> b!58675 (= lt!23604 (addStillContains!41 lt!23605 lt!23587 (zeroValue!1940 newMap!16) lt!23603))))

(assert (=> b!58675 (contains!688 (+!80 lt!23605 (tuple2!2039 lt!23587 (zeroValue!1940 newMap!16))) lt!23603)))

(declare-fun lt!23600 () Unit!1488)

(assert (=> b!58675 (= lt!23600 lt!23604)))

(declare-fun lt!23597 () ListLongMap!1373)

(assert (=> b!58675 (= lt!23597 (getCurrentListMapNoExtraKeys!43 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23591 () (_ BitVec 64))

(assert (=> b!58675 (= lt!23591 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23584 () (_ BitVec 64))

(assert (=> b!58675 (= lt!23584 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23595 () Unit!1488)

(assert (=> b!58675 (= lt!23595 (addApplyDifferent!41 lt!23597 lt!23591 (minValue!1940 newMap!16) lt!23584))))

(assert (=> b!58675 (= (apply!65 (+!80 lt!23597 (tuple2!2039 lt!23591 (minValue!1940 newMap!16))) lt!23584) (apply!65 lt!23597 lt!23584))))

(declare-fun lt!23588 () Unit!1488)

(assert (=> b!58675 (= lt!23588 lt!23595)))

(declare-fun lt!23585 () ListLongMap!1373)

(assert (=> b!58675 (= lt!23585 (getCurrentListMapNoExtraKeys!43 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23601 () (_ BitVec 64))

(assert (=> b!58675 (= lt!23601 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23592 () (_ BitVec 64))

(assert (=> b!58675 (= lt!23592 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23596 () Unit!1488)

(assert (=> b!58675 (= lt!23596 (addApplyDifferent!41 lt!23585 lt!23601 (zeroValue!1940 newMap!16) lt!23592))))

(assert (=> b!58675 (= (apply!65 (+!80 lt!23585 (tuple2!2039 lt!23601 (zeroValue!1940 newMap!16))) lt!23592) (apply!65 lt!23585 lt!23592))))

(declare-fun lt!23602 () Unit!1488)

(assert (=> b!58675 (= lt!23602 lt!23596)))

(declare-fun lt!23594 () ListLongMap!1373)

(assert (=> b!58675 (= lt!23594 (getCurrentListMapNoExtraKeys!43 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)))))

(declare-fun lt!23590 () (_ BitVec 64))

(assert (=> b!58675 (= lt!23590 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23586 () (_ BitVec 64))

(assert (=> b!58675 (= lt!23586 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!58675 (= lt!23599 (addApplyDifferent!41 lt!23594 lt!23590 (minValue!1940 newMap!16) lt!23586))))

(assert (=> b!58675 (= (apply!65 (+!80 lt!23594 (tuple2!2039 lt!23590 (minValue!1940 newMap!16))) lt!23586) (apply!65 lt!23594 lt!23586))))

(declare-fun b!58676 () Bool)

(assert (=> b!58676 (= e!38597 (validKeyInArray!0 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!58677 () Bool)

(declare-fun call!4309 () ListLongMap!1373)

(assert (=> b!58677 (= e!38598 call!4309)))

(declare-fun bm!4311 () Bool)

(assert (=> bm!4311 (= call!4309 call!4312)))

(declare-fun bm!4312 () Bool)

(assert (=> bm!4312 (= call!4313 call!4314)))

(declare-fun b!58678 () Bool)

(declare-fun e!38602 () Bool)

(assert (=> b!58678 (= e!38602 (= (apply!65 lt!23598 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1940 newMap!16)))))

(declare-fun b!58679 () Bool)

(declare-fun e!38599 () ListLongMap!1373)

(assert (=> b!58679 (= e!38600 e!38599)))

(assert (=> b!58679 (= c!7444 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58680 () Bool)

(assert (=> b!58680 (= e!38599 call!4309)))

(declare-fun b!58681 () Bool)

(assert (=> b!58681 (= e!38606 e!38602)))

(declare-fun res!32666 () Bool)

(assert (=> b!58681 (= res!32666 call!4315)))

(assert (=> b!58681 (=> (not res!32666) (not e!38602))))

(declare-fun b!58682 () Bool)

(declare-fun Unit!1549 () Unit!1488)

(assert (=> b!58682 (= e!38603 Unit!1549)))

(declare-fun b!58683 () Bool)

(declare-fun c!7445 () Bool)

(assert (=> b!58683 (= c!7445 (and (not (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1913 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!58683 (= e!38599 e!38598)))

(assert (= (and d!11223 c!7447) b!58670))

(assert (= (and d!11223 (not c!7447)) b!58679))

(assert (= (and b!58679 c!7444) b!58680))

(assert (= (and b!58679 (not c!7444)) b!58683))

(assert (= (and b!58683 c!7445) b!58677))

(assert (= (and b!58683 (not c!7445)) b!58669))

(assert (= (or b!58677 b!58669) bm!4307))

(assert (= (or b!58680 bm!4307) bm!4312))

(assert (= (or b!58680 b!58677) bm!4311))

(assert (= (or b!58670 bm!4312) bm!4308))

(assert (= (or b!58670 bm!4311) bm!4306))

(assert (= (and d!11223 res!32667) b!58665))

(assert (= (and d!11223 c!7448) b!58675))

(assert (= (and d!11223 (not c!7448)) b!58682))

(assert (= (and d!11223 res!32660) b!58673))

(assert (= (and b!58673 res!32668) b!58676))

(assert (= (and b!58673 (not res!32664)) b!58674))

(assert (= (and b!58674 res!32662) b!58668))

(assert (= (and b!58673 res!32665) b!58664))

(assert (= (and b!58664 c!7446) b!58681))

(assert (= (and b!58664 (not c!7446)) b!58666))

(assert (= (and b!58681 res!32666) b!58678))

(assert (= (or b!58681 b!58666) bm!4309))

(assert (= (and b!58664 res!32663) b!58672))

(assert (= (and b!58672 c!7449) b!58671))

(assert (= (and b!58672 (not c!7449)) b!58663))

(assert (= (and b!58671 res!32661) b!58667))

(assert (= (or b!58671 b!58663) bm!4310))

(declare-fun b_lambda!2569 () Bool)

(assert (=> (not b_lambda!2569) (not b!58668)))

(assert (=> b!58668 t!4783))

(declare-fun b_and!3549 () Bool)

(assert (= b_and!3545 (and (=> t!4783 result!2361) b_and!3549)))

(assert (=> b!58668 t!4785))

(declare-fun b_and!3551 () Bool)

(assert (= b_and!3547 (and (=> t!4785 result!2363) b_and!3551)))

(assert (=> b!58668 m!48339))

(declare-fun m!50439 () Bool)

(assert (=> b!58668 m!50439))

(assert (=> b!58668 m!48339))

(declare-fun m!50441 () Bool)

(assert (=> b!58668 m!50441))

(declare-fun m!50443 () Bool)

(assert (=> b!58668 m!50443))

(assert (=> b!58668 m!50439))

(assert (=> b!58668 m!50443))

(declare-fun m!50445 () Bool)

(assert (=> b!58668 m!50445))

(declare-fun m!50447 () Bool)

(assert (=> bm!4309 m!50447))

(declare-fun m!50449 () Bool)

(assert (=> b!58675 m!50449))

(declare-fun m!50451 () Bool)

(assert (=> b!58675 m!50451))

(declare-fun m!50453 () Bool)

(assert (=> b!58675 m!50453))

(declare-fun m!50455 () Bool)

(assert (=> b!58675 m!50455))

(declare-fun m!50457 () Bool)

(assert (=> b!58675 m!50457))

(assert (=> b!58675 m!50449))

(declare-fun m!50459 () Bool)

(assert (=> b!58675 m!50459))

(declare-fun m!50461 () Bool)

(assert (=> b!58675 m!50461))

(declare-fun m!50463 () Bool)

(assert (=> b!58675 m!50463))

(declare-fun m!50465 () Bool)

(assert (=> b!58675 m!50465))

(assert (=> b!58675 m!50443))

(declare-fun m!50467 () Bool)

(assert (=> b!58675 m!50467))

(declare-fun m!50469 () Bool)

(assert (=> b!58675 m!50469))

(assert (=> b!58675 m!50455))

(declare-fun m!50471 () Bool)

(assert (=> b!58675 m!50471))

(declare-fun m!50473 () Bool)

(assert (=> b!58675 m!50473))

(assert (=> b!58675 m!50463))

(assert (=> b!58675 m!50457))

(declare-fun m!50475 () Bool)

(assert (=> b!58675 m!50475))

(declare-fun m!50477 () Bool)

(assert (=> b!58675 m!50477))

(declare-fun m!50479 () Bool)

(assert (=> b!58675 m!50479))

(assert (=> b!58676 m!50443))

(assert (=> b!58676 m!50443))

(declare-fun m!50481 () Bool)

(assert (=> b!58676 m!50481))

(assert (=> b!58674 m!50443))

(assert (=> b!58674 m!50443))

(declare-fun m!50483 () Bool)

(assert (=> b!58674 m!50483))

(declare-fun m!50485 () Bool)

(assert (=> bm!4306 m!50485))

(assert (=> bm!4308 m!50451))

(declare-fun m!50487 () Bool)

(assert (=> b!58678 m!50487))

(declare-fun m!50489 () Bool)

(assert (=> b!58667 m!50489))

(declare-fun m!50491 () Bool)

(assert (=> bm!4310 m!50491))

(assert (=> d!11223 m!48395))

(assert (=> b!58665 m!50443))

(assert (=> b!58665 m!50443))

(assert (=> b!58665 m!50481))

(declare-fun m!50493 () Bool)

(assert (=> b!58670 m!50493))

(assert (=> d!10693 d!11223))

(declare-fun b!58684 () Bool)

(declare-fun e!38608 () Bool)

(declare-fun call!4316 () Bool)

(assert (=> b!58684 (= e!38608 call!4316)))

(declare-fun bm!4313 () Bool)

(assert (=> bm!4313 (= call!4316 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (mask!5896 newMap!16)))))

(declare-fun d!11225 () Bool)

(declare-fun res!32669 () Bool)

(declare-fun e!38609 () Bool)

(assert (=> d!11225 (=> res!32669 e!38609)))

(assert (=> d!11225 (= res!32669 (bvsge #b00000000000000000000000000000000 (size!2003 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))))))

(assert (=> d!11225 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (mask!5896 newMap!16)) e!38609)))

(declare-fun b!58685 () Bool)

(assert (=> b!58685 (= e!38609 e!38608)))

(declare-fun c!7450 () Bool)

(assert (=> b!58685 (= c!7450 (validKeyInArray!0 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!58686 () Bool)

(declare-fun e!38610 () Bool)

(assert (=> b!58686 (= e!38610 call!4316)))

(declare-fun b!58687 () Bool)

(assert (=> b!58687 (= e!38608 e!38610)))

(declare-fun lt!23607 () (_ BitVec 64))

(assert (=> b!58687 (= lt!23607 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!23606 () Unit!1488)

(assert (=> b!58687 (= lt!23606 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) lt!23607 #b00000000000000000000000000000000))))

(assert (=> b!58687 (arrayContainsKey!0 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) lt!23607 #b00000000000000000000000000000000)))

(declare-fun lt!23608 () Unit!1488)

(assert (=> b!58687 (= lt!23608 lt!23606)))

(declare-fun res!32670 () Bool)

(assert (=> b!58687 (= res!32670 (= (seekEntryOrOpen!0 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000) (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (mask!5896 newMap!16)) (Found!236 #b00000000000000000000000000000000)))))

(assert (=> b!58687 (=> (not res!32670) (not e!38610))))

(assert (= (and d!11225 (not res!32669)) b!58685))

(assert (= (and b!58685 c!7450) b!58687))

(assert (= (and b!58685 (not c!7450)) b!58684))

(assert (= (and b!58687 res!32670) b!58686))

(assert (= (or b!58686 b!58684) bm!4313))

(declare-fun m!50495 () Bool)

(assert (=> bm!4313 m!50495))

(assert (=> b!58685 m!50443))

(assert (=> b!58685 m!50443))

(assert (=> b!58685 m!50481))

(assert (=> b!58687 m!50443))

(declare-fun m!50497 () Bool)

(assert (=> b!58687 m!50497))

(declare-fun m!50499 () Bool)

(assert (=> b!58687 m!50499))

(assert (=> b!58687 m!50443))

(declare-fun m!50501 () Bool)

(assert (=> b!58687 m!50501))

(assert (=> d!10693 d!11225))

(declare-fun b!58688 () Bool)

(declare-fun e!38611 () (_ BitVec 32))

(declare-fun call!4317 () (_ BitVec 32))

(assert (=> b!58688 (= e!38611 (bvadd #b00000000000000000000000000000001 call!4317))))

(declare-fun b!58689 () Bool)

(assert (=> b!58689 (= e!38611 call!4317)))

(declare-fun bm!4314 () Bool)

(assert (=> bm!4314 (= call!4317 (arrayCountValidKeys!0 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2003 (_keys!3642 newMap!16))))))

(declare-fun b!58690 () Bool)

(declare-fun e!38612 () (_ BitVec 32))

(assert (=> b!58690 (= e!38612 #b00000000000000000000000000000000)))

(declare-fun b!58691 () Bool)

(assert (=> b!58691 (= e!38612 e!38611)))

(declare-fun c!7451 () Bool)

(assert (=> b!58691 (= c!7451 (validKeyInArray!0 (select (arr!1774 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun lt!23609 () (_ BitVec 32))

(declare-fun d!11227 () Bool)

(assert (=> d!11227 (and (bvsge lt!23609 #b00000000000000000000000000000000) (bvsle lt!23609 (bvsub (size!2003 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!11227 (= lt!23609 e!38612)))

(declare-fun c!7452 () Bool)

(assert (=> d!11227 (= c!7452 (bvsge #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))))))

(assert (=> d!11227 (and (bvsle #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2003 (_keys!3642 newMap!16)) (size!2003 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))))))))

(assert (=> d!11227 (= (arrayCountValidKeys!0 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) lt!23609)))

(assert (= (and d!11227 c!7452) b!58690))

(assert (= (and d!11227 (not c!7452)) b!58691))

(assert (= (and b!58691 c!7451) b!58688))

(assert (= (and b!58691 (not c!7451)) b!58689))

(assert (= (or b!58688 b!58689) bm!4314))

(declare-fun m!50503 () Bool)

(assert (=> bm!4314 m!50503))

(assert (=> b!58691 m!50443))

(assert (=> b!58691 m!50443))

(assert (=> b!58691 m!50481))

(assert (=> d!10693 d!11227))

(declare-fun b!58702 () Bool)

(declare-fun e!38618 () Bool)

(assert (=> b!58702 (= e!38618 (bvslt (size!2003 (_keys!3642 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun e!38617 () Bool)

(declare-fun b!58703 () Bool)

(assert (=> b!58703 (= e!38617 (= (arrayCountValidKeys!0 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3642 newMap!16) #b00000000000000000000000000000000 (size!2003 (_keys!3642 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!58701 () Bool)

(declare-fun res!32679 () Bool)

(assert (=> b!58701 (=> (not res!32679) (not e!38618))))

(assert (=> b!58701 (= res!32679 (validKeyInArray!0 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(declare-fun b!58700 () Bool)

(declare-fun res!32680 () Bool)

(assert (=> b!58700 (=> (not res!32680) (not e!38618))))

(assert (=> b!58700 (= res!32680 (not (validKeyInArray!0 (select (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774))))))))

(declare-fun d!11229 () Bool)

(assert (=> d!11229 e!38617))

(declare-fun res!32681 () Bool)

(assert (=> d!11229 (=> (not res!32681) (not e!38617))))

(assert (=> d!11229 (= res!32681 (and (bvsge (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000000) (bvslt (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (size!2003 (_keys!3642 newMap!16)))))))

(declare-fun lt!23612 () Unit!1488)

(declare-fun choose!1 (array!3706 (_ BitVec 32) (_ BitVec 64)) Unit!1488)

(assert (=> d!11229 (= lt!23612 (choose!1 (_keys!3642 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)))))

(assert (=> d!11229 e!38618))

(declare-fun res!32682 () Bool)

(assert (=> d!11229 (=> (not res!32682) (not e!38618))))

(assert (=> d!11229 (= res!32682 (and (bvsge (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000000) (bvslt (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (size!2003 (_keys!3642 newMap!16)))))))

(assert (=> d!11229 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3642 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) lt!23612)))

(assert (= (and d!11229 res!32682) b!58700))

(assert (= (and b!58700 res!32680) b!58701))

(assert (= (and b!58701 res!32679) b!58702))

(assert (= (and d!11229 res!32681) b!58703))

(assert (=> b!58703 m!48797))

(assert (=> b!58703 m!48773))

(assert (=> b!58703 m!48261))

(assert (=> b!58701 m!48105))

(assert (=> b!58701 m!48197))

(declare-fun m!50505 () Bool)

(assert (=> b!58700 m!50505))

(assert (=> b!58700 m!50505))

(declare-fun m!50507 () Bool)

(assert (=> b!58700 m!50507))

(assert (=> d!11229 m!48105))

(declare-fun m!50509 () Bool)

(assert (=> d!11229 m!50509))

(assert (=> d!10693 d!11229))

(declare-fun d!11231 () Bool)

(declare-fun e!38619 () Bool)

(assert (=> d!11231 e!38619))

(declare-fun res!32683 () Bool)

(assert (=> d!11231 (=> (not res!32683) (not e!38619))))

(assert (=> d!11231 (= res!32683 (and (bvsge (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000000) (bvslt (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (size!2003 lt!23066))))))

(declare-fun lt!23613 () Unit!1488)

(assert (=> d!11231 (= lt!23613 (choose!303 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (defaultEntry!2022 newMap!16)))))

(assert (=> d!11231 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11231 (= (lemmaValidKeyInArrayIsInListMap!72 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (defaultEntry!2022 newMap!16)) lt!23613)))

(declare-fun b!58704 () Bool)

(assert (=> b!58704 (= e!38619 (contains!688 (getCurrentListMap!400 lt!23066 lt!23061 (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (select (arr!1774 lt!23066) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)))))))

(assert (= (and d!11231 res!32683) b!58704))

(declare-fun m!50511 () Bool)

(assert (=> d!11231 m!50511))

(assert (=> d!11231 m!48395))

(assert (=> b!58704 m!48801))

(declare-fun m!50513 () Bool)

(assert (=> b!58704 m!50513))

(assert (=> b!58704 m!48801))

(assert (=> b!58704 m!50513))

(declare-fun m!50515 () Bool)

(assert (=> b!58704 m!50515))

(assert (=> d!10693 d!11231))

(declare-fun d!11233 () Bool)

(declare-fun e!38622 () Bool)

(assert (=> d!11233 e!38622))

(declare-fun res!32686 () Bool)

(assert (=> d!11233 (=> (not res!32686) (not e!38622))))

(assert (=> d!11233 (= res!32686 (and (bvsge (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000000) (bvslt (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (size!2003 (_keys!3642 newMap!16))) (bvslt (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (size!2004 (_values!2005 newMap!16)))))))

(declare-fun lt!23616 () Unit!1488)

(declare-fun choose!308 (array!3706 array!3708 (_ BitVec 32) (_ BitVec 32) V!2835 V!2835 (_ BitVec 32) (_ BitVec 64) V!2835 Int) Unit!1488)

(assert (=> d!11233 (= lt!23616 (choose!308 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)))))

(assert (=> d!11233 (validMask!0 (mask!5896 newMap!16))))

(assert (=> d!11233 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!4 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2022 newMap!16)) lt!23616)))

(declare-fun b!58707 () Bool)

(assert (=> b!58707 (= e!38622 (= (+!80 (getCurrentListMap!400 (_keys!3642 newMap!16) (_values!2005 newMap!16) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16)) (tuple2!2039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!400 (array!3707 (store (arr!1774 (_keys!3642 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355)) (size!2003 (_keys!3642 newMap!16))) (array!3709 (store (arr!1775 (_values!2005 newMap!16)) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) (ValueCellFull!852 (get!1073 (select (arr!1775 (_values!2005 (v!2365 (underlying!222 thiss!992)))) from!355) (dynLambda!310 (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2004 (_values!2005 newMap!16))) (mask!5896 newMap!16) (extraKeys!1913 newMap!16) (zeroValue!1940 newMap!16) (minValue!1940 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2022 newMap!16))))))

(assert (= (and d!11233 res!32686) b!58707))

(assert (=> d!11233 m!48105))

(assert (=> d!11233 m!48103))

(declare-fun m!50517 () Bool)

(assert (=> d!11233 m!50517))

(assert (=> d!11233 m!48395))

(assert (=> b!58707 m!48797))

(assert (=> b!58707 m!48203))

(assert (=> b!58707 m!48781))

(assert (=> b!58707 m!48809))

(assert (=> b!58707 m!48203))

(assert (=> b!58707 m!48777))

(assert (=> d!10693 d!11233))

(assert (=> d!10693 d!10669))

(declare-fun d!11235 () Bool)

(assert (=> d!11235 (arrayContainsKey!0 lt!23039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!23617 () Unit!1488)

(assert (=> d!11235 (= lt!23617 (choose!13 lt!23039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774))))))

(assert (=> d!11235 (bvsge (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774)) #b00000000000000000000000000000000)))

(assert (=> d!11235 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!23039 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) (ite c!7123 (index!3069 lt!22774) (index!3066 lt!22774))) lt!23617)))

(declare-fun bs!2548 () Bool)

(assert (= bs!2548 d!11235))

(assert (=> bs!2548 m!48105))

(assert (=> bs!2548 m!48779))

(assert (=> bs!2548 m!48105))

(declare-fun m!50519 () Bool)

(assert (=> bs!2548 m!50519))

(assert (=> d!10693 d!11235))

(declare-fun b!58708 () Bool)

(declare-fun e!38623 () Option!128)

(assert (=> b!58708 (= e!38623 (Some!127 (_2!1029 (h!2025 (toList!702 lt!22844)))))))

(declare-fun d!11237 () Bool)

(declare-fun c!7453 () Bool)

(assert (=> d!11237 (= c!7453 (and ((_ is Cons!1445) (toList!702 lt!22844)) (= (_1!1029 (h!2025 (toList!702 lt!22844))) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992))))))))))

(assert (=> d!11237 (= (getValueByKey!122 (toList!702 lt!22844) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))) e!38623)))

(declare-fun b!58711 () Bool)

(declare-fun e!38624 () Option!128)

(assert (=> b!58711 (= e!38624 None!126)))

(declare-fun b!58709 () Bool)

(assert (=> b!58709 (= e!38623 e!38624)))

(declare-fun c!7454 () Bool)

(assert (=> b!58709 (= c!7454 (and ((_ is Cons!1445) (toList!702 lt!22844)) (not (= (_1!1029 (h!2025 (toList!702 lt!22844))) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))))

(declare-fun b!58710 () Bool)

(assert (=> b!58710 (= e!38624 (getValueByKey!122 (t!4775 (toList!702 lt!22844)) (_1!1029 (tuple2!2039 lt!22698 (zeroValue!1940 (v!2365 (underlying!222 thiss!992)))))))))

(assert (= (and d!11237 c!7453) b!58708))

(assert (= (and d!11237 (not c!7453)) b!58709))

(assert (= (and b!58709 c!7454) b!58710))

(assert (= (and b!58709 (not c!7454)) b!58711))

(declare-fun m!50521 () Bool)

(assert (=> b!58710 m!50521))

(assert (=> b!57598 d!11237))

(declare-fun d!11239 () Bool)

(declare-fun e!38626 () Bool)

(assert (=> d!11239 e!38626))

(declare-fun res!32687 () Bool)

(assert (=> d!11239 (=> res!32687 e!38626)))

(declare-fun lt!23618 () Bool)

(assert (=> d!11239 (= res!32687 (not lt!23618))))

(declare-fun lt!23619 () Bool)

(assert (=> d!11239 (= lt!23618 lt!23619)))

(declare-fun lt!23621 () Unit!1488)

(declare-fun e!38625 () Unit!1488)

(assert (=> d!11239 (= lt!23621 e!38625)))

(declare-fun c!7455 () Bool)

(assert (=> d!11239 (= c!7455 lt!23619)))

(assert (=> d!11239 (= lt!23619 (containsKey!126 (toList!702 lt!22884) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11239 (= (contains!688 lt!22884 #b0000000000000000000000000000000000000000000000000000000000000000) lt!23618)))

(declare-fun b!58712 () Bool)

(declare-fun lt!23620 () Unit!1488)

(assert (=> b!58712 (= e!38625 lt!23620)))

(assert (=> b!58712 (= lt!23620 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!702 lt!22884) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58712 (isDefined!76 (getValueByKey!122 (toList!702 lt!22884) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58713 () Bool)

(declare-fun Unit!1550 () Unit!1488)

(assert (=> b!58713 (= e!38625 Unit!1550)))

(declare-fun b!58714 () Bool)

(assert (=> b!58714 (= e!38626 (isDefined!76 (getValueByKey!122 (toList!702 lt!22884) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11239 c!7455) b!58712))

(assert (= (and d!11239 (not c!7455)) b!58713))

(assert (= (and d!11239 (not res!32687)) b!58714))

(declare-fun m!50523 () Bool)

(assert (=> d!11239 m!50523))

(declare-fun m!50525 () Bool)

(assert (=> b!58712 m!50525))

(declare-fun m!50527 () Bool)

(assert (=> b!58712 m!50527))

(assert (=> b!58712 m!50527))

(declare-fun m!50529 () Bool)

(assert (=> b!58712 m!50529))

(assert (=> b!58714 m!50527))

(assert (=> b!58714 m!50527))

(assert (=> b!58714 m!50529))

(assert (=> d!10641 d!11239))

(assert (=> d!10641 d!10577))

(assert (=> bm!4184 d!11071))

(assert (=> d!10673 d!10571))

(declare-fun d!11241 () Bool)

(declare-fun lt!23622 () Bool)

(assert (=> d!11241 (= lt!23622 (select (content!60 (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!38627 () Bool)

(assert (=> d!11241 (= lt!23622 e!38627)))

(declare-fun res!32688 () Bool)

(assert (=> d!11241 (=> (not res!32688) (not e!38627))))

(assert (=> d!11241 (= res!32688 ((_ is Cons!1446) (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)))))

(assert (=> d!11241 (= (contains!689 (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!23622)))

(declare-fun b!58715 () Bool)

(declare-fun e!38628 () Bool)

(assert (=> b!58715 (= e!38627 e!38628)))

(declare-fun res!32689 () Bool)

(assert (=> b!58715 (=> res!32689 e!38628)))

(assert (=> b!58715 (= res!32689 (= (h!2026 (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!58716 () Bool)

(assert (=> b!58716 (= e!38628 (contains!689 (t!4776 (ite c!7066 (Cons!1446 (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) from!355) Nil!1447) Nil!1447)) (select (arr!1774 (_keys!3642 (v!2365 (underlying!222 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!11241 res!32688) b!58715))

(assert (= (and b!58715 (not res!32689)) b!58716))

(declare-fun m!50531 () Bool)

(assert (=> d!11241 m!50531))

(assert (=> d!11241 m!48831))

(declare-fun m!50533 () Bool)

(assert (=> d!11241 m!50533))

(assert (=> b!58716 m!48831))

(declare-fun m!50535 () Bool)

(assert (=> b!58716 m!50535))

(assert (=> b!57800 d!11241))

(declare-fun b!58717 () Bool)

(declare-fun e!38630 () Bool)

(assert (=> b!58717 (= e!38630 tp_is_empty!2391)))

(declare-fun b!58718 () Bool)

(declare-fun e!38629 () Bool)

(assert (=> b!58718 (= e!38629 tp_is_empty!2391)))

(declare-fun condMapEmpty!2861 () Bool)

(declare-fun mapDefault!2861 () ValueCell!852)

(assert (=> mapNonEmpty!2859 (= condMapEmpty!2861 (= mapRest!2859 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2861)))))

(declare-fun mapRes!2861 () Bool)

(assert (=> mapNonEmpty!2859 (= tp!7971 (and e!38629 mapRes!2861))))

(declare-fun mapIsEmpty!2861 () Bool)

(assert (=> mapIsEmpty!2861 mapRes!2861))

(declare-fun mapNonEmpty!2861 () Bool)

(declare-fun tp!7973 () Bool)

(assert (=> mapNonEmpty!2861 (= mapRes!2861 (and tp!7973 e!38630))))

(declare-fun mapKey!2861 () (_ BitVec 32))

(declare-fun mapValue!2861 () ValueCell!852)

(declare-fun mapRest!2861 () (Array (_ BitVec 32) ValueCell!852))

(assert (=> mapNonEmpty!2861 (= mapRest!2859 (store mapRest!2861 mapKey!2861 mapValue!2861))))

(assert (= (and mapNonEmpty!2859 condMapEmpty!2861) mapIsEmpty!2861))

(assert (= (and mapNonEmpty!2859 (not condMapEmpty!2861)) mapNonEmpty!2861))

(assert (= (and mapNonEmpty!2861 ((_ is ValueCellFull!852) mapValue!2861)) b!58717))

(assert (= (and mapNonEmpty!2859 ((_ is ValueCellFull!852) mapDefault!2861)) b!58718))

(declare-fun m!50537 () Bool)

(assert (=> mapNonEmpty!2861 m!50537))

(declare-fun b!58719 () Bool)

(declare-fun e!38632 () Bool)

(assert (=> b!58719 (= e!38632 tp_is_empty!2391)))

(declare-fun b!58720 () Bool)

(declare-fun e!38631 () Bool)

(assert (=> b!58720 (= e!38631 tp_is_empty!2391)))

(declare-fun condMapEmpty!2862 () Bool)

(declare-fun mapDefault!2862 () ValueCell!852)

(assert (=> mapNonEmpty!2860 (= condMapEmpty!2862 (= mapRest!2860 ((as const (Array (_ BitVec 32) ValueCell!852)) mapDefault!2862)))))

(declare-fun mapRes!2862 () Bool)

(assert (=> mapNonEmpty!2860 (= tp!7972 (and e!38631 mapRes!2862))))

(declare-fun mapIsEmpty!2862 () Bool)

(assert (=> mapIsEmpty!2862 mapRes!2862))

(declare-fun mapNonEmpty!2862 () Bool)

(declare-fun tp!7974 () Bool)

(assert (=> mapNonEmpty!2862 (= mapRes!2862 (and tp!7974 e!38632))))

(declare-fun mapValue!2862 () ValueCell!852)

(declare-fun mapKey!2862 () (_ BitVec 32))

(declare-fun mapRest!2862 () (Array (_ BitVec 32) ValueCell!852))

(assert (=> mapNonEmpty!2862 (= mapRest!2860 (store mapRest!2862 mapKey!2862 mapValue!2862))))

(assert (= (and mapNonEmpty!2860 condMapEmpty!2862) mapIsEmpty!2862))

(assert (= (and mapNonEmpty!2860 (not condMapEmpty!2862)) mapNonEmpty!2862))

(assert (= (and mapNonEmpty!2862 ((_ is ValueCellFull!852) mapValue!2862)) b!58719))

(assert (= (and mapNonEmpty!2860 ((_ is ValueCellFull!852) mapDefault!2862)) b!58720))

(declare-fun m!50539 () Bool)

(assert (=> mapNonEmpty!2862 m!50539))

(declare-fun b_lambda!2571 () Bool)

(assert (= b_lambda!2563 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2571)))

(declare-fun b_lambda!2573 () Bool)

(assert (= b_lambda!2559 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2573)))

(declare-fun b_lambda!2575 () Bool)

(assert (= b_lambda!2551 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2575)))

(declare-fun b_lambda!2577 () Bool)

(assert (= b_lambda!2567 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2577)))

(declare-fun b_lambda!2579 () Bool)

(assert (= b_lambda!2543 (or (and b!57211 b_free!1949) (and b!57210 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))))) b_lambda!2579)))

(declare-fun b_lambda!2581 () Bool)

(assert (= b_lambda!2569 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2581)))

(declare-fun b_lambda!2583 () Bool)

(assert (= b_lambda!2547 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2583)))

(declare-fun b_lambda!2585 () Bool)

(assert (= b_lambda!2565 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2585)))

(declare-fun b_lambda!2587 () Bool)

(assert (= b_lambda!2561 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2587)))

(declare-fun b_lambda!2589 () Bool)

(assert (= b_lambda!2549 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2589)))

(declare-fun b_lambda!2591 () Bool)

(assert (= b_lambda!2553 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2591)))

(declare-fun b_lambda!2593 () Bool)

(assert (= b_lambda!2557 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2593)))

(declare-fun b_lambda!2595 () Bool)

(assert (= b_lambda!2555 (or (and b!57211 b_free!1949 (= (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))) (defaultEntry!2022 newMap!16))) (and b!57210 b_free!1951) b_lambda!2595)))

(declare-fun b_lambda!2597 () Bool)

(assert (= b_lambda!2541 (or (and b!57211 b_free!1949) (and b!57210 b_free!1951 (= (defaultEntry!2022 newMap!16) (defaultEntry!2022 (v!2365 (underlying!222 thiss!992))))) b_lambda!2597)))

(check-sat (not b!58011) (not d!10795) (not b!58439) (not b!58557) (not b!58463) (not d!10945) (not b!58454) (not bm!4236) (not b!58627) (not d!11005) (not bm!4304) (not d!10815) (not d!10871) (not d!10975) (not b_lambda!2537) (not b!58246) (not b!58078) (not bm!4240) (not b_lambda!2587) (not d!11091) (not bm!4234) (not b_lambda!2519) (not b!58296) (not b!58173) (not b!58309) (not d!11159) (not b!58633) (not b!58376) (not b!58056) (not b!57975) (not b!58124) (not b!58402) (not bm!4257) (not d!11031) (not d!11001) (not d!10895) (not b!57995) (not b!58068) (not b!58667) (not d!10953) (not d!11053) (not d!11113) (not b!58566) (not d!10763) (not b!58120) (not d!11181) (not b!58232) (not b!58712) (not d!11233) (not d!11017) (not b!58472) (not d!11083) (not d!11211) (not bm!4242) (not b_lambda!2591) (not b!57903) (not b!57925) (not b!58469) (not b!58224) (not b!58144) (not d!11067) (not b!58520) (not b!58486) (not b!58457) (not b!58077) (not bm!4251) (not d!10851) (not b!58361) (not b!58186) (not b!58205) (not d!11047) (not b!58579) (not d!10829) (not b!58131) (not b!58363) (not bm!4284) (not b!58369) (not b!58634) (not d!10837) (not d!10865) (not b!58111) (not b!58668) (not b!58674) (not d!11119) (not d!10835) (not b!58530) (not b!58665) (not d!11109) (not b!58560) (not b!57982) (not bm!4247) (not b!58227) (not b!58564) (not d!10899) (not d!10995) (not b!58064) (not b!58336) (not b!58382) (not b!58348) (not b!58676) (not b!58490) (not d!11195) (not b!57915) (not b!58279) (not d!11169) (not d!11207) (not bm!4297) (not d!10987) (not b!58174) (not b!58405) (not b!58466) (not b!57942) (not b!58343) (not d!10869) (not d!11085) (not b!58424) (not d!11007) (not bm!4296) (not b!58616) (not b!58222) (not b!58426) (not b!58701) (not b!58139) (not b!58624) (not bm!4313) (not b!58419) (not b!58230) (not d!11089) (not b!58102) (not b!58055) (not b!57941) (not b!58372) (not d!11087) (not b!58203) (not bm!4314) (not b!58678) (not b!58093) (not bm!4230) (not d!11117) (not b!58394) (not b_lambda!2545) (not d!11025) b_and!3549 (not b!58195) (not b!58311) (not bm!4273) (not d!10943) (not bm!4254) (not bm!4281) (not d!11081) (not b!58214) (not bm!4258) (not d!11123) (not b!58496) (not d!11223) (not d!10777) (not b!58531) (not b!58107) (not b!58471) (not b!58523) (not d!10979) (not d!10881) (not b!58152) (not b!58062) (not b_lambda!2585) (not b!58225) (not d!10867) (not b!58362) (not d!10853) (not d!10831) (not b!58367) (not b!58555) (not b!58341) (not d!10985) (not d!10937) tp_is_empty!2391 (not b!58659) (not bm!4212) (not b!58048) (not b!58086) (not d!11101) (not b!58038) (not b!57991) (not d!11011) (not b!58213) (not b!58580) (not b!58271) (not bm!4261) (not b!58190) (not b!58167) (not b!58090) (not d!10849) (not bm!4305) (not b!57930) (not b!58123) (not b!58088) (not d!10803) (not d!10997) (not b!58495) (not d!11175) (not b!58159) (not b!58202) (not b!58000) (not bm!4222) (not d!11063) (not d!10929) (not b!58164) (not b!58453) (not b!57932) (not b!58449) (not d!10921) (not b!58637) (not bm!4299) (not d!10947) (not d!10811) (not bm!4252) (not b!58503) (not b!58488) (not b!58161) (not b!58249) (not b!58337) (not b!58262) (not b!58016) (not d!11003) (not b!58254) (not d!11127) (not b!58204) (not b!58447) (not d!11239) (not b_lambda!2531) (not b!58193) (not b!58329) (not b!58325) (not d!11131) (not bm!4225) (not b_lambda!2593) (not bm!4268) (not b!58289) (not b!58319) (not d!10739) (not b!57917) (not d!11115) (not bm!4269) (not d!10767) (not b!58569) (not b!57916) (not b!57979) (not b!58117) (not b!57994) (not d!10989) (not b!58076) (not d!11235) (not b!57922) (not d!10755) (not b!58590) (not b!57967) (not bm!4244) (not b!58129) (not b!58162) (not b!58118) (not d!11173) (not b!58031) (not d!11241) (not bm!4262) (not bm!4286) (not b!58574) (not b!58321) (not b!58008) (not d!10783) (not d!10897) (not d!10933) (not b!58498) (not b!58138) (not b!58414) (not b!58704) (not d!10861) (not b!58460) (not b!58216) (not mapNonEmpty!2862) (not b!58397) (not b!58635) (not b!58317) (not b!58421) (not d!10991) (not b!58314) (not b!57983) (not b!58687) (not b_lambda!2539) (not b!58312) (not d!11205) (not b!57918) (not b!57928) (not d!11135) (not b!58700) (not b!58455) (not b!58028) (not b!58020) (not b!57992) (not b!58691) (not b!58177) (not b!57919) (not b!58417) (not d!10813) (not b_lambda!2589) (not b!58323) (not d!10743) (not bm!4295) (not d!10827) (not d!10855) (not b!58504) (not d!11095) (not b!58158) (not d!10805) (not d!11183) (not b!58198) (not d!10923) (not b!58071) (not bm!4250) (not b!58383) (not b!58141) (not b!58572) (not d!10927) (not b!58237) (not b!58277) (not b!58477) (not b!57966) (not d!10959) (not d!10963) (not b!58662) (not d!11187) (not d!10751) (not b!58146) (not bm!4287) (not d!11179) (not b!58353) (not bm!4237) (not d!11161) (not bm!4243) (not b!58650) (not b!58473) (not d!10775) (not b!58175) (not d!11189) (not d!10799) (not b!58502) (not d!10925) (not b!58066) (not b!58234) (not b!58350) (not b!58441) (not d!10765) (not b!58451) (not b!58261) (not d!11073) (not b!57935) (not bm!4310) (not d!10845) (not bm!4233) (not d!10909) (not b!58432) (not b!58379) (not b!58316) (not b!58526) (not d!11125) (not b!58707) (not b!58537) (not b!58047) (not b!58299) (not b!58128) (not d!11093) (not b!58710) (not d!10893) (not d!10731) (not bm!4274) (not bm!4276) (not d!10971) (not b!58395) (not b!58506) (not b!58024) (not d!11213) (not d!11079) (not b!58206) (not d!11065) (not d!11229) (not d!11153) (not b!58562) (not b!58431) (not b!58670) (not b!58618) (not d!11177) (not b!58134) (not b!58272) (not d!10821) (not b!58210) (not d!11069) (not b!58411) (not b!58389) (not d!11077) (not bm!4219) (not b!58143) (not b!58140) (not b_lambda!2581) (not b!58654) (not d!10935) (not b!58201) (not b_lambda!2575) (not b!58714) (not b!58381) (not b!58571) (not d!10757) (not b!58354) (not b_lambda!2573) (not b!58365) (not b!58338) (not b!58448) (not b!58238) (not d!10905) (not b!58487) (not mapNonEmpty!2861) (not b!58009) (not b_lambda!2515) (not b!57999) (not d!10951) (not d!11071) (not d!10965) (not d!10939) (not b!58556) (not b!58440) (not b!57880) (not b!58306) (not d!10949) (not b!58133) (not b_next!1949) (not b!57997) (not d!10859) (not d!11231) (not b!58030) (not d!10977) (not d!10761) (not b!58518) (not d!10773) (not d!10863) (not b!58446) (not b_lambda!2577) (not b!58263) (not b!58373) (not b_lambda!2535) (not b!58041) (not b!58286) (not b!58427) (not bm!4260) (not b!58626) (not b!58578) (not b!58403) (not b!57977) (not b!58370) (not b!58083) (not b!58127) (not b!57911) (not b!58658) (not b!58252) (not d!10931) (not b!58001) (not b!58094) (not bm!4288) (not bm!4308) (not d!11061) (not b_lambda!2533) b_and!3551 (not b!58401) (not b!58074) (not b!58527) (not d!11019) (not b!58220) (not b!58464) (not b!58629) (not b!58003) (not d!10787) (not b!58675) (not b!58375) (not b!57910) (not d!10955) (not b!58169) (not d!10781) (not d!11045) (not b!58054) (not b!58476) (not b!58081) (not b!58217) (not d!11199) (not bm!4265) (not b!58346) (not b_lambda!2583) (not b!58621) (not b!58033) (not b_lambda!2571) (not b!58179) (not b!58176) (not b_lambda!2597) (not b!58284) (not bm!4301) (not b!58656) (not b!58412) (not b!58303) (not b!58115) (not d!11099) (not b!58387) (not b!58703) (not b!58089) (not b!58282) (not b!58199) (not d!10817) (not d!11051) (not d!11221) (not b!58080) (not d!10879) (not d!11197) (not b!58484) (not b!57980) (not b!58137) (not b!58149) (not d!10771) (not d!11121) (not b!58517) (not d!10941) (not b!58037) (not b!58171) (not d!11015) (not b!58183) (not d!10873) (not b!58438) (not b!58327) (not b!58265) (not b!58349) (not d!10877) (not b!57963) (not bm!4300) (not b!57921) (not d!10779) (not b!58388) (not b!58565) (not b!58197) (not bm!4235) (not b!58428) (not d!11075) (not b!58493) (not b!58582) (not d!10903) (not d!11097) (not b_next!1951) (not bm!4277) (not d!11149) (not d!11155) (not b!58334) (not b!58109) (not d!11141) (not d!11057) (not d!10857) (not b!58290) (not b!58039) (not b!58413) (not b!58716) (not b!58166) (not b!58340) (not d!10883) (not b!58257) (not b!58248) (not b!58255) (not b!58180) (not bm!4224) (not bm!4278) (not bm!4309) (not b!58685) (not d!11059) (not b_lambda!2579) (not b!58052) (not b!58208) (not b!58331) (not d!10957) (not d!11043) (not b!58275) (not bm!4306) (not b!58233) (not d!10875) (not bm!4226) (not b!58302) (not d!10885) (not b!58049) (not b!58514) (not bm!4229) (not b!57913) (not d!11209) (not b!58142) (not d!10919) (not b!58274) (not d!10889) (not b_lambda!2595) (not b!58371) (not d!10809) (not b!58392) (not bm!4253) (not b!57985) (not b!58647) (not b!58366) (not b!58525) (not d!10969) (not b!58130) (not bm!4270) (not b!58380) (not b!58285) (not b!58445))
(check-sat b_and!3549 b_and!3551 (not b_next!1949) (not b_next!1951))
