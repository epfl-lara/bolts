; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8736 () Bool)

(assert start!8736)

(declare-fun b!60621 () Bool)

(declare-fun b_free!1985 () Bool)

(declare-fun b_next!1985 () Bool)

(assert (=> b!60621 (= b_free!1985 (not b_next!1985))))

(declare-fun tp!8077 () Bool)

(declare-fun b_and!3693 () Bool)

(assert (=> b!60621 (= tp!8077 b_and!3693)))

(declare-fun b!60620 () Bool)

(declare-fun b_free!1987 () Bool)

(declare-fun b_next!1987 () Bool)

(assert (=> b!60620 (= b_free!1987 (not b_next!1987))))

(declare-fun tp!8076 () Bool)

(declare-fun b_and!3695 () Bool)

(assert (=> b!60620 (= tp!8076 b_and!3695)))

(declare-fun b!60606 () Bool)

(declare-fun e!39859 () Bool)

(declare-fun tp_is_empty!2409 () Bool)

(assert (=> b!60606 (= e!39859 tp_is_empty!2409)))

(declare-fun b!60607 () Bool)

(declare-fun e!39860 () Bool)

(declare-fun e!39868 () Bool)

(assert (=> b!60607 (= e!39860 e!39868)))

(declare-fun res!33483 () Bool)

(assert (=> b!60607 (=> (not res!33483) (not e!39868))))

(declare-datatypes ((V!2859 0))(
  ( (V!2860 (val!1249 Int)) )
))
(declare-datatypes ((array!3746 0))(
  ( (array!3747 (arr!1792 (Array (_ BitVec 32) (_ BitVec 64))) (size!2023 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!861 0))(
  ( (ValueCellFull!861 (v!2402 V!2859)) (EmptyCell!861) )
))
(declare-datatypes ((array!3748 0))(
  ( (array!3749 (arr!1793 (Array (_ BitVec 32) ValueCell!861)) (size!2024 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!630 0))(
  ( (LongMapFixedSize!631 (defaultEntry!2067 Int) (mask!5963 (_ BitVec 32)) (extraKeys!1950 (_ BitVec 32)) (zeroValue!1981 V!2859) (minValue!1981 V!2859) (_size!364 (_ BitVec 32)) (_keys!3695 array!3746) (_values!2050 array!3748) (_vacant!364 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!440 0))(
  ( (Cell!441 (v!2403 LongMapFixedSize!630)) )
))
(declare-datatypes ((LongMap!440 0))(
  ( (LongMap!441 (underlying!231 Cell!440)) )
))
(declare-fun thiss!992 () LongMap!440)

(declare-fun from!355 () (_ BitVec 32))

(declare-datatypes ((tuple2!2060 0))(
  ( (tuple2!2061 (_1!1040 (_ BitVec 64)) (_2!1040 V!2859)) )
))
(declare-datatypes ((List!1459 0))(
  ( (Nil!1456) (Cons!1455 (h!2037 tuple2!2060) (t!4837 List!1459)) )
))
(declare-datatypes ((ListLongMap!1385 0))(
  ( (ListLongMap!1386 (toList!708 List!1459)) )
))
(declare-fun lt!24782 () ListLongMap!1385)

(declare-fun lt!24780 () ListLongMap!1385)

(assert (=> b!60607 (= res!33483 (and (= lt!24782 lt!24780) (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun newMap!16 () LongMapFixedSize!630)

(declare-fun map!1115 (LongMapFixedSize!630) ListLongMap!1385)

(assert (=> b!60607 (= lt!24780 (map!1115 newMap!16))))

(declare-fun getCurrentListMap!405 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) Int) ListLongMap!1385)

(assert (=> b!60607 (= lt!24782 (getCurrentListMap!405 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun mapIsEmpty!2917 () Bool)

(declare-fun mapRes!2918 () Bool)

(assert (=> mapIsEmpty!2917 mapRes!2918))

(declare-fun b!60608 () Bool)

(declare-fun e!39871 () Bool)

(assert (=> b!60608 (= e!39871 tp_is_empty!2409)))

(declare-fun b!60609 () Bool)

(declare-fun e!39867 () Bool)

(assert (=> b!60609 (= e!39867 (and e!39871 mapRes!2918))))

(declare-fun condMapEmpty!2917 () Bool)

(declare-fun mapDefault!2917 () ValueCell!861)

(assert (=> b!60609 (= condMapEmpty!2917 (= (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2917)))))

(declare-fun b!60610 () Bool)

(declare-fun e!39862 () Bool)

(declare-fun e!39869 () Bool)

(assert (=> b!60610 (= e!39862 e!39869)))

(declare-fun b!60611 () Bool)

(declare-fun e!39863 () Bool)

(declare-fun e!39874 () Bool)

(declare-fun mapRes!2917 () Bool)

(assert (=> b!60611 (= e!39863 (and e!39874 mapRes!2917))))

(declare-fun condMapEmpty!2918 () Bool)

(declare-fun mapDefault!2918 () ValueCell!861)

(assert (=> b!60611 (= condMapEmpty!2918 (= (arr!1793 (_values!2050 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2918)))))

(declare-fun b!60612 () Bool)

(assert (=> b!60612 (= e!39874 tp_is_empty!2409)))

(declare-fun b!60613 () Bool)

(declare-fun res!33480 () Bool)

(assert (=> b!60613 (=> (not res!33480) (not e!39860))))

(declare-fun valid!259 (LongMapFixedSize!630) Bool)

(assert (=> b!60613 (= res!33480 (valid!259 newMap!16))))

(declare-fun b!60614 () Bool)

(declare-fun res!33485 () Bool)

(declare-fun e!39865 () Bool)

(assert (=> b!60614 (=> (not res!33485) (not e!39865))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!60614 (= res!33485 (validMask!0 (mask!5963 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun b!60615 () Bool)

(declare-fun res!33484 () Bool)

(assert (=> b!60615 (=> (not res!33484) (not e!39860))))

(assert (=> b!60615 (= res!33484 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!60616 () Bool)

(assert (=> b!60616 (= e!39865 (and (= (size!2024 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5963 (v!2403 (underlying!231 thiss!992))))) (= (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (size!2024 (_values!2050 (v!2403 (underlying!231 thiss!992))))) (bvsge (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000) (bvslt (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!60617 () Bool)

(declare-fun res!33479 () Bool)

(assert (=> b!60617 (=> (not res!33479) (not e!39860))))

(assert (=> b!60617 (= res!33479 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5963 newMap!16)) (_size!364 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun b!60618 () Bool)

(declare-fun e!39873 () Bool)

(assert (=> b!60618 (= e!39873 e!39862)))

(declare-fun b!60619 () Bool)

(declare-datatypes ((Unit!1622 0))(
  ( (Unit!1623) )
))
(declare-fun e!39866 () Unit!1622)

(declare-fun Unit!1624 () Unit!1622)

(assert (=> b!60619 (= e!39866 Unit!1624)))

(declare-fun e!39870 () Bool)

(declare-fun array_inv!1057 (array!3746) Bool)

(declare-fun array_inv!1058 (array!3748) Bool)

(assert (=> b!60620 (= e!39870 (and tp!8076 tp_is_empty!2409 (array_inv!1057 (_keys!3695 newMap!16)) (array_inv!1058 (_values!2050 newMap!16)) e!39863))))

(assert (=> b!60621 (= e!39869 (and tp!8077 tp_is_empty!2409 (array_inv!1057 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (array_inv!1058 (_values!2050 (v!2403 (underlying!231 thiss!992)))) e!39867))))

(declare-fun b!60622 () Bool)

(declare-fun Unit!1625 () Unit!1622)

(assert (=> b!60622 (= e!39866 Unit!1625)))

(declare-fun lt!24779 () Unit!1622)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!30 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) (_ BitVec 32) Int) Unit!1622)

(assert (=> b!60622 (= lt!24779 (lemmaListMapContainsThenArrayContainsFrom!30 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3746 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!60622 (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!24785 () Unit!1622)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3746 (_ BitVec 32) (_ BitVec 32)) Unit!1622)

(assert (=> b!60622 (= lt!24785 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1460 0))(
  ( (Nil!1457) (Cons!1456 (h!2038 (_ BitVec 64)) (t!4838 List!1460)) )
))
(declare-fun arrayNoDuplicates!0 (array!3746 (_ BitVec 32) List!1460) Bool)

(assert (=> b!60622 (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) from!355 Nil!1457)))

(declare-fun lt!24781 () Unit!1622)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3746 (_ BitVec 32) (_ BitVec 64) List!1460) Unit!1622)

(assert (=> b!60622 (= lt!24781 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457)))))

(assert (=> b!60622 false))

(declare-fun mapNonEmpty!2918 () Bool)

(declare-fun tp!8075 () Bool)

(declare-fun e!39864 () Bool)

(assert (=> mapNonEmpty!2918 (= mapRes!2918 (and tp!8075 e!39864))))

(declare-fun mapKey!2917 () (_ BitVec 32))

(declare-fun mapRest!2917 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2917 () ValueCell!861)

(assert (=> mapNonEmpty!2918 (= (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (store mapRest!2917 mapKey!2917 mapValue!2917))))

(declare-fun b!60623 () Bool)

(assert (=> b!60623 (= e!39864 tp_is_empty!2409)))

(declare-fun res!33482 () Bool)

(assert (=> start!8736 (=> (not res!33482) (not e!39860))))

(declare-fun valid!260 (LongMap!440) Bool)

(assert (=> start!8736 (= res!33482 (valid!260 thiss!992))))

(assert (=> start!8736 e!39860))

(assert (=> start!8736 e!39873))

(assert (=> start!8736 true))

(assert (=> start!8736 e!39870))

(declare-fun mapNonEmpty!2917 () Bool)

(declare-fun tp!8078 () Bool)

(assert (=> mapNonEmpty!2917 (= mapRes!2917 (and tp!8078 e!39859))))

(declare-fun mapRest!2918 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2918 () ValueCell!861)

(declare-fun mapKey!2918 () (_ BitVec 32))

(assert (=> mapNonEmpty!2917 (= (arr!1793 (_values!2050 newMap!16)) (store mapRest!2918 mapKey!2918 mapValue!2918))))

(declare-fun mapIsEmpty!2918 () Bool)

(assert (=> mapIsEmpty!2918 mapRes!2917))

(declare-fun b!60624 () Bool)

(assert (=> b!60624 (= e!39868 e!39865)))

(declare-fun res!33481 () Bool)

(assert (=> b!60624 (=> (not res!33481) (not e!39865))))

(declare-datatypes ((tuple2!2062 0))(
  ( (tuple2!2063 (_1!1041 Bool) (_2!1041 LongMapFixedSize!630)) )
))
(declare-fun lt!24784 () tuple2!2062)

(assert (=> b!60624 (= res!33481 (and (_1!1041 lt!24784) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!24783 () Unit!1622)

(assert (=> b!60624 (= lt!24783 e!39866)))

(declare-fun c!7871 () Bool)

(declare-fun contains!697 (ListLongMap!1385 (_ BitVec 64)) Bool)

(assert (=> b!60624 (= c!7871 (contains!697 lt!24780 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun update!87 (LongMapFixedSize!630 (_ BitVec 64) V!2859) tuple2!2062)

(declare-fun get!1090 (ValueCell!861 V!2859) V!2859)

(declare-fun dynLambda!315 (Int (_ BitVec 64)) V!2859)

(assert (=> b!60624 (= lt!24784 (update!87 newMap!16 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and start!8736 res!33482) b!60615))

(assert (= (and b!60615 res!33484) b!60613))

(assert (= (and b!60613 res!33480) b!60617))

(assert (= (and b!60617 res!33479) b!60607))

(assert (= (and b!60607 res!33483) b!60624))

(assert (= (and b!60624 c!7871) b!60622))

(assert (= (and b!60624 (not c!7871)) b!60619))

(assert (= (and b!60624 res!33481) b!60614))

(assert (= (and b!60614 res!33485) b!60616))

(assert (= (and b!60609 condMapEmpty!2917) mapIsEmpty!2917))

(assert (= (and b!60609 (not condMapEmpty!2917)) mapNonEmpty!2918))

(get-info :version)

(assert (= (and mapNonEmpty!2918 ((_ is ValueCellFull!861) mapValue!2917)) b!60623))

(assert (= (and b!60609 ((_ is ValueCellFull!861) mapDefault!2917)) b!60608))

(assert (= b!60621 b!60609))

(assert (= b!60610 b!60621))

(assert (= b!60618 b!60610))

(assert (= start!8736 b!60618))

(assert (= (and b!60611 condMapEmpty!2918) mapIsEmpty!2918))

(assert (= (and b!60611 (not condMapEmpty!2918)) mapNonEmpty!2917))

(assert (= (and mapNonEmpty!2917 ((_ is ValueCellFull!861) mapValue!2918)) b!60606))

(assert (= (and b!60611 ((_ is ValueCellFull!861) mapDefault!2918)) b!60612))

(assert (= b!60620 b!60611))

(assert (= start!8736 b!60620))

(declare-fun b_lambda!2697 () Bool)

(assert (=> (not b_lambda!2697) (not b!60624)))

(declare-fun t!4834 () Bool)

(declare-fun tb!1353 () Bool)

(assert (=> (and b!60621 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))) t!4834) tb!1353))

(declare-fun result!2421 () Bool)

(assert (=> tb!1353 (= result!2421 tp_is_empty!2409)))

(assert (=> b!60624 t!4834))

(declare-fun b_and!3697 () Bool)

(assert (= b_and!3693 (and (=> t!4834 result!2421) b_and!3697)))

(declare-fun tb!1355 () Bool)

(declare-fun t!4836 () Bool)

(assert (=> (and b!60620 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))) t!4836) tb!1355))

(declare-fun result!2425 () Bool)

(assert (= result!2425 result!2421))

(assert (=> b!60624 t!4836))

(declare-fun b_and!3699 () Bool)

(assert (= b_and!3695 (and (=> t!4836 result!2425) b_and!3699)))

(declare-fun m!53203 () Bool)

(assert (=> b!60622 m!53203))

(declare-fun m!53205 () Bool)

(assert (=> b!60622 m!53205))

(declare-fun m!53207 () Bool)

(assert (=> b!60622 m!53207))

(declare-fun m!53209 () Bool)

(assert (=> b!60622 m!53209))

(assert (=> b!60622 m!53207))

(assert (=> b!60622 m!53207))

(declare-fun m!53211 () Bool)

(assert (=> b!60622 m!53211))

(assert (=> b!60622 m!53207))

(declare-fun m!53213 () Bool)

(assert (=> b!60622 m!53213))

(assert (=> b!60607 m!53207))

(declare-fun m!53215 () Bool)

(assert (=> b!60607 m!53215))

(declare-fun m!53217 () Bool)

(assert (=> b!60607 m!53217))

(declare-fun m!53219 () Bool)

(assert (=> b!60613 m!53219))

(declare-fun m!53221 () Bool)

(assert (=> start!8736 m!53221))

(declare-fun m!53223 () Bool)

(assert (=> b!60624 m!53223))

(declare-fun m!53225 () Bool)

(assert (=> b!60624 m!53225))

(declare-fun m!53227 () Bool)

(assert (=> b!60624 m!53227))

(assert (=> b!60624 m!53207))

(declare-fun m!53229 () Bool)

(assert (=> b!60624 m!53229))

(assert (=> b!60624 m!53207))

(assert (=> b!60624 m!53225))

(assert (=> b!60624 m!53207))

(assert (=> b!60624 m!53227))

(declare-fun m!53231 () Bool)

(assert (=> b!60624 m!53231))

(assert (=> b!60624 m!53223))

(declare-fun m!53233 () Bool)

(assert (=> b!60621 m!53233))

(declare-fun m!53235 () Bool)

(assert (=> b!60621 m!53235))

(declare-fun m!53237 () Bool)

(assert (=> b!60614 m!53237))

(declare-fun m!53239 () Bool)

(assert (=> mapNonEmpty!2917 m!53239))

(declare-fun m!53241 () Bool)

(assert (=> mapNonEmpty!2918 m!53241))

(declare-fun m!53243 () Bool)

(assert (=> b!60620 m!53243))

(declare-fun m!53245 () Bool)

(assert (=> b!60620 m!53245))

(check-sat (not b!60624) (not b!60607) (not b!60621) (not b_next!1985) (not mapNonEmpty!2918) (not b!60620) (not mapNonEmpty!2917) tp_is_empty!2409 b_and!3697 (not b!60614) (not b!60613) (not b!60622) b_and!3699 (not start!8736) (not b_lambda!2697) (not b_next!1987))
(check-sat b_and!3697 b_and!3699 (not b_next!1985) (not b_next!1987))
(get-model)

(declare-fun b_lambda!2701 () Bool)

(assert (= b_lambda!2697 (or (and b!60621 b_free!1985) (and b!60620 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))))) b_lambda!2701)))

(check-sat (not b!60624) (not b!60607) (not b!60621) (not b_next!1985) (not b_next!1987) (not mapNonEmpty!2918) (not b!60620) (not mapNonEmpty!2917) tp_is_empty!2409 b_and!3697 (not b_lambda!2701) (not b!60614) (not b!60613) (not b!60622) b_and!3699 (not start!8736))
(check-sat b_and!3697 b_and!3699 (not b_next!1985) (not b_next!1987))
(get-model)

(declare-fun d!11925 () Bool)

(assert (=> d!11925 (= (array_inv!1057 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvsge (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!60621 d!11925))

(declare-fun d!11927 () Bool)

(assert (=> d!11927 (= (array_inv!1058 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvsge (size!2024 (_values!2050 (v!2403 (underlying!231 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!60621 d!11927))

(declare-fun d!11929 () Bool)

(declare-fun e!39928 () Bool)

(assert (=> d!11929 e!39928))

(declare-fun res!33509 () Bool)

(assert (=> d!11929 (=> res!33509 e!39928)))

(declare-fun lt!24815 () Bool)

(assert (=> d!11929 (= res!33509 (not lt!24815))))

(declare-fun lt!24817 () Bool)

(assert (=> d!11929 (= lt!24815 lt!24817)))

(declare-fun lt!24816 () Unit!1622)

(declare-fun e!39927 () Unit!1622)

(assert (=> d!11929 (= lt!24816 e!39927)))

(declare-fun c!7877 () Bool)

(assert (=> d!11929 (= c!7877 lt!24817)))

(declare-fun containsKey!128 (List!1459 (_ BitVec 64)) Bool)

(assert (=> d!11929 (= lt!24817 (containsKey!128 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!11929 (= (contains!697 lt!24780 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) lt!24815)))

(declare-fun b!60692 () Bool)

(declare-fun lt!24818 () Unit!1622)

(assert (=> b!60692 (= e!39927 lt!24818)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!77 (List!1459 (_ BitVec 64)) Unit!1622)

(assert (=> b!60692 (= lt!24818 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-datatypes ((Option!130 0))(
  ( (Some!129 (v!2407 V!2859)) (None!128) )
))
(declare-fun isDefined!78 (Option!130) Bool)

(declare-fun getValueByKey!124 (List!1459 (_ BitVec 64)) Option!130)

(assert (=> b!60692 (isDefined!78 (getValueByKey!124 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!60693 () Bool)

(declare-fun Unit!1629 () Unit!1622)

(assert (=> b!60693 (= e!39927 Unit!1629)))

(declare-fun b!60694 () Bool)

(assert (=> b!60694 (= e!39928 (isDefined!78 (getValueByKey!124 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (= (and d!11929 c!7877) b!60692))

(assert (= (and d!11929 (not c!7877)) b!60693))

(assert (= (and d!11929 (not res!33509)) b!60694))

(assert (=> d!11929 m!53207))

(declare-fun m!53291 () Bool)

(assert (=> d!11929 m!53291))

(assert (=> b!60692 m!53207))

(declare-fun m!53293 () Bool)

(assert (=> b!60692 m!53293))

(assert (=> b!60692 m!53207))

(declare-fun m!53295 () Bool)

(assert (=> b!60692 m!53295))

(assert (=> b!60692 m!53295))

(declare-fun m!53297 () Bool)

(assert (=> b!60692 m!53297))

(assert (=> b!60694 m!53207))

(assert (=> b!60694 m!53295))

(assert (=> b!60694 m!53295))

(assert (=> b!60694 m!53297))

(assert (=> b!60624 d!11929))

(declare-fun b!60779 () Bool)

(declare-fun e!39976 () tuple2!2062)

(declare-fun e!39985 () tuple2!2062)

(assert (=> b!60779 (= e!39976 e!39985)))

(declare-fun c!7915 () Bool)

(declare-datatypes ((SeekEntryResult!238 0))(
  ( (MissingZero!238 (index!3076 (_ BitVec 32))) (Found!238 (index!3077 (_ BitVec 32))) (Intermediate!238 (undefined!1050 Bool) (index!3078 (_ BitVec 32)) (x!10172 (_ BitVec 32))) (Undefined!238) (MissingVacant!238 (index!3079 (_ BitVec 32))) )
))
(declare-fun lt!24888 () SeekEntryResult!238)

(assert (=> b!60779 (= c!7915 ((_ is MissingZero!238) lt!24888))))

(declare-fun bm!4612 () Bool)

(declare-fun call!4633 () Bool)

(declare-fun call!4630 () Bool)

(assert (=> bm!4612 (= call!4633 call!4630)))

(declare-fun bm!4613 () Bool)

(declare-fun call!4624 () ListLongMap!1385)

(declare-fun call!4627 () ListLongMap!1385)

(assert (=> bm!4613 (= call!4624 call!4627)))

(declare-fun b!60780 () Bool)

(declare-fun res!33548 () Bool)

(declare-fun e!39987 () Bool)

(assert (=> b!60780 (=> (not res!33548) (not e!39987))))

(declare-fun lt!24890 () SeekEntryResult!238)

(assert (=> b!60780 (= res!33548 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3076 lt!24890)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60781 () Bool)

(declare-fun e!39994 () Bool)

(declare-fun call!4620 () Bool)

(assert (=> b!60781 (= e!39994 (not call!4620))))

(declare-fun b!60782 () Bool)

(declare-fun res!33550 () Bool)

(declare-fun lt!24894 () SeekEntryResult!238)

(assert (=> b!60782 (= res!33550 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3079 lt!24894)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60782 (=> (not res!33550) (not e!39994))))

(declare-fun b!60783 () Bool)

(declare-fun c!7916 () Bool)

(assert (=> b!60783 (= c!7916 ((_ is MissingVacant!238) lt!24890))))

(declare-fun e!39983 () Bool)

(declare-fun e!39978 () Bool)

(assert (=> b!60783 (= e!39983 e!39978)))

(declare-fun b!60784 () Bool)

(declare-fun res!33549 () Bool)

(assert (=> b!60784 (= res!33549 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3079 lt!24890)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39979 () Bool)

(assert (=> b!60784 (=> (not res!33549) (not e!39979))))

(declare-fun b!60785 () Bool)

(declare-fun lt!24876 () Unit!1622)

(declare-fun lt!24891 () Unit!1622)

(assert (=> b!60785 (= lt!24876 lt!24891)))

(declare-fun call!4617 () ListLongMap!1385)

(assert (=> b!60785 (= call!4624 call!4617)))

(declare-fun lt!24895 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!16 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 V!2859 Int) Unit!1622)

(assert (=> b!60785 (= lt!24891 (lemmaChangeZeroKeyThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24895 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) (defaultEntry!2067 newMap!16)))))

(assert (=> b!60785 (= lt!24895 (bvor (extraKeys!1950 newMap!16) #b00000000000000000000000000000001))))

(declare-fun e!39988 () tuple2!2062)

(assert (=> b!60785 (= e!39988 (tuple2!2063 true (LongMapFixedSize!631 (defaultEntry!2067 newMap!16) (mask!5963 newMap!16) (bvor (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) (_size!364 newMap!16) (_keys!3695 newMap!16) (_values!2050 newMap!16) (_vacant!364 newMap!16))))))

(declare-fun bm!4614 () Bool)

(declare-fun call!4632 () Bool)

(assert (=> bm!4614 (= call!4630 call!4632)))

(declare-fun b!60786 () Bool)

(declare-fun e!39974 () Unit!1622)

(declare-fun lt!24896 () Unit!1622)

(assert (=> b!60786 (= e!39974 lt!24896)))

(declare-fun call!4628 () Unit!1622)

(assert (=> b!60786 (= lt!24896 call!4628)))

(declare-fun lt!24877 () SeekEntryResult!238)

(declare-fun call!4616 () SeekEntryResult!238)

(assert (=> b!60786 (= lt!24877 call!4616)))

(declare-fun res!33538 () Bool)

(assert (=> b!60786 (= res!33538 ((_ is Found!238) lt!24877))))

(declare-fun e!39992 () Bool)

(assert (=> b!60786 (=> (not res!33538) (not e!39992))))

(assert (=> b!60786 e!39992))

(declare-fun b!60787 () Bool)

(declare-fun call!4622 () Bool)

(assert (=> b!60787 (= e!39979 (not call!4622))))

(declare-fun b!60788 () Bool)

(declare-fun e!39975 () Unit!1622)

(declare-fun Unit!1630 () Unit!1622)

(assert (=> b!60788 (= e!39975 Unit!1630)))

(declare-fun lt!24874 () Unit!1622)

(assert (=> b!60788 (= lt!24874 call!4628)))

(declare-fun lt!24886 () SeekEntryResult!238)

(declare-fun call!4619 () SeekEntryResult!238)

(assert (=> b!60788 (= lt!24886 call!4619)))

(declare-fun res!33551 () Bool)

(assert (=> b!60788 (= res!33551 ((_ is Found!238) lt!24886))))

(declare-fun e!39973 () Bool)

(assert (=> b!60788 (=> (not res!33551) (not e!39973))))

(assert (=> b!60788 e!39973))

(declare-fun lt!24883 () Unit!1622)

(assert (=> b!60788 (= lt!24883 lt!24874)))

(assert (=> b!60788 false))

(declare-fun b!60789 () Bool)

(declare-fun Unit!1631 () Unit!1622)

(assert (=> b!60789 (= e!39974 Unit!1631)))

(declare-fun lt!24889 () Unit!1622)

(declare-fun call!4615 () Unit!1622)

(assert (=> b!60789 (= lt!24889 call!4615)))

(assert (=> b!60789 (= lt!24890 call!4616)))

(declare-fun c!7919 () Bool)

(assert (=> b!60789 (= c!7919 ((_ is MissingZero!238) lt!24890))))

(assert (=> b!60789 e!39983))

(declare-fun lt!24897 () Unit!1622)

(assert (=> b!60789 (= lt!24897 lt!24889)))

(assert (=> b!60789 false))

(declare-fun b!60790 () Bool)

(declare-fun res!33540 () Bool)

(assert (=> b!60790 (=> (not res!33540) (not e!39987))))

(declare-fun call!4625 () Bool)

(assert (=> b!60790 (= res!33540 call!4625)))

(assert (=> b!60790 (= e!39983 e!39987)))

(declare-fun b!60791 () Bool)

(declare-fun e!39991 () ListLongMap!1385)

(assert (=> b!60791 (= e!39991 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun bm!4615 () Bool)

(declare-fun call!4638 () Bool)

(assert (=> bm!4615 (= call!4638 call!4632)))

(declare-fun b!60792 () Bool)

(assert (=> b!60792 (= e!39978 e!39979)))

(declare-fun res!33542 () Bool)

(assert (=> b!60792 (= res!33542 call!4625)))

(assert (=> b!60792 (=> (not res!33542) (not e!39979))))

(declare-fun b!60793 () Bool)

(declare-fun e!39986 () Bool)

(declare-fun call!4637 () ListLongMap!1385)

(declare-fun call!4621 () ListLongMap!1385)

(assert (=> b!60793 (= e!39986 (= call!4637 call!4621))))

(declare-fun b!60794 () Bool)

(declare-fun e!39977 () Bool)

(assert (=> b!60794 (= e!39977 e!39994)))

(declare-fun res!33541 () Bool)

(assert (=> b!60794 (= res!33541 call!4633)))

(assert (=> b!60794 (=> (not res!33541) (not e!39994))))

(declare-fun bm!4616 () Bool)

(declare-fun call!4634 () ListLongMap!1385)

(declare-fun lt!24892 () array!3748)

(declare-fun c!7914 () Bool)

(assert (=> bm!4616 (= call!4634 (getCurrentListMap!405 (_keys!3695 newMap!16) (ite c!7914 (_values!2050 newMap!16) lt!24892) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!60795 () Bool)

(declare-fun c!7909 () Bool)

(assert (=> b!60795 (= c!7909 ((_ is MissingVacant!238) lt!24894))))

(declare-fun e!39993 () Bool)

(assert (=> b!60795 (= e!39993 e!39977)))

(declare-fun call!4629 () Bool)

(declare-fun bm!4617 () Bool)

(assert (=> bm!4617 (= call!4629 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!60796 () Bool)

(assert (=> b!60796 (= e!39992 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24877)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun bm!4618 () Bool)

(declare-fun call!4618 () SeekEntryResult!238)

(assert (=> bm!4618 (= call!4616 call!4618)))

(declare-fun b!60797 () Bool)

(declare-fun e!39980 () Bool)

(assert (=> b!60797 (= e!39980 e!39986)))

(declare-fun c!7913 () Bool)

(declare-fun lt!24880 () tuple2!2062)

(assert (=> b!60797 (= c!7913 (_1!1041 lt!24880))))

(declare-fun e!39982 () Bool)

(declare-fun b!60798 () Bool)

(declare-fun +!82 (ListLongMap!1385 tuple2!2060) ListLongMap!1385)

(assert (=> b!60798 (= e!39982 (= call!4637 (+!82 call!4621 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!4619 () Bool)

(assert (=> bm!4619 (= call!4622 call!4629)))

(declare-fun bm!4620 () Bool)

(declare-fun c!7911 () Bool)

(declare-fun c!7918 () Bool)

(declare-fun c!7910 () Bool)

(declare-fun c!7917 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4620 (= call!4632 (inRange!0 (ite c!7911 (ite c!7910 (index!3077 lt!24886) (ite c!7918 (index!3076 lt!24894) (index!3079 lt!24894))) (ite c!7917 (index!3077 lt!24877) (ite c!7919 (index!3076 lt!24890) (index!3079 lt!24890)))) (mask!5963 newMap!16)))))

(declare-fun b!60799 () Bool)

(declare-fun lt!24881 () tuple2!2062)

(assert (=> b!60799 (= e!39976 (tuple2!2063 (_1!1041 lt!24881) (_2!1041 lt!24881)))))

(declare-fun call!4635 () tuple2!2062)

(assert (=> b!60799 (= lt!24881 call!4635)))

(declare-fun bm!4621 () Bool)

(assert (=> bm!4621 (= call!4637 (map!1115 (_2!1041 lt!24880)))))

(declare-fun b!60800 () Bool)

(declare-fun e!39981 () tuple2!2062)

(declare-fun e!39989 () tuple2!2062)

(assert (=> b!60800 (= e!39981 e!39989)))

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3746 (_ BitVec 32)) SeekEntryResult!238)

(assert (=> b!60800 (= lt!24888 (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (=> b!60800 (= c!7911 ((_ is Undefined!238) lt!24888))))

(declare-fun b!60801 () Bool)

(assert (=> b!60801 (= e!39981 e!39988)))

(declare-fun c!7908 () Bool)

(assert (=> b!60801 (= c!7908 (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60802 () Bool)

(declare-fun e!39984 () ListLongMap!1385)

(declare-fun call!4623 () ListLongMap!1385)

(assert (=> b!60802 (= e!39984 call!4623)))

(declare-fun b!60803 () Bool)

(declare-fun lt!24878 () tuple2!2062)

(assert (=> b!60803 (= lt!24878 call!4635)))

(assert (=> b!60803 (= e!39985 (tuple2!2063 (_1!1041 lt!24878) (_2!1041 lt!24878)))))

(declare-fun b!60804 () Bool)

(declare-fun lt!24875 () Unit!1622)

(assert (=> b!60804 (= lt!24875 e!39975)))

(declare-fun call!4631 () Bool)

(assert (=> b!60804 (= c!7910 call!4631)))

(assert (=> b!60804 (= e!39989 (tuple2!2063 false newMap!16))))

(declare-fun b!60805 () Bool)

(assert (=> b!60805 (= e!39984 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!60806 () Bool)

(declare-fun lt!24879 () Unit!1622)

(declare-fun lt!24893 () Unit!1622)

(assert (=> b!60806 (= lt!24879 lt!24893)))

(assert (=> b!60806 (contains!697 call!4634 (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888)))))

(declare-fun lemmaValidKeyInArrayIsInListMap!74 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) Int) Unit!1622)

(assert (=> b!60806 (= lt!24893 (lemmaValidKeyInArrayIsInListMap!74 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3077 lt!24888) (defaultEntry!2067 newMap!16)))))

(assert (=> b!60806 (= lt!24892 (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))))

(declare-fun lt!24899 () Unit!1622)

(declare-fun lt!24887 () Unit!1622)

(assert (=> b!60806 (= lt!24899 lt!24887)))

(assert (=> b!60806 (= call!4627 call!4623)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!16 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) (_ BitVec 64) V!2859 Int) Unit!1622)

(assert (=> b!60806 (= lt!24887 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3077 lt!24888) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(declare-fun lt!24873 () Unit!1622)

(assert (=> b!60806 (= lt!24873 e!39974)))

(assert (=> b!60806 (= c!7917 call!4631)))

(assert (=> b!60806 (= e!39985 (tuple2!2063 true (LongMapFixedSize!631 (defaultEntry!2067 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (_size!364 newMap!16) (_keys!3695 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (_vacant!364 newMap!16))))))

(declare-fun bm!4622 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) Int) Unit!1622)

(assert (=> bm!4622 (= call!4615 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(declare-fun d!11931 () Bool)

(assert (=> d!11931 e!39980))

(declare-fun res!33544 () Bool)

(assert (=> d!11931 (=> (not res!33544) (not e!39980))))

(assert (=> d!11931 (= res!33544 (valid!259 (_2!1041 lt!24880)))))

(assert (=> d!11931 (= lt!24880 e!39981)))

(assert (=> d!11931 (= c!7914 (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvneg (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!11931 (valid!259 newMap!16)))

(assert (=> d!11931 (= (update!87 newMap!16 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!24880)))

(declare-fun b!60807 () Bool)

(assert (=> b!60807 (= e!39978 ((_ is Undefined!238) lt!24890))))

(declare-fun b!60808 () Bool)

(declare-fun e!39990 () Bool)

(assert (=> b!60808 (= e!39990 (not call!4620))))

(declare-fun b!60809 () Bool)

(declare-fun res!33546 () Bool)

(assert (=> b!60809 (=> (not res!33546) (not e!39990))))

(assert (=> b!60809 (= res!33546 call!4633)))

(assert (=> b!60809 (= e!39993 e!39990)))

(declare-fun b!60810 () Bool)

(declare-fun res!33547 () Bool)

(assert (=> b!60810 (= res!33547 call!4638)))

(assert (=> b!60810 (=> (not res!33547) (not e!39992))))

(declare-fun bm!4623 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) Int) Unit!1622)

(assert (=> bm!4623 (= call!4628 (lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(declare-fun bm!4624 () Bool)

(assert (=> bm!4624 (= call!4618 (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun b!60811 () Bool)

(declare-fun res!33545 () Bool)

(assert (=> b!60811 (= res!33545 call!4630)))

(assert (=> b!60811 (=> (not res!33545) (not e!39973))))

(declare-fun b!60812 () Bool)

(assert (=> b!60812 (= e!39977 ((_ is Undefined!238) lt!24894))))

(declare-fun bm!4625 () Bool)

(assert (=> bm!4625 (= call!4627 (+!82 e!39991 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!7912 () Bool)

(assert (=> bm!4625 (= c!7912 c!7914)))

(declare-fun b!60813 () Bool)

(assert (=> b!60813 (= e!39986 e!39982)))

(declare-fun res!33543 () Bool)

(assert (=> b!60813 (= res!33543 (contains!697 call!4637 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!60813 (=> (not res!33543) (not e!39982))))

(declare-fun b!60814 () Bool)

(assert (=> b!60814 (= e!39973 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24886)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun c!7906 () Bool)

(declare-fun bm!4626 () Bool)

(declare-fun updateHelperNewKey!16 (LongMapFixedSize!630 (_ BitVec 64) V!2859 (_ BitVec 32)) tuple2!2062)

(assert (=> bm!4626 (= call!4635 (updateHelperNewKey!16 newMap!16 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888))))))

(declare-fun bm!4627 () Bool)

(declare-fun c!7907 () Bool)

(assert (=> bm!4627 (= c!7907 c!7911)))

(assert (=> bm!4627 (= call!4631 (contains!697 e!39984 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun bm!4628 () Bool)

(assert (=> bm!4628 (= call!4621 (map!1115 newMap!16))))

(declare-fun bm!4629 () Bool)

(declare-fun call!4636 () ListLongMap!1385)

(assert (=> bm!4629 (= call!4623 call!4636)))

(declare-fun lt!24882 () (_ BitVec 32))

(declare-fun bm!4630 () Bool)

(assert (=> bm!4630 (= call!4636 (getCurrentListMap!405 (_keys!3695 newMap!16) (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) (mask!5963 newMap!16) (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!60815 () Bool)

(assert (=> b!60815 (= e!39987 (not call!4622))))

(declare-fun b!60816 () Bool)

(declare-fun res!33539 () Bool)

(assert (=> b!60816 (=> (not res!33539) (not e!39990))))

(assert (=> b!60816 (= res!33539 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3076 lt!24894)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4631 () Bool)

(assert (=> bm!4631 (= call!4617 call!4636)))

(declare-fun bm!4632 () Bool)

(assert (=> bm!4632 (= call!4619 call!4618)))

(declare-fun bm!4633 () Bool)

(assert (=> bm!4633 (= call!4620 call!4629)))

(declare-fun bm!4634 () Bool)

(declare-fun call!4626 () ListLongMap!1385)

(assert (=> bm!4634 (= call!4626 call!4634)))

(declare-fun bm!4635 () Bool)

(assert (=> bm!4635 (= call!4625 call!4638)))

(declare-fun b!60817 () Bool)

(assert (=> b!60817 (= c!7906 ((_ is MissingVacant!238) lt!24888))))

(assert (=> b!60817 (= e!39989 e!39976)))

(declare-fun b!60818 () Bool)

(assert (=> b!60818 (= e!39991 call!4626)))

(declare-fun b!60819 () Bool)

(declare-fun lt!24885 () Unit!1622)

(assert (=> b!60819 (= e!39975 lt!24885)))

(assert (=> b!60819 (= lt!24885 call!4615)))

(assert (=> b!60819 (= lt!24894 call!4619)))

(assert (=> b!60819 (= c!7918 ((_ is MissingZero!238) lt!24894))))

(assert (=> b!60819 e!39993))

(declare-fun b!60820 () Bool)

(declare-fun lt!24884 () Unit!1622)

(declare-fun lt!24898 () Unit!1622)

(assert (=> b!60820 (= lt!24884 lt!24898)))

(assert (=> b!60820 (= call!4624 call!4617)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!16 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 V!2859 Int) Unit!1622)

(assert (=> b!60820 (= lt!24898 (lemmaChangeLongMinValueKeyThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(assert (=> b!60820 (= lt!24882 (bvor (extraKeys!1950 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!60820 (= e!39988 (tuple2!2063 true (LongMapFixedSize!631 (defaultEntry!2067 newMap!16) (mask!5963 newMap!16) (bvor (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!364 newMap!16) (_keys!3695 newMap!16) (_values!2050 newMap!16) (_vacant!364 newMap!16))))))

(assert (= (and d!11931 c!7914) b!60801))

(assert (= (and d!11931 (not c!7914)) b!60800))

(assert (= (and b!60801 c!7908) b!60785))

(assert (= (and b!60801 (not c!7908)) b!60820))

(assert (= (or b!60785 b!60820) bm!4631))

(assert (= (or b!60785 b!60820) bm!4634))

(assert (= (or b!60785 b!60820) bm!4613))

(assert (= (and b!60800 c!7911) b!60804))

(assert (= (and b!60800 (not c!7911)) b!60817))

(assert (= (and b!60804 c!7910) b!60788))

(assert (= (and b!60804 (not c!7910)) b!60819))

(assert (= (and b!60788 res!33551) b!60811))

(assert (= (and b!60811 res!33545) b!60814))

(assert (= (and b!60819 c!7918) b!60809))

(assert (= (and b!60819 (not c!7918)) b!60795))

(assert (= (and b!60809 res!33546) b!60816))

(assert (= (and b!60816 res!33539) b!60808))

(assert (= (and b!60795 c!7909) b!60794))

(assert (= (and b!60795 (not c!7909)) b!60812))

(assert (= (and b!60794 res!33541) b!60782))

(assert (= (and b!60782 res!33550) b!60781))

(assert (= (or b!60809 b!60794) bm!4612))

(assert (= (or b!60808 b!60781) bm!4633))

(assert (= (or b!60811 bm!4612) bm!4614))

(assert (= (or b!60788 b!60819) bm!4632))

(assert (= (and b!60817 c!7906) b!60799))

(assert (= (and b!60817 (not c!7906)) b!60779))

(assert (= (and b!60779 c!7915) b!60803))

(assert (= (and b!60779 (not c!7915)) b!60806))

(assert (= (and b!60806 c!7917) b!60786))

(assert (= (and b!60806 (not c!7917)) b!60789))

(assert (= (and b!60786 res!33538) b!60810))

(assert (= (and b!60810 res!33547) b!60796))

(assert (= (and b!60789 c!7919) b!60790))

(assert (= (and b!60789 (not c!7919)) b!60783))

(assert (= (and b!60790 res!33540) b!60780))

(assert (= (and b!60780 res!33548) b!60815))

(assert (= (and b!60783 c!7916) b!60792))

(assert (= (and b!60783 (not c!7916)) b!60807))

(assert (= (and b!60792 res!33542) b!60784))

(assert (= (and b!60784 res!33549) b!60787))

(assert (= (or b!60790 b!60792) bm!4635))

(assert (= (or b!60815 b!60787) bm!4619))

(assert (= (or b!60810 bm!4635) bm!4615))

(assert (= (or b!60786 b!60789) bm!4618))

(assert (= (or b!60799 b!60803) bm!4626))

(assert (= (or b!60788 b!60786) bm!4623))

(assert (= (or b!60819 b!60789) bm!4622))

(assert (= (or b!60804 b!60806) bm!4629))

(assert (= (or bm!4614 bm!4615) bm!4620))

(assert (= (or bm!4632 bm!4618) bm!4624))

(assert (= (or bm!4633 bm!4619) bm!4617))

(assert (= (or b!60804 b!60806) bm!4627))

(assert (= (and bm!4627 c!7907) b!60802))

(assert (= (and bm!4627 (not c!7907)) b!60805))

(assert (= (or bm!4631 bm!4629) bm!4630))

(assert (= (or bm!4634 b!60806) bm!4616))

(assert (= (or bm!4613 b!60806) bm!4625))

(assert (= (and bm!4625 c!7912) b!60818))

(assert (= (and bm!4625 (not c!7912)) b!60791))

(assert (= (and d!11931 res!33544) b!60797))

(assert (= (and b!60797 c!7913) b!60813))

(assert (= (and b!60797 (not c!7913)) b!60793))

(assert (= (and b!60813 res!33543) b!60798))

(assert (= (or b!60813 b!60798 b!60793) bm!4621))

(assert (= (or b!60798 b!60793) bm!4628))

(declare-fun m!53299 () Bool)

(assert (=> b!60798 m!53299))

(declare-fun m!53301 () Bool)

(assert (=> bm!4621 m!53301))

(assert (=> bm!4623 m!53207))

(declare-fun m!53303 () Bool)

(assert (=> bm!4623 m!53303))

(declare-fun m!53305 () Bool)

(assert (=> b!60814 m!53305))

(assert (=> b!60813 m!53207))

(declare-fun m!53307 () Bool)

(assert (=> b!60813 m!53307))

(assert (=> bm!4622 m!53207))

(declare-fun m!53309 () Bool)

(assert (=> bm!4622 m!53309))

(assert (=> b!60785 m!53227))

(declare-fun m!53311 () Bool)

(assert (=> b!60785 m!53311))

(assert (=> bm!4624 m!53207))

(declare-fun m!53313 () Bool)

(assert (=> bm!4624 m!53313))

(declare-fun m!53315 () Bool)

(assert (=> b!60780 m!53315))

(declare-fun m!53317 () Bool)

(assert (=> bm!4625 m!53317))

(declare-fun m!53319 () Bool)

(assert (=> b!60791 m!53319))

(declare-fun m!53321 () Bool)

(assert (=> d!11931 m!53321))

(assert (=> d!11931 m!53219))

(declare-fun m!53323 () Bool)

(assert (=> b!60784 m!53323))

(declare-fun m!53325 () Bool)

(assert (=> b!60816 m!53325))

(declare-fun m!53327 () Bool)

(assert (=> b!60796 m!53327))

(declare-fun m!53329 () Bool)

(assert (=> bm!4630 m!53329))

(declare-fun m!53331 () Bool)

(assert (=> bm!4630 m!53331))

(assert (=> bm!4617 m!53207))

(declare-fun m!53333 () Bool)

(assert (=> bm!4617 m!53333))

(assert (=> bm!4626 m!53207))

(assert (=> bm!4626 m!53227))

(declare-fun m!53335 () Bool)

(assert (=> bm!4626 m!53335))

(declare-fun m!53337 () Bool)

(assert (=> bm!4620 m!53337))

(assert (=> b!60806 m!53207))

(assert (=> b!60806 m!53227))

(declare-fun m!53339 () Bool)

(assert (=> b!60806 m!53339))

(declare-fun m!53341 () Bool)

(assert (=> b!60806 m!53341))

(declare-fun m!53343 () Bool)

(assert (=> b!60806 m!53343))

(assert (=> b!60806 m!53329))

(declare-fun m!53345 () Bool)

(assert (=> b!60806 m!53345))

(assert (=> b!60806 m!53341))

(assert (=> b!60820 m!53227))

(declare-fun m!53347 () Bool)

(assert (=> b!60820 m!53347))

(declare-fun m!53349 () Bool)

(assert (=> bm!4616 m!53349))

(assert (=> bm!4627 m!53207))

(declare-fun m!53351 () Bool)

(assert (=> bm!4627 m!53351))

(assert (=> b!60805 m!53319))

(declare-fun m!53353 () Bool)

(assert (=> b!60782 m!53353))

(assert (=> bm!4628 m!53215))

(assert (=> b!60800 m!53207))

(assert (=> b!60800 m!53313))

(assert (=> b!60624 d!11931))

(declare-fun d!11933 () Bool)

(declare-fun c!7922 () Bool)

(assert (=> d!11933 (= c!7922 ((_ is ValueCellFull!861) (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun e!39997 () V!2859)

(assert (=> d!11933 (= (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39997)))

(declare-fun b!60825 () Bool)

(declare-fun get!1091 (ValueCell!861 V!2859) V!2859)

(assert (=> b!60825 (= e!39997 (get!1091 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!60826 () Bool)

(declare-fun get!1092 (ValueCell!861 V!2859) V!2859)

(assert (=> b!60826 (= e!39997 (get!1092 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11933 c!7922) b!60825))

(assert (= (and d!11933 (not c!7922)) b!60826))

(assert (=> b!60825 m!53223))

(assert (=> b!60825 m!53225))

(declare-fun m!53355 () Bool)

(assert (=> b!60825 m!53355))

(assert (=> b!60826 m!53223))

(assert (=> b!60826 m!53225))

(declare-fun m!53357 () Bool)

(assert (=> b!60826 m!53357))

(assert (=> b!60624 d!11933))

(declare-fun d!11935 () Bool)

(assert (=> d!11935 (= (map!1115 newMap!16) (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun bs!2630 () Bool)

(assert (= bs!2630 d!11935))

(assert (=> bs!2630 m!53319))

(assert (=> b!60607 d!11935))

(declare-fun bm!4650 () Bool)

(declare-fun call!4656 () ListLongMap!1385)

(declare-fun call!4654 () ListLongMap!1385)

(assert (=> bm!4650 (= call!4656 call!4654)))

(declare-fun b!60869 () Bool)

(declare-fun res!33573 () Bool)

(declare-fun e!40030 () Bool)

(assert (=> b!60869 (=> (not res!33573) (not e!40030))))

(declare-fun e!40031 () Bool)

(assert (=> b!60869 (= res!33573 e!40031)))

(declare-fun c!7935 () Bool)

(assert (=> b!60869 (= c!7935 (not (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4651 () Bool)

(declare-fun getCurrentListMapNoExtraKeys!45 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) Int) ListLongMap!1385)

(assert (=> bm!4651 (= call!4654 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun b!60870 () Bool)

(declare-fun e!40036 () Bool)

(declare-fun lt!24948 () ListLongMap!1385)

(declare-fun apply!67 (ListLongMap!1385 (_ BitVec 64)) V!2859)

(assert (=> b!60870 (= e!40036 (= (apply!67 lt!24948 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun b!60871 () Bool)

(declare-fun e!40028 () Bool)

(assert (=> b!60871 (= e!40031 e!40028)))

(declare-fun res!33576 () Bool)

(declare-fun call!4657 () Bool)

(assert (=> b!60871 (= res!33576 call!4657)))

(assert (=> b!60871 (=> (not res!33576) (not e!40028))))

(declare-fun b!60872 () Bool)

(assert (=> b!60872 (= e!40028 (= (apply!67 lt!24948 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun b!60873 () Bool)

(declare-fun e!40035 () Bool)

(assert (=> b!60873 (= e!40035 e!40036)))

(declare-fun res!33570 () Bool)

(declare-fun call!4659 () Bool)

(assert (=> b!60873 (= res!33570 call!4659)))

(assert (=> b!60873 (=> (not res!33570) (not e!40036))))

(declare-fun b!60874 () Bool)

(declare-fun c!7939 () Bool)

(assert (=> b!60874 (= c!7939 (and (not (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40033 () ListLongMap!1385)

(declare-fun e!40024 () ListLongMap!1385)

(assert (=> b!60874 (= e!40033 e!40024)))

(declare-fun b!60875 () Bool)

(declare-fun e!40032 () Bool)

(declare-fun e!40026 () Bool)

(assert (=> b!60875 (= e!40032 e!40026)))

(declare-fun res!33574 () Bool)

(assert (=> b!60875 (=> (not res!33574) (not e!40026))))

(assert (=> b!60875 (= res!33574 (contains!697 lt!24948 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!60875 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!60876 () Bool)

(assert (=> b!60876 (= e!40030 e!40035)))

(declare-fun c!7940 () Bool)

(assert (=> b!60876 (= c!7940 (not (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4652 () Bool)

(assert (=> bm!4652 (= call!4657 (contains!697 lt!24948 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60877 () Bool)

(declare-fun call!4655 () ListLongMap!1385)

(assert (=> b!60877 (= e!40024 call!4655)))

(declare-fun c!7938 () Bool)

(declare-fun c!7936 () Bool)

(declare-fun call!4653 () ListLongMap!1385)

(declare-fun call!4658 () ListLongMap!1385)

(declare-fun bm!4653 () Bool)

(assert (=> bm!4653 (= call!4653 (+!82 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658)) (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!60878 () Bool)

(declare-fun e!40029 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!60878 (= e!40029 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!60879 () Bool)

(assert (=> b!60879 (= e!40024 call!4658)))

(declare-fun b!60880 () Bool)

(declare-fun e!40025 () Unit!1622)

(declare-fun Unit!1632 () Unit!1622)

(assert (=> b!60880 (= e!40025 Unit!1632)))

(declare-fun bm!4654 () Bool)

(assert (=> bm!4654 (= call!4658 call!4656)))

(declare-fun d!11937 () Bool)

(assert (=> d!11937 e!40030))

(declare-fun res!33577 () Bool)

(assert (=> d!11937 (=> (not res!33577) (not e!40030))))

(assert (=> d!11937 (= res!33577 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun lt!24960 () ListLongMap!1385)

(assert (=> d!11937 (= lt!24948 lt!24960)))

(declare-fun lt!24953 () Unit!1622)

(assert (=> d!11937 (= lt!24953 e!40025)))

(declare-fun c!7937 () Bool)

(declare-fun e!40027 () Bool)

(assert (=> d!11937 (= c!7937 e!40027)))

(declare-fun res!33575 () Bool)

(assert (=> d!11937 (=> (not res!33575) (not e!40027))))

(assert (=> d!11937 (= res!33575 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun e!40034 () ListLongMap!1385)

(assert (=> d!11937 (= lt!24960 e!40034)))

(assert (=> d!11937 (= c!7936 (and (not (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11937 (validMask!0 (mask!5963 (v!2403 (underlying!231 thiss!992))))))

(assert (=> d!11937 (= (getCurrentListMap!405 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))) lt!24948)))

(declare-fun b!60881 () Bool)

(declare-fun lt!24951 () Unit!1622)

(assert (=> b!60881 (= e!40025 lt!24951)))

(declare-fun lt!24954 () ListLongMap!1385)

(assert (=> b!60881 (= lt!24954 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun lt!24945 () (_ BitVec 64))

(assert (=> b!60881 (= lt!24945 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24946 () (_ BitVec 64))

(assert (=> b!60881 (= lt!24946 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!24961 () Unit!1622)

(declare-fun addStillContains!43 (ListLongMap!1385 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1622)

(assert (=> b!60881 (= lt!24961 (addStillContains!43 lt!24954 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24946))))

(assert (=> b!60881 (contains!697 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24946)))

(declare-fun lt!24950 () Unit!1622)

(assert (=> b!60881 (= lt!24950 lt!24961)))

(declare-fun lt!24944 () ListLongMap!1385)

(assert (=> b!60881 (= lt!24944 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun lt!24964 () (_ BitVec 64))

(assert (=> b!60881 (= lt!24964 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24956 () (_ BitVec 64))

(assert (=> b!60881 (= lt!24956 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!24949 () Unit!1622)

(declare-fun addApplyDifferent!43 (ListLongMap!1385 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1622)

(assert (=> b!60881 (= lt!24949 (addApplyDifferent!43 lt!24944 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24956))))

(assert (=> b!60881 (= (apply!67 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24956) (apply!67 lt!24944 lt!24956))))

(declare-fun lt!24962 () Unit!1622)

(assert (=> b!60881 (= lt!24962 lt!24949)))

(declare-fun lt!24959 () ListLongMap!1385)

(assert (=> b!60881 (= lt!24959 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun lt!24963 () (_ BitVec 64))

(assert (=> b!60881 (= lt!24963 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24957 () (_ BitVec 64))

(assert (=> b!60881 (= lt!24957 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!24947 () Unit!1622)

(assert (=> b!60881 (= lt!24947 (addApplyDifferent!43 lt!24959 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24957))))

(assert (=> b!60881 (= (apply!67 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24957) (apply!67 lt!24959 lt!24957))))

(declare-fun lt!24955 () Unit!1622)

(assert (=> b!60881 (= lt!24955 lt!24947)))

(declare-fun lt!24965 () ListLongMap!1385)

(assert (=> b!60881 (= lt!24965 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun lt!24952 () (_ BitVec 64))

(assert (=> b!60881 (= lt!24952 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24958 () (_ BitVec 64))

(assert (=> b!60881 (= lt!24958 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!60881 (= lt!24951 (addApplyDifferent!43 lt!24965 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24958))))

(assert (=> b!60881 (= (apply!67 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24958) (apply!67 lt!24965 lt!24958))))

(declare-fun b!60882 () Bool)

(assert (=> b!60882 (= e!40034 (+!82 call!4653 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun bm!4655 () Bool)

(assert (=> bm!4655 (= call!4655 call!4653)))

(declare-fun b!60883 () Bool)

(assert (=> b!60883 (= e!40035 (not call!4659))))

(declare-fun b!60884 () Bool)

(assert (=> b!60884 (= e!40031 (not call!4657))))

(declare-fun b!60885 () Bool)

(assert (=> b!60885 (= e!40033 call!4655)))

(declare-fun b!60886 () Bool)

(declare-fun res!33578 () Bool)

(assert (=> b!60886 (=> (not res!33578) (not e!40030))))

(assert (=> b!60886 (= res!33578 e!40032)))

(declare-fun res!33572 () Bool)

(assert (=> b!60886 (=> res!33572 e!40032)))

(assert (=> b!60886 (= res!33572 (not e!40029))))

(declare-fun res!33571 () Bool)

(assert (=> b!60886 (=> (not res!33571) (not e!40029))))

(assert (=> b!60886 (= res!33571 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!60887 () Bool)

(assert (=> b!60887 (= e!40026 (= (apply!67 lt!24948 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60887 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_values!2050 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> b!60887 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!60888 () Bool)

(assert (=> b!60888 (= e!40027 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!60889 () Bool)

(assert (=> b!60889 (= e!40034 e!40033)))

(assert (=> b!60889 (= c!7938 (and (not (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4656 () Bool)

(assert (=> bm!4656 (= call!4659 (contains!697 lt!24948 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11937 c!7936) b!60882))

(assert (= (and d!11937 (not c!7936)) b!60889))

(assert (= (and b!60889 c!7938) b!60885))

(assert (= (and b!60889 (not c!7938)) b!60874))

(assert (= (and b!60874 c!7939) b!60877))

(assert (= (and b!60874 (not c!7939)) b!60879))

(assert (= (or b!60877 b!60879) bm!4654))

(assert (= (or b!60885 bm!4654) bm!4650))

(assert (= (or b!60885 b!60877) bm!4655))

(assert (= (or b!60882 bm!4650) bm!4651))

(assert (= (or b!60882 bm!4655) bm!4653))

(assert (= (and d!11937 res!33575) b!60888))

(assert (= (and d!11937 c!7937) b!60881))

(assert (= (and d!11937 (not c!7937)) b!60880))

(assert (= (and d!11937 res!33577) b!60886))

(assert (= (and b!60886 res!33571) b!60878))

(assert (= (and b!60886 (not res!33572)) b!60875))

(assert (= (and b!60875 res!33574) b!60887))

(assert (= (and b!60886 res!33578) b!60869))

(assert (= (and b!60869 c!7935) b!60871))

(assert (= (and b!60869 (not c!7935)) b!60884))

(assert (= (and b!60871 res!33576) b!60872))

(assert (= (or b!60871 b!60884) bm!4652))

(assert (= (and b!60869 res!33573) b!60876))

(assert (= (and b!60876 c!7940) b!60873))

(assert (= (and b!60876 (not c!7940)) b!60883))

(assert (= (and b!60873 res!33570) b!60870))

(assert (= (or b!60873 b!60883) bm!4656))

(declare-fun b_lambda!2703 () Bool)

(assert (=> (not b_lambda!2703) (not b!60887)))

(assert (=> b!60887 t!4834))

(declare-fun b_and!3709 () Bool)

(assert (= b_and!3697 (and (=> t!4834 result!2421) b_and!3709)))

(assert (=> b!60887 t!4836))

(declare-fun b_and!3711 () Bool)

(assert (= b_and!3699 (and (=> t!4836 result!2425) b_and!3711)))

(declare-fun m!53359 () Bool)

(assert (=> b!60878 m!53359))

(assert (=> b!60878 m!53359))

(declare-fun m!53361 () Bool)

(assert (=> b!60878 m!53361))

(declare-fun m!53363 () Bool)

(assert (=> bm!4652 m!53363))

(declare-fun m!53365 () Bool)

(assert (=> bm!4656 m!53365))

(declare-fun m!53367 () Bool)

(assert (=> bm!4653 m!53367))

(assert (=> b!60875 m!53359))

(assert (=> b!60875 m!53359))

(declare-fun m!53369 () Bool)

(assert (=> b!60875 m!53369))

(declare-fun m!53371 () Bool)

(assert (=> bm!4651 m!53371))

(declare-fun m!53373 () Bool)

(assert (=> b!60882 m!53373))

(declare-fun m!53375 () Bool)

(assert (=> b!60870 m!53375))

(assert (=> b!60888 m!53359))

(assert (=> b!60888 m!53359))

(assert (=> b!60888 m!53361))

(assert (=> b!60887 m!53359))

(declare-fun m!53377 () Bool)

(assert (=> b!60887 m!53377))

(assert (=> b!60887 m!53359))

(declare-fun m!53379 () Bool)

(assert (=> b!60887 m!53379))

(assert (=> b!60887 m!53225))

(assert (=> b!60887 m!53377))

(assert (=> b!60887 m!53225))

(declare-fun m!53381 () Bool)

(assert (=> b!60887 m!53381))

(assert (=> d!11937 m!53237))

(assert (=> b!60881 m!53359))

(declare-fun m!53383 () Bool)

(assert (=> b!60881 m!53383))

(declare-fun m!53385 () Bool)

(assert (=> b!60881 m!53385))

(declare-fun m!53387 () Bool)

(assert (=> b!60881 m!53387))

(declare-fun m!53389 () Bool)

(assert (=> b!60881 m!53389))

(declare-fun m!53391 () Bool)

(assert (=> b!60881 m!53391))

(assert (=> b!60881 m!53371))

(declare-fun m!53393 () Bool)

(assert (=> b!60881 m!53393))

(declare-fun m!53395 () Bool)

(assert (=> b!60881 m!53395))

(assert (=> b!60881 m!53383))

(declare-fun m!53397 () Bool)

(assert (=> b!60881 m!53397))

(declare-fun m!53399 () Bool)

(assert (=> b!60881 m!53399))

(declare-fun m!53401 () Bool)

(assert (=> b!60881 m!53401))

(declare-fun m!53403 () Bool)

(assert (=> b!60881 m!53403))

(declare-fun m!53405 () Bool)

(assert (=> b!60881 m!53405))

(assert (=> b!60881 m!53403))

(declare-fun m!53407 () Bool)

(assert (=> b!60881 m!53407))

(assert (=> b!60881 m!53397))

(assert (=> b!60881 m!53393))

(declare-fun m!53409 () Bool)

(assert (=> b!60881 m!53409))

(declare-fun m!53411 () Bool)

(assert (=> b!60881 m!53411))

(declare-fun m!53413 () Bool)

(assert (=> b!60872 m!53413))

(assert (=> b!60607 d!11937))

(declare-fun d!11939 () Bool)

(assert (=> d!11939 (= (validMask!0 (mask!5963 (v!2403 (underlying!231 thiss!992)))) (and (or (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000001111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000011111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000001111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000011111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000001111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000011111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000001111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000011111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000001111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000011111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000001111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000011111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000111111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000001111111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000011111111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000111111111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000001111111111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000011111111111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000111111111111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00001111111111111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00011111111111111111111111111111) (= (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!60614 d!11939))

(declare-fun d!11941 () Bool)

(assert (=> d!11941 (= (array_inv!1057 (_keys!3695 newMap!16)) (bvsge (size!2023 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60620 d!11941))

(declare-fun d!11943 () Bool)

(assert (=> d!11943 (= (array_inv!1058 (_values!2050 newMap!16)) (bvsge (size!2024 (_values!2050 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60620 d!11943))

(declare-fun d!11945 () Bool)

(declare-fun res!33585 () Bool)

(declare-fun e!40039 () Bool)

(assert (=> d!11945 (=> (not res!33585) (not e!40039))))

(declare-fun simpleValid!42 (LongMapFixedSize!630) Bool)

(assert (=> d!11945 (= res!33585 (simpleValid!42 newMap!16))))

(assert (=> d!11945 (= (valid!259 newMap!16) e!40039)))

(declare-fun b!60896 () Bool)

(declare-fun res!33586 () Bool)

(assert (=> b!60896 (=> (not res!33586) (not e!40039))))

(declare-fun arrayCountValidKeys!0 (array!3746 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!60896 (= res!33586 (= (arrayCountValidKeys!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (_size!364 newMap!16)))))

(declare-fun b!60897 () Bool)

(declare-fun res!33587 () Bool)

(assert (=> b!60897 (=> (not res!33587) (not e!40039))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3746 (_ BitVec 32)) Bool)

(assert (=> b!60897 (= res!33587 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun b!60898 () Bool)

(assert (=> b!60898 (= e!40039 (arrayNoDuplicates!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 Nil!1457))))

(assert (= (and d!11945 res!33585) b!60896))

(assert (= (and b!60896 res!33586) b!60897))

(assert (= (and b!60897 res!33587) b!60898))

(declare-fun m!53415 () Bool)

(assert (=> d!11945 m!53415))

(declare-fun m!53417 () Bool)

(assert (=> b!60896 m!53417))

(declare-fun m!53419 () Bool)

(assert (=> b!60897 m!53419))

(declare-fun m!53421 () Bool)

(assert (=> b!60898 m!53421))

(assert (=> b!60613 d!11945))

(declare-fun d!11947 () Bool)

(assert (=> d!11947 (not (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!24968 () Unit!1622)

(declare-fun choose!68 (array!3746 (_ BitVec 32) (_ BitVec 64) List!1460) Unit!1622)

(assert (=> d!11947 (= lt!24968 (choose!68 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457)))))

(assert (=> d!11947 (bvslt (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11947 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457)) lt!24968)))

(declare-fun bs!2631 () Bool)

(assert (= bs!2631 d!11947))

(assert (=> bs!2631 m!53207))

(assert (=> bs!2631 m!53211))

(assert (=> bs!2631 m!53207))

(declare-fun m!53423 () Bool)

(assert (=> bs!2631 m!53423))

(assert (=> b!60622 d!11947))

(declare-fun d!11949 () Bool)

(assert (=> d!11949 (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) from!355 Nil!1457)))

(declare-fun lt!24971 () Unit!1622)

(declare-fun choose!39 (array!3746 (_ BitVec 32) (_ BitVec 32)) Unit!1622)

(assert (=> d!11949 (= lt!24971 (choose!39 (_keys!3695 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!11949 (bvslt (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11949 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000 from!355) lt!24971)))

(declare-fun bs!2632 () Bool)

(assert (= bs!2632 d!11949))

(assert (=> bs!2632 m!53205))

(declare-fun m!53425 () Bool)

(assert (=> bs!2632 m!53425))

(assert (=> b!60622 d!11949))

(declare-fun d!11951 () Bool)

(declare-fun res!33592 () Bool)

(declare-fun e!40044 () Bool)

(assert (=> d!11951 (=> res!33592 e!40044)))

(assert (=> d!11951 (= res!33592 (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!11951 (= (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!40044)))

(declare-fun b!60903 () Bool)

(declare-fun e!40045 () Bool)

(assert (=> b!60903 (= e!40044 e!40045)))

(declare-fun res!33593 () Bool)

(assert (=> b!60903 (=> (not res!33593) (not e!40045))))

(assert (=> b!60903 (= res!33593 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!60904 () Bool)

(assert (=> b!60904 (= e!40045 (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!11951 (not res!33592)) b!60903))

(assert (= (and b!60903 res!33593) b!60904))

(assert (=> d!11951 m!53359))

(assert (=> b!60904 m!53207))

(declare-fun m!53427 () Bool)

(assert (=> b!60904 m!53427))

(assert (=> b!60622 d!11951))

(declare-fun d!11953 () Bool)

(declare-fun e!40048 () Bool)

(assert (=> d!11953 e!40048))

(declare-fun c!7943 () Bool)

(assert (=> d!11953 (= c!7943 (and (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!24974 () Unit!1622)

(declare-fun choose!323 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) (_ BitVec 32) Int) Unit!1622)

(assert (=> d!11953 (= lt!24974 (choose!323 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))))))

(assert (=> d!11953 (validMask!0 (mask!5963 (v!2403 (underlying!231 thiss!992))))))

(assert (=> d!11953 (= (lemmaListMapContainsThenArrayContainsFrom!30 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))) lt!24974)))

(declare-fun b!60909 () Bool)

(assert (=> b!60909 (= e!40048 (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!60910 () Bool)

(assert (=> b!60910 (= e!40048 (ite (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!11953 c!7943) b!60909))

(assert (= (and d!11953 (not c!7943)) b!60910))

(assert (=> d!11953 m!53207))

(declare-fun m!53429 () Bool)

(assert (=> d!11953 m!53429))

(assert (=> d!11953 m!53237))

(assert (=> b!60909 m!53207))

(assert (=> b!60909 m!53211))

(assert (=> b!60622 d!11953))

(declare-fun b!60921 () Bool)

(declare-fun e!40060 () Bool)

(declare-fun call!4662 () Bool)

(assert (=> b!60921 (= e!40060 call!4662)))

(declare-fun c!7946 () Bool)

(declare-fun bm!4659 () Bool)

(assert (=> bm!4659 (= call!4662 (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)))))

(declare-fun b!60922 () Bool)

(declare-fun e!40057 () Bool)

(assert (=> b!60922 (= e!40057 e!40060)))

(assert (=> b!60922 (= c!7946 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!60924 () Bool)

(declare-fun e!40059 () Bool)

(declare-fun contains!698 (List!1460 (_ BitVec 64)) Bool)

(assert (=> b!60924 (= e!40059 (contains!698 Nil!1457 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!60925 () Bool)

(declare-fun e!40058 () Bool)

(assert (=> b!60925 (= e!40058 e!40057)))

(declare-fun res!33601 () Bool)

(assert (=> b!60925 (=> (not res!33601) (not e!40057))))

(assert (=> b!60925 (= res!33601 (not e!40059))))

(declare-fun res!33600 () Bool)

(assert (=> b!60925 (=> (not res!33600) (not e!40059))))

(assert (=> b!60925 (= res!33600 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!60923 () Bool)

(assert (=> b!60923 (= e!40060 call!4662)))

(declare-fun d!11955 () Bool)

(declare-fun res!33602 () Bool)

(assert (=> d!11955 (=> res!33602 e!40058)))

(assert (=> d!11955 (= res!33602 (bvsge from!355 (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> d!11955 (= (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) from!355 Nil!1457) e!40058)))

(assert (= (and d!11955 (not res!33602)) b!60925))

(assert (= (and b!60925 res!33600) b!60924))

(assert (= (and b!60925 res!33601) b!60922))

(assert (= (and b!60922 c!7946) b!60921))

(assert (= (and b!60922 (not c!7946)) b!60923))

(assert (= (or b!60921 b!60923) bm!4659))

(assert (=> bm!4659 m!53207))

(declare-fun m!53431 () Bool)

(assert (=> bm!4659 m!53431))

(assert (=> b!60922 m!53207))

(assert (=> b!60922 m!53207))

(declare-fun m!53433 () Bool)

(assert (=> b!60922 m!53433))

(assert (=> b!60924 m!53207))

(assert (=> b!60924 m!53207))

(declare-fun m!53435 () Bool)

(assert (=> b!60924 m!53435))

(assert (=> b!60925 m!53207))

(assert (=> b!60925 m!53207))

(assert (=> b!60925 m!53433))

(assert (=> b!60622 d!11955))

(declare-fun d!11957 () Bool)

(assert (=> d!11957 (= (valid!260 thiss!992) (valid!259 (v!2403 (underlying!231 thiss!992))))))

(declare-fun bs!2633 () Bool)

(assert (= bs!2633 d!11957))

(declare-fun m!53437 () Bool)

(assert (=> bs!2633 m!53437))

(assert (=> start!8736 d!11957))

(declare-fun b!60933 () Bool)

(declare-fun e!40065 () Bool)

(assert (=> b!60933 (= e!40065 tp_is_empty!2409)))

(declare-fun mapNonEmpty!2927 () Bool)

(declare-fun mapRes!2927 () Bool)

(declare-fun tp!8093 () Bool)

(declare-fun e!40066 () Bool)

(assert (=> mapNonEmpty!2927 (= mapRes!2927 (and tp!8093 e!40066))))

(declare-fun mapRest!2927 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapKey!2927 () (_ BitVec 32))

(declare-fun mapValue!2927 () ValueCell!861)

(assert (=> mapNonEmpty!2927 (= mapRest!2918 (store mapRest!2927 mapKey!2927 mapValue!2927))))

(declare-fun b!60932 () Bool)

(assert (=> b!60932 (= e!40066 tp_is_empty!2409)))

(declare-fun condMapEmpty!2927 () Bool)

(declare-fun mapDefault!2927 () ValueCell!861)

(assert (=> mapNonEmpty!2917 (= condMapEmpty!2927 (= mapRest!2918 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2927)))))

(assert (=> mapNonEmpty!2917 (= tp!8078 (and e!40065 mapRes!2927))))

(declare-fun mapIsEmpty!2927 () Bool)

(assert (=> mapIsEmpty!2927 mapRes!2927))

(assert (= (and mapNonEmpty!2917 condMapEmpty!2927) mapIsEmpty!2927))

(assert (= (and mapNonEmpty!2917 (not condMapEmpty!2927)) mapNonEmpty!2927))

(assert (= (and mapNonEmpty!2927 ((_ is ValueCellFull!861) mapValue!2927)) b!60932))

(assert (= (and mapNonEmpty!2917 ((_ is ValueCellFull!861) mapDefault!2927)) b!60933))

(declare-fun m!53439 () Bool)

(assert (=> mapNonEmpty!2927 m!53439))

(declare-fun b!60935 () Bool)

(declare-fun e!40067 () Bool)

(assert (=> b!60935 (= e!40067 tp_is_empty!2409)))

(declare-fun mapNonEmpty!2928 () Bool)

(declare-fun mapRes!2928 () Bool)

(declare-fun tp!8094 () Bool)

(declare-fun e!40068 () Bool)

(assert (=> mapNonEmpty!2928 (= mapRes!2928 (and tp!8094 e!40068))))

(declare-fun mapRest!2928 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2928 () ValueCell!861)

(declare-fun mapKey!2928 () (_ BitVec 32))

(assert (=> mapNonEmpty!2928 (= mapRest!2917 (store mapRest!2928 mapKey!2928 mapValue!2928))))

(declare-fun b!60934 () Bool)

(assert (=> b!60934 (= e!40068 tp_is_empty!2409)))

(declare-fun condMapEmpty!2928 () Bool)

(declare-fun mapDefault!2928 () ValueCell!861)

(assert (=> mapNonEmpty!2918 (= condMapEmpty!2928 (= mapRest!2917 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2928)))))

(assert (=> mapNonEmpty!2918 (= tp!8075 (and e!40067 mapRes!2928))))

(declare-fun mapIsEmpty!2928 () Bool)

(assert (=> mapIsEmpty!2928 mapRes!2928))

(assert (= (and mapNonEmpty!2918 condMapEmpty!2928) mapIsEmpty!2928))

(assert (= (and mapNonEmpty!2918 (not condMapEmpty!2928)) mapNonEmpty!2928))

(assert (= (and mapNonEmpty!2928 ((_ is ValueCellFull!861) mapValue!2928)) b!60934))

(assert (= (and mapNonEmpty!2918 ((_ is ValueCellFull!861) mapDefault!2928)) b!60935))

(declare-fun m!53441 () Bool)

(assert (=> mapNonEmpty!2928 m!53441))

(declare-fun b_lambda!2705 () Bool)

(assert (= b_lambda!2703 (or (and b!60621 b_free!1985) (and b!60620 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))))) b_lambda!2705)))

(check-sat (not bm!4621) (not b!60805) (not b!60800) (not b!60922) (not bm!4628) (not b!60820) (not d!11935) (not bm!4620) (not b_lambda!2705) (not mapNonEmpty!2927) (not b!60692) (not b!60924) (not d!11947) (not d!11931) (not b!60791) (not d!11953) (not b!60881) (not bm!4624) (not bm!4616) (not b!60813) (not b_next!1985) (not b!60887) (not b!60888) (not bm!4627) (not bm!4626) (not bm!4653) (not b!60897) (not bm!4630) (not b_next!1987) (not bm!4622) (not bm!4656) (not d!11945) (not bm!4625) (not b!60870) (not b!60875) (not b!60925) (not d!11937) b_and!3711 (not bm!4623) (not b!60909) (not b!60785) (not b!60882) (not b!60898) tp_is_empty!2409 (not b!60896) (not d!11929) (not b!60826) (not b!60825) (not b!60798) (not bm!4651) (not b_lambda!2701) (not d!11949) b_and!3709 (not bm!4617) (not d!11957) (not b!60878) (not b!60806) (not mapNonEmpty!2928) (not b!60904) (not b!60694) (not bm!4659) (not bm!4652) (not b!60872))
(check-sat b_and!3709 b_and!3711 (not b_next!1985) (not b_next!1987))
(get-model)

(declare-fun d!11959 () Bool)

(declare-fun e!40070 () Bool)

(assert (=> d!11959 e!40070))

(declare-fun res!33603 () Bool)

(assert (=> d!11959 (=> res!33603 e!40070)))

(declare-fun lt!24975 () Bool)

(assert (=> d!11959 (= res!33603 (not lt!24975))))

(declare-fun lt!24977 () Bool)

(assert (=> d!11959 (= lt!24975 lt!24977)))

(declare-fun lt!24976 () Unit!1622)

(declare-fun e!40069 () Unit!1622)

(assert (=> d!11959 (= lt!24976 e!40069)))

(declare-fun c!7947 () Bool)

(assert (=> d!11959 (= c!7947 lt!24977)))

(assert (=> d!11959 (= lt!24977 (containsKey!128 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(assert (=> d!11959 (= (contains!697 call!4634 (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))) lt!24975)))

(declare-fun b!60936 () Bool)

(declare-fun lt!24978 () Unit!1622)

(assert (=> b!60936 (= e!40069 lt!24978)))

(assert (=> b!60936 (= lt!24978 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(assert (=> b!60936 (isDefined!78 (getValueByKey!124 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(declare-fun b!60937 () Bool)

(declare-fun Unit!1633 () Unit!1622)

(assert (=> b!60937 (= e!40069 Unit!1633)))

(declare-fun b!60938 () Bool)

(assert (=> b!60938 (= e!40070 (isDefined!78 (getValueByKey!124 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888)))))))

(assert (= (and d!11959 c!7947) b!60936))

(assert (= (and d!11959 (not c!7947)) b!60937))

(assert (= (and d!11959 (not res!33603)) b!60938))

(assert (=> d!11959 m!53341))

(declare-fun m!53443 () Bool)

(assert (=> d!11959 m!53443))

(assert (=> b!60936 m!53341))

(declare-fun m!53445 () Bool)

(assert (=> b!60936 m!53445))

(assert (=> b!60936 m!53341))

(declare-fun m!53447 () Bool)

(assert (=> b!60936 m!53447))

(assert (=> b!60936 m!53447))

(declare-fun m!53449 () Bool)

(assert (=> b!60936 m!53449))

(assert (=> b!60938 m!53341))

(assert (=> b!60938 m!53447))

(assert (=> b!60938 m!53447))

(assert (=> b!60938 m!53449))

(assert (=> b!60806 d!11959))

(declare-fun d!11961 () Bool)

(declare-fun e!40073 () Bool)

(assert (=> d!11961 e!40073))

(declare-fun res!33606 () Bool)

(assert (=> d!11961 (=> (not res!33606) (not e!40073))))

(assert (=> d!11961 (= res!33606 (and (bvsge (index!3077 lt!24888) #b00000000000000000000000000000000) (bvslt (index!3077 lt!24888) (size!2023 (_keys!3695 newMap!16)))))))

(declare-fun lt!24981 () Unit!1622)

(declare-fun choose!324 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) Int) Unit!1622)

(assert (=> d!11961 (= lt!24981 (choose!324 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3077 lt!24888) (defaultEntry!2067 newMap!16)))))

(assert (=> d!11961 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11961 (= (lemmaValidKeyInArrayIsInListMap!74 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3077 lt!24888) (defaultEntry!2067 newMap!16)) lt!24981)))

(declare-fun b!60941 () Bool)

(assert (=> b!60941 (= e!40073 (contains!697 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(assert (= (and d!11961 res!33606) b!60941))

(declare-fun m!53451 () Bool)

(assert (=> d!11961 m!53451))

(declare-fun m!53453 () Bool)

(assert (=> d!11961 m!53453))

(declare-fun m!53455 () Bool)

(assert (=> b!60941 m!53455))

(assert (=> b!60941 m!53341))

(assert (=> b!60941 m!53455))

(assert (=> b!60941 m!53341))

(declare-fun m!53457 () Bool)

(assert (=> b!60941 m!53457))

(assert (=> b!60806 d!11961))

(declare-fun d!11963 () Bool)

(declare-fun e!40076 () Bool)

(assert (=> d!11963 e!40076))

(declare-fun res!33609 () Bool)

(assert (=> d!11963 (=> (not res!33609) (not e!40076))))

(assert (=> d!11963 (= res!33609 (and (bvsge (index!3077 lt!24888) #b00000000000000000000000000000000) (bvslt (index!3077 lt!24888) (size!2024 (_values!2050 newMap!16)))))))

(declare-fun lt!24984 () Unit!1622)

(declare-fun choose!325 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) (_ BitVec 64) V!2859 Int) Unit!1622)

(assert (=> d!11963 (= lt!24984 (choose!325 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3077 lt!24888) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(assert (=> d!11963 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11963 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3077 lt!24888) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)) lt!24984)))

(declare-fun b!60944 () Bool)

(assert (=> b!60944 (= e!40076 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))))))

(assert (= (and d!11963 res!33609) b!60944))

(assert (=> d!11963 m!53207))

(assert (=> d!11963 m!53227))

(declare-fun m!53459 () Bool)

(assert (=> d!11963 m!53459))

(assert (=> d!11963 m!53453))

(assert (=> b!60944 m!53319))

(assert (=> b!60944 m!53319))

(declare-fun m!53461 () Bool)

(assert (=> b!60944 m!53461))

(assert (=> b!60944 m!53329))

(declare-fun m!53463 () Bool)

(assert (=> b!60944 m!53463))

(assert (=> b!60806 d!11963))

(declare-fun d!11965 () Bool)

(declare-fun lt!24987 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!64 (List!1460) (InoxSet (_ BitVec 64)))

(assert (=> d!11965 (= lt!24987 (select (content!64 Nil!1457) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun e!40081 () Bool)

(assert (=> d!11965 (= lt!24987 e!40081)))

(declare-fun res!33614 () Bool)

(assert (=> d!11965 (=> (not res!33614) (not e!40081))))

(assert (=> d!11965 (= res!33614 ((_ is Cons!1456) Nil!1457))))

(assert (=> d!11965 (= (contains!698 Nil!1457 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) lt!24987)))

(declare-fun b!60949 () Bool)

(declare-fun e!40082 () Bool)

(assert (=> b!60949 (= e!40081 e!40082)))

(declare-fun res!33615 () Bool)

(assert (=> b!60949 (=> res!33615 e!40082)))

(assert (=> b!60949 (= res!33615 (= (h!2038 Nil!1457) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!60950 () Bool)

(assert (=> b!60950 (= e!40082 (contains!698 (t!4838 Nil!1457) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!11965 res!33614) b!60949))

(assert (= (and b!60949 (not res!33615)) b!60950))

(declare-fun m!53465 () Bool)

(assert (=> d!11965 m!53465))

(assert (=> d!11965 m!53207))

(declare-fun m!53467 () Bool)

(assert (=> d!11965 m!53467))

(assert (=> b!60950 m!53207))

(declare-fun m!53469 () Bool)

(assert (=> b!60950 m!53469))

(assert (=> b!60924 d!11965))

(declare-fun bm!4660 () Bool)

(declare-fun call!4666 () ListLongMap!1385)

(declare-fun call!4664 () ListLongMap!1385)

(assert (=> bm!4660 (= call!4666 call!4664)))

(declare-fun b!60951 () Bool)

(declare-fun res!33619 () Bool)

(declare-fun e!40089 () Bool)

(assert (=> b!60951 (=> (not res!33619) (not e!40089))))

(declare-fun e!40090 () Bool)

(assert (=> b!60951 (= res!33619 e!40090)))

(declare-fun c!7948 () Bool)

(assert (=> b!60951 (= c!7948 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4661 () Bool)

(assert (=> bm!4661 (= call!4664 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite c!7914 (_values!2050 newMap!16) lt!24892) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!60952 () Bool)

(declare-fun e!40095 () Bool)

(declare-fun lt!24992 () ListLongMap!1385)

(assert (=> b!60952 (= e!40095 (= (apply!67 lt!24992 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!60953 () Bool)

(declare-fun e!40087 () Bool)

(assert (=> b!60953 (= e!40090 e!40087)))

(declare-fun res!33622 () Bool)

(declare-fun call!4667 () Bool)

(assert (=> b!60953 (= res!33622 call!4667)))

(assert (=> b!60953 (=> (not res!33622) (not e!40087))))

(declare-fun b!60954 () Bool)

(assert (=> b!60954 (= e!40087 (= (apply!67 lt!24992 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun b!60955 () Bool)

(declare-fun e!40094 () Bool)

(assert (=> b!60955 (= e!40094 e!40095)))

(declare-fun res!33616 () Bool)

(declare-fun call!4669 () Bool)

(assert (=> b!60955 (= res!33616 call!4669)))

(assert (=> b!60955 (=> (not res!33616) (not e!40095))))

(declare-fun b!60956 () Bool)

(declare-fun c!7952 () Bool)

(assert (=> b!60956 (= c!7952 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40092 () ListLongMap!1385)

(declare-fun e!40083 () ListLongMap!1385)

(assert (=> b!60956 (= e!40092 e!40083)))

(declare-fun b!60957 () Bool)

(declare-fun e!40091 () Bool)

(declare-fun e!40085 () Bool)

(assert (=> b!60957 (= e!40091 e!40085)))

(declare-fun res!33620 () Bool)

(assert (=> b!60957 (=> (not res!33620) (not e!40085))))

(assert (=> b!60957 (= res!33620 (contains!697 lt!24992 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60957 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!60958 () Bool)

(assert (=> b!60958 (= e!40089 e!40094)))

(declare-fun c!7953 () Bool)

(assert (=> b!60958 (= c!7953 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4662 () Bool)

(assert (=> bm!4662 (= call!4667 (contains!697 lt!24992 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60959 () Bool)

(declare-fun call!4665 () ListLongMap!1385)

(assert (=> b!60959 (= e!40083 call!4665)))

(declare-fun bm!4663 () Bool)

(declare-fun call!4668 () ListLongMap!1385)

(declare-fun call!4663 () ListLongMap!1385)

(declare-fun c!7951 () Bool)

(declare-fun c!7949 () Bool)

(assert (=> bm!4663 (= call!4663 (+!82 (ite c!7949 call!4664 (ite c!7951 call!4666 call!4668)) (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!60960 () Bool)

(declare-fun e!40088 () Bool)

(assert (=> b!60960 (= e!40088 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60961 () Bool)

(assert (=> b!60961 (= e!40083 call!4668)))

(declare-fun b!60962 () Bool)

(declare-fun e!40084 () Unit!1622)

(declare-fun Unit!1634 () Unit!1622)

(assert (=> b!60962 (= e!40084 Unit!1634)))

(declare-fun bm!4664 () Bool)

(assert (=> bm!4664 (= call!4668 call!4666)))

(declare-fun d!11967 () Bool)

(assert (=> d!11967 e!40089))

(declare-fun res!33623 () Bool)

(assert (=> d!11967 (=> (not res!33623) (not e!40089))))

(assert (=> d!11967 (= res!33623 (or (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))))

(declare-fun lt!25004 () ListLongMap!1385)

(assert (=> d!11967 (= lt!24992 lt!25004)))

(declare-fun lt!24997 () Unit!1622)

(assert (=> d!11967 (= lt!24997 e!40084)))

(declare-fun c!7950 () Bool)

(declare-fun e!40086 () Bool)

(assert (=> d!11967 (= c!7950 e!40086)))

(declare-fun res!33621 () Bool)

(assert (=> d!11967 (=> (not res!33621) (not e!40086))))

(assert (=> d!11967 (= res!33621 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun e!40093 () ListLongMap!1385)

(assert (=> d!11967 (= lt!25004 e!40093)))

(assert (=> d!11967 (= c!7949 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11967 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11967 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (ite c!7914 (_values!2050 newMap!16) lt!24892) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!24992)))

(declare-fun b!60963 () Bool)

(declare-fun lt!24995 () Unit!1622)

(assert (=> b!60963 (= e!40084 lt!24995)))

(declare-fun lt!24998 () ListLongMap!1385)

(assert (=> b!60963 (= lt!24998 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite c!7914 (_values!2050 newMap!16) lt!24892) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!24989 () (_ BitVec 64))

(assert (=> b!60963 (= lt!24989 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24990 () (_ BitVec 64))

(assert (=> b!60963 (= lt!24990 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25005 () Unit!1622)

(assert (=> b!60963 (= lt!25005 (addStillContains!43 lt!24998 lt!24989 (zeroValue!1981 newMap!16) lt!24990))))

(assert (=> b!60963 (contains!697 (+!82 lt!24998 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16))) lt!24990)))

(declare-fun lt!24994 () Unit!1622)

(assert (=> b!60963 (= lt!24994 lt!25005)))

(declare-fun lt!24988 () ListLongMap!1385)

(assert (=> b!60963 (= lt!24988 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite c!7914 (_values!2050 newMap!16) lt!24892) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25008 () (_ BitVec 64))

(assert (=> b!60963 (= lt!25008 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25000 () (_ BitVec 64))

(assert (=> b!60963 (= lt!25000 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24993 () Unit!1622)

(assert (=> b!60963 (= lt!24993 (addApplyDifferent!43 lt!24988 lt!25008 (minValue!1981 newMap!16) lt!25000))))

(assert (=> b!60963 (= (apply!67 (+!82 lt!24988 (tuple2!2061 lt!25008 (minValue!1981 newMap!16))) lt!25000) (apply!67 lt!24988 lt!25000))))

(declare-fun lt!25006 () Unit!1622)

(assert (=> b!60963 (= lt!25006 lt!24993)))

(declare-fun lt!25003 () ListLongMap!1385)

(assert (=> b!60963 (= lt!25003 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite c!7914 (_values!2050 newMap!16) lt!24892) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25007 () (_ BitVec 64))

(assert (=> b!60963 (= lt!25007 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25001 () (_ BitVec 64))

(assert (=> b!60963 (= lt!25001 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24991 () Unit!1622)

(assert (=> b!60963 (= lt!24991 (addApplyDifferent!43 lt!25003 lt!25007 (zeroValue!1981 newMap!16) lt!25001))))

(assert (=> b!60963 (= (apply!67 (+!82 lt!25003 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16))) lt!25001) (apply!67 lt!25003 lt!25001))))

(declare-fun lt!24999 () Unit!1622)

(assert (=> b!60963 (= lt!24999 lt!24991)))

(declare-fun lt!25009 () ListLongMap!1385)

(assert (=> b!60963 (= lt!25009 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite c!7914 (_values!2050 newMap!16) lt!24892) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!24996 () (_ BitVec 64))

(assert (=> b!60963 (= lt!24996 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25002 () (_ BitVec 64))

(assert (=> b!60963 (= lt!25002 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60963 (= lt!24995 (addApplyDifferent!43 lt!25009 lt!24996 (minValue!1981 newMap!16) lt!25002))))

(assert (=> b!60963 (= (apply!67 (+!82 lt!25009 (tuple2!2061 lt!24996 (minValue!1981 newMap!16))) lt!25002) (apply!67 lt!25009 lt!25002))))

(declare-fun b!60964 () Bool)

(assert (=> b!60964 (= e!40093 (+!82 call!4663 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun bm!4665 () Bool)

(assert (=> bm!4665 (= call!4665 call!4663)))

(declare-fun b!60965 () Bool)

(assert (=> b!60965 (= e!40094 (not call!4669))))

(declare-fun b!60966 () Bool)

(assert (=> b!60966 (= e!40090 (not call!4667))))

(declare-fun b!60967 () Bool)

(assert (=> b!60967 (= e!40092 call!4665)))

(declare-fun b!60968 () Bool)

(declare-fun res!33624 () Bool)

(assert (=> b!60968 (=> (not res!33624) (not e!40089))))

(assert (=> b!60968 (= res!33624 e!40091)))

(declare-fun res!33618 () Bool)

(assert (=> b!60968 (=> res!33618 e!40091)))

(assert (=> b!60968 (= res!33618 (not e!40088))))

(declare-fun res!33617 () Bool)

(assert (=> b!60968 (=> (not res!33617) (not e!40088))))

(assert (=> b!60968 (= res!33617 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!60969 () Bool)

(assert (=> b!60969 (= e!40085 (= (apply!67 lt!24992 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 (ite c!7914 (_values!2050 newMap!16) lt!24892)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60969 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (ite c!7914 (_values!2050 newMap!16) lt!24892))))))

(assert (=> b!60969 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!60970 () Bool)

(assert (=> b!60970 (= e!40086 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60971 () Bool)

(assert (=> b!60971 (= e!40093 e!40092)))

(assert (=> b!60971 (= c!7951 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4666 () Bool)

(assert (=> bm!4666 (= call!4669 (contains!697 lt!24992 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11967 c!7949) b!60964))

(assert (= (and d!11967 (not c!7949)) b!60971))

(assert (= (and b!60971 c!7951) b!60967))

(assert (= (and b!60971 (not c!7951)) b!60956))

(assert (= (and b!60956 c!7952) b!60959))

(assert (= (and b!60956 (not c!7952)) b!60961))

(assert (= (or b!60959 b!60961) bm!4664))

(assert (= (or b!60967 bm!4664) bm!4660))

(assert (= (or b!60967 b!60959) bm!4665))

(assert (= (or b!60964 bm!4660) bm!4661))

(assert (= (or b!60964 bm!4665) bm!4663))

(assert (= (and d!11967 res!33621) b!60970))

(assert (= (and d!11967 c!7950) b!60963))

(assert (= (and d!11967 (not c!7950)) b!60962))

(assert (= (and d!11967 res!33623) b!60968))

(assert (= (and b!60968 res!33617) b!60960))

(assert (= (and b!60968 (not res!33618)) b!60957))

(assert (= (and b!60957 res!33620) b!60969))

(assert (= (and b!60968 res!33624) b!60951))

(assert (= (and b!60951 c!7948) b!60953))

(assert (= (and b!60951 (not c!7948)) b!60966))

(assert (= (and b!60953 res!33622) b!60954))

(assert (= (or b!60953 b!60966) bm!4662))

(assert (= (and b!60951 res!33619) b!60958))

(assert (= (and b!60958 c!7953) b!60955))

(assert (= (and b!60958 (not c!7953)) b!60965))

(assert (= (and b!60955 res!33616) b!60952))

(assert (= (or b!60955 b!60965) bm!4666))

(declare-fun b_lambda!2707 () Bool)

(assert (=> (not b_lambda!2707) (not b!60969)))

(declare-fun tb!1361 () Bool)

(declare-fun t!4845 () Bool)

(assert (=> (and b!60621 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16)) t!4845) tb!1361))

(declare-fun result!2435 () Bool)

(assert (=> tb!1361 (= result!2435 tp_is_empty!2409)))

(assert (=> b!60969 t!4845))

(declare-fun b_and!3713 () Bool)

(assert (= b_and!3709 (and (=> t!4845 result!2435) b_and!3713)))

(declare-fun t!4847 () Bool)

(declare-fun tb!1363 () Bool)

(assert (=> (and b!60620 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 newMap!16)) t!4847) tb!1363))

(declare-fun result!2437 () Bool)

(assert (= result!2437 result!2435))

(assert (=> b!60969 t!4847))

(declare-fun b_and!3715 () Bool)

(assert (= b_and!3711 (and (=> t!4847 result!2437) b_and!3715)))

(declare-fun m!53471 () Bool)

(assert (=> b!60960 m!53471))

(assert (=> b!60960 m!53471))

(declare-fun m!53473 () Bool)

(assert (=> b!60960 m!53473))

(declare-fun m!53475 () Bool)

(assert (=> bm!4662 m!53475))

(declare-fun m!53477 () Bool)

(assert (=> bm!4666 m!53477))

(declare-fun m!53479 () Bool)

(assert (=> bm!4663 m!53479))

(assert (=> b!60957 m!53471))

(assert (=> b!60957 m!53471))

(declare-fun m!53481 () Bool)

(assert (=> b!60957 m!53481))

(declare-fun m!53483 () Bool)

(assert (=> bm!4661 m!53483))

(declare-fun m!53485 () Bool)

(assert (=> b!60964 m!53485))

(declare-fun m!53487 () Bool)

(assert (=> b!60952 m!53487))

(assert (=> b!60970 m!53471))

(assert (=> b!60970 m!53471))

(assert (=> b!60970 m!53473))

(assert (=> b!60969 m!53471))

(declare-fun m!53489 () Bool)

(assert (=> b!60969 m!53489))

(assert (=> b!60969 m!53471))

(declare-fun m!53491 () Bool)

(assert (=> b!60969 m!53491))

(declare-fun m!53493 () Bool)

(assert (=> b!60969 m!53493))

(assert (=> b!60969 m!53489))

(assert (=> b!60969 m!53493))

(declare-fun m!53495 () Bool)

(assert (=> b!60969 m!53495))

(assert (=> d!11967 m!53453))

(assert (=> b!60963 m!53471))

(declare-fun m!53497 () Bool)

(assert (=> b!60963 m!53497))

(declare-fun m!53499 () Bool)

(assert (=> b!60963 m!53499))

(declare-fun m!53501 () Bool)

(assert (=> b!60963 m!53501))

(declare-fun m!53503 () Bool)

(assert (=> b!60963 m!53503))

(declare-fun m!53505 () Bool)

(assert (=> b!60963 m!53505))

(assert (=> b!60963 m!53483))

(declare-fun m!53507 () Bool)

(assert (=> b!60963 m!53507))

(declare-fun m!53509 () Bool)

(assert (=> b!60963 m!53509))

(assert (=> b!60963 m!53497))

(declare-fun m!53511 () Bool)

(assert (=> b!60963 m!53511))

(declare-fun m!53513 () Bool)

(assert (=> b!60963 m!53513))

(declare-fun m!53515 () Bool)

(assert (=> b!60963 m!53515))

(declare-fun m!53517 () Bool)

(assert (=> b!60963 m!53517))

(declare-fun m!53519 () Bool)

(assert (=> b!60963 m!53519))

(assert (=> b!60963 m!53517))

(declare-fun m!53521 () Bool)

(assert (=> b!60963 m!53521))

(assert (=> b!60963 m!53511))

(assert (=> b!60963 m!53507))

(declare-fun m!53523 () Bool)

(assert (=> b!60963 m!53523))

(declare-fun m!53525 () Bool)

(assert (=> b!60963 m!53525))

(declare-fun m!53527 () Bool)

(assert (=> b!60954 m!53527))

(assert (=> bm!4616 d!11967))

(declare-fun b!60980 () Bool)

(declare-fun e!40100 () (_ BitVec 32))

(declare-fun e!40101 () (_ BitVec 32))

(assert (=> b!60980 (= e!40100 e!40101)))

(declare-fun c!7959 () Bool)

(assert (=> b!60980 (= c!7959 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!11969 () Bool)

(declare-fun lt!25012 () (_ BitVec 32))

(assert (=> d!11969 (and (bvsge lt!25012 #b00000000000000000000000000000000) (bvsle lt!25012 (bvsub (size!2023 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11969 (= lt!25012 e!40100)))

(declare-fun c!7958 () Bool)

(assert (=> d!11969 (= c!7958 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!11969 (and (bvsle #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2023 (_keys!3695 newMap!16)) (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!11969 (= (arrayCountValidKeys!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) lt!25012)))

(declare-fun b!60981 () Bool)

(assert (=> b!60981 (= e!40100 #b00000000000000000000000000000000)))

(declare-fun b!60982 () Bool)

(declare-fun call!4672 () (_ BitVec 32))

(assert (=> b!60982 (= e!40101 call!4672)))

(declare-fun bm!4669 () Bool)

(assert (=> bm!4669 (= call!4672 (arrayCountValidKeys!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!60983 () Bool)

(assert (=> b!60983 (= e!40101 (bvadd #b00000000000000000000000000000001 call!4672))))

(assert (= (and d!11969 c!7958) b!60981))

(assert (= (and d!11969 (not c!7958)) b!60980))

(assert (= (and b!60980 c!7959) b!60983))

(assert (= (and b!60980 (not c!7959)) b!60982))

(assert (= (or b!60983 b!60982) bm!4669))

(assert (=> b!60980 m!53471))

(assert (=> b!60980 m!53471))

(assert (=> b!60980 m!53473))

(declare-fun m!53529 () Bool)

(assert (=> bm!4669 m!53529))

(assert (=> b!60896 d!11969))

(declare-fun d!11971 () Bool)

(assert (=> d!11971 (= (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60878 d!11971))

(declare-fun bm!4670 () Bool)

(declare-fun call!4676 () ListLongMap!1385)

(declare-fun call!4674 () ListLongMap!1385)

(assert (=> bm!4670 (= call!4676 call!4674)))

(declare-fun b!60984 () Bool)

(declare-fun res!33628 () Bool)

(declare-fun e!40108 () Bool)

(assert (=> b!60984 (=> (not res!33628) (not e!40108))))

(declare-fun e!40109 () Bool)

(assert (=> b!60984 (= res!33628 e!40109)))

(declare-fun c!7960 () Bool)

(assert (=> b!60984 (= c!7960 (not (= (bvand (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4671 () Bool)

(assert (=> bm!4671 (= call!4674 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) (mask!5963 newMap!16) (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun e!40114 () Bool)

(declare-fun lt!25017 () ListLongMap!1385)

(declare-fun b!60985 () Bool)

(assert (=> b!60985 (= e!40114 (= (apply!67 lt!25017 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))

(declare-fun b!60986 () Bool)

(declare-fun e!40106 () Bool)

(assert (=> b!60986 (= e!40109 e!40106)))

(declare-fun res!33631 () Bool)

(declare-fun call!4677 () Bool)

(assert (=> b!60986 (= res!33631 call!4677)))

(assert (=> b!60986 (=> (not res!33631) (not e!40106))))

(declare-fun b!60987 () Bool)

(assert (=> b!60987 (= e!40106 (= (apply!67 lt!25017 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))

(declare-fun b!60988 () Bool)

(declare-fun e!40113 () Bool)

(assert (=> b!60988 (= e!40113 e!40114)))

(declare-fun res!33625 () Bool)

(declare-fun call!4679 () Bool)

(assert (=> b!60988 (= res!33625 call!4679)))

(assert (=> b!60988 (=> (not res!33625) (not e!40114))))

(declare-fun b!60989 () Bool)

(declare-fun c!7964 () Bool)

(assert (=> b!60989 (= c!7964 (and (not (= (bvand (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40111 () ListLongMap!1385)

(declare-fun e!40102 () ListLongMap!1385)

(assert (=> b!60989 (= e!40111 e!40102)))

(declare-fun b!60990 () Bool)

(declare-fun e!40110 () Bool)

(declare-fun e!40104 () Bool)

(assert (=> b!60990 (= e!40110 e!40104)))

(declare-fun res!33629 () Bool)

(assert (=> b!60990 (=> (not res!33629) (not e!40104))))

(assert (=> b!60990 (= res!33629 (contains!697 lt!25017 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60990 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!60991 () Bool)

(assert (=> b!60991 (= e!40108 e!40113)))

(declare-fun c!7965 () Bool)

(assert (=> b!60991 (= c!7965 (not (= (bvand (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4672 () Bool)

(assert (=> bm!4672 (= call!4677 (contains!697 lt!25017 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60992 () Bool)

(declare-fun call!4675 () ListLongMap!1385)

(assert (=> b!60992 (= e!40102 call!4675)))

(declare-fun call!4678 () ListLongMap!1385)

(declare-fun call!4673 () ListLongMap!1385)

(declare-fun c!7963 () Bool)

(declare-fun bm!4673 () Bool)

(declare-fun c!7961 () Bool)

(assert (=> bm!4673 (= call!4673 (+!82 (ite c!7961 call!4674 (ite c!7963 call!4676 call!4678)) (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(declare-fun b!60993 () Bool)

(declare-fun e!40107 () Bool)

(assert (=> b!60993 (= e!40107 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60994 () Bool)

(assert (=> b!60994 (= e!40102 call!4678)))

(declare-fun b!60995 () Bool)

(declare-fun e!40103 () Unit!1622)

(declare-fun Unit!1635 () Unit!1622)

(assert (=> b!60995 (= e!40103 Unit!1635)))

(declare-fun bm!4674 () Bool)

(assert (=> bm!4674 (= call!4678 call!4676)))

(declare-fun d!11973 () Bool)

(assert (=> d!11973 e!40108))

(declare-fun res!33632 () Bool)

(assert (=> d!11973 (=> (not res!33632) (not e!40108))))

(assert (=> d!11973 (= res!33632 (or (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))))

(declare-fun lt!25029 () ListLongMap!1385)

(assert (=> d!11973 (= lt!25017 lt!25029)))

(declare-fun lt!25022 () Unit!1622)

(assert (=> d!11973 (= lt!25022 e!40103)))

(declare-fun c!7962 () Bool)

(declare-fun e!40105 () Bool)

(assert (=> d!11973 (= c!7962 e!40105)))

(declare-fun res!33630 () Bool)

(assert (=> d!11973 (=> (not res!33630) (not e!40105))))

(assert (=> d!11973 (= res!33630 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun e!40112 () ListLongMap!1385)

(assert (=> d!11973 (= lt!25029 e!40112)))

(assert (=> d!11973 (= c!7961 (and (not (= (bvand (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11973 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11973 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) (mask!5963 newMap!16) (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25017)))

(declare-fun b!60996 () Bool)

(declare-fun lt!25020 () Unit!1622)

(assert (=> b!60996 (= e!40103 lt!25020)))

(declare-fun lt!25023 () ListLongMap!1385)

(assert (=> b!60996 (= lt!25023 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) (mask!5963 newMap!16) (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25014 () (_ BitVec 64))

(assert (=> b!60996 (= lt!25014 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25015 () (_ BitVec 64))

(assert (=> b!60996 (= lt!25015 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25030 () Unit!1622)

(assert (=> b!60996 (= lt!25030 (addStillContains!43 lt!25023 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25015))))

(assert (=> b!60996 (contains!697 (+!82 lt!25023 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25015)))

(declare-fun lt!25019 () Unit!1622)

(assert (=> b!60996 (= lt!25019 lt!25030)))

(declare-fun lt!25013 () ListLongMap!1385)

(assert (=> b!60996 (= lt!25013 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) (mask!5963 newMap!16) (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25033 () (_ BitVec 64))

(assert (=> b!60996 (= lt!25033 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25025 () (_ BitVec 64))

(assert (=> b!60996 (= lt!25025 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25018 () Unit!1622)

(assert (=> b!60996 (= lt!25018 (addApplyDifferent!43 lt!25013 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25025))))

(assert (=> b!60996 (= (apply!67 (+!82 lt!25013 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25025) (apply!67 lt!25013 lt!25025))))

(declare-fun lt!25031 () Unit!1622)

(assert (=> b!60996 (= lt!25031 lt!25018)))

(declare-fun lt!25028 () ListLongMap!1385)

(assert (=> b!60996 (= lt!25028 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) (mask!5963 newMap!16) (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25032 () (_ BitVec 64))

(assert (=> b!60996 (= lt!25032 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25026 () (_ BitVec 64))

(assert (=> b!60996 (= lt!25026 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25016 () Unit!1622)

(assert (=> b!60996 (= lt!25016 (addApplyDifferent!43 lt!25028 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25026))))

(assert (=> b!60996 (= (apply!67 (+!82 lt!25028 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25026) (apply!67 lt!25028 lt!25026))))

(declare-fun lt!25024 () Unit!1622)

(assert (=> b!60996 (= lt!25024 lt!25016)))

(declare-fun lt!25034 () ListLongMap!1385)

(assert (=> b!60996 (= lt!25034 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) (mask!5963 newMap!16) (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25021 () (_ BitVec 64))

(assert (=> b!60996 (= lt!25021 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25027 () (_ BitVec 64))

(assert (=> b!60996 (= lt!25027 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60996 (= lt!25020 (addApplyDifferent!43 lt!25034 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25027))))

(assert (=> b!60996 (= (apply!67 (+!82 lt!25034 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25027) (apply!67 lt!25034 lt!25027))))

(declare-fun b!60997 () Bool)

(assert (=> b!60997 (= e!40112 (+!82 call!4673 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))

(declare-fun bm!4675 () Bool)

(assert (=> bm!4675 (= call!4675 call!4673)))

(declare-fun b!60998 () Bool)

(assert (=> b!60998 (= e!40113 (not call!4679))))

(declare-fun b!60999 () Bool)

(assert (=> b!60999 (= e!40109 (not call!4677))))

(declare-fun b!61000 () Bool)

(assert (=> b!61000 (= e!40111 call!4675)))

(declare-fun b!61001 () Bool)

(declare-fun res!33633 () Bool)

(assert (=> b!61001 (=> (not res!33633) (not e!40108))))

(assert (=> b!61001 (= res!33633 e!40110)))

(declare-fun res!33627 () Bool)

(assert (=> b!61001 (=> res!33627 e!40110)))

(assert (=> b!61001 (= res!33627 (not e!40107))))

(declare-fun res!33626 () Bool)

(assert (=> b!61001 (=> (not res!33626) (not e!40107))))

(assert (=> b!61001 (= res!33626 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61002 () Bool)

(assert (=> b!61002 (= e!40104 (= (apply!67 lt!25017 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61002 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))))))))

(assert (=> b!61002 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61003 () Bool)

(assert (=> b!61003 (= e!40105 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61004 () Bool)

(assert (=> b!61004 (= e!40112 e!40111)))

(assert (=> b!61004 (= c!7963 (and (not (= (bvand (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4676 () Bool)

(assert (=> bm!4676 (= call!4679 (contains!697 lt!25017 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11973 c!7961) b!60997))

(assert (= (and d!11973 (not c!7961)) b!61004))

(assert (= (and b!61004 c!7963) b!61000))

(assert (= (and b!61004 (not c!7963)) b!60989))

(assert (= (and b!60989 c!7964) b!60992))

(assert (= (and b!60989 (not c!7964)) b!60994))

(assert (= (or b!60992 b!60994) bm!4674))

(assert (= (or b!61000 bm!4674) bm!4670))

(assert (= (or b!61000 b!60992) bm!4675))

(assert (= (or b!60997 bm!4670) bm!4671))

(assert (= (or b!60997 bm!4675) bm!4673))

(assert (= (and d!11973 res!33630) b!61003))

(assert (= (and d!11973 c!7962) b!60996))

(assert (= (and d!11973 (not c!7962)) b!60995))

(assert (= (and d!11973 res!33632) b!61001))

(assert (= (and b!61001 res!33626) b!60993))

(assert (= (and b!61001 (not res!33627)) b!60990))

(assert (= (and b!60990 res!33629) b!61002))

(assert (= (and b!61001 res!33633) b!60984))

(assert (= (and b!60984 c!7960) b!60986))

(assert (= (and b!60984 (not c!7960)) b!60999))

(assert (= (and b!60986 res!33631) b!60987))

(assert (= (or b!60986 b!60999) bm!4672))

(assert (= (and b!60984 res!33628) b!60991))

(assert (= (and b!60991 c!7965) b!60988))

(assert (= (and b!60991 (not c!7965)) b!60998))

(assert (= (and b!60988 res!33625) b!60985))

(assert (= (or b!60988 b!60998) bm!4676))

(declare-fun b_lambda!2709 () Bool)

(assert (=> (not b_lambda!2709) (not b!61002)))

(assert (=> b!61002 t!4845))

(declare-fun b_and!3717 () Bool)

(assert (= b_and!3713 (and (=> t!4845 result!2435) b_and!3717)))

(assert (=> b!61002 t!4847))

(declare-fun b_and!3719 () Bool)

(assert (= b_and!3715 (and (=> t!4847 result!2437) b_and!3719)))

(assert (=> b!60993 m!53471))

(assert (=> b!60993 m!53471))

(assert (=> b!60993 m!53473))

(declare-fun m!53531 () Bool)

(assert (=> bm!4672 m!53531))

(declare-fun m!53533 () Bool)

(assert (=> bm!4676 m!53533))

(declare-fun m!53535 () Bool)

(assert (=> bm!4673 m!53535))

(assert (=> b!60990 m!53471))

(assert (=> b!60990 m!53471))

(declare-fun m!53537 () Bool)

(assert (=> b!60990 m!53537))

(declare-fun m!53539 () Bool)

(assert (=> bm!4671 m!53539))

(declare-fun m!53541 () Bool)

(assert (=> b!60997 m!53541))

(declare-fun m!53543 () Bool)

(assert (=> b!60985 m!53543))

(assert (=> b!61003 m!53471))

(assert (=> b!61003 m!53471))

(assert (=> b!61003 m!53473))

(assert (=> b!61002 m!53471))

(declare-fun m!53545 () Bool)

(assert (=> b!61002 m!53545))

(assert (=> b!61002 m!53471))

(declare-fun m!53547 () Bool)

(assert (=> b!61002 m!53547))

(assert (=> b!61002 m!53493))

(assert (=> b!61002 m!53545))

(assert (=> b!61002 m!53493))

(declare-fun m!53549 () Bool)

(assert (=> b!61002 m!53549))

(assert (=> d!11973 m!53453))

(assert (=> b!60996 m!53471))

(declare-fun m!53551 () Bool)

(assert (=> b!60996 m!53551))

(declare-fun m!53553 () Bool)

(assert (=> b!60996 m!53553))

(declare-fun m!53555 () Bool)

(assert (=> b!60996 m!53555))

(declare-fun m!53557 () Bool)

(assert (=> b!60996 m!53557))

(declare-fun m!53559 () Bool)

(assert (=> b!60996 m!53559))

(assert (=> b!60996 m!53539))

(declare-fun m!53561 () Bool)

(assert (=> b!60996 m!53561))

(declare-fun m!53563 () Bool)

(assert (=> b!60996 m!53563))

(assert (=> b!60996 m!53551))

(declare-fun m!53565 () Bool)

(assert (=> b!60996 m!53565))

(declare-fun m!53567 () Bool)

(assert (=> b!60996 m!53567))

(declare-fun m!53569 () Bool)

(assert (=> b!60996 m!53569))

(declare-fun m!53571 () Bool)

(assert (=> b!60996 m!53571))

(declare-fun m!53573 () Bool)

(assert (=> b!60996 m!53573))

(assert (=> b!60996 m!53571))

(declare-fun m!53575 () Bool)

(assert (=> b!60996 m!53575))

(assert (=> b!60996 m!53565))

(assert (=> b!60996 m!53561))

(declare-fun m!53577 () Bool)

(assert (=> b!60996 m!53577))

(declare-fun m!53579 () Bool)

(assert (=> b!60996 m!53579))

(declare-fun m!53581 () Bool)

(assert (=> b!60987 m!53581))

(assert (=> bm!4630 d!11973))

(declare-fun d!11975 () Bool)

(declare-fun get!1093 (Option!130) V!2859)

(assert (=> d!11975 (= (apply!67 lt!24948 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1093 (getValueByKey!124 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2634 () Bool)

(assert (= bs!2634 d!11975))

(declare-fun m!53583 () Bool)

(assert (=> bs!2634 m!53583))

(assert (=> bs!2634 m!53583))

(declare-fun m!53585 () Bool)

(assert (=> bs!2634 m!53585))

(assert (=> b!60872 d!11975))

(declare-fun d!11977 () Bool)

(assert (=> d!11977 (= (get!1091 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2402 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!60825 d!11977))

(declare-fun d!11979 () Bool)

(assert (=> d!11979 (= (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (and (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60922 d!11979))

(declare-fun d!11981 () Bool)

(declare-fun res!33634 () Bool)

(declare-fun e!40115 () Bool)

(assert (=> d!11981 (=> (not res!33634) (not e!40115))))

(assert (=> d!11981 (= res!33634 (simpleValid!42 (_2!1041 lt!24880)))))

(assert (=> d!11981 (= (valid!259 (_2!1041 lt!24880)) e!40115)))

(declare-fun b!61005 () Bool)

(declare-fun res!33635 () Bool)

(assert (=> b!61005 (=> (not res!33635) (not e!40115))))

(assert (=> b!61005 (= res!33635 (= (arrayCountValidKeys!0 (_keys!3695 (_2!1041 lt!24880)) #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))) (_size!364 (_2!1041 lt!24880))))))

(declare-fun b!61006 () Bool)

(declare-fun res!33636 () Bool)

(assert (=> b!61006 (=> (not res!33636) (not e!40115))))

(assert (=> b!61006 (= res!33636 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 (_2!1041 lt!24880)) (mask!5963 (_2!1041 lt!24880))))))

(declare-fun b!61007 () Bool)

(assert (=> b!61007 (= e!40115 (arrayNoDuplicates!0 (_keys!3695 (_2!1041 lt!24880)) #b00000000000000000000000000000000 Nil!1457))))

(assert (= (and d!11981 res!33634) b!61005))

(assert (= (and b!61005 res!33635) b!61006))

(assert (= (and b!61006 res!33636) b!61007))

(declare-fun m!53587 () Bool)

(assert (=> d!11981 m!53587))

(declare-fun m!53589 () Bool)

(assert (=> b!61005 m!53589))

(declare-fun m!53591 () Bool)

(assert (=> b!61006 m!53591))

(declare-fun m!53593 () Bool)

(assert (=> b!61007 m!53593))

(assert (=> d!11931 d!11981))

(assert (=> d!11931 d!11945))

(assert (=> b!60909 d!11951))

(declare-fun d!11983 () Bool)

(declare-fun e!40117 () Bool)

(assert (=> d!11983 e!40117))

(declare-fun res!33637 () Bool)

(assert (=> d!11983 (=> res!33637 e!40117)))

(declare-fun lt!25035 () Bool)

(assert (=> d!11983 (= res!33637 (not lt!25035))))

(declare-fun lt!25037 () Bool)

(assert (=> d!11983 (= lt!25035 lt!25037)))

(declare-fun lt!25036 () Unit!1622)

(declare-fun e!40116 () Unit!1622)

(assert (=> d!11983 (= lt!25036 e!40116)))

(declare-fun c!7966 () Bool)

(assert (=> d!11983 (= c!7966 lt!25037)))

(assert (=> d!11983 (= lt!25037 (containsKey!128 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!11983 (= (contains!697 call!4637 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) lt!25035)))

(declare-fun b!61008 () Bool)

(declare-fun lt!25038 () Unit!1622)

(assert (=> b!61008 (= e!40116 lt!25038)))

(assert (=> b!61008 (= lt!25038 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!61008 (isDefined!78 (getValueByKey!124 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61009 () Bool)

(declare-fun Unit!1636 () Unit!1622)

(assert (=> b!61009 (= e!40116 Unit!1636)))

(declare-fun b!61010 () Bool)

(assert (=> b!61010 (= e!40117 (isDefined!78 (getValueByKey!124 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (= (and d!11983 c!7966) b!61008))

(assert (= (and d!11983 (not c!7966)) b!61009))

(assert (= (and d!11983 (not res!33637)) b!61010))

(assert (=> d!11983 m!53207))

(declare-fun m!53595 () Bool)

(assert (=> d!11983 m!53595))

(assert (=> b!61008 m!53207))

(declare-fun m!53597 () Bool)

(assert (=> b!61008 m!53597))

(assert (=> b!61008 m!53207))

(declare-fun m!53599 () Bool)

(assert (=> b!61008 m!53599))

(assert (=> b!61008 m!53599))

(declare-fun m!53601 () Bool)

(assert (=> b!61008 m!53601))

(assert (=> b!61010 m!53207))

(assert (=> b!61010 m!53599))

(assert (=> b!61010 m!53599))

(assert (=> b!61010 m!53601))

(assert (=> b!60813 d!11983))

(assert (=> bm!4628 d!11935))

(declare-fun e!40125 () SeekEntryResult!238)

(declare-fun lt!25046 () SeekEntryResult!238)

(declare-fun b!61023 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3746 (_ BitVec 32)) SeekEntryResult!238)

(assert (=> b!61023 (= e!40125 (seekKeyOrZeroReturnVacant!0 (x!10172 lt!25046) (index!3078 lt!25046) (index!3078 lt!25046) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun lt!25047 () SeekEntryResult!238)

(declare-fun d!11985 () Bool)

(assert (=> d!11985 (and (or ((_ is Undefined!238) lt!25047) (not ((_ is Found!238) lt!25047)) (and (bvsge (index!3077 lt!25047) #b00000000000000000000000000000000) (bvslt (index!3077 lt!25047) (size!2023 (_keys!3695 newMap!16))))) (or ((_ is Undefined!238) lt!25047) ((_ is Found!238) lt!25047) (not ((_ is MissingZero!238) lt!25047)) (and (bvsge (index!3076 lt!25047) #b00000000000000000000000000000000) (bvslt (index!3076 lt!25047) (size!2023 (_keys!3695 newMap!16))))) (or ((_ is Undefined!238) lt!25047) ((_ is Found!238) lt!25047) ((_ is MissingZero!238) lt!25047) (not ((_ is MissingVacant!238) lt!25047)) (and (bvsge (index!3079 lt!25047) #b00000000000000000000000000000000) (bvslt (index!3079 lt!25047) (size!2023 (_keys!3695 newMap!16))))) (or ((_ is Undefined!238) lt!25047) (ite ((_ is Found!238) lt!25047) (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!25047)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (ite ((_ is MissingZero!238) lt!25047) (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3076 lt!25047)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!238) lt!25047) (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3079 lt!25047)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!40124 () SeekEntryResult!238)

(assert (=> d!11985 (= lt!25047 e!40124)))

(declare-fun c!7975 () Bool)

(assert (=> d!11985 (= c!7975 (and ((_ is Intermediate!238) lt!25046) (undefined!1050 lt!25046)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3746 (_ BitVec 32)) SeekEntryResult!238)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!11985 (= lt!25046 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (=> d!11985 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11985 (= (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)) lt!25047)))

(declare-fun b!61024 () Bool)

(declare-fun e!40126 () SeekEntryResult!238)

(assert (=> b!61024 (= e!40126 (Found!238 (index!3078 lt!25046)))))

(declare-fun b!61025 () Bool)

(declare-fun c!7974 () Bool)

(declare-fun lt!25045 () (_ BitVec 64))

(assert (=> b!61025 (= c!7974 (= lt!25045 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61025 (= e!40126 e!40125)))

(declare-fun b!61026 () Bool)

(assert (=> b!61026 (= e!40124 e!40126)))

(assert (=> b!61026 (= lt!25045 (select (arr!1792 (_keys!3695 newMap!16)) (index!3078 lt!25046)))))

(declare-fun c!7973 () Bool)

(assert (=> b!61026 (= c!7973 (= lt!25045 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61027 () Bool)

(assert (=> b!61027 (= e!40125 (MissingZero!238 (index!3078 lt!25046)))))

(declare-fun b!61028 () Bool)

(assert (=> b!61028 (= e!40124 Undefined!238)))

(assert (= (and d!11985 c!7975) b!61028))

(assert (= (and d!11985 (not c!7975)) b!61026))

(assert (= (and b!61026 c!7973) b!61024))

(assert (= (and b!61026 (not c!7973)) b!61025))

(assert (= (and b!61025 c!7974) b!61027))

(assert (= (and b!61025 (not c!7974)) b!61023))

(assert (=> b!61023 m!53207))

(declare-fun m!53603 () Bool)

(assert (=> b!61023 m!53603))

(declare-fun m!53605 () Bool)

(assert (=> d!11985 m!53605))

(assert (=> d!11985 m!53207))

(declare-fun m!53607 () Bool)

(assert (=> d!11985 m!53607))

(assert (=> d!11985 m!53207))

(assert (=> d!11985 m!53605))

(declare-fun m!53609 () Bool)

(assert (=> d!11985 m!53609))

(declare-fun m!53611 () Bool)

(assert (=> d!11985 m!53611))

(declare-fun m!53613 () Bool)

(assert (=> d!11985 m!53613))

(assert (=> d!11985 m!53453))

(declare-fun m!53615 () Bool)

(assert (=> b!61026 m!53615))

(assert (=> b!60800 d!11985))

(declare-fun b!61063 () Bool)

(declare-fun e!40144 () Bool)

(declare-fun e!40143 () Bool)

(assert (=> b!61063 (= e!40144 e!40143)))

(declare-fun res!33663 () Bool)

(declare-fun call!4688 () Bool)

(assert (=> b!61063 (= res!33663 call!4688)))

(assert (=> b!61063 (=> (not res!33663) (not e!40143))))

(declare-fun b!61064 () Bool)

(declare-fun e!40149 () Unit!1622)

(declare-fun lt!25133 () Unit!1622)

(assert (=> b!61064 (= e!40149 lt!25133)))

(assert (=> b!61064 (= lt!25133 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25137 () SeekEntryResult!238)

(declare-fun call!4689 () SeekEntryResult!238)

(assert (=> b!61064 (= lt!25137 call!4689)))

(declare-fun c!7984 () Bool)

(assert (=> b!61064 (= c!7984 ((_ is MissingZero!238) lt!25137))))

(declare-fun e!40146 () Bool)

(assert (=> b!61064 e!40146))

(declare-fun lt!25129 () SeekEntryResult!238)

(declare-fun e!40148 () Bool)

(declare-fun b!61065 () Bool)

(assert (=> b!61065 (= e!40148 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!25129)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun call!4690 () Bool)

(declare-fun bm!4685 () Bool)

(assert (=> bm!4685 (= call!4690 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!61066 () Bool)

(assert (=> b!61066 (= e!40143 (not call!4690))))

(declare-fun d!11987 () Bool)

(declare-fun e!40147 () Bool)

(assert (=> d!11987 e!40147))

(declare-fun res!33659 () Bool)

(assert (=> d!11987 (=> (not res!33659) (not e!40147))))

(declare-fun lt!25124 () tuple2!2062)

(assert (=> d!11987 (= res!33659 (_1!1041 lt!25124))))

(assert (=> d!11987 (= lt!25124 (tuple2!2063 true (LongMapFixedSize!631 (defaultEntry!2067 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (bvadd (_size!364 newMap!16) #b00000000000000000000000000000001) (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (_vacant!364 newMap!16))))))

(declare-fun lt!25125 () Unit!1622)

(declare-fun lt!25110 () Unit!1622)

(assert (=> d!11987 (= lt!25125 lt!25110)))

(declare-fun lt!25108 () array!3746)

(declare-fun lt!25127 () array!3748)

(assert (=> d!11987 (contains!697 (getCurrentListMap!405 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888))))))

(assert (=> d!11987 (= lt!25110 (lemmaValidKeyInArrayIsInListMap!74 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (defaultEntry!2067 newMap!16)))))

(assert (=> d!11987 (= lt!25127 (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))))

(assert (=> d!11987 (= lt!25108 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun lt!25109 () Unit!1622)

(declare-fun lt!25122 () Unit!1622)

(assert (=> d!11987 (= lt!25109 lt!25122)))

(declare-fun lt!25126 () array!3746)

(assert (=> d!11987 (= (arrayCountValidKeys!0 lt!25126 (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (bvadd (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3746 (_ BitVec 32)) Unit!1622)

(assert (=> d!11987 (= lt!25122 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!25126 (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888))))))

(assert (=> d!11987 (= lt!25126 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun lt!25131 () Unit!1622)

(declare-fun lt!25113 () Unit!1622)

(assert (=> d!11987 (= lt!25131 lt!25113)))

(declare-fun lt!25134 () array!3746)

(assert (=> d!11987 (arrayContainsKey!0 lt!25134 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3746 (_ BitVec 64) (_ BitVec 32)) Unit!1622)

(assert (=> d!11987 (= lt!25113 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!25134 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888))))))

(assert (=> d!11987 (= lt!25134 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun lt!25130 () Unit!1622)

(declare-fun lt!25118 () Unit!1622)

(assert (=> d!11987 (= lt!25130 lt!25118)))

(assert (=> d!11987 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!6 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) (_ BitVec 64) V!2859 Int) Unit!1622)

(assert (=> d!11987 (= lt!25118 (lemmaAddValidKeyToArrayThenAddPairToListMap!6 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25114 () Unit!1622)

(declare-fun lt!25120 () Unit!1622)

(assert (=> d!11987 (= lt!25114 lt!25120)))

(assert (=> d!11987 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (mask!5963 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3746 (_ BitVec 32) (_ BitVec 32)) Unit!1622)

(assert (=> d!11987 (= lt!25120 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (mask!5963 newMap!16)))))

(declare-fun lt!25111 () Unit!1622)

(declare-fun lt!25117 () Unit!1622)

(assert (=> d!11987 (= lt!25111 lt!25117)))

(assert (=> d!11987 (= (arrayCountValidKeys!0 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3746 (_ BitVec 32) (_ BitVec 64)) Unit!1622)

(assert (=> d!11987 (= lt!25117 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3695 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun lt!25132 () Unit!1622)

(declare-fun lt!25136 () Unit!1622)

(assert (=> d!11987 (= lt!25132 lt!25136)))

(declare-fun lt!25115 () List!1460)

(declare-fun lt!25123 () (_ BitVec 32))

(assert (=> d!11987 (arrayNoDuplicates!0 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) lt!25123 lt!25115)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3746 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1460) Unit!1622)

(assert (=> d!11987 (= lt!25136 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) lt!25123 lt!25115))))

(assert (=> d!11987 (= lt!25115 Nil!1457)))

(assert (=> d!11987 (= lt!25123 #b00000000000000000000000000000000)))

(declare-fun lt!25128 () Unit!1622)

(declare-fun e!40150 () Unit!1622)

(assert (=> d!11987 (= lt!25128 e!40150)))

(declare-fun c!7987 () Bool)

(assert (=> d!11987 (= c!7987 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!25119 () Unit!1622)

(assert (=> d!11987 (= lt!25119 e!40149)))

(declare-fun c!7985 () Bool)

(assert (=> d!11987 (= c!7985 (contains!697 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!11987 (valid!259 newMap!16)))

(assert (=> d!11987 (= (updateHelperNewKey!16 newMap!16 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888))) lt!25124)))

(declare-fun b!61067 () Bool)

(declare-fun res!33656 () Bool)

(assert (=> b!61067 (=> (not res!33656) (not e!40147))))

(assert (=> b!61067 (= res!33656 (contains!697 (map!1115 (_2!1041 lt!25124)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61068 () Bool)

(declare-fun res!33662 () Bool)

(declare-fun call!4691 () Bool)

(assert (=> b!61068 (= res!33662 call!4691)))

(assert (=> b!61068 (=> (not res!33662) (not e!40148))))

(declare-fun b!61069 () Bool)

(assert (=> b!61069 (= e!40147 (= (map!1115 (_2!1041 lt!25124)) (+!82 (map!1115 newMap!16) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61070 () Bool)

(declare-fun res!33664 () Bool)

(assert (=> b!61070 (= res!33664 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3079 lt!25137)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61070 (=> (not res!33664) (not e!40143))))

(declare-fun b!61071 () Bool)

(declare-fun Unit!1637 () Unit!1622)

(assert (=> b!61071 (= e!40149 Unit!1637)))

(declare-fun lt!25116 () Unit!1622)

(assert (=> b!61071 (= lt!25116 (lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(assert (=> b!61071 (= lt!25129 call!4689)))

(declare-fun res!33657 () Bool)

(assert (=> b!61071 (= res!33657 ((_ is Found!238) lt!25129))))

(assert (=> b!61071 (=> (not res!33657) (not e!40148))))

(assert (=> b!61071 e!40148))

(declare-fun lt!25135 () Unit!1622)

(assert (=> b!61071 (= lt!25135 lt!25116)))

(assert (=> b!61071 false))

(declare-fun b!61072 () Bool)

(declare-fun c!7986 () Bool)

(assert (=> b!61072 (= c!7986 ((_ is MissingVacant!238) lt!25137))))

(assert (=> b!61072 (= e!40146 e!40144)))

(declare-fun b!61073 () Bool)

(declare-fun Unit!1638 () Unit!1622)

(assert (=> b!61073 (= e!40150 Unit!1638)))

(declare-fun b!61074 () Bool)

(declare-fun res!33658 () Bool)

(assert (=> b!61074 (=> (not res!33658) (not e!40147))))

(assert (=> b!61074 (= res!33658 (valid!259 (_2!1041 lt!25124)))))

(declare-fun b!61075 () Bool)

(declare-fun e!40145 () Bool)

(assert (=> b!61075 (= e!40145 (not call!4690))))

(declare-fun bm!4686 () Bool)

(assert (=> bm!4686 (= call!4688 call!4691)))

(declare-fun bm!4687 () Bool)

(assert (=> bm!4687 (= call!4689 (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun b!61076 () Bool)

(declare-fun res!33661 () Bool)

(assert (=> b!61076 (=> (not res!33661) (not e!40145))))

(assert (=> b!61076 (= res!33661 call!4688)))

(assert (=> b!61076 (= e!40146 e!40145)))

(declare-fun b!61077 () Bool)

(declare-fun res!33660 () Bool)

(assert (=> b!61077 (=> (not res!33660) (not e!40145))))

(assert (=> b!61077 (= res!33660 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3076 lt!25137)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4688 () Bool)

(assert (=> bm!4688 (= call!4691 (inRange!0 (ite c!7985 (index!3077 lt!25129) (ite c!7984 (index!3076 lt!25137) (index!3079 lt!25137))) (mask!5963 newMap!16)))))

(declare-fun b!61078 () Bool)

(assert (=> b!61078 (= e!40144 ((_ is Undefined!238) lt!25137))))

(declare-fun b!61079 () Bool)

(declare-fun Unit!1639 () Unit!1622)

(assert (=> b!61079 (= e!40150 Unit!1639)))

(declare-fun lt!25121 () Unit!1622)

(declare-fun lemmaArrayContainsKeyThenInListMap!6 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) (_ BitVec 32) Int) Unit!1622)

(assert (=> b!61079 (= lt!25121 (lemmaArrayContainsKeyThenInListMap!6 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(assert (=> b!61079 (contains!697 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))

(declare-fun lt!25112 () Unit!1622)

(assert (=> b!61079 (= lt!25112 lt!25121)))

(assert (=> b!61079 false))

(assert (= (and d!11987 c!7985) b!61071))

(assert (= (and d!11987 (not c!7985)) b!61064))

(assert (= (and b!61071 res!33657) b!61068))

(assert (= (and b!61068 res!33662) b!61065))

(assert (= (and b!61064 c!7984) b!61076))

(assert (= (and b!61064 (not c!7984)) b!61072))

(assert (= (and b!61076 res!33661) b!61077))

(assert (= (and b!61077 res!33660) b!61075))

(assert (= (and b!61072 c!7986) b!61063))

(assert (= (and b!61072 (not c!7986)) b!61078))

(assert (= (and b!61063 res!33663) b!61070))

(assert (= (and b!61070 res!33664) b!61066))

(assert (= (or b!61076 b!61063) bm!4686))

(assert (= (or b!61075 b!61066) bm!4685))

(assert (= (or b!61068 bm!4686) bm!4688))

(assert (= (or b!61071 b!61064) bm!4687))

(assert (= (and d!11987 c!7987) b!61079))

(assert (= (and d!11987 (not c!7987)) b!61073))

(assert (= (and d!11987 res!33659) b!61074))

(assert (= (and b!61074 res!33658) b!61067))

(assert (= (and b!61067 res!33656) b!61069))

(declare-fun m!53617 () Bool)

(assert (=> b!61065 m!53617))

(declare-fun m!53619 () Bool)

(assert (=> b!61070 m!53619))

(declare-fun m!53621 () Bool)

(assert (=> b!61077 m!53621))

(assert (=> b!61064 m!53207))

(assert (=> b!61064 m!53309))

(assert (=> b!61079 m!53207))

(declare-fun m!53623 () Bool)

(assert (=> b!61079 m!53623))

(assert (=> b!61079 m!53319))

(assert (=> b!61079 m!53319))

(assert (=> b!61079 m!53207))

(declare-fun m!53625 () Bool)

(assert (=> b!61079 m!53625))

(declare-fun m!53627 () Bool)

(assert (=> b!61067 m!53627))

(assert (=> b!61067 m!53627))

(assert (=> b!61067 m!53207))

(declare-fun m!53629 () Bool)

(assert (=> b!61067 m!53629))

(assert (=> bm!4685 m!53207))

(assert (=> bm!4685 m!53333))

(declare-fun m!53631 () Bool)

(assert (=> bm!4688 m!53631))

(assert (=> bm!4687 m!53207))

(assert (=> bm!4687 m!53313))

(declare-fun m!53633 () Bool)

(assert (=> b!61074 m!53633))

(assert (=> b!61069 m!53627))

(assert (=> b!61069 m!53215))

(assert (=> b!61069 m!53215))

(declare-fun m!53635 () Bool)

(assert (=> b!61069 m!53635))

(assert (=> b!61071 m!53207))

(assert (=> b!61071 m!53303))

(assert (=> d!11987 m!53207))

(assert (=> d!11987 m!53333))

(assert (=> d!11987 m!53219))

(declare-fun m!53637 () Bool)

(assert (=> d!11987 m!53637))

(assert (=> d!11987 m!53319))

(assert (=> d!11987 m!53461))

(assert (=> d!11987 m!53319))

(assert (=> d!11987 m!53319))

(assert (=> d!11987 m!53207))

(assert (=> d!11987 m!53625))

(declare-fun m!53639 () Bool)

(assert (=> d!11987 m!53639))

(assert (=> d!11987 m!53207))

(declare-fun m!53641 () Bool)

(assert (=> d!11987 m!53641))

(assert (=> d!11987 m!53207))

(declare-fun m!53643 () Bool)

(assert (=> d!11987 m!53643))

(declare-fun m!53645 () Bool)

(assert (=> d!11987 m!53645))

(declare-fun m!53647 () Bool)

(assert (=> d!11987 m!53647))

(assert (=> d!11987 m!53637))

(declare-fun m!53649 () Bool)

(assert (=> d!11987 m!53649))

(assert (=> d!11987 m!53207))

(declare-fun m!53651 () Bool)

(assert (=> d!11987 m!53651))

(declare-fun m!53653 () Bool)

(assert (=> d!11987 m!53653))

(assert (=> d!11987 m!53207))

(declare-fun m!53655 () Bool)

(assert (=> d!11987 m!53655))

(declare-fun m!53657 () Bool)

(assert (=> d!11987 m!53657))

(declare-fun m!53659 () Bool)

(assert (=> d!11987 m!53659))

(assert (=> d!11987 m!53647))

(assert (=> d!11987 m!53207))

(assert (=> d!11987 m!53227))

(declare-fun m!53661 () Bool)

(assert (=> d!11987 m!53661))

(declare-fun m!53663 () Bool)

(assert (=> d!11987 m!53663))

(declare-fun m!53665 () Bool)

(assert (=> d!11987 m!53665))

(declare-fun m!53667 () Bool)

(assert (=> d!11987 m!53667))

(assert (=> d!11987 m!53417))

(declare-fun m!53669 () Bool)

(assert (=> d!11987 m!53669))

(assert (=> d!11987 m!53207))

(declare-fun m!53671 () Bool)

(assert (=> d!11987 m!53671))

(assert (=> bm!4626 d!11987))

(declare-fun d!11989 () Bool)

(assert (=> d!11989 (= (apply!67 lt!24948 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1093 (getValueByKey!124 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2635 () Bool)

(assert (= bs!2635 d!11989))

(assert (=> bs!2635 m!53359))

(declare-fun m!53673 () Bool)

(assert (=> bs!2635 m!53673))

(assert (=> bs!2635 m!53673))

(declare-fun m!53675 () Bool)

(assert (=> bs!2635 m!53675))

(assert (=> b!60887 d!11989))

(declare-fun d!11991 () Bool)

(declare-fun c!7988 () Bool)

(assert (=> d!11991 (= c!7988 ((_ is ValueCellFull!861) (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!40151 () V!2859)

(assert (=> d!11991 (= (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40151)))

(declare-fun b!61080 () Bool)

(assert (=> b!61080 (= e!40151 (get!1091 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61081 () Bool)

(assert (=> b!61081 (= e!40151 (get!1092 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11991 c!7988) b!61080))

(assert (= (and d!11991 (not c!7988)) b!61081))

(assert (=> b!61080 m!53377))

(assert (=> b!61080 m!53225))

(declare-fun m!53677 () Bool)

(assert (=> b!61080 m!53677))

(assert (=> b!61081 m!53377))

(assert (=> b!61081 m!53225))

(declare-fun m!53679 () Bool)

(assert (=> b!61081 m!53679))

(assert (=> b!60887 d!11991))

(declare-fun d!11993 () Bool)

(assert (=> d!11993 (= (apply!67 lt!24948 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1093 (getValueByKey!124 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2636 () Bool)

(assert (= bs!2636 d!11993))

(declare-fun m!53681 () Bool)

(assert (=> bs!2636 m!53681))

(assert (=> bs!2636 m!53681))

(declare-fun m!53683 () Bool)

(assert (=> bs!2636 m!53683))

(assert (=> b!60870 d!11993))

(declare-fun d!11995 () Bool)

(assert (=> d!11995 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24895 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25140 () Unit!1622)

(declare-fun choose!326 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 V!2859 Int) Unit!1622)

(assert (=> d!11995 (= lt!25140 (choose!326 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24895 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) (defaultEntry!2067 newMap!16)))))

(assert (=> d!11995 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11995 (= (lemmaChangeZeroKeyThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24895 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) (defaultEntry!2067 newMap!16)) lt!25140)))

(declare-fun bs!2637 () Bool)

(assert (= bs!2637 d!11995))

(assert (=> bs!2637 m!53227))

(declare-fun m!53685 () Bool)

(assert (=> bs!2637 m!53685))

(assert (=> bs!2637 m!53319))

(assert (=> bs!2637 m!53319))

(declare-fun m!53687 () Bool)

(assert (=> bs!2637 m!53687))

(assert (=> bs!2637 m!53453))

(assert (=> bs!2637 m!53227))

(declare-fun m!53689 () Bool)

(assert (=> bs!2637 m!53689))

(assert (=> b!60785 d!11995))

(declare-fun d!11997 () Bool)

(declare-fun e!40154 () Bool)

(assert (=> d!11997 e!40154))

(declare-fun c!7991 () Bool)

(assert (=> d!11997 (= c!7991 (and (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!11997 true))

(declare-fun _$29!69 () Unit!1622)

(assert (=> d!11997 (= (choose!323 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))) _$29!69)))

(declare-fun b!61086 () Bool)

(assert (=> b!61086 (= e!40154 (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!61087 () Bool)

(assert (=> b!61087 (= e!40154 (ite (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!11997 c!7991) b!61086))

(assert (= (and d!11997 (not c!7991)) b!61087))

(assert (=> b!61086 m!53207))

(assert (=> b!61086 m!53211))

(assert (=> d!11953 d!11997))

(assert (=> d!11953 d!11939))

(declare-fun d!11999 () Bool)

(assert (=> d!11999 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25143 () Unit!1622)

(declare-fun choose!327 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 V!2859 Int) Unit!1622)

(assert (=> d!11999 (= lt!25143 (choose!327 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(assert (=> d!11999 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11999 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)) lt!25143)))

(declare-fun bs!2638 () Bool)

(assert (= bs!2638 d!11999))

(assert (=> bs!2638 m!53319))

(assert (=> bs!2638 m!53227))

(declare-fun m!53691 () Bool)

(assert (=> bs!2638 m!53691))

(assert (=> bs!2638 m!53227))

(declare-fun m!53693 () Bool)

(assert (=> bs!2638 m!53693))

(assert (=> bs!2638 m!53453))

(assert (=> bs!2638 m!53319))

(declare-fun m!53695 () Bool)

(assert (=> bs!2638 m!53695))

(assert (=> b!60820 d!11999))

(assert (=> bm!4624 d!11985))

(declare-fun d!12001 () Bool)

(declare-fun e!40157 () Bool)

(assert (=> d!12001 e!40157))

(declare-fun res!33669 () Bool)

(assert (=> d!12001 (=> (not res!33669) (not e!40157))))

(declare-fun lt!25152 () ListLongMap!1385)

(assert (=> d!12001 (= res!33669 (contains!697 lt!25152 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun lt!25154 () List!1459)

(assert (=> d!12001 (= lt!25152 (ListLongMap!1386 lt!25154))))

(declare-fun lt!25155 () Unit!1622)

(declare-fun lt!25153 () Unit!1622)

(assert (=> d!12001 (= lt!25155 lt!25153)))

(assert (=> d!12001 (= (getValueByKey!124 lt!25154 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!43 (List!1459 (_ BitVec 64) V!2859) Unit!1622)

(assert (=> d!12001 (= lt!25153 (lemmaContainsTupThenGetReturnValue!43 lt!25154 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun insertStrictlySorted!45 (List!1459 (_ BitVec 64) V!2859) List!1459)

(assert (=> d!12001 (= lt!25154 (insertStrictlySorted!45 (toList!708 call!4653) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12001 (= (+!82 call!4653 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!25152)))

(declare-fun b!61092 () Bool)

(declare-fun res!33670 () Bool)

(assert (=> b!61092 (=> (not res!33670) (not e!40157))))

(assert (=> b!61092 (= res!33670 (= (getValueByKey!124 (toList!708 lt!25152) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61093 () Bool)

(declare-fun contains!699 (List!1459 tuple2!2060) Bool)

(assert (=> b!61093 (= e!40157 (contains!699 (toList!708 lt!25152) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(assert (= (and d!12001 res!33669) b!61092))

(assert (= (and b!61092 res!33670) b!61093))

(declare-fun m!53697 () Bool)

(assert (=> d!12001 m!53697))

(declare-fun m!53699 () Bool)

(assert (=> d!12001 m!53699))

(declare-fun m!53701 () Bool)

(assert (=> d!12001 m!53701))

(declare-fun m!53703 () Bool)

(assert (=> d!12001 m!53703))

(declare-fun m!53705 () Bool)

(assert (=> b!61092 m!53705))

(declare-fun m!53707 () Bool)

(assert (=> b!61093 m!53707))

(assert (=> b!60882 d!12001))

(assert (=> d!11937 d!11939))

(declare-fun b!61102 () Bool)

(declare-fun e!40164 () Bool)

(declare-fun e!40166 () Bool)

(assert (=> b!61102 (= e!40164 e!40166)))

(declare-fun c!7994 () Bool)

(assert (=> b!61102 (= c!7994 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4691 () Bool)

(declare-fun call!4694 () Bool)

(assert (=> bm!4691 (= call!4694 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun b!61103 () Bool)

(declare-fun e!40165 () Bool)

(assert (=> b!61103 (= e!40165 call!4694)))

(declare-fun d!12003 () Bool)

(declare-fun res!33675 () Bool)

(assert (=> d!12003 (=> res!33675 e!40164)))

(assert (=> d!12003 (= res!33675 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!12003 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 newMap!16) (mask!5963 newMap!16)) e!40164)))

(declare-fun b!61104 () Bool)

(assert (=> b!61104 (= e!40166 e!40165)))

(declare-fun lt!25163 () (_ BitVec 64))

(assert (=> b!61104 (= lt!25163 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25162 () Unit!1622)

(assert (=> b!61104 (= lt!25162 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3695 newMap!16) lt!25163 #b00000000000000000000000000000000))))

(assert (=> b!61104 (arrayContainsKey!0 (_keys!3695 newMap!16) lt!25163 #b00000000000000000000000000000000)))

(declare-fun lt!25164 () Unit!1622)

(assert (=> b!61104 (= lt!25164 lt!25162)))

(declare-fun res!33676 () Bool)

(assert (=> b!61104 (= res!33676 (= (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (_keys!3695 newMap!16) (mask!5963 newMap!16)) (Found!238 #b00000000000000000000000000000000)))))

(assert (=> b!61104 (=> (not res!33676) (not e!40165))))

(declare-fun b!61105 () Bool)

(assert (=> b!61105 (= e!40166 call!4694)))

(assert (= (and d!12003 (not res!33675)) b!61102))

(assert (= (and b!61102 c!7994) b!61104))

(assert (= (and b!61102 (not c!7994)) b!61105))

(assert (= (and b!61104 res!33676) b!61103))

(assert (= (or b!61103 b!61105) bm!4691))

(assert (=> b!61102 m!53471))

(assert (=> b!61102 m!53471))

(assert (=> b!61102 m!53473))

(declare-fun m!53709 () Bool)

(assert (=> bm!4691 m!53709))

(assert (=> b!61104 m!53471))

(declare-fun m!53711 () Bool)

(assert (=> b!61104 m!53711))

(declare-fun m!53713 () Bool)

(assert (=> b!61104 m!53713))

(assert (=> b!61104 m!53471))

(declare-fun m!53715 () Bool)

(assert (=> b!61104 m!53715))

(assert (=> b!60897 d!12003))

(declare-fun d!12005 () Bool)

(declare-fun res!33677 () Bool)

(declare-fun e!40167 () Bool)

(assert (=> d!12005 (=> (not res!33677) (not e!40167))))

(assert (=> d!12005 (= res!33677 (simpleValid!42 (v!2403 (underlying!231 thiss!992))))))

(assert (=> d!12005 (= (valid!259 (v!2403 (underlying!231 thiss!992))) e!40167)))

(declare-fun b!61106 () Bool)

(declare-fun res!33678 () Bool)

(assert (=> b!61106 (=> (not res!33678) (not e!40167))))

(assert (=> b!61106 (= res!33678 (= (arrayCountValidKeys!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000 (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))) (_size!364 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun b!61107 () Bool)

(declare-fun res!33679 () Bool)

(assert (=> b!61107 (=> (not res!33679) (not e!40167))))

(assert (=> b!61107 (= res!33679 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun b!61108 () Bool)

(assert (=> b!61108 (= e!40167 (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000 Nil!1457))))

(assert (= (and d!12005 res!33677) b!61106))

(assert (= (and b!61106 res!33678) b!61107))

(assert (= (and b!61107 res!33679) b!61108))

(declare-fun m!53717 () Bool)

(assert (=> d!12005 m!53717))

(declare-fun m!53719 () Bool)

(assert (=> b!61106 m!53719))

(declare-fun m!53721 () Bool)

(assert (=> b!61107 m!53721))

(declare-fun m!53723 () Bool)

(assert (=> b!61108 m!53723))

(assert (=> d!11957 d!12005))

(assert (=> d!11949 d!11955))

(declare-fun d!12007 () Bool)

(assert (=> d!12007 (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) from!355 Nil!1457)))

(assert (=> d!12007 true))

(declare-fun _$71!75 () Unit!1622)

(assert (=> d!12007 (= (choose!39 (_keys!3695 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!75)))

(declare-fun bs!2639 () Bool)

(assert (= bs!2639 d!12007))

(assert (=> bs!2639 m!53205))

(assert (=> d!11949 d!12007))

(declare-fun c!8000 () Bool)

(declare-fun call!4699 () Bool)

(declare-fun lt!25170 () SeekEntryResult!238)

(declare-fun bm!4696 () Bool)

(assert (=> bm!4696 (= call!4699 (inRange!0 (ite c!8000 (index!3076 lt!25170) (index!3079 lt!25170)) (mask!5963 newMap!16)))))

(declare-fun b!61125 () Bool)

(declare-fun res!33691 () Bool)

(declare-fun e!40177 () Bool)

(assert (=> b!61125 (=> (not res!33691) (not e!40177))))

(assert (=> b!61125 (= res!33691 call!4699)))

(declare-fun e!40176 () Bool)

(assert (=> b!61125 (= e!40176 e!40177)))

(declare-fun b!61126 () Bool)

(declare-fun e!40178 () Bool)

(declare-fun call!4700 () Bool)

(assert (=> b!61126 (= e!40178 (not call!4700))))

(declare-fun bm!4697 () Bool)

(assert (=> bm!4697 (= call!4700 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!61127 () Bool)

(assert (=> b!61127 (= e!40177 (not call!4700))))

(declare-fun d!12009 () Bool)

(declare-fun e!40179 () Bool)

(assert (=> d!12009 e!40179))

(assert (=> d!12009 (= c!8000 ((_ is MissingZero!238) lt!25170))))

(assert (=> d!12009 (= lt!25170 (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun lt!25169 () Unit!1622)

(declare-fun choose!328 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) Int) Unit!1622)

(assert (=> d!12009 (= lt!25169 (choose!328 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(assert (=> d!12009 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12009 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)) lt!25169)))

(declare-fun b!61128 () Bool)

(declare-fun res!33689 () Bool)

(assert (=> b!61128 (=> (not res!33689) (not e!40177))))

(assert (=> b!61128 (= res!33689 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3079 lt!25170)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61128 (and (bvsge (index!3079 lt!25170) #b00000000000000000000000000000000) (bvslt (index!3079 lt!25170) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61129 () Bool)

(assert (=> b!61129 (and (bvsge (index!3076 lt!25170) #b00000000000000000000000000000000) (bvslt (index!3076 lt!25170) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun res!33688 () Bool)

(assert (=> b!61129 (= res!33688 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3076 lt!25170)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61129 (=> (not res!33688) (not e!40178))))

(declare-fun b!61130 () Bool)

(assert (=> b!61130 (= e!40176 ((_ is Undefined!238) lt!25170))))

(declare-fun b!61131 () Bool)

(assert (=> b!61131 (= e!40179 e!40176)))

(declare-fun c!7999 () Bool)

(assert (=> b!61131 (= c!7999 ((_ is MissingVacant!238) lt!25170))))

(declare-fun b!61132 () Bool)

(assert (=> b!61132 (= e!40179 e!40178)))

(declare-fun res!33690 () Bool)

(assert (=> b!61132 (= res!33690 call!4699)))

(assert (=> b!61132 (=> (not res!33690) (not e!40178))))

(assert (= (and d!12009 c!8000) b!61132))

(assert (= (and d!12009 (not c!8000)) b!61131))

(assert (= (and b!61132 res!33690) b!61129))

(assert (= (and b!61129 res!33688) b!61126))

(assert (= (and b!61131 c!7999) b!61125))

(assert (= (and b!61131 (not c!7999)) b!61130))

(assert (= (and b!61125 res!33691) b!61128))

(assert (= (and b!61128 res!33689) b!61127))

(assert (= (or b!61132 b!61125) bm!4696))

(assert (= (or b!61126 b!61127) bm!4697))

(declare-fun m!53725 () Bool)

(assert (=> bm!4696 m!53725))

(assert (=> d!12009 m!53207))

(assert (=> d!12009 m!53313))

(assert (=> d!12009 m!53207))

(declare-fun m!53727 () Bool)

(assert (=> d!12009 m!53727))

(assert (=> d!12009 m!53453))

(declare-fun m!53729 () Bool)

(assert (=> b!61129 m!53729))

(declare-fun m!53731 () Bool)

(assert (=> b!61128 m!53731))

(assert (=> bm!4697 m!53207))

(assert (=> bm!4697 m!53333))

(assert (=> bm!4622 d!12009))

(assert (=> b!60925 d!11979))

(declare-fun d!12011 () Bool)

(declare-fun e!40180 () Bool)

(assert (=> d!12011 e!40180))

(declare-fun res!33692 () Bool)

(assert (=> d!12011 (=> (not res!33692) (not e!40180))))

(declare-fun lt!25171 () ListLongMap!1385)

(assert (=> d!12011 (= res!33692 (contains!697 lt!25171 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun lt!25173 () List!1459)

(assert (=> d!12011 (= lt!25171 (ListLongMap!1386 lt!25173))))

(declare-fun lt!25174 () Unit!1622)

(declare-fun lt!25172 () Unit!1622)

(assert (=> d!12011 (= lt!25174 lt!25172)))

(assert (=> d!12011 (= (getValueByKey!124 lt!25173 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) (Some!129 (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12011 (= lt!25172 (lemmaContainsTupThenGetReturnValue!43 lt!25173 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12011 (= lt!25173 (insertStrictlySorted!45 (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658))) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12011 (= (+!82 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658)) (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25171)))

(declare-fun b!61133 () Bool)

(declare-fun res!33693 () Bool)

(assert (=> b!61133 (=> (not res!33693) (not e!40180))))

(assert (=> b!61133 (= res!33693 (= (getValueByKey!124 (toList!708 lt!25171) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) (Some!129 (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61134 () Bool)

(assert (=> b!61134 (= e!40180 (contains!699 (toList!708 lt!25171) (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (= (and d!12011 res!33692) b!61133))

(assert (= (and b!61133 res!33693) b!61134))

(declare-fun m!53733 () Bool)

(assert (=> d!12011 m!53733))

(declare-fun m!53735 () Bool)

(assert (=> d!12011 m!53735))

(declare-fun m!53737 () Bool)

(assert (=> d!12011 m!53737))

(declare-fun m!53739 () Bool)

(assert (=> d!12011 m!53739))

(declare-fun m!53741 () Bool)

(assert (=> b!61133 m!53741))

(declare-fun m!53743 () Bool)

(assert (=> b!61134 m!53743))

(assert (=> bm!4653 d!12011))

(declare-fun bm!4698 () Bool)

(declare-fun call!4704 () ListLongMap!1385)

(declare-fun call!4702 () ListLongMap!1385)

(assert (=> bm!4698 (= call!4704 call!4702)))

(declare-fun b!61135 () Bool)

(declare-fun res!33697 () Bool)

(declare-fun e!40187 () Bool)

(assert (=> b!61135 (=> (not res!33697) (not e!40187))))

(declare-fun e!40188 () Bool)

(assert (=> b!61135 (= res!33697 e!40188)))

(declare-fun c!8001 () Bool)

(assert (=> b!61135 (= c!8001 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4699 () Bool)

(assert (=> bm!4699 (= call!4702 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61136 () Bool)

(declare-fun e!40193 () Bool)

(declare-fun lt!25179 () ListLongMap!1385)

(assert (=> b!61136 (= e!40193 (= (apply!67 lt!25179 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!61137 () Bool)

(declare-fun e!40185 () Bool)

(assert (=> b!61137 (= e!40188 e!40185)))

(declare-fun res!33700 () Bool)

(declare-fun call!4705 () Bool)

(assert (=> b!61137 (= res!33700 call!4705)))

(assert (=> b!61137 (=> (not res!33700) (not e!40185))))

(declare-fun b!61138 () Bool)

(assert (=> b!61138 (= e!40185 (= (apply!67 lt!25179 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun b!61139 () Bool)

(declare-fun e!40192 () Bool)

(assert (=> b!61139 (= e!40192 e!40193)))

(declare-fun res!33694 () Bool)

(declare-fun call!4707 () Bool)

(assert (=> b!61139 (= res!33694 call!4707)))

(assert (=> b!61139 (=> (not res!33694) (not e!40193))))

(declare-fun b!61140 () Bool)

(declare-fun c!8005 () Bool)

(assert (=> b!61140 (= c!8005 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40190 () ListLongMap!1385)

(declare-fun e!40181 () ListLongMap!1385)

(assert (=> b!61140 (= e!40190 e!40181)))

(declare-fun b!61141 () Bool)

(declare-fun e!40189 () Bool)

(declare-fun e!40183 () Bool)

(assert (=> b!61141 (= e!40189 e!40183)))

(declare-fun res!33698 () Bool)

(assert (=> b!61141 (=> (not res!33698) (not e!40183))))

(assert (=> b!61141 (= res!33698 (contains!697 lt!25179 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61141 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61142 () Bool)

(assert (=> b!61142 (= e!40187 e!40192)))

(declare-fun c!8006 () Bool)

(assert (=> b!61142 (= c!8006 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4700 () Bool)

(assert (=> bm!4700 (= call!4705 (contains!697 lt!25179 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61143 () Bool)

(declare-fun call!4703 () ListLongMap!1385)

(assert (=> b!61143 (= e!40181 call!4703)))

(declare-fun call!4706 () ListLongMap!1385)

(declare-fun c!8004 () Bool)

(declare-fun bm!4701 () Bool)

(declare-fun call!4701 () ListLongMap!1385)

(declare-fun c!8002 () Bool)

(assert (=> bm!4701 (= call!4701 (+!82 (ite c!8002 call!4702 (ite c!8004 call!4704 call!4706)) (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!61144 () Bool)

(declare-fun e!40186 () Bool)

(assert (=> b!61144 (= e!40186 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61145 () Bool)

(assert (=> b!61145 (= e!40181 call!4706)))

(declare-fun b!61146 () Bool)

(declare-fun e!40182 () Unit!1622)

(declare-fun Unit!1640 () Unit!1622)

(assert (=> b!61146 (= e!40182 Unit!1640)))

(declare-fun bm!4702 () Bool)

(assert (=> bm!4702 (= call!4706 call!4704)))

(declare-fun d!12013 () Bool)

(assert (=> d!12013 e!40187))

(declare-fun res!33701 () Bool)

(assert (=> d!12013 (=> (not res!33701) (not e!40187))))

(assert (=> d!12013 (= res!33701 (or (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))))

(declare-fun lt!25191 () ListLongMap!1385)

(assert (=> d!12013 (= lt!25179 lt!25191)))

(declare-fun lt!25184 () Unit!1622)

(assert (=> d!12013 (= lt!25184 e!40182)))

(declare-fun c!8003 () Bool)

(declare-fun e!40184 () Bool)

(assert (=> d!12013 (= c!8003 e!40184)))

(declare-fun res!33699 () Bool)

(assert (=> d!12013 (=> (not res!33699) (not e!40184))))

(assert (=> d!12013 (= res!33699 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun e!40191 () ListLongMap!1385)

(assert (=> d!12013 (= lt!25191 e!40191)))

(assert (=> d!12013 (= c!8002 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12013 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12013 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25179)))

(declare-fun b!61147 () Bool)

(declare-fun lt!25182 () Unit!1622)

(assert (=> b!61147 (= e!40182 lt!25182)))

(declare-fun lt!25185 () ListLongMap!1385)

(assert (=> b!61147 (= lt!25185 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25176 () (_ BitVec 64))

(assert (=> b!61147 (= lt!25176 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25177 () (_ BitVec 64))

(assert (=> b!61147 (= lt!25177 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25192 () Unit!1622)

(assert (=> b!61147 (= lt!25192 (addStillContains!43 lt!25185 lt!25176 (zeroValue!1981 newMap!16) lt!25177))))

(assert (=> b!61147 (contains!697 (+!82 lt!25185 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16))) lt!25177)))

(declare-fun lt!25181 () Unit!1622)

(assert (=> b!61147 (= lt!25181 lt!25192)))

(declare-fun lt!25175 () ListLongMap!1385)

(assert (=> b!61147 (= lt!25175 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25195 () (_ BitVec 64))

(assert (=> b!61147 (= lt!25195 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25187 () (_ BitVec 64))

(assert (=> b!61147 (= lt!25187 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25180 () Unit!1622)

(assert (=> b!61147 (= lt!25180 (addApplyDifferent!43 lt!25175 lt!25195 (minValue!1981 newMap!16) lt!25187))))

(assert (=> b!61147 (= (apply!67 (+!82 lt!25175 (tuple2!2061 lt!25195 (minValue!1981 newMap!16))) lt!25187) (apply!67 lt!25175 lt!25187))))

(declare-fun lt!25193 () Unit!1622)

(assert (=> b!61147 (= lt!25193 lt!25180)))

(declare-fun lt!25190 () ListLongMap!1385)

(assert (=> b!61147 (= lt!25190 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25194 () (_ BitVec 64))

(assert (=> b!61147 (= lt!25194 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25188 () (_ BitVec 64))

(assert (=> b!61147 (= lt!25188 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25178 () Unit!1622)

(assert (=> b!61147 (= lt!25178 (addApplyDifferent!43 lt!25190 lt!25194 (zeroValue!1981 newMap!16) lt!25188))))

(assert (=> b!61147 (= (apply!67 (+!82 lt!25190 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16))) lt!25188) (apply!67 lt!25190 lt!25188))))

(declare-fun lt!25186 () Unit!1622)

(assert (=> b!61147 (= lt!25186 lt!25178)))

(declare-fun lt!25196 () ListLongMap!1385)

(assert (=> b!61147 (= lt!25196 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25183 () (_ BitVec 64))

(assert (=> b!61147 (= lt!25183 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25189 () (_ BitVec 64))

(assert (=> b!61147 (= lt!25189 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61147 (= lt!25182 (addApplyDifferent!43 lt!25196 lt!25183 (minValue!1981 newMap!16) lt!25189))))

(assert (=> b!61147 (= (apply!67 (+!82 lt!25196 (tuple2!2061 lt!25183 (minValue!1981 newMap!16))) lt!25189) (apply!67 lt!25196 lt!25189))))

(declare-fun b!61148 () Bool)

(assert (=> b!61148 (= e!40191 (+!82 call!4701 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun bm!4703 () Bool)

(assert (=> bm!4703 (= call!4703 call!4701)))

(declare-fun b!61149 () Bool)

(assert (=> b!61149 (= e!40192 (not call!4707))))

(declare-fun b!61150 () Bool)

(assert (=> b!61150 (= e!40188 (not call!4705))))

(declare-fun b!61151 () Bool)

(assert (=> b!61151 (= e!40190 call!4703)))

(declare-fun b!61152 () Bool)

(declare-fun res!33702 () Bool)

(assert (=> b!61152 (=> (not res!33702) (not e!40187))))

(assert (=> b!61152 (= res!33702 e!40189)))

(declare-fun res!33696 () Bool)

(assert (=> b!61152 (=> res!33696 e!40189)))

(assert (=> b!61152 (= res!33696 (not e!40186))))

(declare-fun res!33695 () Bool)

(assert (=> b!61152 (=> (not res!33695) (not e!40186))))

(assert (=> b!61152 (= res!33695 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61153 () Bool)

(assert (=> b!61153 (= e!40183 (= (apply!67 lt!25179 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61153 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_values!2050 newMap!16))))))

(assert (=> b!61153 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61154 () Bool)

(assert (=> b!61154 (= e!40184 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61155 () Bool)

(assert (=> b!61155 (= e!40191 e!40190)))

(assert (=> b!61155 (= c!8004 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4704 () Bool)

(assert (=> bm!4704 (= call!4707 (contains!697 lt!25179 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12013 c!8002) b!61148))

(assert (= (and d!12013 (not c!8002)) b!61155))

(assert (= (and b!61155 c!8004) b!61151))

(assert (= (and b!61155 (not c!8004)) b!61140))

(assert (= (and b!61140 c!8005) b!61143))

(assert (= (and b!61140 (not c!8005)) b!61145))

(assert (= (or b!61143 b!61145) bm!4702))

(assert (= (or b!61151 bm!4702) bm!4698))

(assert (= (or b!61151 b!61143) bm!4703))

(assert (= (or b!61148 bm!4698) bm!4699))

(assert (= (or b!61148 bm!4703) bm!4701))

(assert (= (and d!12013 res!33699) b!61154))

(assert (= (and d!12013 c!8003) b!61147))

(assert (= (and d!12013 (not c!8003)) b!61146))

(assert (= (and d!12013 res!33701) b!61152))

(assert (= (and b!61152 res!33695) b!61144))

(assert (= (and b!61152 (not res!33696)) b!61141))

(assert (= (and b!61141 res!33698) b!61153))

(assert (= (and b!61152 res!33702) b!61135))

(assert (= (and b!61135 c!8001) b!61137))

(assert (= (and b!61135 (not c!8001)) b!61150))

(assert (= (and b!61137 res!33700) b!61138))

(assert (= (or b!61137 b!61150) bm!4700))

(assert (= (and b!61135 res!33697) b!61142))

(assert (= (and b!61142 c!8006) b!61139))

(assert (= (and b!61142 (not c!8006)) b!61149))

(assert (= (and b!61139 res!33694) b!61136))

(assert (= (or b!61139 b!61149) bm!4704))

(declare-fun b_lambda!2711 () Bool)

(assert (=> (not b_lambda!2711) (not b!61153)))

(assert (=> b!61153 t!4845))

(declare-fun b_and!3721 () Bool)

(assert (= b_and!3717 (and (=> t!4845 result!2435) b_and!3721)))

(assert (=> b!61153 t!4847))

(declare-fun b_and!3723 () Bool)

(assert (= b_and!3719 (and (=> t!4847 result!2437) b_and!3723)))

(assert (=> b!61144 m!53471))

(assert (=> b!61144 m!53471))

(assert (=> b!61144 m!53473))

(declare-fun m!53745 () Bool)

(assert (=> bm!4700 m!53745))

(declare-fun m!53747 () Bool)

(assert (=> bm!4704 m!53747))

(declare-fun m!53749 () Bool)

(assert (=> bm!4701 m!53749))

(assert (=> b!61141 m!53471))

(assert (=> b!61141 m!53471))

(declare-fun m!53751 () Bool)

(assert (=> b!61141 m!53751))

(declare-fun m!53753 () Bool)

(assert (=> bm!4699 m!53753))

(declare-fun m!53755 () Bool)

(assert (=> b!61148 m!53755))

(declare-fun m!53757 () Bool)

(assert (=> b!61136 m!53757))

(assert (=> b!61154 m!53471))

(assert (=> b!61154 m!53471))

(assert (=> b!61154 m!53473))

(assert (=> b!61153 m!53471))

(declare-fun m!53759 () Bool)

(assert (=> b!61153 m!53759))

(assert (=> b!61153 m!53471))

(declare-fun m!53761 () Bool)

(assert (=> b!61153 m!53761))

(assert (=> b!61153 m!53493))

(assert (=> b!61153 m!53759))

(assert (=> b!61153 m!53493))

(declare-fun m!53763 () Bool)

(assert (=> b!61153 m!53763))

(assert (=> d!12013 m!53453))

(assert (=> b!61147 m!53471))

(declare-fun m!53765 () Bool)

(assert (=> b!61147 m!53765))

(declare-fun m!53767 () Bool)

(assert (=> b!61147 m!53767))

(declare-fun m!53769 () Bool)

(assert (=> b!61147 m!53769))

(declare-fun m!53771 () Bool)

(assert (=> b!61147 m!53771))

(declare-fun m!53773 () Bool)

(assert (=> b!61147 m!53773))

(assert (=> b!61147 m!53753))

(declare-fun m!53775 () Bool)

(assert (=> b!61147 m!53775))

(declare-fun m!53777 () Bool)

(assert (=> b!61147 m!53777))

(assert (=> b!61147 m!53765))

(declare-fun m!53779 () Bool)

(assert (=> b!61147 m!53779))

(declare-fun m!53781 () Bool)

(assert (=> b!61147 m!53781))

(declare-fun m!53783 () Bool)

(assert (=> b!61147 m!53783))

(declare-fun m!53785 () Bool)

(assert (=> b!61147 m!53785))

(declare-fun m!53787 () Bool)

(assert (=> b!61147 m!53787))

(assert (=> b!61147 m!53785))

(declare-fun m!53789 () Bool)

(assert (=> b!61147 m!53789))

(assert (=> b!61147 m!53779))

(assert (=> b!61147 m!53775))

(declare-fun m!53791 () Bool)

(assert (=> b!61147 m!53791))

(declare-fun m!53793 () Bool)

(assert (=> b!61147 m!53793))

(declare-fun m!53795 () Bool)

(assert (=> b!61138 m!53795))

(assert (=> d!11935 d!12013))

(declare-fun d!12015 () Bool)

(assert (=> d!12015 (isDefined!78 (getValueByKey!124 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun lt!25199 () Unit!1622)

(declare-fun choose!329 (List!1459 (_ BitVec 64)) Unit!1622)

(assert (=> d!12015 (= lt!25199 (choose!329 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun e!40196 () Bool)

(assert (=> d!12015 e!40196))

(declare-fun res!33705 () Bool)

(assert (=> d!12015 (=> (not res!33705) (not e!40196))))

(declare-fun isStrictlySorted!280 (List!1459) Bool)

(assert (=> d!12015 (= res!33705 (isStrictlySorted!280 (toList!708 lt!24780)))))

(assert (=> d!12015 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) lt!25199)))

(declare-fun b!61158 () Bool)

(assert (=> b!61158 (= e!40196 (containsKey!128 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12015 res!33705) b!61158))

(assert (=> d!12015 m!53207))

(assert (=> d!12015 m!53295))

(assert (=> d!12015 m!53295))

(assert (=> d!12015 m!53297))

(assert (=> d!12015 m!53207))

(declare-fun m!53797 () Bool)

(assert (=> d!12015 m!53797))

(declare-fun m!53799 () Bool)

(assert (=> d!12015 m!53799))

(assert (=> b!61158 m!53207))

(assert (=> b!61158 m!53291))

(assert (=> b!60692 d!12015))

(declare-fun d!12017 () Bool)

(declare-fun isEmpty!301 (Option!130) Bool)

(assert (=> d!12017 (= (isDefined!78 (getValueByKey!124 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))) (not (isEmpty!301 (getValueByKey!124 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun bs!2640 () Bool)

(assert (= bs!2640 d!12017))

(assert (=> bs!2640 m!53295))

(declare-fun m!53801 () Bool)

(assert (=> bs!2640 m!53801))

(assert (=> b!60692 d!12017))

(declare-fun e!40202 () Option!130)

(declare-fun b!61169 () Bool)

(assert (=> b!61169 (= e!40202 (getValueByKey!124 (t!4837 (toList!708 lt!24780)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61170 () Bool)

(assert (=> b!61170 (= e!40202 None!128)))

(declare-fun b!61168 () Bool)

(declare-fun e!40201 () Option!130)

(assert (=> b!61168 (= e!40201 e!40202)))

(declare-fun c!8012 () Bool)

(assert (=> b!61168 (= c!8012 (and ((_ is Cons!1455) (toList!708 lt!24780)) (not (= (_1!1040 (h!2037 (toList!708 lt!24780))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun b!61167 () Bool)

(assert (=> b!61167 (= e!40201 (Some!129 (_2!1040 (h!2037 (toList!708 lt!24780)))))))

(declare-fun c!8011 () Bool)

(declare-fun d!12019 () Bool)

(assert (=> d!12019 (= c!8011 (and ((_ is Cons!1455) (toList!708 lt!24780)) (= (_1!1040 (h!2037 (toList!708 lt!24780))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12019 (= (getValueByKey!124 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) e!40201)))

(assert (= (and d!12019 c!8011) b!61167))

(assert (= (and d!12019 (not c!8011)) b!61168))

(assert (= (and b!61168 c!8012) b!61169))

(assert (= (and b!61168 (not c!8012)) b!61170))

(assert (=> b!61169 m!53207))

(declare-fun m!53803 () Bool)

(assert (=> b!61169 m!53803))

(assert (=> b!60692 d!12019))

(declare-fun b!61180 () Bool)

(declare-fun res!33717 () Bool)

(declare-fun e!40205 () Bool)

(assert (=> b!61180 (=> (not res!33717) (not e!40205))))

(declare-fun size!2027 (LongMapFixedSize!630) (_ BitVec 32))

(assert (=> b!61180 (= res!33717 (bvsge (size!2027 newMap!16) (_size!364 newMap!16)))))

(declare-fun b!61179 () Bool)

(declare-fun res!33714 () Bool)

(assert (=> b!61179 (=> (not res!33714) (not e!40205))))

(assert (=> b!61179 (= res!33714 (and (= (size!2024 (_values!2050 newMap!16)) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001)) (= (size!2023 (_keys!3695 newMap!16)) (size!2024 (_values!2050 newMap!16))) (bvsge (_size!364 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!364 newMap!16) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!61181 () Bool)

(declare-fun res!33716 () Bool)

(assert (=> b!61181 (=> (not res!33716) (not e!40205))))

(assert (=> b!61181 (= res!33716 (= (size!2027 newMap!16) (bvadd (_size!364 newMap!16) (bvsdiv (bvadd (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!61182 () Bool)

(assert (=> b!61182 (= e!40205 (and (bvsge (extraKeys!1950 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1950 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!364 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun d!12021 () Bool)

(declare-fun res!33715 () Bool)

(assert (=> d!12021 (=> (not res!33715) (not e!40205))))

(assert (=> d!12021 (= res!33715 (validMask!0 (mask!5963 newMap!16)))))

(assert (=> d!12021 (= (simpleValid!42 newMap!16) e!40205)))

(assert (= (and d!12021 res!33715) b!61179))

(assert (= (and b!61179 res!33714) b!61180))

(assert (= (and b!61180 res!33717) b!61181))

(assert (= (and b!61181 res!33716) b!61182))

(declare-fun m!53805 () Bool)

(assert (=> b!61180 m!53805))

(assert (=> b!61181 m!53805))

(assert (=> d!12021 m!53453))

(assert (=> d!11945 d!12021))

(assert (=> b!60694 d!12017))

(assert (=> b!60694 d!12019))

(declare-fun d!12023 () Bool)

(declare-fun res!33718 () Bool)

(declare-fun e!40206 () Bool)

(assert (=> d!12023 (=> res!33718 e!40206)))

(assert (=> d!12023 (= res!33718 (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12023 (= (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!40206)))

(declare-fun b!61183 () Bool)

(declare-fun e!40207 () Bool)

(assert (=> b!61183 (= e!40206 e!40207)))

(declare-fun res!33719 () Bool)

(assert (=> b!61183 (=> (not res!33719) (not e!40207))))

(assert (=> b!61183 (= res!33719 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!61184 () Bool)

(assert (=> b!61184 (= e!40207 (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12023 (not res!33718)) b!61183))

(assert (= (and b!61183 res!33719) b!61184))

(declare-fun m!53807 () Bool)

(assert (=> d!12023 m!53807))

(assert (=> b!61184 m!53207))

(declare-fun m!53809 () Bool)

(assert (=> b!61184 m!53809))

(assert (=> b!60904 d!12023))

(declare-fun d!12025 () Bool)

(declare-fun e!40209 () Bool)

(assert (=> d!12025 e!40209))

(declare-fun res!33720 () Bool)

(assert (=> d!12025 (=> res!33720 e!40209)))

(declare-fun lt!25200 () Bool)

(assert (=> d!12025 (= res!33720 (not lt!25200))))

(declare-fun lt!25202 () Bool)

(assert (=> d!12025 (= lt!25200 lt!25202)))

(declare-fun lt!25201 () Unit!1622)

(declare-fun e!40208 () Unit!1622)

(assert (=> d!12025 (= lt!25201 e!40208)))

(declare-fun c!8013 () Bool)

(assert (=> d!12025 (= c!8013 lt!25202)))

(assert (=> d!12025 (= lt!25202 (containsKey!128 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12025 (= (contains!697 lt!24948 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25200)))

(declare-fun b!61185 () Bool)

(declare-fun lt!25203 () Unit!1622)

(assert (=> b!61185 (= e!40208 lt!25203)))

(assert (=> b!61185 (= lt!25203 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61185 (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61186 () Bool)

(declare-fun Unit!1641 () Unit!1622)

(assert (=> b!61186 (= e!40208 Unit!1641)))

(declare-fun b!61187 () Bool)

(assert (=> b!61187 (= e!40209 (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12025 c!8013) b!61185))

(assert (= (and d!12025 (not c!8013)) b!61186))

(assert (= (and d!12025 (not res!33720)) b!61187))

(declare-fun m!53811 () Bool)

(assert (=> d!12025 m!53811))

(declare-fun m!53813 () Bool)

(assert (=> b!61185 m!53813))

(assert (=> b!61185 m!53681))

(assert (=> b!61185 m!53681))

(declare-fun m!53815 () Bool)

(assert (=> b!61185 m!53815))

(assert (=> b!61187 m!53681))

(assert (=> b!61187 m!53681))

(assert (=> b!61187 m!53815))

(assert (=> bm!4656 d!12025))

(assert (=> d!11947 d!11951))

(declare-fun d!12027 () Bool)

(assert (=> d!12027 (not (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!12027 true))

(declare-fun _$68!34 () Unit!1622)

(assert (=> d!12027 (= (choose!68 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457)) _$68!34)))

(declare-fun bs!2641 () Bool)

(assert (= bs!2641 d!12027))

(assert (=> bs!2641 m!53207))

(assert (=> bs!2641 m!53211))

(assert (=> d!11947 d!12027))

(declare-fun d!12029 () Bool)

(assert (=> d!12029 (= (get!1092 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60826 d!12029))

(assert (=> b!60791 d!12013))

(assert (=> b!60805 d!12013))

(declare-fun d!12031 () Bool)

(declare-fun e!40211 () Bool)

(assert (=> d!12031 e!40211))

(declare-fun res!33721 () Bool)

(assert (=> d!12031 (=> res!33721 e!40211)))

(declare-fun lt!25204 () Bool)

(assert (=> d!12031 (= res!33721 (not lt!25204))))

(declare-fun lt!25206 () Bool)

(assert (=> d!12031 (= lt!25204 lt!25206)))

(declare-fun lt!25205 () Unit!1622)

(declare-fun e!40210 () Unit!1622)

(assert (=> d!12031 (= lt!25205 e!40210)))

(declare-fun c!8014 () Bool)

(assert (=> d!12031 (= c!8014 lt!25206)))

(assert (=> d!12031 (= lt!25206 (containsKey!128 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12031 (= (contains!697 lt!24948 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25204)))

(declare-fun b!61188 () Bool)

(declare-fun lt!25207 () Unit!1622)

(assert (=> b!61188 (= e!40210 lt!25207)))

(assert (=> b!61188 (= lt!25207 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61188 (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61189 () Bool)

(declare-fun Unit!1642 () Unit!1622)

(assert (=> b!61189 (= e!40210 Unit!1642)))

(declare-fun b!61190 () Bool)

(assert (=> b!61190 (= e!40211 (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12031 c!8014) b!61188))

(assert (= (and d!12031 (not c!8014)) b!61189))

(assert (= (and d!12031 (not res!33721)) b!61190))

(declare-fun m!53817 () Bool)

(assert (=> d!12031 m!53817))

(declare-fun m!53819 () Bool)

(assert (=> b!61188 m!53819))

(assert (=> b!61188 m!53583))

(assert (=> b!61188 m!53583))

(declare-fun m!53821 () Bool)

(assert (=> b!61188 m!53821))

(assert (=> b!61190 m!53583))

(assert (=> b!61190 m!53583))

(assert (=> b!61190 m!53821))

(assert (=> bm!4652 d!12031))

(declare-fun b!61191 () Bool)

(declare-fun e!40215 () Bool)

(declare-fun call!4708 () Bool)

(assert (=> b!61191 (= e!40215 call!4708)))

(declare-fun bm!4705 () Bool)

(declare-fun c!8015 () Bool)

(assert (=> bm!4705 (= call!4708 (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8015 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457))))))

(declare-fun b!61192 () Bool)

(declare-fun e!40212 () Bool)

(assert (=> b!61192 (= e!40212 e!40215)))

(assert (=> b!61192 (= c!8015 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!40214 () Bool)

(declare-fun b!61194 () Bool)

(assert (=> b!61194 (= e!40214 (contains!698 (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!61195 () Bool)

(declare-fun e!40213 () Bool)

(assert (=> b!61195 (= e!40213 e!40212)))

(declare-fun res!33723 () Bool)

(assert (=> b!61195 (=> (not res!33723) (not e!40212))))

(assert (=> b!61195 (= res!33723 (not e!40214))))

(declare-fun res!33722 () Bool)

(assert (=> b!61195 (=> (not res!33722) (not e!40214))))

(assert (=> b!61195 (= res!33722 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!61193 () Bool)

(assert (=> b!61193 (= e!40215 call!4708)))

(declare-fun d!12033 () Bool)

(declare-fun res!33724 () Bool)

(assert (=> d!12033 (=> res!33724 e!40213)))

(assert (=> d!12033 (= res!33724 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> d!12033 (= (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)) e!40213)))

(assert (= (and d!12033 (not res!33724)) b!61195))

(assert (= (and b!61195 res!33722) b!61194))

(assert (= (and b!61195 res!33723) b!61192))

(assert (= (and b!61192 c!8015) b!61191))

(assert (= (and b!61192 (not c!8015)) b!61193))

(assert (= (or b!61191 b!61193) bm!4705))

(declare-fun m!53823 () Bool)

(assert (=> bm!4705 m!53823))

(declare-fun m!53825 () Bool)

(assert (=> bm!4705 m!53825))

(assert (=> b!61192 m!53823))

(assert (=> b!61192 m!53823))

(declare-fun m!53827 () Bool)

(assert (=> b!61192 m!53827))

(assert (=> b!61194 m!53823))

(assert (=> b!61194 m!53823))

(declare-fun m!53829 () Bool)

(assert (=> b!61194 m!53829))

(assert (=> b!61195 m!53823))

(assert (=> b!61195 m!53823))

(assert (=> b!61195 m!53827))

(assert (=> bm!4659 d!12033))

(declare-fun d!12035 () Bool)

(declare-fun e!40217 () Bool)

(assert (=> d!12035 e!40217))

(declare-fun res!33725 () Bool)

(assert (=> d!12035 (=> res!33725 e!40217)))

(declare-fun lt!25208 () Bool)

(assert (=> d!12035 (= res!33725 (not lt!25208))))

(declare-fun lt!25210 () Bool)

(assert (=> d!12035 (= lt!25208 lt!25210)))

(declare-fun lt!25209 () Unit!1622)

(declare-fun e!40216 () Unit!1622)

(assert (=> d!12035 (= lt!25209 e!40216)))

(declare-fun c!8016 () Bool)

(assert (=> d!12035 (= c!8016 lt!25210)))

(assert (=> d!12035 (= lt!25210 (containsKey!128 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!12035 (= (contains!697 lt!24948 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!25208)))

(declare-fun b!61196 () Bool)

(declare-fun lt!25211 () Unit!1622)

(assert (=> b!61196 (= e!40216 lt!25211)))

(assert (=> b!61196 (= lt!25211 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61196 (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!61197 () Bool)

(declare-fun Unit!1643 () Unit!1622)

(assert (=> b!61197 (= e!40216 Unit!1643)))

(declare-fun b!61198 () Bool)

(assert (=> b!61198 (= e!40217 (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!12035 c!8016) b!61196))

(assert (= (and d!12035 (not c!8016)) b!61197))

(assert (= (and d!12035 (not res!33725)) b!61198))

(assert (=> d!12035 m!53359))

(declare-fun m!53831 () Bool)

(assert (=> d!12035 m!53831))

(assert (=> b!61196 m!53359))

(declare-fun m!53833 () Bool)

(assert (=> b!61196 m!53833))

(assert (=> b!61196 m!53359))

(assert (=> b!61196 m!53673))

(assert (=> b!61196 m!53673))

(declare-fun m!53835 () Bool)

(assert (=> b!61196 m!53835))

(assert (=> b!61198 m!53359))

(assert (=> b!61198 m!53673))

(assert (=> b!61198 m!53673))

(assert (=> b!61198 m!53835))

(assert (=> b!60875 d!12035))

(declare-fun d!12037 () Bool)

(assert (=> d!12037 (= (inRange!0 (ite c!7911 (ite c!7910 (index!3077 lt!24886) (ite c!7918 (index!3076 lt!24894) (index!3079 lt!24894))) (ite c!7917 (index!3077 lt!24877) (ite c!7919 (index!3076 lt!24890) (index!3079 lt!24890)))) (mask!5963 newMap!16)) (and (bvsge (ite c!7911 (ite c!7910 (index!3077 lt!24886) (ite c!7918 (index!3076 lt!24894) (index!3079 lt!24894))) (ite c!7917 (index!3077 lt!24877) (ite c!7919 (index!3076 lt!24890) (index!3079 lt!24890)))) #b00000000000000000000000000000000) (bvslt (ite c!7911 (ite c!7910 (index!3077 lt!24886) (ite c!7918 (index!3076 lt!24894) (index!3079 lt!24894))) (ite c!7917 (index!3077 lt!24877) (ite c!7919 (index!3076 lt!24890) (index!3079 lt!24890)))) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4620 d!12037))

(declare-fun b!61223 () Bool)

(declare-fun e!40235 () Bool)

(declare-fun e!40232 () Bool)

(assert (=> b!61223 (= e!40235 e!40232)))

(assert (=> b!61223 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun lt!25229 () ListLongMap!1385)

(declare-fun res!33734 () Bool)

(assert (=> b!61223 (= res!33734 (contains!697 lt!25229 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61223 (=> (not res!33734) (not e!40232))))

(declare-fun b!61224 () Bool)

(declare-fun e!40237 () Bool)

(assert (=> b!61224 (= e!40237 e!40235)))

(declare-fun c!8026 () Bool)

(declare-fun e!40236 () Bool)

(assert (=> b!61224 (= c!8026 e!40236)))

(declare-fun res!33736 () Bool)

(assert (=> b!61224 (=> (not res!33736) (not e!40236))))

(assert (=> b!61224 (= res!33736 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!61225 () Bool)

(declare-fun e!40234 () ListLongMap!1385)

(declare-fun call!4711 () ListLongMap!1385)

(assert (=> b!61225 (= e!40234 call!4711)))

(declare-fun b!61226 () Bool)

(declare-fun e!40238 () Bool)

(assert (=> b!61226 (= e!40238 (= lt!25229 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!61227 () Bool)

(assert (=> b!61227 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> b!61227 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_values!2050 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> b!61227 (= e!40232 (= (apply!67 lt!25229 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61228 () Bool)

(declare-fun res!33737 () Bool)

(assert (=> b!61228 (=> (not res!33737) (not e!40237))))

(assert (=> b!61228 (= res!33737 (not (contains!697 lt!25229 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61229 () Bool)

(assert (=> b!61229 (= e!40235 e!40238)))

(declare-fun c!8028 () Bool)

(assert (=> b!61229 (= c!8028 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun bm!4708 () Bool)

(assert (=> bm!4708 (= call!4711 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun d!12039 () Bool)

(assert (=> d!12039 e!40237))

(declare-fun res!33735 () Bool)

(assert (=> d!12039 (=> (not res!33735) (not e!40237))))

(assert (=> d!12039 (= res!33735 (not (contains!697 lt!25229 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!40233 () ListLongMap!1385)

(assert (=> d!12039 (= lt!25229 e!40233)))

(declare-fun c!8025 () Bool)

(assert (=> d!12039 (= c!8025 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> d!12039 (validMask!0 (mask!5963 (v!2403 (underlying!231 thiss!992))))))

(assert (=> d!12039 (= (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))) lt!25229)))

(declare-fun b!61230 () Bool)

(declare-fun isEmpty!302 (ListLongMap!1385) Bool)

(assert (=> b!61230 (= e!40238 (isEmpty!302 lt!25229))))

(declare-fun b!61231 () Bool)

(assert (=> b!61231 (= e!40236 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61231 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!61232 () Bool)

(assert (=> b!61232 (= e!40233 e!40234)))

(declare-fun c!8027 () Bool)

(assert (=> b!61232 (= c!8027 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!61233 () Bool)

(declare-fun lt!25232 () Unit!1622)

(declare-fun lt!25231 () Unit!1622)

(assert (=> b!61233 (= lt!25232 lt!25231)))

(declare-fun lt!25228 () V!2859)

(declare-fun lt!25230 () (_ BitVec 64))

(declare-fun lt!25227 () (_ BitVec 64))

(declare-fun lt!25226 () ListLongMap!1385)

(assert (=> b!61233 (not (contains!697 (+!82 lt!25226 (tuple2!2061 lt!25230 lt!25228)) lt!25227))))

(declare-fun addStillNotContains!18 (ListLongMap!1385 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1622)

(assert (=> b!61233 (= lt!25231 (addStillNotContains!18 lt!25226 lt!25230 lt!25228 lt!25227))))

(assert (=> b!61233 (= lt!25227 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61233 (= lt!25228 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61233 (= lt!25230 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!61233 (= lt!25226 call!4711)))

(assert (=> b!61233 (= e!40234 (+!82 call!4711 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61234 () Bool)

(assert (=> b!61234 (= e!40233 (ListLongMap!1386 Nil!1456))))

(assert (= (and d!12039 c!8025) b!61234))

(assert (= (and d!12039 (not c!8025)) b!61232))

(assert (= (and b!61232 c!8027) b!61233))

(assert (= (and b!61232 (not c!8027)) b!61225))

(assert (= (or b!61233 b!61225) bm!4708))

(assert (= (and d!12039 res!33735) b!61228))

(assert (= (and b!61228 res!33737) b!61224))

(assert (= (and b!61224 res!33736) b!61231))

(assert (= (and b!61224 c!8026) b!61223))

(assert (= (and b!61224 (not c!8026)) b!61229))

(assert (= (and b!61223 res!33734) b!61227))

(assert (= (and b!61229 c!8028) b!61226))

(assert (= (and b!61229 (not c!8028)) b!61230))

(declare-fun b_lambda!2713 () Bool)

(assert (=> (not b_lambda!2713) (not b!61227)))

(assert (=> b!61227 t!4834))

(declare-fun b_and!3725 () Bool)

(assert (= b_and!3721 (and (=> t!4834 result!2421) b_and!3725)))

(assert (=> b!61227 t!4836))

(declare-fun b_and!3727 () Bool)

(assert (= b_and!3723 (and (=> t!4836 result!2425) b_and!3727)))

(declare-fun b_lambda!2715 () Bool)

(assert (=> (not b_lambda!2715) (not b!61233)))

(assert (=> b!61233 t!4834))

(declare-fun b_and!3729 () Bool)

(assert (= b_and!3725 (and (=> t!4834 result!2421) b_and!3729)))

(assert (=> b!61233 t!4836))

(declare-fun b_and!3731 () Bool)

(assert (= b_and!3727 (and (=> t!4836 result!2425) b_and!3731)))

(assert (=> b!61232 m!53359))

(assert (=> b!61232 m!53359))

(assert (=> b!61232 m!53361))

(assert (=> b!61233 m!53377))

(assert (=> b!61233 m!53225))

(assert (=> b!61233 m!53381))

(assert (=> b!61233 m!53377))

(assert (=> b!61233 m!53359))

(declare-fun m!53837 () Bool)

(assert (=> b!61233 m!53837))

(assert (=> b!61233 m!53837))

(declare-fun m!53839 () Bool)

(assert (=> b!61233 m!53839))

(declare-fun m!53841 () Bool)

(assert (=> b!61233 m!53841))

(assert (=> b!61233 m!53225))

(declare-fun m!53843 () Bool)

(assert (=> b!61233 m!53843))

(assert (=> b!61223 m!53359))

(assert (=> b!61223 m!53359))

(declare-fun m!53845 () Bool)

(assert (=> b!61223 m!53845))

(declare-fun m!53847 () Bool)

(assert (=> b!61226 m!53847))

(declare-fun m!53849 () Bool)

(assert (=> b!61230 m!53849))

(declare-fun m!53851 () Bool)

(assert (=> b!61228 m!53851))

(assert (=> bm!4708 m!53847))

(assert (=> b!61227 m!53359))

(assert (=> b!61227 m!53225))

(assert (=> b!61227 m!53377))

(assert (=> b!61227 m!53225))

(assert (=> b!61227 m!53381))

(assert (=> b!61227 m!53359))

(declare-fun m!53853 () Bool)

(assert (=> b!61227 m!53853))

(assert (=> b!61227 m!53377))

(declare-fun m!53855 () Bool)

(assert (=> d!12039 m!53855))

(assert (=> d!12039 m!53237))

(assert (=> b!61231 m!53359))

(assert (=> b!61231 m!53359))

(assert (=> b!61231 m!53361))

(assert (=> bm!4651 d!12039))

(declare-fun d!12041 () Bool)

(declare-fun e!40239 () Bool)

(assert (=> d!12041 e!40239))

(declare-fun res!33738 () Bool)

(assert (=> d!12041 (=> (not res!33738) (not e!40239))))

(declare-fun lt!25233 () ListLongMap!1385)

(assert (=> d!12041 (= res!33738 (contains!697 lt!25233 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25235 () List!1459)

(assert (=> d!12041 (= lt!25233 (ListLongMap!1386 lt!25235))))

(declare-fun lt!25236 () Unit!1622)

(declare-fun lt!25234 () Unit!1622)

(assert (=> d!12041 (= lt!25236 lt!25234)))

(assert (=> d!12041 (= (getValueByKey!124 lt!25235 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12041 (= lt!25234 (lemmaContainsTupThenGetReturnValue!43 lt!25235 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12041 (= lt!25235 (insertStrictlySorted!45 (toList!708 call!4621) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12041 (= (+!82 call!4621 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25233)))

(declare-fun b!61235 () Bool)

(declare-fun res!33739 () Bool)

(assert (=> b!61235 (=> (not res!33739) (not e!40239))))

(assert (=> b!61235 (= res!33739 (= (getValueByKey!124 (toList!708 lt!25233) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61236 () Bool)

(assert (=> b!61236 (= e!40239 (contains!699 (toList!708 lt!25233) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12041 res!33738) b!61235))

(assert (= (and b!61235 res!33739) b!61236))

(declare-fun m!53857 () Bool)

(assert (=> d!12041 m!53857))

(declare-fun m!53859 () Bool)

(assert (=> d!12041 m!53859))

(declare-fun m!53861 () Bool)

(assert (=> d!12041 m!53861))

(declare-fun m!53863 () Bool)

(assert (=> d!12041 m!53863))

(declare-fun m!53865 () Bool)

(assert (=> b!61235 m!53865))

(declare-fun m!53867 () Bool)

(assert (=> b!61236 m!53867))

(assert (=> b!60798 d!12041))

(assert (=> b!60888 d!11971))

(declare-fun d!12043 () Bool)

(assert (=> d!12043 (= (map!1115 (_2!1041 lt!24880)) (getCurrentListMap!405 (_keys!3695 (_2!1041 lt!24880)) (_values!2050 (_2!1041 lt!24880)) (mask!5963 (_2!1041 lt!24880)) (extraKeys!1950 (_2!1041 lt!24880)) (zeroValue!1981 (_2!1041 lt!24880)) (minValue!1981 (_2!1041 lt!24880)) #b00000000000000000000000000000000 (defaultEntry!2067 (_2!1041 lt!24880))))))

(declare-fun bs!2642 () Bool)

(assert (= bs!2642 d!12043))

(declare-fun m!53869 () Bool)

(assert (=> bs!2642 m!53869))

(assert (=> bm!4621 d!12043))

(declare-fun d!12045 () Bool)

(declare-fun e!40241 () Bool)

(assert (=> d!12045 e!40241))

(declare-fun res!33740 () Bool)

(assert (=> d!12045 (=> res!33740 e!40241)))

(declare-fun lt!25237 () Bool)

(assert (=> d!12045 (= res!33740 (not lt!25237))))

(declare-fun lt!25239 () Bool)

(assert (=> d!12045 (= lt!25237 lt!25239)))

(declare-fun lt!25238 () Unit!1622)

(declare-fun e!40240 () Unit!1622)

(assert (=> d!12045 (= lt!25238 e!40240)))

(declare-fun c!8029 () Bool)

(assert (=> d!12045 (= c!8029 lt!25239)))

(assert (=> d!12045 (= lt!25239 (containsKey!128 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12045 (= (contains!697 e!39984 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) lt!25237)))

(declare-fun b!61237 () Bool)

(declare-fun lt!25240 () Unit!1622)

(assert (=> b!61237 (= e!40240 lt!25240)))

(assert (=> b!61237 (= lt!25240 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!61237 (isDefined!78 (getValueByKey!124 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61238 () Bool)

(declare-fun Unit!1644 () Unit!1622)

(assert (=> b!61238 (= e!40240 Unit!1644)))

(declare-fun b!61239 () Bool)

(assert (=> b!61239 (= e!40241 (isDefined!78 (getValueByKey!124 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (= (and d!12045 c!8029) b!61237))

(assert (= (and d!12045 (not c!8029)) b!61238))

(assert (= (and d!12045 (not res!33740)) b!61239))

(assert (=> d!12045 m!53207))

(declare-fun m!53871 () Bool)

(assert (=> d!12045 m!53871))

(assert (=> b!61237 m!53207))

(declare-fun m!53873 () Bool)

(assert (=> b!61237 m!53873))

(assert (=> b!61237 m!53207))

(declare-fun m!53875 () Bool)

(assert (=> b!61237 m!53875))

(assert (=> b!61237 m!53875))

(declare-fun m!53877 () Bool)

(assert (=> b!61237 m!53877))

(assert (=> b!61239 m!53207))

(assert (=> b!61239 m!53875))

(assert (=> b!61239 m!53875))

(assert (=> b!61239 m!53877))

(assert (=> bm!4627 d!12045))

(declare-fun d!12047 () Bool)

(assert (=> d!12047 (= (apply!67 lt!24944 lt!24956) (get!1093 (getValueByKey!124 (toList!708 lt!24944) lt!24956)))))

(declare-fun bs!2643 () Bool)

(assert (= bs!2643 d!12047))

(declare-fun m!53879 () Bool)

(assert (=> bs!2643 m!53879))

(assert (=> bs!2643 m!53879))

(declare-fun m!53881 () Bool)

(assert (=> bs!2643 m!53881))

(assert (=> b!60881 d!12047))

(assert (=> b!60881 d!12039))

(declare-fun d!12049 () Bool)

(assert (=> d!12049 (= (apply!67 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24958) (apply!67 lt!24965 lt!24958))))

(declare-fun lt!25243 () Unit!1622)

(declare-fun choose!330 (ListLongMap!1385 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1622)

(assert (=> d!12049 (= lt!25243 (choose!330 lt!24965 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24958))))

(declare-fun e!40244 () Bool)

(assert (=> d!12049 e!40244))

(declare-fun res!33743 () Bool)

(assert (=> d!12049 (=> (not res!33743) (not e!40244))))

(assert (=> d!12049 (= res!33743 (contains!697 lt!24965 lt!24958))))

(assert (=> d!12049 (= (addApplyDifferent!43 lt!24965 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24958) lt!25243)))

(declare-fun b!61243 () Bool)

(assert (=> b!61243 (= e!40244 (not (= lt!24958 lt!24952)))))

(assert (= (and d!12049 res!33743) b!61243))

(assert (=> d!12049 m!53401))

(assert (=> d!12049 m!53403))

(assert (=> d!12049 m!53405))

(assert (=> d!12049 m!53403))

(declare-fun m!53883 () Bool)

(assert (=> d!12049 m!53883))

(declare-fun m!53885 () Bool)

(assert (=> d!12049 m!53885))

(assert (=> b!60881 d!12049))

(declare-fun d!12051 () Bool)

(declare-fun e!40245 () Bool)

(assert (=> d!12051 e!40245))

(declare-fun res!33744 () Bool)

(assert (=> d!12051 (=> (not res!33744) (not e!40245))))

(declare-fun lt!25244 () ListLongMap!1385)

(assert (=> d!12051 (= res!33744 (contains!697 lt!25244 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun lt!25246 () List!1459)

(assert (=> d!12051 (= lt!25244 (ListLongMap!1386 lt!25246))))

(declare-fun lt!25247 () Unit!1622)

(declare-fun lt!25245 () Unit!1622)

(assert (=> d!12051 (= lt!25247 lt!25245)))

(assert (=> d!12051 (= (getValueByKey!124 lt!25246 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12051 (= lt!25245 (lemmaContainsTupThenGetReturnValue!43 lt!25246 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12051 (= lt!25246 (insertStrictlySorted!45 (toList!708 lt!24965) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12051 (= (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!25244)))

(declare-fun b!61244 () Bool)

(declare-fun res!33745 () Bool)

(assert (=> b!61244 (=> (not res!33745) (not e!40245))))

(assert (=> b!61244 (= res!33745 (= (getValueByKey!124 (toList!708 lt!25244) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61245 () Bool)

(assert (=> b!61245 (= e!40245 (contains!699 (toList!708 lt!25244) (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(assert (= (and d!12051 res!33744) b!61244))

(assert (= (and b!61244 res!33745) b!61245))

(declare-fun m!53887 () Bool)

(assert (=> d!12051 m!53887))

(declare-fun m!53889 () Bool)

(assert (=> d!12051 m!53889))

(declare-fun m!53891 () Bool)

(assert (=> d!12051 m!53891))

(declare-fun m!53893 () Bool)

(assert (=> d!12051 m!53893))

(declare-fun m!53895 () Bool)

(assert (=> b!61244 m!53895))

(declare-fun m!53897 () Bool)

(assert (=> b!61245 m!53897))

(assert (=> b!60881 d!12051))

(declare-fun d!12053 () Bool)

(declare-fun e!40247 () Bool)

(assert (=> d!12053 e!40247))

(declare-fun res!33746 () Bool)

(assert (=> d!12053 (=> res!33746 e!40247)))

(declare-fun lt!25248 () Bool)

(assert (=> d!12053 (= res!33746 (not lt!25248))))

(declare-fun lt!25250 () Bool)

(assert (=> d!12053 (= lt!25248 lt!25250)))

(declare-fun lt!25249 () Unit!1622)

(declare-fun e!40246 () Unit!1622)

(assert (=> d!12053 (= lt!25249 e!40246)))

(declare-fun c!8030 () Bool)

(assert (=> d!12053 (= c!8030 lt!25250)))

(assert (=> d!12053 (= lt!25250 (containsKey!128 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946))))

(assert (=> d!12053 (= (contains!697 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24946) lt!25248)))

(declare-fun b!61246 () Bool)

(declare-fun lt!25251 () Unit!1622)

(assert (=> b!61246 (= e!40246 lt!25251)))

(assert (=> b!61246 (= lt!25251 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946))))

(assert (=> b!61246 (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946))))

(declare-fun b!61247 () Bool)

(declare-fun Unit!1645 () Unit!1622)

(assert (=> b!61247 (= e!40246 Unit!1645)))

(declare-fun b!61248 () Bool)

(assert (=> b!61248 (= e!40247 (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946)))))

(assert (= (and d!12053 c!8030) b!61246))

(assert (= (and d!12053 (not c!8030)) b!61247))

(assert (= (and d!12053 (not res!33746)) b!61248))

(declare-fun m!53899 () Bool)

(assert (=> d!12053 m!53899))

(declare-fun m!53901 () Bool)

(assert (=> b!61246 m!53901))

(declare-fun m!53903 () Bool)

(assert (=> b!61246 m!53903))

(assert (=> b!61246 m!53903))

(declare-fun m!53905 () Bool)

(assert (=> b!61246 m!53905))

(assert (=> b!61248 m!53903))

(assert (=> b!61248 m!53903))

(assert (=> b!61248 m!53905))

(assert (=> b!60881 d!12053))

(declare-fun d!12055 () Bool)

(assert (=> d!12055 (= (apply!67 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24957) (apply!67 lt!24959 lt!24957))))

(declare-fun lt!25252 () Unit!1622)

(assert (=> d!12055 (= lt!25252 (choose!330 lt!24959 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24957))))

(declare-fun e!40248 () Bool)

(assert (=> d!12055 e!40248))

(declare-fun res!33747 () Bool)

(assert (=> d!12055 (=> (not res!33747) (not e!40248))))

(assert (=> d!12055 (= res!33747 (contains!697 lt!24959 lt!24957))))

(assert (=> d!12055 (= (addApplyDifferent!43 lt!24959 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24957) lt!25252)))

(declare-fun b!61249 () Bool)

(assert (=> b!61249 (= e!40248 (not (= lt!24957 lt!24963)))))

(assert (= (and d!12055 res!33747) b!61249))

(assert (=> d!12055 m!53411))

(assert (=> d!12055 m!53393))

(assert (=> d!12055 m!53409))

(assert (=> d!12055 m!53393))

(declare-fun m!53907 () Bool)

(assert (=> d!12055 m!53907))

(declare-fun m!53909 () Bool)

(assert (=> d!12055 m!53909))

(assert (=> b!60881 d!12055))

(declare-fun d!12057 () Bool)

(assert (=> d!12057 (= (apply!67 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24957) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24957)))))

(declare-fun bs!2644 () Bool)

(assert (= bs!2644 d!12057))

(declare-fun m!53911 () Bool)

(assert (=> bs!2644 m!53911))

(assert (=> bs!2644 m!53911))

(declare-fun m!53913 () Bool)

(assert (=> bs!2644 m!53913))

(assert (=> b!60881 d!12057))

(declare-fun d!12059 () Bool)

(declare-fun e!40249 () Bool)

(assert (=> d!12059 e!40249))

(declare-fun res!33748 () Bool)

(assert (=> d!12059 (=> (not res!33748) (not e!40249))))

(declare-fun lt!25253 () ListLongMap!1385)

(assert (=> d!12059 (= res!33748 (contains!697 lt!25253 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun lt!25255 () List!1459)

(assert (=> d!12059 (= lt!25253 (ListLongMap!1386 lt!25255))))

(declare-fun lt!25256 () Unit!1622)

(declare-fun lt!25254 () Unit!1622)

(assert (=> d!12059 (= lt!25256 lt!25254)))

(assert (=> d!12059 (= (getValueByKey!124 lt!25255 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12059 (= lt!25254 (lemmaContainsTupThenGetReturnValue!43 lt!25255 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12059 (= lt!25255 (insertStrictlySorted!45 (toList!708 lt!24944) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12059 (= (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!25253)))

(declare-fun b!61250 () Bool)

(declare-fun res!33749 () Bool)

(assert (=> b!61250 (=> (not res!33749) (not e!40249))))

(assert (=> b!61250 (= res!33749 (= (getValueByKey!124 (toList!708 lt!25253) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61251 () Bool)

(assert (=> b!61251 (= e!40249 (contains!699 (toList!708 lt!25253) (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(assert (= (and d!12059 res!33748) b!61250))

(assert (= (and b!61250 res!33749) b!61251))

(declare-fun m!53915 () Bool)

(assert (=> d!12059 m!53915))

(declare-fun m!53917 () Bool)

(assert (=> d!12059 m!53917))

(declare-fun m!53919 () Bool)

(assert (=> d!12059 m!53919))

(declare-fun m!53921 () Bool)

(assert (=> d!12059 m!53921))

(declare-fun m!53923 () Bool)

(assert (=> b!61250 m!53923))

(declare-fun m!53925 () Bool)

(assert (=> b!61251 m!53925))

(assert (=> b!60881 d!12059))

(declare-fun d!12061 () Bool)

(assert (=> d!12061 (= (apply!67 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24958) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24958)))))

(declare-fun bs!2645 () Bool)

(assert (= bs!2645 d!12061))

(declare-fun m!53927 () Bool)

(assert (=> bs!2645 m!53927))

(assert (=> bs!2645 m!53927))

(declare-fun m!53929 () Bool)

(assert (=> bs!2645 m!53929))

(assert (=> b!60881 d!12061))

(declare-fun d!12063 () Bool)

(assert (=> d!12063 (= (apply!67 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24956) (apply!67 lt!24944 lt!24956))))

(declare-fun lt!25257 () Unit!1622)

(assert (=> d!12063 (= lt!25257 (choose!330 lt!24944 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24956))))

(declare-fun e!40250 () Bool)

(assert (=> d!12063 e!40250))

(declare-fun res!33750 () Bool)

(assert (=> d!12063 (=> (not res!33750) (not e!40250))))

(assert (=> d!12063 (= res!33750 (contains!697 lt!24944 lt!24956))))

(assert (=> d!12063 (= (addApplyDifferent!43 lt!24944 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24956) lt!25257)))

(declare-fun b!61252 () Bool)

(assert (=> b!61252 (= e!40250 (not (= lt!24956 lt!24964)))))

(assert (= (and d!12063 res!33750) b!61252))

(assert (=> d!12063 m!53389))

(assert (=> d!12063 m!53397))

(assert (=> d!12063 m!53399))

(assert (=> d!12063 m!53397))

(declare-fun m!53931 () Bool)

(assert (=> d!12063 m!53931))

(declare-fun m!53933 () Bool)

(assert (=> d!12063 m!53933))

(assert (=> b!60881 d!12063))

(declare-fun d!12065 () Bool)

(declare-fun e!40251 () Bool)

(assert (=> d!12065 e!40251))

(declare-fun res!33751 () Bool)

(assert (=> d!12065 (=> (not res!33751) (not e!40251))))

(declare-fun lt!25258 () ListLongMap!1385)

(assert (=> d!12065 (= res!33751 (contains!697 lt!25258 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun lt!25260 () List!1459)

(assert (=> d!12065 (= lt!25258 (ListLongMap!1386 lt!25260))))

(declare-fun lt!25261 () Unit!1622)

(declare-fun lt!25259 () Unit!1622)

(assert (=> d!12065 (= lt!25261 lt!25259)))

(assert (=> d!12065 (= (getValueByKey!124 lt!25260 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12065 (= lt!25259 (lemmaContainsTupThenGetReturnValue!43 lt!25260 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12065 (= lt!25260 (insertStrictlySorted!45 (toList!708 lt!24959) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12065 (= (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!25258)))

(declare-fun b!61253 () Bool)

(declare-fun res!33752 () Bool)

(assert (=> b!61253 (=> (not res!33752) (not e!40251))))

(assert (=> b!61253 (= res!33752 (= (getValueByKey!124 (toList!708 lt!25258) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61254 () Bool)

(assert (=> b!61254 (= e!40251 (contains!699 (toList!708 lt!25258) (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(assert (= (and d!12065 res!33751) b!61253))

(assert (= (and b!61253 res!33752) b!61254))

(declare-fun m!53935 () Bool)

(assert (=> d!12065 m!53935))

(declare-fun m!53937 () Bool)

(assert (=> d!12065 m!53937))

(declare-fun m!53939 () Bool)

(assert (=> d!12065 m!53939))

(declare-fun m!53941 () Bool)

(assert (=> d!12065 m!53941))

(declare-fun m!53943 () Bool)

(assert (=> b!61253 m!53943))

(declare-fun m!53945 () Bool)

(assert (=> b!61254 m!53945))

(assert (=> b!60881 d!12065))

(declare-fun d!12067 () Bool)

(assert (=> d!12067 (= (apply!67 lt!24965 lt!24958) (get!1093 (getValueByKey!124 (toList!708 lt!24965) lt!24958)))))

(declare-fun bs!2646 () Bool)

(assert (= bs!2646 d!12067))

(declare-fun m!53947 () Bool)

(assert (=> bs!2646 m!53947))

(assert (=> bs!2646 m!53947))

(declare-fun m!53949 () Bool)

(assert (=> bs!2646 m!53949))

(assert (=> b!60881 d!12067))

(declare-fun d!12069 () Bool)

(declare-fun e!40252 () Bool)

(assert (=> d!12069 e!40252))

(declare-fun res!33753 () Bool)

(assert (=> d!12069 (=> (not res!33753) (not e!40252))))

(declare-fun lt!25262 () ListLongMap!1385)

(assert (=> d!12069 (= res!33753 (contains!697 lt!25262 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun lt!25264 () List!1459)

(assert (=> d!12069 (= lt!25262 (ListLongMap!1386 lt!25264))))

(declare-fun lt!25265 () Unit!1622)

(declare-fun lt!25263 () Unit!1622)

(assert (=> d!12069 (= lt!25265 lt!25263)))

(assert (=> d!12069 (= (getValueByKey!124 lt!25264 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12069 (= lt!25263 (lemmaContainsTupThenGetReturnValue!43 lt!25264 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12069 (= lt!25264 (insertStrictlySorted!45 (toList!708 lt!24954) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12069 (= (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!25262)))

(declare-fun b!61255 () Bool)

(declare-fun res!33754 () Bool)

(assert (=> b!61255 (=> (not res!33754) (not e!40252))))

(assert (=> b!61255 (= res!33754 (= (getValueByKey!124 (toList!708 lt!25262) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61256 () Bool)

(assert (=> b!61256 (= e!40252 (contains!699 (toList!708 lt!25262) (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(assert (= (and d!12069 res!33753) b!61255))

(assert (= (and b!61255 res!33754) b!61256))

(declare-fun m!53951 () Bool)

(assert (=> d!12069 m!53951))

(declare-fun m!53953 () Bool)

(assert (=> d!12069 m!53953))

(declare-fun m!53955 () Bool)

(assert (=> d!12069 m!53955))

(declare-fun m!53957 () Bool)

(assert (=> d!12069 m!53957))

(declare-fun m!53959 () Bool)

(assert (=> b!61255 m!53959))

(declare-fun m!53961 () Bool)

(assert (=> b!61256 m!53961))

(assert (=> b!60881 d!12069))

(declare-fun d!12071 () Bool)

(assert (=> d!12071 (= (apply!67 lt!24959 lt!24957) (get!1093 (getValueByKey!124 (toList!708 lt!24959) lt!24957)))))

(declare-fun bs!2647 () Bool)

(assert (= bs!2647 d!12071))

(declare-fun m!53963 () Bool)

(assert (=> bs!2647 m!53963))

(assert (=> bs!2647 m!53963))

(declare-fun m!53965 () Bool)

(assert (=> bs!2647 m!53965))

(assert (=> b!60881 d!12071))

(declare-fun d!12073 () Bool)

(assert (=> d!12073 (= (apply!67 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24956) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24956)))))

(declare-fun bs!2648 () Bool)

(assert (= bs!2648 d!12073))

(declare-fun m!53967 () Bool)

(assert (=> bs!2648 m!53967))

(assert (=> bs!2648 m!53967))

(declare-fun m!53969 () Bool)

(assert (=> bs!2648 m!53969))

(assert (=> b!60881 d!12073))

(declare-fun d!12075 () Bool)

(assert (=> d!12075 (contains!697 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24946)))

(declare-fun lt!25268 () Unit!1622)

(declare-fun choose!331 (ListLongMap!1385 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1622)

(assert (=> d!12075 (= lt!25268 (choose!331 lt!24954 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24946))))

(assert (=> d!12075 (contains!697 lt!24954 lt!24946)))

(assert (=> d!12075 (= (addStillContains!43 lt!24954 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24946) lt!25268)))

(declare-fun bs!2649 () Bool)

(assert (= bs!2649 d!12075))

(assert (=> bs!2649 m!53383))

(assert (=> bs!2649 m!53383))

(assert (=> bs!2649 m!53385))

(declare-fun m!53971 () Bool)

(assert (=> bs!2649 m!53971))

(declare-fun m!53973 () Bool)

(assert (=> bs!2649 m!53973))

(assert (=> b!60881 d!12075))

(declare-fun d!12077 () Bool)

(declare-fun res!33755 () Bool)

(declare-fun e!40253 () Bool)

(assert (=> d!12077 (=> res!33755 e!40253)))

(assert (=> d!12077 (= res!33755 (= (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12077 (= (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000) e!40253)))

(declare-fun b!61258 () Bool)

(declare-fun e!40254 () Bool)

(assert (=> b!61258 (= e!40253 e!40254)))

(declare-fun res!33756 () Bool)

(assert (=> b!61258 (=> (not res!33756) (not e!40254))))

(assert (=> b!61258 (= res!33756 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61259 () Bool)

(assert (=> b!61259 (= e!40254 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12077 (not res!33755)) b!61258))

(assert (= (and b!61258 res!33756) b!61259))

(assert (=> d!12077 m!53471))

(assert (=> b!61259 m!53207))

(declare-fun m!53975 () Bool)

(assert (=> b!61259 m!53975))

(assert (=> bm!4617 d!12077))

(declare-fun b!61260 () Bool)

(declare-fun e!40258 () Bool)

(declare-fun call!4712 () Bool)

(assert (=> b!61260 (= e!40258 call!4712)))

(declare-fun bm!4709 () Bool)

(declare-fun c!8031 () Bool)

(assert (=> bm!4709 (= call!4712 (arrayNoDuplicates!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8031 (Cons!1456 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) Nil!1457) Nil!1457)))))

(declare-fun b!61261 () Bool)

(declare-fun e!40255 () Bool)

(assert (=> b!61261 (= e!40255 e!40258)))

(assert (=> b!61261 (= c!8031 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61263 () Bool)

(declare-fun e!40257 () Bool)

(assert (=> b!61263 (= e!40257 (contains!698 Nil!1457 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61264 () Bool)

(declare-fun e!40256 () Bool)

(assert (=> b!61264 (= e!40256 e!40255)))

(declare-fun res!33758 () Bool)

(assert (=> b!61264 (=> (not res!33758) (not e!40255))))

(assert (=> b!61264 (= res!33758 (not e!40257))))

(declare-fun res!33757 () Bool)

(assert (=> b!61264 (=> (not res!33757) (not e!40257))))

(assert (=> b!61264 (= res!33757 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61262 () Bool)

(assert (=> b!61262 (= e!40258 call!4712)))

(declare-fun d!12079 () Bool)

(declare-fun res!33759 () Bool)

(assert (=> d!12079 (=> res!33759 e!40256)))

(assert (=> d!12079 (= res!33759 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!12079 (= (arrayNoDuplicates!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 Nil!1457) e!40256)))

(assert (= (and d!12079 (not res!33759)) b!61264))

(assert (= (and b!61264 res!33757) b!61263))

(assert (= (and b!61264 res!33758) b!61261))

(assert (= (and b!61261 c!8031) b!61260))

(assert (= (and b!61261 (not c!8031)) b!61262))

(assert (= (or b!61260 b!61262) bm!4709))

(assert (=> bm!4709 m!53471))

(declare-fun m!53977 () Bool)

(assert (=> bm!4709 m!53977))

(assert (=> b!61261 m!53471))

(assert (=> b!61261 m!53471))

(assert (=> b!61261 m!53473))

(assert (=> b!61263 m!53471))

(assert (=> b!61263 m!53471))

(declare-fun m!53979 () Bool)

(assert (=> b!61263 m!53979))

(assert (=> b!61264 m!53471))

(assert (=> b!61264 m!53471))

(assert (=> b!61264 m!53473))

(assert (=> b!60898 d!12079))

(declare-fun d!12081 () Bool)

(declare-fun e!40261 () Bool)

(assert (=> d!12081 e!40261))

(declare-fun res!33765 () Bool)

(assert (=> d!12081 (=> (not res!33765) (not e!40261))))

(declare-fun lt!25274 () SeekEntryResult!238)

(assert (=> d!12081 (= res!33765 ((_ is Found!238) lt!25274))))

(assert (=> d!12081 (= lt!25274 (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun lt!25273 () Unit!1622)

(declare-fun choose!332 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) Int) Unit!1622)

(assert (=> d!12081 (= lt!25273 (choose!332 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(assert (=> d!12081 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12081 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)) lt!25273)))

(declare-fun b!61269 () Bool)

(declare-fun res!33764 () Bool)

(assert (=> b!61269 (=> (not res!33764) (not e!40261))))

(assert (=> b!61269 (= res!33764 (inRange!0 (index!3077 lt!25274) (mask!5963 newMap!16)))))

(declare-fun b!61270 () Bool)

(assert (=> b!61270 (= e!40261 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!25274)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!61270 (and (bvsge (index!3077 lt!25274) #b00000000000000000000000000000000) (bvslt (index!3077 lt!25274) (size!2023 (_keys!3695 newMap!16))))))

(assert (= (and d!12081 res!33765) b!61269))

(assert (= (and b!61269 res!33764) b!61270))

(assert (=> d!12081 m!53207))

(assert (=> d!12081 m!53313))

(assert (=> d!12081 m!53207))

(declare-fun m!53981 () Bool)

(assert (=> d!12081 m!53981))

(assert (=> d!12081 m!53453))

(declare-fun m!53983 () Bool)

(assert (=> b!61269 m!53983))

(declare-fun m!53985 () Bool)

(assert (=> b!61270 m!53985))

(assert (=> bm!4623 d!12081))

(declare-fun d!12083 () Bool)

(declare-fun e!40262 () Bool)

(assert (=> d!12083 e!40262))

(declare-fun res!33766 () Bool)

(assert (=> d!12083 (=> (not res!33766) (not e!40262))))

(declare-fun lt!25275 () ListLongMap!1385)

(assert (=> d!12083 (= res!33766 (contains!697 lt!25275 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!25277 () List!1459)

(assert (=> d!12083 (= lt!25275 (ListLongMap!1386 lt!25277))))

(declare-fun lt!25278 () Unit!1622)

(declare-fun lt!25276 () Unit!1622)

(assert (=> d!12083 (= lt!25278 lt!25276)))

(assert (=> d!12083 (= (getValueByKey!124 lt!25277 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12083 (= lt!25276 (lemmaContainsTupThenGetReturnValue!43 lt!25277 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12083 (= lt!25277 (insertStrictlySorted!45 (toList!708 e!39991) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12083 (= (+!82 e!39991 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25275)))

(declare-fun b!61271 () Bool)

(declare-fun res!33767 () Bool)

(assert (=> b!61271 (=> (not res!33767) (not e!40262))))

(assert (=> b!61271 (= res!33767 (= (getValueByKey!124 (toList!708 lt!25275) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!61272 () Bool)

(assert (=> b!61272 (= e!40262 (contains!699 (toList!708 lt!25275) (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12083 res!33766) b!61271))

(assert (= (and b!61271 res!33767) b!61272))

(declare-fun m!53987 () Bool)

(assert (=> d!12083 m!53987))

(declare-fun m!53989 () Bool)

(assert (=> d!12083 m!53989))

(declare-fun m!53991 () Bool)

(assert (=> d!12083 m!53991))

(declare-fun m!53993 () Bool)

(assert (=> d!12083 m!53993))

(declare-fun m!53995 () Bool)

(assert (=> b!61271 m!53995))

(declare-fun m!53997 () Bool)

(assert (=> b!61272 m!53997))

(assert (=> bm!4625 d!12083))

(declare-fun d!12085 () Bool)

(declare-fun res!33772 () Bool)

(declare-fun e!40267 () Bool)

(assert (=> d!12085 (=> res!33772 e!40267)))

(assert (=> d!12085 (= res!33772 (and ((_ is Cons!1455) (toList!708 lt!24780)) (= (_1!1040 (h!2037 (toList!708 lt!24780))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12085 (= (containsKey!128 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) e!40267)))

(declare-fun b!61277 () Bool)

(declare-fun e!40268 () Bool)

(assert (=> b!61277 (= e!40267 e!40268)))

(declare-fun res!33773 () Bool)

(assert (=> b!61277 (=> (not res!33773) (not e!40268))))

(assert (=> b!61277 (= res!33773 (and (or (not ((_ is Cons!1455) (toList!708 lt!24780))) (bvsle (_1!1040 (h!2037 (toList!708 lt!24780))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))) ((_ is Cons!1455) (toList!708 lt!24780)) (bvslt (_1!1040 (h!2037 (toList!708 lt!24780))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(declare-fun b!61278 () Bool)

(assert (=> b!61278 (= e!40268 (containsKey!128 (t!4837 (toList!708 lt!24780)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12085 (not res!33772)) b!61277))

(assert (= (and b!61277 res!33773) b!61278))

(assert (=> b!61278 m!53207))

(declare-fun m!53999 () Bool)

(assert (=> b!61278 m!53999))

(assert (=> d!11929 d!12085))

(declare-fun b!61280 () Bool)

(declare-fun e!40269 () Bool)

(assert (=> b!61280 (= e!40269 tp_is_empty!2409)))

(declare-fun mapNonEmpty!2929 () Bool)

(declare-fun mapRes!2929 () Bool)

(declare-fun tp!8095 () Bool)

(declare-fun e!40270 () Bool)

(assert (=> mapNonEmpty!2929 (= mapRes!2929 (and tp!8095 e!40270))))

(declare-fun mapValue!2929 () ValueCell!861)

(declare-fun mapKey!2929 () (_ BitVec 32))

(declare-fun mapRest!2929 () (Array (_ BitVec 32) ValueCell!861))

(assert (=> mapNonEmpty!2929 (= mapRest!2927 (store mapRest!2929 mapKey!2929 mapValue!2929))))

(declare-fun b!61279 () Bool)

(assert (=> b!61279 (= e!40270 tp_is_empty!2409)))

(declare-fun condMapEmpty!2929 () Bool)

(declare-fun mapDefault!2929 () ValueCell!861)

(assert (=> mapNonEmpty!2927 (= condMapEmpty!2929 (= mapRest!2927 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2929)))))

(assert (=> mapNonEmpty!2927 (= tp!8093 (and e!40269 mapRes!2929))))

(declare-fun mapIsEmpty!2929 () Bool)

(assert (=> mapIsEmpty!2929 mapRes!2929))

(assert (= (and mapNonEmpty!2927 condMapEmpty!2929) mapIsEmpty!2929))

(assert (= (and mapNonEmpty!2927 (not condMapEmpty!2929)) mapNonEmpty!2929))

(assert (= (and mapNonEmpty!2929 ((_ is ValueCellFull!861) mapValue!2929)) b!61279))

(assert (= (and mapNonEmpty!2927 ((_ is ValueCellFull!861) mapDefault!2929)) b!61280))

(declare-fun m!54001 () Bool)

(assert (=> mapNonEmpty!2929 m!54001))

(declare-fun b!61282 () Bool)

(declare-fun e!40271 () Bool)

(assert (=> b!61282 (= e!40271 tp_is_empty!2409)))

(declare-fun mapNonEmpty!2930 () Bool)

(declare-fun mapRes!2930 () Bool)

(declare-fun tp!8096 () Bool)

(declare-fun e!40272 () Bool)

(assert (=> mapNonEmpty!2930 (= mapRes!2930 (and tp!8096 e!40272))))

(declare-fun mapKey!2930 () (_ BitVec 32))

(declare-fun mapRest!2930 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2930 () ValueCell!861)

(assert (=> mapNonEmpty!2930 (= mapRest!2928 (store mapRest!2930 mapKey!2930 mapValue!2930))))

(declare-fun b!61281 () Bool)

(assert (=> b!61281 (= e!40272 tp_is_empty!2409)))

(declare-fun condMapEmpty!2930 () Bool)

(declare-fun mapDefault!2930 () ValueCell!861)

(assert (=> mapNonEmpty!2928 (= condMapEmpty!2930 (= mapRest!2928 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2930)))))

(assert (=> mapNonEmpty!2928 (= tp!8094 (and e!40271 mapRes!2930))))

(declare-fun mapIsEmpty!2930 () Bool)

(assert (=> mapIsEmpty!2930 mapRes!2930))

(assert (= (and mapNonEmpty!2928 condMapEmpty!2930) mapIsEmpty!2930))

(assert (= (and mapNonEmpty!2928 (not condMapEmpty!2930)) mapNonEmpty!2930))

(assert (= (and mapNonEmpty!2930 ((_ is ValueCellFull!861) mapValue!2930)) b!61281))

(assert (= (and mapNonEmpty!2928 ((_ is ValueCellFull!861) mapDefault!2930)) b!61282))

(declare-fun m!54003 () Bool)

(assert (=> mapNonEmpty!2930 m!54003))

(declare-fun b_lambda!2717 () Bool)

(assert (= b_lambda!2715 (or (and b!60621 b_free!1985) (and b!60620 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))))) b_lambda!2717)))

(declare-fun b_lambda!2719 () Bool)

(assert (= b_lambda!2709 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2719)))

(declare-fun b_lambda!2721 () Bool)

(assert (= b_lambda!2713 (or (and b!60621 b_free!1985) (and b!60620 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))))) b_lambda!2721)))

(declare-fun b_lambda!2723 () Bool)

(assert (= b_lambda!2707 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2723)))

(declare-fun b_lambda!2725 () Bool)

(assert (= b_lambda!2711 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2725)))

(check-sat (not d!12053) (not b!61188) (not b!61138) (not bm!4701) (not b!61223) (not bm!4691) (not d!12069) (not b!61008) (not b!60941) (not bm!4663) (not d!11993) (not b!61007) (not d!12051) (not b!61251) (not d!12039) (not b!61194) (not b!61231) (not bm!4662) (not d!11999) (not bm!4666) (not d!12073) (not b!61092) (not b!60963) (not b!61263) (not b!61246) (not d!12025) (not bm!4700) (not b_lambda!2719) (not b!60993) (not b!61278) (not d!12001) (not d!11985) (not b!61227) (not b!61093) (not b!61185) (not b!60980) (not b!61259) (not b_lambda!2717) (not b!61134) (not b!61147) (not d!11989) (not bm!4672) (not b!61239) (not d!12049) (not bm!4696) (not b!60936) (not b!60950) (not bm!4669) (not d!12061) (not b_lambda!2721) (not b!61133) (not bm!4704) (not b!61107) (not d!12055) (not b!60952) (not b!61071) (not b!61102) b_and!3729 (not d!12009) (not b!61244) (not d!12063) (not b!61144) (not b_next!1985) (not d!12041) (not b!61256) (not b!61254) (not mapNonEmpty!2930) (not d!12007) (not b!61261) (not bm!4671) (not b!61148) (not b!60960) (not b!61108) (not b_lambda!2725) (not d!11959) (not d!12057) (not b_next!1987) (not b!60944) (not d!12031) (not b!61195) (not b!61226) (not bm!4676) (not d!12013) (not b!61154) (not d!12005) (not b!61236) (not d!12015) (not bm!4673) (not b!61248) (not b!61245) (not mapNonEmpty!2929) (not b!61232) (not b!61198) (not b!61003) (not b!61230) (not d!12071) (not b!61190) (not bm!4705) (not d!12047) (not b!61253) (not bm!4688) (not bm!4685) (not d!12021) (not b!61184) (not b!60964) (not b!61081) (not b_lambda!2723) (not d!12035) (not b!61180) (not b!61023) (not b!61010) (not b!60985) (not b!61255) (not bm!4687) (not b!61181) (not b!61002) tp_is_empty!2409 (not bm!4708) (not d!11983) (not b!61106) (not b!61272) (not bm!4697) (not b!61169) (not d!11965) b_and!3731 (not d!11981) (not d!11975) (not d!12067) (not d!12065) (not b!61235) (not b!61141) (not b!60970) (not b!61264) (not d!11963) (not d!12083) (not b!61005) (not d!11995) (not b_lambda!2701) (not b!60969) (not b!61067) (not b!61233) (not b!61086) (not b!60996) (not b!61228) (not d!12027) (not d!11973) (not d!12011) (not b!61153) (not b!61192) (not d!12081) (not b!61079) (not bm!4709) (not b!61069) (not d!12059) (not b!61250) (not b!61064) (not d!11961) (not b!61271) (not bm!4661) (not d!12045) (not b!61158) (not b_lambda!2705) (not b!60987) (not b!61269) (not d!12075) (not b!60997) (not b!60957) (not b!61136) (not b!61006) (not d!11967) (not b!61074) (not d!11987) (not b!61196) (not d!12017) (not b!61237) (not b!60954) (not b!61187) (not b!60938) (not bm!4699) (not b!61104) (not b!61080) (not b!60990) (not d!12043))
(check-sat b_and!3729 b_and!3731 (not b_next!1985) (not b_next!1987))
(get-model)

(declare-fun d!12087 () Bool)

(declare-fun e!40274 () Bool)

(assert (=> d!12087 e!40274))

(declare-fun res!33774 () Bool)

(assert (=> d!12087 (=> res!33774 e!40274)))

(declare-fun lt!25279 () Bool)

(assert (=> d!12087 (= res!33774 (not lt!25279))))

(declare-fun lt!25281 () Bool)

(assert (=> d!12087 (= lt!25279 lt!25281)))

(declare-fun lt!25280 () Unit!1622)

(declare-fun e!40273 () Unit!1622)

(assert (=> d!12087 (= lt!25280 e!40273)))

(declare-fun c!8032 () Bool)

(assert (=> d!12087 (= c!8032 lt!25281)))

(assert (=> d!12087 (= lt!25281 (containsKey!128 (toList!708 lt!25229) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!12087 (= (contains!697 lt!25229 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!25279)))

(declare-fun b!61283 () Bool)

(declare-fun lt!25282 () Unit!1622)

(assert (=> b!61283 (= e!40273 lt!25282)))

(assert (=> b!61283 (= lt!25282 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25229) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61283 (isDefined!78 (getValueByKey!124 (toList!708 lt!25229) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!61284 () Bool)

(declare-fun Unit!1646 () Unit!1622)

(assert (=> b!61284 (= e!40273 Unit!1646)))

(declare-fun b!61285 () Bool)

(assert (=> b!61285 (= e!40274 (isDefined!78 (getValueByKey!124 (toList!708 lt!25229) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!12087 c!8032) b!61283))

(assert (= (and d!12087 (not c!8032)) b!61284))

(assert (= (and d!12087 (not res!33774)) b!61285))

(assert (=> d!12087 m!53359))

(declare-fun m!54005 () Bool)

(assert (=> d!12087 m!54005))

(assert (=> b!61283 m!53359))

(declare-fun m!54007 () Bool)

(assert (=> b!61283 m!54007))

(assert (=> b!61283 m!53359))

(declare-fun m!54009 () Bool)

(assert (=> b!61283 m!54009))

(assert (=> b!61283 m!54009))

(declare-fun m!54011 () Bool)

(assert (=> b!61283 m!54011))

(assert (=> b!61285 m!53359))

(assert (=> b!61285 m!54009))

(assert (=> b!61285 m!54009))

(assert (=> b!61285 m!54011))

(assert (=> b!61223 d!12087))

(declare-fun d!12089 () Bool)

(declare-fun e!40275 () Bool)

(assert (=> d!12089 e!40275))

(declare-fun res!33775 () Bool)

(assert (=> d!12089 (=> (not res!33775) (not e!40275))))

(declare-fun lt!25283 () ListLongMap!1385)

(assert (=> d!12089 (= res!33775 (contains!697 lt!25283 (_1!1040 (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(declare-fun lt!25285 () List!1459)

(assert (=> d!12089 (= lt!25283 (ListLongMap!1386 lt!25285))))

(declare-fun lt!25286 () Unit!1622)

(declare-fun lt!25284 () Unit!1622)

(assert (=> d!12089 (= lt!25286 lt!25284)))

(assert (=> d!12089 (= (getValueByKey!124 lt!25285 (_1!1040 (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))) (Some!129 (_2!1040 (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12089 (= lt!25284 (lemmaContainsTupThenGetReturnValue!43 lt!25285 (_1!1040 (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (_2!1040 (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12089 (= lt!25285 (insertStrictlySorted!45 (toList!708 (ite c!7949 call!4664 (ite c!7951 call!4666 call!4668))) (_1!1040 (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (_2!1040 (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12089 (= (+!82 (ite c!7949 call!4664 (ite c!7951 call!4666 call!4668)) (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) lt!25283)))

(declare-fun b!61286 () Bool)

(declare-fun res!33776 () Bool)

(assert (=> b!61286 (=> (not res!33776) (not e!40275))))

(assert (=> b!61286 (= res!33776 (= (getValueByKey!124 (toList!708 lt!25283) (_1!1040 (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))) (Some!129 (_2!1040 (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))))

(declare-fun b!61287 () Bool)

(assert (=> b!61287 (= e!40275 (contains!699 (toList!708 lt!25283) (ite (or c!7949 c!7951) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (= (and d!12089 res!33775) b!61286))

(assert (= (and b!61286 res!33776) b!61287))

(declare-fun m!54013 () Bool)

(assert (=> d!12089 m!54013))

(declare-fun m!54015 () Bool)

(assert (=> d!12089 m!54015))

(declare-fun m!54017 () Bool)

(assert (=> d!12089 m!54017))

(declare-fun m!54019 () Bool)

(assert (=> d!12089 m!54019))

(declare-fun m!54021 () Bool)

(assert (=> b!61286 m!54021))

(declare-fun m!54023 () Bool)

(assert (=> b!61287 m!54023))

(assert (=> bm!4663 d!12089))

(declare-fun b!61290 () Bool)

(declare-fun e!40277 () Option!130)

(assert (=> b!61290 (= e!40277 (getValueByKey!124 (t!4837 (toList!708 lt!25258)) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61291 () Bool)

(assert (=> b!61291 (= e!40277 None!128)))

(declare-fun b!61289 () Bool)

(declare-fun e!40276 () Option!130)

(assert (=> b!61289 (= e!40276 e!40277)))

(declare-fun c!8034 () Bool)

(assert (=> b!61289 (= c!8034 (and ((_ is Cons!1455) (toList!708 lt!25258)) (not (= (_1!1040 (h!2037 (toList!708 lt!25258))) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61288 () Bool)

(assert (=> b!61288 (= e!40276 (Some!129 (_2!1040 (h!2037 (toList!708 lt!25258)))))))

(declare-fun d!12091 () Bool)

(declare-fun c!8033 () Bool)

(assert (=> d!12091 (= c!8033 (and ((_ is Cons!1455) (toList!708 lt!25258)) (= (_1!1040 (h!2037 (toList!708 lt!25258))) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12091 (= (getValueByKey!124 (toList!708 lt!25258) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) e!40276)))

(assert (= (and d!12091 c!8033) b!61288))

(assert (= (and d!12091 (not c!8033)) b!61289))

(assert (= (and b!61289 c!8034) b!61290))

(assert (= (and b!61289 (not c!8034)) b!61291))

(declare-fun m!54025 () Bool)

(assert (=> b!61290 m!54025))

(assert (=> b!61253 d!12091))

(declare-fun d!12093 () Bool)

(assert (=> d!12093 (= (apply!67 lt!25179 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1093 (getValueByKey!124 (toList!708 lt!25179) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2650 () Bool)

(assert (= bs!2650 d!12093))

(declare-fun m!54027 () Bool)

(assert (=> bs!2650 m!54027))

(assert (=> bs!2650 m!54027))

(declare-fun m!54029 () Bool)

(assert (=> bs!2650 m!54029))

(assert (=> b!61138 d!12093))

(declare-fun b!61292 () Bool)

(declare-fun e!40278 () (_ BitVec 32))

(declare-fun e!40279 () (_ BitVec 32))

(assert (=> b!61292 (= e!40278 e!40279)))

(declare-fun c!8036 () Bool)

(assert (=> b!61292 (= c!8036 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!12095 () Bool)

(declare-fun lt!25287 () (_ BitVec 32))

(assert (=> d!12095 (and (bvsge lt!25287 #b00000000000000000000000000000000) (bvsle lt!25287 (bvsub (size!2023 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!12095 (= lt!25287 e!40278)))

(declare-fun c!8035 () Bool)

(assert (=> d!12095 (= c!8035 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!12095 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 (_keys!3695 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2023 (_keys!3695 newMap!16)) (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!12095 (= (arrayCountValidKeys!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 (_keys!3695 newMap!16))) lt!25287)))

(declare-fun b!61293 () Bool)

(assert (=> b!61293 (= e!40278 #b00000000000000000000000000000000)))

(declare-fun b!61294 () Bool)

(declare-fun call!4713 () (_ BitVec 32))

(assert (=> b!61294 (= e!40279 call!4713)))

(declare-fun bm!4710 () Bool)

(assert (=> bm!4710 (= call!4713 (arrayCountValidKeys!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61295 () Bool)

(assert (=> b!61295 (= e!40279 (bvadd #b00000000000000000000000000000001 call!4713))))

(assert (= (and d!12095 c!8035) b!61293))

(assert (= (and d!12095 (not c!8035)) b!61292))

(assert (= (and b!61292 c!8036) b!61295))

(assert (= (and b!61292 (not c!8036)) b!61294))

(assert (= (or b!61295 b!61294) bm!4710))

(declare-fun m!54031 () Bool)

(assert (=> b!61292 m!54031))

(assert (=> b!61292 m!54031))

(declare-fun m!54033 () Bool)

(assert (=> b!61292 m!54033))

(declare-fun m!54035 () Bool)

(assert (=> bm!4710 m!54035))

(assert (=> bm!4669 d!12095))

(declare-fun d!12097 () Bool)

(assert (=> d!12097 (= (inRange!0 (ite c!8000 (index!3076 lt!25170) (index!3079 lt!25170)) (mask!5963 newMap!16)) (and (bvsge (ite c!8000 (index!3076 lt!25170) (index!3079 lt!25170)) #b00000000000000000000000000000000) (bvslt (ite c!8000 (index!3076 lt!25170) (index!3079 lt!25170)) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4696 d!12097))

(declare-fun d!12099 () Bool)

(assert (=> d!12099 (= (size!2027 newMap!16) (bvadd (_size!364 newMap!16) (bvsdiv (bvadd (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!61180 d!12099))

(declare-fun d!12101 () Bool)

(assert (=> d!12101 (= (apply!67 lt!25229 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1093 (getValueByKey!124 (toList!708 lt!25229) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2651 () Bool)

(assert (= bs!2651 d!12101))

(assert (=> bs!2651 m!53359))

(assert (=> bs!2651 m!54009))

(assert (=> bs!2651 m!54009))

(declare-fun m!54037 () Bool)

(assert (=> bs!2651 m!54037))

(assert (=> b!61227 d!12101))

(assert (=> b!61227 d!11991))

(declare-fun d!12103 () Bool)

(assert (=> d!12103 (contains!697 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888)))))

(assert (=> d!12103 true))

(declare-fun _$16!81 () Unit!1622)

(assert (=> d!12103 (= (choose!324 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3077 lt!24888) (defaultEntry!2067 newMap!16)) _$16!81)))

(declare-fun bs!2652 () Bool)

(assert (= bs!2652 d!12103))

(assert (=> bs!2652 m!53455))

(assert (=> bs!2652 m!53341))

(assert (=> bs!2652 m!53455))

(assert (=> bs!2652 m!53341))

(assert (=> bs!2652 m!53457))

(assert (=> d!11961 d!12103))

(declare-fun d!12105 () Bool)

(assert (=> d!12105 (= (validMask!0 (mask!5963 newMap!16)) (and (or (= (mask!5963 newMap!16) #b00000000000000000000000000000111) (= (mask!5963 newMap!16) #b00000000000000000000000000001111) (= (mask!5963 newMap!16) #b00000000000000000000000000011111) (= (mask!5963 newMap!16) #b00000000000000000000000000111111) (= (mask!5963 newMap!16) #b00000000000000000000000001111111) (= (mask!5963 newMap!16) #b00000000000000000000000011111111) (= (mask!5963 newMap!16) #b00000000000000000000000111111111) (= (mask!5963 newMap!16) #b00000000000000000000001111111111) (= (mask!5963 newMap!16) #b00000000000000000000011111111111) (= (mask!5963 newMap!16) #b00000000000000000000111111111111) (= (mask!5963 newMap!16) #b00000000000000000001111111111111) (= (mask!5963 newMap!16) #b00000000000000000011111111111111) (= (mask!5963 newMap!16) #b00000000000000000111111111111111) (= (mask!5963 newMap!16) #b00000000000000001111111111111111) (= (mask!5963 newMap!16) #b00000000000000011111111111111111) (= (mask!5963 newMap!16) #b00000000000000111111111111111111) (= (mask!5963 newMap!16) #b00000000000001111111111111111111) (= (mask!5963 newMap!16) #b00000000000011111111111111111111) (= (mask!5963 newMap!16) #b00000000000111111111111111111111) (= (mask!5963 newMap!16) #b00000000001111111111111111111111) (= (mask!5963 newMap!16) #b00000000011111111111111111111111) (= (mask!5963 newMap!16) #b00000000111111111111111111111111) (= (mask!5963 newMap!16) #b00000001111111111111111111111111) (= (mask!5963 newMap!16) #b00000011111111111111111111111111) (= (mask!5963 newMap!16) #b00000111111111111111111111111111) (= (mask!5963 newMap!16) #b00001111111111111111111111111111) (= (mask!5963 newMap!16) #b00011111111111111111111111111111) (= (mask!5963 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5963 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!11961 d!12105))

(assert (=> d!12013 d!12105))

(declare-fun d!12107 () Bool)

(declare-fun res!33777 () Bool)

(declare-fun e!40280 () Bool)

(assert (=> d!12107 (=> res!33777 e!40280)))

(assert (=> d!12107 (= res!33777 (and ((_ is Cons!1455) (toList!708 call!4634)) (= (_1!1040 (h!2037 (toList!708 call!4634))) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888)))))))

(assert (=> d!12107 (= (containsKey!128 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))) e!40280)))

(declare-fun b!61296 () Bool)

(declare-fun e!40281 () Bool)

(assert (=> b!61296 (= e!40280 e!40281)))

(declare-fun res!33778 () Bool)

(assert (=> b!61296 (=> (not res!33778) (not e!40281))))

(assert (=> b!61296 (= res!33778 (and (or (not ((_ is Cons!1455) (toList!708 call!4634))) (bvsle (_1!1040 (h!2037 (toList!708 call!4634))) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888)))) ((_ is Cons!1455) (toList!708 call!4634)) (bvslt (_1!1040 (h!2037 (toList!708 call!4634))) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888)))))))

(declare-fun b!61297 () Bool)

(assert (=> b!61297 (= e!40281 (containsKey!128 (t!4837 (toList!708 call!4634)) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(assert (= (and d!12107 (not res!33777)) b!61296))

(assert (= (and b!61296 res!33778) b!61297))

(assert (=> b!61297 m!53341))

(declare-fun m!54039 () Bool)

(assert (=> b!61297 m!54039))

(assert (=> d!11959 d!12107))

(declare-fun d!12109 () Bool)

(declare-fun e!40283 () Bool)

(assert (=> d!12109 e!40283))

(declare-fun res!33779 () Bool)

(assert (=> d!12109 (=> res!33779 e!40283)))

(declare-fun lt!25288 () Bool)

(assert (=> d!12109 (= res!33779 (not lt!25288))))

(declare-fun lt!25290 () Bool)

(assert (=> d!12109 (= lt!25288 lt!25290)))

(declare-fun lt!25289 () Unit!1622)

(declare-fun e!40282 () Unit!1622)

(assert (=> d!12109 (= lt!25289 e!40282)))

(declare-fun c!8037 () Bool)

(assert (=> d!12109 (= c!8037 lt!25290)))

(assert (=> d!12109 (= lt!25290 (containsKey!128 (toList!708 lt!25233) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12109 (= (contains!697 lt!25233 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25288)))

(declare-fun b!61298 () Bool)

(declare-fun lt!25291 () Unit!1622)

(assert (=> b!61298 (= e!40282 lt!25291)))

(assert (=> b!61298 (= lt!25291 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25233) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!61298 (isDefined!78 (getValueByKey!124 (toList!708 lt!25233) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61299 () Bool)

(declare-fun Unit!1647 () Unit!1622)

(assert (=> b!61299 (= e!40282 Unit!1647)))

(declare-fun b!61300 () Bool)

(assert (=> b!61300 (= e!40283 (isDefined!78 (getValueByKey!124 (toList!708 lt!25233) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12109 c!8037) b!61298))

(assert (= (and d!12109 (not c!8037)) b!61299))

(assert (= (and d!12109 (not res!33779)) b!61300))

(declare-fun m!54041 () Bool)

(assert (=> d!12109 m!54041))

(declare-fun m!54043 () Bool)

(assert (=> b!61298 m!54043))

(assert (=> b!61298 m!53865))

(assert (=> b!61298 m!53865))

(declare-fun m!54045 () Bool)

(assert (=> b!61298 m!54045))

(assert (=> b!61300 m!53865))

(assert (=> b!61300 m!53865))

(assert (=> b!61300 m!54045))

(assert (=> d!12041 d!12109))

(declare-fun b!61303 () Bool)

(declare-fun e!40285 () Option!130)

(assert (=> b!61303 (= e!40285 (getValueByKey!124 (t!4837 lt!25235) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61304 () Bool)

(assert (=> b!61304 (= e!40285 None!128)))

(declare-fun b!61302 () Bool)

(declare-fun e!40284 () Option!130)

(assert (=> b!61302 (= e!40284 e!40285)))

(declare-fun c!8039 () Bool)

(assert (=> b!61302 (= c!8039 (and ((_ is Cons!1455) lt!25235) (not (= (_1!1040 (h!2037 lt!25235)) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!61301 () Bool)

(assert (=> b!61301 (= e!40284 (Some!129 (_2!1040 (h!2037 lt!25235))))))

(declare-fun c!8038 () Bool)

(declare-fun d!12111 () Bool)

(assert (=> d!12111 (= c!8038 (and ((_ is Cons!1455) lt!25235) (= (_1!1040 (h!2037 lt!25235)) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12111 (= (getValueByKey!124 lt!25235 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!40284)))

(assert (= (and d!12111 c!8038) b!61301))

(assert (= (and d!12111 (not c!8038)) b!61302))

(assert (= (and b!61302 c!8039) b!61303))

(assert (= (and b!61302 (not c!8039)) b!61304))

(declare-fun m!54047 () Bool)

(assert (=> b!61303 m!54047))

(assert (=> d!12041 d!12111))

(declare-fun d!12113 () Bool)

(assert (=> d!12113 (= (getValueByKey!124 lt!25235 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25294 () Unit!1622)

(declare-fun choose!333 (List!1459 (_ BitVec 64) V!2859) Unit!1622)

(assert (=> d!12113 (= lt!25294 (choose!333 lt!25235 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!40288 () Bool)

(assert (=> d!12113 e!40288))

(declare-fun res!33784 () Bool)

(assert (=> d!12113 (=> (not res!33784) (not e!40288))))

(assert (=> d!12113 (= res!33784 (isStrictlySorted!280 lt!25235))))

(assert (=> d!12113 (= (lemmaContainsTupThenGetReturnValue!43 lt!25235 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25294)))

(declare-fun b!61309 () Bool)

(declare-fun res!33785 () Bool)

(assert (=> b!61309 (=> (not res!33785) (not e!40288))))

(assert (=> b!61309 (= res!33785 (containsKey!128 lt!25235 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61310 () Bool)

(assert (=> b!61310 (= e!40288 (contains!699 lt!25235 (tuple2!2061 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12113 res!33784) b!61309))

(assert (= (and b!61309 res!33785) b!61310))

(assert (=> d!12113 m!53859))

(declare-fun m!54049 () Bool)

(assert (=> d!12113 m!54049))

(declare-fun m!54051 () Bool)

(assert (=> d!12113 m!54051))

(declare-fun m!54053 () Bool)

(assert (=> b!61309 m!54053))

(declare-fun m!54055 () Bool)

(assert (=> b!61310 m!54055))

(assert (=> d!12041 d!12113))

(declare-fun bm!4717 () Bool)

(declare-fun call!4720 () List!1459)

(declare-fun call!4721 () List!1459)

(assert (=> bm!4717 (= call!4720 call!4721)))

(declare-fun b!61331 () Bool)

(declare-fun e!40299 () List!1459)

(declare-fun call!4722 () List!1459)

(assert (=> b!61331 (= e!40299 call!4722)))

(declare-fun d!12115 () Bool)

(declare-fun e!40303 () Bool)

(assert (=> d!12115 e!40303))

(declare-fun res!33791 () Bool)

(assert (=> d!12115 (=> (not res!33791) (not e!40303))))

(declare-fun lt!25297 () List!1459)

(assert (=> d!12115 (= res!33791 (isStrictlySorted!280 lt!25297))))

(declare-fun e!40300 () List!1459)

(assert (=> d!12115 (= lt!25297 e!40300)))

(declare-fun c!8049 () Bool)

(assert (=> d!12115 (= c!8049 (and ((_ is Cons!1455) (toList!708 call!4621)) (bvslt (_1!1040 (h!2037 (toList!708 call!4621))) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12115 (isStrictlySorted!280 (toList!708 call!4621))))

(assert (=> d!12115 (= (insertStrictlySorted!45 (toList!708 call!4621) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25297)))

(declare-fun b!61332 () Bool)

(declare-fun e!40302 () List!1459)

(assert (=> b!61332 (= e!40300 e!40302)))

(declare-fun c!8050 () Bool)

(assert (=> b!61332 (= c!8050 (and ((_ is Cons!1455) (toList!708 call!4621)) (= (_1!1040 (h!2037 (toList!708 call!4621))) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun c!8051 () Bool)

(declare-fun b!61333 () Bool)

(assert (=> b!61333 (= c!8051 (and ((_ is Cons!1455) (toList!708 call!4621)) (bvsgt (_1!1040 (h!2037 (toList!708 call!4621))) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!61333 (= e!40302 e!40299)))

(declare-fun b!61334 () Bool)

(assert (=> b!61334 (= e!40303 (contains!699 lt!25297 (tuple2!2061 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!40301 () List!1459)

(declare-fun b!61335 () Bool)

(assert (=> b!61335 (= e!40301 (ite c!8050 (t!4837 (toList!708 call!4621)) (ite c!8051 (Cons!1455 (h!2037 (toList!708 call!4621)) (t!4837 (toList!708 call!4621))) Nil!1456)))))

(declare-fun bm!4718 () Bool)

(declare-fun $colon$colon!60 (List!1459 tuple2!2060) List!1459)

(assert (=> bm!4718 (= call!4721 ($colon$colon!60 e!40301 (ite c!8049 (h!2037 (toList!708 call!4621)) (tuple2!2061 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!8048 () Bool)

(assert (=> bm!4718 (= c!8048 c!8049)))

(declare-fun b!61336 () Bool)

(assert (=> b!61336 (= e!40302 call!4720)))

(declare-fun b!61337 () Bool)

(assert (=> b!61337 (= e!40300 call!4721)))

(declare-fun bm!4719 () Bool)

(assert (=> bm!4719 (= call!4722 call!4720)))

(declare-fun b!61338 () Bool)

(assert (=> b!61338 (= e!40299 call!4722)))

(declare-fun b!61339 () Bool)

(declare-fun res!33790 () Bool)

(assert (=> b!61339 (=> (not res!33790) (not e!40303))))

(assert (=> b!61339 (= res!33790 (containsKey!128 lt!25297 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61340 () Bool)

(assert (=> b!61340 (= e!40301 (insertStrictlySorted!45 (t!4837 (toList!708 call!4621)) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12115 c!8049) b!61337))

(assert (= (and d!12115 (not c!8049)) b!61332))

(assert (= (and b!61332 c!8050) b!61336))

(assert (= (and b!61332 (not c!8050)) b!61333))

(assert (= (and b!61333 c!8051) b!61338))

(assert (= (and b!61333 (not c!8051)) b!61331))

(assert (= (or b!61338 b!61331) bm!4719))

(assert (= (or b!61336 bm!4719) bm!4717))

(assert (= (or b!61337 bm!4717) bm!4718))

(assert (= (and bm!4718 c!8048) b!61340))

(assert (= (and bm!4718 (not c!8048)) b!61335))

(assert (= (and d!12115 res!33791) b!61339))

(assert (= (and b!61339 res!33790) b!61334))

(declare-fun m!54057 () Bool)

(assert (=> b!61340 m!54057))

(declare-fun m!54059 () Bool)

(assert (=> bm!4718 m!54059))

(declare-fun m!54061 () Bool)

(assert (=> d!12115 m!54061))

(declare-fun m!54063 () Bool)

(assert (=> d!12115 m!54063))

(declare-fun m!54065 () Bool)

(assert (=> b!61334 m!54065))

(declare-fun m!54067 () Bool)

(assert (=> b!61339 m!54067))

(assert (=> d!12041 d!12115))

(declare-fun d!12117 () Bool)

(declare-fun res!33792 () Bool)

(declare-fun e!40304 () Bool)

(assert (=> d!12117 (=> res!33792 e!40304)))

(assert (=> d!12117 (= res!33792 (and ((_ is Cons!1455) (toList!708 lt!24948)) (= (_1!1040 (h!2037 (toList!708 lt!24948))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12117 (= (containsKey!128 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000) e!40304)))

(declare-fun b!61341 () Bool)

(declare-fun e!40305 () Bool)

(assert (=> b!61341 (= e!40304 e!40305)))

(declare-fun res!33793 () Bool)

(assert (=> b!61341 (=> (not res!33793) (not e!40305))))

(assert (=> b!61341 (= res!33793 (and (or (not ((_ is Cons!1455) (toList!708 lt!24948))) (bvsle (_1!1040 (h!2037 (toList!708 lt!24948))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1455) (toList!708 lt!24948)) (bvslt (_1!1040 (h!2037 (toList!708 lt!24948))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61342 () Bool)

(assert (=> b!61342 (= e!40305 (containsKey!128 (t!4837 (toList!708 lt!24948)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12117 (not res!33792)) b!61341))

(assert (= (and b!61341 res!33793) b!61342))

(declare-fun m!54069 () Bool)

(assert (=> b!61342 m!54069))

(assert (=> d!12031 d!12117))

(declare-fun d!12119 () Bool)

(declare-fun e!40307 () Bool)

(assert (=> d!12119 e!40307))

(declare-fun res!33794 () Bool)

(assert (=> d!12119 (=> res!33794 e!40307)))

(declare-fun lt!25298 () Bool)

(assert (=> d!12119 (= res!33794 (not lt!25298))))

(declare-fun lt!25300 () Bool)

(assert (=> d!12119 (= lt!25298 lt!25300)))

(declare-fun lt!25299 () Unit!1622)

(declare-fun e!40306 () Unit!1622)

(assert (=> d!12119 (= lt!25299 e!40306)))

(declare-fun c!8052 () Bool)

(assert (=> d!12119 (= c!8052 lt!25300)))

(assert (=> d!12119 (= lt!25300 (containsKey!128 (toList!708 lt!24992) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12119 (= (contains!697 lt!24992 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) lt!25298)))

(declare-fun b!61343 () Bool)

(declare-fun lt!25301 () Unit!1622)

(assert (=> b!61343 (= e!40306 lt!25301)))

(assert (=> b!61343 (= lt!25301 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24992) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61343 (isDefined!78 (getValueByKey!124 (toList!708 lt!24992) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61344 () Bool)

(declare-fun Unit!1648 () Unit!1622)

(assert (=> b!61344 (= e!40306 Unit!1648)))

(declare-fun b!61345 () Bool)

(assert (=> b!61345 (= e!40307 (isDefined!78 (getValueByKey!124 (toList!708 lt!24992) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12119 c!8052) b!61343))

(assert (= (and d!12119 (not c!8052)) b!61344))

(assert (= (and d!12119 (not res!33794)) b!61345))

(assert (=> d!12119 m!53471))

(declare-fun m!54071 () Bool)

(assert (=> d!12119 m!54071))

(assert (=> b!61343 m!53471))

(declare-fun m!54073 () Bool)

(assert (=> b!61343 m!54073))

(assert (=> b!61343 m!53471))

(declare-fun m!54075 () Bool)

(assert (=> b!61343 m!54075))

(assert (=> b!61343 m!54075))

(declare-fun m!54077 () Bool)

(assert (=> b!61343 m!54077))

(assert (=> b!61345 m!53471))

(assert (=> b!61345 m!54075))

(assert (=> b!61345 m!54075))

(assert (=> b!61345 m!54077))

(assert (=> b!60957 d!12119))

(declare-fun d!12121 () Bool)

(declare-fun e!40308 () Bool)

(assert (=> d!12121 e!40308))

(declare-fun res!33795 () Bool)

(assert (=> d!12121 (=> (not res!33795) (not e!40308))))

(declare-fun lt!25302 () ListLongMap!1385)

(assert (=> d!12121 (= res!33795 (contains!697 lt!25302 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun lt!25304 () List!1459)

(assert (=> d!12121 (= lt!25302 (ListLongMap!1386 lt!25304))))

(declare-fun lt!25305 () Unit!1622)

(declare-fun lt!25303 () Unit!1622)

(assert (=> d!12121 (= lt!25305 lt!25303)))

(assert (=> d!12121 (= (getValueByKey!124 lt!25304 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12121 (= lt!25303 (lemmaContainsTupThenGetReturnValue!43 lt!25304 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12121 (= lt!25304 (insertStrictlySorted!45 (toList!708 call!4701) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12121 (= (+!82 call!4701 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) lt!25302)))

(declare-fun b!61346 () Bool)

(declare-fun res!33796 () Bool)

(assert (=> b!61346 (=> (not res!33796) (not e!40308))))

(assert (=> b!61346 (= res!33796 (= (getValueByKey!124 (toList!708 lt!25302) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(declare-fun b!61347 () Bool)

(assert (=> b!61347 (= e!40308 (contains!699 (toList!708 lt!25302) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(assert (= (and d!12121 res!33795) b!61346))

(assert (= (and b!61346 res!33796) b!61347))

(declare-fun m!54079 () Bool)

(assert (=> d!12121 m!54079))

(declare-fun m!54081 () Bool)

(assert (=> d!12121 m!54081))

(declare-fun m!54083 () Bool)

(assert (=> d!12121 m!54083))

(declare-fun m!54085 () Bool)

(assert (=> d!12121 m!54085))

(declare-fun m!54087 () Bool)

(assert (=> b!61346 m!54087))

(declare-fun m!54089 () Bool)

(assert (=> b!61347 m!54089))

(assert (=> b!61148 d!12121))

(assert (=> b!61071 d!12081))

(assert (=> d!12075 d!12053))

(assert (=> d!12075 d!12069))

(declare-fun d!12123 () Bool)

(assert (=> d!12123 (contains!697 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24946)))

(assert (=> d!12123 true))

(declare-fun _$35!303 () Unit!1622)

(assert (=> d!12123 (= (choose!331 lt!24954 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24946) _$35!303)))

(declare-fun bs!2653 () Bool)

(assert (= bs!2653 d!12123))

(assert (=> bs!2653 m!53383))

(assert (=> bs!2653 m!53383))

(assert (=> bs!2653 m!53385))

(assert (=> d!12075 d!12123))

(declare-fun d!12125 () Bool)

(declare-fun e!40310 () Bool)

(assert (=> d!12125 e!40310))

(declare-fun res!33797 () Bool)

(assert (=> d!12125 (=> res!33797 e!40310)))

(declare-fun lt!25306 () Bool)

(assert (=> d!12125 (= res!33797 (not lt!25306))))

(declare-fun lt!25308 () Bool)

(assert (=> d!12125 (= lt!25306 lt!25308)))

(declare-fun lt!25307 () Unit!1622)

(declare-fun e!40309 () Unit!1622)

(assert (=> d!12125 (= lt!25307 e!40309)))

(declare-fun c!8053 () Bool)

(assert (=> d!12125 (= c!8053 lt!25308)))

(assert (=> d!12125 (= lt!25308 (containsKey!128 (toList!708 lt!24954) lt!24946))))

(assert (=> d!12125 (= (contains!697 lt!24954 lt!24946) lt!25306)))

(declare-fun b!61349 () Bool)

(declare-fun lt!25309 () Unit!1622)

(assert (=> b!61349 (= e!40309 lt!25309)))

(assert (=> b!61349 (= lt!25309 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24954) lt!24946))))

(assert (=> b!61349 (isDefined!78 (getValueByKey!124 (toList!708 lt!24954) lt!24946))))

(declare-fun b!61350 () Bool)

(declare-fun Unit!1649 () Unit!1622)

(assert (=> b!61350 (= e!40309 Unit!1649)))

(declare-fun b!61351 () Bool)

(assert (=> b!61351 (= e!40310 (isDefined!78 (getValueByKey!124 (toList!708 lt!24954) lt!24946)))))

(assert (= (and d!12125 c!8053) b!61349))

(assert (= (and d!12125 (not c!8053)) b!61350))

(assert (= (and d!12125 (not res!33797)) b!61351))

(declare-fun m!54091 () Bool)

(assert (=> d!12125 m!54091))

(declare-fun m!54093 () Bool)

(assert (=> b!61349 m!54093))

(declare-fun m!54095 () Bool)

(assert (=> b!61349 m!54095))

(assert (=> b!61349 m!54095))

(declare-fun m!54097 () Bool)

(assert (=> b!61349 m!54097))

(assert (=> b!61351 m!54095))

(assert (=> b!61351 m!54095))

(assert (=> b!61351 m!54097))

(assert (=> d!12075 d!12125))

(declare-fun d!12127 () Bool)

(declare-fun e!40311 () Bool)

(assert (=> d!12127 e!40311))

(declare-fun res!33798 () Bool)

(assert (=> d!12127 (=> (not res!33798) (not e!40311))))

(declare-fun lt!25310 () ListLongMap!1385)

(assert (=> d!12127 (= res!33798 (contains!697 lt!25310 (_1!1040 (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(declare-fun lt!25312 () List!1459)

(assert (=> d!12127 (= lt!25310 (ListLongMap!1386 lt!25312))))

(declare-fun lt!25313 () Unit!1622)

(declare-fun lt!25311 () Unit!1622)

(assert (=> d!12127 (= lt!25313 lt!25311)))

(assert (=> d!12127 (= (getValueByKey!124 lt!25312 (_1!1040 (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))) (Some!129 (_2!1040 (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(assert (=> d!12127 (= lt!25311 (lemmaContainsTupThenGetReturnValue!43 lt!25312 (_1!1040 (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (_2!1040 (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(assert (=> d!12127 (= lt!25312 (insertStrictlySorted!45 (toList!708 (ite c!7961 call!4674 (ite c!7963 call!4676 call!4678))) (_1!1040 (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (_2!1040 (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(assert (=> d!12127 (= (+!82 (ite c!7961 call!4674 (ite c!7963 call!4676 call!4678)) (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) lt!25310)))

(declare-fun b!61352 () Bool)

(declare-fun res!33799 () Bool)

(assert (=> b!61352 (=> (not res!33799) (not e!40311))))

(assert (=> b!61352 (= res!33799 (= (getValueByKey!124 (toList!708 lt!25310) (_1!1040 (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))) (Some!129 (_2!1040 (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))))

(declare-fun b!61353 () Bool)

(assert (=> b!61353 (= e!40311 (contains!699 (toList!708 lt!25310) (ite (or c!7961 c!7963) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (= (and d!12127 res!33798) b!61352))

(assert (= (and b!61352 res!33799) b!61353))

(declare-fun m!54099 () Bool)

(assert (=> d!12127 m!54099))

(declare-fun m!54101 () Bool)

(assert (=> d!12127 m!54101))

(declare-fun m!54103 () Bool)

(assert (=> d!12127 m!54103))

(declare-fun m!54105 () Bool)

(assert (=> d!12127 m!54105))

(declare-fun m!54107 () Bool)

(assert (=> b!61352 m!54107))

(declare-fun m!54109 () Bool)

(assert (=> b!61353 m!54109))

(assert (=> bm!4673 d!12127))

(declare-fun d!12129 () Bool)

(assert (=> d!12129 (= (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24958)) (v!2407 (getValueByKey!124 (toList!708 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24958)))))

(assert (=> d!12061 d!12129))

(declare-fun e!40313 () Option!130)

(declare-fun b!61356 () Bool)

(assert (=> b!61356 (= e!40313 (getValueByKey!124 (t!4837 (toList!708 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) lt!24958))))

(declare-fun b!61357 () Bool)

(assert (=> b!61357 (= e!40313 None!128)))

(declare-fun b!61355 () Bool)

(declare-fun e!40312 () Option!130)

(assert (=> b!61355 (= e!40312 e!40313)))

(declare-fun c!8055 () Bool)

(assert (=> b!61355 (= c!8055 (and ((_ is Cons!1455) (toList!708 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) (not (= (_1!1040 (h!2037 (toList!708 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))) lt!24958))))))

(declare-fun b!61354 () Bool)

(assert (=> b!61354 (= e!40312 (Some!129 (_2!1040 (h!2037 (toList!708 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))))

(declare-fun d!12131 () Bool)

(declare-fun c!8054 () Bool)

(assert (=> d!12131 (= c!8054 (and ((_ is Cons!1455) (toList!708 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) (= (_1!1040 (h!2037 (toList!708 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))) lt!24958)))))

(assert (=> d!12131 (= (getValueByKey!124 (toList!708 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24958) e!40312)))

(assert (= (and d!12131 c!8054) b!61354))

(assert (= (and d!12131 (not c!8054)) b!61355))

(assert (= (and b!61355 c!8055) b!61356))

(assert (= (and b!61355 (not c!8055)) b!61357))

(declare-fun m!54111 () Bool)

(assert (=> b!61356 m!54111))

(assert (=> d!12061 d!12131))

(declare-fun b!61360 () Bool)

(declare-fun e!40315 () Option!130)

(assert (=> b!61360 (= e!40315 (getValueByKey!124 (t!4837 (toList!708 lt!25152)) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61361 () Bool)

(assert (=> b!61361 (= e!40315 None!128)))

(declare-fun b!61359 () Bool)

(declare-fun e!40314 () Option!130)

(assert (=> b!61359 (= e!40314 e!40315)))

(declare-fun c!8057 () Bool)

(assert (=> b!61359 (= c!8057 (and ((_ is Cons!1455) (toList!708 lt!25152)) (not (= (_1!1040 (h!2037 (toList!708 lt!25152))) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61358 () Bool)

(assert (=> b!61358 (= e!40314 (Some!129 (_2!1040 (h!2037 (toList!708 lt!25152)))))))

(declare-fun d!12133 () Bool)

(declare-fun c!8056 () Bool)

(assert (=> d!12133 (= c!8056 (and ((_ is Cons!1455) (toList!708 lt!25152)) (= (_1!1040 (h!2037 (toList!708 lt!25152))) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12133 (= (getValueByKey!124 (toList!708 lt!25152) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) e!40314)))

(assert (= (and d!12133 c!8056) b!61358))

(assert (= (and d!12133 (not c!8056)) b!61359))

(assert (= (and b!61359 c!8057) b!61360))

(assert (= (and b!61359 (not c!8057)) b!61361))

(declare-fun m!54113 () Bool)

(assert (=> b!61360 m!54113))

(assert (=> b!61092 d!12133))

(declare-fun d!12135 () Bool)

(declare-fun e!40317 () Bool)

(assert (=> d!12135 e!40317))

(declare-fun res!33800 () Bool)

(assert (=> d!12135 (=> res!33800 e!40317)))

(declare-fun lt!25314 () Bool)

(assert (=> d!12135 (= res!33800 (not lt!25314))))

(declare-fun lt!25316 () Bool)

(assert (=> d!12135 (= lt!25314 lt!25316)))

(declare-fun lt!25315 () Unit!1622)

(declare-fun e!40316 () Unit!1622)

(assert (=> d!12135 (= lt!25315 e!40316)))

(declare-fun c!8058 () Bool)

(assert (=> d!12135 (= c!8058 lt!25316)))

(assert (=> d!12135 (= lt!25316 (containsKey!128 (toList!708 lt!25244) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12135 (= (contains!697 lt!25244 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25314)))

(declare-fun b!61362 () Bool)

(declare-fun lt!25317 () Unit!1622)

(assert (=> b!61362 (= e!40316 lt!25317)))

(assert (=> b!61362 (= lt!25317 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25244) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> b!61362 (isDefined!78 (getValueByKey!124 (toList!708 lt!25244) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61363 () Bool)

(declare-fun Unit!1650 () Unit!1622)

(assert (=> b!61363 (= e!40316 Unit!1650)))

(declare-fun b!61364 () Bool)

(assert (=> b!61364 (= e!40317 (isDefined!78 (getValueByKey!124 (toList!708 lt!25244) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (= (and d!12135 c!8058) b!61362))

(assert (= (and d!12135 (not c!8058)) b!61363))

(assert (= (and d!12135 (not res!33800)) b!61364))

(declare-fun m!54115 () Bool)

(assert (=> d!12135 m!54115))

(declare-fun m!54117 () Bool)

(assert (=> b!61362 m!54117))

(assert (=> b!61362 m!53895))

(assert (=> b!61362 m!53895))

(declare-fun m!54119 () Bool)

(assert (=> b!61362 m!54119))

(assert (=> b!61364 m!53895))

(assert (=> b!61364 m!53895))

(assert (=> b!61364 m!54119))

(assert (=> d!12051 d!12135))

(declare-fun b!61367 () Bool)

(declare-fun e!40319 () Option!130)

(assert (=> b!61367 (= e!40319 (getValueByKey!124 (t!4837 lt!25246) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61368 () Bool)

(assert (=> b!61368 (= e!40319 None!128)))

(declare-fun b!61366 () Bool)

(declare-fun e!40318 () Option!130)

(assert (=> b!61366 (= e!40318 e!40319)))

(declare-fun c!8060 () Bool)

(assert (=> b!61366 (= c!8060 (and ((_ is Cons!1455) lt!25246) (not (= (_1!1040 (h!2037 lt!25246)) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61365 () Bool)

(assert (=> b!61365 (= e!40318 (Some!129 (_2!1040 (h!2037 lt!25246))))))

(declare-fun c!8059 () Bool)

(declare-fun d!12137 () Bool)

(assert (=> d!12137 (= c!8059 (and ((_ is Cons!1455) lt!25246) (= (_1!1040 (h!2037 lt!25246)) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12137 (= (getValueByKey!124 lt!25246 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) e!40318)))

(assert (= (and d!12137 c!8059) b!61365))

(assert (= (and d!12137 (not c!8059)) b!61366))

(assert (= (and b!61366 c!8060) b!61367))

(assert (= (and b!61366 (not c!8060)) b!61368))

(declare-fun m!54121 () Bool)

(assert (=> b!61367 m!54121))

(assert (=> d!12051 d!12137))

(declare-fun d!12139 () Bool)

(assert (=> d!12139 (= (getValueByKey!124 lt!25246 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun lt!25318 () Unit!1622)

(assert (=> d!12139 (= lt!25318 (choose!333 lt!25246 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun e!40320 () Bool)

(assert (=> d!12139 e!40320))

(declare-fun res!33801 () Bool)

(assert (=> d!12139 (=> (not res!33801) (not e!40320))))

(assert (=> d!12139 (= res!33801 (isStrictlySorted!280 lt!25246))))

(assert (=> d!12139 (= (lemmaContainsTupThenGetReturnValue!43 lt!25246 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25318)))

(declare-fun b!61369 () Bool)

(declare-fun res!33802 () Bool)

(assert (=> b!61369 (=> (not res!33802) (not e!40320))))

(assert (=> b!61369 (= res!33802 (containsKey!128 lt!25246 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61370 () Bool)

(assert (=> b!61370 (= e!40320 (contains!699 lt!25246 (tuple2!2061 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (= (and d!12139 res!33801) b!61369))

(assert (= (and b!61369 res!33802) b!61370))

(assert (=> d!12139 m!53889))

(declare-fun m!54123 () Bool)

(assert (=> d!12139 m!54123))

(declare-fun m!54125 () Bool)

(assert (=> d!12139 m!54125))

(declare-fun m!54127 () Bool)

(assert (=> b!61369 m!54127))

(declare-fun m!54129 () Bool)

(assert (=> b!61370 m!54129))

(assert (=> d!12051 d!12139))

(declare-fun bm!4720 () Bool)

(declare-fun call!4723 () List!1459)

(declare-fun call!4724 () List!1459)

(assert (=> bm!4720 (= call!4723 call!4724)))

(declare-fun b!61371 () Bool)

(declare-fun e!40321 () List!1459)

(declare-fun call!4725 () List!1459)

(assert (=> b!61371 (= e!40321 call!4725)))

(declare-fun d!12141 () Bool)

(declare-fun e!40325 () Bool)

(assert (=> d!12141 e!40325))

(declare-fun res!33804 () Bool)

(assert (=> d!12141 (=> (not res!33804) (not e!40325))))

(declare-fun lt!25319 () List!1459)

(assert (=> d!12141 (= res!33804 (isStrictlySorted!280 lt!25319))))

(declare-fun e!40322 () List!1459)

(assert (=> d!12141 (= lt!25319 e!40322)))

(declare-fun c!8062 () Bool)

(assert (=> d!12141 (= c!8062 (and ((_ is Cons!1455) (toList!708 lt!24965)) (bvslt (_1!1040 (h!2037 (toList!708 lt!24965))) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12141 (isStrictlySorted!280 (toList!708 lt!24965))))

(assert (=> d!12141 (= (insertStrictlySorted!45 (toList!708 lt!24965) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25319)))

(declare-fun b!61372 () Bool)

(declare-fun e!40324 () List!1459)

(assert (=> b!61372 (= e!40322 e!40324)))

(declare-fun c!8063 () Bool)

(assert (=> b!61372 (= c!8063 (and ((_ is Cons!1455) (toList!708 lt!24965)) (= (_1!1040 (h!2037 (toList!708 lt!24965))) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61373 () Bool)

(declare-fun c!8064 () Bool)

(assert (=> b!61373 (= c!8064 (and ((_ is Cons!1455) (toList!708 lt!24965)) (bvsgt (_1!1040 (h!2037 (toList!708 lt!24965))) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> b!61373 (= e!40324 e!40321)))

(declare-fun b!61374 () Bool)

(assert (=> b!61374 (= e!40325 (contains!699 lt!25319 (tuple2!2061 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61375 () Bool)

(declare-fun e!40323 () List!1459)

(assert (=> b!61375 (= e!40323 (ite c!8063 (t!4837 (toList!708 lt!24965)) (ite c!8064 (Cons!1455 (h!2037 (toList!708 lt!24965)) (t!4837 (toList!708 lt!24965))) Nil!1456)))))

(declare-fun bm!4721 () Bool)

(assert (=> bm!4721 (= call!4724 ($colon$colon!60 e!40323 (ite c!8062 (h!2037 (toList!708 lt!24965)) (tuple2!2061 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun c!8061 () Bool)

(assert (=> bm!4721 (= c!8061 c!8062)))

(declare-fun b!61376 () Bool)

(assert (=> b!61376 (= e!40324 call!4723)))

(declare-fun b!61377 () Bool)

(assert (=> b!61377 (= e!40322 call!4724)))

(declare-fun bm!4722 () Bool)

(assert (=> bm!4722 (= call!4725 call!4723)))

(declare-fun b!61378 () Bool)

(assert (=> b!61378 (= e!40321 call!4725)))

(declare-fun b!61379 () Bool)

(declare-fun res!33803 () Bool)

(assert (=> b!61379 (=> (not res!33803) (not e!40325))))

(assert (=> b!61379 (= res!33803 (containsKey!128 lt!25319 (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61380 () Bool)

(assert (=> b!61380 (= e!40323 (insertStrictlySorted!45 (t!4837 (toList!708 lt!24965)) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (= (and d!12141 c!8062) b!61377))

(assert (= (and d!12141 (not c!8062)) b!61372))

(assert (= (and b!61372 c!8063) b!61376))

(assert (= (and b!61372 (not c!8063)) b!61373))

(assert (= (and b!61373 c!8064) b!61378))

(assert (= (and b!61373 (not c!8064)) b!61371))

(assert (= (or b!61378 b!61371) bm!4722))

(assert (= (or b!61376 bm!4722) bm!4720))

(assert (= (or b!61377 bm!4720) bm!4721))

(assert (= (and bm!4721 c!8061) b!61380))

(assert (= (and bm!4721 (not c!8061)) b!61375))

(assert (= (and d!12141 res!33804) b!61379))

(assert (= (and b!61379 res!33803) b!61374))

(declare-fun m!54131 () Bool)

(assert (=> b!61380 m!54131))

(declare-fun m!54133 () Bool)

(assert (=> bm!4721 m!54133))

(declare-fun m!54135 () Bool)

(assert (=> d!12141 m!54135))

(declare-fun m!54137 () Bool)

(assert (=> d!12141 m!54137))

(declare-fun m!54139 () Bool)

(assert (=> b!61374 m!54139))

(declare-fun m!54141 () Bool)

(assert (=> b!61379 m!54141))

(assert (=> d!12051 d!12141))

(declare-fun d!12143 () Bool)

(assert (=> d!12143 (= (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946)) (not (isEmpty!301 (getValueByKey!124 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946))))))

(declare-fun bs!2654 () Bool)

(assert (= bs!2654 d!12143))

(assert (=> bs!2654 m!53903))

(declare-fun m!54143 () Bool)

(assert (=> bs!2654 m!54143))

(assert (=> b!61248 d!12143))

(declare-fun e!40327 () Option!130)

(declare-fun b!61383 () Bool)

(assert (=> b!61383 (= e!40327 (getValueByKey!124 (t!4837 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))) lt!24946))))

(declare-fun b!61384 () Bool)

(assert (=> b!61384 (= e!40327 None!128)))

(declare-fun b!61382 () Bool)

(declare-fun e!40326 () Option!130)

(assert (=> b!61382 (= e!40326 e!40327)))

(declare-fun c!8066 () Bool)

(assert (=> b!61382 (= c!8066 (and ((_ is Cons!1455) (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))) (not (= (_1!1040 (h!2037 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))) lt!24946))))))

(declare-fun b!61381 () Bool)

(assert (=> b!61381 (= e!40326 (Some!129 (_2!1040 (h!2037 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))))

(declare-fun d!12145 () Bool)

(declare-fun c!8065 () Bool)

(assert (=> d!12145 (= c!8065 (and ((_ is Cons!1455) (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))) (= (_1!1040 (h!2037 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))) lt!24946)))))

(assert (=> d!12145 (= (getValueByKey!124 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946) e!40326)))

(assert (= (and d!12145 c!8065) b!61381))

(assert (= (and d!12145 (not c!8065)) b!61382))

(assert (= (and b!61382 c!8066) b!61383))

(assert (= (and b!61382 (not c!8066)) b!61384))

(declare-fun m!54145 () Bool)

(assert (=> b!61383 m!54145))

(assert (=> b!61248 d!12145))

(declare-fun d!12147 () Bool)

(assert (=> d!12147 (isDefined!78 (getValueByKey!124 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(declare-fun lt!25320 () Unit!1622)

(assert (=> d!12147 (= lt!25320 (choose!329 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(declare-fun e!40328 () Bool)

(assert (=> d!12147 e!40328))

(declare-fun res!33805 () Bool)

(assert (=> d!12147 (=> (not res!33805) (not e!40328))))

(assert (=> d!12147 (= res!33805 (isStrictlySorted!280 (toList!708 call!4634)))))

(assert (=> d!12147 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))) lt!25320)))

(declare-fun b!61385 () Bool)

(assert (=> b!61385 (= e!40328 (containsKey!128 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(assert (= (and d!12147 res!33805) b!61385))

(assert (=> d!12147 m!53341))

(assert (=> d!12147 m!53447))

(assert (=> d!12147 m!53447))

(assert (=> d!12147 m!53449))

(assert (=> d!12147 m!53341))

(declare-fun m!54147 () Bool)

(assert (=> d!12147 m!54147))

(declare-fun m!54149 () Bool)

(assert (=> d!12147 m!54149))

(assert (=> b!61385 m!53341))

(assert (=> b!61385 m!53443))

(assert (=> b!60936 d!12147))

(declare-fun d!12149 () Bool)

(assert (=> d!12149 (= (isDefined!78 (getValueByKey!124 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888)))) (not (isEmpty!301 (getValueByKey!124 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))))

(declare-fun bs!2655 () Bool)

(assert (= bs!2655 d!12149))

(assert (=> bs!2655 m!53447))

(declare-fun m!54151 () Bool)

(assert (=> bs!2655 m!54151))

(assert (=> b!60936 d!12149))

(declare-fun b!61388 () Bool)

(declare-fun e!40330 () Option!130)

(assert (=> b!61388 (= e!40330 (getValueByKey!124 (t!4837 (toList!708 call!4634)) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(declare-fun b!61389 () Bool)

(assert (=> b!61389 (= e!40330 None!128)))

(declare-fun b!61387 () Bool)

(declare-fun e!40329 () Option!130)

(assert (=> b!61387 (= e!40329 e!40330)))

(declare-fun c!8068 () Bool)

(assert (=> b!61387 (= c!8068 (and ((_ is Cons!1455) (toList!708 call!4634)) (not (= (_1!1040 (h!2037 (toList!708 call!4634))) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))))

(declare-fun b!61386 () Bool)

(assert (=> b!61386 (= e!40329 (Some!129 (_2!1040 (h!2037 (toList!708 call!4634)))))))

(declare-fun c!8067 () Bool)

(declare-fun d!12151 () Bool)

(assert (=> d!12151 (= c!8067 (and ((_ is Cons!1455) (toList!708 call!4634)) (= (_1!1040 (h!2037 (toList!708 call!4634))) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888)))))))

(assert (=> d!12151 (= (getValueByKey!124 (toList!708 call!4634) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))) e!40329)))

(assert (= (and d!12151 c!8067) b!61386))

(assert (= (and d!12151 (not c!8067)) b!61387))

(assert (= (and b!61387 c!8068) b!61388))

(assert (= (and b!61387 (not c!8068)) b!61389))

(assert (=> b!61388 m!53341))

(declare-fun m!54153 () Bool)

(assert (=> b!61388 m!54153))

(assert (=> b!60936 d!12151))

(declare-fun d!12153 () Bool)

(assert (=> d!12153 (= (get!1092 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61081 d!12153))

(declare-fun b!61390 () Bool)

(declare-fun e!40334 () Bool)

(declare-fun call!4726 () Bool)

(assert (=> b!61390 (= e!40334 call!4726)))

(declare-fun bm!4723 () Bool)

(declare-fun c!8069 () Bool)

(assert (=> bm!4723 (= call!4726 (arrayNoDuplicates!0 (_keys!3695 (_2!1041 lt!24880)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8069 (Cons!1456 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000) Nil!1457) Nil!1457)))))

(declare-fun b!61391 () Bool)

(declare-fun e!40331 () Bool)

(assert (=> b!61391 (= e!40331 e!40334)))

(assert (=> b!61391 (= c!8069 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000)))))

(declare-fun b!61393 () Bool)

(declare-fun e!40333 () Bool)

(assert (=> b!61393 (= e!40333 (contains!698 Nil!1457 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000)))))

(declare-fun b!61394 () Bool)

(declare-fun e!40332 () Bool)

(assert (=> b!61394 (= e!40332 e!40331)))

(declare-fun res!33807 () Bool)

(assert (=> b!61394 (=> (not res!33807) (not e!40331))))

(assert (=> b!61394 (= res!33807 (not e!40333))))

(declare-fun res!33806 () Bool)

(assert (=> b!61394 (=> (not res!33806) (not e!40333))))

(assert (=> b!61394 (= res!33806 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000)))))

(declare-fun b!61392 () Bool)

(assert (=> b!61392 (= e!40334 call!4726)))

(declare-fun d!12155 () Bool)

(declare-fun res!33808 () Bool)

(assert (=> d!12155 (=> res!33808 e!40332)))

(assert (=> d!12155 (= res!33808 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))))))

(assert (=> d!12155 (= (arrayNoDuplicates!0 (_keys!3695 (_2!1041 lt!24880)) #b00000000000000000000000000000000 Nil!1457) e!40332)))

(assert (= (and d!12155 (not res!33808)) b!61394))

(assert (= (and b!61394 res!33806) b!61393))

(assert (= (and b!61394 res!33807) b!61391))

(assert (= (and b!61391 c!8069) b!61390))

(assert (= (and b!61391 (not c!8069)) b!61392))

(assert (= (or b!61390 b!61392) bm!4723))

(declare-fun m!54155 () Bool)

(assert (=> bm!4723 m!54155))

(declare-fun m!54157 () Bool)

(assert (=> bm!4723 m!54157))

(assert (=> b!61391 m!54155))

(assert (=> b!61391 m!54155))

(declare-fun m!54159 () Bool)

(assert (=> b!61391 m!54159))

(assert (=> b!61393 m!54155))

(assert (=> b!61393 m!54155))

(declare-fun m!54161 () Bool)

(assert (=> b!61393 m!54161))

(assert (=> b!61394 m!54155))

(assert (=> b!61394 m!54155))

(assert (=> b!61394 m!54159))

(assert (=> b!61007 d!12155))

(declare-fun d!12157 () Bool)

(assert (=> d!12157 (= (isDefined!78 (getValueByKey!124 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))) (not (isEmpty!301 (getValueByKey!124 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun bs!2656 () Bool)

(assert (= bs!2656 d!12157))

(assert (=> bs!2656 m!53599))

(declare-fun m!54163 () Bool)

(assert (=> bs!2656 m!54163))

(assert (=> b!61010 d!12157))

(declare-fun e!40336 () Option!130)

(declare-fun b!61397 () Bool)

(assert (=> b!61397 (= e!40336 (getValueByKey!124 (t!4837 (toList!708 call!4637)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61398 () Bool)

(assert (=> b!61398 (= e!40336 None!128)))

(declare-fun b!61396 () Bool)

(declare-fun e!40335 () Option!130)

(assert (=> b!61396 (= e!40335 e!40336)))

(declare-fun c!8071 () Bool)

(assert (=> b!61396 (= c!8071 (and ((_ is Cons!1455) (toList!708 call!4637)) (not (= (_1!1040 (h!2037 (toList!708 call!4637))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun b!61395 () Bool)

(assert (=> b!61395 (= e!40335 (Some!129 (_2!1040 (h!2037 (toList!708 call!4637)))))))

(declare-fun c!8070 () Bool)

(declare-fun d!12159 () Bool)

(assert (=> d!12159 (= c!8070 (and ((_ is Cons!1455) (toList!708 call!4637)) (= (_1!1040 (h!2037 (toList!708 call!4637))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12159 (= (getValueByKey!124 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) e!40335)))

(assert (= (and d!12159 c!8070) b!61395))

(assert (= (and d!12159 (not c!8070)) b!61396))

(assert (= (and b!61396 c!8071) b!61397))

(assert (= (and b!61396 (not c!8071)) b!61398))

(assert (=> b!61397 m!53207))

(declare-fun m!54165 () Bool)

(assert (=> b!61397 m!54165))

(assert (=> b!61010 d!12159))

(declare-fun d!12161 () Bool)

(assert (=> d!12161 (= (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61261 d!12161))

(declare-fun d!12163 () Bool)

(declare-fun e!40338 () Bool)

(assert (=> d!12163 e!40338))

(declare-fun res!33809 () Bool)

(assert (=> d!12163 (=> res!33809 e!40338)))

(declare-fun lt!25321 () Bool)

(assert (=> d!12163 (= res!33809 (not lt!25321))))

(declare-fun lt!25323 () Bool)

(assert (=> d!12163 (= lt!25321 lt!25323)))

(declare-fun lt!25322 () Unit!1622)

(declare-fun e!40337 () Unit!1622)

(assert (=> d!12163 (= lt!25322 e!40337)))

(declare-fun c!8072 () Bool)

(assert (=> d!12163 (= c!8072 lt!25323)))

(assert (=> d!12163 (= lt!25323 (containsKey!128 (toList!708 (map!1115 (_2!1041 lt!25124))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12163 (= (contains!697 (map!1115 (_2!1041 lt!25124)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) lt!25321)))

(declare-fun b!61399 () Bool)

(declare-fun lt!25324 () Unit!1622)

(assert (=> b!61399 (= e!40337 lt!25324)))

(assert (=> b!61399 (= lt!25324 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 (map!1115 (_2!1041 lt!25124))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!61399 (isDefined!78 (getValueByKey!124 (toList!708 (map!1115 (_2!1041 lt!25124))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61400 () Bool)

(declare-fun Unit!1651 () Unit!1622)

(assert (=> b!61400 (= e!40337 Unit!1651)))

(declare-fun b!61401 () Bool)

(assert (=> b!61401 (= e!40338 (isDefined!78 (getValueByKey!124 (toList!708 (map!1115 (_2!1041 lt!25124))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (= (and d!12163 c!8072) b!61399))

(assert (= (and d!12163 (not c!8072)) b!61400))

(assert (= (and d!12163 (not res!33809)) b!61401))

(assert (=> d!12163 m!53207))

(declare-fun m!54167 () Bool)

(assert (=> d!12163 m!54167))

(assert (=> b!61399 m!53207))

(declare-fun m!54169 () Bool)

(assert (=> b!61399 m!54169))

(assert (=> b!61399 m!53207))

(declare-fun m!54171 () Bool)

(assert (=> b!61399 m!54171))

(assert (=> b!61399 m!54171))

(declare-fun m!54173 () Bool)

(assert (=> b!61399 m!54173))

(assert (=> b!61401 m!53207))

(assert (=> b!61401 m!54171))

(assert (=> b!61401 m!54171))

(assert (=> b!61401 m!54173))

(assert (=> b!61067 d!12163))

(declare-fun d!12165 () Bool)

(assert (=> d!12165 (= (map!1115 (_2!1041 lt!25124)) (getCurrentListMap!405 (_keys!3695 (_2!1041 lt!25124)) (_values!2050 (_2!1041 lt!25124)) (mask!5963 (_2!1041 lt!25124)) (extraKeys!1950 (_2!1041 lt!25124)) (zeroValue!1981 (_2!1041 lt!25124)) (minValue!1981 (_2!1041 lt!25124)) #b00000000000000000000000000000000 (defaultEntry!2067 (_2!1041 lt!25124))))))

(declare-fun bs!2657 () Bool)

(assert (= bs!2657 d!12165))

(declare-fun m!54175 () Bool)

(assert (=> bs!2657 m!54175))

(assert (=> b!61067 d!12165))

(declare-fun e!40340 () Option!130)

(declare-fun b!61404 () Bool)

(assert (=> b!61404 (= e!40340 (getValueByKey!124 (t!4837 (t!4837 (toList!708 lt!24780))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61405 () Bool)

(assert (=> b!61405 (= e!40340 None!128)))

(declare-fun b!61403 () Bool)

(declare-fun e!40339 () Option!130)

(assert (=> b!61403 (= e!40339 e!40340)))

(declare-fun c!8074 () Bool)

(assert (=> b!61403 (= c!8074 (and ((_ is Cons!1455) (t!4837 (toList!708 lt!24780))) (not (= (_1!1040 (h!2037 (t!4837 (toList!708 lt!24780)))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun b!61402 () Bool)

(assert (=> b!61402 (= e!40339 (Some!129 (_2!1040 (h!2037 (t!4837 (toList!708 lt!24780))))))))

(declare-fun d!12167 () Bool)

(declare-fun c!8073 () Bool)

(assert (=> d!12167 (= c!8073 (and ((_ is Cons!1455) (t!4837 (toList!708 lt!24780))) (= (_1!1040 (h!2037 (t!4837 (toList!708 lt!24780)))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12167 (= (getValueByKey!124 (t!4837 (toList!708 lt!24780)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) e!40339)))

(assert (= (and d!12167 c!8073) b!61402))

(assert (= (and d!12167 (not c!8073)) b!61403))

(assert (= (and b!61403 c!8074) b!61404))

(assert (= (and b!61403 (not c!8074)) b!61405))

(assert (=> b!61404 m!53207))

(declare-fun m!54177 () Bool)

(assert (=> b!61404 m!54177))

(assert (=> b!61169 d!12167))

(declare-fun d!12169 () Bool)

(declare-fun lt!25327 () Bool)

(declare-fun content!65 (List!1459) (InoxSet tuple2!2060))

(assert (=> d!12169 (= lt!25327 (select (content!65 (toList!708 lt!25233)) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!40346 () Bool)

(assert (=> d!12169 (= lt!25327 e!40346)))

(declare-fun res!33815 () Bool)

(assert (=> d!12169 (=> (not res!33815) (not e!40346))))

(assert (=> d!12169 (= res!33815 ((_ is Cons!1455) (toList!708 lt!25233)))))

(assert (=> d!12169 (= (contains!699 (toList!708 lt!25233) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25327)))

(declare-fun b!61410 () Bool)

(declare-fun e!40345 () Bool)

(assert (=> b!61410 (= e!40346 e!40345)))

(declare-fun res!33814 () Bool)

(assert (=> b!61410 (=> res!33814 e!40345)))

(assert (=> b!61410 (= res!33814 (= (h!2037 (toList!708 lt!25233)) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61411 () Bool)

(assert (=> b!61411 (= e!40345 (contains!699 (t!4837 (toList!708 lt!25233)) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12169 res!33815) b!61410))

(assert (= (and b!61410 (not res!33814)) b!61411))

(declare-fun m!54179 () Bool)

(assert (=> d!12169 m!54179))

(declare-fun m!54181 () Bool)

(assert (=> d!12169 m!54181))

(declare-fun m!54183 () Bool)

(assert (=> b!61411 m!54183))

(assert (=> b!61236 d!12169))

(declare-fun b!61412 () Bool)

(declare-fun e!40347 () (_ BitVec 32))

(declare-fun e!40348 () (_ BitVec 32))

(assert (=> b!61412 (= e!40347 e!40348)))

(declare-fun c!8076 () Bool)

(assert (=> b!61412 (= c!8076 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!12171 () Bool)

(declare-fun lt!25328 () (_ BitVec 32))

(assert (=> d!12171 (and (bvsge lt!25328 #b00000000000000000000000000000000) (bvsle lt!25328 (bvsub (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!12171 (= lt!25328 e!40347)))

(declare-fun c!8075 () Bool)

(assert (=> d!12171 (= c!8075 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> d!12171 (and (bvsle #b00000000000000000000000000000000 (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> d!12171 (= (arrayCountValidKeys!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000 (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))) lt!25328)))

(declare-fun b!61413 () Bool)

(assert (=> b!61413 (= e!40347 #b00000000000000000000000000000000)))

(declare-fun b!61414 () Bool)

(declare-fun call!4727 () (_ BitVec 32))

(assert (=> b!61414 (= e!40348 call!4727)))

(declare-fun bm!4724 () Bool)

(assert (=> bm!4724 (= call!4727 (arrayCountValidKeys!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!61415 () Bool)

(assert (=> b!61415 (= e!40348 (bvadd #b00000000000000000000000000000001 call!4727))))

(assert (= (and d!12171 c!8075) b!61413))

(assert (= (and d!12171 (not c!8075)) b!61412))

(assert (= (and b!61412 c!8076) b!61415))

(assert (= (and b!61412 (not c!8076)) b!61414))

(assert (= (or b!61415 b!61414) bm!4724))

(declare-fun m!54185 () Bool)

(assert (=> b!61412 m!54185))

(assert (=> b!61412 m!54185))

(declare-fun m!54187 () Bool)

(assert (=> b!61412 m!54187))

(declare-fun m!54189 () Bool)

(assert (=> bm!4724 m!54189))

(assert (=> b!61106 d!12171))

(assert (=> b!60970 d!12161))

(declare-fun d!12173 () Bool)

(declare-fun e!40350 () Bool)

(assert (=> d!12173 e!40350))

(declare-fun res!33816 () Bool)

(assert (=> d!12173 (=> res!33816 e!40350)))

(declare-fun lt!25329 () Bool)

(assert (=> d!12173 (= res!33816 (not lt!25329))))

(declare-fun lt!25331 () Bool)

(assert (=> d!12173 (= lt!25329 lt!25331)))

(declare-fun lt!25330 () Unit!1622)

(declare-fun e!40349 () Unit!1622)

(assert (=> d!12173 (= lt!25330 e!40349)))

(declare-fun c!8077 () Bool)

(assert (=> d!12173 (= c!8077 lt!25331)))

(assert (=> d!12173 (= lt!25331 (containsKey!128 (toList!708 lt!25258) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12173 (= (contains!697 lt!25258 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25329)))

(declare-fun b!61416 () Bool)

(declare-fun lt!25332 () Unit!1622)

(assert (=> b!61416 (= e!40349 lt!25332)))

(assert (=> b!61416 (= lt!25332 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25258) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> b!61416 (isDefined!78 (getValueByKey!124 (toList!708 lt!25258) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61417 () Bool)

(declare-fun Unit!1652 () Unit!1622)

(assert (=> b!61417 (= e!40349 Unit!1652)))

(declare-fun b!61418 () Bool)

(assert (=> b!61418 (= e!40350 (isDefined!78 (getValueByKey!124 (toList!708 lt!25258) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (= (and d!12173 c!8077) b!61416))

(assert (= (and d!12173 (not c!8077)) b!61417))

(assert (= (and d!12173 (not res!33816)) b!61418))

(declare-fun m!54191 () Bool)

(assert (=> d!12173 m!54191))

(declare-fun m!54193 () Bool)

(assert (=> b!61416 m!54193))

(assert (=> b!61416 m!53943))

(assert (=> b!61416 m!53943))

(declare-fun m!54195 () Bool)

(assert (=> b!61416 m!54195))

(assert (=> b!61418 m!53943))

(assert (=> b!61418 m!53943))

(assert (=> b!61418 m!54195))

(assert (=> d!12065 d!12173))

(declare-fun e!40352 () Option!130)

(declare-fun b!61421 () Bool)

(assert (=> b!61421 (= e!40352 (getValueByKey!124 (t!4837 lt!25260) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61422 () Bool)

(assert (=> b!61422 (= e!40352 None!128)))

(declare-fun b!61420 () Bool)

(declare-fun e!40351 () Option!130)

(assert (=> b!61420 (= e!40351 e!40352)))

(declare-fun c!8079 () Bool)

(assert (=> b!61420 (= c!8079 (and ((_ is Cons!1455) lt!25260) (not (= (_1!1040 (h!2037 lt!25260)) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61419 () Bool)

(assert (=> b!61419 (= e!40351 (Some!129 (_2!1040 (h!2037 lt!25260))))))

(declare-fun c!8078 () Bool)

(declare-fun d!12175 () Bool)

(assert (=> d!12175 (= c!8078 (and ((_ is Cons!1455) lt!25260) (= (_1!1040 (h!2037 lt!25260)) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12175 (= (getValueByKey!124 lt!25260 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) e!40351)))

(assert (= (and d!12175 c!8078) b!61419))

(assert (= (and d!12175 (not c!8078)) b!61420))

(assert (= (and b!61420 c!8079) b!61421))

(assert (= (and b!61420 (not c!8079)) b!61422))

(declare-fun m!54197 () Bool)

(assert (=> b!61421 m!54197))

(assert (=> d!12065 d!12175))

(declare-fun d!12177 () Bool)

(assert (=> d!12177 (= (getValueByKey!124 lt!25260 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun lt!25333 () Unit!1622)

(assert (=> d!12177 (= lt!25333 (choose!333 lt!25260 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun e!40353 () Bool)

(assert (=> d!12177 e!40353))

(declare-fun res!33817 () Bool)

(assert (=> d!12177 (=> (not res!33817) (not e!40353))))

(assert (=> d!12177 (= res!33817 (isStrictlySorted!280 lt!25260))))

(assert (=> d!12177 (= (lemmaContainsTupThenGetReturnValue!43 lt!25260 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25333)))

(declare-fun b!61423 () Bool)

(declare-fun res!33818 () Bool)

(assert (=> b!61423 (=> (not res!33818) (not e!40353))))

(assert (=> b!61423 (= res!33818 (containsKey!128 lt!25260 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61424 () Bool)

(assert (=> b!61424 (= e!40353 (contains!699 lt!25260 (tuple2!2061 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (= (and d!12177 res!33817) b!61423))

(assert (= (and b!61423 res!33818) b!61424))

(assert (=> d!12177 m!53937))

(declare-fun m!54199 () Bool)

(assert (=> d!12177 m!54199))

(declare-fun m!54201 () Bool)

(assert (=> d!12177 m!54201))

(declare-fun m!54203 () Bool)

(assert (=> b!61423 m!54203))

(declare-fun m!54205 () Bool)

(assert (=> b!61424 m!54205))

(assert (=> d!12065 d!12177))

(declare-fun bm!4725 () Bool)

(declare-fun call!4728 () List!1459)

(declare-fun call!4729 () List!1459)

(assert (=> bm!4725 (= call!4728 call!4729)))

(declare-fun b!61425 () Bool)

(declare-fun e!40354 () List!1459)

(declare-fun call!4730 () List!1459)

(assert (=> b!61425 (= e!40354 call!4730)))

(declare-fun d!12179 () Bool)

(declare-fun e!40358 () Bool)

(assert (=> d!12179 e!40358))

(declare-fun res!33820 () Bool)

(assert (=> d!12179 (=> (not res!33820) (not e!40358))))

(declare-fun lt!25334 () List!1459)

(assert (=> d!12179 (= res!33820 (isStrictlySorted!280 lt!25334))))

(declare-fun e!40355 () List!1459)

(assert (=> d!12179 (= lt!25334 e!40355)))

(declare-fun c!8081 () Bool)

(assert (=> d!12179 (= c!8081 (and ((_ is Cons!1455) (toList!708 lt!24959)) (bvslt (_1!1040 (h!2037 (toList!708 lt!24959))) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12179 (isStrictlySorted!280 (toList!708 lt!24959))))

(assert (=> d!12179 (= (insertStrictlySorted!45 (toList!708 lt!24959) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25334)))

(declare-fun b!61426 () Bool)

(declare-fun e!40357 () List!1459)

(assert (=> b!61426 (= e!40355 e!40357)))

(declare-fun c!8082 () Bool)

(assert (=> b!61426 (= c!8082 (and ((_ is Cons!1455) (toList!708 lt!24959)) (= (_1!1040 (h!2037 (toList!708 lt!24959))) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun c!8083 () Bool)

(declare-fun b!61427 () Bool)

(assert (=> b!61427 (= c!8083 (and ((_ is Cons!1455) (toList!708 lt!24959)) (bvsgt (_1!1040 (h!2037 (toList!708 lt!24959))) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> b!61427 (= e!40357 e!40354)))

(declare-fun b!61428 () Bool)

(assert (=> b!61428 (= e!40358 (contains!699 lt!25334 (tuple2!2061 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun e!40356 () List!1459)

(declare-fun b!61429 () Bool)

(assert (=> b!61429 (= e!40356 (ite c!8082 (t!4837 (toList!708 lt!24959)) (ite c!8083 (Cons!1455 (h!2037 (toList!708 lt!24959)) (t!4837 (toList!708 lt!24959))) Nil!1456)))))

(declare-fun bm!4726 () Bool)

(assert (=> bm!4726 (= call!4729 ($colon$colon!60 e!40356 (ite c!8081 (h!2037 (toList!708 lt!24959)) (tuple2!2061 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun c!8080 () Bool)

(assert (=> bm!4726 (= c!8080 c!8081)))

(declare-fun b!61430 () Bool)

(assert (=> b!61430 (= e!40357 call!4728)))

(declare-fun b!61431 () Bool)

(assert (=> b!61431 (= e!40355 call!4729)))

(declare-fun bm!4727 () Bool)

(assert (=> bm!4727 (= call!4730 call!4728)))

(declare-fun b!61432 () Bool)

(assert (=> b!61432 (= e!40354 call!4730)))

(declare-fun b!61433 () Bool)

(declare-fun res!33819 () Bool)

(assert (=> b!61433 (=> (not res!33819) (not e!40358))))

(assert (=> b!61433 (= res!33819 (containsKey!128 lt!25334 (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61434 () Bool)

(assert (=> b!61434 (= e!40356 (insertStrictlySorted!45 (t!4837 (toList!708 lt!24959)) (_1!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (= (and d!12179 c!8081) b!61431))

(assert (= (and d!12179 (not c!8081)) b!61426))

(assert (= (and b!61426 c!8082) b!61430))

(assert (= (and b!61426 (not c!8082)) b!61427))

(assert (= (and b!61427 c!8083) b!61432))

(assert (= (and b!61427 (not c!8083)) b!61425))

(assert (= (or b!61432 b!61425) bm!4727))

(assert (= (or b!61430 bm!4727) bm!4725))

(assert (= (or b!61431 bm!4725) bm!4726))

(assert (= (and bm!4726 c!8080) b!61434))

(assert (= (and bm!4726 (not c!8080)) b!61429))

(assert (= (and d!12179 res!33820) b!61433))

(assert (= (and b!61433 res!33819) b!61428))

(declare-fun m!54207 () Bool)

(assert (=> b!61434 m!54207))

(declare-fun m!54209 () Bool)

(assert (=> bm!4726 m!54209))

(declare-fun m!54211 () Bool)

(assert (=> d!12179 m!54211))

(declare-fun m!54213 () Bool)

(assert (=> d!12179 m!54213))

(declare-fun m!54215 () Bool)

(assert (=> b!61428 m!54215))

(declare-fun m!54217 () Bool)

(assert (=> b!61433 m!54217))

(assert (=> d!12065 d!12179))

(declare-fun d!12181 () Bool)

(declare-fun e!40360 () Bool)

(assert (=> d!12181 e!40360))

(declare-fun res!33821 () Bool)

(assert (=> d!12181 (=> res!33821 e!40360)))

(declare-fun lt!25335 () Bool)

(assert (=> d!12181 (= res!33821 (not lt!25335))))

(declare-fun lt!25337 () Bool)

(assert (=> d!12181 (= lt!25335 lt!25337)))

(declare-fun lt!25336 () Unit!1622)

(declare-fun e!40359 () Unit!1622)

(assert (=> d!12181 (= lt!25336 e!40359)))

(declare-fun c!8084 () Bool)

(assert (=> d!12181 (= c!8084 lt!25337)))

(assert (=> d!12181 (= lt!25337 (containsKey!128 (toList!708 lt!25017) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12181 (= (contains!697 lt!25017 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) lt!25335)))

(declare-fun b!61435 () Bool)

(declare-fun lt!25338 () Unit!1622)

(assert (=> b!61435 (= e!40359 lt!25338)))

(assert (=> b!61435 (= lt!25338 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25017) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61435 (isDefined!78 (getValueByKey!124 (toList!708 lt!25017) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61436 () Bool)

(declare-fun Unit!1653 () Unit!1622)

(assert (=> b!61436 (= e!40359 Unit!1653)))

(declare-fun b!61437 () Bool)

(assert (=> b!61437 (= e!40360 (isDefined!78 (getValueByKey!124 (toList!708 lt!25017) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12181 c!8084) b!61435))

(assert (= (and d!12181 (not c!8084)) b!61436))

(assert (= (and d!12181 (not res!33821)) b!61437))

(assert (=> d!12181 m!53471))

(declare-fun m!54219 () Bool)

(assert (=> d!12181 m!54219))

(assert (=> b!61435 m!53471))

(declare-fun m!54221 () Bool)

(assert (=> b!61435 m!54221))

(assert (=> b!61435 m!53471))

(declare-fun m!54223 () Bool)

(assert (=> b!61435 m!54223))

(assert (=> b!61435 m!54223))

(declare-fun m!54225 () Bool)

(assert (=> b!61435 m!54225))

(assert (=> b!61437 m!53471))

(assert (=> b!61437 m!54223))

(assert (=> b!61437 m!54223))

(assert (=> b!61437 m!54225))

(assert (=> b!60990 d!12181))

(declare-fun d!12183 () Bool)

(declare-fun e!40362 () Bool)

(assert (=> d!12183 e!40362))

(declare-fun res!33822 () Bool)

(assert (=> d!12183 (=> res!33822 e!40362)))

(declare-fun lt!25339 () Bool)

(assert (=> d!12183 (= res!33822 (not lt!25339))))

(declare-fun lt!25341 () Bool)

(assert (=> d!12183 (= lt!25339 lt!25341)))

(declare-fun lt!25340 () Unit!1622)

(declare-fun e!40361 () Unit!1622)

(assert (=> d!12183 (= lt!25340 e!40361)))

(declare-fun c!8085 () Bool)

(assert (=> d!12183 (= c!8085 lt!25341)))

(assert (=> d!12183 (= lt!25341 (containsKey!128 (toList!708 lt!25229) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12183 (= (contains!697 lt!25229 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25339)))

(declare-fun b!61438 () Bool)

(declare-fun lt!25342 () Unit!1622)

(assert (=> b!61438 (= e!40361 lt!25342)))

(assert (=> b!61438 (= lt!25342 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25229) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61438 (isDefined!78 (getValueByKey!124 (toList!708 lt!25229) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61439 () Bool)

(declare-fun Unit!1654 () Unit!1622)

(assert (=> b!61439 (= e!40361 Unit!1654)))

(declare-fun b!61440 () Bool)

(assert (=> b!61440 (= e!40362 (isDefined!78 (getValueByKey!124 (toList!708 lt!25229) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12183 c!8085) b!61438))

(assert (= (and d!12183 (not c!8085)) b!61439))

(assert (= (and d!12183 (not res!33822)) b!61440))

(declare-fun m!54227 () Bool)

(assert (=> d!12183 m!54227))

(declare-fun m!54229 () Bool)

(assert (=> b!61438 m!54229))

(declare-fun m!54231 () Bool)

(assert (=> b!61438 m!54231))

(assert (=> b!61438 m!54231))

(declare-fun m!54233 () Bool)

(assert (=> b!61438 m!54233))

(assert (=> b!61440 m!54231))

(assert (=> b!61440 m!54231))

(assert (=> b!61440 m!54233))

(assert (=> b!61228 d!12183))

(assert (=> b!61181 d!12099))

(declare-fun d!12185 () Bool)

(assert (=> d!12185 (contains!697 (+!82 lt!24998 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16))) lt!24990)))

(declare-fun lt!25343 () Unit!1622)

(assert (=> d!12185 (= lt!25343 (choose!331 lt!24998 lt!24989 (zeroValue!1981 newMap!16) lt!24990))))

(assert (=> d!12185 (contains!697 lt!24998 lt!24990)))

(assert (=> d!12185 (= (addStillContains!43 lt!24998 lt!24989 (zeroValue!1981 newMap!16) lt!24990) lt!25343)))

(declare-fun bs!2658 () Bool)

(assert (= bs!2658 d!12185))

(assert (=> bs!2658 m!53497))

(assert (=> bs!2658 m!53497))

(assert (=> bs!2658 m!53499))

(declare-fun m!54235 () Bool)

(assert (=> bs!2658 m!54235))

(declare-fun m!54237 () Bool)

(assert (=> bs!2658 m!54237))

(assert (=> b!60963 d!12185))

(declare-fun d!12187 () Bool)

(assert (=> d!12187 (= (apply!67 lt!24988 lt!25000) (get!1093 (getValueByKey!124 (toList!708 lt!24988) lt!25000)))))

(declare-fun bs!2659 () Bool)

(assert (= bs!2659 d!12187))

(declare-fun m!54239 () Bool)

(assert (=> bs!2659 m!54239))

(assert (=> bs!2659 m!54239))

(declare-fun m!54241 () Bool)

(assert (=> bs!2659 m!54241))

(assert (=> b!60963 d!12187))

(declare-fun d!12189 () Bool)

(assert (=> d!12189 (= (apply!67 (+!82 lt!25009 (tuple2!2061 lt!24996 (minValue!1981 newMap!16))) lt!25002) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!25009 (tuple2!2061 lt!24996 (minValue!1981 newMap!16)))) lt!25002)))))

(declare-fun bs!2660 () Bool)

(assert (= bs!2660 d!12189))

(declare-fun m!54243 () Bool)

(assert (=> bs!2660 m!54243))

(assert (=> bs!2660 m!54243))

(declare-fun m!54245 () Bool)

(assert (=> bs!2660 m!54245))

(assert (=> b!60963 d!12189))

(declare-fun d!12191 () Bool)

(assert (=> d!12191 (= (apply!67 (+!82 lt!25009 (tuple2!2061 lt!24996 (minValue!1981 newMap!16))) lt!25002) (apply!67 lt!25009 lt!25002))))

(declare-fun lt!25344 () Unit!1622)

(assert (=> d!12191 (= lt!25344 (choose!330 lt!25009 lt!24996 (minValue!1981 newMap!16) lt!25002))))

(declare-fun e!40363 () Bool)

(assert (=> d!12191 e!40363))

(declare-fun res!33823 () Bool)

(assert (=> d!12191 (=> (not res!33823) (not e!40363))))

(assert (=> d!12191 (= res!33823 (contains!697 lt!25009 lt!25002))))

(assert (=> d!12191 (= (addApplyDifferent!43 lt!25009 lt!24996 (minValue!1981 newMap!16) lt!25002) lt!25344)))

(declare-fun b!61441 () Bool)

(assert (=> b!61441 (= e!40363 (not (= lt!25002 lt!24996)))))

(assert (= (and d!12191 res!33823) b!61441))

(assert (=> d!12191 m!53515))

(assert (=> d!12191 m!53517))

(assert (=> d!12191 m!53519))

(assert (=> d!12191 m!53517))

(declare-fun m!54247 () Bool)

(assert (=> d!12191 m!54247))

(declare-fun m!54249 () Bool)

(assert (=> d!12191 m!54249))

(assert (=> b!60963 d!12191))

(declare-fun d!12193 () Bool)

(declare-fun e!40364 () Bool)

(assert (=> d!12193 e!40364))

(declare-fun res!33824 () Bool)

(assert (=> d!12193 (=> (not res!33824) (not e!40364))))

(declare-fun lt!25345 () ListLongMap!1385)

(assert (=> d!12193 (= res!33824 (contains!697 lt!25345 (_1!1040 (tuple2!2061 lt!25008 (minValue!1981 newMap!16)))))))

(declare-fun lt!25347 () List!1459)

(assert (=> d!12193 (= lt!25345 (ListLongMap!1386 lt!25347))))

(declare-fun lt!25348 () Unit!1622)

(declare-fun lt!25346 () Unit!1622)

(assert (=> d!12193 (= lt!25348 lt!25346)))

(assert (=> d!12193 (= (getValueByKey!124 lt!25347 (_1!1040 (tuple2!2061 lt!25008 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25008 (minValue!1981 newMap!16)))))))

(assert (=> d!12193 (= lt!25346 (lemmaContainsTupThenGetReturnValue!43 lt!25347 (_1!1040 (tuple2!2061 lt!25008 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25008 (minValue!1981 newMap!16)))))))

(assert (=> d!12193 (= lt!25347 (insertStrictlySorted!45 (toList!708 lt!24988) (_1!1040 (tuple2!2061 lt!25008 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25008 (minValue!1981 newMap!16)))))))

(assert (=> d!12193 (= (+!82 lt!24988 (tuple2!2061 lt!25008 (minValue!1981 newMap!16))) lt!25345)))

(declare-fun b!61442 () Bool)

(declare-fun res!33825 () Bool)

(assert (=> b!61442 (=> (not res!33825) (not e!40364))))

(assert (=> b!61442 (= res!33825 (= (getValueByKey!124 (toList!708 lt!25345) (_1!1040 (tuple2!2061 lt!25008 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25008 (minValue!1981 newMap!16))))))))

(declare-fun b!61443 () Bool)

(assert (=> b!61443 (= e!40364 (contains!699 (toList!708 lt!25345) (tuple2!2061 lt!25008 (minValue!1981 newMap!16))))))

(assert (= (and d!12193 res!33824) b!61442))

(assert (= (and b!61442 res!33825) b!61443))

(declare-fun m!54251 () Bool)

(assert (=> d!12193 m!54251))

(declare-fun m!54253 () Bool)

(assert (=> d!12193 m!54253))

(declare-fun m!54255 () Bool)

(assert (=> d!12193 m!54255))

(declare-fun m!54257 () Bool)

(assert (=> d!12193 m!54257))

(declare-fun m!54259 () Bool)

(assert (=> b!61442 m!54259))

(declare-fun m!54261 () Bool)

(assert (=> b!61443 m!54261))

(assert (=> b!60963 d!12193))

(declare-fun d!12195 () Bool)

(assert (=> d!12195 (= (apply!67 (+!82 lt!24988 (tuple2!2061 lt!25008 (minValue!1981 newMap!16))) lt!25000) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!24988 (tuple2!2061 lt!25008 (minValue!1981 newMap!16)))) lt!25000)))))

(declare-fun bs!2661 () Bool)

(assert (= bs!2661 d!12195))

(declare-fun m!54263 () Bool)

(assert (=> bs!2661 m!54263))

(assert (=> bs!2661 m!54263))

(declare-fun m!54265 () Bool)

(assert (=> bs!2661 m!54265))

(assert (=> b!60963 d!12195))

(declare-fun b!61444 () Bool)

(declare-fun e!40368 () Bool)

(declare-fun e!40365 () Bool)

(assert (=> b!61444 (= e!40368 e!40365)))

(assert (=> b!61444 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun res!33826 () Bool)

(declare-fun lt!25352 () ListLongMap!1385)

(assert (=> b!61444 (= res!33826 (contains!697 lt!25352 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61444 (=> (not res!33826) (not e!40365))))

(declare-fun b!61445 () Bool)

(declare-fun e!40370 () Bool)

(assert (=> b!61445 (= e!40370 e!40368)))

(declare-fun c!8087 () Bool)

(declare-fun e!40369 () Bool)

(assert (=> b!61445 (= c!8087 e!40369)))

(declare-fun res!33828 () Bool)

(assert (=> b!61445 (=> (not res!33828) (not e!40369))))

(assert (=> b!61445 (= res!33828 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61446 () Bool)

(declare-fun e!40367 () ListLongMap!1385)

(declare-fun call!4731 () ListLongMap!1385)

(assert (=> b!61446 (= e!40367 call!4731)))

(declare-fun b!61447 () Bool)

(declare-fun e!40371 () Bool)

(assert (=> b!61447 (= e!40371 (= lt!25352 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite c!7914 (_values!2050 newMap!16) lt!24892) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16))))))

(declare-fun b!61448 () Bool)

(assert (=> b!61448 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(assert (=> b!61448 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (ite c!7914 (_values!2050 newMap!16) lt!24892))))))

(assert (=> b!61448 (= e!40365 (= (apply!67 lt!25352 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 (ite c!7914 (_values!2050 newMap!16) lt!24892)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61449 () Bool)

(declare-fun res!33829 () Bool)

(assert (=> b!61449 (=> (not res!33829) (not e!40370))))

(assert (=> b!61449 (= res!33829 (not (contains!697 lt!25352 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61450 () Bool)

(assert (=> b!61450 (= e!40368 e!40371)))

(declare-fun c!8089 () Bool)

(assert (=> b!61450 (= c!8089 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun bm!4728 () Bool)

(assert (=> bm!4728 (= call!4731 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite c!7914 (_values!2050 newMap!16) lt!24892) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16)))))

(declare-fun d!12197 () Bool)

(assert (=> d!12197 e!40370))

(declare-fun res!33827 () Bool)

(assert (=> d!12197 (=> (not res!33827) (not e!40370))))

(assert (=> d!12197 (= res!33827 (not (contains!697 lt!25352 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!40366 () ListLongMap!1385)

(assert (=> d!12197 (= lt!25352 e!40366)))

(declare-fun c!8086 () Bool)

(assert (=> d!12197 (= c!8086 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!12197 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12197 (= (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite c!7914 (_values!2050 newMap!16) lt!24892) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25352)))

(declare-fun b!61451 () Bool)

(assert (=> b!61451 (= e!40371 (isEmpty!302 lt!25352))))

(declare-fun b!61452 () Bool)

(assert (=> b!61452 (= e!40369 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61452 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!61453 () Bool)

(assert (=> b!61453 (= e!40366 e!40367)))

(declare-fun c!8088 () Bool)

(assert (=> b!61453 (= c!8088 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61454 () Bool)

(declare-fun lt!25355 () Unit!1622)

(declare-fun lt!25354 () Unit!1622)

(assert (=> b!61454 (= lt!25355 lt!25354)))

(declare-fun lt!25350 () (_ BitVec 64))

(declare-fun lt!25353 () (_ BitVec 64))

(declare-fun lt!25351 () V!2859)

(declare-fun lt!25349 () ListLongMap!1385)

(assert (=> b!61454 (not (contains!697 (+!82 lt!25349 (tuple2!2061 lt!25353 lt!25351)) lt!25350))))

(assert (=> b!61454 (= lt!25354 (addStillNotContains!18 lt!25349 lt!25353 lt!25351 lt!25350))))

(assert (=> b!61454 (= lt!25350 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61454 (= lt!25351 (get!1090 (select (arr!1793 (ite c!7914 (_values!2050 newMap!16) lt!24892)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61454 (= lt!25353 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61454 (= lt!25349 call!4731)))

(assert (=> b!61454 (= e!40367 (+!82 call!4731 (tuple2!2061 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (get!1090 (select (arr!1793 (ite c!7914 (_values!2050 newMap!16) lt!24892)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61455 () Bool)

(assert (=> b!61455 (= e!40366 (ListLongMap!1386 Nil!1456))))

(assert (= (and d!12197 c!8086) b!61455))

(assert (= (and d!12197 (not c!8086)) b!61453))

(assert (= (and b!61453 c!8088) b!61454))

(assert (= (and b!61453 (not c!8088)) b!61446))

(assert (= (or b!61454 b!61446) bm!4728))

(assert (= (and d!12197 res!33827) b!61449))

(assert (= (and b!61449 res!33829) b!61445))

(assert (= (and b!61445 res!33828) b!61452))

(assert (= (and b!61445 c!8087) b!61444))

(assert (= (and b!61445 (not c!8087)) b!61450))

(assert (= (and b!61444 res!33826) b!61448))

(assert (= (and b!61450 c!8089) b!61447))

(assert (= (and b!61450 (not c!8089)) b!61451))

(declare-fun b_lambda!2727 () Bool)

(assert (=> (not b_lambda!2727) (not b!61448)))

(assert (=> b!61448 t!4845))

(declare-fun b_and!3733 () Bool)

(assert (= b_and!3729 (and (=> t!4845 result!2435) b_and!3733)))

(assert (=> b!61448 t!4847))

(declare-fun b_and!3735 () Bool)

(assert (= b_and!3731 (and (=> t!4847 result!2437) b_and!3735)))

(declare-fun b_lambda!2729 () Bool)

(assert (=> (not b_lambda!2729) (not b!61454)))

(assert (=> b!61454 t!4845))

(declare-fun b_and!3737 () Bool)

(assert (= b_and!3733 (and (=> t!4845 result!2435) b_and!3737)))

(assert (=> b!61454 t!4847))

(declare-fun b_and!3739 () Bool)

(assert (= b_and!3735 (and (=> t!4847 result!2437) b_and!3739)))

(assert (=> b!61453 m!53471))

(assert (=> b!61453 m!53471))

(assert (=> b!61453 m!53473))

(assert (=> b!61454 m!53489))

(assert (=> b!61454 m!53493))

(assert (=> b!61454 m!53495))

(assert (=> b!61454 m!53489))

(assert (=> b!61454 m!53471))

(declare-fun m!54267 () Bool)

(assert (=> b!61454 m!54267))

(assert (=> b!61454 m!54267))

(declare-fun m!54269 () Bool)

(assert (=> b!61454 m!54269))

(declare-fun m!54271 () Bool)

(assert (=> b!61454 m!54271))

(assert (=> b!61454 m!53493))

(declare-fun m!54273 () Bool)

(assert (=> b!61454 m!54273))

(assert (=> b!61444 m!53471))

(assert (=> b!61444 m!53471))

(declare-fun m!54275 () Bool)

(assert (=> b!61444 m!54275))

(declare-fun m!54277 () Bool)

(assert (=> b!61447 m!54277))

(declare-fun m!54279 () Bool)

(assert (=> b!61451 m!54279))

(declare-fun m!54281 () Bool)

(assert (=> b!61449 m!54281))

(assert (=> bm!4728 m!54277))

(assert (=> b!61448 m!53471))

(assert (=> b!61448 m!53493))

(assert (=> b!61448 m!53489))

(assert (=> b!61448 m!53493))

(assert (=> b!61448 m!53495))

(assert (=> b!61448 m!53471))

(declare-fun m!54283 () Bool)

(assert (=> b!61448 m!54283))

(assert (=> b!61448 m!53489))

(declare-fun m!54285 () Bool)

(assert (=> d!12197 m!54285))

(assert (=> d!12197 m!53453))

(assert (=> b!61452 m!53471))

(assert (=> b!61452 m!53471))

(assert (=> b!61452 m!53473))

(assert (=> b!60963 d!12197))

(declare-fun d!12199 () Bool)

(assert (=> d!12199 (= (apply!67 lt!25009 lt!25002) (get!1093 (getValueByKey!124 (toList!708 lt!25009) lt!25002)))))

(declare-fun bs!2662 () Bool)

(assert (= bs!2662 d!12199))

(declare-fun m!54287 () Bool)

(assert (=> bs!2662 m!54287))

(assert (=> bs!2662 m!54287))

(declare-fun m!54289 () Bool)

(assert (=> bs!2662 m!54289))

(assert (=> b!60963 d!12199))

(declare-fun d!12201 () Bool)

(declare-fun e!40372 () Bool)

(assert (=> d!12201 e!40372))

(declare-fun res!33830 () Bool)

(assert (=> d!12201 (=> (not res!33830) (not e!40372))))

(declare-fun lt!25356 () ListLongMap!1385)

(assert (=> d!12201 (= res!33830 (contains!697 lt!25356 (_1!1040 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16)))))))

(declare-fun lt!25358 () List!1459)

(assert (=> d!12201 (= lt!25356 (ListLongMap!1386 lt!25358))))

(declare-fun lt!25359 () Unit!1622)

(declare-fun lt!25357 () Unit!1622)

(assert (=> d!12201 (= lt!25359 lt!25357)))

(assert (=> d!12201 (= (getValueByKey!124 lt!25358 (_1!1040 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12201 (= lt!25357 (lemmaContainsTupThenGetReturnValue!43 lt!25358 (_1!1040 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12201 (= lt!25358 (insertStrictlySorted!45 (toList!708 lt!24998) (_1!1040 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12201 (= (+!82 lt!24998 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16))) lt!25356)))

(declare-fun b!61456 () Bool)

(declare-fun res!33831 () Bool)

(assert (=> b!61456 (=> (not res!33831) (not e!40372))))

(assert (=> b!61456 (= res!33831 (= (getValueByKey!124 (toList!708 lt!25356) (_1!1040 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16))))))))

(declare-fun b!61457 () Bool)

(assert (=> b!61457 (= e!40372 (contains!699 (toList!708 lt!25356) (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16))))))

(assert (= (and d!12201 res!33830) b!61456))

(assert (= (and b!61456 res!33831) b!61457))

(declare-fun m!54291 () Bool)

(assert (=> d!12201 m!54291))

(declare-fun m!54293 () Bool)

(assert (=> d!12201 m!54293))

(declare-fun m!54295 () Bool)

(assert (=> d!12201 m!54295))

(declare-fun m!54297 () Bool)

(assert (=> d!12201 m!54297))

(declare-fun m!54299 () Bool)

(assert (=> b!61456 m!54299))

(declare-fun m!54301 () Bool)

(assert (=> b!61457 m!54301))

(assert (=> b!60963 d!12201))

(declare-fun d!12203 () Bool)

(assert (=> d!12203 (= (apply!67 (+!82 lt!25003 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16))) lt!25001) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!25003 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16)))) lt!25001)))))

(declare-fun bs!2663 () Bool)

(assert (= bs!2663 d!12203))

(declare-fun m!54303 () Bool)

(assert (=> bs!2663 m!54303))

(assert (=> bs!2663 m!54303))

(declare-fun m!54305 () Bool)

(assert (=> bs!2663 m!54305))

(assert (=> b!60963 d!12203))

(declare-fun d!12205 () Bool)

(assert (=> d!12205 (= (apply!67 (+!82 lt!24988 (tuple2!2061 lt!25008 (minValue!1981 newMap!16))) lt!25000) (apply!67 lt!24988 lt!25000))))

(declare-fun lt!25360 () Unit!1622)

(assert (=> d!12205 (= lt!25360 (choose!330 lt!24988 lt!25008 (minValue!1981 newMap!16) lt!25000))))

(declare-fun e!40373 () Bool)

(assert (=> d!12205 e!40373))

(declare-fun res!33832 () Bool)

(assert (=> d!12205 (=> (not res!33832) (not e!40373))))

(assert (=> d!12205 (= res!33832 (contains!697 lt!24988 lt!25000))))

(assert (=> d!12205 (= (addApplyDifferent!43 lt!24988 lt!25008 (minValue!1981 newMap!16) lt!25000) lt!25360)))

(declare-fun b!61458 () Bool)

(assert (=> b!61458 (= e!40373 (not (= lt!25000 lt!25008)))))

(assert (= (and d!12205 res!33832) b!61458))

(assert (=> d!12205 m!53503))

(assert (=> d!12205 m!53511))

(assert (=> d!12205 m!53513))

(assert (=> d!12205 m!53511))

(declare-fun m!54307 () Bool)

(assert (=> d!12205 m!54307))

(declare-fun m!54309 () Bool)

(assert (=> d!12205 m!54309))

(assert (=> b!60963 d!12205))

(declare-fun d!12207 () Bool)

(assert (=> d!12207 (= (apply!67 (+!82 lt!25003 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16))) lt!25001) (apply!67 lt!25003 lt!25001))))

(declare-fun lt!25361 () Unit!1622)

(assert (=> d!12207 (= lt!25361 (choose!330 lt!25003 lt!25007 (zeroValue!1981 newMap!16) lt!25001))))

(declare-fun e!40374 () Bool)

(assert (=> d!12207 e!40374))

(declare-fun res!33833 () Bool)

(assert (=> d!12207 (=> (not res!33833) (not e!40374))))

(assert (=> d!12207 (= res!33833 (contains!697 lt!25003 lt!25001))))

(assert (=> d!12207 (= (addApplyDifferent!43 lt!25003 lt!25007 (zeroValue!1981 newMap!16) lt!25001) lt!25361)))

(declare-fun b!61459 () Bool)

(assert (=> b!61459 (= e!40374 (not (= lt!25001 lt!25007)))))

(assert (= (and d!12207 res!33833) b!61459))

(assert (=> d!12207 m!53525))

(assert (=> d!12207 m!53507))

(assert (=> d!12207 m!53523))

(assert (=> d!12207 m!53507))

(declare-fun m!54311 () Bool)

(assert (=> d!12207 m!54311))

(declare-fun m!54313 () Bool)

(assert (=> d!12207 m!54313))

(assert (=> b!60963 d!12207))

(declare-fun d!12209 () Bool)

(assert (=> d!12209 (= (apply!67 lt!25003 lt!25001) (get!1093 (getValueByKey!124 (toList!708 lt!25003) lt!25001)))))

(declare-fun bs!2664 () Bool)

(assert (= bs!2664 d!12209))

(declare-fun m!54315 () Bool)

(assert (=> bs!2664 m!54315))

(assert (=> bs!2664 m!54315))

(declare-fun m!54317 () Bool)

(assert (=> bs!2664 m!54317))

(assert (=> b!60963 d!12209))

(declare-fun d!12211 () Bool)

(declare-fun e!40376 () Bool)

(assert (=> d!12211 e!40376))

(declare-fun res!33834 () Bool)

(assert (=> d!12211 (=> res!33834 e!40376)))

(declare-fun lt!25362 () Bool)

(assert (=> d!12211 (= res!33834 (not lt!25362))))

(declare-fun lt!25364 () Bool)

(assert (=> d!12211 (= lt!25362 lt!25364)))

(declare-fun lt!25363 () Unit!1622)

(declare-fun e!40375 () Unit!1622)

(assert (=> d!12211 (= lt!25363 e!40375)))

(declare-fun c!8090 () Bool)

(assert (=> d!12211 (= c!8090 lt!25364)))

(assert (=> d!12211 (= lt!25364 (containsKey!128 (toList!708 (+!82 lt!24998 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16)))) lt!24990))))

(assert (=> d!12211 (= (contains!697 (+!82 lt!24998 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16))) lt!24990) lt!25362)))

(declare-fun b!61460 () Bool)

(declare-fun lt!25365 () Unit!1622)

(assert (=> b!61460 (= e!40375 lt!25365)))

(assert (=> b!61460 (= lt!25365 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 (+!82 lt!24998 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16)))) lt!24990))))

(assert (=> b!61460 (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!24998 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16)))) lt!24990))))

(declare-fun b!61461 () Bool)

(declare-fun Unit!1655 () Unit!1622)

(assert (=> b!61461 (= e!40375 Unit!1655)))

(declare-fun b!61462 () Bool)

(assert (=> b!61462 (= e!40376 (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!24998 (tuple2!2061 lt!24989 (zeroValue!1981 newMap!16)))) lt!24990)))))

(assert (= (and d!12211 c!8090) b!61460))

(assert (= (and d!12211 (not c!8090)) b!61461))

(assert (= (and d!12211 (not res!33834)) b!61462))

(declare-fun m!54319 () Bool)

(assert (=> d!12211 m!54319))

(declare-fun m!54321 () Bool)

(assert (=> b!61460 m!54321))

(declare-fun m!54323 () Bool)

(assert (=> b!61460 m!54323))

(assert (=> b!61460 m!54323))

(declare-fun m!54325 () Bool)

(assert (=> b!61460 m!54325))

(assert (=> b!61462 m!54323))

(assert (=> b!61462 m!54323))

(assert (=> b!61462 m!54325))

(assert (=> b!60963 d!12211))

(declare-fun d!12213 () Bool)

(declare-fun e!40377 () Bool)

(assert (=> d!12213 e!40377))

(declare-fun res!33835 () Bool)

(assert (=> d!12213 (=> (not res!33835) (not e!40377))))

(declare-fun lt!25366 () ListLongMap!1385)

(assert (=> d!12213 (= res!33835 (contains!697 lt!25366 (_1!1040 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16)))))))

(declare-fun lt!25368 () List!1459)

(assert (=> d!12213 (= lt!25366 (ListLongMap!1386 lt!25368))))

(declare-fun lt!25369 () Unit!1622)

(declare-fun lt!25367 () Unit!1622)

(assert (=> d!12213 (= lt!25369 lt!25367)))

(assert (=> d!12213 (= (getValueByKey!124 lt!25368 (_1!1040 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12213 (= lt!25367 (lemmaContainsTupThenGetReturnValue!43 lt!25368 (_1!1040 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12213 (= lt!25368 (insertStrictlySorted!45 (toList!708 lt!25003) (_1!1040 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12213 (= (+!82 lt!25003 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16))) lt!25366)))

(declare-fun b!61463 () Bool)

(declare-fun res!33836 () Bool)

(assert (=> b!61463 (=> (not res!33836) (not e!40377))))

(assert (=> b!61463 (= res!33836 (= (getValueByKey!124 (toList!708 lt!25366) (_1!1040 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16))))))))

(declare-fun b!61464 () Bool)

(assert (=> b!61464 (= e!40377 (contains!699 (toList!708 lt!25366) (tuple2!2061 lt!25007 (zeroValue!1981 newMap!16))))))

(assert (= (and d!12213 res!33835) b!61463))

(assert (= (and b!61463 res!33836) b!61464))

(declare-fun m!54327 () Bool)

(assert (=> d!12213 m!54327))

(declare-fun m!54329 () Bool)

(assert (=> d!12213 m!54329))

(declare-fun m!54331 () Bool)

(assert (=> d!12213 m!54331))

(declare-fun m!54333 () Bool)

(assert (=> d!12213 m!54333))

(declare-fun m!54335 () Bool)

(assert (=> b!61463 m!54335))

(declare-fun m!54337 () Bool)

(assert (=> b!61464 m!54337))

(assert (=> b!60963 d!12213))

(declare-fun d!12215 () Bool)

(declare-fun e!40378 () Bool)

(assert (=> d!12215 e!40378))

(declare-fun res!33837 () Bool)

(assert (=> d!12215 (=> (not res!33837) (not e!40378))))

(declare-fun lt!25370 () ListLongMap!1385)

(assert (=> d!12215 (= res!33837 (contains!697 lt!25370 (_1!1040 (tuple2!2061 lt!24996 (minValue!1981 newMap!16)))))))

(declare-fun lt!25372 () List!1459)

(assert (=> d!12215 (= lt!25370 (ListLongMap!1386 lt!25372))))

(declare-fun lt!25373 () Unit!1622)

(declare-fun lt!25371 () Unit!1622)

(assert (=> d!12215 (= lt!25373 lt!25371)))

(assert (=> d!12215 (= (getValueByKey!124 lt!25372 (_1!1040 (tuple2!2061 lt!24996 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!24996 (minValue!1981 newMap!16)))))))

(assert (=> d!12215 (= lt!25371 (lemmaContainsTupThenGetReturnValue!43 lt!25372 (_1!1040 (tuple2!2061 lt!24996 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!24996 (minValue!1981 newMap!16)))))))

(assert (=> d!12215 (= lt!25372 (insertStrictlySorted!45 (toList!708 lt!25009) (_1!1040 (tuple2!2061 lt!24996 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!24996 (minValue!1981 newMap!16)))))))

(assert (=> d!12215 (= (+!82 lt!25009 (tuple2!2061 lt!24996 (minValue!1981 newMap!16))) lt!25370)))

(declare-fun b!61465 () Bool)

(declare-fun res!33838 () Bool)

(assert (=> b!61465 (=> (not res!33838) (not e!40378))))

(assert (=> b!61465 (= res!33838 (= (getValueByKey!124 (toList!708 lt!25370) (_1!1040 (tuple2!2061 lt!24996 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!24996 (minValue!1981 newMap!16))))))))

(declare-fun b!61466 () Bool)

(assert (=> b!61466 (= e!40378 (contains!699 (toList!708 lt!25370) (tuple2!2061 lt!24996 (minValue!1981 newMap!16))))))

(assert (= (and d!12215 res!33837) b!61465))

(assert (= (and b!61465 res!33838) b!61466))

(declare-fun m!54339 () Bool)

(assert (=> d!12215 m!54339))

(declare-fun m!54341 () Bool)

(assert (=> d!12215 m!54341))

(declare-fun m!54343 () Bool)

(assert (=> d!12215 m!54343))

(declare-fun m!54345 () Bool)

(assert (=> d!12215 m!54345))

(declare-fun m!54347 () Bool)

(assert (=> b!61465 m!54347))

(declare-fun m!54349 () Bool)

(assert (=> b!61466 m!54349))

(assert (=> b!60963 d!12215))

(declare-fun d!12217 () Bool)

(declare-fun e!40380 () Bool)

(assert (=> d!12217 e!40380))

(declare-fun res!33839 () Bool)

(assert (=> d!12217 (=> res!33839 e!40380)))

(declare-fun lt!25374 () Bool)

(assert (=> d!12217 (= res!33839 (not lt!25374))))

(declare-fun lt!25376 () Bool)

(assert (=> d!12217 (= lt!25374 lt!25376)))

(declare-fun lt!25375 () Unit!1622)

(declare-fun e!40379 () Unit!1622)

(assert (=> d!12217 (= lt!25375 e!40379)))

(declare-fun c!8091 () Bool)

(assert (=> d!12217 (= c!8091 lt!25376)))

(assert (=> d!12217 (= lt!25376 (containsKey!128 (toList!708 lt!25179) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12217 (= (contains!697 lt!25179 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25374)))

(declare-fun b!61467 () Bool)

(declare-fun lt!25377 () Unit!1622)

(assert (=> b!61467 (= e!40379 lt!25377)))

(assert (=> b!61467 (= lt!25377 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25179) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61467 (isDefined!78 (getValueByKey!124 (toList!708 lt!25179) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61468 () Bool)

(declare-fun Unit!1656 () Unit!1622)

(assert (=> b!61468 (= e!40379 Unit!1656)))

(declare-fun b!61469 () Bool)

(assert (=> b!61469 (= e!40380 (isDefined!78 (getValueByKey!124 (toList!708 lt!25179) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12217 c!8091) b!61467))

(assert (= (and d!12217 (not c!8091)) b!61468))

(assert (= (and d!12217 (not res!33839)) b!61469))

(declare-fun m!54351 () Bool)

(assert (=> d!12217 m!54351))

(declare-fun m!54353 () Bool)

(assert (=> b!61467 m!54353))

(assert (=> b!61467 m!54027))

(assert (=> b!61467 m!54027))

(declare-fun m!54355 () Bool)

(assert (=> b!61467 m!54355))

(assert (=> b!61469 m!54027))

(assert (=> b!61469 m!54027))

(assert (=> b!61469 m!54355))

(assert (=> bm!4700 d!12217))

(declare-fun d!12219 () Bool)

(declare-fun lt!25378 () Bool)

(assert (=> d!12219 (= lt!25378 (select (content!65 (toList!708 lt!25244)) (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun e!40382 () Bool)

(assert (=> d!12219 (= lt!25378 e!40382)))

(declare-fun res!33841 () Bool)

(assert (=> d!12219 (=> (not res!33841) (not e!40382))))

(assert (=> d!12219 (= res!33841 ((_ is Cons!1455) (toList!708 lt!25244)))))

(assert (=> d!12219 (= (contains!699 (toList!708 lt!25244) (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!25378)))

(declare-fun b!61470 () Bool)

(declare-fun e!40381 () Bool)

(assert (=> b!61470 (= e!40382 e!40381)))

(declare-fun res!33840 () Bool)

(assert (=> b!61470 (=> res!33840 e!40381)))

(assert (=> b!61470 (= res!33840 (= (h!2037 (toList!708 lt!25244)) (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!61471 () Bool)

(assert (=> b!61471 (= e!40381 (contains!699 (t!4837 (toList!708 lt!25244)) (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(assert (= (and d!12219 res!33841) b!61470))

(assert (= (and b!61470 (not res!33840)) b!61471))

(declare-fun m!54357 () Bool)

(assert (=> d!12219 m!54357))

(declare-fun m!54359 () Bool)

(assert (=> d!12219 m!54359))

(declare-fun m!54361 () Bool)

(assert (=> b!61471 m!54361))

(assert (=> b!61245 d!12219))

(declare-fun d!12221 () Bool)

(assert (=> d!12221 (= (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!301 (getValueByKey!124 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2665 () Bool)

(assert (= bs!2665 d!12221))

(assert (=> bs!2665 m!53673))

(declare-fun m!54363 () Bool)

(assert (=> bs!2665 m!54363))

(assert (=> b!61198 d!12221))

(declare-fun e!40384 () Option!130)

(declare-fun b!61474 () Bool)

(assert (=> b!61474 (= e!40384 (getValueByKey!124 (t!4837 (toList!708 lt!24948)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!61475 () Bool)

(assert (=> b!61475 (= e!40384 None!128)))

(declare-fun b!61473 () Bool)

(declare-fun e!40383 () Option!130)

(assert (=> b!61473 (= e!40383 e!40384)))

(declare-fun c!8093 () Bool)

(assert (=> b!61473 (= c!8093 (and ((_ is Cons!1455) (toList!708 lt!24948)) (not (= (_1!1040 (h!2037 (toList!708 lt!24948))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!61472 () Bool)

(assert (=> b!61472 (= e!40383 (Some!129 (_2!1040 (h!2037 (toList!708 lt!24948)))))))

(declare-fun c!8092 () Bool)

(declare-fun d!12223 () Bool)

(assert (=> d!12223 (= c!8092 (and ((_ is Cons!1455) (toList!708 lt!24948)) (= (_1!1040 (h!2037 (toList!708 lt!24948))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12223 (= (getValueByKey!124 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!40383)))

(assert (= (and d!12223 c!8092) b!61472))

(assert (= (and d!12223 (not c!8092)) b!61473))

(assert (= (and b!61473 c!8093) b!61474))

(assert (= (and b!61473 (not c!8093)) b!61475))

(assert (=> b!61474 m!53359))

(declare-fun m!54365 () Bool)

(assert (=> b!61474 m!54365))

(assert (=> b!61198 d!12223))

(assert (=> b!61064 d!12009))

(declare-fun d!12225 () Bool)

(assert (=> d!12225 (= (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61195 d!12225))

(assert (=> b!61003 d!12161))

(declare-fun e!40386 () Option!130)

(declare-fun b!61478 () Bool)

(assert (=> b!61478 (= e!40386 (getValueByKey!124 (t!4837 (toList!708 lt!25262)) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61479 () Bool)

(assert (=> b!61479 (= e!40386 None!128)))

(declare-fun b!61477 () Bool)

(declare-fun e!40385 () Option!130)

(assert (=> b!61477 (= e!40385 e!40386)))

(declare-fun c!8095 () Bool)

(assert (=> b!61477 (= c!8095 (and ((_ is Cons!1455) (toList!708 lt!25262)) (not (= (_1!1040 (h!2037 (toList!708 lt!25262))) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61476 () Bool)

(assert (=> b!61476 (= e!40385 (Some!129 (_2!1040 (h!2037 (toList!708 lt!25262)))))))

(declare-fun d!12227 () Bool)

(declare-fun c!8094 () Bool)

(assert (=> d!12227 (= c!8094 (and ((_ is Cons!1455) (toList!708 lt!25262)) (= (_1!1040 (h!2037 (toList!708 lt!25262))) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12227 (= (getValueByKey!124 (toList!708 lt!25262) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) e!40385)))

(assert (= (and d!12227 c!8094) b!61476))

(assert (= (and d!12227 (not c!8094)) b!61477))

(assert (= (and b!61477 c!8095) b!61478))

(assert (= (and b!61477 (not c!8095)) b!61479))

(declare-fun m!54367 () Bool)

(assert (=> b!61478 m!54367))

(assert (=> b!61255 d!12227))

(assert (=> b!61231 d!11971))

(declare-fun d!12229 () Bool)

(assert (=> d!12229 (= (isEmpty!301 (getValueByKey!124 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))) (not ((_ is Some!129) (getValueByKey!124 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))))

(assert (=> d!12017 d!12229))

(assert (=> b!61154 d!12161))

(declare-fun d!12231 () Bool)

(assert (=> d!12231 (= (get!1093 (getValueByKey!124 (toList!708 lt!24959) lt!24957)) (v!2407 (getValueByKey!124 (toList!708 lt!24959) lt!24957)))))

(assert (=> d!12071 d!12231))

(declare-fun b!61482 () Bool)

(declare-fun e!40388 () Option!130)

(assert (=> b!61482 (= e!40388 (getValueByKey!124 (t!4837 (toList!708 lt!24959)) lt!24957))))

(declare-fun b!61483 () Bool)

(assert (=> b!61483 (= e!40388 None!128)))

(declare-fun b!61481 () Bool)

(declare-fun e!40387 () Option!130)

(assert (=> b!61481 (= e!40387 e!40388)))

(declare-fun c!8097 () Bool)

(assert (=> b!61481 (= c!8097 (and ((_ is Cons!1455) (toList!708 lt!24959)) (not (= (_1!1040 (h!2037 (toList!708 lt!24959))) lt!24957))))))

(declare-fun b!61480 () Bool)

(assert (=> b!61480 (= e!40387 (Some!129 (_2!1040 (h!2037 (toList!708 lt!24959)))))))

(declare-fun d!12233 () Bool)

(declare-fun c!8096 () Bool)

(assert (=> d!12233 (= c!8096 (and ((_ is Cons!1455) (toList!708 lt!24959)) (= (_1!1040 (h!2037 (toList!708 lt!24959))) lt!24957)))))

(assert (=> d!12233 (= (getValueByKey!124 (toList!708 lt!24959) lt!24957) e!40387)))

(assert (= (and d!12233 c!8096) b!61480))

(assert (= (and d!12233 (not c!8096)) b!61481))

(assert (= (and b!61481 c!8097) b!61482))

(assert (= (and b!61481 (not c!8097)) b!61483))

(declare-fun m!54369 () Bool)

(assert (=> b!61482 m!54369))

(assert (=> d!12071 d!12233))

(assert (=> d!12063 d!12047))

(declare-fun d!12235 () Bool)

(declare-fun e!40390 () Bool)

(assert (=> d!12235 e!40390))

(declare-fun res!33842 () Bool)

(assert (=> d!12235 (=> res!33842 e!40390)))

(declare-fun lt!25379 () Bool)

(assert (=> d!12235 (= res!33842 (not lt!25379))))

(declare-fun lt!25381 () Bool)

(assert (=> d!12235 (= lt!25379 lt!25381)))

(declare-fun lt!25380 () Unit!1622)

(declare-fun e!40389 () Unit!1622)

(assert (=> d!12235 (= lt!25380 e!40389)))

(declare-fun c!8098 () Bool)

(assert (=> d!12235 (= c!8098 lt!25381)))

(assert (=> d!12235 (= lt!25381 (containsKey!128 (toList!708 lt!24944) lt!24956))))

(assert (=> d!12235 (= (contains!697 lt!24944 lt!24956) lt!25379)))

(declare-fun b!61484 () Bool)

(declare-fun lt!25382 () Unit!1622)

(assert (=> b!61484 (= e!40389 lt!25382)))

(assert (=> b!61484 (= lt!25382 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24944) lt!24956))))

(assert (=> b!61484 (isDefined!78 (getValueByKey!124 (toList!708 lt!24944) lt!24956))))

(declare-fun b!61485 () Bool)

(declare-fun Unit!1657 () Unit!1622)

(assert (=> b!61485 (= e!40389 Unit!1657)))

(declare-fun b!61486 () Bool)

(assert (=> b!61486 (= e!40390 (isDefined!78 (getValueByKey!124 (toList!708 lt!24944) lt!24956)))))

(assert (= (and d!12235 c!8098) b!61484))

(assert (= (and d!12235 (not c!8098)) b!61485))

(assert (= (and d!12235 (not res!33842)) b!61486))

(declare-fun m!54371 () Bool)

(assert (=> d!12235 m!54371))

(declare-fun m!54373 () Bool)

(assert (=> b!61484 m!54373))

(assert (=> b!61484 m!53879))

(assert (=> b!61484 m!53879))

(declare-fun m!54375 () Bool)

(assert (=> b!61484 m!54375))

(assert (=> b!61486 m!53879))

(assert (=> b!61486 m!53879))

(assert (=> b!61486 m!54375))

(assert (=> d!12063 d!12235))

(assert (=> d!12063 d!12073))

(assert (=> d!12063 d!12059))

(declare-fun d!12237 () Bool)

(assert (=> d!12237 (= (apply!67 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24956) (apply!67 lt!24944 lt!24956))))

(assert (=> d!12237 true))

(declare-fun _$34!767 () Unit!1622)

(assert (=> d!12237 (= (choose!330 lt!24944 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24956) _$34!767)))

(declare-fun bs!2666 () Bool)

(assert (= bs!2666 d!12237))

(assert (=> bs!2666 m!53397))

(assert (=> bs!2666 m!53397))

(assert (=> bs!2666 m!53399))

(assert (=> bs!2666 m!53389))

(assert (=> d!12063 d!12237))

(declare-fun lt!25383 () Bool)

(declare-fun d!12239 () Bool)

(assert (=> d!12239 (= lt!25383 (select (content!65 (toList!708 lt!25253)) (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun e!40392 () Bool)

(assert (=> d!12239 (= lt!25383 e!40392)))

(declare-fun res!33844 () Bool)

(assert (=> d!12239 (=> (not res!33844) (not e!40392))))

(assert (=> d!12239 (= res!33844 ((_ is Cons!1455) (toList!708 lt!25253)))))

(assert (=> d!12239 (= (contains!699 (toList!708 lt!25253) (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!25383)))

(declare-fun b!61488 () Bool)

(declare-fun e!40391 () Bool)

(assert (=> b!61488 (= e!40392 e!40391)))

(declare-fun res!33843 () Bool)

(assert (=> b!61488 (=> res!33843 e!40391)))

(assert (=> b!61488 (= res!33843 (= (h!2037 (toList!708 lt!25253)) (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!61489 () Bool)

(assert (=> b!61489 (= e!40391 (contains!699 (t!4837 (toList!708 lt!25253)) (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(assert (= (and d!12239 res!33844) b!61488))

(assert (= (and b!61488 (not res!33843)) b!61489))

(declare-fun m!54377 () Bool)

(assert (=> d!12239 m!54377))

(declare-fun m!54379 () Bool)

(assert (=> d!12239 m!54379))

(declare-fun m!54381 () Bool)

(assert (=> b!61489 m!54381))

(assert (=> b!61251 d!12239))

(declare-fun b!61490 () Bool)

(declare-fun e!40396 () Bool)

(declare-fun e!40393 () Bool)

(assert (=> b!61490 (= e!40396 e!40393)))

(assert (=> b!61490 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun res!33845 () Bool)

(declare-fun lt!25387 () ListLongMap!1385)

(assert (=> b!61490 (= res!33845 (contains!697 lt!25387 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!61490 (=> (not res!33845) (not e!40393))))

(declare-fun b!61491 () Bool)

(declare-fun e!40398 () Bool)

(assert (=> b!61491 (= e!40398 e!40396)))

(declare-fun c!8100 () Bool)

(declare-fun e!40397 () Bool)

(assert (=> b!61491 (= c!8100 e!40397)))

(declare-fun res!33847 () Bool)

(assert (=> b!61491 (=> (not res!33847) (not e!40397))))

(assert (=> b!61491 (= res!33847 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!61492 () Bool)

(declare-fun e!40395 () ListLongMap!1385)

(declare-fun call!4732 () ListLongMap!1385)

(assert (=> b!61492 (= e!40395 call!4732)))

(declare-fun b!61493 () Bool)

(declare-fun e!40399 () Bool)

(assert (=> b!61493 (= e!40399 (= lt!25387 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!61494 () Bool)

(assert (=> b!61494 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> b!61494 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2024 (_values!2050 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> b!61494 (= e!40393 (= (apply!67 lt!25387 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61495 () Bool)

(declare-fun res!33848 () Bool)

(assert (=> b!61495 (=> (not res!33848) (not e!40398))))

(assert (=> b!61495 (= res!33848 (not (contains!697 lt!25387 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61496 () Bool)

(assert (=> b!61496 (= e!40396 e!40399)))

(declare-fun c!8102 () Bool)

(assert (=> b!61496 (= c!8102 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun bm!4729 () Bool)

(assert (=> bm!4729 (= call!4732 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun d!12241 () Bool)

(assert (=> d!12241 e!40398))

(declare-fun res!33846 () Bool)

(assert (=> d!12241 (=> (not res!33846) (not e!40398))))

(assert (=> d!12241 (= res!33846 (not (contains!697 lt!25387 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!40394 () ListLongMap!1385)

(assert (=> d!12241 (= lt!25387 e!40394)))

(declare-fun c!8099 () Bool)

(assert (=> d!12241 (= c!8099 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> d!12241 (validMask!0 (mask!5963 (v!2403 (underlying!231 thiss!992))))))

(assert (=> d!12241 (= (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (_values!2050 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992))) (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) (minValue!1981 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992)))) lt!25387)))

(declare-fun b!61497 () Bool)

(assert (=> b!61497 (= e!40399 (isEmpty!302 lt!25387))))

(declare-fun b!61498 () Bool)

(assert (=> b!61498 (= e!40397 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!61498 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!61499 () Bool)

(assert (=> b!61499 (= e!40394 e!40395)))

(declare-fun c!8101 () Bool)

(assert (=> b!61499 (= c!8101 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!61500 () Bool)

(declare-fun lt!25390 () Unit!1622)

(declare-fun lt!25389 () Unit!1622)

(assert (=> b!61500 (= lt!25390 lt!25389)))

(declare-fun lt!25385 () (_ BitVec 64))

(declare-fun lt!25386 () V!2859)

(declare-fun lt!25388 () (_ BitVec 64))

(declare-fun lt!25384 () ListLongMap!1385)

(assert (=> b!61500 (not (contains!697 (+!82 lt!25384 (tuple2!2061 lt!25388 lt!25386)) lt!25385))))

(assert (=> b!61500 (= lt!25389 (addStillNotContains!18 lt!25384 lt!25388 lt!25386 lt!25385))))

(assert (=> b!61500 (= lt!25385 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61500 (= lt!25386 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61500 (= lt!25388 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!61500 (= lt!25384 call!4732)))

(assert (=> b!61500 (= e!40395 (+!82 call!4732 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61501 () Bool)

(assert (=> b!61501 (= e!40394 (ListLongMap!1386 Nil!1456))))

(assert (= (and d!12241 c!8099) b!61501))

(assert (= (and d!12241 (not c!8099)) b!61499))

(assert (= (and b!61499 c!8101) b!61500))

(assert (= (and b!61499 (not c!8101)) b!61492))

(assert (= (or b!61500 b!61492) bm!4729))

(assert (= (and d!12241 res!33846) b!61495))

(assert (= (and b!61495 res!33848) b!61491))

(assert (= (and b!61491 res!33847) b!61498))

(assert (= (and b!61491 c!8100) b!61490))

(assert (= (and b!61491 (not c!8100)) b!61496))

(assert (= (and b!61490 res!33845) b!61494))

(assert (= (and b!61496 c!8102) b!61493))

(assert (= (and b!61496 (not c!8102)) b!61497))

(declare-fun b_lambda!2731 () Bool)

(assert (=> (not b_lambda!2731) (not b!61494)))

(assert (=> b!61494 t!4834))

(declare-fun b_and!3741 () Bool)

(assert (= b_and!3737 (and (=> t!4834 result!2421) b_and!3741)))

(assert (=> b!61494 t!4836))

(declare-fun b_and!3743 () Bool)

(assert (= b_and!3739 (and (=> t!4836 result!2425) b_and!3743)))

(declare-fun b_lambda!2733 () Bool)

(assert (=> (not b_lambda!2733) (not b!61500)))

(assert (=> b!61500 t!4834))

(declare-fun b_and!3745 () Bool)

(assert (= b_and!3741 (and (=> t!4834 result!2421) b_and!3745)))

(assert (=> b!61500 t!4836))

(declare-fun b_and!3747 () Bool)

(assert (= b_and!3743 (and (=> t!4836 result!2425) b_and!3747)))

(assert (=> b!61499 m!53807))

(assert (=> b!61499 m!53807))

(declare-fun m!54383 () Bool)

(assert (=> b!61499 m!54383))

(declare-fun m!54385 () Bool)

(assert (=> b!61500 m!54385))

(assert (=> b!61500 m!53225))

(declare-fun m!54387 () Bool)

(assert (=> b!61500 m!54387))

(assert (=> b!61500 m!54385))

(assert (=> b!61500 m!53807))

(declare-fun m!54389 () Bool)

(assert (=> b!61500 m!54389))

(assert (=> b!61500 m!54389))

(declare-fun m!54391 () Bool)

(assert (=> b!61500 m!54391))

(declare-fun m!54393 () Bool)

(assert (=> b!61500 m!54393))

(assert (=> b!61500 m!53225))

(declare-fun m!54395 () Bool)

(assert (=> b!61500 m!54395))

(assert (=> b!61490 m!53807))

(assert (=> b!61490 m!53807))

(declare-fun m!54397 () Bool)

(assert (=> b!61490 m!54397))

(declare-fun m!54399 () Bool)

(assert (=> b!61493 m!54399))

(declare-fun m!54401 () Bool)

(assert (=> b!61497 m!54401))

(declare-fun m!54403 () Bool)

(assert (=> b!61495 m!54403))

(assert (=> bm!4729 m!54399))

(assert (=> b!61494 m!53807))

(assert (=> b!61494 m!53225))

(assert (=> b!61494 m!54385))

(assert (=> b!61494 m!53225))

(assert (=> b!61494 m!54387))

(assert (=> b!61494 m!53807))

(declare-fun m!54405 () Bool)

(assert (=> b!61494 m!54405))

(assert (=> b!61494 m!54385))

(declare-fun m!54407 () Bool)

(assert (=> d!12241 m!54407))

(assert (=> d!12241 m!53237))

(assert (=> b!61498 m!53807))

(assert (=> b!61498 m!53807))

(assert (=> b!61498 m!54383))

(assert (=> b!61226 d!12241))

(declare-fun d!12243 () Bool)

(declare-fun res!33849 () Bool)

(declare-fun e!40400 () Bool)

(assert (=> d!12243 (=> res!33849 e!40400)))

(assert (=> d!12243 (= res!33849 (= (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12243 (= (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!40400)))

(declare-fun b!61502 () Bool)

(declare-fun e!40401 () Bool)

(assert (=> b!61502 (= e!40400 e!40401)))

(declare-fun res!33850 () Bool)

(assert (=> b!61502 (=> (not res!33850) (not e!40401))))

(assert (=> b!61502 (= res!33850 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!61503 () Bool)

(assert (=> b!61503 (= e!40401 (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12243 (not res!33849)) b!61502))

(assert (= (and b!61502 res!33850) b!61503))

(declare-fun m!54409 () Bool)

(assert (=> d!12243 m!54409))

(assert (=> b!61503 m!53207))

(declare-fun m!54411 () Bool)

(assert (=> b!61503 m!54411))

(assert (=> b!61184 d!12243))

(assert (=> b!61264 d!12161))

(declare-fun b!61504 () Bool)

(declare-fun e!40402 () Bool)

(declare-fun e!40404 () Bool)

(assert (=> b!61504 (= e!40402 e!40404)))

(declare-fun c!8103 () Bool)

(assert (=> b!61504 (= c!8103 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!4730 () Bool)

(declare-fun call!4733 () Bool)

(assert (=> bm!4730 (= call!4733 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun b!61505 () Bool)

(declare-fun e!40403 () Bool)

(assert (=> b!61505 (= e!40403 call!4733)))

(declare-fun d!12245 () Bool)

(declare-fun res!33851 () Bool)

(assert (=> d!12245 (=> res!33851 e!40402)))

(assert (=> d!12245 (= res!33851 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!12245 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3695 newMap!16) (mask!5963 newMap!16)) e!40402)))

(declare-fun b!61506 () Bool)

(assert (=> b!61506 (= e!40404 e!40403)))

(declare-fun lt!25392 () (_ BitVec 64))

(assert (=> b!61506 (= lt!25392 (select (arr!1792 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!25391 () Unit!1622)

(assert (=> b!61506 (= lt!25391 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3695 newMap!16) lt!25392 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!61506 (arrayContainsKey!0 (_keys!3695 newMap!16) lt!25392 #b00000000000000000000000000000000)))

(declare-fun lt!25393 () Unit!1622)

(assert (=> b!61506 (= lt!25393 lt!25391)))

(declare-fun res!33852 () Bool)

(assert (=> b!61506 (= res!33852 (= (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3695 newMap!16) (mask!5963 newMap!16)) (Found!238 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!61506 (=> (not res!33852) (not e!40403))))

(declare-fun b!61507 () Bool)

(assert (=> b!61507 (= e!40404 call!4733)))

(assert (= (and d!12245 (not res!33851)) b!61504))

(assert (= (and b!61504 c!8103) b!61506))

(assert (= (and b!61504 (not c!8103)) b!61507))

(assert (= (and b!61506 res!33852) b!61505))

(assert (= (or b!61505 b!61507) bm!4730))

(assert (=> b!61504 m!54031))

(assert (=> b!61504 m!54031))

(assert (=> b!61504 m!54033))

(declare-fun m!54413 () Bool)

(assert (=> bm!4730 m!54413))

(assert (=> b!61506 m!54031))

(declare-fun m!54415 () Bool)

(assert (=> b!61506 m!54415))

(declare-fun m!54417 () Bool)

(assert (=> b!61506 m!54417))

(assert (=> b!61506 m!54031))

(declare-fun m!54419 () Bool)

(assert (=> b!61506 m!54419))

(assert (=> bm!4691 d!12245))

(declare-fun d!12247 () Bool)

(declare-fun res!33853 () Bool)

(declare-fun e!40405 () Bool)

(assert (=> d!12247 (=> (not res!33853) (not e!40405))))

(assert (=> d!12247 (= res!33853 (simpleValid!42 (_2!1041 lt!25124)))))

(assert (=> d!12247 (= (valid!259 (_2!1041 lt!25124)) e!40405)))

(declare-fun b!61508 () Bool)

(declare-fun res!33854 () Bool)

(assert (=> b!61508 (=> (not res!33854) (not e!40405))))

(assert (=> b!61508 (= res!33854 (= (arrayCountValidKeys!0 (_keys!3695 (_2!1041 lt!25124)) #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!25124)))) (_size!364 (_2!1041 lt!25124))))))

(declare-fun b!61509 () Bool)

(declare-fun res!33855 () Bool)

(assert (=> b!61509 (=> (not res!33855) (not e!40405))))

(assert (=> b!61509 (= res!33855 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 (_2!1041 lt!25124)) (mask!5963 (_2!1041 lt!25124))))))

(declare-fun b!61510 () Bool)

(assert (=> b!61510 (= e!40405 (arrayNoDuplicates!0 (_keys!3695 (_2!1041 lt!25124)) #b00000000000000000000000000000000 Nil!1457))))

(assert (= (and d!12247 res!33853) b!61508))

(assert (= (and b!61508 res!33854) b!61509))

(assert (= (and b!61509 res!33855) b!61510))

(declare-fun m!54421 () Bool)

(assert (=> d!12247 m!54421))

(declare-fun m!54423 () Bool)

(assert (=> b!61508 m!54423))

(declare-fun m!54425 () Bool)

(assert (=> b!61509 m!54425))

(declare-fun m!54427 () Bool)

(assert (=> b!61510 m!54427))

(assert (=> b!61074 d!12247))

(declare-fun d!12249 () Bool)

(assert (=> d!12249 (isDefined!78 (getValueByKey!124 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun lt!25394 () Unit!1622)

(assert (=> d!12249 (= lt!25394 (choose!329 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun e!40406 () Bool)

(assert (=> d!12249 e!40406))

(declare-fun res!33856 () Bool)

(assert (=> d!12249 (=> (not res!33856) (not e!40406))))

(assert (=> d!12249 (= res!33856 (isStrictlySorted!280 (toList!708 e!39984)))))

(assert (=> d!12249 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) lt!25394)))

(declare-fun b!61511 () Bool)

(assert (=> b!61511 (= e!40406 (containsKey!128 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12249 res!33856) b!61511))

(assert (=> d!12249 m!53207))

(assert (=> d!12249 m!53875))

(assert (=> d!12249 m!53875))

(assert (=> d!12249 m!53877))

(assert (=> d!12249 m!53207))

(declare-fun m!54429 () Bool)

(assert (=> d!12249 m!54429))

(declare-fun m!54431 () Bool)

(assert (=> d!12249 m!54431))

(assert (=> b!61511 m!53207))

(assert (=> b!61511 m!53871))

(assert (=> b!61237 d!12249))

(declare-fun d!12251 () Bool)

(assert (=> d!12251 (= (isDefined!78 (getValueByKey!124 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))) (not (isEmpty!301 (getValueByKey!124 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun bs!2667 () Bool)

(assert (= bs!2667 d!12251))

(assert (=> bs!2667 m!53875))

(declare-fun m!54433 () Bool)

(assert (=> bs!2667 m!54433))

(assert (=> b!61237 d!12251))

(declare-fun e!40408 () Option!130)

(declare-fun b!61514 () Bool)

(assert (=> b!61514 (= e!40408 (getValueByKey!124 (t!4837 (toList!708 e!39984)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61515 () Bool)

(assert (=> b!61515 (= e!40408 None!128)))

(declare-fun b!61513 () Bool)

(declare-fun e!40407 () Option!130)

(assert (=> b!61513 (= e!40407 e!40408)))

(declare-fun c!8105 () Bool)

(assert (=> b!61513 (= c!8105 (and ((_ is Cons!1455) (toList!708 e!39984)) (not (= (_1!1040 (h!2037 (toList!708 e!39984))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun b!61512 () Bool)

(assert (=> b!61512 (= e!40407 (Some!129 (_2!1040 (h!2037 (toList!708 e!39984)))))))

(declare-fun d!12253 () Bool)

(declare-fun c!8104 () Bool)

(assert (=> d!12253 (= c!8104 (and ((_ is Cons!1455) (toList!708 e!39984)) (= (_1!1040 (h!2037 (toList!708 e!39984))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12253 (= (getValueByKey!124 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) e!40407)))

(assert (= (and d!12253 c!8104) b!61512))

(assert (= (and d!12253 (not c!8104)) b!61513))

(assert (= (and b!61513 c!8105) b!61514))

(assert (= (and b!61513 (not c!8105)) b!61515))

(assert (=> b!61514 m!53207))

(declare-fun m!54435 () Bool)

(assert (=> b!61514 m!54435))

(assert (=> b!61237 d!12253))

(assert (=> d!12027 d!11951))

(assert (=> b!61144 d!12161))

(declare-fun d!12255 () Bool)

(assert (=> d!12255 (= (apply!67 lt!24992 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1093 (getValueByKey!124 (toList!708 lt!24992) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2668 () Bool)

(assert (= bs!2668 d!12255))

(assert (=> bs!2668 m!53471))

(assert (=> bs!2668 m!54075))

(assert (=> bs!2668 m!54075))

(declare-fun m!54437 () Bool)

(assert (=> bs!2668 m!54437))

(assert (=> b!60969 d!12255))

(declare-fun d!12257 () Bool)

(declare-fun c!8106 () Bool)

(assert (=> d!12257 (= c!8106 ((_ is ValueCellFull!861) (select (arr!1793 (ite c!7914 (_values!2050 newMap!16) lt!24892)) #b00000000000000000000000000000000)))))

(declare-fun e!40409 () V!2859)

(assert (=> d!12257 (= (get!1090 (select (arr!1793 (ite c!7914 (_values!2050 newMap!16) lt!24892)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40409)))

(declare-fun b!61516 () Bool)

(assert (=> b!61516 (= e!40409 (get!1091 (select (arr!1793 (ite c!7914 (_values!2050 newMap!16) lt!24892)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61517 () Bool)

(assert (=> b!61517 (= e!40409 (get!1092 (select (arr!1793 (ite c!7914 (_values!2050 newMap!16) lt!24892)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12257 c!8106) b!61516))

(assert (= (and d!12257 (not c!8106)) b!61517))

(assert (=> b!61516 m!53489))

(assert (=> b!61516 m!53493))

(declare-fun m!54439 () Bool)

(assert (=> b!61516 m!54439))

(assert (=> b!61517 m!53489))

(assert (=> b!61517 m!53493))

(declare-fun m!54441 () Bool)

(assert (=> b!61517 m!54441))

(assert (=> b!60969 d!12257))

(declare-fun d!12259 () Bool)

(assert (=> d!12259 (= (apply!67 lt!24992 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1093 (getValueByKey!124 (toList!708 lt!24992) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2669 () Bool)

(assert (= bs!2669 d!12259))

(declare-fun m!54443 () Bool)

(assert (=> bs!2669 m!54443))

(assert (=> bs!2669 m!54443))

(declare-fun m!54445 () Bool)

(assert (=> bs!2669 m!54445))

(assert (=> b!60952 d!12259))

(declare-fun b!61519 () Bool)

(declare-fun res!33860 () Bool)

(declare-fun e!40410 () Bool)

(assert (=> b!61519 (=> (not res!33860) (not e!40410))))

(assert (=> b!61519 (= res!33860 (bvsge (size!2027 (v!2403 (underlying!231 thiss!992))) (_size!364 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun b!61518 () Bool)

(declare-fun res!33857 () Bool)

(assert (=> b!61518 (=> (not res!33857) (not e!40410))))

(assert (=> b!61518 (= res!33857 (and (= (size!2024 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000001)) (= (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (size!2024 (_values!2050 (v!2403 (underlying!231 thiss!992))))) (bvsge (_size!364 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!364 (v!2403 (underlying!231 thiss!992))) (bvadd (mask!5963 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!61520 () Bool)

(declare-fun res!33859 () Bool)

(assert (=> b!61520 (=> (not res!33859) (not e!40410))))

(assert (=> b!61520 (= res!33859 (= (size!2027 (v!2403 (underlying!231 thiss!992))) (bvadd (_size!364 (v!2403 (underlying!231 thiss!992))) (bvsdiv (bvadd (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!61521 () Bool)

(assert (=> b!61521 (= e!40410 (and (bvsge (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1950 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!364 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun d!12261 () Bool)

(declare-fun res!33858 () Bool)

(assert (=> d!12261 (=> (not res!33858) (not e!40410))))

(assert (=> d!12261 (= res!33858 (validMask!0 (mask!5963 (v!2403 (underlying!231 thiss!992)))))))

(assert (=> d!12261 (= (simpleValid!42 (v!2403 (underlying!231 thiss!992))) e!40410)))

(assert (= (and d!12261 res!33858) b!61518))

(assert (= (and b!61518 res!33857) b!61519))

(assert (= (and b!61519 res!33860) b!61520))

(assert (= (and b!61520 res!33859) b!61521))

(declare-fun m!54447 () Bool)

(assert (=> b!61519 m!54447))

(assert (=> b!61520 m!54447))

(assert (=> d!12261 m!53237))

(assert (=> d!12005 d!12261))

(declare-fun d!12263 () Bool)

(declare-fun e!40412 () Bool)

(assert (=> d!12263 e!40412))

(declare-fun res!33861 () Bool)

(assert (=> d!12263 (=> res!33861 e!40412)))

(declare-fun lt!25395 () Bool)

(assert (=> d!12263 (= res!33861 (not lt!25395))))

(declare-fun lt!25397 () Bool)

(assert (=> d!12263 (= lt!25395 lt!25397)))

(declare-fun lt!25396 () Unit!1622)

(declare-fun e!40411 () Unit!1622)

(assert (=> d!12263 (= lt!25396 e!40411)))

(declare-fun c!8107 () Bool)

(assert (=> d!12263 (= c!8107 lt!25397)))

(assert (=> d!12263 (= lt!25397 (containsKey!128 (toList!708 lt!25152) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12263 (= (contains!697 lt!25152 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25395)))

(declare-fun b!61522 () Bool)

(declare-fun lt!25398 () Unit!1622)

(assert (=> b!61522 (= e!40411 lt!25398)))

(assert (=> b!61522 (= lt!25398 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25152) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> b!61522 (isDefined!78 (getValueByKey!124 (toList!708 lt!25152) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61523 () Bool)

(declare-fun Unit!1658 () Unit!1622)

(assert (=> b!61523 (= e!40411 Unit!1658)))

(declare-fun b!61524 () Bool)

(assert (=> b!61524 (= e!40412 (isDefined!78 (getValueByKey!124 (toList!708 lt!25152) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (= (and d!12263 c!8107) b!61522))

(assert (= (and d!12263 (not c!8107)) b!61523))

(assert (= (and d!12263 (not res!33861)) b!61524))

(declare-fun m!54449 () Bool)

(assert (=> d!12263 m!54449))

(declare-fun m!54451 () Bool)

(assert (=> b!61522 m!54451))

(assert (=> b!61522 m!53705))

(assert (=> b!61522 m!53705))

(declare-fun m!54453 () Bool)

(assert (=> b!61522 m!54453))

(assert (=> b!61524 m!53705))

(assert (=> b!61524 m!53705))

(assert (=> b!61524 m!54453))

(assert (=> d!12001 d!12263))

(declare-fun b!61527 () Bool)

(declare-fun e!40414 () Option!130)

(assert (=> b!61527 (= e!40414 (getValueByKey!124 (t!4837 lt!25154) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61528 () Bool)

(assert (=> b!61528 (= e!40414 None!128)))

(declare-fun b!61526 () Bool)

(declare-fun e!40413 () Option!130)

(assert (=> b!61526 (= e!40413 e!40414)))

(declare-fun c!8109 () Bool)

(assert (=> b!61526 (= c!8109 (and ((_ is Cons!1455) lt!25154) (not (= (_1!1040 (h!2037 lt!25154)) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61525 () Bool)

(assert (=> b!61525 (= e!40413 (Some!129 (_2!1040 (h!2037 lt!25154))))))

(declare-fun d!12265 () Bool)

(declare-fun c!8108 () Bool)

(assert (=> d!12265 (= c!8108 (and ((_ is Cons!1455) lt!25154) (= (_1!1040 (h!2037 lt!25154)) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12265 (= (getValueByKey!124 lt!25154 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) e!40413)))

(assert (= (and d!12265 c!8108) b!61525))

(assert (= (and d!12265 (not c!8108)) b!61526))

(assert (= (and b!61526 c!8109) b!61527))

(assert (= (and b!61526 (not c!8109)) b!61528))

(declare-fun m!54455 () Bool)

(assert (=> b!61527 m!54455))

(assert (=> d!12001 d!12265))

(declare-fun d!12267 () Bool)

(assert (=> d!12267 (= (getValueByKey!124 lt!25154 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun lt!25399 () Unit!1622)

(assert (=> d!12267 (= lt!25399 (choose!333 lt!25154 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun e!40415 () Bool)

(assert (=> d!12267 e!40415))

(declare-fun res!33862 () Bool)

(assert (=> d!12267 (=> (not res!33862) (not e!40415))))

(assert (=> d!12267 (= res!33862 (isStrictlySorted!280 lt!25154))))

(assert (=> d!12267 (= (lemmaContainsTupThenGetReturnValue!43 lt!25154 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25399)))

(declare-fun b!61529 () Bool)

(declare-fun res!33863 () Bool)

(assert (=> b!61529 (=> (not res!33863) (not e!40415))))

(assert (=> b!61529 (= res!33863 (containsKey!128 lt!25154 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61530 () Bool)

(assert (=> b!61530 (= e!40415 (contains!699 lt!25154 (tuple2!2061 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (= (and d!12267 res!33862) b!61529))

(assert (= (and b!61529 res!33863) b!61530))

(assert (=> d!12267 m!53699))

(declare-fun m!54457 () Bool)

(assert (=> d!12267 m!54457))

(declare-fun m!54459 () Bool)

(assert (=> d!12267 m!54459))

(declare-fun m!54461 () Bool)

(assert (=> b!61529 m!54461))

(declare-fun m!54463 () Bool)

(assert (=> b!61530 m!54463))

(assert (=> d!12001 d!12267))

(declare-fun bm!4731 () Bool)

(declare-fun call!4734 () List!1459)

(declare-fun call!4735 () List!1459)

(assert (=> bm!4731 (= call!4734 call!4735)))

(declare-fun b!61531 () Bool)

(declare-fun e!40416 () List!1459)

(declare-fun call!4736 () List!1459)

(assert (=> b!61531 (= e!40416 call!4736)))

(declare-fun d!12269 () Bool)

(declare-fun e!40420 () Bool)

(assert (=> d!12269 e!40420))

(declare-fun res!33865 () Bool)

(assert (=> d!12269 (=> (not res!33865) (not e!40420))))

(declare-fun lt!25400 () List!1459)

(assert (=> d!12269 (= res!33865 (isStrictlySorted!280 lt!25400))))

(declare-fun e!40417 () List!1459)

(assert (=> d!12269 (= lt!25400 e!40417)))

(declare-fun c!8111 () Bool)

(assert (=> d!12269 (= c!8111 (and ((_ is Cons!1455) (toList!708 call!4653)) (bvslt (_1!1040 (h!2037 (toList!708 call!4653))) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12269 (isStrictlySorted!280 (toList!708 call!4653))))

(assert (=> d!12269 (= (insertStrictlySorted!45 (toList!708 call!4653) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25400)))

(declare-fun b!61532 () Bool)

(declare-fun e!40419 () List!1459)

(assert (=> b!61532 (= e!40417 e!40419)))

(declare-fun c!8112 () Bool)

(assert (=> b!61532 (= c!8112 (and ((_ is Cons!1455) (toList!708 call!4653)) (= (_1!1040 (h!2037 (toList!708 call!4653))) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61533 () Bool)

(declare-fun c!8113 () Bool)

(assert (=> b!61533 (= c!8113 (and ((_ is Cons!1455) (toList!708 call!4653)) (bvsgt (_1!1040 (h!2037 (toList!708 call!4653))) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> b!61533 (= e!40419 e!40416)))

(declare-fun b!61534 () Bool)

(assert (=> b!61534 (= e!40420 (contains!699 lt!25400 (tuple2!2061 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun e!40418 () List!1459)

(declare-fun b!61535 () Bool)

(assert (=> b!61535 (= e!40418 (ite c!8112 (t!4837 (toList!708 call!4653)) (ite c!8113 (Cons!1455 (h!2037 (toList!708 call!4653)) (t!4837 (toList!708 call!4653))) Nil!1456)))))

(declare-fun bm!4732 () Bool)

(assert (=> bm!4732 (= call!4735 ($colon$colon!60 e!40418 (ite c!8111 (h!2037 (toList!708 call!4653)) (tuple2!2061 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun c!8110 () Bool)

(assert (=> bm!4732 (= c!8110 c!8111)))

(declare-fun b!61536 () Bool)

(assert (=> b!61536 (= e!40419 call!4734)))

(declare-fun b!61537 () Bool)

(assert (=> b!61537 (= e!40417 call!4735)))

(declare-fun bm!4733 () Bool)

(assert (=> bm!4733 (= call!4736 call!4734)))

(declare-fun b!61538 () Bool)

(assert (=> b!61538 (= e!40416 call!4736)))

(declare-fun b!61539 () Bool)

(declare-fun res!33864 () Bool)

(assert (=> b!61539 (=> (not res!33864) (not e!40420))))

(assert (=> b!61539 (= res!33864 (containsKey!128 lt!25400 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61540 () Bool)

(assert (=> b!61540 (= e!40418 (insertStrictlySorted!45 (t!4837 (toList!708 call!4653)) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (= (and d!12269 c!8111) b!61537))

(assert (= (and d!12269 (not c!8111)) b!61532))

(assert (= (and b!61532 c!8112) b!61536))

(assert (= (and b!61532 (not c!8112)) b!61533))

(assert (= (and b!61533 c!8113) b!61538))

(assert (= (and b!61533 (not c!8113)) b!61531))

(assert (= (or b!61538 b!61531) bm!4733))

(assert (= (or b!61536 bm!4733) bm!4731))

(assert (= (or b!61537 bm!4731) bm!4732))

(assert (= (and bm!4732 c!8110) b!61540))

(assert (= (and bm!4732 (not c!8110)) b!61535))

(assert (= (and d!12269 res!33865) b!61539))

(assert (= (and b!61539 res!33864) b!61534))

(declare-fun m!54465 () Bool)

(assert (=> b!61540 m!54465))

(declare-fun m!54467 () Bool)

(assert (=> bm!4732 m!54467))

(declare-fun m!54469 () Bool)

(assert (=> d!12269 m!54469))

(declare-fun m!54471 () Bool)

(assert (=> d!12269 m!54471))

(declare-fun m!54473 () Bool)

(assert (=> b!61534 m!54473))

(declare-fun m!54475 () Bool)

(assert (=> b!61539 m!54475))

(assert (=> d!12001 d!12269))

(declare-fun b!61541 () Bool)

(declare-fun e!40424 () Bool)

(declare-fun call!4737 () Bool)

(assert (=> b!61541 (= e!40424 call!4737)))

(declare-fun bm!4734 () Bool)

(declare-fun c!8114 () Bool)

(assert (=> bm!4734 (= call!4737 (arrayNoDuplicates!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8114 (Cons!1456 (select (arr!1792 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!8031 (Cons!1456 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) Nil!1457) Nil!1457)) (ite c!8031 (Cons!1456 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) Nil!1457) Nil!1457))))))

(declare-fun b!61542 () Bool)

(declare-fun e!40421 () Bool)

(assert (=> b!61542 (= e!40421 e!40424)))

(assert (=> b!61542 (= c!8114 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!61544 () Bool)

(declare-fun e!40423 () Bool)

(assert (=> b!61544 (= e!40423 (contains!698 (ite c!8031 (Cons!1456 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) Nil!1457) Nil!1457) (select (arr!1792 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!61545 () Bool)

(declare-fun e!40422 () Bool)

(assert (=> b!61545 (= e!40422 e!40421)))

(declare-fun res!33867 () Bool)

(assert (=> b!61545 (=> (not res!33867) (not e!40421))))

(assert (=> b!61545 (= res!33867 (not e!40423))))

(declare-fun res!33866 () Bool)

(assert (=> b!61545 (=> (not res!33866) (not e!40423))))

(assert (=> b!61545 (= res!33866 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!61543 () Bool)

(assert (=> b!61543 (= e!40424 call!4737)))

(declare-fun d!12271 () Bool)

(declare-fun res!33868 () Bool)

(assert (=> d!12271 (=> res!33868 e!40422)))

(assert (=> d!12271 (= res!33868 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!12271 (= (arrayNoDuplicates!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8031 (Cons!1456 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) Nil!1457) Nil!1457)) e!40422)))

(assert (= (and d!12271 (not res!33868)) b!61545))

(assert (= (and b!61545 res!33866) b!61544))

(assert (= (and b!61545 res!33867) b!61542))

(assert (= (and b!61542 c!8114) b!61541))

(assert (= (and b!61542 (not c!8114)) b!61543))

(assert (= (or b!61541 b!61543) bm!4734))

(assert (=> bm!4734 m!54031))

(declare-fun m!54477 () Bool)

(assert (=> bm!4734 m!54477))

(assert (=> b!61542 m!54031))

(assert (=> b!61542 m!54031))

(assert (=> b!61542 m!54033))

(assert (=> b!61544 m!54031))

(assert (=> b!61544 m!54031))

(declare-fun m!54479 () Bool)

(assert (=> b!61544 m!54479))

(assert (=> b!61545 m!54031))

(assert (=> b!61545 m!54031))

(assert (=> b!61545 m!54033))

(assert (=> bm!4709 d!12271))

(declare-fun b!61546 () Bool)

(declare-fun e!40425 () Bool)

(declare-fun e!40427 () Bool)

(assert (=> b!61546 (= e!40425 e!40427)))

(declare-fun c!8115 () Bool)

(assert (=> b!61546 (= c!8115 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000)))))

(declare-fun bm!4735 () Bool)

(declare-fun call!4738 () Bool)

(assert (=> bm!4735 (= call!4738 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3695 (_2!1041 lt!24880)) (mask!5963 (_2!1041 lt!24880))))))

(declare-fun b!61547 () Bool)

(declare-fun e!40426 () Bool)

(assert (=> b!61547 (= e!40426 call!4738)))

(declare-fun d!12273 () Bool)

(declare-fun res!33869 () Bool)

(assert (=> d!12273 (=> res!33869 e!40425)))

(assert (=> d!12273 (= res!33869 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))))))

(assert (=> d!12273 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 (_2!1041 lt!24880)) (mask!5963 (_2!1041 lt!24880))) e!40425)))

(declare-fun b!61548 () Bool)

(assert (=> b!61548 (= e!40427 e!40426)))

(declare-fun lt!25402 () (_ BitVec 64))

(assert (=> b!61548 (= lt!25402 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000))))

(declare-fun lt!25401 () Unit!1622)

(assert (=> b!61548 (= lt!25401 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3695 (_2!1041 lt!24880)) lt!25402 #b00000000000000000000000000000000))))

(assert (=> b!61548 (arrayContainsKey!0 (_keys!3695 (_2!1041 lt!24880)) lt!25402 #b00000000000000000000000000000000)))

(declare-fun lt!25403 () Unit!1622)

(assert (=> b!61548 (= lt!25403 lt!25401)))

(declare-fun res!33870 () Bool)

(assert (=> b!61548 (= res!33870 (= (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000) (_keys!3695 (_2!1041 lt!24880)) (mask!5963 (_2!1041 lt!24880))) (Found!238 #b00000000000000000000000000000000)))))

(assert (=> b!61548 (=> (not res!33870) (not e!40426))))

(declare-fun b!61549 () Bool)

(assert (=> b!61549 (= e!40427 call!4738)))

(assert (= (and d!12273 (not res!33869)) b!61546))

(assert (= (and b!61546 c!8115) b!61548))

(assert (= (and b!61546 (not c!8115)) b!61549))

(assert (= (and b!61548 res!33870) b!61547))

(assert (= (or b!61547 b!61549) bm!4735))

(assert (=> b!61546 m!54155))

(assert (=> b!61546 m!54155))

(assert (=> b!61546 m!54159))

(declare-fun m!54481 () Bool)

(assert (=> bm!4735 m!54481))

(assert (=> b!61548 m!54155))

(declare-fun m!54483 () Bool)

(assert (=> b!61548 m!54483))

(declare-fun m!54485 () Bool)

(assert (=> b!61548 m!54485))

(assert (=> b!61548 m!54155))

(declare-fun m!54487 () Bool)

(assert (=> b!61548 m!54487))

(assert (=> b!61006 d!12273))

(declare-fun e!40429 () Option!130)

(declare-fun b!61552 () Bool)

(assert (=> b!61552 (= e!40429 (getValueByKey!124 (t!4837 (toList!708 lt!25233)) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61553 () Bool)

(assert (=> b!61553 (= e!40429 None!128)))

(declare-fun b!61551 () Bool)

(declare-fun e!40428 () Option!130)

(assert (=> b!61551 (= e!40428 e!40429)))

(declare-fun c!8117 () Bool)

(assert (=> b!61551 (= c!8117 (and ((_ is Cons!1455) (toList!708 lt!25233)) (not (= (_1!1040 (h!2037 (toList!708 lt!25233))) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!61550 () Bool)

(assert (=> b!61550 (= e!40428 (Some!129 (_2!1040 (h!2037 (toList!708 lt!25233)))))))

(declare-fun c!8116 () Bool)

(declare-fun d!12275 () Bool)

(assert (=> d!12275 (= c!8116 (and ((_ is Cons!1455) (toList!708 lt!25233)) (= (_1!1040 (h!2037 (toList!708 lt!25233))) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12275 (= (getValueByKey!124 (toList!708 lt!25233) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!40428)))

(assert (= (and d!12275 c!8116) b!61550))

(assert (= (and d!12275 (not c!8116)) b!61551))

(assert (= (and b!61551 c!8117) b!61552))

(assert (= (and b!61551 (not c!8117)) b!61553))

(declare-fun m!54489 () Bool)

(assert (=> b!61552 m!54489))

(assert (=> b!61235 d!12275))

(declare-fun d!12277 () Bool)

(assert (=> d!12277 (= (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!301 (getValueByKey!124 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2670 () Bool)

(assert (= bs!2670 d!12277))

(assert (=> bs!2670 m!53681))

(declare-fun m!54491 () Bool)

(assert (=> bs!2670 m!54491))

(assert (=> b!61187 d!12277))

(declare-fun b!61556 () Bool)

(declare-fun e!40431 () Option!130)

(assert (=> b!61556 (= e!40431 (getValueByKey!124 (t!4837 (toList!708 lt!24948)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61557 () Bool)

(assert (=> b!61557 (= e!40431 None!128)))

(declare-fun b!61555 () Bool)

(declare-fun e!40430 () Option!130)

(assert (=> b!61555 (= e!40430 e!40431)))

(declare-fun c!8119 () Bool)

(assert (=> b!61555 (= c!8119 (and ((_ is Cons!1455) (toList!708 lt!24948)) (not (= (_1!1040 (h!2037 (toList!708 lt!24948))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61554 () Bool)

(assert (=> b!61554 (= e!40430 (Some!129 (_2!1040 (h!2037 (toList!708 lt!24948)))))))

(declare-fun d!12279 () Bool)

(declare-fun c!8118 () Bool)

(assert (=> d!12279 (= c!8118 (and ((_ is Cons!1455) (toList!708 lt!24948)) (= (_1!1040 (h!2037 (toList!708 lt!24948))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12279 (= (getValueByKey!124 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000) e!40430)))

(assert (= (and d!12279 c!8118) b!61554))

(assert (= (and d!12279 (not c!8118)) b!61555))

(assert (= (and b!61555 c!8119) b!61556))

(assert (= (and b!61555 (not c!8119)) b!61557))

(declare-fun m!54493 () Bool)

(assert (=> b!61556 m!54493))

(assert (=> b!61187 d!12279))

(declare-fun d!12281 () Bool)

(assert (=> d!12281 (contains!697 (+!82 lt!25185 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16))) lt!25177)))

(declare-fun lt!25404 () Unit!1622)

(assert (=> d!12281 (= lt!25404 (choose!331 lt!25185 lt!25176 (zeroValue!1981 newMap!16) lt!25177))))

(assert (=> d!12281 (contains!697 lt!25185 lt!25177)))

(assert (=> d!12281 (= (addStillContains!43 lt!25185 lt!25176 (zeroValue!1981 newMap!16) lt!25177) lt!25404)))

(declare-fun bs!2671 () Bool)

(assert (= bs!2671 d!12281))

(assert (=> bs!2671 m!53765))

(assert (=> bs!2671 m!53765))

(assert (=> bs!2671 m!53767))

(declare-fun m!54495 () Bool)

(assert (=> bs!2671 m!54495))

(declare-fun m!54497 () Bool)

(assert (=> bs!2671 m!54497))

(assert (=> b!61147 d!12281))

(declare-fun d!12283 () Bool)

(assert (=> d!12283 (= (apply!67 (+!82 lt!25196 (tuple2!2061 lt!25183 (minValue!1981 newMap!16))) lt!25189) (apply!67 lt!25196 lt!25189))))

(declare-fun lt!25405 () Unit!1622)

(assert (=> d!12283 (= lt!25405 (choose!330 lt!25196 lt!25183 (minValue!1981 newMap!16) lt!25189))))

(declare-fun e!40432 () Bool)

(assert (=> d!12283 e!40432))

(declare-fun res!33871 () Bool)

(assert (=> d!12283 (=> (not res!33871) (not e!40432))))

(assert (=> d!12283 (= res!33871 (contains!697 lt!25196 lt!25189))))

(assert (=> d!12283 (= (addApplyDifferent!43 lt!25196 lt!25183 (minValue!1981 newMap!16) lt!25189) lt!25405)))

(declare-fun b!61558 () Bool)

(assert (=> b!61558 (= e!40432 (not (= lt!25189 lt!25183)))))

(assert (= (and d!12283 res!33871) b!61558))

(assert (=> d!12283 m!53783))

(assert (=> d!12283 m!53785))

(assert (=> d!12283 m!53787))

(assert (=> d!12283 m!53785))

(declare-fun m!54499 () Bool)

(assert (=> d!12283 m!54499))

(declare-fun m!54501 () Bool)

(assert (=> d!12283 m!54501))

(assert (=> b!61147 d!12283))

(declare-fun d!12285 () Bool)

(assert (=> d!12285 (= (apply!67 lt!25190 lt!25188) (get!1093 (getValueByKey!124 (toList!708 lt!25190) lt!25188)))))

(declare-fun bs!2672 () Bool)

(assert (= bs!2672 d!12285))

(declare-fun m!54503 () Bool)

(assert (=> bs!2672 m!54503))

(assert (=> bs!2672 m!54503))

(declare-fun m!54505 () Bool)

(assert (=> bs!2672 m!54505))

(assert (=> b!61147 d!12285))

(declare-fun d!12287 () Bool)

(declare-fun e!40433 () Bool)

(assert (=> d!12287 e!40433))

(declare-fun res!33872 () Bool)

(assert (=> d!12287 (=> (not res!33872) (not e!40433))))

(declare-fun lt!25406 () ListLongMap!1385)

(assert (=> d!12287 (= res!33872 (contains!697 lt!25406 (_1!1040 (tuple2!2061 lt!25195 (minValue!1981 newMap!16)))))))

(declare-fun lt!25408 () List!1459)

(assert (=> d!12287 (= lt!25406 (ListLongMap!1386 lt!25408))))

(declare-fun lt!25409 () Unit!1622)

(declare-fun lt!25407 () Unit!1622)

(assert (=> d!12287 (= lt!25409 lt!25407)))

(assert (=> d!12287 (= (getValueByKey!124 lt!25408 (_1!1040 (tuple2!2061 lt!25195 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25195 (minValue!1981 newMap!16)))))))

(assert (=> d!12287 (= lt!25407 (lemmaContainsTupThenGetReturnValue!43 lt!25408 (_1!1040 (tuple2!2061 lt!25195 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25195 (minValue!1981 newMap!16)))))))

(assert (=> d!12287 (= lt!25408 (insertStrictlySorted!45 (toList!708 lt!25175) (_1!1040 (tuple2!2061 lt!25195 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25195 (minValue!1981 newMap!16)))))))

(assert (=> d!12287 (= (+!82 lt!25175 (tuple2!2061 lt!25195 (minValue!1981 newMap!16))) lt!25406)))

(declare-fun b!61559 () Bool)

(declare-fun res!33873 () Bool)

(assert (=> b!61559 (=> (not res!33873) (not e!40433))))

(assert (=> b!61559 (= res!33873 (= (getValueByKey!124 (toList!708 lt!25406) (_1!1040 (tuple2!2061 lt!25195 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25195 (minValue!1981 newMap!16))))))))

(declare-fun b!61560 () Bool)

(assert (=> b!61560 (= e!40433 (contains!699 (toList!708 lt!25406) (tuple2!2061 lt!25195 (minValue!1981 newMap!16))))))

(assert (= (and d!12287 res!33872) b!61559))

(assert (= (and b!61559 res!33873) b!61560))

(declare-fun m!54507 () Bool)

(assert (=> d!12287 m!54507))

(declare-fun m!54509 () Bool)

(assert (=> d!12287 m!54509))

(declare-fun m!54511 () Bool)

(assert (=> d!12287 m!54511))

(declare-fun m!54513 () Bool)

(assert (=> d!12287 m!54513))

(declare-fun m!54515 () Bool)

(assert (=> b!61559 m!54515))

(declare-fun m!54517 () Bool)

(assert (=> b!61560 m!54517))

(assert (=> b!61147 d!12287))

(declare-fun d!12289 () Bool)

(declare-fun e!40434 () Bool)

(assert (=> d!12289 e!40434))

(declare-fun res!33874 () Bool)

(assert (=> d!12289 (=> (not res!33874) (not e!40434))))

(declare-fun lt!25410 () ListLongMap!1385)

(assert (=> d!12289 (= res!33874 (contains!697 lt!25410 (_1!1040 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16)))))))

(declare-fun lt!25412 () List!1459)

(assert (=> d!12289 (= lt!25410 (ListLongMap!1386 lt!25412))))

(declare-fun lt!25413 () Unit!1622)

(declare-fun lt!25411 () Unit!1622)

(assert (=> d!12289 (= lt!25413 lt!25411)))

(assert (=> d!12289 (= (getValueByKey!124 lt!25412 (_1!1040 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12289 (= lt!25411 (lemmaContainsTupThenGetReturnValue!43 lt!25412 (_1!1040 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12289 (= lt!25412 (insertStrictlySorted!45 (toList!708 lt!25190) (_1!1040 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12289 (= (+!82 lt!25190 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16))) lt!25410)))

(declare-fun b!61561 () Bool)

(declare-fun res!33875 () Bool)

(assert (=> b!61561 (=> (not res!33875) (not e!40434))))

(assert (=> b!61561 (= res!33875 (= (getValueByKey!124 (toList!708 lt!25410) (_1!1040 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16))))))))

(declare-fun b!61562 () Bool)

(assert (=> b!61562 (= e!40434 (contains!699 (toList!708 lt!25410) (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16))))))

(assert (= (and d!12289 res!33874) b!61561))

(assert (= (and b!61561 res!33875) b!61562))

(declare-fun m!54519 () Bool)

(assert (=> d!12289 m!54519))

(declare-fun m!54521 () Bool)

(assert (=> d!12289 m!54521))

(declare-fun m!54523 () Bool)

(assert (=> d!12289 m!54523))

(declare-fun m!54525 () Bool)

(assert (=> d!12289 m!54525))

(declare-fun m!54527 () Bool)

(assert (=> b!61561 m!54527))

(declare-fun m!54529 () Bool)

(assert (=> b!61562 m!54529))

(assert (=> b!61147 d!12289))

(declare-fun d!12291 () Bool)

(assert (=> d!12291 (= (apply!67 lt!25175 lt!25187) (get!1093 (getValueByKey!124 (toList!708 lt!25175) lt!25187)))))

(declare-fun bs!2673 () Bool)

(assert (= bs!2673 d!12291))

(declare-fun m!54531 () Bool)

(assert (=> bs!2673 m!54531))

(assert (=> bs!2673 m!54531))

(declare-fun m!54533 () Bool)

(assert (=> bs!2673 m!54533))

(assert (=> b!61147 d!12291))

(declare-fun d!12293 () Bool)

(assert (=> d!12293 (= (apply!67 (+!82 lt!25190 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16))) lt!25188) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!25190 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16)))) lt!25188)))))

(declare-fun bs!2674 () Bool)

(assert (= bs!2674 d!12293))

(declare-fun m!54535 () Bool)

(assert (=> bs!2674 m!54535))

(assert (=> bs!2674 m!54535))

(declare-fun m!54537 () Bool)

(assert (=> bs!2674 m!54537))

(assert (=> b!61147 d!12293))

(declare-fun b!61563 () Bool)

(declare-fun e!40438 () Bool)

(declare-fun e!40435 () Bool)

(assert (=> b!61563 (= e!40438 e!40435)))

(assert (=> b!61563 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun res!33876 () Bool)

(declare-fun lt!25417 () ListLongMap!1385)

(assert (=> b!61563 (= res!33876 (contains!697 lt!25417 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61563 (=> (not res!33876) (not e!40435))))

(declare-fun b!61564 () Bool)

(declare-fun e!40440 () Bool)

(assert (=> b!61564 (= e!40440 e!40438)))

(declare-fun c!8121 () Bool)

(declare-fun e!40439 () Bool)

(assert (=> b!61564 (= c!8121 e!40439)))

(declare-fun res!33878 () Bool)

(assert (=> b!61564 (=> (not res!33878) (not e!40439))))

(assert (=> b!61564 (= res!33878 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61565 () Bool)

(declare-fun e!40437 () ListLongMap!1385)

(declare-fun call!4739 () ListLongMap!1385)

(assert (=> b!61565 (= e!40437 call!4739)))

(declare-fun b!61566 () Bool)

(declare-fun e!40441 () Bool)

(assert (=> b!61566 (= e!40441 (= lt!25417 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16))))))

(declare-fun b!61567 () Bool)

(assert (=> b!61567 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(assert (=> b!61567 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_values!2050 newMap!16))))))

(assert (=> b!61567 (= e!40435 (= (apply!67 lt!25417 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61568 () Bool)

(declare-fun res!33879 () Bool)

(assert (=> b!61568 (=> (not res!33879) (not e!40440))))

(assert (=> b!61568 (= res!33879 (not (contains!697 lt!25417 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61569 () Bool)

(assert (=> b!61569 (= e!40438 e!40441)))

(declare-fun c!8123 () Bool)

(assert (=> b!61569 (= c!8123 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun bm!4736 () Bool)

(assert (=> bm!4736 (= call!4739 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16)))))

(declare-fun d!12295 () Bool)

(assert (=> d!12295 e!40440))

(declare-fun res!33877 () Bool)

(assert (=> d!12295 (=> (not res!33877) (not e!40440))))

(assert (=> d!12295 (= res!33877 (not (contains!697 lt!25417 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!40436 () ListLongMap!1385)

(assert (=> d!12295 (= lt!25417 e!40436)))

(declare-fun c!8120 () Bool)

(assert (=> d!12295 (= c!8120 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!12295 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12295 (= (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25417)))

(declare-fun b!61570 () Bool)

(assert (=> b!61570 (= e!40441 (isEmpty!302 lt!25417))))

(declare-fun b!61571 () Bool)

(assert (=> b!61571 (= e!40439 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61571 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!61572 () Bool)

(assert (=> b!61572 (= e!40436 e!40437)))

(declare-fun c!8122 () Bool)

(assert (=> b!61572 (= c!8122 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61573 () Bool)

(declare-fun lt!25420 () Unit!1622)

(declare-fun lt!25419 () Unit!1622)

(assert (=> b!61573 (= lt!25420 lt!25419)))

(declare-fun lt!25415 () (_ BitVec 64))

(declare-fun lt!25414 () ListLongMap!1385)

(declare-fun lt!25418 () (_ BitVec 64))

(declare-fun lt!25416 () V!2859)

(assert (=> b!61573 (not (contains!697 (+!82 lt!25414 (tuple2!2061 lt!25418 lt!25416)) lt!25415))))

(assert (=> b!61573 (= lt!25419 (addStillNotContains!18 lt!25414 lt!25418 lt!25416 lt!25415))))

(assert (=> b!61573 (= lt!25415 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61573 (= lt!25416 (get!1090 (select (arr!1793 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61573 (= lt!25418 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61573 (= lt!25414 call!4739)))

(assert (=> b!61573 (= e!40437 (+!82 call!4739 (tuple2!2061 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (get!1090 (select (arr!1793 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61574 () Bool)

(assert (=> b!61574 (= e!40436 (ListLongMap!1386 Nil!1456))))

(assert (= (and d!12295 c!8120) b!61574))

(assert (= (and d!12295 (not c!8120)) b!61572))

(assert (= (and b!61572 c!8122) b!61573))

(assert (= (and b!61572 (not c!8122)) b!61565))

(assert (= (or b!61573 b!61565) bm!4736))

(assert (= (and d!12295 res!33877) b!61568))

(assert (= (and b!61568 res!33879) b!61564))

(assert (= (and b!61564 res!33878) b!61571))

(assert (= (and b!61564 c!8121) b!61563))

(assert (= (and b!61564 (not c!8121)) b!61569))

(assert (= (and b!61563 res!33876) b!61567))

(assert (= (and b!61569 c!8123) b!61566))

(assert (= (and b!61569 (not c!8123)) b!61570))

(declare-fun b_lambda!2735 () Bool)

(assert (=> (not b_lambda!2735) (not b!61567)))

(assert (=> b!61567 t!4845))

(declare-fun b_and!3749 () Bool)

(assert (= b_and!3745 (and (=> t!4845 result!2435) b_and!3749)))

(assert (=> b!61567 t!4847))

(declare-fun b_and!3751 () Bool)

(assert (= b_and!3747 (and (=> t!4847 result!2437) b_and!3751)))

(declare-fun b_lambda!2737 () Bool)

(assert (=> (not b_lambda!2737) (not b!61573)))

(assert (=> b!61573 t!4845))

(declare-fun b_and!3753 () Bool)

(assert (= b_and!3749 (and (=> t!4845 result!2435) b_and!3753)))

(assert (=> b!61573 t!4847))

(declare-fun b_and!3755 () Bool)

(assert (= b_and!3751 (and (=> t!4847 result!2437) b_and!3755)))

(assert (=> b!61572 m!53471))

(assert (=> b!61572 m!53471))

(assert (=> b!61572 m!53473))

(assert (=> b!61573 m!53759))

(assert (=> b!61573 m!53493))

(assert (=> b!61573 m!53763))

(assert (=> b!61573 m!53759))

(assert (=> b!61573 m!53471))

(declare-fun m!54539 () Bool)

(assert (=> b!61573 m!54539))

(assert (=> b!61573 m!54539))

(declare-fun m!54541 () Bool)

(assert (=> b!61573 m!54541))

(declare-fun m!54543 () Bool)

(assert (=> b!61573 m!54543))

(assert (=> b!61573 m!53493))

(declare-fun m!54545 () Bool)

(assert (=> b!61573 m!54545))

(assert (=> b!61563 m!53471))

(assert (=> b!61563 m!53471))

(declare-fun m!54547 () Bool)

(assert (=> b!61563 m!54547))

(declare-fun m!54549 () Bool)

(assert (=> b!61566 m!54549))

(declare-fun m!54551 () Bool)

(assert (=> b!61570 m!54551))

(declare-fun m!54553 () Bool)

(assert (=> b!61568 m!54553))

(assert (=> bm!4736 m!54549))

(assert (=> b!61567 m!53471))

(assert (=> b!61567 m!53493))

(assert (=> b!61567 m!53759))

(assert (=> b!61567 m!53493))

(assert (=> b!61567 m!53763))

(assert (=> b!61567 m!53471))

(declare-fun m!54555 () Bool)

(assert (=> b!61567 m!54555))

(assert (=> b!61567 m!53759))

(declare-fun m!54557 () Bool)

(assert (=> d!12295 m!54557))

(assert (=> d!12295 m!53453))

(assert (=> b!61571 m!53471))

(assert (=> b!61571 m!53471))

(assert (=> b!61571 m!53473))

(assert (=> b!61147 d!12295))

(declare-fun d!12297 () Bool)

(declare-fun e!40443 () Bool)

(assert (=> d!12297 e!40443))

(declare-fun res!33880 () Bool)

(assert (=> d!12297 (=> res!33880 e!40443)))

(declare-fun lt!25421 () Bool)

(assert (=> d!12297 (= res!33880 (not lt!25421))))

(declare-fun lt!25423 () Bool)

(assert (=> d!12297 (= lt!25421 lt!25423)))

(declare-fun lt!25422 () Unit!1622)

(declare-fun e!40442 () Unit!1622)

(assert (=> d!12297 (= lt!25422 e!40442)))

(declare-fun c!8124 () Bool)

(assert (=> d!12297 (= c!8124 lt!25423)))

(assert (=> d!12297 (= lt!25423 (containsKey!128 (toList!708 (+!82 lt!25185 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16)))) lt!25177))))

(assert (=> d!12297 (= (contains!697 (+!82 lt!25185 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16))) lt!25177) lt!25421)))

(declare-fun b!61575 () Bool)

(declare-fun lt!25424 () Unit!1622)

(assert (=> b!61575 (= e!40442 lt!25424)))

(assert (=> b!61575 (= lt!25424 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 (+!82 lt!25185 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16)))) lt!25177))))

(assert (=> b!61575 (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!25185 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16)))) lt!25177))))

(declare-fun b!61576 () Bool)

(declare-fun Unit!1659 () Unit!1622)

(assert (=> b!61576 (= e!40442 Unit!1659)))

(declare-fun b!61577 () Bool)

(assert (=> b!61577 (= e!40443 (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!25185 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16)))) lt!25177)))))

(assert (= (and d!12297 c!8124) b!61575))

(assert (= (and d!12297 (not c!8124)) b!61576))

(assert (= (and d!12297 (not res!33880)) b!61577))

(declare-fun m!54559 () Bool)

(assert (=> d!12297 m!54559))

(declare-fun m!54561 () Bool)

(assert (=> b!61575 m!54561))

(declare-fun m!54563 () Bool)

(assert (=> b!61575 m!54563))

(assert (=> b!61575 m!54563))

(declare-fun m!54565 () Bool)

(assert (=> b!61575 m!54565))

(assert (=> b!61577 m!54563))

(assert (=> b!61577 m!54563))

(assert (=> b!61577 m!54565))

(assert (=> b!61147 d!12297))

(declare-fun d!12299 () Bool)

(assert (=> d!12299 (= (apply!67 (+!82 lt!25175 (tuple2!2061 lt!25195 (minValue!1981 newMap!16))) lt!25187) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!25175 (tuple2!2061 lt!25195 (minValue!1981 newMap!16)))) lt!25187)))))

(declare-fun bs!2675 () Bool)

(assert (= bs!2675 d!12299))

(declare-fun m!54567 () Bool)

(assert (=> bs!2675 m!54567))

(assert (=> bs!2675 m!54567))

(declare-fun m!54569 () Bool)

(assert (=> bs!2675 m!54569))

(assert (=> b!61147 d!12299))

(declare-fun d!12301 () Bool)

(assert (=> d!12301 (= (apply!67 lt!25196 lt!25189) (get!1093 (getValueByKey!124 (toList!708 lt!25196) lt!25189)))))

(declare-fun bs!2676 () Bool)

(assert (= bs!2676 d!12301))

(declare-fun m!54571 () Bool)

(assert (=> bs!2676 m!54571))

(assert (=> bs!2676 m!54571))

(declare-fun m!54573 () Bool)

(assert (=> bs!2676 m!54573))

(assert (=> b!61147 d!12301))

(declare-fun d!12303 () Bool)

(declare-fun e!40444 () Bool)

(assert (=> d!12303 e!40444))

(declare-fun res!33881 () Bool)

(assert (=> d!12303 (=> (not res!33881) (not e!40444))))

(declare-fun lt!25425 () ListLongMap!1385)

(assert (=> d!12303 (= res!33881 (contains!697 lt!25425 (_1!1040 (tuple2!2061 lt!25183 (minValue!1981 newMap!16)))))))

(declare-fun lt!25427 () List!1459)

(assert (=> d!12303 (= lt!25425 (ListLongMap!1386 lt!25427))))

(declare-fun lt!25428 () Unit!1622)

(declare-fun lt!25426 () Unit!1622)

(assert (=> d!12303 (= lt!25428 lt!25426)))

(assert (=> d!12303 (= (getValueByKey!124 lt!25427 (_1!1040 (tuple2!2061 lt!25183 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25183 (minValue!1981 newMap!16)))))))

(assert (=> d!12303 (= lt!25426 (lemmaContainsTupThenGetReturnValue!43 lt!25427 (_1!1040 (tuple2!2061 lt!25183 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25183 (minValue!1981 newMap!16)))))))

(assert (=> d!12303 (= lt!25427 (insertStrictlySorted!45 (toList!708 lt!25196) (_1!1040 (tuple2!2061 lt!25183 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25183 (minValue!1981 newMap!16)))))))

(assert (=> d!12303 (= (+!82 lt!25196 (tuple2!2061 lt!25183 (minValue!1981 newMap!16))) lt!25425)))

(declare-fun b!61578 () Bool)

(declare-fun res!33882 () Bool)

(assert (=> b!61578 (=> (not res!33882) (not e!40444))))

(assert (=> b!61578 (= res!33882 (= (getValueByKey!124 (toList!708 lt!25425) (_1!1040 (tuple2!2061 lt!25183 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25183 (minValue!1981 newMap!16))))))))

(declare-fun b!61579 () Bool)

(assert (=> b!61579 (= e!40444 (contains!699 (toList!708 lt!25425) (tuple2!2061 lt!25183 (minValue!1981 newMap!16))))))

(assert (= (and d!12303 res!33881) b!61578))

(assert (= (and b!61578 res!33882) b!61579))

(declare-fun m!54575 () Bool)

(assert (=> d!12303 m!54575))

(declare-fun m!54577 () Bool)

(assert (=> d!12303 m!54577))

(declare-fun m!54579 () Bool)

(assert (=> d!12303 m!54579))

(declare-fun m!54581 () Bool)

(assert (=> d!12303 m!54581))

(declare-fun m!54583 () Bool)

(assert (=> b!61578 m!54583))

(declare-fun m!54585 () Bool)

(assert (=> b!61579 m!54585))

(assert (=> b!61147 d!12303))

(declare-fun d!12305 () Bool)

(assert (=> d!12305 (= (apply!67 (+!82 lt!25196 (tuple2!2061 lt!25183 (minValue!1981 newMap!16))) lt!25189) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!25196 (tuple2!2061 lt!25183 (minValue!1981 newMap!16)))) lt!25189)))))

(declare-fun bs!2677 () Bool)

(assert (= bs!2677 d!12305))

(declare-fun m!54587 () Bool)

(assert (=> bs!2677 m!54587))

(assert (=> bs!2677 m!54587))

(declare-fun m!54589 () Bool)

(assert (=> bs!2677 m!54589))

(assert (=> b!61147 d!12305))

(declare-fun d!12307 () Bool)

(declare-fun e!40445 () Bool)

(assert (=> d!12307 e!40445))

(declare-fun res!33883 () Bool)

(assert (=> d!12307 (=> (not res!33883) (not e!40445))))

(declare-fun lt!25429 () ListLongMap!1385)

(assert (=> d!12307 (= res!33883 (contains!697 lt!25429 (_1!1040 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16)))))))

(declare-fun lt!25431 () List!1459)

(assert (=> d!12307 (= lt!25429 (ListLongMap!1386 lt!25431))))

(declare-fun lt!25432 () Unit!1622)

(declare-fun lt!25430 () Unit!1622)

(assert (=> d!12307 (= lt!25432 lt!25430)))

(assert (=> d!12307 (= (getValueByKey!124 lt!25431 (_1!1040 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12307 (= lt!25430 (lemmaContainsTupThenGetReturnValue!43 lt!25431 (_1!1040 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12307 (= lt!25431 (insertStrictlySorted!45 (toList!708 lt!25185) (_1!1040 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16))) (_2!1040 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12307 (= (+!82 lt!25185 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16))) lt!25429)))

(declare-fun b!61580 () Bool)

(declare-fun res!33884 () Bool)

(assert (=> b!61580 (=> (not res!33884) (not e!40445))))

(assert (=> b!61580 (= res!33884 (= (getValueByKey!124 (toList!708 lt!25429) (_1!1040 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16))))))))

(declare-fun b!61581 () Bool)

(assert (=> b!61581 (= e!40445 (contains!699 (toList!708 lt!25429) (tuple2!2061 lt!25176 (zeroValue!1981 newMap!16))))))

(assert (= (and d!12307 res!33883) b!61580))

(assert (= (and b!61580 res!33884) b!61581))

(declare-fun m!54591 () Bool)

(assert (=> d!12307 m!54591))

(declare-fun m!54593 () Bool)

(assert (=> d!12307 m!54593))

(declare-fun m!54595 () Bool)

(assert (=> d!12307 m!54595))

(declare-fun m!54597 () Bool)

(assert (=> d!12307 m!54597))

(declare-fun m!54599 () Bool)

(assert (=> b!61580 m!54599))

(declare-fun m!54601 () Bool)

(assert (=> b!61581 m!54601))

(assert (=> b!61147 d!12307))

(declare-fun d!12309 () Bool)

(assert (=> d!12309 (= (apply!67 (+!82 lt!25190 (tuple2!2061 lt!25194 (zeroValue!1981 newMap!16))) lt!25188) (apply!67 lt!25190 lt!25188))))

(declare-fun lt!25433 () Unit!1622)

(assert (=> d!12309 (= lt!25433 (choose!330 lt!25190 lt!25194 (zeroValue!1981 newMap!16) lt!25188))))

(declare-fun e!40446 () Bool)

(assert (=> d!12309 e!40446))

(declare-fun res!33885 () Bool)

(assert (=> d!12309 (=> (not res!33885) (not e!40446))))

(assert (=> d!12309 (= res!33885 (contains!697 lt!25190 lt!25188))))

(assert (=> d!12309 (= (addApplyDifferent!43 lt!25190 lt!25194 (zeroValue!1981 newMap!16) lt!25188) lt!25433)))

(declare-fun b!61582 () Bool)

(assert (=> b!61582 (= e!40446 (not (= lt!25188 lt!25194)))))

(assert (= (and d!12309 res!33885) b!61582))

(assert (=> d!12309 m!53793))

(assert (=> d!12309 m!53775))

(assert (=> d!12309 m!53791))

(assert (=> d!12309 m!53775))

(declare-fun m!54603 () Bool)

(assert (=> d!12309 m!54603))

(declare-fun m!54605 () Bool)

(assert (=> d!12309 m!54605))

(assert (=> b!61147 d!12309))

(declare-fun d!12311 () Bool)

(assert (=> d!12311 (= (apply!67 (+!82 lt!25175 (tuple2!2061 lt!25195 (minValue!1981 newMap!16))) lt!25187) (apply!67 lt!25175 lt!25187))))

(declare-fun lt!25434 () Unit!1622)

(assert (=> d!12311 (= lt!25434 (choose!330 lt!25175 lt!25195 (minValue!1981 newMap!16) lt!25187))))

(declare-fun e!40447 () Bool)

(assert (=> d!12311 e!40447))

(declare-fun res!33886 () Bool)

(assert (=> d!12311 (=> (not res!33886) (not e!40447))))

(assert (=> d!12311 (= res!33886 (contains!697 lt!25175 lt!25187))))

(assert (=> d!12311 (= (addApplyDifferent!43 lt!25175 lt!25195 (minValue!1981 newMap!16) lt!25187) lt!25434)))

(declare-fun b!61583 () Bool)

(assert (=> b!61583 (= e!40447 (not (= lt!25187 lt!25195)))))

(assert (= (and d!12311 res!33886) b!61583))

(assert (=> d!12311 m!53771))

(assert (=> d!12311 m!53779))

(assert (=> d!12311 m!53781))

(assert (=> d!12311 m!53779))

(declare-fun m!54607 () Bool)

(assert (=> d!12311 m!54607))

(declare-fun m!54609 () Bool)

(assert (=> d!12311 m!54609))

(assert (=> b!61147 d!12311))

(assert (=> d!12007 d!11955))

(declare-fun b!61584 () Bool)

(declare-fun e!40448 () Bool)

(declare-fun e!40450 () Bool)

(assert (=> b!61584 (= e!40448 e!40450)))

(declare-fun c!8125 () Bool)

(assert (=> b!61584 (= c!8125 (validKeyInArray!0 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun call!4740 () Bool)

(declare-fun bm!4737 () Bool)

(assert (=> bm!4737 (= call!4740 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (mask!5963 newMap!16)))))

(declare-fun b!61585 () Bool)

(declare-fun e!40449 () Bool)

(assert (=> b!61585 (= e!40449 call!4740)))

(declare-fun d!12313 () Bool)

(declare-fun res!33887 () Bool)

(assert (=> d!12313 (=> res!33887 e!40448)))

(assert (=> d!12313 (= res!33887 (bvsge #b00000000000000000000000000000000 (size!2023 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))))))

(assert (=> d!12313 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (mask!5963 newMap!16)) e!40448)))

(declare-fun b!61586 () Bool)

(assert (=> b!61586 (= e!40450 e!40449)))

(declare-fun lt!25436 () (_ BitVec 64))

(assert (=> b!61586 (= lt!25436 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25435 () Unit!1622)

(assert (=> b!61586 (= lt!25435 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) lt!25436 #b00000000000000000000000000000000))))

(assert (=> b!61586 (arrayContainsKey!0 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) lt!25436 #b00000000000000000000000000000000)))

(declare-fun lt!25437 () Unit!1622)

(assert (=> b!61586 (= lt!25437 lt!25435)))

(declare-fun res!33888 () Bool)

(assert (=> b!61586 (= res!33888 (= (seekEntryOrOpen!0 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000) (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (mask!5963 newMap!16)) (Found!238 #b00000000000000000000000000000000)))))

(assert (=> b!61586 (=> (not res!33888) (not e!40449))))

(declare-fun b!61587 () Bool)

(assert (=> b!61587 (= e!40450 call!4740)))

(assert (= (and d!12313 (not res!33887)) b!61584))

(assert (= (and b!61584 c!8125) b!61586))

(assert (= (and b!61584 (not c!8125)) b!61587))

(assert (= (and b!61586 res!33888) b!61585))

(assert (= (or b!61585 b!61587) bm!4737))

(declare-fun m!54611 () Bool)

(assert (=> b!61584 m!54611))

(assert (=> b!61584 m!54611))

(declare-fun m!54613 () Bool)

(assert (=> b!61584 m!54613))

(declare-fun m!54615 () Bool)

(assert (=> bm!4737 m!54615))

(assert (=> b!61586 m!54611))

(declare-fun m!54617 () Bool)

(assert (=> b!61586 m!54617))

(declare-fun m!54619 () Bool)

(assert (=> b!61586 m!54619))

(assert (=> b!61586 m!54611))

(declare-fun m!54621 () Bool)

(assert (=> b!61586 m!54621))

(assert (=> d!11987 d!12313))

(declare-fun b!61588 () Bool)

(declare-fun e!40451 () (_ BitVec 32))

(declare-fun e!40452 () (_ BitVec 32))

(assert (=> b!61588 (= e!40451 e!40452)))

(declare-fun c!8127 () Bool)

(assert (=> b!61588 (= c!8127 (validKeyInArray!0 (select (arr!1792 lt!25126) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)))))))

(declare-fun d!12315 () Bool)

(declare-fun lt!25438 () (_ BitVec 32))

(assert (=> d!12315 (and (bvsge lt!25438 #b00000000000000000000000000000000) (bvsle lt!25438 (bvsub (size!2023 lt!25126) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)))))))

(assert (=> d!12315 (= lt!25438 e!40451)))

(declare-fun c!8126 () Bool)

(assert (=> d!12315 (= c!8126 (bvsge (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (bvadd (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000001)))))

(assert (=> d!12315 (and (bvsle (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (bvadd (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000001)) (bvsge (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000001) (size!2023 lt!25126)))))

(assert (=> d!12315 (= (arrayCountValidKeys!0 lt!25126 (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (bvadd (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000001)) lt!25438)))

(declare-fun b!61589 () Bool)

(assert (=> b!61589 (= e!40451 #b00000000000000000000000000000000)))

(declare-fun b!61590 () Bool)

(declare-fun call!4741 () (_ BitVec 32))

(assert (=> b!61590 (= e!40452 call!4741)))

(declare-fun bm!4738 () Bool)

(assert (=> bm!4738 (= call!4741 (arrayCountValidKeys!0 lt!25126 (bvadd (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000001) (bvadd (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000001)))))

(declare-fun b!61591 () Bool)

(assert (=> b!61591 (= e!40452 (bvadd #b00000000000000000000000000000001 call!4741))))

(assert (= (and d!12315 c!8126) b!61589))

(assert (= (and d!12315 (not c!8126)) b!61588))

(assert (= (and b!61588 c!8127) b!61591))

(assert (= (and b!61588 (not c!8127)) b!61590))

(assert (= (or b!61591 b!61590) bm!4738))

(declare-fun m!54623 () Bool)

(assert (=> b!61588 m!54623))

(assert (=> b!61588 m!54623))

(declare-fun m!54625 () Bool)

(assert (=> b!61588 m!54625))

(declare-fun m!54627 () Bool)

(assert (=> bm!4738 m!54627))

(assert (=> d!11987 d!12315))

(declare-fun b!61592 () Bool)

(declare-fun e!40453 () (_ BitVec 32))

(declare-fun e!40454 () (_ BitVec 32))

(assert (=> b!61592 (= e!40453 e!40454)))

(declare-fun c!8129 () Bool)

(assert (=> b!61592 (= c!8129 (validKeyInArray!0 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun d!12317 () Bool)

(declare-fun lt!25439 () (_ BitVec 32))

(assert (=> d!12317 (and (bvsge lt!25439 #b00000000000000000000000000000000) (bvsle lt!25439 (bvsub (size!2023 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!12317 (= lt!25439 e!40453)))

(declare-fun c!8128 () Bool)

(assert (=> d!12317 (= c!8128 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!12317 (and (bvsle #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2023 (_keys!3695 newMap!16)) (size!2023 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))))))

(assert (=> d!12317 (= (arrayCountValidKeys!0 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) lt!25439)))

(declare-fun b!61593 () Bool)

(assert (=> b!61593 (= e!40453 #b00000000000000000000000000000000)))

(declare-fun b!61594 () Bool)

(declare-fun call!4742 () (_ BitVec 32))

(assert (=> b!61594 (= e!40454 call!4742)))

(declare-fun bm!4739 () Bool)

(assert (=> bm!4739 (= call!4742 (arrayCountValidKeys!0 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61595 () Bool)

(assert (=> b!61595 (= e!40454 (bvadd #b00000000000000000000000000000001 call!4742))))

(assert (= (and d!12317 c!8128) b!61593))

(assert (= (and d!12317 (not c!8128)) b!61592))

(assert (= (and b!61592 c!8129) b!61595))

(assert (= (and b!61592 (not c!8129)) b!61594))

(assert (= (or b!61595 b!61594) bm!4739))

(assert (=> b!61592 m!54611))

(assert (=> b!61592 m!54611))

(assert (=> b!61592 m!54613))

(declare-fun m!54629 () Bool)

(assert (=> bm!4739 m!54629))

(assert (=> d!11987 d!12317))

(assert (=> d!11987 d!12013))

(declare-fun d!12319 () Bool)

(declare-fun e!40456 () Bool)

(assert (=> d!12319 e!40456))

(declare-fun res!33889 () Bool)

(assert (=> d!12319 (=> res!33889 e!40456)))

(declare-fun lt!25440 () Bool)

(assert (=> d!12319 (= res!33889 (not lt!25440))))

(declare-fun lt!25442 () Bool)

(assert (=> d!12319 (= lt!25440 lt!25442)))

(declare-fun lt!25441 () Unit!1622)

(declare-fun e!40455 () Unit!1622)

(assert (=> d!12319 (= lt!25441 e!40455)))

(declare-fun c!8130 () Bool)

(assert (=> d!12319 (= c!8130 lt!25442)))

(assert (=> d!12319 (= lt!25442 (containsKey!128 (toList!708 (getCurrentListMap!405 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)))))))

(assert (=> d!12319 (= (contains!697 (getCurrentListMap!405 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)))) lt!25440)))

(declare-fun b!61596 () Bool)

(declare-fun lt!25443 () Unit!1622)

(assert (=> b!61596 (= e!40455 lt!25443)))

(assert (=> b!61596 (= lt!25443 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 (getCurrentListMap!405 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)))))))

(assert (=> b!61596 (isDefined!78 (getValueByKey!124 (toList!708 (getCurrentListMap!405 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)))))))

(declare-fun b!61597 () Bool)

(declare-fun Unit!1660 () Unit!1622)

(assert (=> b!61597 (= e!40455 Unit!1660)))

(declare-fun b!61598 () Bool)

(assert (=> b!61598 (= e!40456 (isDefined!78 (getValueByKey!124 (toList!708 (getCurrentListMap!405 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888))))))))

(assert (= (and d!12319 c!8130) b!61596))

(assert (= (and d!12319 (not c!8130)) b!61597))

(assert (= (and d!12319 (not res!33889)) b!61598))

(assert (=> d!12319 m!53637))

(declare-fun m!54631 () Bool)

(assert (=> d!12319 m!54631))

(assert (=> b!61596 m!53637))

(declare-fun m!54633 () Bool)

(assert (=> b!61596 m!54633))

(assert (=> b!61596 m!53637))

(declare-fun m!54635 () Bool)

(assert (=> b!61596 m!54635))

(assert (=> b!61596 m!54635))

(declare-fun m!54637 () Bool)

(assert (=> b!61596 m!54637))

(assert (=> b!61598 m!53637))

(assert (=> b!61598 m!54635))

(assert (=> b!61598 m!54635))

(assert (=> b!61598 m!54637))

(assert (=> d!11987 d!12319))

(assert (=> d!11987 d!12077))

(declare-fun d!12321 () Bool)

(declare-fun res!33890 () Bool)

(declare-fun e!40457 () Bool)

(assert (=> d!12321 (=> res!33890 e!40457)))

(assert (=> d!12321 (= res!33890 (= (select (arr!1792 lt!25134) #b00000000000000000000000000000000) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12321 (= (arrayContainsKey!0 lt!25134 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000) e!40457)))

(declare-fun b!61599 () Bool)

(declare-fun e!40458 () Bool)

(assert (=> b!61599 (= e!40457 e!40458)))

(declare-fun res!33891 () Bool)

(assert (=> b!61599 (=> (not res!33891) (not e!40458))))

(assert (=> b!61599 (= res!33891 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 lt!25134)))))

(declare-fun b!61600 () Bool)

(assert (=> b!61600 (= e!40458 (arrayContainsKey!0 lt!25134 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12321 (not res!33890)) b!61599))

(assert (= (and b!61599 res!33891) b!61600))

(declare-fun m!54639 () Bool)

(assert (=> d!12321 m!54639))

(assert (=> b!61600 m!53207))

(declare-fun m!54641 () Bool)

(assert (=> b!61600 m!54641))

(assert (=> d!11987 d!12321))

(assert (=> d!11987 d!11969))

(declare-fun d!12323 () Bool)

(declare-fun e!40461 () Bool)

(assert (=> d!12323 e!40461))

(declare-fun res!33894 () Bool)

(assert (=> d!12323 (=> (not res!33894) (not e!40461))))

(assert (=> d!12323 (= res!33894 (and (bvsge (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000000) (bvslt (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (size!2023 (_keys!3695 newMap!16)))))))

(declare-fun lt!25446 () Unit!1622)

(declare-fun choose!41 (array!3746 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1460) Unit!1622)

(assert (=> d!12323 (= lt!25446 (choose!41 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) lt!25123 lt!25115))))

(assert (=> d!12323 (bvslt (size!2023 (_keys!3695 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!12323 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) lt!25123 lt!25115) lt!25446)))

(declare-fun b!61603 () Bool)

(assert (=> b!61603 (= e!40461 (arrayNoDuplicates!0 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) lt!25123 lt!25115))))

(assert (= (and d!12323 res!33894) b!61603))

(assert (=> d!12323 m!53207))

(declare-fun m!54643 () Bool)

(assert (=> d!12323 m!54643))

(assert (=> b!61603 m!53657))

(assert (=> b!61603 m!53669))

(assert (=> d!11987 d!12323))

(declare-fun d!12325 () Bool)

(declare-fun e!40464 () Bool)

(assert (=> d!12325 e!40464))

(declare-fun res!33897 () Bool)

(assert (=> d!12325 (=> (not res!33897) (not e!40464))))

(assert (=> d!12325 (= res!33897 (and (bvsge (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000000) (bvslt (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (size!2023 (_keys!3695 newMap!16)))))))

(declare-fun lt!25449 () Unit!1622)

(declare-fun choose!102 ((_ BitVec 64) array!3746 (_ BitVec 32) (_ BitVec 32)) Unit!1622)

(assert (=> d!12325 (= lt!25449 (choose!102 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (mask!5963 newMap!16)))))

(assert (=> d!12325 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12325 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (mask!5963 newMap!16)) lt!25449)))

(declare-fun b!61606 () Bool)

(assert (=> b!61606 (= e!40464 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (mask!5963 newMap!16)))))

(assert (= (and d!12325 res!33897) b!61606))

(assert (=> d!12325 m!53207))

(declare-fun m!54645 () Bool)

(assert (=> d!12325 m!54645))

(assert (=> d!12325 m!53453))

(assert (=> b!61606 m!53657))

(assert (=> b!61606 m!53663))

(assert (=> d!11987 d!12325))

(declare-fun d!12327 () Bool)

(assert (=> d!12327 (arrayContainsKey!0 lt!25134 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!25452 () Unit!1622)

(declare-fun choose!13 (array!3746 (_ BitVec 64) (_ BitVec 32)) Unit!1622)

(assert (=> d!12327 (= lt!25452 (choose!13 lt!25134 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888))))))

(assert (=> d!12327 (bvsge (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000000)))

(assert (=> d!12327 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!25134 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888))) lt!25452)))

(declare-fun bs!2678 () Bool)

(assert (= bs!2678 d!12327))

(assert (=> bs!2678 m!53207))

(assert (=> bs!2678 m!53655))

(assert (=> bs!2678 m!53207))

(declare-fun m!54647 () Bool)

(assert (=> bs!2678 m!54647))

(assert (=> d!11987 d!12327))

(declare-fun d!12329 () Bool)

(declare-fun e!40467 () Bool)

(assert (=> d!12329 e!40467))

(declare-fun res!33900 () Bool)

(assert (=> d!12329 (=> (not res!33900) (not e!40467))))

(assert (=> d!12329 (= res!33900 (and (bvsge (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000000) (bvslt (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (size!2023 (_keys!3695 newMap!16))) (bvslt (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (size!2024 (_values!2050 newMap!16)))))))

(declare-fun lt!25455 () Unit!1622)

(declare-fun choose!334 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) (_ BitVec 64) V!2859 Int) Unit!1622)

(assert (=> d!12329 (= lt!25455 (choose!334 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(assert (=> d!12329 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12329 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!6 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)) lt!25455)))

(declare-fun b!61609 () Bool)

(assert (=> b!61609 (= e!40467 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))))))

(assert (= (and d!12329 res!33900) b!61609))

(assert (=> d!12329 m!53207))

(assert (=> d!12329 m!53227))

(declare-fun m!54649 () Bool)

(assert (=> d!12329 m!54649))

(assert (=> d!12329 m!53453))

(assert (=> b!61609 m!53319))

(assert (=> b!61609 m!53653))

(assert (=> b!61609 m!53319))

(assert (=> b!61609 m!53461))

(assert (=> b!61609 m!53645))

(assert (=> b!61609 m!53657))

(assert (=> d!11987 d!12329))

(declare-fun b!61619 () Bool)

(declare-fun res!33912 () Bool)

(declare-fun e!40472 () Bool)

(assert (=> b!61619 (=> (not res!33912) (not e!40472))))

(assert (=> b!61619 (= res!33912 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun d!12331 () Bool)

(declare-fun e!40473 () Bool)

(assert (=> d!12331 e!40473))

(declare-fun res!33911 () Bool)

(assert (=> d!12331 (=> (not res!33911) (not e!40473))))

(assert (=> d!12331 (= res!33911 (and (bvsge (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000000) (bvslt (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (size!2023 (_keys!3695 newMap!16)))))))

(declare-fun lt!25458 () Unit!1622)

(declare-fun choose!1 (array!3746 (_ BitVec 32) (_ BitVec 64)) Unit!1622)

(assert (=> d!12331 (= lt!25458 (choose!1 (_keys!3695 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12331 e!40472))

(declare-fun res!33909 () Bool)

(assert (=> d!12331 (=> (not res!33909) (not e!40472))))

(assert (=> d!12331 (= res!33909 (and (bvsge (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000000) (bvslt (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (size!2023 (_keys!3695 newMap!16)))))))

(assert (=> d!12331 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3695 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) lt!25458)))

(declare-fun b!61620 () Bool)

(assert (=> b!61620 (= e!40472 (bvslt (size!2023 (_keys!3695 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!61621 () Bool)

(assert (=> b!61621 (= e!40473 (= (arrayCountValidKeys!0 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!61618 () Bool)

(declare-fun res!33910 () Bool)

(assert (=> b!61618 (=> (not res!33910) (not e!40472))))

(assert (=> b!61618 (= res!33910 (not (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888))))))))

(assert (= (and d!12331 res!33909) b!61618))

(assert (= (and b!61618 res!33910) b!61619))

(assert (= (and b!61619 res!33912) b!61620))

(assert (= (and d!12331 res!33911) b!61621))

(assert (=> b!61619 m!53207))

(assert (=> b!61619 m!53433))

(assert (=> d!12331 m!53207))

(declare-fun m!54651 () Bool)

(assert (=> d!12331 m!54651))

(assert (=> b!61621 m!53657))

(assert (=> b!61621 m!53665))

(assert (=> b!61621 m!53417))

(declare-fun m!54653 () Bool)

(assert (=> b!61618 m!54653))

(assert (=> b!61618 m!54653))

(declare-fun m!54655 () Bool)

(assert (=> b!61618 m!54655))

(assert (=> d!11987 d!12331))

(declare-fun bm!4740 () Bool)

(declare-fun call!4746 () ListLongMap!1385)

(declare-fun call!4744 () ListLongMap!1385)

(assert (=> bm!4740 (= call!4746 call!4744)))

(declare-fun b!61622 () Bool)

(declare-fun res!33916 () Bool)

(declare-fun e!40480 () Bool)

(assert (=> b!61622 (=> (not res!33916) (not e!40480))))

(declare-fun e!40481 () Bool)

(assert (=> b!61622 (= res!33916 e!40481)))

(declare-fun c!8131 () Bool)

(assert (=> b!61622 (= c!8131 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4741 () Bool)

(assert (=> bm!4741 (= call!4744 (getCurrentListMapNoExtraKeys!45 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61623 () Bool)

(declare-fun e!40486 () Bool)

(declare-fun lt!25463 () ListLongMap!1385)

(assert (=> b!61623 (= e!40486 (= (apply!67 lt!25463 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!61624 () Bool)

(declare-fun e!40478 () Bool)

(assert (=> b!61624 (= e!40481 e!40478)))

(declare-fun res!33919 () Bool)

(declare-fun call!4747 () Bool)

(assert (=> b!61624 (= res!33919 call!4747)))

(assert (=> b!61624 (=> (not res!33919) (not e!40478))))

(declare-fun b!61625 () Bool)

(assert (=> b!61625 (= e!40478 (= (apply!67 lt!25463 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun b!61626 () Bool)

(declare-fun e!40485 () Bool)

(assert (=> b!61626 (= e!40485 e!40486)))

(declare-fun res!33913 () Bool)

(declare-fun call!4749 () Bool)

(assert (=> b!61626 (= res!33913 call!4749)))

(assert (=> b!61626 (=> (not res!33913) (not e!40486))))

(declare-fun b!61627 () Bool)

(declare-fun c!8135 () Bool)

(assert (=> b!61627 (= c!8135 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40483 () ListLongMap!1385)

(declare-fun e!40474 () ListLongMap!1385)

(assert (=> b!61627 (= e!40483 e!40474)))

(declare-fun b!61628 () Bool)

(declare-fun e!40482 () Bool)

(declare-fun e!40476 () Bool)

(assert (=> b!61628 (= e!40482 e!40476)))

(declare-fun res!33917 () Bool)

(assert (=> b!61628 (=> (not res!33917) (not e!40476))))

(assert (=> b!61628 (= res!33917 (contains!697 lt!25463 (select (arr!1792 lt!25108) #b00000000000000000000000000000000)))))

(assert (=> b!61628 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 lt!25108)))))

(declare-fun b!61629 () Bool)

(assert (=> b!61629 (= e!40480 e!40485)))

(declare-fun c!8136 () Bool)

(assert (=> b!61629 (= c!8136 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4742 () Bool)

(assert (=> bm!4742 (= call!4747 (contains!697 lt!25463 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61630 () Bool)

(declare-fun call!4745 () ListLongMap!1385)

(assert (=> b!61630 (= e!40474 call!4745)))

(declare-fun c!8134 () Bool)

(declare-fun call!4748 () ListLongMap!1385)

(declare-fun bm!4743 () Bool)

(declare-fun c!8132 () Bool)

(declare-fun call!4743 () ListLongMap!1385)

(assert (=> bm!4743 (= call!4743 (+!82 (ite c!8132 call!4744 (ite c!8134 call!4746 call!4748)) (ite (or c!8132 c!8134) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!61631 () Bool)

(declare-fun e!40479 () Bool)

(assert (=> b!61631 (= e!40479 (validKeyInArray!0 (select (arr!1792 lt!25108) #b00000000000000000000000000000000)))))

(declare-fun b!61632 () Bool)

(assert (=> b!61632 (= e!40474 call!4748)))

(declare-fun b!61633 () Bool)

(declare-fun e!40475 () Unit!1622)

(declare-fun Unit!1661 () Unit!1622)

(assert (=> b!61633 (= e!40475 Unit!1661)))

(declare-fun bm!4744 () Bool)

(assert (=> bm!4744 (= call!4748 call!4746)))

(declare-fun d!12333 () Bool)

(assert (=> d!12333 e!40480))

(declare-fun res!33920 () Bool)

(assert (=> d!12333 (=> (not res!33920) (not e!40480))))

(assert (=> d!12333 (= res!33920 (or (bvsge #b00000000000000000000000000000000 (size!2023 lt!25108)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 lt!25108)))))))

(declare-fun lt!25475 () ListLongMap!1385)

(assert (=> d!12333 (= lt!25463 lt!25475)))

(declare-fun lt!25468 () Unit!1622)

(assert (=> d!12333 (= lt!25468 e!40475)))

(declare-fun c!8133 () Bool)

(declare-fun e!40477 () Bool)

(assert (=> d!12333 (= c!8133 e!40477)))

(declare-fun res!33918 () Bool)

(assert (=> d!12333 (=> (not res!33918) (not e!40477))))

(assert (=> d!12333 (= res!33918 (bvslt #b00000000000000000000000000000000 (size!2023 lt!25108)))))

(declare-fun e!40484 () ListLongMap!1385)

(assert (=> d!12333 (= lt!25475 e!40484)))

(assert (=> d!12333 (= c!8132 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12333 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12333 (= (getCurrentListMap!405 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25463)))

(declare-fun b!61634 () Bool)

(declare-fun lt!25466 () Unit!1622)

(assert (=> b!61634 (= e!40475 lt!25466)))

(declare-fun lt!25469 () ListLongMap!1385)

(assert (=> b!61634 (= lt!25469 (getCurrentListMapNoExtraKeys!45 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25460 () (_ BitVec 64))

(assert (=> b!61634 (= lt!25460 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25461 () (_ BitVec 64))

(assert (=> b!61634 (= lt!25461 (select (arr!1792 lt!25108) #b00000000000000000000000000000000))))

(declare-fun lt!25476 () Unit!1622)

(assert (=> b!61634 (= lt!25476 (addStillContains!43 lt!25469 lt!25460 (zeroValue!1981 newMap!16) lt!25461))))

(assert (=> b!61634 (contains!697 (+!82 lt!25469 (tuple2!2061 lt!25460 (zeroValue!1981 newMap!16))) lt!25461)))

(declare-fun lt!25465 () Unit!1622)

(assert (=> b!61634 (= lt!25465 lt!25476)))

(declare-fun lt!25459 () ListLongMap!1385)

(assert (=> b!61634 (= lt!25459 (getCurrentListMapNoExtraKeys!45 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25479 () (_ BitVec 64))

(assert (=> b!61634 (= lt!25479 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25471 () (_ BitVec 64))

(assert (=> b!61634 (= lt!25471 (select (arr!1792 lt!25108) #b00000000000000000000000000000000))))

(declare-fun lt!25464 () Unit!1622)

(assert (=> b!61634 (= lt!25464 (addApplyDifferent!43 lt!25459 lt!25479 (minValue!1981 newMap!16) lt!25471))))

(assert (=> b!61634 (= (apply!67 (+!82 lt!25459 (tuple2!2061 lt!25479 (minValue!1981 newMap!16))) lt!25471) (apply!67 lt!25459 lt!25471))))

(declare-fun lt!25477 () Unit!1622)

(assert (=> b!61634 (= lt!25477 lt!25464)))

(declare-fun lt!25474 () ListLongMap!1385)

(assert (=> b!61634 (= lt!25474 (getCurrentListMapNoExtraKeys!45 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25478 () (_ BitVec 64))

(assert (=> b!61634 (= lt!25478 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25472 () (_ BitVec 64))

(assert (=> b!61634 (= lt!25472 (select (arr!1792 lt!25108) #b00000000000000000000000000000000))))

(declare-fun lt!25462 () Unit!1622)

(assert (=> b!61634 (= lt!25462 (addApplyDifferent!43 lt!25474 lt!25478 (zeroValue!1981 newMap!16) lt!25472))))

(assert (=> b!61634 (= (apply!67 (+!82 lt!25474 (tuple2!2061 lt!25478 (zeroValue!1981 newMap!16))) lt!25472) (apply!67 lt!25474 lt!25472))))

(declare-fun lt!25470 () Unit!1622)

(assert (=> b!61634 (= lt!25470 lt!25462)))

(declare-fun lt!25480 () ListLongMap!1385)

(assert (=> b!61634 (= lt!25480 (getCurrentListMapNoExtraKeys!45 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25467 () (_ BitVec 64))

(assert (=> b!61634 (= lt!25467 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25473 () (_ BitVec 64))

(assert (=> b!61634 (= lt!25473 (select (arr!1792 lt!25108) #b00000000000000000000000000000000))))

(assert (=> b!61634 (= lt!25466 (addApplyDifferent!43 lt!25480 lt!25467 (minValue!1981 newMap!16) lt!25473))))

(assert (=> b!61634 (= (apply!67 (+!82 lt!25480 (tuple2!2061 lt!25467 (minValue!1981 newMap!16))) lt!25473) (apply!67 lt!25480 lt!25473))))

(declare-fun b!61635 () Bool)

(assert (=> b!61635 (= e!40484 (+!82 call!4743 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun bm!4745 () Bool)

(assert (=> bm!4745 (= call!4745 call!4743)))

(declare-fun b!61636 () Bool)

(assert (=> b!61636 (= e!40485 (not call!4749))))

(declare-fun b!61637 () Bool)

(assert (=> b!61637 (= e!40481 (not call!4747))))

(declare-fun b!61638 () Bool)

(assert (=> b!61638 (= e!40483 call!4745)))

(declare-fun b!61639 () Bool)

(declare-fun res!33921 () Bool)

(assert (=> b!61639 (=> (not res!33921) (not e!40480))))

(assert (=> b!61639 (= res!33921 e!40482)))

(declare-fun res!33915 () Bool)

(assert (=> b!61639 (=> res!33915 e!40482)))

(assert (=> b!61639 (= res!33915 (not e!40479))))

(declare-fun res!33914 () Bool)

(assert (=> b!61639 (=> (not res!33914) (not e!40479))))

(assert (=> b!61639 (= res!33914 (bvslt #b00000000000000000000000000000000 (size!2023 lt!25108)))))

(declare-fun b!61640 () Bool)

(assert (=> b!61640 (= e!40476 (= (apply!67 lt!25463 (select (arr!1792 lt!25108) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 lt!25127) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61640 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 lt!25127)))))

(assert (=> b!61640 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 lt!25108)))))

(declare-fun b!61641 () Bool)

(assert (=> b!61641 (= e!40477 (validKeyInArray!0 (select (arr!1792 lt!25108) #b00000000000000000000000000000000)))))

(declare-fun b!61642 () Bool)

(assert (=> b!61642 (= e!40484 e!40483)))

(assert (=> b!61642 (= c!8134 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4746 () Bool)

(assert (=> bm!4746 (= call!4749 (contains!697 lt!25463 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12333 c!8132) b!61635))

(assert (= (and d!12333 (not c!8132)) b!61642))

(assert (= (and b!61642 c!8134) b!61638))

(assert (= (and b!61642 (not c!8134)) b!61627))

(assert (= (and b!61627 c!8135) b!61630))

(assert (= (and b!61627 (not c!8135)) b!61632))

(assert (= (or b!61630 b!61632) bm!4744))

(assert (= (or b!61638 bm!4744) bm!4740))

(assert (= (or b!61638 b!61630) bm!4745))

(assert (= (or b!61635 bm!4740) bm!4741))

(assert (= (or b!61635 bm!4745) bm!4743))

(assert (= (and d!12333 res!33918) b!61641))

(assert (= (and d!12333 c!8133) b!61634))

(assert (= (and d!12333 (not c!8133)) b!61633))

(assert (= (and d!12333 res!33920) b!61639))

(assert (= (and b!61639 res!33914) b!61631))

(assert (= (and b!61639 (not res!33915)) b!61628))

(assert (= (and b!61628 res!33917) b!61640))

(assert (= (and b!61639 res!33921) b!61622))

(assert (= (and b!61622 c!8131) b!61624))

(assert (= (and b!61622 (not c!8131)) b!61637))

(assert (= (and b!61624 res!33919) b!61625))

(assert (= (or b!61624 b!61637) bm!4742))

(assert (= (and b!61622 res!33916) b!61629))

(assert (= (and b!61629 c!8136) b!61626))

(assert (= (and b!61629 (not c!8136)) b!61636))

(assert (= (and b!61626 res!33913) b!61623))

(assert (= (or b!61626 b!61636) bm!4746))

(declare-fun b_lambda!2739 () Bool)

(assert (=> (not b_lambda!2739) (not b!61640)))

(assert (=> b!61640 t!4845))

(declare-fun b_and!3757 () Bool)

(assert (= b_and!3753 (and (=> t!4845 result!2435) b_and!3757)))

(assert (=> b!61640 t!4847))

(declare-fun b_and!3759 () Bool)

(assert (= b_and!3755 (and (=> t!4847 result!2437) b_and!3759)))

(declare-fun m!54657 () Bool)

(assert (=> b!61631 m!54657))

(assert (=> b!61631 m!54657))

(declare-fun m!54659 () Bool)

(assert (=> b!61631 m!54659))

(declare-fun m!54661 () Bool)

(assert (=> bm!4742 m!54661))

(declare-fun m!54663 () Bool)

(assert (=> bm!4746 m!54663))

(declare-fun m!54665 () Bool)

(assert (=> bm!4743 m!54665))

(assert (=> b!61628 m!54657))

(assert (=> b!61628 m!54657))

(declare-fun m!54667 () Bool)

(assert (=> b!61628 m!54667))

(declare-fun m!54669 () Bool)

(assert (=> bm!4741 m!54669))

(declare-fun m!54671 () Bool)

(assert (=> b!61635 m!54671))

(declare-fun m!54673 () Bool)

(assert (=> b!61623 m!54673))

(assert (=> b!61641 m!54657))

(assert (=> b!61641 m!54657))

(assert (=> b!61641 m!54659))

(assert (=> b!61640 m!54657))

(declare-fun m!54675 () Bool)

(assert (=> b!61640 m!54675))

(assert (=> b!61640 m!54657))

(declare-fun m!54677 () Bool)

(assert (=> b!61640 m!54677))

(assert (=> b!61640 m!53493))

(assert (=> b!61640 m!54675))

(assert (=> b!61640 m!53493))

(declare-fun m!54679 () Bool)

(assert (=> b!61640 m!54679))

(assert (=> d!12333 m!53453))

(assert (=> b!61634 m!54657))

(declare-fun m!54681 () Bool)

(assert (=> b!61634 m!54681))

(declare-fun m!54683 () Bool)

(assert (=> b!61634 m!54683))

(declare-fun m!54685 () Bool)

(assert (=> b!61634 m!54685))

(declare-fun m!54687 () Bool)

(assert (=> b!61634 m!54687))

(declare-fun m!54689 () Bool)

(assert (=> b!61634 m!54689))

(assert (=> b!61634 m!54669))

(declare-fun m!54691 () Bool)

(assert (=> b!61634 m!54691))

(declare-fun m!54693 () Bool)

(assert (=> b!61634 m!54693))

(assert (=> b!61634 m!54681))

(declare-fun m!54695 () Bool)

(assert (=> b!61634 m!54695))

(declare-fun m!54697 () Bool)

(assert (=> b!61634 m!54697))

(declare-fun m!54699 () Bool)

(assert (=> b!61634 m!54699))

(declare-fun m!54701 () Bool)

(assert (=> b!61634 m!54701))

(declare-fun m!54703 () Bool)

(assert (=> b!61634 m!54703))

(assert (=> b!61634 m!54701))

(declare-fun m!54705 () Bool)

(assert (=> b!61634 m!54705))

(assert (=> b!61634 m!54695))

(assert (=> b!61634 m!54691))

(declare-fun m!54707 () Bool)

(assert (=> b!61634 m!54707))

(declare-fun m!54709 () Bool)

(assert (=> b!61634 m!54709))

(declare-fun m!54711 () Bool)

(assert (=> b!61625 m!54711))

(assert (=> d!11987 d!12333))

(declare-fun d!12335 () Bool)

(declare-fun e!40487 () Bool)

(assert (=> d!12335 e!40487))

(declare-fun res!33922 () Bool)

(assert (=> d!12335 (=> (not res!33922) (not e!40487))))

(declare-fun lt!25481 () ListLongMap!1385)

(assert (=> d!12335 (= res!33922 (contains!697 lt!25481 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25483 () List!1459)

(assert (=> d!12335 (= lt!25481 (ListLongMap!1386 lt!25483))))

(declare-fun lt!25484 () Unit!1622)

(declare-fun lt!25482 () Unit!1622)

(assert (=> d!12335 (= lt!25484 lt!25482)))

(assert (=> d!12335 (= (getValueByKey!124 lt!25483 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12335 (= lt!25482 (lemmaContainsTupThenGetReturnValue!43 lt!25483 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12335 (= lt!25483 (insertStrictlySorted!45 (toList!708 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12335 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25481)))

(declare-fun b!61643 () Bool)

(declare-fun res!33923 () Bool)

(assert (=> b!61643 (=> (not res!33923) (not e!40487))))

(assert (=> b!61643 (= res!33923 (= (getValueByKey!124 (toList!708 lt!25481) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61644 () Bool)

(assert (=> b!61644 (= e!40487 (contains!699 (toList!708 lt!25481) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12335 res!33922) b!61643))

(assert (= (and b!61643 res!33923) b!61644))

(declare-fun m!54713 () Bool)

(assert (=> d!12335 m!54713))

(declare-fun m!54715 () Bool)

(assert (=> d!12335 m!54715))

(declare-fun m!54717 () Bool)

(assert (=> d!12335 m!54717))

(declare-fun m!54719 () Bool)

(assert (=> d!12335 m!54719))

(declare-fun m!54721 () Bool)

(assert (=> b!61643 m!54721))

(declare-fun m!54723 () Bool)

(assert (=> b!61644 m!54723))

(assert (=> d!11987 d!12335))

(declare-fun b!61645 () Bool)

(declare-fun e!40491 () Bool)

(declare-fun call!4750 () Bool)

(assert (=> b!61645 (= e!40491 call!4750)))

(declare-fun bm!4747 () Bool)

(declare-fun c!8137 () Bool)

(assert (=> bm!4747 (= call!4750 (arrayNoDuplicates!0 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (bvadd lt!25123 #b00000000000000000000000000000001) (ite c!8137 (Cons!1456 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) lt!25123) lt!25115) lt!25115)))))

(declare-fun b!61646 () Bool)

(declare-fun e!40488 () Bool)

(assert (=> b!61646 (= e!40488 e!40491)))

(assert (=> b!61646 (= c!8137 (validKeyInArray!0 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) lt!25123)))))

(declare-fun e!40490 () Bool)

(declare-fun b!61648 () Bool)

(assert (=> b!61648 (= e!40490 (contains!698 lt!25115 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) lt!25123)))))

(declare-fun b!61649 () Bool)

(declare-fun e!40489 () Bool)

(assert (=> b!61649 (= e!40489 e!40488)))

(declare-fun res!33925 () Bool)

(assert (=> b!61649 (=> (not res!33925) (not e!40488))))

(assert (=> b!61649 (= res!33925 (not e!40490))))

(declare-fun res!33924 () Bool)

(assert (=> b!61649 (=> (not res!33924) (not e!40490))))

(assert (=> b!61649 (= res!33924 (validKeyInArray!0 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) lt!25123)))))

(declare-fun b!61647 () Bool)

(assert (=> b!61647 (= e!40491 call!4750)))

(declare-fun d!12337 () Bool)

(declare-fun res!33926 () Bool)

(assert (=> d!12337 (=> res!33926 e!40489)))

(assert (=> d!12337 (= res!33926 (bvsge lt!25123 (size!2023 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))))))

(assert (=> d!12337 (= (arrayNoDuplicates!0 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) lt!25123 lt!25115) e!40489)))

(assert (= (and d!12337 (not res!33926)) b!61649))

(assert (= (and b!61649 res!33924) b!61648))

(assert (= (and b!61649 res!33925) b!61646))

(assert (= (and b!61646 c!8137) b!61645))

(assert (= (and b!61646 (not c!8137)) b!61647))

(assert (= (or b!61645 b!61647) bm!4747))

(declare-fun m!54725 () Bool)

(assert (=> bm!4747 m!54725))

(declare-fun m!54727 () Bool)

(assert (=> bm!4747 m!54727))

(assert (=> b!61646 m!54725))

(assert (=> b!61646 m!54725))

(declare-fun m!54729 () Bool)

(assert (=> b!61646 m!54729))

(assert (=> b!61648 m!54725))

(assert (=> b!61648 m!54725))

(declare-fun m!54731 () Bool)

(assert (=> b!61648 m!54731))

(assert (=> b!61649 m!54725))

(assert (=> b!61649 m!54725))

(assert (=> b!61649 m!54729))

(assert (=> d!11987 d!12337))

(declare-fun d!12339 () Bool)

(declare-fun e!40493 () Bool)

(assert (=> d!12339 e!40493))

(declare-fun res!33927 () Bool)

(assert (=> d!12339 (=> res!33927 e!40493)))

(declare-fun lt!25485 () Bool)

(assert (=> d!12339 (= res!33927 (not lt!25485))))

(declare-fun lt!25487 () Bool)

(assert (=> d!12339 (= lt!25485 lt!25487)))

(declare-fun lt!25486 () Unit!1622)

(declare-fun e!40492 () Unit!1622)

(assert (=> d!12339 (= lt!25486 e!40492)))

(declare-fun c!8138 () Bool)

(assert (=> d!12339 (= c!8138 lt!25487)))

(assert (=> d!12339 (= lt!25487 (containsKey!128 (toList!708 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12339 (= (contains!697 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) lt!25485)))

(declare-fun b!61650 () Bool)

(declare-fun lt!25488 () Unit!1622)

(assert (=> b!61650 (= e!40492 lt!25488)))

(assert (=> b!61650 (= lt!25488 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!61650 (isDefined!78 (getValueByKey!124 (toList!708 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61651 () Bool)

(declare-fun Unit!1662 () Unit!1622)

(assert (=> b!61651 (= e!40492 Unit!1662)))

(declare-fun b!61652 () Bool)

(assert (=> b!61652 (= e!40493 (isDefined!78 (getValueByKey!124 (toList!708 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (= (and d!12339 c!8138) b!61650))

(assert (= (and d!12339 (not c!8138)) b!61651))

(assert (= (and d!12339 (not res!33927)) b!61652))

(assert (=> d!12339 m!53207))

(declare-fun m!54733 () Bool)

(assert (=> d!12339 m!54733))

(assert (=> b!61650 m!53207))

(declare-fun m!54735 () Bool)

(assert (=> b!61650 m!54735))

(assert (=> b!61650 m!53207))

(declare-fun m!54737 () Bool)

(assert (=> b!61650 m!54737))

(assert (=> b!61650 m!54737))

(declare-fun m!54739 () Bool)

(assert (=> b!61650 m!54739))

(assert (=> b!61652 m!53207))

(assert (=> b!61652 m!54737))

(assert (=> b!61652 m!54737))

(assert (=> b!61652 m!54739))

(assert (=> d!11987 d!12339))

(declare-fun d!12341 () Bool)

(assert (=> d!12341 (= (arrayCountValidKeys!0 lt!25126 (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (bvadd (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!25491 () Unit!1622)

(declare-fun choose!2 (array!3746 (_ BitVec 32)) Unit!1622)

(assert (=> d!12341 (= lt!25491 (choose!2 lt!25126 (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888))))))

(declare-fun e!40496 () Bool)

(assert (=> d!12341 e!40496))

(declare-fun res!33932 () Bool)

(assert (=> d!12341 (=> (not res!33932) (not e!40496))))

(assert (=> d!12341 (= res!33932 (and (bvsge (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000000) (bvslt (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (size!2023 lt!25126))))))

(assert (=> d!12341 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!25126 (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888))) lt!25491)))

(declare-fun b!61657 () Bool)

(declare-fun res!33933 () Bool)

(assert (=> b!61657 (=> (not res!33933) (not e!40496))))

(assert (=> b!61657 (= res!33933 (validKeyInArray!0 (select (arr!1792 lt!25126) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)))))))

(declare-fun b!61658 () Bool)

(assert (=> b!61658 (= e!40496 (bvslt (size!2023 lt!25126) #b01111111111111111111111111111111))))

(assert (= (and d!12341 res!33932) b!61657))

(assert (= (and b!61657 res!33933) b!61658))

(assert (=> d!12341 m!53667))

(declare-fun m!54741 () Bool)

(assert (=> d!12341 m!54741))

(assert (=> b!61657 m!54623))

(assert (=> b!61657 m!54623))

(assert (=> b!61657 m!54625))

(assert (=> d!11987 d!12341))

(assert (=> d!11987 d!11945))

(declare-fun d!12343 () Bool)

(declare-fun e!40497 () Bool)

(assert (=> d!12343 e!40497))

(declare-fun res!33934 () Bool)

(assert (=> d!12343 (=> (not res!33934) (not e!40497))))

(assert (=> d!12343 (= res!33934 (and (bvsge (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) #b00000000000000000000000000000000) (bvslt (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (size!2023 lt!25108))))))

(declare-fun lt!25492 () Unit!1622)

(assert (=> d!12343 (= lt!25492 (choose!324 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (defaultEntry!2067 newMap!16)))))

(assert (=> d!12343 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12343 (= (lemmaValidKeyInArrayIsInListMap!74 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (defaultEntry!2067 newMap!16)) lt!25492)))

(declare-fun b!61659 () Bool)

(assert (=> b!61659 (= e!40497 (contains!697 (getCurrentListMap!405 lt!25108 lt!25127 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1792 lt!25108) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)))))))

(assert (= (and d!12343 res!33934) b!61659))

(declare-fun m!54743 () Bool)

(assert (=> d!12343 m!54743))

(assert (=> d!12343 m!53453))

(assert (=> b!61659 m!53647))

(declare-fun m!54745 () Bool)

(assert (=> b!61659 m!54745))

(assert (=> b!61659 m!53647))

(assert (=> b!61659 m!54745))

(declare-fun m!54747 () Bool)

(assert (=> b!61659 m!54747))

(assert (=> d!11987 d!12343))

(declare-fun bm!4748 () Bool)

(declare-fun call!4754 () ListLongMap!1385)

(declare-fun call!4752 () ListLongMap!1385)

(assert (=> bm!4748 (= call!4754 call!4752)))

(declare-fun b!61660 () Bool)

(declare-fun res!33938 () Bool)

(declare-fun e!40504 () Bool)

(assert (=> b!61660 (=> (not res!33938) (not e!40504))))

(declare-fun e!40505 () Bool)

(assert (=> b!61660 (= res!33938 e!40505)))

(declare-fun c!8139 () Bool)

(assert (=> b!61660 (= c!8139 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4749 () Bool)

(assert (=> bm!4749 (= call!4752 (getCurrentListMapNoExtraKeys!45 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61661 () Bool)

(declare-fun e!40510 () Bool)

(declare-fun lt!25497 () ListLongMap!1385)

(assert (=> b!61661 (= e!40510 (= (apply!67 lt!25497 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!61662 () Bool)

(declare-fun e!40502 () Bool)

(assert (=> b!61662 (= e!40505 e!40502)))

(declare-fun res!33941 () Bool)

(declare-fun call!4755 () Bool)

(assert (=> b!61662 (= res!33941 call!4755)))

(assert (=> b!61662 (=> (not res!33941) (not e!40502))))

(declare-fun b!61663 () Bool)

(assert (=> b!61663 (= e!40502 (= (apply!67 lt!25497 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun b!61664 () Bool)

(declare-fun e!40509 () Bool)

(assert (=> b!61664 (= e!40509 e!40510)))

(declare-fun res!33935 () Bool)

(declare-fun call!4757 () Bool)

(assert (=> b!61664 (= res!33935 call!4757)))

(assert (=> b!61664 (=> (not res!33935) (not e!40510))))

(declare-fun b!61665 () Bool)

(declare-fun c!8143 () Bool)

(assert (=> b!61665 (= c!8143 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40507 () ListLongMap!1385)

(declare-fun e!40498 () ListLongMap!1385)

(assert (=> b!61665 (= e!40507 e!40498)))

(declare-fun b!61666 () Bool)

(declare-fun e!40506 () Bool)

(declare-fun e!40500 () Bool)

(assert (=> b!61666 (= e!40506 e!40500)))

(declare-fun res!33939 () Bool)

(assert (=> b!61666 (=> (not res!33939) (not e!40500))))

(assert (=> b!61666 (= res!33939 (contains!697 lt!25497 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!61666 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))))))

(declare-fun b!61667 () Bool)

(assert (=> b!61667 (= e!40504 e!40509)))

(declare-fun c!8144 () Bool)

(assert (=> b!61667 (= c!8144 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4750 () Bool)

(assert (=> bm!4750 (= call!4755 (contains!697 lt!25497 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61668 () Bool)

(declare-fun call!4753 () ListLongMap!1385)

(assert (=> b!61668 (= e!40498 call!4753)))

(declare-fun c!8142 () Bool)

(declare-fun call!4756 () ListLongMap!1385)

(declare-fun call!4751 () ListLongMap!1385)

(declare-fun c!8140 () Bool)

(declare-fun bm!4751 () Bool)

(assert (=> bm!4751 (= call!4751 (+!82 (ite c!8140 call!4752 (ite c!8142 call!4754 call!4756)) (ite (or c!8140 c!8142) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun e!40503 () Bool)

(declare-fun b!61669 () Bool)

(assert (=> b!61669 (= e!40503 (validKeyInArray!0 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!61670 () Bool)

(assert (=> b!61670 (= e!40498 call!4756)))

(declare-fun b!61671 () Bool)

(declare-fun e!40499 () Unit!1622)

(declare-fun Unit!1663 () Unit!1622)

(assert (=> b!61671 (= e!40499 Unit!1663)))

(declare-fun bm!4752 () Bool)

(assert (=> bm!4752 (= call!4756 call!4754)))

(declare-fun d!12345 () Bool)

(assert (=> d!12345 e!40504))

(declare-fun res!33942 () Bool)

(assert (=> d!12345 (=> (not res!33942) (not e!40504))))

(assert (=> d!12345 (= res!33942 (or (bvsge #b00000000000000000000000000000000 (size!2023 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))))))))

(declare-fun lt!25509 () ListLongMap!1385)

(assert (=> d!12345 (= lt!25497 lt!25509)))

(declare-fun lt!25502 () Unit!1622)

(assert (=> d!12345 (= lt!25502 e!40499)))

(declare-fun c!8141 () Bool)

(declare-fun e!40501 () Bool)

(assert (=> d!12345 (= c!8141 e!40501)))

(declare-fun res!33940 () Bool)

(assert (=> d!12345 (=> (not res!33940) (not e!40501))))

(assert (=> d!12345 (= res!33940 (bvslt #b00000000000000000000000000000000 (size!2023 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))))))

(declare-fun e!40508 () ListLongMap!1385)

(assert (=> d!12345 (= lt!25509 e!40508)))

(assert (=> d!12345 (= c!8140 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12345 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12345 (= (getCurrentListMap!405 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25497)))

(declare-fun b!61672 () Bool)

(declare-fun lt!25500 () Unit!1622)

(assert (=> b!61672 (= e!40499 lt!25500)))

(declare-fun lt!25503 () ListLongMap!1385)

(assert (=> b!61672 (= lt!25503 (getCurrentListMapNoExtraKeys!45 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25494 () (_ BitVec 64))

(assert (=> b!61672 (= lt!25494 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25495 () (_ BitVec 64))

(assert (=> b!61672 (= lt!25495 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25510 () Unit!1622)

(assert (=> b!61672 (= lt!25510 (addStillContains!43 lt!25503 lt!25494 (zeroValue!1981 newMap!16) lt!25495))))

(assert (=> b!61672 (contains!697 (+!82 lt!25503 (tuple2!2061 lt!25494 (zeroValue!1981 newMap!16))) lt!25495)))

(declare-fun lt!25499 () Unit!1622)

(assert (=> b!61672 (= lt!25499 lt!25510)))

(declare-fun lt!25493 () ListLongMap!1385)

(assert (=> b!61672 (= lt!25493 (getCurrentListMapNoExtraKeys!45 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25513 () (_ BitVec 64))

(assert (=> b!61672 (= lt!25513 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25505 () (_ BitVec 64))

(assert (=> b!61672 (= lt!25505 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25498 () Unit!1622)

(assert (=> b!61672 (= lt!25498 (addApplyDifferent!43 lt!25493 lt!25513 (minValue!1981 newMap!16) lt!25505))))

(assert (=> b!61672 (= (apply!67 (+!82 lt!25493 (tuple2!2061 lt!25513 (minValue!1981 newMap!16))) lt!25505) (apply!67 lt!25493 lt!25505))))

(declare-fun lt!25511 () Unit!1622)

(assert (=> b!61672 (= lt!25511 lt!25498)))

(declare-fun lt!25508 () ListLongMap!1385)

(assert (=> b!61672 (= lt!25508 (getCurrentListMapNoExtraKeys!45 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25512 () (_ BitVec 64))

(assert (=> b!61672 (= lt!25512 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25506 () (_ BitVec 64))

(assert (=> b!61672 (= lt!25506 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25496 () Unit!1622)

(assert (=> b!61672 (= lt!25496 (addApplyDifferent!43 lt!25508 lt!25512 (zeroValue!1981 newMap!16) lt!25506))))

(assert (=> b!61672 (= (apply!67 (+!82 lt!25508 (tuple2!2061 lt!25512 (zeroValue!1981 newMap!16))) lt!25506) (apply!67 lt!25508 lt!25506))))

(declare-fun lt!25504 () Unit!1622)

(assert (=> b!61672 (= lt!25504 lt!25496)))

(declare-fun lt!25514 () ListLongMap!1385)

(assert (=> b!61672 (= lt!25514 (getCurrentListMapNoExtraKeys!45 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25501 () (_ BitVec 64))

(assert (=> b!61672 (= lt!25501 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25507 () (_ BitVec 64))

(assert (=> b!61672 (= lt!25507 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!61672 (= lt!25500 (addApplyDifferent!43 lt!25514 lt!25501 (minValue!1981 newMap!16) lt!25507))))

(assert (=> b!61672 (= (apply!67 (+!82 lt!25514 (tuple2!2061 lt!25501 (minValue!1981 newMap!16))) lt!25507) (apply!67 lt!25514 lt!25507))))

(declare-fun b!61673 () Bool)

(assert (=> b!61673 (= e!40508 (+!82 call!4751 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun bm!4753 () Bool)

(assert (=> bm!4753 (= call!4753 call!4751)))

(declare-fun b!61674 () Bool)

(assert (=> b!61674 (= e!40509 (not call!4757))))

(declare-fun b!61675 () Bool)

(assert (=> b!61675 (= e!40505 (not call!4755))))

(declare-fun b!61676 () Bool)

(assert (=> b!61676 (= e!40507 call!4753)))

(declare-fun b!61677 () Bool)

(declare-fun res!33943 () Bool)

(assert (=> b!61677 (=> (not res!33943) (not e!40504))))

(assert (=> b!61677 (= res!33943 e!40506)))

(declare-fun res!33937 () Bool)

(assert (=> b!61677 (=> res!33937 e!40506)))

(assert (=> b!61677 (= res!33937 (not e!40503))))

(declare-fun res!33936 () Bool)

(assert (=> b!61677 (=> (not res!33936) (not e!40503))))

(assert (=> b!61677 (= res!33936 (bvslt #b00000000000000000000000000000000 (size!2023 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))))))

(declare-fun b!61678 () Bool)

(assert (=> b!61678 (= e!40500 (= (apply!67 lt!25497 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61678 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))))))

(assert (=> b!61678 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16))))))))

(declare-fun b!61679 () Bool)

(assert (=> b!61679 (= e!40501 (validKeyInArray!0 (select (arr!1792 (array!3747 (store (arr!1792 (_keys!3695 newMap!16)) (ite c!7906 (index!3079 lt!24888) (index!3076 lt!24888)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (size!2023 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!61680 () Bool)

(assert (=> b!61680 (= e!40508 e!40507)))

(assert (=> b!61680 (= c!8142 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4754 () Bool)

(assert (=> bm!4754 (= call!4757 (contains!697 lt!25497 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12345 c!8140) b!61673))

(assert (= (and d!12345 (not c!8140)) b!61680))

(assert (= (and b!61680 c!8142) b!61676))

(assert (= (and b!61680 (not c!8142)) b!61665))

(assert (= (and b!61665 c!8143) b!61668))

(assert (= (and b!61665 (not c!8143)) b!61670))

(assert (= (or b!61668 b!61670) bm!4752))

(assert (= (or b!61676 bm!4752) bm!4748))

(assert (= (or b!61676 b!61668) bm!4753))

(assert (= (or b!61673 bm!4748) bm!4749))

(assert (= (or b!61673 bm!4753) bm!4751))

(assert (= (and d!12345 res!33940) b!61679))

(assert (= (and d!12345 c!8141) b!61672))

(assert (= (and d!12345 (not c!8141)) b!61671))

(assert (= (and d!12345 res!33942) b!61677))

(assert (= (and b!61677 res!33936) b!61669))

(assert (= (and b!61677 (not res!33937)) b!61666))

(assert (= (and b!61666 res!33939) b!61678))

(assert (= (and b!61677 res!33943) b!61660))

(assert (= (and b!61660 c!8139) b!61662))

(assert (= (and b!61660 (not c!8139)) b!61675))

(assert (= (and b!61662 res!33941) b!61663))

(assert (= (or b!61662 b!61675) bm!4750))

(assert (= (and b!61660 res!33938) b!61667))

(assert (= (and b!61667 c!8144) b!61664))

(assert (= (and b!61667 (not c!8144)) b!61674))

(assert (= (and b!61664 res!33935) b!61661))

(assert (= (or b!61664 b!61674) bm!4754))

(declare-fun b_lambda!2741 () Bool)

(assert (=> (not b_lambda!2741) (not b!61678)))

(assert (=> b!61678 t!4845))

(declare-fun b_and!3761 () Bool)

(assert (= b_and!3757 (and (=> t!4845 result!2435) b_and!3761)))

(assert (=> b!61678 t!4847))

(declare-fun b_and!3763 () Bool)

(assert (= b_and!3759 (and (=> t!4847 result!2437) b_and!3763)))

(assert (=> b!61669 m!54611))

(assert (=> b!61669 m!54611))

(assert (=> b!61669 m!54613))

(declare-fun m!54749 () Bool)

(assert (=> bm!4750 m!54749))

(declare-fun m!54751 () Bool)

(assert (=> bm!4754 m!54751))

(declare-fun m!54753 () Bool)

(assert (=> bm!4751 m!54753))

(assert (=> b!61666 m!54611))

(assert (=> b!61666 m!54611))

(declare-fun m!54755 () Bool)

(assert (=> b!61666 m!54755))

(declare-fun m!54757 () Bool)

(assert (=> bm!4749 m!54757))

(declare-fun m!54759 () Bool)

(assert (=> b!61673 m!54759))

(declare-fun m!54761 () Bool)

(assert (=> b!61661 m!54761))

(assert (=> b!61679 m!54611))

(assert (=> b!61679 m!54611))

(assert (=> b!61679 m!54613))

(assert (=> b!61678 m!54611))

(declare-fun m!54763 () Bool)

(assert (=> b!61678 m!54763))

(assert (=> b!61678 m!54611))

(declare-fun m!54765 () Bool)

(assert (=> b!61678 m!54765))

(assert (=> b!61678 m!53493))

(assert (=> b!61678 m!54763))

(assert (=> b!61678 m!53493))

(declare-fun m!54767 () Bool)

(assert (=> b!61678 m!54767))

(assert (=> d!12345 m!53453))

(assert (=> b!61672 m!54611))

(declare-fun m!54769 () Bool)

(assert (=> b!61672 m!54769))

(declare-fun m!54771 () Bool)

(assert (=> b!61672 m!54771))

(declare-fun m!54773 () Bool)

(assert (=> b!61672 m!54773))

(declare-fun m!54775 () Bool)

(assert (=> b!61672 m!54775))

(declare-fun m!54777 () Bool)

(assert (=> b!61672 m!54777))

(assert (=> b!61672 m!54757))

(declare-fun m!54779 () Bool)

(assert (=> b!61672 m!54779))

(declare-fun m!54781 () Bool)

(assert (=> b!61672 m!54781))

(assert (=> b!61672 m!54769))

(declare-fun m!54783 () Bool)

(assert (=> b!61672 m!54783))

(declare-fun m!54785 () Bool)

(assert (=> b!61672 m!54785))

(declare-fun m!54787 () Bool)

(assert (=> b!61672 m!54787))

(declare-fun m!54789 () Bool)

(assert (=> b!61672 m!54789))

(declare-fun m!54791 () Bool)

(assert (=> b!61672 m!54791))

(assert (=> b!61672 m!54789))

(declare-fun m!54793 () Bool)

(assert (=> b!61672 m!54793))

(assert (=> b!61672 m!54783))

(assert (=> b!61672 m!54779))

(declare-fun m!54795 () Bool)

(assert (=> b!61672 m!54795))

(declare-fun m!54797 () Bool)

(assert (=> b!61672 m!54797))

(declare-fun m!54799 () Bool)

(assert (=> b!61663 m!54799))

(assert (=> d!11987 d!12345))

(declare-fun d!12347 () Bool)

(declare-fun lt!25515 () Bool)

(assert (=> d!12347 (= lt!25515 (select (content!64 (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!40511 () Bool)

(assert (=> d!12347 (= lt!25515 e!40511)))

(declare-fun res!33944 () Bool)

(assert (=> d!12347 (=> (not res!33944) (not e!40511))))

(assert (=> d!12347 (= res!33944 ((_ is Cons!1456) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)))))

(assert (=> d!12347 (= (contains!698 (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!25515)))

(declare-fun b!61681 () Bool)

(declare-fun e!40512 () Bool)

(assert (=> b!61681 (= e!40511 e!40512)))

(declare-fun res!33945 () Bool)

(assert (=> b!61681 (=> res!33945 e!40512)))

(assert (=> b!61681 (= res!33945 (= (h!2038 (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!61682 () Bool)

(assert (=> b!61682 (= e!40512 (contains!698 (t!4838 (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!12347 res!33944) b!61681))

(assert (= (and b!61681 (not res!33945)) b!61682))

(declare-fun m!54801 () Bool)

(assert (=> d!12347 m!54801))

(assert (=> d!12347 m!53823))

(declare-fun m!54803 () Bool)

(assert (=> d!12347 m!54803))

(assert (=> b!61682 m!53823))

(declare-fun m!54805 () Bool)

(assert (=> b!61682 m!54805))

(assert (=> b!61194 d!12347))

(declare-fun b!61695 () Bool)

(declare-fun e!40519 () SeekEntryResult!238)

(declare-fun e!40520 () SeekEntryResult!238)

(assert (=> b!61695 (= e!40519 e!40520)))

(declare-fun lt!25520 () (_ BitVec 64))

(declare-fun c!8153 () Bool)

(assert (=> b!61695 (= c!8153 (= lt!25520 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61696 () Bool)

(declare-fun c!8151 () Bool)

(assert (=> b!61696 (= c!8151 (= lt!25520 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40521 () SeekEntryResult!238)

(assert (=> b!61696 (= e!40520 e!40521)))

(declare-fun b!61697 () Bool)

(assert (=> b!61697 (= e!40520 (Found!238 (index!3078 lt!25046)))))

(declare-fun b!61698 () Bool)

(assert (=> b!61698 (= e!40521 (MissingVacant!238 (index!3078 lt!25046)))))

(declare-fun b!61699 () Bool)

(assert (=> b!61699 (= e!40519 Undefined!238)))

(declare-fun b!61700 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!61700 (= e!40521 (seekKeyOrZeroReturnVacant!0 (bvadd (x!10172 lt!25046) #b00000000000000000000000000000001) (nextIndex!0 (index!3078 lt!25046) (x!10172 lt!25046) (mask!5963 newMap!16)) (index!3078 lt!25046) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun d!12349 () Bool)

(declare-fun lt!25521 () SeekEntryResult!238)

(assert (=> d!12349 (and (or ((_ is Undefined!238) lt!25521) (not ((_ is Found!238) lt!25521)) (and (bvsge (index!3077 lt!25521) #b00000000000000000000000000000000) (bvslt (index!3077 lt!25521) (size!2023 (_keys!3695 newMap!16))))) (or ((_ is Undefined!238) lt!25521) ((_ is Found!238) lt!25521) (not ((_ is MissingVacant!238) lt!25521)) (not (= (index!3079 lt!25521) (index!3078 lt!25046))) (and (bvsge (index!3079 lt!25521) #b00000000000000000000000000000000) (bvslt (index!3079 lt!25521) (size!2023 (_keys!3695 newMap!16))))) (or ((_ is Undefined!238) lt!25521) (ite ((_ is Found!238) lt!25521) (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!25521)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (and ((_ is MissingVacant!238) lt!25521) (= (index!3079 lt!25521) (index!3078 lt!25046)) (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3079 lt!25521)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!12349 (= lt!25521 e!40519)))

(declare-fun c!8152 () Bool)

(assert (=> d!12349 (= c!8152 (bvsge (x!10172 lt!25046) #b01111111111111111111111111111110))))

(assert (=> d!12349 (= lt!25520 (select (arr!1792 (_keys!3695 newMap!16)) (index!3078 lt!25046)))))

(assert (=> d!12349 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12349 (= (seekKeyOrZeroReturnVacant!0 (x!10172 lt!25046) (index!3078 lt!25046) (index!3078 lt!25046) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)) lt!25521)))

(assert (= (and d!12349 c!8152) b!61699))

(assert (= (and d!12349 (not c!8152)) b!61695))

(assert (= (and b!61695 c!8153) b!61697))

(assert (= (and b!61695 (not c!8153)) b!61696))

(assert (= (and b!61696 c!8151) b!61698))

(assert (= (and b!61696 (not c!8151)) b!61700))

(declare-fun m!54807 () Bool)

(assert (=> b!61700 m!54807))

(assert (=> b!61700 m!54807))

(assert (=> b!61700 m!53207))

(declare-fun m!54809 () Bool)

(assert (=> b!61700 m!54809))

(declare-fun m!54811 () Bool)

(assert (=> d!12349 m!54811))

(declare-fun m!54813 () Bool)

(assert (=> d!12349 m!54813))

(assert (=> d!12349 m!53615))

(assert (=> d!12349 m!53453))

(assert (=> b!61023 d!12349))

(declare-fun b!61703 () Bool)

(declare-fun e!40523 () Option!130)

(assert (=> b!61703 (= e!40523 (getValueByKey!124 (t!4837 (toList!708 lt!25244)) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61704 () Bool)

(assert (=> b!61704 (= e!40523 None!128)))

(declare-fun b!61702 () Bool)

(declare-fun e!40522 () Option!130)

(assert (=> b!61702 (= e!40522 e!40523)))

(declare-fun c!8155 () Bool)

(assert (=> b!61702 (= c!8155 (and ((_ is Cons!1455) (toList!708 lt!25244)) (not (= (_1!1040 (h!2037 (toList!708 lt!25244))) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61701 () Bool)

(assert (=> b!61701 (= e!40522 (Some!129 (_2!1040 (h!2037 (toList!708 lt!25244)))))))

(declare-fun c!8154 () Bool)

(declare-fun d!12351 () Bool)

(assert (=> d!12351 (= c!8154 (and ((_ is Cons!1455) (toList!708 lt!25244)) (= (_1!1040 (h!2037 (toList!708 lt!25244))) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12351 (= (getValueByKey!124 (toList!708 lt!25244) (_1!1040 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) e!40522)))

(assert (= (and d!12351 c!8154) b!61701))

(assert (= (and d!12351 (not c!8154)) b!61702))

(assert (= (and b!61702 c!8155) b!61703))

(assert (= (and b!61702 (not c!8155)) b!61704))

(declare-fun m!54815 () Bool)

(assert (=> b!61703 m!54815))

(assert (=> b!61244 d!12351))

(declare-fun d!12353 () Bool)

(declare-fun isEmpty!303 (List!1459) Bool)

(assert (=> d!12353 (= (isEmpty!302 lt!25229) (isEmpty!303 (toList!708 lt!25229)))))

(declare-fun bs!2679 () Bool)

(assert (= bs!2679 d!12353))

(declare-fun m!54817 () Bool)

(assert (=> bs!2679 m!54817))

(assert (=> b!61230 d!12353))

(declare-fun d!12355 () Bool)

(assert (=> d!12355 (= (get!1093 (getValueByKey!124 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2407 (getValueByKey!124 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11975 d!12355))

(declare-fun b!61707 () Bool)

(declare-fun e!40525 () Option!130)

(assert (=> b!61707 (= e!40525 (getValueByKey!124 (t!4837 (toList!708 lt!24948)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61708 () Bool)

(assert (=> b!61708 (= e!40525 None!128)))

(declare-fun b!61706 () Bool)

(declare-fun e!40524 () Option!130)

(assert (=> b!61706 (= e!40524 e!40525)))

(declare-fun c!8157 () Bool)

(assert (=> b!61706 (= c!8157 (and ((_ is Cons!1455) (toList!708 lt!24948)) (not (= (_1!1040 (h!2037 (toList!708 lt!24948))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61705 () Bool)

(assert (=> b!61705 (= e!40524 (Some!129 (_2!1040 (h!2037 (toList!708 lt!24948)))))))

(declare-fun d!12357 () Bool)

(declare-fun c!8156 () Bool)

(assert (=> d!12357 (= c!8156 (and ((_ is Cons!1455) (toList!708 lt!24948)) (= (_1!1040 (h!2037 (toList!708 lt!24948))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12357 (= (getValueByKey!124 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000) e!40524)))

(assert (= (and d!12357 c!8156) b!61705))

(assert (= (and d!12357 (not c!8156)) b!61706))

(assert (= (and b!61706 c!8157) b!61707))

(assert (= (and b!61706 (not c!8157)) b!61708))

(declare-fun m!54819 () Bool)

(assert (=> b!61707 m!54819))

(assert (=> d!11975 d!12357))

(declare-fun d!12359 () Bool)

(assert (=> d!12359 (= (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24957)) (v!2407 (getValueByKey!124 (toList!708 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24957)))))

(assert (=> d!12057 d!12359))

(declare-fun b!61711 () Bool)

(declare-fun e!40527 () Option!130)

(assert (=> b!61711 (= e!40527 (getValueByKey!124 (t!4837 (toList!708 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))) lt!24957))))

(declare-fun b!61712 () Bool)

(assert (=> b!61712 (= e!40527 None!128)))

(declare-fun b!61710 () Bool)

(declare-fun e!40526 () Option!130)

(assert (=> b!61710 (= e!40526 e!40527)))

(declare-fun c!8159 () Bool)

(assert (=> b!61710 (= c!8159 (and ((_ is Cons!1455) (toList!708 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))) (not (= (_1!1040 (h!2037 (toList!708 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))) lt!24957))))))

(declare-fun b!61709 () Bool)

(assert (=> b!61709 (= e!40526 (Some!129 (_2!1040 (h!2037 (toList!708 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))))

(declare-fun c!8158 () Bool)

(declare-fun d!12361 () Bool)

(assert (=> d!12361 (= c!8158 (and ((_ is Cons!1455) (toList!708 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))) (= (_1!1040 (h!2037 (toList!708 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))) lt!24957)))))

(assert (=> d!12361 (= (getValueByKey!124 (toList!708 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24957) e!40526)))

(assert (= (and d!12361 c!8158) b!61709))

(assert (= (and d!12361 (not c!8158)) b!61710))

(assert (= (and b!61710 c!8159) b!61711))

(assert (= (and b!61710 (not c!8159)) b!61712))

(declare-fun m!54821 () Bool)

(assert (=> b!61711 m!54821))

(assert (=> d!12057 d!12361))

(declare-fun d!12363 () Bool)

(assert (=> d!12363 (= (get!1091 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2402 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61080 d!12363))

(declare-fun d!12365 () Bool)

(assert (=> d!12365 (= (apply!67 lt!25017 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1093 (getValueByKey!124 (toList!708 lt!25017) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2680 () Bool)

(assert (= bs!2680 d!12365))

(declare-fun m!54823 () Bool)

(assert (=> bs!2680 m!54823))

(assert (=> bs!2680 m!54823))

(declare-fun m!54825 () Bool)

(assert (=> bs!2680 m!54825))

(assert (=> b!60985 d!12365))

(declare-fun d!12367 () Bool)

(assert (=> d!12367 (= (apply!67 lt!25017 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1093 (getValueByKey!124 (toList!708 lt!25017) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2681 () Bool)

(assert (= bs!2681 d!12367))

(assert (=> bs!2681 m!53471))

(assert (=> bs!2681 m!54223))

(assert (=> bs!2681 m!54223))

(declare-fun m!54827 () Bool)

(assert (=> bs!2681 m!54827))

(assert (=> b!61002 d!12367))

(declare-fun d!12369 () Bool)

(declare-fun c!8160 () Bool)

(assert (=> d!12369 (= c!8160 ((_ is ValueCellFull!861) (select (arr!1793 (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!40528 () V!2859)

(assert (=> d!12369 (= (get!1090 (select (arr!1793 (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40528)))

(declare-fun b!61713 () Bool)

(assert (=> b!61713 (= e!40528 (get!1091 (select (arr!1793 (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61714 () Bool)

(assert (=> b!61714 (= e!40528 (get!1092 (select (arr!1793 (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12369 c!8160) b!61713))

(assert (= (and d!12369 (not c!8160)) b!61714))

(assert (=> b!61713 m!53545))

(assert (=> b!61713 m!53493))

(declare-fun m!54829 () Bool)

(assert (=> b!61713 m!54829))

(assert (=> b!61714 m!53545))

(assert (=> b!61714 m!53493))

(declare-fun m!54831 () Bool)

(assert (=> b!61714 m!54831))

(assert (=> b!61002 d!12369))

(declare-fun d!12371 () Bool)

(declare-fun res!33946 () Bool)

(declare-fun e!40529 () Bool)

(assert (=> d!12371 (=> res!33946 e!40529)))

(assert (=> d!12371 (= res!33946 (and ((_ is Cons!1455) (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))) (= (_1!1040 (h!2037 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))) lt!24946)))))

(assert (=> d!12371 (= (containsKey!128 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946) e!40529)))

(declare-fun b!61715 () Bool)

(declare-fun e!40530 () Bool)

(assert (=> b!61715 (= e!40529 e!40530)))

(declare-fun res!33947 () Bool)

(assert (=> b!61715 (=> (not res!33947) (not e!40530))))

(assert (=> b!61715 (= res!33947 (and (or (not ((_ is Cons!1455) (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))) (bvsle (_1!1040 (h!2037 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))) lt!24946)) ((_ is Cons!1455) (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))) (bvslt (_1!1040 (h!2037 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))) lt!24946)))))

(declare-fun b!61716 () Bool)

(assert (=> b!61716 (= e!40530 (containsKey!128 (t!4837 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))) lt!24946))))

(assert (= (and d!12371 (not res!33946)) b!61715))

(assert (= (and b!61715 res!33947) b!61716))

(declare-fun m!54833 () Bool)

(assert (=> b!61716 m!54833))

(assert (=> d!12053 d!12371))

(declare-fun d!12373 () Bool)

(declare-fun e!40532 () Bool)

(assert (=> d!12373 e!40532))

(declare-fun res!33948 () Bool)

(assert (=> d!12373 (=> res!33948 e!40532)))

(declare-fun lt!25522 () Bool)

(assert (=> d!12373 (= res!33948 (not lt!25522))))

(declare-fun lt!25524 () Bool)

(assert (=> d!12373 (= lt!25522 lt!25524)))

(declare-fun lt!25523 () Unit!1622)

(declare-fun e!40531 () Unit!1622)

(assert (=> d!12373 (= lt!25523 e!40531)))

(declare-fun c!8161 () Bool)

(assert (=> d!12373 (= c!8161 lt!25524)))

(assert (=> d!12373 (= lt!25524 (containsKey!128 (toList!708 lt!25229) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12373 (= (contains!697 lt!25229 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25522)))

(declare-fun b!61717 () Bool)

(declare-fun lt!25525 () Unit!1622)

(assert (=> b!61717 (= e!40531 lt!25525)))

(assert (=> b!61717 (= lt!25525 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25229) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61717 (isDefined!78 (getValueByKey!124 (toList!708 lt!25229) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61718 () Bool)

(declare-fun Unit!1664 () Unit!1622)

(assert (=> b!61718 (= e!40531 Unit!1664)))

(declare-fun b!61719 () Bool)

(assert (=> b!61719 (= e!40532 (isDefined!78 (getValueByKey!124 (toList!708 lt!25229) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12373 c!8161) b!61717))

(assert (= (and d!12373 (not c!8161)) b!61718))

(assert (= (and d!12373 (not res!33948)) b!61719))

(declare-fun m!54835 () Bool)

(assert (=> d!12373 m!54835))

(declare-fun m!54837 () Bool)

(assert (=> b!61717 m!54837))

(declare-fun m!54839 () Bool)

(assert (=> b!61717 m!54839))

(assert (=> b!61717 m!54839))

(declare-fun m!54841 () Bool)

(assert (=> b!61717 m!54841))

(assert (=> b!61719 m!54839))

(assert (=> b!61719 m!54839))

(assert (=> b!61719 m!54841))

(assert (=> d!12039 d!12373))

(assert (=> d!12039 d!11939))

(assert (=> bm!4687 d!11985))

(declare-fun d!12375 () Bool)

(assert (=> d!12375 (= (apply!67 lt!25179 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1093 (getValueByKey!124 (toList!708 lt!25179) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2682 () Bool)

(assert (= bs!2682 d!12375))

(assert (=> bs!2682 m!53471))

(declare-fun m!54843 () Bool)

(assert (=> bs!2682 m!54843))

(assert (=> bs!2682 m!54843))

(declare-fun m!54845 () Bool)

(assert (=> bs!2682 m!54845))

(assert (=> b!61153 d!12375))

(declare-fun d!12377 () Bool)

(declare-fun c!8162 () Bool)

(assert (=> d!12377 (= c!8162 ((_ is ValueCellFull!861) (select (arr!1793 (_values!2050 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!40533 () V!2859)

(assert (=> d!12377 (= (get!1090 (select (arr!1793 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40533)))

(declare-fun b!61720 () Bool)

(assert (=> b!61720 (= e!40533 (get!1091 (select (arr!1793 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61721 () Bool)

(assert (=> b!61721 (= e!40533 (get!1092 (select (arr!1793 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12377 c!8162) b!61720))

(assert (= (and d!12377 (not c!8162)) b!61721))

(assert (=> b!61720 m!53759))

(assert (=> b!61720 m!53493))

(declare-fun m!54847 () Bool)

(assert (=> b!61720 m!54847))

(assert (=> b!61721 m!53759))

(assert (=> b!61721 m!53493))

(declare-fun m!54849 () Bool)

(assert (=> b!61721 m!54849))

(assert (=> b!61153 d!12377))

(assert (=> d!12015 d!12017))

(assert (=> d!12015 d!12019))

(declare-fun d!12379 () Bool)

(assert (=> d!12379 (isDefined!78 (getValueByKey!124 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12379 true))

(declare-fun _$12!308 () Unit!1622)

(assert (=> d!12379 (= (choose!329 (toList!708 lt!24780) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) _$12!308)))

(declare-fun bs!2683 () Bool)

(assert (= bs!2683 d!12379))

(assert (=> bs!2683 m!53207))

(assert (=> bs!2683 m!53295))

(assert (=> bs!2683 m!53295))

(assert (=> bs!2683 m!53297))

(assert (=> d!12015 d!12379))

(declare-fun d!12381 () Bool)

(declare-fun res!33953 () Bool)

(declare-fun e!40538 () Bool)

(assert (=> d!12381 (=> res!33953 e!40538)))

(assert (=> d!12381 (= res!33953 (or ((_ is Nil!1456) (toList!708 lt!24780)) ((_ is Nil!1456) (t!4837 (toList!708 lt!24780)))))))

(assert (=> d!12381 (= (isStrictlySorted!280 (toList!708 lt!24780)) e!40538)))

(declare-fun b!61726 () Bool)

(declare-fun e!40539 () Bool)

(assert (=> b!61726 (= e!40538 e!40539)))

(declare-fun res!33954 () Bool)

(assert (=> b!61726 (=> (not res!33954) (not e!40539))))

(assert (=> b!61726 (= res!33954 (bvslt (_1!1040 (h!2037 (toList!708 lt!24780))) (_1!1040 (h!2037 (t!4837 (toList!708 lt!24780))))))))

(declare-fun b!61727 () Bool)

(assert (=> b!61727 (= e!40539 (isStrictlySorted!280 (t!4837 (toList!708 lt!24780))))))

(assert (= (and d!12381 (not res!33953)) b!61726))

(assert (= (and b!61726 res!33954) b!61727))

(declare-fun m!54851 () Bool)

(assert (=> b!61727 m!54851))

(assert (=> d!12015 d!12381))

(declare-fun d!12383 () Bool)

(declare-fun e!40541 () Bool)

(assert (=> d!12383 e!40541))

(declare-fun res!33955 () Bool)

(assert (=> d!12383 (=> res!33955 e!40541)))

(declare-fun lt!25526 () Bool)

(assert (=> d!12383 (= res!33955 (not lt!25526))))

(declare-fun lt!25528 () Bool)

(assert (=> d!12383 (= lt!25526 lt!25528)))

(declare-fun lt!25527 () Unit!1622)

(declare-fun e!40540 () Unit!1622)

(assert (=> d!12383 (= lt!25527 e!40540)))

(declare-fun c!8163 () Bool)

(assert (=> d!12383 (= c!8163 lt!25528)))

(assert (=> d!12383 (= lt!25528 (containsKey!128 (toList!708 lt!24959) lt!24957))))

(assert (=> d!12383 (= (contains!697 lt!24959 lt!24957) lt!25526)))

(declare-fun b!61728 () Bool)

(declare-fun lt!25529 () Unit!1622)

(assert (=> b!61728 (= e!40540 lt!25529)))

(assert (=> b!61728 (= lt!25529 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24959) lt!24957))))

(assert (=> b!61728 (isDefined!78 (getValueByKey!124 (toList!708 lt!24959) lt!24957))))

(declare-fun b!61729 () Bool)

(declare-fun Unit!1665 () Unit!1622)

(assert (=> b!61729 (= e!40540 Unit!1665)))

(declare-fun b!61730 () Bool)

(assert (=> b!61730 (= e!40541 (isDefined!78 (getValueByKey!124 (toList!708 lt!24959) lt!24957)))))

(assert (= (and d!12383 c!8163) b!61728))

(assert (= (and d!12383 (not c!8163)) b!61729))

(assert (= (and d!12383 (not res!33955)) b!61730))

(declare-fun m!54853 () Bool)

(assert (=> d!12383 m!54853))

(declare-fun m!54855 () Bool)

(assert (=> b!61728 m!54855))

(assert (=> b!61728 m!53963))

(assert (=> b!61728 m!53963))

(declare-fun m!54857 () Bool)

(assert (=> b!61728 m!54857))

(assert (=> b!61730 m!53963))

(assert (=> b!61730 m!53963))

(assert (=> b!61730 m!54857))

(assert (=> d!12055 d!12383))

(assert (=> d!12055 d!12065))

(assert (=> d!12055 d!12057))

(assert (=> d!12055 d!12071))

(declare-fun d!12385 () Bool)

(assert (=> d!12385 (= (apply!67 (+!82 lt!24959 (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24957) (apply!67 lt!24959 lt!24957))))

(assert (=> d!12385 true))

(declare-fun _$34!768 () Unit!1622)

(assert (=> d!12385 (= (choose!330 lt!24959 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24957) _$34!768)))

(declare-fun bs!2684 () Bool)

(assert (= bs!2684 d!12385))

(assert (=> bs!2684 m!53393))

(assert (=> bs!2684 m!53393))

(assert (=> bs!2684 m!53409))

(assert (=> bs!2684 m!53411))

(assert (=> d!12055 d!12385))

(declare-fun d!12387 () Bool)

(declare-fun res!33956 () Bool)

(declare-fun e!40542 () Bool)

(assert (=> d!12387 (=> res!33956 e!40542)))

(assert (=> d!12387 (= res!33956 (and ((_ is Cons!1455) (toList!708 call!4637)) (= (_1!1040 (h!2037 (toList!708 call!4637))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12387 (= (containsKey!128 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) e!40542)))

(declare-fun b!61731 () Bool)

(declare-fun e!40543 () Bool)

(assert (=> b!61731 (= e!40542 e!40543)))

(declare-fun res!33957 () Bool)

(assert (=> b!61731 (=> (not res!33957) (not e!40543))))

(assert (=> b!61731 (= res!33957 (and (or (not ((_ is Cons!1455) (toList!708 call!4637))) (bvsle (_1!1040 (h!2037 (toList!708 call!4637))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))) ((_ is Cons!1455) (toList!708 call!4637)) (bvslt (_1!1040 (h!2037 (toList!708 call!4637))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(declare-fun b!61732 () Bool)

(assert (=> b!61732 (= e!40543 (containsKey!128 (t!4837 (toList!708 call!4637)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12387 (not res!33956)) b!61731))

(assert (= (and b!61731 res!33957) b!61732))

(assert (=> b!61732 m!53207))

(declare-fun m!54859 () Bool)

(assert (=> b!61732 m!54859))

(assert (=> d!11983 d!12387))

(declare-fun d!12389 () Bool)

(assert (=> d!12389 (= (apply!67 lt!25179 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1093 (getValueByKey!124 (toList!708 lt!25179) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2685 () Bool)

(assert (= bs!2685 d!12389))

(declare-fun m!54861 () Bool)

(assert (=> bs!2685 m!54861))

(assert (=> bs!2685 m!54861))

(declare-fun m!54863 () Bool)

(assert (=> bs!2685 m!54863))

(assert (=> b!61136 d!12389))

(declare-fun b!61751 () Bool)

(declare-fun lt!25535 () SeekEntryResult!238)

(assert (=> b!61751 (and (bvsge (index!3078 lt!25535) #b00000000000000000000000000000000) (bvslt (index!3078 lt!25535) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun res!33964 () Bool)

(assert (=> b!61751 (= res!33964 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3078 lt!25535)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40556 () Bool)

(assert (=> b!61751 (=> res!33964 e!40556)))

(declare-fun b!61752 () Bool)

(assert (=> b!61752 (and (bvsge (index!3078 lt!25535) #b00000000000000000000000000000000) (bvslt (index!3078 lt!25535) (size!2023 (_keys!3695 newMap!16))))))

(assert (=> b!61752 (= e!40556 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3078 lt!25535)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61753 () Bool)

(declare-fun e!40557 () Bool)

(assert (=> b!61753 (= e!40557 (bvsge (x!10172 lt!25535) #b01111111111111111111111111111110))))

(declare-fun b!61754 () Bool)

(declare-fun e!40555 () Bool)

(assert (=> b!61754 (= e!40557 e!40555)))

(declare-fun res!33966 () Bool)

(assert (=> b!61754 (= res!33966 (and ((_ is Intermediate!238) lt!25535) (not (undefined!1050 lt!25535)) (bvslt (x!10172 lt!25535) #b01111111111111111111111111111110) (bvsge (x!10172 lt!25535) #b00000000000000000000000000000000) (bvsge (x!10172 lt!25535) #b00000000000000000000000000000000)))))

(assert (=> b!61754 (=> (not res!33966) (not e!40555))))

(declare-fun e!40554 () SeekEntryResult!238)

(declare-fun b!61755 () Bool)

(assert (=> b!61755 (= e!40554 (Intermediate!238 false (toIndex!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun e!40558 () SeekEntryResult!238)

(declare-fun b!61756 () Bool)

(assert (=> b!61756 (= e!40558 (Intermediate!238 true (toIndex!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!61757 () Bool)

(assert (=> b!61757 (and (bvsge (index!3078 lt!25535) #b00000000000000000000000000000000) (bvslt (index!3078 lt!25535) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun res!33965 () Bool)

(assert (=> b!61757 (= res!33965 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3078 lt!25535)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!61757 (=> res!33965 e!40556)))

(assert (=> b!61757 (= e!40555 e!40556)))

(declare-fun d!12391 () Bool)

(assert (=> d!12391 e!40557))

(declare-fun c!8171 () Bool)

(assert (=> d!12391 (= c!8171 (and ((_ is Intermediate!238) lt!25535) (undefined!1050 lt!25535)))))

(assert (=> d!12391 (= lt!25535 e!40558)))

(declare-fun c!8172 () Bool)

(assert (=> d!12391 (= c!8172 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!25534 () (_ BitVec 64))

(assert (=> d!12391 (= lt!25534 (select (arr!1792 (_keys!3695 newMap!16)) (toIndex!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16))))))

(assert (=> d!12391 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12391 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)) lt!25535)))

(declare-fun b!61758 () Bool)

(assert (=> b!61758 (= e!40558 e!40554)))

(declare-fun c!8170 () Bool)

(assert (=> b!61758 (= c!8170 (or (= lt!25534 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) (= (bvadd lt!25534 lt!25534) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61759 () Bool)

(assert (=> b!61759 (= e!40554 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) #b00000000000000000000000000000000 (mask!5963 newMap!16)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (= (and d!12391 c!8172) b!61756))

(assert (= (and d!12391 (not c!8172)) b!61758))

(assert (= (and b!61758 c!8170) b!61755))

(assert (= (and b!61758 (not c!8170)) b!61759))

(assert (= (and d!12391 c!8171) b!61753))

(assert (= (and d!12391 (not c!8171)) b!61754))

(assert (= (and b!61754 res!33966) b!61757))

(assert (= (and b!61757 (not res!33965)) b!61751))

(assert (= (and b!61751 (not res!33964)) b!61752))

(declare-fun m!54865 () Bool)

(assert (=> b!61752 m!54865))

(assert (=> d!12391 m!53605))

(declare-fun m!54867 () Bool)

(assert (=> d!12391 m!54867))

(assert (=> d!12391 m!53453))

(assert (=> b!61759 m!53605))

(declare-fun m!54869 () Bool)

(assert (=> b!61759 m!54869))

(assert (=> b!61759 m!54869))

(assert (=> b!61759 m!53207))

(declare-fun m!54871 () Bool)

(assert (=> b!61759 m!54871))

(assert (=> b!61757 m!54865))

(assert (=> b!61751 m!54865))

(assert (=> d!11985 d!12391))

(declare-fun d!12393 () Bool)

(declare-fun lt!25541 () (_ BitVec 32))

(declare-fun lt!25540 () (_ BitVec 32))

(assert (=> d!12393 (= lt!25541 (bvmul (bvxor lt!25540 (bvlshr lt!25540 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!12393 (= lt!25540 ((_ extract 31 0) (bvand (bvxor (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvlshr (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!12393 (and (bvsge (mask!5963 newMap!16) #b00000000000000000000000000000000) (let ((res!33967 (let ((h!2040 ((_ extract 31 0) (bvand (bvxor (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvlshr (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!10276 (bvmul (bvxor h!2040 (bvlshr h!2040 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!10276 (bvlshr x!10276 #b00000000000000000000000000001101)) (mask!5963 newMap!16)))))) (and (bvslt res!33967 (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001)) (bvsge res!33967 #b00000000000000000000000000000000))))))

(assert (=> d!12393 (= (toIndex!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) (bvand (bvxor lt!25541 (bvlshr lt!25541 #b00000000000000000000000000001101)) (mask!5963 newMap!16)))))

(assert (=> d!11985 d!12393))

(assert (=> d!11985 d!12105))

(declare-fun d!12395 () Bool)

(assert (=> d!12395 (= (content!64 Nil!1457) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!11965 d!12395))

(declare-fun d!12397 () Bool)

(declare-fun e!40559 () Bool)

(assert (=> d!12397 e!40559))

(declare-fun res!33968 () Bool)

(assert (=> d!12397 (=> (not res!33968) (not e!40559))))

(declare-fun lt!25542 () ListLongMap!1385)

(assert (=> d!12397 (= res!33968 (contains!697 lt!25542 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(declare-fun lt!25544 () List!1459)

(assert (=> d!12397 (= lt!25542 (ListLongMap!1386 lt!25544))))

(declare-fun lt!25545 () Unit!1622)

(declare-fun lt!25543 () Unit!1622)

(assert (=> d!12397 (= lt!25545 lt!25543)))

(assert (=> d!12397 (= (getValueByKey!124 lt!25544 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!129 (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12397 (= lt!25543 (lemmaContainsTupThenGetReturnValue!43 lt!25544 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12397 (= lt!25544 (insertStrictlySorted!45 (toList!708 call!4673) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12397 (= (+!82 call!4673 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25542)))

(declare-fun b!61760 () Bool)

(declare-fun res!33969 () Bool)

(assert (=> b!61760 (=> (not res!33969) (not e!40559))))

(assert (=> b!61760 (= res!33969 (= (getValueByKey!124 (toList!708 lt!25542) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!129 (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(declare-fun b!61761 () Bool)

(assert (=> b!61761 (= e!40559 (contains!699 (toList!708 lt!25542) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))

(assert (= (and d!12397 res!33968) b!61760))

(assert (= (and b!61760 res!33969) b!61761))

(declare-fun m!54873 () Bool)

(assert (=> d!12397 m!54873))

(declare-fun m!54875 () Bool)

(assert (=> d!12397 m!54875))

(declare-fun m!54877 () Bool)

(assert (=> d!12397 m!54877))

(declare-fun m!54879 () Bool)

(assert (=> d!12397 m!54879))

(declare-fun m!54881 () Bool)

(assert (=> b!61760 m!54881))

(declare-fun m!54883 () Bool)

(assert (=> b!61761 m!54883))

(assert (=> b!60997 d!12397))

(declare-fun d!12399 () Bool)

(declare-fun e!40561 () Bool)

(assert (=> d!12399 e!40561))

(declare-fun res!33970 () Bool)

(assert (=> d!12399 (=> res!33970 e!40561)))

(declare-fun lt!25546 () Bool)

(assert (=> d!12399 (= res!33970 (not lt!25546))))

(declare-fun lt!25548 () Bool)

(assert (=> d!12399 (= lt!25546 lt!25548)))

(declare-fun lt!25547 () Unit!1622)

(declare-fun e!40560 () Unit!1622)

(assert (=> d!12399 (= lt!25547 e!40560)))

(declare-fun c!8173 () Bool)

(assert (=> d!12399 (= c!8173 lt!25548)))

(assert (=> d!12399 (= lt!25548 (containsKey!128 (toList!708 lt!25171) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12399 (= (contains!697 lt!25171 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) lt!25546)))

(declare-fun b!61762 () Bool)

(declare-fun lt!25549 () Unit!1622)

(assert (=> b!61762 (= e!40560 lt!25549)))

(assert (=> b!61762 (= lt!25549 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25171) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> b!61762 (isDefined!78 (getValueByKey!124 (toList!708 lt!25171) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61763 () Bool)

(declare-fun Unit!1666 () Unit!1622)

(assert (=> b!61763 (= e!40560 Unit!1666)))

(declare-fun b!61764 () Bool)

(assert (=> b!61764 (= e!40561 (isDefined!78 (getValueByKey!124 (toList!708 lt!25171) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(assert (= (and d!12399 c!8173) b!61762))

(assert (= (and d!12399 (not c!8173)) b!61763))

(assert (= (and d!12399 (not res!33970)) b!61764))

(declare-fun m!54885 () Bool)

(assert (=> d!12399 m!54885))

(declare-fun m!54887 () Bool)

(assert (=> b!61762 m!54887))

(assert (=> b!61762 m!53741))

(assert (=> b!61762 m!53741))

(declare-fun m!54889 () Bool)

(assert (=> b!61762 m!54889))

(assert (=> b!61764 m!53741))

(assert (=> b!61764 m!53741))

(assert (=> b!61764 m!54889))

(assert (=> d!12011 d!12399))

(declare-fun e!40563 () Option!130)

(declare-fun b!61767 () Bool)

(assert (=> b!61767 (= e!40563 (getValueByKey!124 (t!4837 lt!25173) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61768 () Bool)

(assert (=> b!61768 (= e!40563 None!128)))

(declare-fun b!61766 () Bool)

(declare-fun e!40562 () Option!130)

(assert (=> b!61766 (= e!40562 e!40563)))

(declare-fun c!8175 () Bool)

(assert (=> b!61766 (= c!8175 (and ((_ is Cons!1455) lt!25173) (not (= (_1!1040 (h!2037 lt!25173)) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))))

(declare-fun b!61765 () Bool)

(assert (=> b!61765 (= e!40562 (Some!129 (_2!1040 (h!2037 lt!25173))))))

(declare-fun c!8174 () Bool)

(declare-fun d!12401 () Bool)

(assert (=> d!12401 (= c!8174 (and ((_ is Cons!1455) lt!25173) (= (_1!1040 (h!2037 lt!25173)) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(assert (=> d!12401 (= (getValueByKey!124 lt!25173 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) e!40562)))

(assert (= (and d!12401 c!8174) b!61765))

(assert (= (and d!12401 (not c!8174)) b!61766))

(assert (= (and b!61766 c!8175) b!61767))

(assert (= (and b!61766 (not c!8175)) b!61768))

(declare-fun m!54891 () Bool)

(assert (=> b!61767 m!54891))

(assert (=> d!12011 d!12401))

(declare-fun d!12403 () Bool)

(assert (=> d!12403 (= (getValueByKey!124 lt!25173 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) (Some!129 (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun lt!25550 () Unit!1622)

(assert (=> d!12403 (= lt!25550 (choose!333 lt!25173 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun e!40564 () Bool)

(assert (=> d!12403 e!40564))

(declare-fun res!33971 () Bool)

(assert (=> d!12403 (=> (not res!33971) (not e!40564))))

(assert (=> d!12403 (= res!33971 (isStrictlySorted!280 lt!25173))))

(assert (=> d!12403 (= (lemmaContainsTupThenGetReturnValue!43 lt!25173 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) lt!25550)))

(declare-fun b!61769 () Bool)

(declare-fun res!33972 () Bool)

(assert (=> b!61769 (=> (not res!33972) (not e!40564))))

(assert (=> b!61769 (= res!33972 (containsKey!128 lt!25173 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61770 () Bool)

(assert (=> b!61770 (= e!40564 (contains!699 lt!25173 (tuple2!2061 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(assert (= (and d!12403 res!33971) b!61769))

(assert (= (and b!61769 res!33972) b!61770))

(assert (=> d!12403 m!53735))

(declare-fun m!54893 () Bool)

(assert (=> d!12403 m!54893))

(declare-fun m!54895 () Bool)

(assert (=> d!12403 m!54895))

(declare-fun m!54897 () Bool)

(assert (=> b!61769 m!54897))

(declare-fun m!54899 () Bool)

(assert (=> b!61770 m!54899))

(assert (=> d!12011 d!12403))

(declare-fun bm!4755 () Bool)

(declare-fun call!4758 () List!1459)

(declare-fun call!4759 () List!1459)

(assert (=> bm!4755 (= call!4758 call!4759)))

(declare-fun b!61771 () Bool)

(declare-fun e!40565 () List!1459)

(declare-fun call!4760 () List!1459)

(assert (=> b!61771 (= e!40565 call!4760)))

(declare-fun d!12405 () Bool)

(declare-fun e!40569 () Bool)

(assert (=> d!12405 e!40569))

(declare-fun res!33974 () Bool)

(assert (=> d!12405 (=> (not res!33974) (not e!40569))))

(declare-fun lt!25551 () List!1459)

(assert (=> d!12405 (= res!33974 (isStrictlySorted!280 lt!25551))))

(declare-fun e!40566 () List!1459)

(assert (=> d!12405 (= lt!25551 e!40566)))

(declare-fun c!8177 () Bool)

(assert (=> d!12405 (= c!8177 (and ((_ is Cons!1455) (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658)))) (bvslt (_1!1040 (h!2037 (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658))))) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(assert (=> d!12405 (isStrictlySorted!280 (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658))))))

(assert (=> d!12405 (= (insertStrictlySorted!45 (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658))) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) lt!25551)))

(declare-fun b!61772 () Bool)

(declare-fun e!40568 () List!1459)

(assert (=> b!61772 (= e!40566 e!40568)))

(declare-fun c!8178 () Bool)

(assert (=> b!61772 (= c!8178 (and ((_ is Cons!1455) (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658)))) (= (_1!1040 (h!2037 (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658))))) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun c!8179 () Bool)

(declare-fun b!61773 () Bool)

(assert (=> b!61773 (= c!8179 (and ((_ is Cons!1455) (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658)))) (bvsgt (_1!1040 (h!2037 (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658))))) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(assert (=> b!61773 (= e!40568 e!40565)))

(declare-fun b!61774 () Bool)

(assert (=> b!61774 (= e!40569 (contains!699 lt!25551 (tuple2!2061 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61775 () Bool)

(declare-fun e!40567 () List!1459)

(assert (=> b!61775 (= e!40567 (ite c!8178 (t!4837 (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658)))) (ite c!8179 (Cons!1455 (h!2037 (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658)))) (t!4837 (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658))))) Nil!1456)))))

(declare-fun bm!4756 () Bool)

(assert (=> bm!4756 (= call!4759 ($colon$colon!60 e!40567 (ite c!8177 (h!2037 (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658)))) (tuple2!2061 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))))

(declare-fun c!8176 () Bool)

(assert (=> bm!4756 (= c!8176 c!8177)))

(declare-fun b!61776 () Bool)

(assert (=> b!61776 (= e!40568 call!4758)))

(declare-fun b!61777 () Bool)

(assert (=> b!61777 (= e!40566 call!4759)))

(declare-fun bm!4757 () Bool)

(assert (=> bm!4757 (= call!4760 call!4758)))

(declare-fun b!61778 () Bool)

(assert (=> b!61778 (= e!40565 call!4760)))

(declare-fun b!61779 () Bool)

(declare-fun res!33973 () Bool)

(assert (=> b!61779 (=> (not res!33973) (not e!40569))))

(assert (=> b!61779 (= res!33973 (containsKey!128 lt!25551 (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!61780 () Bool)

(assert (=> b!61780 (= e!40567 (insertStrictlySorted!45 (t!4837 (toList!708 (ite c!7936 call!4654 (ite c!7938 call!4656 call!4658)))) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (_2!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (= (and d!12405 c!8177) b!61777))

(assert (= (and d!12405 (not c!8177)) b!61772))

(assert (= (and b!61772 c!8178) b!61776))

(assert (= (and b!61772 (not c!8178)) b!61773))

(assert (= (and b!61773 c!8179) b!61778))

(assert (= (and b!61773 (not c!8179)) b!61771))

(assert (= (or b!61778 b!61771) bm!4757))

(assert (= (or b!61776 bm!4757) bm!4755))

(assert (= (or b!61777 bm!4755) bm!4756))

(assert (= (and bm!4756 c!8176) b!61780))

(assert (= (and bm!4756 (not c!8176)) b!61775))

(assert (= (and d!12405 res!33974) b!61779))

(assert (= (and b!61779 res!33973) b!61774))

(declare-fun m!54901 () Bool)

(assert (=> b!61780 m!54901))

(declare-fun m!54903 () Bool)

(assert (=> bm!4756 m!54903))

(declare-fun m!54905 () Bool)

(assert (=> d!12405 m!54905))

(declare-fun m!54907 () Bool)

(assert (=> d!12405 m!54907))

(declare-fun m!54909 () Bool)

(assert (=> b!61774 m!54909))

(declare-fun m!54911 () Bool)

(assert (=> b!61779 m!54911))

(assert (=> d!12011 d!12405))

(declare-fun b!61783 () Bool)

(declare-fun e!40571 () Option!130)

(assert (=> b!61783 (= e!40571 (getValueByKey!124 (t!4837 (toList!708 lt!25275)) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61784 () Bool)

(assert (=> b!61784 (= e!40571 None!128)))

(declare-fun b!61782 () Bool)

(declare-fun e!40570 () Option!130)

(assert (=> b!61782 (= e!40570 e!40571)))

(declare-fun c!8181 () Bool)

(assert (=> b!61782 (= c!8181 (and ((_ is Cons!1455) (toList!708 lt!25275)) (not (= (_1!1040 (h!2037 (toList!708 lt!25275))) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!61781 () Bool)

(assert (=> b!61781 (= e!40570 (Some!129 (_2!1040 (h!2037 (toList!708 lt!25275)))))))

(declare-fun c!8180 () Bool)

(declare-fun d!12407 () Bool)

(assert (=> d!12407 (= c!8180 (and ((_ is Cons!1455) (toList!708 lt!25275)) (= (_1!1040 (h!2037 (toList!708 lt!25275))) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12407 (= (getValueByKey!124 (toList!708 lt!25275) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!40570)))

(assert (= (and d!12407 c!8180) b!61781))

(assert (= (and d!12407 (not c!8180)) b!61782))

(assert (= (and b!61782 c!8181) b!61783))

(assert (= (and b!61782 (not c!8181)) b!61784))

(declare-fun m!54913 () Bool)

(assert (=> b!61783 m!54913))

(assert (=> b!61271 d!12407))

(declare-fun e!40573 () Option!130)

(declare-fun b!61787 () Bool)

(assert (=> b!61787 (= e!40573 (getValueByKey!124 (t!4837 (toList!708 lt!25253)) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61788 () Bool)

(assert (=> b!61788 (= e!40573 None!128)))

(declare-fun b!61786 () Bool)

(declare-fun e!40572 () Option!130)

(assert (=> b!61786 (= e!40572 e!40573)))

(declare-fun c!8183 () Bool)

(assert (=> b!61786 (= c!8183 (and ((_ is Cons!1455) (toList!708 lt!25253)) (not (= (_1!1040 (h!2037 (toList!708 lt!25253))) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61785 () Bool)

(assert (=> b!61785 (= e!40572 (Some!129 (_2!1040 (h!2037 (toList!708 lt!25253)))))))

(declare-fun d!12409 () Bool)

(declare-fun c!8182 () Bool)

(assert (=> d!12409 (= c!8182 (and ((_ is Cons!1455) (toList!708 lt!25253)) (= (_1!1040 (h!2037 (toList!708 lt!25253))) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12409 (= (getValueByKey!124 (toList!708 lt!25253) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) e!40572)))

(assert (= (and d!12409 c!8182) b!61785))

(assert (= (and d!12409 (not c!8182)) b!61786))

(assert (= (and b!61786 c!8183) b!61787))

(assert (= (and b!61786 (not c!8183)) b!61788))

(declare-fun m!54915 () Bool)

(assert (=> b!61787 m!54915))

(assert (=> b!61250 d!12409))

(assert (=> b!60944 d!12335))

(assert (=> b!60944 d!12013))

(declare-fun bm!4758 () Bool)

(declare-fun call!4764 () ListLongMap!1385)

(declare-fun call!4762 () ListLongMap!1385)

(assert (=> bm!4758 (= call!4764 call!4762)))

(declare-fun b!61789 () Bool)

(declare-fun res!33978 () Bool)

(declare-fun e!40580 () Bool)

(assert (=> b!61789 (=> (not res!33978) (not e!40580))))

(declare-fun e!40581 () Bool)

(assert (=> b!61789 (= res!33978 e!40581)))

(declare-fun c!8184 () Bool)

(assert (=> b!61789 (= c!8184 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4759 () Bool)

(assert (=> bm!4759 (= call!4762 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61790 () Bool)

(declare-fun e!40586 () Bool)

(declare-fun lt!25556 () ListLongMap!1385)

(assert (=> b!61790 (= e!40586 (= (apply!67 lt!25556 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!61791 () Bool)

(declare-fun e!40578 () Bool)

(assert (=> b!61791 (= e!40581 e!40578)))

(declare-fun res!33981 () Bool)

(declare-fun call!4765 () Bool)

(assert (=> b!61791 (= res!33981 call!4765)))

(assert (=> b!61791 (=> (not res!33981) (not e!40578))))

(declare-fun b!61792 () Bool)

(assert (=> b!61792 (= e!40578 (= (apply!67 lt!25556 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun b!61793 () Bool)

(declare-fun e!40585 () Bool)

(assert (=> b!61793 (= e!40585 e!40586)))

(declare-fun res!33975 () Bool)

(declare-fun call!4767 () Bool)

(assert (=> b!61793 (= res!33975 call!4767)))

(assert (=> b!61793 (=> (not res!33975) (not e!40586))))

(declare-fun b!61794 () Bool)

(declare-fun c!8188 () Bool)

(assert (=> b!61794 (= c!8188 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40583 () ListLongMap!1385)

(declare-fun e!40574 () ListLongMap!1385)

(assert (=> b!61794 (= e!40583 e!40574)))

(declare-fun b!61795 () Bool)

(declare-fun e!40582 () Bool)

(declare-fun e!40576 () Bool)

(assert (=> b!61795 (= e!40582 e!40576)))

(declare-fun res!33979 () Bool)

(assert (=> b!61795 (=> (not res!33979) (not e!40576))))

(assert (=> b!61795 (= res!33979 (contains!697 lt!25556 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61795 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61796 () Bool)

(assert (=> b!61796 (= e!40580 e!40585)))

(declare-fun c!8189 () Bool)

(assert (=> b!61796 (= c!8189 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4760 () Bool)

(assert (=> bm!4760 (= call!4765 (contains!697 lt!25556 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61797 () Bool)

(declare-fun call!4763 () ListLongMap!1385)

(assert (=> b!61797 (= e!40574 call!4763)))

(declare-fun bm!4761 () Bool)

(declare-fun call!4761 () ListLongMap!1385)

(declare-fun c!8187 () Bool)

(declare-fun c!8185 () Bool)

(declare-fun call!4766 () ListLongMap!1385)

(assert (=> bm!4761 (= call!4761 (+!82 (ite c!8185 call!4762 (ite c!8187 call!4764 call!4766)) (ite (or c!8185 c!8187) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!61798 () Bool)

(declare-fun e!40579 () Bool)

(assert (=> b!61798 (= e!40579 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61799 () Bool)

(assert (=> b!61799 (= e!40574 call!4766)))

(declare-fun b!61800 () Bool)

(declare-fun e!40575 () Unit!1622)

(declare-fun Unit!1667 () Unit!1622)

(assert (=> b!61800 (= e!40575 Unit!1667)))

(declare-fun bm!4762 () Bool)

(assert (=> bm!4762 (= call!4766 call!4764)))

(declare-fun d!12411 () Bool)

(assert (=> d!12411 e!40580))

(declare-fun res!33982 () Bool)

(assert (=> d!12411 (=> (not res!33982) (not e!40580))))

(assert (=> d!12411 (= res!33982 (or (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))))

(declare-fun lt!25568 () ListLongMap!1385)

(assert (=> d!12411 (= lt!25556 lt!25568)))

(declare-fun lt!25561 () Unit!1622)

(assert (=> d!12411 (= lt!25561 e!40575)))

(declare-fun c!8186 () Bool)

(declare-fun e!40577 () Bool)

(assert (=> d!12411 (= c!8186 e!40577)))

(declare-fun res!33980 () Bool)

(assert (=> d!12411 (=> (not res!33980) (not e!40577))))

(assert (=> d!12411 (= res!33980 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun e!40584 () ListLongMap!1385)

(assert (=> d!12411 (= lt!25568 e!40584)))

(assert (=> d!12411 (= c!8185 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12411 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12411 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25556)))

(declare-fun b!61801 () Bool)

(declare-fun lt!25559 () Unit!1622)

(assert (=> b!61801 (= e!40575 lt!25559)))

(declare-fun lt!25562 () ListLongMap!1385)

(assert (=> b!61801 (= lt!25562 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25553 () (_ BitVec 64))

(assert (=> b!61801 (= lt!25553 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25554 () (_ BitVec 64))

(assert (=> b!61801 (= lt!25554 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25569 () Unit!1622)

(assert (=> b!61801 (= lt!25569 (addStillContains!43 lt!25562 lt!25553 (zeroValue!1981 newMap!16) lt!25554))))

(assert (=> b!61801 (contains!697 (+!82 lt!25562 (tuple2!2061 lt!25553 (zeroValue!1981 newMap!16))) lt!25554)))

(declare-fun lt!25558 () Unit!1622)

(assert (=> b!61801 (= lt!25558 lt!25569)))

(declare-fun lt!25552 () ListLongMap!1385)

(assert (=> b!61801 (= lt!25552 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25572 () (_ BitVec 64))

(assert (=> b!61801 (= lt!25572 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25564 () (_ BitVec 64))

(assert (=> b!61801 (= lt!25564 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25557 () Unit!1622)

(assert (=> b!61801 (= lt!25557 (addApplyDifferent!43 lt!25552 lt!25572 (minValue!1981 newMap!16) lt!25564))))

(assert (=> b!61801 (= (apply!67 (+!82 lt!25552 (tuple2!2061 lt!25572 (minValue!1981 newMap!16))) lt!25564) (apply!67 lt!25552 lt!25564))))

(declare-fun lt!25570 () Unit!1622)

(assert (=> b!61801 (= lt!25570 lt!25557)))

(declare-fun lt!25567 () ListLongMap!1385)

(assert (=> b!61801 (= lt!25567 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25571 () (_ BitVec 64))

(assert (=> b!61801 (= lt!25571 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25565 () (_ BitVec 64))

(assert (=> b!61801 (= lt!25565 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25555 () Unit!1622)

(assert (=> b!61801 (= lt!25555 (addApplyDifferent!43 lt!25567 lt!25571 (zeroValue!1981 newMap!16) lt!25565))))

(assert (=> b!61801 (= (apply!67 (+!82 lt!25567 (tuple2!2061 lt!25571 (zeroValue!1981 newMap!16))) lt!25565) (apply!67 lt!25567 lt!25565))))

(declare-fun lt!25563 () Unit!1622)

(assert (=> b!61801 (= lt!25563 lt!25555)))

(declare-fun lt!25573 () ListLongMap!1385)

(assert (=> b!61801 (= lt!25573 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25560 () (_ BitVec 64))

(assert (=> b!61801 (= lt!25560 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25566 () (_ BitVec 64))

(assert (=> b!61801 (= lt!25566 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61801 (= lt!25559 (addApplyDifferent!43 lt!25573 lt!25560 (minValue!1981 newMap!16) lt!25566))))

(assert (=> b!61801 (= (apply!67 (+!82 lt!25573 (tuple2!2061 lt!25560 (minValue!1981 newMap!16))) lt!25566) (apply!67 lt!25573 lt!25566))))

(declare-fun b!61802 () Bool)

(assert (=> b!61802 (= e!40584 (+!82 call!4761 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun bm!4763 () Bool)

(assert (=> bm!4763 (= call!4763 call!4761)))

(declare-fun b!61803 () Bool)

(assert (=> b!61803 (= e!40585 (not call!4767))))

(declare-fun b!61804 () Bool)

(assert (=> b!61804 (= e!40581 (not call!4765))))

(declare-fun b!61805 () Bool)

(assert (=> b!61805 (= e!40583 call!4763)))

(declare-fun b!61806 () Bool)

(declare-fun res!33983 () Bool)

(assert (=> b!61806 (=> (not res!33983) (not e!40580))))

(assert (=> b!61806 (= res!33983 e!40582)))

(declare-fun res!33977 () Bool)

(assert (=> b!61806 (=> res!33977 e!40582)))

(assert (=> b!61806 (= res!33977 (not e!40579))))

(declare-fun res!33976 () Bool)

(assert (=> b!61806 (=> (not res!33976) (not e!40579))))

(assert (=> b!61806 (= res!33976 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61807 () Bool)

(assert (=> b!61807 (= e!40576 (= (apply!67 lt!25556 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61807 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))))))

(assert (=> b!61807 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61808 () Bool)

(assert (=> b!61808 (= e!40577 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61809 () Bool)

(assert (=> b!61809 (= e!40584 e!40583)))

(assert (=> b!61809 (= c!8187 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4764 () Bool)

(assert (=> bm!4764 (= call!4767 (contains!697 lt!25556 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12411 c!8185) b!61802))

(assert (= (and d!12411 (not c!8185)) b!61809))

(assert (= (and b!61809 c!8187) b!61805))

(assert (= (and b!61809 (not c!8187)) b!61794))

(assert (= (and b!61794 c!8188) b!61797))

(assert (= (and b!61794 (not c!8188)) b!61799))

(assert (= (or b!61797 b!61799) bm!4762))

(assert (= (or b!61805 bm!4762) bm!4758))

(assert (= (or b!61805 b!61797) bm!4763))

(assert (= (or b!61802 bm!4758) bm!4759))

(assert (= (or b!61802 bm!4763) bm!4761))

(assert (= (and d!12411 res!33980) b!61808))

(assert (= (and d!12411 c!8186) b!61801))

(assert (= (and d!12411 (not c!8186)) b!61800))

(assert (= (and d!12411 res!33982) b!61806))

(assert (= (and b!61806 res!33976) b!61798))

(assert (= (and b!61806 (not res!33977)) b!61795))

(assert (= (and b!61795 res!33979) b!61807))

(assert (= (and b!61806 res!33983) b!61789))

(assert (= (and b!61789 c!8184) b!61791))

(assert (= (and b!61789 (not c!8184)) b!61804))

(assert (= (and b!61791 res!33981) b!61792))

(assert (= (or b!61791 b!61804) bm!4760))

(assert (= (and b!61789 res!33978) b!61796))

(assert (= (and b!61796 c!8189) b!61793))

(assert (= (and b!61796 (not c!8189)) b!61803))

(assert (= (and b!61793 res!33975) b!61790))

(assert (= (or b!61793 b!61803) bm!4764))

(declare-fun b_lambda!2743 () Bool)

(assert (=> (not b_lambda!2743) (not b!61807)))

(assert (=> b!61807 t!4845))

(declare-fun b_and!3765 () Bool)

(assert (= b_and!3761 (and (=> t!4845 result!2435) b_and!3765)))

(assert (=> b!61807 t!4847))

(declare-fun b_and!3767 () Bool)

(assert (= b_and!3763 (and (=> t!4847 result!2437) b_and!3767)))

(assert (=> b!61798 m!53471))

(assert (=> b!61798 m!53471))

(assert (=> b!61798 m!53473))

(declare-fun m!54917 () Bool)

(assert (=> bm!4760 m!54917))

(declare-fun m!54919 () Bool)

(assert (=> bm!4764 m!54919))

(declare-fun m!54921 () Bool)

(assert (=> bm!4761 m!54921))

(assert (=> b!61795 m!53471))

(assert (=> b!61795 m!53471))

(declare-fun m!54923 () Bool)

(assert (=> b!61795 m!54923))

(declare-fun m!54925 () Bool)

(assert (=> bm!4759 m!54925))

(declare-fun m!54927 () Bool)

(assert (=> b!61802 m!54927))

(declare-fun m!54929 () Bool)

(assert (=> b!61790 m!54929))

(assert (=> b!61808 m!53471))

(assert (=> b!61808 m!53471))

(assert (=> b!61808 m!53473))

(assert (=> b!61807 m!53471))

(declare-fun m!54931 () Bool)

(assert (=> b!61807 m!54931))

(assert (=> b!61807 m!53471))

(declare-fun m!54933 () Bool)

(assert (=> b!61807 m!54933))

(assert (=> b!61807 m!53493))

(assert (=> b!61807 m!54931))

(assert (=> b!61807 m!53493))

(declare-fun m!54935 () Bool)

(assert (=> b!61807 m!54935))

(assert (=> d!12411 m!53453))

(assert (=> b!61801 m!53471))

(declare-fun m!54937 () Bool)

(assert (=> b!61801 m!54937))

(declare-fun m!54939 () Bool)

(assert (=> b!61801 m!54939))

(declare-fun m!54941 () Bool)

(assert (=> b!61801 m!54941))

(declare-fun m!54943 () Bool)

(assert (=> b!61801 m!54943))

(declare-fun m!54945 () Bool)

(assert (=> b!61801 m!54945))

(assert (=> b!61801 m!54925))

(declare-fun m!54947 () Bool)

(assert (=> b!61801 m!54947))

(declare-fun m!54949 () Bool)

(assert (=> b!61801 m!54949))

(assert (=> b!61801 m!54937))

(declare-fun m!54951 () Bool)

(assert (=> b!61801 m!54951))

(declare-fun m!54953 () Bool)

(assert (=> b!61801 m!54953))

(declare-fun m!54955 () Bool)

(assert (=> b!61801 m!54955))

(declare-fun m!54957 () Bool)

(assert (=> b!61801 m!54957))

(declare-fun m!54959 () Bool)

(assert (=> b!61801 m!54959))

(assert (=> b!61801 m!54957))

(declare-fun m!54961 () Bool)

(assert (=> b!61801 m!54961))

(assert (=> b!61801 m!54951))

(assert (=> b!61801 m!54947))

(declare-fun m!54963 () Bool)

(assert (=> b!61801 m!54963))

(declare-fun m!54965 () Bool)

(assert (=> b!61801 m!54965))

(declare-fun m!54967 () Bool)

(assert (=> b!61792 m!54967))

(assert (=> b!60944 d!12411))

(declare-fun d!12413 () Bool)

(assert (=> d!12413 (= (get!1093 (getValueByKey!124 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2407 (getValueByKey!124 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11993 d!12413))

(assert (=> d!11993 d!12279))

(declare-fun d!12415 () Bool)

(declare-fun e!40588 () Bool)

(assert (=> d!12415 e!40588))

(declare-fun res!33984 () Bool)

(assert (=> d!12415 (=> res!33984 e!40588)))

(declare-fun lt!25574 () Bool)

(assert (=> d!12415 (= res!33984 (not lt!25574))))

(declare-fun lt!25576 () Bool)

(assert (=> d!12415 (= lt!25574 lt!25576)))

(declare-fun lt!25575 () Unit!1622)

(declare-fun e!40587 () Unit!1622)

(assert (=> d!12415 (= lt!25575 e!40587)))

(declare-fun c!8190 () Bool)

(assert (=> d!12415 (= c!8190 lt!25576)))

(assert (=> d!12415 (= lt!25576 (containsKey!128 (toList!708 lt!25017) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12415 (= (contains!697 lt!25017 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25574)))

(declare-fun b!61810 () Bool)

(declare-fun lt!25577 () Unit!1622)

(assert (=> b!61810 (= e!40587 lt!25577)))

(assert (=> b!61810 (= lt!25577 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25017) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61810 (isDefined!78 (getValueByKey!124 (toList!708 lt!25017) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61811 () Bool)

(declare-fun Unit!1668 () Unit!1622)

(assert (=> b!61811 (= e!40587 Unit!1668)))

(declare-fun b!61812 () Bool)

(assert (=> b!61812 (= e!40588 (isDefined!78 (getValueByKey!124 (toList!708 lt!25017) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12415 c!8190) b!61810))

(assert (= (and d!12415 (not c!8190)) b!61811))

(assert (= (and d!12415 (not res!33984)) b!61812))

(declare-fun m!54969 () Bool)

(assert (=> d!12415 m!54969))

(declare-fun m!54971 () Bool)

(assert (=> b!61810 m!54971))

(declare-fun m!54973 () Bool)

(assert (=> b!61810 m!54973))

(assert (=> b!61810 m!54973))

(declare-fun m!54975 () Bool)

(assert (=> b!61810 m!54975))

(assert (=> b!61812 m!54973))

(assert (=> b!61812 m!54973))

(assert (=> b!61812 m!54975))

(assert (=> bm!4672 d!12415))

(declare-fun d!12417 () Bool)

(assert (=> d!12417 (= (get!1093 (getValueByKey!124 (toList!708 lt!24965) lt!24958)) (v!2407 (getValueByKey!124 (toList!708 lt!24965) lt!24958)))))

(assert (=> d!12067 d!12417))

(declare-fun b!61815 () Bool)

(declare-fun e!40590 () Option!130)

(assert (=> b!61815 (= e!40590 (getValueByKey!124 (t!4837 (toList!708 lt!24965)) lt!24958))))

(declare-fun b!61816 () Bool)

(assert (=> b!61816 (= e!40590 None!128)))

(declare-fun b!61814 () Bool)

(declare-fun e!40589 () Option!130)

(assert (=> b!61814 (= e!40589 e!40590)))

(declare-fun c!8192 () Bool)

(assert (=> b!61814 (= c!8192 (and ((_ is Cons!1455) (toList!708 lt!24965)) (not (= (_1!1040 (h!2037 (toList!708 lt!24965))) lt!24958))))))

(declare-fun b!61813 () Bool)

(assert (=> b!61813 (= e!40589 (Some!129 (_2!1040 (h!2037 (toList!708 lt!24965)))))))

(declare-fun d!12419 () Bool)

(declare-fun c!8191 () Bool)

(assert (=> d!12419 (= c!8191 (and ((_ is Cons!1455) (toList!708 lt!24965)) (= (_1!1040 (h!2037 (toList!708 lt!24965))) lt!24958)))))

(assert (=> d!12419 (= (getValueByKey!124 (toList!708 lt!24965) lt!24958) e!40589)))

(assert (= (and d!12419 c!8191) b!61813))

(assert (= (and d!12419 (not c!8191)) b!61814))

(assert (= (and b!61814 c!8192) b!61815))

(assert (= (and b!61814 (not c!8192)) b!61816))

(declare-fun m!54977 () Bool)

(assert (=> b!61815 m!54977))

(assert (=> d!12067 d!12419))

(assert (=> b!61102 d!12161))

(declare-fun d!12421 () Bool)

(declare-fun e!40592 () Bool)

(assert (=> d!12421 e!40592))

(declare-fun res!33985 () Bool)

(assert (=> d!12421 (=> res!33985 e!40592)))

(declare-fun lt!25578 () Bool)

(assert (=> d!12421 (= res!33985 (not lt!25578))))

(declare-fun lt!25580 () Bool)

(assert (=> d!12421 (= lt!25578 lt!25580)))

(declare-fun lt!25579 () Unit!1622)

(declare-fun e!40591 () Unit!1622)

(assert (=> d!12421 (= lt!25579 e!40591)))

(declare-fun c!8193 () Bool)

(assert (=> d!12421 (= c!8193 lt!25580)))

(assert (=> d!12421 (= lt!25580 (containsKey!128 (toList!708 lt!25275) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12421 (= (contains!697 lt!25275 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!25578)))

(declare-fun b!61817 () Bool)

(declare-fun lt!25581 () Unit!1622)

(assert (=> b!61817 (= e!40591 lt!25581)))

(assert (=> b!61817 (= lt!25581 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25275) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!61817 (isDefined!78 (getValueByKey!124 (toList!708 lt!25275) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61818 () Bool)

(declare-fun Unit!1669 () Unit!1622)

(assert (=> b!61818 (= e!40591 Unit!1669)))

(declare-fun b!61819 () Bool)

(assert (=> b!61819 (= e!40592 (isDefined!78 (getValueByKey!124 (toList!708 lt!25275) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12421 c!8193) b!61817))

(assert (= (and d!12421 (not c!8193)) b!61818))

(assert (= (and d!12421 (not res!33985)) b!61819))

(declare-fun m!54979 () Bool)

(assert (=> d!12421 m!54979))

(declare-fun m!54981 () Bool)

(assert (=> b!61817 m!54981))

(assert (=> b!61817 m!53995))

(assert (=> b!61817 m!53995))

(declare-fun m!54983 () Bool)

(assert (=> b!61817 m!54983))

(assert (=> b!61819 m!53995))

(assert (=> b!61819 m!53995))

(assert (=> b!61819 m!54983))

(assert (=> d!12083 d!12421))

(declare-fun e!40594 () Option!130)

(declare-fun b!61822 () Bool)

(assert (=> b!61822 (= e!40594 (getValueByKey!124 (t!4837 lt!25277) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61823 () Bool)

(assert (=> b!61823 (= e!40594 None!128)))

(declare-fun b!61821 () Bool)

(declare-fun e!40593 () Option!130)

(assert (=> b!61821 (= e!40593 e!40594)))

(declare-fun c!8195 () Bool)

(assert (=> b!61821 (= c!8195 (and ((_ is Cons!1455) lt!25277) (not (= (_1!1040 (h!2037 lt!25277)) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!61820 () Bool)

(assert (=> b!61820 (= e!40593 (Some!129 (_2!1040 (h!2037 lt!25277))))))

(declare-fun d!12423 () Bool)

(declare-fun c!8194 () Bool)

(assert (=> d!12423 (= c!8194 (and ((_ is Cons!1455) lt!25277) (= (_1!1040 (h!2037 lt!25277)) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12423 (= (getValueByKey!124 lt!25277 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!40593)))

(assert (= (and d!12423 c!8194) b!61820))

(assert (= (and d!12423 (not c!8194)) b!61821))

(assert (= (and b!61821 c!8195) b!61822))

(assert (= (and b!61821 (not c!8195)) b!61823))

(declare-fun m!54985 () Bool)

(assert (=> b!61822 m!54985))

(assert (=> d!12083 d!12423))

(declare-fun d!12425 () Bool)

(assert (=> d!12425 (= (getValueByKey!124 lt!25277 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!25582 () Unit!1622)

(assert (=> d!12425 (= lt!25582 (choose!333 lt!25277 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!40595 () Bool)

(assert (=> d!12425 e!40595))

(declare-fun res!33986 () Bool)

(assert (=> d!12425 (=> (not res!33986) (not e!40595))))

(assert (=> d!12425 (= res!33986 (isStrictlySorted!280 lt!25277))))

(assert (=> d!12425 (= (lemmaContainsTupThenGetReturnValue!43 lt!25277 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!25582)))

(declare-fun b!61824 () Bool)

(declare-fun res!33987 () Bool)

(assert (=> b!61824 (=> (not res!33987) (not e!40595))))

(assert (=> b!61824 (= res!33987 (containsKey!128 lt!25277 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61825 () Bool)

(assert (=> b!61825 (= e!40595 (contains!699 lt!25277 (tuple2!2061 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12425 res!33986) b!61824))

(assert (= (and b!61824 res!33987) b!61825))

(assert (=> d!12425 m!53989))

(declare-fun m!54987 () Bool)

(assert (=> d!12425 m!54987))

(declare-fun m!54989 () Bool)

(assert (=> d!12425 m!54989))

(declare-fun m!54991 () Bool)

(assert (=> b!61824 m!54991))

(declare-fun m!54993 () Bool)

(assert (=> b!61825 m!54993))

(assert (=> d!12083 d!12425))

(declare-fun bm!4765 () Bool)

(declare-fun call!4768 () List!1459)

(declare-fun call!4769 () List!1459)

(assert (=> bm!4765 (= call!4768 call!4769)))

(declare-fun b!61826 () Bool)

(declare-fun e!40596 () List!1459)

(declare-fun call!4770 () List!1459)

(assert (=> b!61826 (= e!40596 call!4770)))

(declare-fun d!12427 () Bool)

(declare-fun e!40600 () Bool)

(assert (=> d!12427 e!40600))

(declare-fun res!33989 () Bool)

(assert (=> d!12427 (=> (not res!33989) (not e!40600))))

(declare-fun lt!25583 () List!1459)

(assert (=> d!12427 (= res!33989 (isStrictlySorted!280 lt!25583))))

(declare-fun e!40597 () List!1459)

(assert (=> d!12427 (= lt!25583 e!40597)))

(declare-fun c!8197 () Bool)

(assert (=> d!12427 (= c!8197 (and ((_ is Cons!1455) (toList!708 e!39991)) (bvslt (_1!1040 (h!2037 (toList!708 e!39991))) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12427 (isStrictlySorted!280 (toList!708 e!39991))))

(assert (=> d!12427 (= (insertStrictlySorted!45 (toList!708 e!39991) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!25583)))

(declare-fun b!61827 () Bool)

(declare-fun e!40599 () List!1459)

(assert (=> b!61827 (= e!40597 e!40599)))

(declare-fun c!8198 () Bool)

(assert (=> b!61827 (= c!8198 (and ((_ is Cons!1455) (toList!708 e!39991)) (= (_1!1040 (h!2037 (toList!708 e!39991))) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!61828 () Bool)

(declare-fun c!8199 () Bool)

(assert (=> b!61828 (= c!8199 (and ((_ is Cons!1455) (toList!708 e!39991)) (bvsgt (_1!1040 (h!2037 (toList!708 e!39991))) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!61828 (= e!40599 e!40596)))

(declare-fun b!61829 () Bool)

(assert (=> b!61829 (= e!40600 (contains!699 lt!25583 (tuple2!2061 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!40598 () List!1459)

(declare-fun b!61830 () Bool)

(assert (=> b!61830 (= e!40598 (ite c!8198 (t!4837 (toList!708 e!39991)) (ite c!8199 (Cons!1455 (h!2037 (toList!708 e!39991)) (t!4837 (toList!708 e!39991))) Nil!1456)))))

(declare-fun bm!4766 () Bool)

(assert (=> bm!4766 (= call!4769 ($colon$colon!60 e!40598 (ite c!8197 (h!2037 (toList!708 e!39991)) (tuple2!2061 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!8196 () Bool)

(assert (=> bm!4766 (= c!8196 c!8197)))

(declare-fun b!61831 () Bool)

(assert (=> b!61831 (= e!40599 call!4768)))

(declare-fun b!61832 () Bool)

(assert (=> b!61832 (= e!40597 call!4769)))

(declare-fun bm!4767 () Bool)

(assert (=> bm!4767 (= call!4770 call!4768)))

(declare-fun b!61833 () Bool)

(assert (=> b!61833 (= e!40596 call!4770)))

(declare-fun b!61834 () Bool)

(declare-fun res!33988 () Bool)

(assert (=> b!61834 (=> (not res!33988) (not e!40600))))

(assert (=> b!61834 (= res!33988 (containsKey!128 lt!25583 (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61835 () Bool)

(assert (=> b!61835 (= e!40598 (insertStrictlySorted!45 (t!4837 (toList!708 e!39991)) (_1!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1040 (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12427 c!8197) b!61832))

(assert (= (and d!12427 (not c!8197)) b!61827))

(assert (= (and b!61827 c!8198) b!61831))

(assert (= (and b!61827 (not c!8198)) b!61828))

(assert (= (and b!61828 c!8199) b!61833))

(assert (= (and b!61828 (not c!8199)) b!61826))

(assert (= (or b!61833 b!61826) bm!4767))

(assert (= (or b!61831 bm!4767) bm!4765))

(assert (= (or b!61832 bm!4765) bm!4766))

(assert (= (and bm!4766 c!8196) b!61835))

(assert (= (and bm!4766 (not c!8196)) b!61830))

(assert (= (and d!12427 res!33989) b!61834))

(assert (= (and b!61834 res!33988) b!61829))

(declare-fun m!54995 () Bool)

(assert (=> b!61835 m!54995))

(declare-fun m!54997 () Bool)

(assert (=> bm!4766 m!54997))

(declare-fun m!54999 () Bool)

(assert (=> d!12427 m!54999))

(declare-fun m!55001 () Bool)

(assert (=> d!12427 m!55001))

(declare-fun m!55003 () Bool)

(assert (=> b!61829 m!55003))

(declare-fun m!55005 () Bool)

(assert (=> b!61834 m!55005))

(assert (=> d!12083 d!12427))

(declare-fun d!12429 () Bool)

(declare-fun res!33990 () Bool)

(declare-fun e!40601 () Bool)

(assert (=> d!12429 (=> res!33990 e!40601)))

(assert (=> d!12429 (= res!33990 (and ((_ is Cons!1455) (toList!708 lt!24948)) (= (_1!1040 (h!2037 (toList!708 lt!24948))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12429 (= (containsKey!128 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!40601)))

(declare-fun b!61836 () Bool)

(declare-fun e!40602 () Bool)

(assert (=> b!61836 (= e!40601 e!40602)))

(declare-fun res!33991 () Bool)

(assert (=> b!61836 (=> (not res!33991) (not e!40602))))

(assert (=> b!61836 (= res!33991 (and (or (not ((_ is Cons!1455) (toList!708 lt!24948))) (bvsle (_1!1040 (h!2037 (toList!708 lt!24948))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1455) (toList!708 lt!24948)) (bvslt (_1!1040 (h!2037 (toList!708 lt!24948))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!61837 () Bool)

(assert (=> b!61837 (= e!40602 (containsKey!128 (t!4837 (toList!708 lt!24948)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!12429 (not res!33990)) b!61836))

(assert (= (and b!61836 res!33991) b!61837))

(assert (=> b!61837 m!53359))

(declare-fun m!55007 () Bool)

(assert (=> b!61837 m!55007))

(assert (=> d!12035 d!12429))

(declare-fun b!61838 () Bool)

(declare-fun e!40606 () Bool)

(declare-fun call!4771 () Bool)

(assert (=> b!61838 (= e!40606 call!4771)))

(declare-fun bm!4768 () Bool)

(declare-fun c!8200 () Bool)

(assert (=> bm!4768 (= call!4771 (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8200 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b00000000000000000000000000000000) Nil!1457) Nil!1457)))))

(declare-fun b!61839 () Bool)

(declare-fun e!40603 () Bool)

(assert (=> b!61839 (= e!40603 e!40606)))

(assert (=> b!61839 (= c!8200 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!61841 () Bool)

(declare-fun e!40605 () Bool)

(assert (=> b!61841 (= e!40605 (contains!698 Nil!1457 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!61842 () Bool)

(declare-fun e!40604 () Bool)

(assert (=> b!61842 (= e!40604 e!40603)))

(declare-fun res!33993 () Bool)

(assert (=> b!61842 (=> (not res!33993) (not e!40603))))

(assert (=> b!61842 (= res!33993 (not e!40605))))

(declare-fun res!33992 () Bool)

(assert (=> b!61842 (=> (not res!33992) (not e!40605))))

(assert (=> b!61842 (= res!33992 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!61840 () Bool)

(assert (=> b!61840 (= e!40606 call!4771)))

(declare-fun d!12431 () Bool)

(declare-fun res!33994 () Bool)

(assert (=> d!12431 (=> res!33994 e!40604)))

(assert (=> d!12431 (= res!33994 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> d!12431 (= (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) #b00000000000000000000000000000000 Nil!1457) e!40604)))

(assert (= (and d!12431 (not res!33994)) b!61842))

(assert (= (and b!61842 res!33992) b!61841))

(assert (= (and b!61842 res!33993) b!61839))

(assert (= (and b!61839 c!8200) b!61838))

(assert (= (and b!61839 (not c!8200)) b!61840))

(assert (= (or b!61838 b!61840) bm!4768))

(assert (=> bm!4768 m!54185))

(declare-fun m!55009 () Bool)

(assert (=> bm!4768 m!55009))

(assert (=> b!61839 m!54185))

(assert (=> b!61839 m!54185))

(assert (=> b!61839 m!54187))

(assert (=> b!61841 m!54185))

(assert (=> b!61841 m!54185))

(declare-fun m!55011 () Bool)

(assert (=> b!61841 m!55011))

(assert (=> b!61842 m!54185))

(assert (=> b!61842 m!54185))

(assert (=> b!61842 m!54187))

(assert (=> b!61108 d!12431))

(declare-fun d!12433 () Bool)

(declare-fun e!40608 () Bool)

(assert (=> d!12433 e!40608))

(declare-fun res!33995 () Bool)

(assert (=> d!12433 (=> res!33995 e!40608)))

(declare-fun lt!25584 () Bool)

(assert (=> d!12433 (= res!33995 (not lt!25584))))

(declare-fun lt!25586 () Bool)

(assert (=> d!12433 (= lt!25584 lt!25586)))

(declare-fun lt!25585 () Unit!1622)

(declare-fun e!40607 () Unit!1622)

(assert (=> d!12433 (= lt!25585 e!40607)))

(declare-fun c!8201 () Bool)

(assert (=> d!12433 (= c!8201 lt!25586)))

(assert (=> d!12433 (= lt!25586 (containsKey!128 (toList!708 lt!25253) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12433 (= (contains!697 lt!25253 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25584)))

(declare-fun b!61843 () Bool)

(declare-fun lt!25587 () Unit!1622)

(assert (=> b!61843 (= e!40607 lt!25587)))

(assert (=> b!61843 (= lt!25587 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25253) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> b!61843 (isDefined!78 (getValueByKey!124 (toList!708 lt!25253) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61844 () Bool)

(declare-fun Unit!1670 () Unit!1622)

(assert (=> b!61844 (= e!40607 Unit!1670)))

(declare-fun b!61845 () Bool)

(assert (=> b!61845 (= e!40608 (isDefined!78 (getValueByKey!124 (toList!708 lt!25253) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (= (and d!12433 c!8201) b!61843))

(assert (= (and d!12433 (not c!8201)) b!61844))

(assert (= (and d!12433 (not res!33995)) b!61845))

(declare-fun m!55013 () Bool)

(assert (=> d!12433 m!55013))

(declare-fun m!55015 () Bool)

(assert (=> b!61843 m!55015))

(assert (=> b!61843 m!53923))

(assert (=> b!61843 m!53923))

(declare-fun m!55017 () Bool)

(assert (=> b!61843 m!55017))

(assert (=> b!61845 m!53923))

(assert (=> b!61845 m!53923))

(assert (=> b!61845 m!55017))

(assert (=> d!12059 d!12433))

(declare-fun b!61848 () Bool)

(declare-fun e!40610 () Option!130)

(assert (=> b!61848 (= e!40610 (getValueByKey!124 (t!4837 lt!25255) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61849 () Bool)

(assert (=> b!61849 (= e!40610 None!128)))

(declare-fun b!61847 () Bool)

(declare-fun e!40609 () Option!130)

(assert (=> b!61847 (= e!40609 e!40610)))

(declare-fun c!8203 () Bool)

(assert (=> b!61847 (= c!8203 (and ((_ is Cons!1455) lt!25255) (not (= (_1!1040 (h!2037 lt!25255)) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61846 () Bool)

(assert (=> b!61846 (= e!40609 (Some!129 (_2!1040 (h!2037 lt!25255))))))

(declare-fun d!12435 () Bool)

(declare-fun c!8202 () Bool)

(assert (=> d!12435 (= c!8202 (and ((_ is Cons!1455) lt!25255) (= (_1!1040 (h!2037 lt!25255)) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12435 (= (getValueByKey!124 lt!25255 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) e!40609)))

(assert (= (and d!12435 c!8202) b!61846))

(assert (= (and d!12435 (not c!8202)) b!61847))

(assert (= (and b!61847 c!8203) b!61848))

(assert (= (and b!61847 (not c!8203)) b!61849))

(declare-fun m!55019 () Bool)

(assert (=> b!61848 m!55019))

(assert (=> d!12059 d!12435))

(declare-fun d!12437 () Bool)

(assert (=> d!12437 (= (getValueByKey!124 lt!25255 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun lt!25588 () Unit!1622)

(assert (=> d!12437 (= lt!25588 (choose!333 lt!25255 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun e!40611 () Bool)

(assert (=> d!12437 e!40611))

(declare-fun res!33996 () Bool)

(assert (=> d!12437 (=> (not res!33996) (not e!40611))))

(assert (=> d!12437 (= res!33996 (isStrictlySorted!280 lt!25255))))

(assert (=> d!12437 (= (lemmaContainsTupThenGetReturnValue!43 lt!25255 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25588)))

(declare-fun b!61850 () Bool)

(declare-fun res!33997 () Bool)

(assert (=> b!61850 (=> (not res!33997) (not e!40611))))

(assert (=> b!61850 (= res!33997 (containsKey!128 lt!25255 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61851 () Bool)

(assert (=> b!61851 (= e!40611 (contains!699 lt!25255 (tuple2!2061 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (= (and d!12437 res!33996) b!61850))

(assert (= (and b!61850 res!33997) b!61851))

(assert (=> d!12437 m!53917))

(declare-fun m!55021 () Bool)

(assert (=> d!12437 m!55021))

(declare-fun m!55023 () Bool)

(assert (=> d!12437 m!55023))

(declare-fun m!55025 () Bool)

(assert (=> b!61850 m!55025))

(declare-fun m!55027 () Bool)

(assert (=> b!61851 m!55027))

(assert (=> d!12059 d!12437))

(declare-fun bm!4769 () Bool)

(declare-fun call!4772 () List!1459)

(declare-fun call!4773 () List!1459)

(assert (=> bm!4769 (= call!4772 call!4773)))

(declare-fun b!61852 () Bool)

(declare-fun e!40612 () List!1459)

(declare-fun call!4774 () List!1459)

(assert (=> b!61852 (= e!40612 call!4774)))

(declare-fun d!12439 () Bool)

(declare-fun e!40616 () Bool)

(assert (=> d!12439 e!40616))

(declare-fun res!33999 () Bool)

(assert (=> d!12439 (=> (not res!33999) (not e!40616))))

(declare-fun lt!25589 () List!1459)

(assert (=> d!12439 (= res!33999 (isStrictlySorted!280 lt!25589))))

(declare-fun e!40613 () List!1459)

(assert (=> d!12439 (= lt!25589 e!40613)))

(declare-fun c!8205 () Bool)

(assert (=> d!12439 (= c!8205 (and ((_ is Cons!1455) (toList!708 lt!24944)) (bvslt (_1!1040 (h!2037 (toList!708 lt!24944))) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12439 (isStrictlySorted!280 (toList!708 lt!24944))))

(assert (=> d!12439 (= (insertStrictlySorted!45 (toList!708 lt!24944) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25589)))

(declare-fun b!61853 () Bool)

(declare-fun e!40615 () List!1459)

(assert (=> b!61853 (= e!40613 e!40615)))

(declare-fun c!8206 () Bool)

(assert (=> b!61853 (= c!8206 (and ((_ is Cons!1455) (toList!708 lt!24944)) (= (_1!1040 (h!2037 (toList!708 lt!24944))) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun c!8207 () Bool)

(declare-fun b!61854 () Bool)

(assert (=> b!61854 (= c!8207 (and ((_ is Cons!1455) (toList!708 lt!24944)) (bvsgt (_1!1040 (h!2037 (toList!708 lt!24944))) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> b!61854 (= e!40615 e!40612)))

(declare-fun b!61855 () Bool)

(assert (=> b!61855 (= e!40616 (contains!699 lt!25589 (tuple2!2061 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun e!40614 () List!1459)

(declare-fun b!61856 () Bool)

(assert (=> b!61856 (= e!40614 (ite c!8206 (t!4837 (toList!708 lt!24944)) (ite c!8207 (Cons!1455 (h!2037 (toList!708 lt!24944)) (t!4837 (toList!708 lt!24944))) Nil!1456)))))

(declare-fun bm!4770 () Bool)

(assert (=> bm!4770 (= call!4773 ($colon$colon!60 e!40614 (ite c!8205 (h!2037 (toList!708 lt!24944)) (tuple2!2061 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun c!8204 () Bool)

(assert (=> bm!4770 (= c!8204 c!8205)))

(declare-fun b!61857 () Bool)

(assert (=> b!61857 (= e!40615 call!4772)))

(declare-fun b!61858 () Bool)

(assert (=> b!61858 (= e!40613 call!4773)))

(declare-fun bm!4771 () Bool)

(assert (=> bm!4771 (= call!4774 call!4772)))

(declare-fun b!61859 () Bool)

(assert (=> b!61859 (= e!40612 call!4774)))

(declare-fun b!61860 () Bool)

(declare-fun res!33998 () Bool)

(assert (=> b!61860 (=> (not res!33998) (not e!40616))))

(assert (=> b!61860 (= res!33998 (containsKey!128 lt!25589 (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61861 () Bool)

(assert (=> b!61861 (= e!40614 (insertStrictlySorted!45 (t!4837 (toList!708 lt!24944)) (_1!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (= (and d!12439 c!8205) b!61858))

(assert (= (and d!12439 (not c!8205)) b!61853))

(assert (= (and b!61853 c!8206) b!61857))

(assert (= (and b!61853 (not c!8206)) b!61854))

(assert (= (and b!61854 c!8207) b!61859))

(assert (= (and b!61854 (not c!8207)) b!61852))

(assert (= (or b!61859 b!61852) bm!4771))

(assert (= (or b!61857 bm!4771) bm!4769))

(assert (= (or b!61858 bm!4769) bm!4770))

(assert (= (and bm!4770 c!8204) b!61861))

(assert (= (and bm!4770 (not c!8204)) b!61856))

(assert (= (and d!12439 res!33999) b!61860))

(assert (= (and b!61860 res!33998) b!61855))

(declare-fun m!55029 () Bool)

(assert (=> b!61861 m!55029))

(declare-fun m!55031 () Bool)

(assert (=> bm!4770 m!55031))

(declare-fun m!55033 () Bool)

(assert (=> d!12439 m!55033))

(declare-fun m!55035 () Bool)

(assert (=> d!12439 m!55035))

(declare-fun m!55037 () Bool)

(assert (=> b!61855 m!55037))

(declare-fun m!55039 () Bool)

(assert (=> b!61860 m!55039))

(assert (=> d!12059 d!12439))

(assert (=> d!12009 d!11985))

(declare-fun b!61878 () Bool)

(declare-fun e!40628 () Bool)

(declare-fun e!40626 () Bool)

(assert (=> b!61878 (= e!40628 e!40626)))

(declare-fun res!34008 () Bool)

(declare-fun call!4779 () Bool)

(assert (=> b!61878 (= res!34008 call!4779)))

(assert (=> b!61878 (=> (not res!34008) (not e!40626))))

(declare-fun b!61879 () Bool)

(declare-fun res!34011 () Bool)

(declare-fun lt!25592 () SeekEntryResult!238)

(assert (=> b!61879 (= res!34011 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3076 lt!25592)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61879 (=> (not res!34011) (not e!40626))))

(declare-fun b!61880 () Bool)

(declare-fun e!40627 () Bool)

(assert (=> b!61880 (= e!40627 ((_ is Undefined!238) lt!25592))))

(declare-fun b!61881 () Bool)

(declare-fun e!40625 () Bool)

(declare-fun call!4780 () Bool)

(assert (=> b!61881 (= e!40625 (not call!4780))))

(declare-fun b!61882 () Bool)

(declare-fun res!34009 () Bool)

(assert (=> b!61882 (=> (not res!34009) (not e!40625))))

(assert (=> b!61882 (= res!34009 call!4779)))

(assert (=> b!61882 (= e!40627 e!40625)))

(declare-fun c!8212 () Bool)

(declare-fun bm!4776 () Bool)

(assert (=> bm!4776 (= call!4779 (inRange!0 (ite c!8212 (index!3076 lt!25592) (index!3079 lt!25592)) (mask!5963 newMap!16)))))

(declare-fun b!61883 () Bool)

(declare-fun res!34010 () Bool)

(assert (=> b!61883 (=> (not res!34010) (not e!40625))))

(assert (=> b!61883 (= res!34010 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3079 lt!25592)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!12441 () Bool)

(assert (=> d!12441 e!40628))

(assert (=> d!12441 (= c!8212 ((_ is MissingZero!238) lt!25592))))

(assert (=> d!12441 (= lt!25592 (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (=> d!12441 true))

(declare-fun _$34!771 () Unit!1622)

(assert (=> d!12441 (= (choose!328 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)) _$34!771)))

(declare-fun bm!4777 () Bool)

(assert (=> bm!4777 (= call!4780 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!61884 () Bool)

(assert (=> b!61884 (= e!40626 (not call!4780))))

(declare-fun b!61885 () Bool)

(assert (=> b!61885 (= e!40628 e!40627)))

(declare-fun c!8213 () Bool)

(assert (=> b!61885 (= c!8213 ((_ is MissingVacant!238) lt!25592))))

(assert (= (and d!12441 c!8212) b!61878))

(assert (= (and d!12441 (not c!8212)) b!61885))

(assert (= (and b!61878 res!34008) b!61879))

(assert (= (and b!61879 res!34011) b!61884))

(assert (= (and b!61885 c!8213) b!61882))

(assert (= (and b!61885 (not c!8213)) b!61880))

(assert (= (and b!61882 res!34009) b!61883))

(assert (= (and b!61883 res!34010) b!61881))

(assert (= (or b!61878 b!61882) bm!4776))

(assert (= (or b!61884 b!61881) bm!4777))

(assert (=> bm!4777 m!53207))

(assert (=> bm!4777 m!53333))

(declare-fun m!55041 () Bool)

(assert (=> b!61879 m!55041))

(assert (=> d!12441 m!53207))

(assert (=> d!12441 m!53313))

(declare-fun m!55043 () Bool)

(assert (=> b!61883 m!55043))

(declare-fun m!55045 () Bool)

(assert (=> bm!4776 m!55045))

(assert (=> d!12009 d!12441))

(assert (=> d!12009 d!12105))

(declare-fun d!12443 () Bool)

(declare-fun e!40630 () Bool)

(assert (=> d!12443 e!40630))

(declare-fun res!34012 () Bool)

(assert (=> d!12443 (=> res!34012 e!40630)))

(declare-fun lt!25593 () Bool)

(assert (=> d!12443 (= res!34012 (not lt!25593))))

(declare-fun lt!25595 () Bool)

(assert (=> d!12443 (= lt!25593 lt!25595)))

(declare-fun lt!25594 () Unit!1622)

(declare-fun e!40629 () Unit!1622)

(assert (=> d!12443 (= lt!25594 e!40629)))

(declare-fun c!8214 () Bool)

(assert (=> d!12443 (= c!8214 lt!25595)))

(assert (=> d!12443 (= lt!25595 (containsKey!128 (toList!708 lt!24992) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12443 (= (contains!697 lt!24992 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25593)))

(declare-fun b!61886 () Bool)

(declare-fun lt!25596 () Unit!1622)

(assert (=> b!61886 (= e!40629 lt!25596)))

(assert (=> b!61886 (= lt!25596 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24992) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61886 (isDefined!78 (getValueByKey!124 (toList!708 lt!24992) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61887 () Bool)

(declare-fun Unit!1671 () Unit!1622)

(assert (=> b!61887 (= e!40629 Unit!1671)))

(declare-fun b!61888 () Bool)

(assert (=> b!61888 (= e!40630 (isDefined!78 (getValueByKey!124 (toList!708 lt!24992) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12443 c!8214) b!61886))

(assert (= (and d!12443 (not c!8214)) b!61887))

(assert (= (and d!12443 (not res!34012)) b!61888))

(declare-fun m!55047 () Bool)

(assert (=> d!12443 m!55047))

(declare-fun m!55049 () Bool)

(assert (=> b!61886 m!55049))

(declare-fun m!55051 () Bool)

(assert (=> b!61886 m!55051))

(assert (=> b!61886 m!55051))

(declare-fun m!55053 () Bool)

(assert (=> b!61886 m!55053))

(assert (=> b!61888 m!55051))

(assert (=> b!61888 m!55051))

(assert (=> b!61888 m!55053))

(assert (=> bm!4662 d!12443))

(declare-fun d!12445 () Bool)

(assert (=> d!12445 (= (get!1093 (getValueByKey!124 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2407 (getValueByKey!124 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11989 d!12445))

(assert (=> d!11989 d!12223))

(assert (=> bm!4661 d!12197))

(declare-fun d!12447 () Bool)

(declare-fun lt!25597 () Bool)

(assert (=> d!12447 (= lt!25597 (select (content!65 (toList!708 lt!25171)) (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun e!40632 () Bool)

(assert (=> d!12447 (= lt!25597 e!40632)))

(declare-fun res!34014 () Bool)

(assert (=> d!12447 (=> (not res!34014) (not e!40632))))

(assert (=> d!12447 (= res!34014 ((_ is Cons!1455) (toList!708 lt!25171)))))

(assert (=> d!12447 (= (contains!699 (toList!708 lt!25171) (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25597)))

(declare-fun b!61889 () Bool)

(declare-fun e!40631 () Bool)

(assert (=> b!61889 (= e!40632 e!40631)))

(declare-fun res!34013 () Bool)

(assert (=> b!61889 (=> res!34013 e!40631)))

(assert (=> b!61889 (= res!34013 (= (h!2037 (toList!708 lt!25171)) (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61890 () Bool)

(assert (=> b!61890 (= e!40631 (contains!699 (t!4837 (toList!708 lt!25171)) (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (= (and d!12447 res!34014) b!61889))

(assert (= (and b!61889 (not res!34013)) b!61890))

(declare-fun m!55055 () Bool)

(assert (=> d!12447 m!55055))

(declare-fun m!55057 () Bool)

(assert (=> d!12447 m!55057))

(declare-fun m!55059 () Bool)

(assert (=> b!61890 m!55059))

(assert (=> b!61134 d!12447))

(declare-fun b!61891 () Bool)

(declare-fun e!40633 () (_ BitVec 32))

(declare-fun e!40634 () (_ BitVec 32))

(assert (=> b!61891 (= e!40633 e!40634)))

(declare-fun c!8216 () Bool)

(assert (=> b!61891 (= c!8216 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000)))))

(declare-fun d!12449 () Bool)

(declare-fun lt!25598 () (_ BitVec 32))

(assert (=> d!12449 (and (bvsge lt!25598 #b00000000000000000000000000000000) (bvsle lt!25598 (bvsub (size!2023 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000)))))

(assert (=> d!12449 (= lt!25598 e!40633)))

(declare-fun c!8215 () Bool)

(assert (=> d!12449 (= c!8215 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))))))

(assert (=> d!12449 (and (bvsle #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2023 (_keys!3695 (_2!1041 lt!24880))) (size!2023 (_keys!3695 (_2!1041 lt!24880)))))))

(assert (=> d!12449 (= (arrayCountValidKeys!0 (_keys!3695 (_2!1041 lt!24880)) #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))) lt!25598)))

(declare-fun b!61892 () Bool)

(assert (=> b!61892 (= e!40633 #b00000000000000000000000000000000)))

(declare-fun b!61893 () Bool)

(declare-fun call!4781 () (_ BitVec 32))

(assert (=> b!61893 (= e!40634 call!4781)))

(declare-fun bm!4778 () Bool)

(assert (=> bm!4778 (= call!4781 (arrayCountValidKeys!0 (_keys!3695 (_2!1041 lt!24880)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (_2!1041 lt!24880)))))))

(declare-fun b!61894 () Bool)

(assert (=> b!61894 (= e!40634 (bvadd #b00000000000000000000000000000001 call!4781))))

(assert (= (and d!12449 c!8215) b!61892))

(assert (= (and d!12449 (not c!8215)) b!61891))

(assert (= (and b!61891 c!8216) b!61894))

(assert (= (and b!61891 (not c!8216)) b!61893))

(assert (= (or b!61894 b!61893) bm!4778))

(assert (=> b!61891 m!54155))

(assert (=> b!61891 m!54155))

(assert (=> b!61891 m!54159))

(declare-fun m!55061 () Bool)

(assert (=> bm!4778 m!55061))

(assert (=> b!61005 d!12449))

(declare-fun d!12451 () Bool)

(assert (=> d!12451 (= (get!1093 (getValueByKey!124 (toList!708 lt!24944) lt!24956)) (v!2407 (getValueByKey!124 (toList!708 lt!24944) lt!24956)))))

(assert (=> d!12047 d!12451))

(declare-fun b!61897 () Bool)

(declare-fun e!40636 () Option!130)

(assert (=> b!61897 (= e!40636 (getValueByKey!124 (t!4837 (toList!708 lt!24944)) lt!24956))))

(declare-fun b!61898 () Bool)

(assert (=> b!61898 (= e!40636 None!128)))

(declare-fun b!61896 () Bool)

(declare-fun e!40635 () Option!130)

(assert (=> b!61896 (= e!40635 e!40636)))

(declare-fun c!8218 () Bool)

(assert (=> b!61896 (= c!8218 (and ((_ is Cons!1455) (toList!708 lt!24944)) (not (= (_1!1040 (h!2037 (toList!708 lt!24944))) lt!24956))))))

(declare-fun b!61895 () Bool)

(assert (=> b!61895 (= e!40635 (Some!129 (_2!1040 (h!2037 (toList!708 lt!24944)))))))

(declare-fun d!12453 () Bool)

(declare-fun c!8217 () Bool)

(assert (=> d!12453 (= c!8217 (and ((_ is Cons!1455) (toList!708 lt!24944)) (= (_1!1040 (h!2037 (toList!708 lt!24944))) lt!24956)))))

(assert (=> d!12453 (= (getValueByKey!124 (toList!708 lt!24944) lt!24956) e!40635)))

(assert (= (and d!12453 c!8217) b!61895))

(assert (= (and d!12453 (not c!8217)) b!61896))

(assert (= (and b!61896 c!8218) b!61897))

(assert (= (and b!61896 (not c!8218)) b!61898))

(declare-fun m!55063 () Bool)

(assert (=> b!61897 m!55063))

(assert (=> d!12047 d!12453))

(declare-fun d!12455 () Bool)

(assert (=> d!12455 (isDefined!78 (getValueByKey!124 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun lt!25599 () Unit!1622)

(assert (=> d!12455 (= lt!25599 (choose!329 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(declare-fun e!40637 () Bool)

(assert (=> d!12455 e!40637))

(declare-fun res!34015 () Bool)

(assert (=> d!12455 (=> (not res!34015) (not e!40637))))

(assert (=> d!12455 (= res!34015 (isStrictlySorted!280 (toList!708 call!4637)))))

(assert (=> d!12455 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) lt!25599)))

(declare-fun b!61899 () Bool)

(assert (=> b!61899 (= e!40637 (containsKey!128 (toList!708 call!4637) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12455 res!34015) b!61899))

(assert (=> d!12455 m!53207))

(assert (=> d!12455 m!53599))

(assert (=> d!12455 m!53599))

(assert (=> d!12455 m!53601))

(assert (=> d!12455 m!53207))

(declare-fun m!55065 () Bool)

(assert (=> d!12455 m!55065))

(declare-fun m!55067 () Bool)

(assert (=> d!12455 m!55067))

(assert (=> b!61899 m!53207))

(assert (=> b!61899 m!53595))

(assert (=> b!61008 d!12455))

(assert (=> b!61008 d!12157))

(assert (=> b!61008 d!12159))

(declare-fun d!12457 () Bool)

(declare-fun res!34016 () Bool)

(declare-fun e!40638 () Bool)

(assert (=> d!12457 (=> res!34016 e!40638)))

(assert (=> d!12457 (= res!34016 (and ((_ is Cons!1455) (toList!708 e!39984)) (= (_1!1040 (h!2037 (toList!708 e!39984))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12457 (= (containsKey!128 (toList!708 e!39984) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) e!40638)))

(declare-fun b!61900 () Bool)

(declare-fun e!40639 () Bool)

(assert (=> b!61900 (= e!40638 e!40639)))

(declare-fun res!34017 () Bool)

(assert (=> b!61900 (=> (not res!34017) (not e!40639))))

(assert (=> b!61900 (= res!34017 (and (or (not ((_ is Cons!1455) (toList!708 e!39984))) (bvsle (_1!1040 (h!2037 (toList!708 e!39984))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))) ((_ is Cons!1455) (toList!708 e!39984)) (bvslt (_1!1040 (h!2037 (toList!708 e!39984))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(declare-fun b!61901 () Bool)

(assert (=> b!61901 (= e!40639 (containsKey!128 (t!4837 (toList!708 e!39984)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12457 (not res!34016)) b!61900))

(assert (= (and b!61900 res!34017) b!61901))

(assert (=> b!61901 m!53207))

(declare-fun m!55069 () Bool)

(assert (=> b!61901 m!55069))

(assert (=> d!12045 d!12457))

(declare-fun d!12459 () Bool)

(declare-fun e!40641 () Bool)

(assert (=> d!12459 e!40641))

(declare-fun res!34018 () Bool)

(assert (=> d!12459 (=> res!34018 e!40641)))

(declare-fun lt!25600 () Bool)

(assert (=> d!12459 (= res!34018 (not lt!25600))))

(declare-fun lt!25602 () Bool)

(assert (=> d!12459 (= lt!25600 lt!25602)))

(declare-fun lt!25601 () Unit!1622)

(declare-fun e!40640 () Unit!1622)

(assert (=> d!12459 (= lt!25601 e!40640)))

(declare-fun c!8219 () Bool)

(assert (=> d!12459 (= c!8219 lt!25602)))

(assert (=> d!12459 (= lt!25602 (containsKey!128 (toList!708 lt!25017) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12459 (= (contains!697 lt!25017 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25600)))

(declare-fun b!61902 () Bool)

(declare-fun lt!25603 () Unit!1622)

(assert (=> b!61902 (= e!40640 lt!25603)))

(assert (=> b!61902 (= lt!25603 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25017) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61902 (isDefined!78 (getValueByKey!124 (toList!708 lt!25017) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61903 () Bool)

(declare-fun Unit!1672 () Unit!1622)

(assert (=> b!61903 (= e!40640 Unit!1672)))

(declare-fun b!61904 () Bool)

(assert (=> b!61904 (= e!40641 (isDefined!78 (getValueByKey!124 (toList!708 lt!25017) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12459 c!8219) b!61902))

(assert (= (and d!12459 (not c!8219)) b!61903))

(assert (= (and d!12459 (not res!34018)) b!61904))

(declare-fun m!55071 () Bool)

(assert (=> d!12459 m!55071))

(declare-fun m!55073 () Bool)

(assert (=> b!61902 m!55073))

(assert (=> b!61902 m!54823))

(assert (=> b!61902 m!54823))

(declare-fun m!55075 () Bool)

(assert (=> b!61902 m!55075))

(assert (=> b!61904 m!54823))

(assert (=> b!61904 m!54823))

(assert (=> b!61904 m!55075))

(assert (=> bm!4676 d!12459))

(declare-fun d!12461 () Bool)

(declare-fun e!40642 () Bool)

(assert (=> d!12461 e!40642))

(declare-fun res!34019 () Bool)

(assert (=> d!12461 (=> (not res!34019) (not e!40642))))

(declare-fun lt!25604 () ListLongMap!1385)

(assert (=> d!12461 (= res!34019 (contains!697 lt!25604 (_1!1040 (tuple2!2061 lt!25230 lt!25228))))))

(declare-fun lt!25606 () List!1459)

(assert (=> d!12461 (= lt!25604 (ListLongMap!1386 lt!25606))))

(declare-fun lt!25607 () Unit!1622)

(declare-fun lt!25605 () Unit!1622)

(assert (=> d!12461 (= lt!25607 lt!25605)))

(assert (=> d!12461 (= (getValueByKey!124 lt!25606 (_1!1040 (tuple2!2061 lt!25230 lt!25228))) (Some!129 (_2!1040 (tuple2!2061 lt!25230 lt!25228))))))

(assert (=> d!12461 (= lt!25605 (lemmaContainsTupThenGetReturnValue!43 lt!25606 (_1!1040 (tuple2!2061 lt!25230 lt!25228)) (_2!1040 (tuple2!2061 lt!25230 lt!25228))))))

(assert (=> d!12461 (= lt!25606 (insertStrictlySorted!45 (toList!708 lt!25226) (_1!1040 (tuple2!2061 lt!25230 lt!25228)) (_2!1040 (tuple2!2061 lt!25230 lt!25228))))))

(assert (=> d!12461 (= (+!82 lt!25226 (tuple2!2061 lt!25230 lt!25228)) lt!25604)))

(declare-fun b!61905 () Bool)

(declare-fun res!34020 () Bool)

(assert (=> b!61905 (=> (not res!34020) (not e!40642))))

(assert (=> b!61905 (= res!34020 (= (getValueByKey!124 (toList!708 lt!25604) (_1!1040 (tuple2!2061 lt!25230 lt!25228))) (Some!129 (_2!1040 (tuple2!2061 lt!25230 lt!25228)))))))

(declare-fun b!61906 () Bool)

(assert (=> b!61906 (= e!40642 (contains!699 (toList!708 lt!25604) (tuple2!2061 lt!25230 lt!25228)))))

(assert (= (and d!12461 res!34019) b!61905))

(assert (= (and b!61905 res!34020) b!61906))

(declare-fun m!55077 () Bool)

(assert (=> d!12461 m!55077))

(declare-fun m!55079 () Bool)

(assert (=> d!12461 m!55079))

(declare-fun m!55081 () Bool)

(assert (=> d!12461 m!55081))

(declare-fun m!55083 () Bool)

(assert (=> d!12461 m!55083))

(declare-fun m!55085 () Bool)

(assert (=> b!61905 m!55085))

(declare-fun m!55087 () Bool)

(assert (=> b!61906 m!55087))

(assert (=> b!61233 d!12461))

(assert (=> b!61233 d!11991))

(declare-fun d!12463 () Bool)

(declare-fun e!40643 () Bool)

(assert (=> d!12463 e!40643))

(declare-fun res!34021 () Bool)

(assert (=> d!12463 (=> (not res!34021) (not e!40643))))

(declare-fun lt!25608 () ListLongMap!1385)

(assert (=> d!12463 (= res!34021 (contains!697 lt!25608 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25610 () List!1459)

(assert (=> d!12463 (= lt!25608 (ListLongMap!1386 lt!25610))))

(declare-fun lt!25611 () Unit!1622)

(declare-fun lt!25609 () Unit!1622)

(assert (=> d!12463 (= lt!25611 lt!25609)))

(assert (=> d!12463 (= (getValueByKey!124 lt!25610 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12463 (= lt!25609 (lemmaContainsTupThenGetReturnValue!43 lt!25610 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12463 (= lt!25610 (insertStrictlySorted!45 (toList!708 call!4711) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12463 (= (+!82 call!4711 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25608)))

(declare-fun b!61907 () Bool)

(declare-fun res!34022 () Bool)

(assert (=> b!61907 (=> (not res!34022) (not e!40643))))

(assert (=> b!61907 (= res!34022 (= (getValueByKey!124 (toList!708 lt!25608) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61908 () Bool)

(assert (=> b!61908 (= e!40643 (contains!699 (toList!708 lt!25608) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12463 res!34021) b!61907))

(assert (= (and b!61907 res!34022) b!61908))

(declare-fun m!55089 () Bool)

(assert (=> d!12463 m!55089))

(declare-fun m!55091 () Bool)

(assert (=> d!12463 m!55091))

(declare-fun m!55093 () Bool)

(assert (=> d!12463 m!55093))

(declare-fun m!55095 () Bool)

(assert (=> d!12463 m!55095))

(declare-fun m!55097 () Bool)

(assert (=> b!61907 m!55097))

(declare-fun m!55099 () Bool)

(assert (=> b!61908 m!55099))

(assert (=> b!61233 d!12463))

(declare-fun d!12465 () Bool)

(declare-fun e!40645 () Bool)

(assert (=> d!12465 e!40645))

(declare-fun res!34023 () Bool)

(assert (=> d!12465 (=> res!34023 e!40645)))

(declare-fun lt!25612 () Bool)

(assert (=> d!12465 (= res!34023 (not lt!25612))))

(declare-fun lt!25614 () Bool)

(assert (=> d!12465 (= lt!25612 lt!25614)))

(declare-fun lt!25613 () Unit!1622)

(declare-fun e!40644 () Unit!1622)

(assert (=> d!12465 (= lt!25613 e!40644)))

(declare-fun c!8220 () Bool)

(assert (=> d!12465 (= c!8220 lt!25614)))

(assert (=> d!12465 (= lt!25614 (containsKey!128 (toList!708 (+!82 lt!25226 (tuple2!2061 lt!25230 lt!25228))) lt!25227))))

(assert (=> d!12465 (= (contains!697 (+!82 lt!25226 (tuple2!2061 lt!25230 lt!25228)) lt!25227) lt!25612)))

(declare-fun b!61909 () Bool)

(declare-fun lt!25615 () Unit!1622)

(assert (=> b!61909 (= e!40644 lt!25615)))

(assert (=> b!61909 (= lt!25615 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 (+!82 lt!25226 (tuple2!2061 lt!25230 lt!25228))) lt!25227))))

(assert (=> b!61909 (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!25226 (tuple2!2061 lt!25230 lt!25228))) lt!25227))))

(declare-fun b!61910 () Bool)

(declare-fun Unit!1673 () Unit!1622)

(assert (=> b!61910 (= e!40644 Unit!1673)))

(declare-fun b!61911 () Bool)

(assert (=> b!61911 (= e!40645 (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!25226 (tuple2!2061 lt!25230 lt!25228))) lt!25227)))))

(assert (= (and d!12465 c!8220) b!61909))

(assert (= (and d!12465 (not c!8220)) b!61910))

(assert (= (and d!12465 (not res!34023)) b!61911))

(declare-fun m!55101 () Bool)

(assert (=> d!12465 m!55101))

(declare-fun m!55103 () Bool)

(assert (=> b!61909 m!55103))

(declare-fun m!55105 () Bool)

(assert (=> b!61909 m!55105))

(assert (=> b!61909 m!55105))

(declare-fun m!55107 () Bool)

(assert (=> b!61909 m!55107))

(assert (=> b!61911 m!55105))

(assert (=> b!61911 m!55105))

(assert (=> b!61911 m!55107))

(assert (=> b!61233 d!12465))

(declare-fun d!12467 () Bool)

(assert (=> d!12467 (not (contains!697 (+!82 lt!25226 (tuple2!2061 lt!25230 lt!25228)) lt!25227))))

(declare-fun lt!25618 () Unit!1622)

(declare-fun choose!335 (ListLongMap!1385 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1622)

(assert (=> d!12467 (= lt!25618 (choose!335 lt!25226 lt!25230 lt!25228 lt!25227))))

(declare-fun e!40648 () Bool)

(assert (=> d!12467 e!40648))

(declare-fun res!34026 () Bool)

(assert (=> d!12467 (=> (not res!34026) (not e!40648))))

(assert (=> d!12467 (= res!34026 (not (contains!697 lt!25226 lt!25227)))))

(assert (=> d!12467 (= (addStillNotContains!18 lt!25226 lt!25230 lt!25228 lt!25227) lt!25618)))

(declare-fun b!61915 () Bool)

(assert (=> b!61915 (= e!40648 (not (= lt!25230 lt!25227)))))

(assert (= (and d!12467 res!34026) b!61915))

(assert (=> d!12467 m!53837))

(assert (=> d!12467 m!53837))

(assert (=> d!12467 m!53839))

(declare-fun m!55109 () Bool)

(assert (=> d!12467 m!55109))

(declare-fun m!55111 () Bool)

(assert (=> d!12467 m!55111))

(assert (=> b!61233 d!12467))

(assert (=> b!60938 d!12149))

(assert (=> b!60938 d!12151))

(assert (=> b!61069 d!12165))

(declare-fun d!12469 () Bool)

(declare-fun e!40649 () Bool)

(assert (=> d!12469 e!40649))

(declare-fun res!34027 () Bool)

(assert (=> d!12469 (=> (not res!34027) (not e!40649))))

(declare-fun lt!25619 () ListLongMap!1385)

(assert (=> d!12469 (= res!34027 (contains!697 lt!25619 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25621 () List!1459)

(assert (=> d!12469 (= lt!25619 (ListLongMap!1386 lt!25621))))

(declare-fun lt!25622 () Unit!1622)

(declare-fun lt!25620 () Unit!1622)

(assert (=> d!12469 (= lt!25622 lt!25620)))

(assert (=> d!12469 (= (getValueByKey!124 lt!25621 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12469 (= lt!25620 (lemmaContainsTupThenGetReturnValue!43 lt!25621 (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12469 (= lt!25621 (insertStrictlySorted!45 (toList!708 (map!1115 newMap!16)) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12469 (= (+!82 (map!1115 newMap!16) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25619)))

(declare-fun b!61916 () Bool)

(declare-fun res!34028 () Bool)

(assert (=> b!61916 (=> (not res!34028) (not e!40649))))

(assert (=> b!61916 (= res!34028 (= (getValueByKey!124 (toList!708 lt!25619) (_1!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61917 () Bool)

(assert (=> b!61917 (= e!40649 (contains!699 (toList!708 lt!25619) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12469 res!34027) b!61916))

(assert (= (and b!61916 res!34028) b!61917))

(declare-fun m!55113 () Bool)

(assert (=> d!12469 m!55113))

(declare-fun m!55115 () Bool)

(assert (=> d!12469 m!55115))

(declare-fun m!55117 () Bool)

(assert (=> d!12469 m!55117))

(declare-fun m!55119 () Bool)

(assert (=> d!12469 m!55119))

(declare-fun m!55121 () Bool)

(assert (=> b!61916 m!55121))

(declare-fun m!55123 () Bool)

(assert (=> b!61917 m!55123))

(assert (=> b!61069 d!12469))

(assert (=> b!61069 d!11935))

(declare-fun d!12471 () Bool)

(declare-fun e!40651 () Bool)

(assert (=> d!12471 e!40651))

(declare-fun res!34029 () Bool)

(assert (=> d!12471 (=> res!34029 e!40651)))

(declare-fun lt!25623 () Bool)

(assert (=> d!12471 (= res!34029 (not lt!25623))))

(declare-fun lt!25625 () Bool)

(assert (=> d!12471 (= lt!25623 lt!25625)))

(declare-fun lt!25624 () Unit!1622)

(declare-fun e!40650 () Unit!1622)

(assert (=> d!12471 (= lt!25624 e!40650)))

(declare-fun c!8221 () Bool)

(assert (=> d!12471 (= c!8221 lt!25625)))

(assert (=> d!12471 (= lt!25625 (containsKey!128 (toList!708 lt!24992) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12471 (= (contains!697 lt!24992 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25623)))

(declare-fun b!61918 () Bool)

(declare-fun lt!25626 () Unit!1622)

(assert (=> b!61918 (= e!40650 lt!25626)))

(assert (=> b!61918 (= lt!25626 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24992) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61918 (isDefined!78 (getValueByKey!124 (toList!708 lt!24992) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61919 () Bool)

(declare-fun Unit!1674 () Unit!1622)

(assert (=> b!61919 (= e!40650 Unit!1674)))

(declare-fun b!61920 () Bool)

(assert (=> b!61920 (= e!40651 (isDefined!78 (getValueByKey!124 (toList!708 lt!24992) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12471 c!8221) b!61918))

(assert (= (and d!12471 (not c!8221)) b!61919))

(assert (= (and d!12471 (not res!34029)) b!61920))

(declare-fun m!55125 () Bool)

(assert (=> d!12471 m!55125))

(declare-fun m!55127 () Bool)

(assert (=> b!61918 m!55127))

(assert (=> b!61918 m!54443))

(assert (=> b!61918 m!54443))

(declare-fun m!55129 () Bool)

(assert (=> b!61918 m!55129))

(assert (=> b!61920 m!54443))

(assert (=> b!61920 m!54443))

(assert (=> b!61920 m!55129))

(assert (=> bm!4666 d!12471))

(declare-fun d!12473 () Bool)

(assert (=> d!12473 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(assert (=> d!12473 true))

(declare-fun _$5!65 () Unit!1622)

(assert (=> d!12473 (= (choose!325 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3077 lt!24888) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)) _$5!65)))

(declare-fun bs!2686 () Bool)

(assert (= bs!2686 d!12473))

(assert (=> bs!2686 m!53319))

(assert (=> bs!2686 m!53319))

(assert (=> bs!2686 m!53461))

(assert (=> bs!2686 m!53329))

(assert (=> bs!2686 m!53463))

(assert (=> d!11963 d!12473))

(assert (=> d!11963 d!12105))

(declare-fun d!12475 () Bool)

(declare-fun lt!25627 () Bool)

(assert (=> d!12475 (= lt!25627 (select (content!64 Nil!1457) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!40652 () Bool)

(assert (=> d!12475 (= lt!25627 e!40652)))

(declare-fun res!34030 () Bool)

(assert (=> d!12475 (=> (not res!34030) (not e!40652))))

(assert (=> d!12475 (= res!34030 ((_ is Cons!1456) Nil!1457))))

(assert (=> d!12475 (= (contains!698 Nil!1457 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) lt!25627)))

(declare-fun b!61921 () Bool)

(declare-fun e!40653 () Bool)

(assert (=> b!61921 (= e!40652 e!40653)))

(declare-fun res!34031 () Bool)

(assert (=> b!61921 (=> res!34031 e!40653)))

(assert (=> b!61921 (= res!34031 (= (h!2038 Nil!1457) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61922 () Bool)

(assert (=> b!61922 (= e!40653 (contains!698 (t!4838 Nil!1457) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12475 res!34030) b!61921))

(assert (= (and b!61921 (not res!34031)) b!61922))

(assert (=> d!12475 m!53465))

(assert (=> d!12475 m!53471))

(declare-fun m!55131 () Bool)

(assert (=> d!12475 m!55131))

(assert (=> b!61922 m!53471))

(declare-fun m!55133 () Bool)

(assert (=> b!61922 m!55133))

(assert (=> b!61263 d!12475))

(declare-fun d!12477 () Bool)

(declare-fun e!40655 () Bool)

(assert (=> d!12477 e!40655))

(declare-fun res!34032 () Bool)

(assert (=> d!12477 (=> res!34032 e!40655)))

(declare-fun lt!25628 () Bool)

(assert (=> d!12477 (= res!34032 (not lt!25628))))

(declare-fun lt!25630 () Bool)

(assert (=> d!12477 (= lt!25628 lt!25630)))

(declare-fun lt!25629 () Unit!1622)

(declare-fun e!40654 () Unit!1622)

(assert (=> d!12477 (= lt!25629 e!40654)))

(declare-fun c!8222 () Bool)

(assert (=> d!12477 (= c!8222 lt!25630)))

(assert (=> d!12477 (= lt!25630 (containsKey!128 (toList!708 lt!25179) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12477 (= (contains!697 lt!25179 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) lt!25628)))

(declare-fun b!61923 () Bool)

(declare-fun lt!25631 () Unit!1622)

(assert (=> b!61923 (= e!40654 lt!25631)))

(assert (=> b!61923 (= lt!25631 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25179) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61923 (isDefined!78 (getValueByKey!124 (toList!708 lt!25179) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61924 () Bool)

(declare-fun Unit!1675 () Unit!1622)

(assert (=> b!61924 (= e!40654 Unit!1675)))

(declare-fun b!61925 () Bool)

(assert (=> b!61925 (= e!40655 (isDefined!78 (getValueByKey!124 (toList!708 lt!25179) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12477 c!8222) b!61923))

(assert (= (and d!12477 (not c!8222)) b!61924))

(assert (= (and d!12477 (not res!34032)) b!61925))

(assert (=> d!12477 m!53471))

(declare-fun m!55135 () Bool)

(assert (=> d!12477 m!55135))

(assert (=> b!61923 m!53471))

(declare-fun m!55137 () Bool)

(assert (=> b!61923 m!55137))

(assert (=> b!61923 m!53471))

(assert (=> b!61923 m!54843))

(assert (=> b!61923 m!54843))

(declare-fun m!55139 () Bool)

(assert (=> b!61923 m!55139))

(assert (=> b!61925 m!53471))

(assert (=> b!61925 m!54843))

(assert (=> b!61925 m!54843))

(assert (=> b!61925 m!55139))

(assert (=> b!61141 d!12477))

(declare-fun d!12479 () Bool)

(declare-fun lt!25632 () Bool)

(assert (=> d!12479 (= lt!25632 (select (content!65 (toList!708 lt!25275)) (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!40657 () Bool)

(assert (=> d!12479 (= lt!25632 e!40657)))

(declare-fun res!34034 () Bool)

(assert (=> d!12479 (=> (not res!34034) (not e!40657))))

(assert (=> d!12479 (= res!34034 ((_ is Cons!1455) (toList!708 lt!25275)))))

(assert (=> d!12479 (= (contains!699 (toList!708 lt!25275) (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25632)))

(declare-fun b!61926 () Bool)

(declare-fun e!40656 () Bool)

(assert (=> b!61926 (= e!40657 e!40656)))

(declare-fun res!34033 () Bool)

(assert (=> b!61926 (=> res!34033 e!40656)))

(assert (=> b!61926 (= res!34033 (= (h!2037 (toList!708 lt!25275)) (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61927 () Bool)

(assert (=> b!61927 (= e!40656 (contains!699 (t!4837 (toList!708 lt!25275)) (ite c!7914 (ite c!7908 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2061 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12479 res!34034) b!61926))

(assert (= (and b!61926 (not res!34033)) b!61927))

(declare-fun m!55141 () Bool)

(assert (=> d!12479 m!55141))

(declare-fun m!55143 () Bool)

(assert (=> d!12479 m!55143))

(declare-fun m!55145 () Bool)

(assert (=> b!61927 m!55145))

(assert (=> b!61272 d!12479))

(declare-fun d!12481 () Bool)

(assert (=> d!12481 (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!25633 () Unit!1622)

(assert (=> d!12481 (= lt!25633 (choose!329 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!40658 () Bool)

(assert (=> d!12481 e!40658))

(declare-fun res!34035 () Bool)

(assert (=> d!12481 (=> (not res!34035) (not e!40658))))

(assert (=> d!12481 (= res!34035 (isStrictlySorted!280 (toList!708 lt!24948)))))

(assert (=> d!12481 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!25633)))

(declare-fun b!61928 () Bool)

(assert (=> b!61928 (= e!40658 (containsKey!128 (toList!708 lt!24948) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!12481 res!34035) b!61928))

(assert (=> d!12481 m!53359))

(assert (=> d!12481 m!53673))

(assert (=> d!12481 m!53673))

(assert (=> d!12481 m!53835))

(assert (=> d!12481 m!53359))

(declare-fun m!55147 () Bool)

(assert (=> d!12481 m!55147))

(declare-fun m!55149 () Bool)

(assert (=> d!12481 m!55149))

(assert (=> b!61928 m!53359))

(assert (=> b!61928 m!53831))

(assert (=> b!61196 d!12481))

(assert (=> b!61196 d!12221))

(assert (=> b!61196 d!12223))

(declare-fun d!12483 () Bool)

(assert (=> d!12483 (contains!697 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))

(declare-fun lt!25636 () Unit!1622)

(declare-fun choose!336 (array!3746 array!3748 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) (_ BitVec 32) Int) Unit!1622)

(assert (=> d!12483 (= lt!25636 (choose!336 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(assert (=> d!12483 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12483 (= (lemmaArrayContainsKeyThenInListMap!6 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25636)))

(declare-fun bs!2687 () Bool)

(assert (= bs!2687 d!12483))

(assert (=> bs!2687 m!53319))

(assert (=> bs!2687 m!53319))

(assert (=> bs!2687 m!53207))

(assert (=> bs!2687 m!53625))

(assert (=> bs!2687 m!53207))

(declare-fun m!55151 () Bool)

(assert (=> bs!2687 m!55151))

(assert (=> bs!2687 m!53453))

(assert (=> b!61079 d!12483))

(assert (=> b!61079 d!12339))

(assert (=> b!61079 d!12013))

(assert (=> b!61086 d!11951))

(declare-fun d!12485 () Bool)

(assert (=> d!12485 (= (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!301 (getValueByKey!124 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2688 () Bool)

(assert (= bs!2688 d!12485))

(assert (=> bs!2688 m!53583))

(declare-fun m!55153 () Bool)

(assert (=> bs!2688 m!55153))

(assert (=> b!61190 d!12485))

(assert (=> b!61190 d!12357))

(declare-fun b!61929 () Bool)

(declare-fun e!40662 () Bool)

(declare-fun e!40659 () Bool)

(assert (=> b!61929 (= e!40662 e!40659)))

(assert (=> b!61929 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun res!34036 () Bool)

(declare-fun lt!25640 () ListLongMap!1385)

(assert (=> b!61929 (= res!34036 (contains!697 lt!25640 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61929 (=> (not res!34036) (not e!40659))))

(declare-fun b!61930 () Bool)

(declare-fun e!40664 () Bool)

(assert (=> b!61930 (= e!40664 e!40662)))

(declare-fun c!8224 () Bool)

(declare-fun e!40663 () Bool)

(assert (=> b!61930 (= c!8224 e!40663)))

(declare-fun res!34038 () Bool)

(assert (=> b!61930 (=> (not res!34038) (not e!40663))))

(assert (=> b!61930 (= res!34038 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61931 () Bool)

(declare-fun e!40661 () ListLongMap!1385)

(declare-fun call!4782 () ListLongMap!1385)

(assert (=> b!61931 (= e!40661 call!4782)))

(declare-fun b!61932 () Bool)

(declare-fun e!40665 () Bool)

(assert (=> b!61932 (= e!40665 (= lt!25640 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) (mask!5963 newMap!16) (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16))))))

(declare-fun b!61933 () Bool)

(assert (=> b!61933 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(assert (=> b!61933 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))))))))

(assert (=> b!61933 (= e!40659 (= (apply!67 lt!25640 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61934 () Bool)

(declare-fun res!34039 () Bool)

(assert (=> b!61934 (=> (not res!34039) (not e!40664))))

(assert (=> b!61934 (= res!34039 (not (contains!697 lt!25640 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61935 () Bool)

(assert (=> b!61935 (= e!40662 e!40665)))

(declare-fun c!8226 () Bool)

(assert (=> b!61935 (= c!8226 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun bm!4779 () Bool)

(assert (=> bm!4779 (= call!4782 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) (mask!5963 newMap!16) (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16)))))

(declare-fun d!12487 () Bool)

(assert (=> d!12487 e!40664))

(declare-fun res!34037 () Bool)

(assert (=> d!12487 (=> (not res!34037) (not e!40664))))

(assert (=> d!12487 (= res!34037 (not (contains!697 lt!25640 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!40660 () ListLongMap!1385)

(assert (=> d!12487 (= lt!25640 e!40660)))

(declare-fun c!8223 () Bool)

(assert (=> d!12487 (= c!8223 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(assert (=> d!12487 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12487 (= (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16)))) (mask!5963 newMap!16) (ite c!7914 (ite c!7908 lt!24895 lt!24882) (extraKeys!1950 newMap!16)) (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25640)))

(declare-fun b!61936 () Bool)

(assert (=> b!61936 (= e!40665 (isEmpty!302 lt!25640))))

(declare-fun b!61937 () Bool)

(assert (=> b!61937 (= e!40663 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61937 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!61938 () Bool)

(assert (=> b!61938 (= e!40660 e!40661)))

(declare-fun c!8225 () Bool)

(assert (=> b!61938 (= c!8225 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61939 () Bool)

(declare-fun lt!25643 () Unit!1622)

(declare-fun lt!25642 () Unit!1622)

(assert (=> b!61939 (= lt!25643 lt!25642)))

(declare-fun lt!25638 () (_ BitVec 64))

(declare-fun lt!25641 () (_ BitVec 64))

(declare-fun lt!25637 () ListLongMap!1385)

(declare-fun lt!25639 () V!2859)

(assert (=> b!61939 (not (contains!697 (+!82 lt!25637 (tuple2!2061 lt!25641 lt!25639)) lt!25638))))

(assert (=> b!61939 (= lt!25642 (addStillNotContains!18 lt!25637 lt!25641 lt!25639 lt!25638))))

(assert (=> b!61939 (= lt!25638 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61939 (= lt!25639 (get!1090 (select (arr!1793 (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61939 (= lt!25641 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61939 (= lt!25637 call!4782)))

(assert (=> b!61939 (= e!40661 (+!82 call!4782 (tuple2!2061 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (get!1090 (select (arr!1793 (ite (or c!7914 c!7911) (_values!2050 newMap!16) (array!3749 (store (arr!1793 (_values!2050 newMap!16)) (index!3077 lt!24888) (ValueCellFull!861 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2024 (_values!2050 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61940 () Bool)

(assert (=> b!61940 (= e!40660 (ListLongMap!1386 Nil!1456))))

(assert (= (and d!12487 c!8223) b!61940))

(assert (= (and d!12487 (not c!8223)) b!61938))

(assert (= (and b!61938 c!8225) b!61939))

(assert (= (and b!61938 (not c!8225)) b!61931))

(assert (= (or b!61939 b!61931) bm!4779))

(assert (= (and d!12487 res!34037) b!61934))

(assert (= (and b!61934 res!34039) b!61930))

(assert (= (and b!61930 res!34038) b!61937))

(assert (= (and b!61930 c!8224) b!61929))

(assert (= (and b!61930 (not c!8224)) b!61935))

(assert (= (and b!61929 res!34036) b!61933))

(assert (= (and b!61935 c!8226) b!61932))

(assert (= (and b!61935 (not c!8226)) b!61936))

(declare-fun b_lambda!2745 () Bool)

(assert (=> (not b_lambda!2745) (not b!61933)))

(assert (=> b!61933 t!4845))

(declare-fun b_and!3769 () Bool)

(assert (= b_and!3765 (and (=> t!4845 result!2435) b_and!3769)))

(assert (=> b!61933 t!4847))

(declare-fun b_and!3771 () Bool)

(assert (= b_and!3767 (and (=> t!4847 result!2437) b_and!3771)))

(declare-fun b_lambda!2747 () Bool)

(assert (=> (not b_lambda!2747) (not b!61939)))

(assert (=> b!61939 t!4845))

(declare-fun b_and!3773 () Bool)

(assert (= b_and!3769 (and (=> t!4845 result!2435) b_and!3773)))

(assert (=> b!61939 t!4847))

(declare-fun b_and!3775 () Bool)

(assert (= b_and!3771 (and (=> t!4847 result!2437) b_and!3775)))

(assert (=> b!61938 m!53471))

(assert (=> b!61938 m!53471))

(assert (=> b!61938 m!53473))

(assert (=> b!61939 m!53545))

(assert (=> b!61939 m!53493))

(assert (=> b!61939 m!53549))

(assert (=> b!61939 m!53545))

(assert (=> b!61939 m!53471))

(declare-fun m!55155 () Bool)

(assert (=> b!61939 m!55155))

(assert (=> b!61939 m!55155))

(declare-fun m!55157 () Bool)

(assert (=> b!61939 m!55157))

(declare-fun m!55159 () Bool)

(assert (=> b!61939 m!55159))

(assert (=> b!61939 m!53493))

(declare-fun m!55161 () Bool)

(assert (=> b!61939 m!55161))

(assert (=> b!61929 m!53471))

(assert (=> b!61929 m!53471))

(declare-fun m!55163 () Bool)

(assert (=> b!61929 m!55163))

(declare-fun m!55165 () Bool)

(assert (=> b!61932 m!55165))

(declare-fun m!55167 () Bool)

(assert (=> b!61936 m!55167))

(declare-fun m!55169 () Bool)

(assert (=> b!61934 m!55169))

(assert (=> bm!4779 m!55165))

(assert (=> b!61933 m!53471))

(assert (=> b!61933 m!53493))

(assert (=> b!61933 m!53545))

(assert (=> b!61933 m!53493))

(assert (=> b!61933 m!53549))

(assert (=> b!61933 m!53471))

(declare-fun m!55171 () Bool)

(assert (=> b!61933 m!55171))

(assert (=> b!61933 m!53545))

(declare-fun m!55173 () Bool)

(assert (=> d!12487 m!55173))

(assert (=> d!12487 m!53453))

(assert (=> b!61937 m!53471))

(assert (=> b!61937 m!53471))

(assert (=> b!61937 m!53473))

(assert (=> bm!4671 d!12487))

(assert (=> bm!4708 d!12241))

(assert (=> bm!4697 d!12077))

(declare-fun d!12489 () Bool)

(declare-fun e!40666 () Bool)

(assert (=> d!12489 e!40666))

(declare-fun res!34040 () Bool)

(assert (=> d!12489 (=> (not res!34040) (not e!40666))))

(declare-fun lt!25644 () ListLongMap!1385)

(assert (=> d!12489 (= res!34040 (contains!697 lt!25644 (_1!1040 (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(declare-fun lt!25646 () List!1459)

(assert (=> d!12489 (= lt!25644 (ListLongMap!1386 lt!25646))))

(declare-fun lt!25647 () Unit!1622)

(declare-fun lt!25645 () Unit!1622)

(assert (=> d!12489 (= lt!25647 lt!25645)))

(assert (=> d!12489 (= (getValueByKey!124 lt!25646 (_1!1040 (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))) (Some!129 (_2!1040 (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12489 (= lt!25645 (lemmaContainsTupThenGetReturnValue!43 lt!25646 (_1!1040 (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (_2!1040 (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12489 (= lt!25646 (insertStrictlySorted!45 (toList!708 (ite c!8002 call!4702 (ite c!8004 call!4704 call!4706))) (_1!1040 (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (_2!1040 (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12489 (= (+!82 (ite c!8002 call!4702 (ite c!8004 call!4704 call!4706)) (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) lt!25644)))

(declare-fun b!61941 () Bool)

(declare-fun res!34041 () Bool)

(assert (=> b!61941 (=> (not res!34041) (not e!40666))))

(assert (=> b!61941 (= res!34041 (= (getValueByKey!124 (toList!708 lt!25644) (_1!1040 (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))) (Some!129 (_2!1040 (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))))

(declare-fun b!61942 () Bool)

(assert (=> b!61942 (= e!40666 (contains!699 (toList!708 lt!25644) (ite (or c!8002 c!8004) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (= (and d!12489 res!34040) b!61941))

(assert (= (and b!61941 res!34041) b!61942))

(declare-fun m!55175 () Bool)

(assert (=> d!12489 m!55175))

(declare-fun m!55177 () Bool)

(assert (=> d!12489 m!55177))

(declare-fun m!55179 () Bool)

(assert (=> d!12489 m!55179))

(declare-fun m!55181 () Bool)

(assert (=> d!12489 m!55181))

(declare-fun m!55183 () Bool)

(assert (=> b!61941 m!55183))

(declare-fun m!55185 () Bool)

(assert (=> b!61942 m!55185))

(assert (=> bm!4701 d!12489))

(assert (=> bm!4685 d!12077))

(declare-fun d!12491 () Bool)

(assert (=> d!12491 (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946))))

(declare-fun lt!25648 () Unit!1622)

(assert (=> d!12491 (= lt!25648 (choose!329 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946))))

(declare-fun e!40667 () Bool)

(assert (=> d!12491 e!40667))

(declare-fun res!34042 () Bool)

(assert (=> d!12491 (=> (not res!34042) (not e!40667))))

(assert (=> d!12491 (= res!34042 (isStrictlySorted!280 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12491 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946) lt!25648)))

(declare-fun b!61943 () Bool)

(assert (=> b!61943 (= e!40667 (containsKey!128 (toList!708 (+!82 lt!24954 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24946))))

(assert (= (and d!12491 res!34042) b!61943))

(assert (=> d!12491 m!53903))

(assert (=> d!12491 m!53903))

(assert (=> d!12491 m!53905))

(declare-fun m!55187 () Bool)

(assert (=> d!12491 m!55187))

(declare-fun m!55189 () Bool)

(assert (=> d!12491 m!55189))

(assert (=> b!61943 m!53899))

(assert (=> b!61246 d!12491))

(assert (=> b!61246 d!12143))

(assert (=> b!61246 d!12145))

(assert (=> d!12081 d!11985))

(declare-fun d!12493 () Bool)

(declare-fun e!40670 () Bool)

(assert (=> d!12493 e!40670))

(declare-fun res!34048 () Bool)

(assert (=> d!12493 (=> (not res!34048) (not e!40670))))

(declare-fun lt!25651 () SeekEntryResult!238)

(assert (=> d!12493 (= res!34048 ((_ is Found!238) lt!25651))))

(assert (=> d!12493 (= lt!25651 (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (=> d!12493 true))

(declare-fun _$33!45 () Unit!1622)

(assert (=> d!12493 (= (choose!332 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)) _$33!45)))

(declare-fun b!61948 () Bool)

(declare-fun res!34047 () Bool)

(assert (=> b!61948 (=> (not res!34047) (not e!40670))))

(assert (=> b!61948 (= res!34047 (inRange!0 (index!3077 lt!25651) (mask!5963 newMap!16)))))

(declare-fun b!61949 () Bool)

(assert (=> b!61949 (= e!40670 (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!25651)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12493 res!34048) b!61948))

(assert (= (and b!61948 res!34047) b!61949))

(assert (=> d!12493 m!53207))

(assert (=> d!12493 m!53313))

(declare-fun m!55191 () Bool)

(assert (=> b!61948 m!55191))

(declare-fun m!55193 () Bool)

(assert (=> b!61949 m!55193))

(assert (=> d!12081 d!12493))

(assert (=> d!12081 d!12105))

(assert (=> b!61239 d!12251))

(assert (=> b!61239 d!12253))

(assert (=> b!60960 d!12161))

(declare-fun d!12495 () Bool)

(declare-fun lt!25652 () Bool)

(assert (=> d!12495 (= lt!25652 (select (content!65 (toList!708 lt!25152)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun e!40672 () Bool)

(assert (=> d!12495 (= lt!25652 e!40672)))

(declare-fun res!34050 () Bool)

(assert (=> d!12495 (=> (not res!34050) (not e!40672))))

(assert (=> d!12495 (= res!34050 ((_ is Cons!1455) (toList!708 lt!25152)))))

(assert (=> d!12495 (= (contains!699 (toList!708 lt!25152) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!25652)))

(declare-fun b!61950 () Bool)

(declare-fun e!40671 () Bool)

(assert (=> b!61950 (= e!40672 e!40671)))

(declare-fun res!34049 () Bool)

(assert (=> b!61950 (=> res!34049 e!40671)))

(assert (=> b!61950 (= res!34049 (= (h!2037 (toList!708 lt!25152)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!61951 () Bool)

(assert (=> b!61951 (= e!40671 (contains!699 (t!4837 (toList!708 lt!25152)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(assert (= (and d!12495 res!34050) b!61950))

(assert (= (and b!61950 (not res!34049)) b!61951))

(declare-fun m!55195 () Bool)

(assert (=> d!12495 m!55195))

(declare-fun m!55197 () Bool)

(assert (=> d!12495 m!55197))

(declare-fun m!55199 () Bool)

(assert (=> b!61951 m!55199))

(assert (=> b!61093 d!12495))

(assert (=> bm!4699 d!12295))

(declare-fun d!12497 () Bool)

(declare-fun e!40673 () Bool)

(assert (=> d!12497 e!40673))

(declare-fun res!34051 () Bool)

(assert (=> d!12497 (=> (not res!34051) (not e!40673))))

(declare-fun lt!25653 () ListLongMap!1385)

(assert (=> d!12497 (= res!34051 (contains!697 lt!25653 (_1!1040 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25655 () List!1459)

(assert (=> d!12497 (= lt!25653 (ListLongMap!1386 lt!25655))))

(declare-fun lt!25656 () Unit!1622)

(declare-fun lt!25654 () Unit!1622)

(assert (=> d!12497 (= lt!25656 lt!25654)))

(assert (=> d!12497 (= (getValueByKey!124 lt!25655 (_1!1040 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12497 (= lt!25654 (lemmaContainsTupThenGetReturnValue!43 lt!25655 (_1!1040 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12497 (= lt!25655 (insertStrictlySorted!45 (toList!708 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (_1!1040 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12497 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25653)))

(declare-fun b!61952 () Bool)

(declare-fun res!34052 () Bool)

(assert (=> b!61952 (=> (not res!34052) (not e!40673))))

(assert (=> b!61952 (= res!34052 (= (getValueByKey!124 (toList!708 lt!25653) (_1!1040 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61953 () Bool)

(assert (=> b!61953 (= e!40673 (contains!699 (toList!708 lt!25653) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12497 res!34051) b!61952))

(assert (= (and b!61952 res!34052) b!61953))

(declare-fun m!55201 () Bool)

(assert (=> d!12497 m!55201))

(declare-fun m!55203 () Bool)

(assert (=> d!12497 m!55203))

(declare-fun m!55205 () Bool)

(assert (=> d!12497 m!55205))

(declare-fun m!55207 () Bool)

(assert (=> d!12497 m!55207))

(declare-fun m!55209 () Bool)

(assert (=> b!61952 m!55209))

(declare-fun m!55211 () Bool)

(assert (=> b!61953 m!55211))

(assert (=> d!11995 d!12497))

(declare-fun d!12499 () Bool)

(assert (=> d!12499 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24895 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(assert (=> d!12499 true))

(declare-fun _$7!47 () Unit!1622)

(assert (=> d!12499 (= (choose!326 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24895 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) (defaultEntry!2067 newMap!16)) _$7!47)))

(declare-fun bs!2689 () Bool)

(assert (= bs!2689 d!12499))

(assert (=> bs!2689 m!53319))

(assert (=> bs!2689 m!53319))

(assert (=> bs!2689 m!53687))

(assert (=> bs!2689 m!53227))

(assert (=> bs!2689 m!53685))

(assert (=> d!11995 d!12499))

(assert (=> d!11995 d!12013))

(assert (=> d!11995 d!12105))

(declare-fun bm!4780 () Bool)

(declare-fun call!4786 () ListLongMap!1385)

(declare-fun call!4784 () ListLongMap!1385)

(assert (=> bm!4780 (= call!4786 call!4784)))

(declare-fun b!61954 () Bool)

(declare-fun res!34056 () Bool)

(declare-fun e!40680 () Bool)

(assert (=> b!61954 (=> (not res!34056) (not e!40680))))

(declare-fun e!40681 () Bool)

(assert (=> b!61954 (= res!34056 e!40681)))

(declare-fun c!8227 () Bool)

(assert (=> b!61954 (= c!8227 (not (= (bvand lt!24895 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4781 () Bool)

(assert (=> bm!4781 (= call!4784 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24895 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61955 () Bool)

(declare-fun e!40686 () Bool)

(declare-fun lt!25661 () ListLongMap!1385)

(assert (=> b!61955 (= e!40686 (= (apply!67 lt!25661 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!61956 () Bool)

(declare-fun e!40678 () Bool)

(assert (=> b!61956 (= e!40681 e!40678)))

(declare-fun res!34059 () Bool)

(declare-fun call!4787 () Bool)

(assert (=> b!61956 (= res!34059 call!4787)))

(assert (=> b!61956 (=> (not res!34059) (not e!40678))))

(declare-fun b!61957 () Bool)

(assert (=> b!61957 (= e!40678 (= (apply!67 lt!25661 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61958 () Bool)

(declare-fun e!40685 () Bool)

(assert (=> b!61958 (= e!40685 e!40686)))

(declare-fun res!34053 () Bool)

(declare-fun call!4789 () Bool)

(assert (=> b!61958 (= res!34053 call!4789)))

(assert (=> b!61958 (=> (not res!34053) (not e!40686))))

(declare-fun b!61959 () Bool)

(declare-fun c!8231 () Bool)

(assert (=> b!61959 (= c!8231 (and (not (= (bvand lt!24895 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!24895 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40683 () ListLongMap!1385)

(declare-fun e!40674 () ListLongMap!1385)

(assert (=> b!61959 (= e!40683 e!40674)))

(declare-fun b!61960 () Bool)

(declare-fun e!40682 () Bool)

(declare-fun e!40676 () Bool)

(assert (=> b!61960 (= e!40682 e!40676)))

(declare-fun res!34057 () Bool)

(assert (=> b!61960 (=> (not res!34057) (not e!40676))))

(assert (=> b!61960 (= res!34057 (contains!697 lt!25661 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61960 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61961 () Bool)

(assert (=> b!61961 (= e!40680 e!40685)))

(declare-fun c!8232 () Bool)

(assert (=> b!61961 (= c!8232 (not (= (bvand lt!24895 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4782 () Bool)

(assert (=> bm!4782 (= call!4787 (contains!697 lt!25661 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61962 () Bool)

(declare-fun call!4785 () ListLongMap!1385)

(assert (=> b!61962 (= e!40674 call!4785)))

(declare-fun call!4788 () ListLongMap!1385)

(declare-fun call!4783 () ListLongMap!1385)

(declare-fun c!8228 () Bool)

(declare-fun bm!4783 () Bool)

(declare-fun c!8230 () Bool)

(assert (=> bm!4783 (= call!4783 (+!82 (ite c!8228 call!4784 (ite c!8230 call!4786 call!4788)) (ite (or c!8228 c!8230) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!61963 () Bool)

(declare-fun e!40679 () Bool)

(assert (=> b!61963 (= e!40679 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61964 () Bool)

(assert (=> b!61964 (= e!40674 call!4788)))

(declare-fun b!61965 () Bool)

(declare-fun e!40675 () Unit!1622)

(declare-fun Unit!1676 () Unit!1622)

(assert (=> b!61965 (= e!40675 Unit!1676)))

(declare-fun bm!4784 () Bool)

(assert (=> bm!4784 (= call!4788 call!4786)))

(declare-fun d!12501 () Bool)

(assert (=> d!12501 e!40680))

(declare-fun res!34060 () Bool)

(assert (=> d!12501 (=> (not res!34060) (not e!40680))))

(assert (=> d!12501 (= res!34060 (or (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))))

(declare-fun lt!25673 () ListLongMap!1385)

(assert (=> d!12501 (= lt!25661 lt!25673)))

(declare-fun lt!25666 () Unit!1622)

(assert (=> d!12501 (= lt!25666 e!40675)))

(declare-fun c!8229 () Bool)

(declare-fun e!40677 () Bool)

(assert (=> d!12501 (= c!8229 e!40677)))

(declare-fun res!34058 () Bool)

(assert (=> d!12501 (=> (not res!34058) (not e!40677))))

(assert (=> d!12501 (= res!34058 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun e!40684 () ListLongMap!1385)

(assert (=> d!12501 (= lt!25673 e!40684)))

(assert (=> d!12501 (= c!8228 (and (not (= (bvand lt!24895 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!24895 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12501 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12501 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24895 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25661)))

(declare-fun b!61966 () Bool)

(declare-fun lt!25664 () Unit!1622)

(assert (=> b!61966 (= e!40675 lt!25664)))

(declare-fun lt!25667 () ListLongMap!1385)

(assert (=> b!61966 (= lt!25667 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24895 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25658 () (_ BitVec 64))

(assert (=> b!61966 (= lt!25658 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25659 () (_ BitVec 64))

(assert (=> b!61966 (= lt!25659 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25674 () Unit!1622)

(assert (=> b!61966 (= lt!25674 (addStillContains!43 lt!25667 lt!25658 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25659))))

(assert (=> b!61966 (contains!697 (+!82 lt!25667 (tuple2!2061 lt!25658 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25659)))

(declare-fun lt!25663 () Unit!1622)

(assert (=> b!61966 (= lt!25663 lt!25674)))

(declare-fun lt!25657 () ListLongMap!1385)

(assert (=> b!61966 (= lt!25657 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24895 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25677 () (_ BitVec 64))

(assert (=> b!61966 (= lt!25677 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25669 () (_ BitVec 64))

(assert (=> b!61966 (= lt!25669 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25662 () Unit!1622)

(assert (=> b!61966 (= lt!25662 (addApplyDifferent!43 lt!25657 lt!25677 (minValue!1981 newMap!16) lt!25669))))

(assert (=> b!61966 (= (apply!67 (+!82 lt!25657 (tuple2!2061 lt!25677 (minValue!1981 newMap!16))) lt!25669) (apply!67 lt!25657 lt!25669))))

(declare-fun lt!25675 () Unit!1622)

(assert (=> b!61966 (= lt!25675 lt!25662)))

(declare-fun lt!25672 () ListLongMap!1385)

(assert (=> b!61966 (= lt!25672 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24895 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25676 () (_ BitVec 64))

(assert (=> b!61966 (= lt!25676 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25670 () (_ BitVec 64))

(assert (=> b!61966 (= lt!25670 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25660 () Unit!1622)

(assert (=> b!61966 (= lt!25660 (addApplyDifferent!43 lt!25672 lt!25676 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25670))))

(assert (=> b!61966 (= (apply!67 (+!82 lt!25672 (tuple2!2061 lt!25676 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25670) (apply!67 lt!25672 lt!25670))))

(declare-fun lt!25668 () Unit!1622)

(assert (=> b!61966 (= lt!25668 lt!25660)))

(declare-fun lt!25678 () ListLongMap!1385)

(assert (=> b!61966 (= lt!25678 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24895 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25665 () (_ BitVec 64))

(assert (=> b!61966 (= lt!25665 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25671 () (_ BitVec 64))

(assert (=> b!61966 (= lt!25671 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61966 (= lt!25664 (addApplyDifferent!43 lt!25678 lt!25665 (minValue!1981 newMap!16) lt!25671))))

(assert (=> b!61966 (= (apply!67 (+!82 lt!25678 (tuple2!2061 lt!25665 (minValue!1981 newMap!16))) lt!25671) (apply!67 lt!25678 lt!25671))))

(declare-fun b!61967 () Bool)

(assert (=> b!61967 (= e!40684 (+!82 call!4783 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun bm!4785 () Bool)

(assert (=> bm!4785 (= call!4785 call!4783)))

(declare-fun b!61968 () Bool)

(assert (=> b!61968 (= e!40685 (not call!4789))))

(declare-fun b!61969 () Bool)

(assert (=> b!61969 (= e!40681 (not call!4787))))

(declare-fun b!61970 () Bool)

(assert (=> b!61970 (= e!40683 call!4785)))

(declare-fun b!61971 () Bool)

(declare-fun res!34061 () Bool)

(assert (=> b!61971 (=> (not res!34061) (not e!40680))))

(assert (=> b!61971 (= res!34061 e!40682)))

(declare-fun res!34055 () Bool)

(assert (=> b!61971 (=> res!34055 e!40682)))

(assert (=> b!61971 (= res!34055 (not e!40679))))

(declare-fun res!34054 () Bool)

(assert (=> b!61971 (=> (not res!34054) (not e!40679))))

(assert (=> b!61971 (= res!34054 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61972 () Bool)

(assert (=> b!61972 (= e!40676 (= (apply!67 lt!25661 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61972 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_values!2050 newMap!16))))))

(assert (=> b!61972 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!61973 () Bool)

(assert (=> b!61973 (= e!40677 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61974 () Bool)

(assert (=> b!61974 (= e!40684 e!40683)))

(assert (=> b!61974 (= c!8230 (and (not (= (bvand lt!24895 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!24895 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4786 () Bool)

(assert (=> bm!4786 (= call!4789 (contains!697 lt!25661 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12501 c!8228) b!61967))

(assert (= (and d!12501 (not c!8228)) b!61974))

(assert (= (and b!61974 c!8230) b!61970))

(assert (= (and b!61974 (not c!8230)) b!61959))

(assert (= (and b!61959 c!8231) b!61962))

(assert (= (and b!61959 (not c!8231)) b!61964))

(assert (= (or b!61962 b!61964) bm!4784))

(assert (= (or b!61970 bm!4784) bm!4780))

(assert (= (or b!61970 b!61962) bm!4785))

(assert (= (or b!61967 bm!4780) bm!4781))

(assert (= (or b!61967 bm!4785) bm!4783))

(assert (= (and d!12501 res!34058) b!61973))

(assert (= (and d!12501 c!8229) b!61966))

(assert (= (and d!12501 (not c!8229)) b!61965))

(assert (= (and d!12501 res!34060) b!61971))

(assert (= (and b!61971 res!34054) b!61963))

(assert (= (and b!61971 (not res!34055)) b!61960))

(assert (= (and b!61960 res!34057) b!61972))

(assert (= (and b!61971 res!34061) b!61954))

(assert (= (and b!61954 c!8227) b!61956))

(assert (= (and b!61954 (not c!8227)) b!61969))

(assert (= (and b!61956 res!34059) b!61957))

(assert (= (or b!61956 b!61969) bm!4782))

(assert (= (and b!61954 res!34056) b!61961))

(assert (= (and b!61961 c!8232) b!61958))

(assert (= (and b!61961 (not c!8232)) b!61968))

(assert (= (and b!61958 res!34053) b!61955))

(assert (= (or b!61958 b!61968) bm!4786))

(declare-fun b_lambda!2749 () Bool)

(assert (=> (not b_lambda!2749) (not b!61972)))

(assert (=> b!61972 t!4845))

(declare-fun b_and!3777 () Bool)

(assert (= b_and!3773 (and (=> t!4845 result!2435) b_and!3777)))

(assert (=> b!61972 t!4847))

(declare-fun b_and!3779 () Bool)

(assert (= b_and!3775 (and (=> t!4847 result!2437) b_and!3779)))

(assert (=> b!61963 m!53471))

(assert (=> b!61963 m!53471))

(assert (=> b!61963 m!53473))

(declare-fun m!55213 () Bool)

(assert (=> bm!4782 m!55213))

(declare-fun m!55215 () Bool)

(assert (=> bm!4786 m!55215))

(declare-fun m!55217 () Bool)

(assert (=> bm!4783 m!55217))

(assert (=> b!61960 m!53471))

(assert (=> b!61960 m!53471))

(declare-fun m!55219 () Bool)

(assert (=> b!61960 m!55219))

(assert (=> bm!4781 m!53227))

(declare-fun m!55221 () Bool)

(assert (=> bm!4781 m!55221))

(declare-fun m!55223 () Bool)

(assert (=> b!61967 m!55223))

(declare-fun m!55225 () Bool)

(assert (=> b!61955 m!55225))

(assert (=> b!61973 m!53471))

(assert (=> b!61973 m!53471))

(assert (=> b!61973 m!53473))

(assert (=> b!61972 m!53471))

(assert (=> b!61972 m!53759))

(assert (=> b!61972 m!53471))

(declare-fun m!55227 () Bool)

(assert (=> b!61972 m!55227))

(assert (=> b!61972 m!53493))

(assert (=> b!61972 m!53759))

(assert (=> b!61972 m!53493))

(assert (=> b!61972 m!53763))

(assert (=> d!12501 m!53453))

(assert (=> b!61966 m!53471))

(declare-fun m!55229 () Bool)

(assert (=> b!61966 m!55229))

(declare-fun m!55231 () Bool)

(assert (=> b!61966 m!55231))

(declare-fun m!55233 () Bool)

(assert (=> b!61966 m!55233))

(declare-fun m!55235 () Bool)

(assert (=> b!61966 m!55235))

(declare-fun m!55237 () Bool)

(assert (=> b!61966 m!55237))

(assert (=> b!61966 m!53227))

(assert (=> b!61966 m!55221))

(declare-fun m!55239 () Bool)

(assert (=> b!61966 m!55239))

(assert (=> b!61966 m!53227))

(declare-fun m!55241 () Bool)

(assert (=> b!61966 m!55241))

(assert (=> b!61966 m!55229))

(declare-fun m!55243 () Bool)

(assert (=> b!61966 m!55243))

(declare-fun m!55245 () Bool)

(assert (=> b!61966 m!55245))

(declare-fun m!55247 () Bool)

(assert (=> b!61966 m!55247))

(declare-fun m!55249 () Bool)

(assert (=> b!61966 m!55249))

(declare-fun m!55251 () Bool)

(assert (=> b!61966 m!55251))

(assert (=> b!61966 m!55249))

(assert (=> b!61966 m!53227))

(declare-fun m!55253 () Bool)

(assert (=> b!61966 m!55253))

(assert (=> b!61966 m!55243))

(assert (=> b!61966 m!55239))

(declare-fun m!55255 () Bool)

(assert (=> b!61966 m!55255))

(declare-fun m!55257 () Bool)

(assert (=> b!61966 m!55257))

(declare-fun m!55259 () Bool)

(assert (=> b!61957 m!55259))

(assert (=> d!11995 d!12501))

(declare-fun d!12503 () Bool)

(declare-fun e!40687 () Bool)

(assert (=> d!12503 e!40687))

(declare-fun res!34062 () Bool)

(assert (=> d!12503 (=> (not res!34062) (not e!40687))))

(declare-fun lt!25679 () ListLongMap!1385)

(assert (=> d!12503 (= res!34062 (contains!697 lt!25679 (_1!1040 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(declare-fun lt!25681 () List!1459)

(assert (=> d!12503 (= lt!25679 (ListLongMap!1386 lt!25681))))

(declare-fun lt!25682 () Unit!1622)

(declare-fun lt!25680 () Unit!1622)

(assert (=> d!12503 (= lt!25682 lt!25680)))

(assert (=> d!12503 (= (getValueByKey!124 lt!25681 (_1!1040 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!129 (_2!1040 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12503 (= lt!25680 (lemmaContainsTupThenGetReturnValue!43 lt!25681 (_1!1040 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1040 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12503 (= lt!25681 (insertStrictlySorted!45 (toList!708 lt!25013) (_1!1040 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1040 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12503 (= (+!82 lt!25013 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25679)))

(declare-fun b!61975 () Bool)

(declare-fun res!34063 () Bool)

(assert (=> b!61975 (=> (not res!34063) (not e!40687))))

(assert (=> b!61975 (= res!34063 (= (getValueByKey!124 (toList!708 lt!25679) (_1!1040 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!129 (_2!1040 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(declare-fun b!61976 () Bool)

(assert (=> b!61976 (= e!40687 (contains!699 (toList!708 lt!25679) (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))

(assert (= (and d!12503 res!34062) b!61975))

(assert (= (and b!61975 res!34063) b!61976))

(declare-fun m!55261 () Bool)

(assert (=> d!12503 m!55261))

(declare-fun m!55263 () Bool)

(assert (=> d!12503 m!55263))

(declare-fun m!55265 () Bool)

(assert (=> d!12503 m!55265))

(declare-fun m!55267 () Bool)

(assert (=> d!12503 m!55267))

(declare-fun m!55269 () Bool)

(assert (=> b!61975 m!55269))

(declare-fun m!55271 () Bool)

(assert (=> b!61976 m!55271))

(assert (=> b!60996 d!12503))

(declare-fun d!12505 () Bool)

(declare-fun e!40688 () Bool)

(assert (=> d!12505 e!40688))

(declare-fun res!34064 () Bool)

(assert (=> d!12505 (=> (not res!34064) (not e!40688))))

(declare-fun lt!25683 () ListLongMap!1385)

(assert (=> d!12505 (= res!34064 (contains!697 lt!25683 (_1!1040 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(declare-fun lt!25685 () List!1459)

(assert (=> d!12505 (= lt!25683 (ListLongMap!1386 lt!25685))))

(declare-fun lt!25686 () Unit!1622)

(declare-fun lt!25684 () Unit!1622)

(assert (=> d!12505 (= lt!25686 lt!25684)))

(assert (=> d!12505 (= (getValueByKey!124 lt!25685 (_1!1040 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) (Some!129 (_2!1040 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12505 (= lt!25684 (lemmaContainsTupThenGetReturnValue!43 lt!25685 (_1!1040 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) (_2!1040 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12505 (= lt!25685 (insertStrictlySorted!45 (toList!708 lt!25023) (_1!1040 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) (_2!1040 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12505 (= (+!82 lt!25023 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25683)))

(declare-fun b!61977 () Bool)

(declare-fun res!34065 () Bool)

(assert (=> b!61977 (=> (not res!34065) (not e!40688))))

(assert (=> b!61977 (= res!34065 (= (getValueByKey!124 (toList!708 lt!25683) (_1!1040 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) (Some!129 (_2!1040 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))))))))

(declare-fun b!61978 () Bool)

(assert (=> b!61978 (= e!40688 (contains!699 (toList!708 lt!25683) (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))))))

(assert (= (and d!12505 res!34064) b!61977))

(assert (= (and b!61977 res!34065) b!61978))

(declare-fun m!55273 () Bool)

(assert (=> d!12505 m!55273))

(declare-fun m!55275 () Bool)

(assert (=> d!12505 m!55275))

(declare-fun m!55277 () Bool)

(assert (=> d!12505 m!55277))

(declare-fun m!55279 () Bool)

(assert (=> d!12505 m!55279))

(declare-fun m!55281 () Bool)

(assert (=> b!61977 m!55281))

(declare-fun m!55283 () Bool)

(assert (=> b!61978 m!55283))

(assert (=> b!60996 d!12505))

(declare-fun d!12507 () Bool)

(declare-fun e!40690 () Bool)

(assert (=> d!12507 e!40690))

(declare-fun res!34066 () Bool)

(assert (=> d!12507 (=> res!34066 e!40690)))

(declare-fun lt!25687 () Bool)

(assert (=> d!12507 (= res!34066 (not lt!25687))))

(declare-fun lt!25689 () Bool)

(assert (=> d!12507 (= lt!25687 lt!25689)))

(declare-fun lt!25688 () Unit!1622)

(declare-fun e!40689 () Unit!1622)

(assert (=> d!12507 (= lt!25688 e!40689)))

(declare-fun c!8233 () Bool)

(assert (=> d!12507 (= c!8233 lt!25689)))

(assert (=> d!12507 (= lt!25689 (containsKey!128 (toList!708 (+!82 lt!25023 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) lt!25015))))

(assert (=> d!12507 (= (contains!697 (+!82 lt!25023 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25015) lt!25687)))

(declare-fun b!61979 () Bool)

(declare-fun lt!25690 () Unit!1622)

(assert (=> b!61979 (= e!40689 lt!25690)))

(assert (=> b!61979 (= lt!25690 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 (+!82 lt!25023 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) lt!25015))))

(assert (=> b!61979 (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!25023 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) lt!25015))))

(declare-fun b!61980 () Bool)

(declare-fun Unit!1677 () Unit!1622)

(assert (=> b!61980 (= e!40689 Unit!1677)))

(declare-fun b!61981 () Bool)

(assert (=> b!61981 (= e!40690 (isDefined!78 (getValueByKey!124 (toList!708 (+!82 lt!25023 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) lt!25015)))))

(assert (= (and d!12507 c!8233) b!61979))

(assert (= (and d!12507 (not c!8233)) b!61980))

(assert (= (and d!12507 (not res!34066)) b!61981))

(declare-fun m!55285 () Bool)

(assert (=> d!12507 m!55285))

(declare-fun m!55287 () Bool)

(assert (=> b!61979 m!55287))

(declare-fun m!55289 () Bool)

(assert (=> b!61979 m!55289))

(assert (=> b!61979 m!55289))

(declare-fun m!55291 () Bool)

(assert (=> b!61979 m!55291))

(assert (=> b!61981 m!55289))

(assert (=> b!61981 m!55289))

(assert (=> b!61981 m!55291))

(assert (=> b!60996 d!12507))

(declare-fun d!12509 () Bool)

(assert (=> d!12509 (= (apply!67 (+!82 lt!25013 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25025) (apply!67 lt!25013 lt!25025))))

(declare-fun lt!25691 () Unit!1622)

(assert (=> d!12509 (= lt!25691 (choose!330 lt!25013 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25025))))

(declare-fun e!40691 () Bool)

(assert (=> d!12509 e!40691))

(declare-fun res!34067 () Bool)

(assert (=> d!12509 (=> (not res!34067) (not e!40691))))

(assert (=> d!12509 (= res!34067 (contains!697 lt!25013 lt!25025))))

(assert (=> d!12509 (= (addApplyDifferent!43 lt!25013 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25025) lt!25691)))

(declare-fun b!61982 () Bool)

(assert (=> b!61982 (= e!40691 (not (= lt!25025 lt!25033)))))

(assert (= (and d!12509 res!34067) b!61982))

(assert (=> d!12509 m!53557))

(assert (=> d!12509 m!53565))

(assert (=> d!12509 m!53567))

(assert (=> d!12509 m!53565))

(declare-fun m!55293 () Bool)

(assert (=> d!12509 m!55293))

(declare-fun m!55295 () Bool)

(assert (=> d!12509 m!55295))

(assert (=> b!60996 d!12509))

(declare-fun d!12511 () Bool)

(declare-fun e!40692 () Bool)

(assert (=> d!12511 e!40692))

(declare-fun res!34068 () Bool)

(assert (=> d!12511 (=> (not res!34068) (not e!40692))))

(declare-fun lt!25692 () ListLongMap!1385)

(assert (=> d!12511 (= res!34068 (contains!697 lt!25692 (_1!1040 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(declare-fun lt!25694 () List!1459)

(assert (=> d!12511 (= lt!25692 (ListLongMap!1386 lt!25694))))

(declare-fun lt!25695 () Unit!1622)

(declare-fun lt!25693 () Unit!1622)

(assert (=> d!12511 (= lt!25695 lt!25693)))

(assert (=> d!12511 (= (getValueByKey!124 lt!25694 (_1!1040 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) (Some!129 (_2!1040 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12511 (= lt!25693 (lemmaContainsTupThenGetReturnValue!43 lt!25694 (_1!1040 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) (_2!1040 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12511 (= lt!25694 (insertStrictlySorted!45 (toList!708 lt!25028) (_1!1040 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) (_2!1040 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12511 (= (+!82 lt!25028 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25692)))

(declare-fun b!61983 () Bool)

(declare-fun res!34069 () Bool)

(assert (=> b!61983 (=> (not res!34069) (not e!40692))))

(assert (=> b!61983 (= res!34069 (= (getValueByKey!124 (toList!708 lt!25692) (_1!1040 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) (Some!129 (_2!1040 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))))))))

(declare-fun b!61984 () Bool)

(assert (=> b!61984 (= e!40692 (contains!699 (toList!708 lt!25692) (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))))))

(assert (= (and d!12511 res!34068) b!61983))

(assert (= (and b!61983 res!34069) b!61984))

(declare-fun m!55297 () Bool)

(assert (=> d!12511 m!55297))

(declare-fun m!55299 () Bool)

(assert (=> d!12511 m!55299))

(declare-fun m!55301 () Bool)

(assert (=> d!12511 m!55301))

(declare-fun m!55303 () Bool)

(assert (=> d!12511 m!55303))

(declare-fun m!55305 () Bool)

(assert (=> b!61983 m!55305))

(declare-fun m!55307 () Bool)

(assert (=> b!61984 m!55307))

(assert (=> b!60996 d!12511))

(declare-fun d!12513 () Bool)

(assert (=> d!12513 (= (apply!67 lt!25028 lt!25026) (get!1093 (getValueByKey!124 (toList!708 lt!25028) lt!25026)))))

(declare-fun bs!2690 () Bool)

(assert (= bs!2690 d!12513))

(declare-fun m!55309 () Bool)

(assert (=> bs!2690 m!55309))

(assert (=> bs!2690 m!55309))

(declare-fun m!55311 () Bool)

(assert (=> bs!2690 m!55311))

(assert (=> b!60996 d!12513))

(declare-fun d!12515 () Bool)

(assert (=> d!12515 (= (apply!67 (+!82 lt!25028 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25026) (apply!67 lt!25028 lt!25026))))

(declare-fun lt!25696 () Unit!1622)

(assert (=> d!12515 (= lt!25696 (choose!330 lt!25028 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25026))))

(declare-fun e!40693 () Bool)

(assert (=> d!12515 e!40693))

(declare-fun res!34070 () Bool)

(assert (=> d!12515 (=> (not res!34070) (not e!40693))))

(assert (=> d!12515 (= res!34070 (contains!697 lt!25028 lt!25026))))

(assert (=> d!12515 (= (addApplyDifferent!43 lt!25028 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25026) lt!25696)))

(declare-fun b!61985 () Bool)

(assert (=> b!61985 (= e!40693 (not (= lt!25026 lt!25032)))))

(assert (= (and d!12515 res!34070) b!61985))

(assert (=> d!12515 m!53579))

(assert (=> d!12515 m!53561))

(assert (=> d!12515 m!53577))

(assert (=> d!12515 m!53561))

(declare-fun m!55313 () Bool)

(assert (=> d!12515 m!55313))

(declare-fun m!55315 () Bool)

(assert (=> d!12515 m!55315))

(assert (=> b!60996 d!12515))

(declare-fun d!12517 () Bool)

(assert (=> d!12517 (= (apply!67 lt!25034 lt!25027) (get!1093 (getValueByKey!124 (toList!708 lt!25034) lt!25027)))))

(declare-fun bs!2691 () Bool)

(assert (= bs!2691 d!12517))

(declare-fun m!55317 () Bool)

(assert (=> bs!2691 m!55317))

(assert (=> bs!2691 m!55317))

(declare-fun m!55319 () Bool)

(assert (=> bs!2691 m!55319))

(assert (=> b!60996 d!12517))

(declare-fun d!12519 () Bool)

(assert (=> d!12519 (= (apply!67 (+!82 lt!25028 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25026) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!25028 (tuple2!2061 lt!25032 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) lt!25026)))))

(declare-fun bs!2692 () Bool)

(assert (= bs!2692 d!12519))

(declare-fun m!55321 () Bool)

(assert (=> bs!2692 m!55321))

(assert (=> bs!2692 m!55321))

(declare-fun m!55323 () Bool)

(assert (=> bs!2692 m!55323))

(assert (=> b!60996 d!12519))

(declare-fun d!12521 () Bool)

(declare-fun e!40694 () Bool)

(assert (=> d!12521 e!40694))

(declare-fun res!34071 () Bool)

(assert (=> d!12521 (=> (not res!34071) (not e!40694))))

(declare-fun lt!25697 () ListLongMap!1385)

(assert (=> d!12521 (= res!34071 (contains!697 lt!25697 (_1!1040 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(declare-fun lt!25699 () List!1459)

(assert (=> d!12521 (= lt!25697 (ListLongMap!1386 lt!25699))))

(declare-fun lt!25700 () Unit!1622)

(declare-fun lt!25698 () Unit!1622)

(assert (=> d!12521 (= lt!25700 lt!25698)))

(assert (=> d!12521 (= (getValueByKey!124 lt!25699 (_1!1040 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!129 (_2!1040 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12521 (= lt!25698 (lemmaContainsTupThenGetReturnValue!43 lt!25699 (_1!1040 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1040 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12521 (= lt!25699 (insertStrictlySorted!45 (toList!708 lt!25034) (_1!1040 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1040 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12521 (= (+!82 lt!25034 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25697)))

(declare-fun b!61986 () Bool)

(declare-fun res!34072 () Bool)

(assert (=> b!61986 (=> (not res!34072) (not e!40694))))

(assert (=> b!61986 (= res!34072 (= (getValueByKey!124 (toList!708 lt!25697) (_1!1040 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!129 (_2!1040 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(declare-fun b!61987 () Bool)

(assert (=> b!61987 (= e!40694 (contains!699 (toList!708 lt!25697) (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))

(assert (= (and d!12521 res!34071) b!61986))

(assert (= (and b!61986 res!34072) b!61987))

(declare-fun m!55325 () Bool)

(assert (=> d!12521 m!55325))

(declare-fun m!55327 () Bool)

(assert (=> d!12521 m!55327))

(declare-fun m!55329 () Bool)

(assert (=> d!12521 m!55329))

(declare-fun m!55331 () Bool)

(assert (=> d!12521 m!55331))

(declare-fun m!55333 () Bool)

(assert (=> b!61986 m!55333))

(declare-fun m!55335 () Bool)

(assert (=> b!61987 m!55335))

(assert (=> b!60996 d!12521))

(assert (=> b!60996 d!12487))

(declare-fun d!12523 () Bool)

(assert (=> d!12523 (= (apply!67 (+!82 lt!25034 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25027) (apply!67 lt!25034 lt!25027))))

(declare-fun lt!25701 () Unit!1622)

(assert (=> d!12523 (= lt!25701 (choose!330 lt!25034 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25027))))

(declare-fun e!40695 () Bool)

(assert (=> d!12523 e!40695))

(declare-fun res!34073 () Bool)

(assert (=> d!12523 (=> (not res!34073) (not e!40695))))

(assert (=> d!12523 (= res!34073 (contains!697 lt!25034 lt!25027))))

(assert (=> d!12523 (= (addApplyDifferent!43 lt!25034 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25027) lt!25701)))

(declare-fun b!61988 () Bool)

(assert (=> b!61988 (= e!40695 (not (= lt!25027 lt!25021)))))

(assert (= (and d!12523 res!34073) b!61988))

(assert (=> d!12523 m!53569))

(assert (=> d!12523 m!53571))

(assert (=> d!12523 m!53573))

(assert (=> d!12523 m!53571))

(declare-fun m!55337 () Bool)

(assert (=> d!12523 m!55337))

(declare-fun m!55339 () Bool)

(assert (=> d!12523 m!55339))

(assert (=> b!60996 d!12523))

(declare-fun d!12525 () Bool)

(assert (=> d!12525 (= (apply!67 (+!82 lt!25034 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25027) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!25034 (tuple2!2061 lt!25021 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) lt!25027)))))

(declare-fun bs!2693 () Bool)

(assert (= bs!2693 d!12525))

(declare-fun m!55341 () Bool)

(assert (=> bs!2693 m!55341))

(assert (=> bs!2693 m!55341))

(declare-fun m!55343 () Bool)

(assert (=> bs!2693 m!55343))

(assert (=> b!60996 d!12525))

(declare-fun d!12527 () Bool)

(assert (=> d!12527 (= (apply!67 (+!82 lt!25013 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25025) (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!25013 (tuple2!2061 lt!25033 (ite c!7914 (ite c!7908 (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) lt!25025)))))

(declare-fun bs!2694 () Bool)

(assert (= bs!2694 d!12527))

(declare-fun m!55345 () Bool)

(assert (=> bs!2694 m!55345))

(assert (=> bs!2694 m!55345))

(declare-fun m!55347 () Bool)

(assert (=> bs!2694 m!55347))

(assert (=> b!60996 d!12527))

(declare-fun d!12529 () Bool)

(assert (=> d!12529 (= (apply!67 lt!25013 lt!25025) (get!1093 (getValueByKey!124 (toList!708 lt!25013) lt!25025)))))

(declare-fun bs!2695 () Bool)

(assert (= bs!2695 d!12529))

(declare-fun m!55349 () Bool)

(assert (=> bs!2695 m!55349))

(assert (=> bs!2695 m!55349))

(declare-fun m!55351 () Bool)

(assert (=> bs!2695 m!55351))

(assert (=> b!60996 d!12529))

(declare-fun d!12531 () Bool)

(assert (=> d!12531 (contains!697 (+!82 lt!25023 (tuple2!2061 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25015)))

(declare-fun lt!25702 () Unit!1622)

(assert (=> d!12531 (= lt!25702 (choose!331 lt!25023 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25015))))

(assert (=> d!12531 (contains!697 lt!25023 lt!25015)))

(assert (=> d!12531 (= (addStillContains!43 lt!25023 lt!25014 (ite (and c!7914 c!7908) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25015) lt!25702)))

(declare-fun bs!2696 () Bool)

(assert (= bs!2696 d!12531))

(assert (=> bs!2696 m!53551))

(assert (=> bs!2696 m!53551))

(assert (=> bs!2696 m!53553))

(declare-fun m!55353 () Bool)

(assert (=> bs!2696 m!55353))

(declare-fun m!55355 () Bool)

(assert (=> bs!2696 m!55355))

(assert (=> b!60996 d!12531))

(declare-fun d!12533 () Bool)

(declare-fun e!40697 () Bool)

(assert (=> d!12533 e!40697))

(declare-fun res!34074 () Bool)

(assert (=> d!12533 (=> res!34074 e!40697)))

(declare-fun lt!25703 () Bool)

(assert (=> d!12533 (= res!34074 (not lt!25703))))

(declare-fun lt!25705 () Bool)

(assert (=> d!12533 (= lt!25703 lt!25705)))

(declare-fun lt!25704 () Unit!1622)

(declare-fun e!40696 () Unit!1622)

(assert (=> d!12533 (= lt!25704 e!40696)))

(declare-fun c!8234 () Bool)

(assert (=> d!12533 (= c!8234 lt!25705)))

(assert (=> d!12533 (= lt!25705 (containsKey!128 (toList!708 lt!25262) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> d!12533 (= (contains!697 lt!25262 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25703)))

(declare-fun b!61989 () Bool)

(declare-fun lt!25706 () Unit!1622)

(assert (=> b!61989 (= e!40696 lt!25706)))

(assert (=> b!61989 (= lt!25706 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25262) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (=> b!61989 (isDefined!78 (getValueByKey!124 (toList!708 lt!25262) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61990 () Bool)

(declare-fun Unit!1678 () Unit!1622)

(assert (=> b!61990 (= e!40696 Unit!1678)))

(declare-fun b!61991 () Bool)

(assert (=> b!61991 (= e!40697 (isDefined!78 (getValueByKey!124 (toList!708 lt!25262) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (= (and d!12533 c!8234) b!61989))

(assert (= (and d!12533 (not c!8234)) b!61990))

(assert (= (and d!12533 (not res!34074)) b!61991))

(declare-fun m!55357 () Bool)

(assert (=> d!12533 m!55357))

(declare-fun m!55359 () Bool)

(assert (=> b!61989 m!55359))

(assert (=> b!61989 m!53959))

(assert (=> b!61989 m!53959))

(declare-fun m!55361 () Bool)

(assert (=> b!61989 m!55361))

(assert (=> b!61991 m!53959))

(assert (=> b!61991 m!53959))

(assert (=> b!61991 m!55361))

(assert (=> d!12069 d!12533))

(declare-fun b!61994 () Bool)

(declare-fun e!40699 () Option!130)

(assert (=> b!61994 (= e!40699 (getValueByKey!124 (t!4837 lt!25264) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61995 () Bool)

(assert (=> b!61995 (= e!40699 None!128)))

(declare-fun b!61993 () Bool)

(declare-fun e!40698 () Option!130)

(assert (=> b!61993 (= e!40698 e!40699)))

(declare-fun c!8236 () Bool)

(assert (=> b!61993 (= c!8236 (and ((_ is Cons!1455) lt!25264) (not (= (_1!1040 (h!2037 lt!25264)) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun b!61992 () Bool)

(assert (=> b!61992 (= e!40698 (Some!129 (_2!1040 (h!2037 lt!25264))))))

(declare-fun d!12535 () Bool)

(declare-fun c!8235 () Bool)

(assert (=> d!12535 (= c!8235 (and ((_ is Cons!1455) lt!25264) (= (_1!1040 (h!2037 lt!25264)) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12535 (= (getValueByKey!124 lt!25264 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) e!40698)))

(assert (= (and d!12535 c!8235) b!61992))

(assert (= (and d!12535 (not c!8235)) b!61993))

(assert (= (and b!61993 c!8236) b!61994))

(assert (= (and b!61993 (not c!8236)) b!61995))

(declare-fun m!55363 () Bool)

(assert (=> b!61994 m!55363))

(assert (=> d!12069 d!12535))

(declare-fun d!12537 () Bool)

(assert (=> d!12537 (= (getValueByKey!124 lt!25264 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) (Some!129 (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun lt!25707 () Unit!1622)

(assert (=> d!12537 (= lt!25707 (choose!333 lt!25264 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun e!40700 () Bool)

(assert (=> d!12537 e!40700))

(declare-fun res!34075 () Bool)

(assert (=> d!12537 (=> (not res!34075) (not e!40700))))

(assert (=> d!12537 (= res!34075 (isStrictlySorted!280 lt!25264))))

(assert (=> d!12537 (= (lemmaContainsTupThenGetReturnValue!43 lt!25264 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25707)))

(declare-fun b!61996 () Bool)

(declare-fun res!34076 () Bool)

(assert (=> b!61996 (=> (not res!34076) (not e!40700))))

(assert (=> b!61996 (= res!34076 (containsKey!128 lt!25264 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!61997 () Bool)

(assert (=> b!61997 (= e!40700 (contains!699 lt!25264 (tuple2!2061 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (= (and d!12537 res!34075) b!61996))

(assert (= (and b!61996 res!34076) b!61997))

(assert (=> d!12537 m!53953))

(declare-fun m!55365 () Bool)

(assert (=> d!12537 m!55365))

(declare-fun m!55367 () Bool)

(assert (=> d!12537 m!55367))

(declare-fun m!55369 () Bool)

(assert (=> b!61996 m!55369))

(declare-fun m!55371 () Bool)

(assert (=> b!61997 m!55371))

(assert (=> d!12069 d!12537))

(declare-fun bm!4787 () Bool)

(declare-fun call!4790 () List!1459)

(declare-fun call!4791 () List!1459)

(assert (=> bm!4787 (= call!4790 call!4791)))

(declare-fun b!61998 () Bool)

(declare-fun e!40701 () List!1459)

(declare-fun call!4792 () List!1459)

(assert (=> b!61998 (= e!40701 call!4792)))

(declare-fun d!12539 () Bool)

(declare-fun e!40705 () Bool)

(assert (=> d!12539 e!40705))

(declare-fun res!34078 () Bool)

(assert (=> d!12539 (=> (not res!34078) (not e!40705))))

(declare-fun lt!25708 () List!1459)

(assert (=> d!12539 (= res!34078 (isStrictlySorted!280 lt!25708))))

(declare-fun e!40702 () List!1459)

(assert (=> d!12539 (= lt!25708 e!40702)))

(declare-fun c!8238 () Bool)

(assert (=> d!12539 (= c!8238 (and ((_ is Cons!1455) (toList!708 lt!24954)) (bvslt (_1!1040 (h!2037 (toList!708 lt!24954))) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> d!12539 (isStrictlySorted!280 (toList!708 lt!24954))))

(assert (=> d!12539 (= (insertStrictlySorted!45 (toList!708 lt!24954) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!25708)))

(declare-fun b!61999 () Bool)

(declare-fun e!40704 () List!1459)

(assert (=> b!61999 (= e!40702 e!40704)))

(declare-fun c!8239 () Bool)

(assert (=> b!61999 (= c!8239 (and ((_ is Cons!1455) (toList!708 lt!24954)) (= (_1!1040 (h!2037 (toList!708 lt!24954))) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!62000 () Bool)

(declare-fun c!8240 () Bool)

(assert (=> b!62000 (= c!8240 (and ((_ is Cons!1455) (toList!708 lt!24954)) (bvsgt (_1!1040 (h!2037 (toList!708 lt!24954))) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(assert (=> b!62000 (= e!40704 e!40701)))

(declare-fun b!62001 () Bool)

(assert (=> b!62001 (= e!40705 (contains!699 lt!25708 (tuple2!2061 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!62002 () Bool)

(declare-fun e!40703 () List!1459)

(assert (=> b!62002 (= e!40703 (ite c!8239 (t!4837 (toList!708 lt!24954)) (ite c!8240 (Cons!1455 (h!2037 (toList!708 lt!24954)) (t!4837 (toList!708 lt!24954))) Nil!1456)))))

(declare-fun bm!4788 () Bool)

(assert (=> bm!4788 (= call!4791 ($colon$colon!60 e!40703 (ite c!8238 (h!2037 (toList!708 lt!24954)) (tuple2!2061 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(declare-fun c!8237 () Bool)

(assert (=> bm!4788 (= c!8237 c!8238)))

(declare-fun b!62003 () Bool)

(assert (=> b!62003 (= e!40704 call!4790)))

(declare-fun b!62004 () Bool)

(assert (=> b!62004 (= e!40702 call!4791)))

(declare-fun bm!4789 () Bool)

(assert (=> bm!4789 (= call!4792 call!4790)))

(declare-fun b!62005 () Bool)

(assert (=> b!62005 (= e!40701 call!4792)))

(declare-fun b!62006 () Bool)

(declare-fun res!34077 () Bool)

(assert (=> b!62006 (=> (not res!34077) (not e!40705))))

(assert (=> b!62006 (= res!34077 (containsKey!128 lt!25708 (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(declare-fun b!62007 () Bool)

(assert (=> b!62007 (= e!40703 (insertStrictlySorted!45 (t!4837 (toList!708 lt!24954)) (_1!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) (_2!1040 (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))))))))

(assert (= (and d!12539 c!8238) b!62004))

(assert (= (and d!12539 (not c!8238)) b!61999))

(assert (= (and b!61999 c!8239) b!62003))

(assert (= (and b!61999 (not c!8239)) b!62000))

(assert (= (and b!62000 c!8240) b!62005))

(assert (= (and b!62000 (not c!8240)) b!61998))

(assert (= (or b!62005 b!61998) bm!4789))

(assert (= (or b!62003 bm!4789) bm!4787))

(assert (= (or b!62004 bm!4787) bm!4788))

(assert (= (and bm!4788 c!8237) b!62007))

(assert (= (and bm!4788 (not c!8237)) b!62002))

(assert (= (and d!12539 res!34078) b!62006))

(assert (= (and b!62006 res!34077) b!62001))

(declare-fun m!55373 () Bool)

(assert (=> b!62007 m!55373))

(declare-fun m!55375 () Bool)

(assert (=> bm!4788 m!55375))

(declare-fun m!55377 () Bool)

(assert (=> d!12539 m!55377))

(declare-fun m!55379 () Bool)

(assert (=> d!12539 m!55379))

(declare-fun m!55381 () Bool)

(assert (=> b!62001 m!55381))

(declare-fun m!55383 () Bool)

(assert (=> b!62006 m!55383))

(assert (=> d!12069 d!12539))

(declare-fun lt!25709 () Bool)

(declare-fun d!12541 () Bool)

(assert (=> d!12541 (= lt!25709 (select (content!65 (toList!708 lt!25258)) (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun e!40707 () Bool)

(assert (=> d!12541 (= lt!25709 e!40707)))

(declare-fun res!34080 () Bool)

(assert (=> d!12541 (=> (not res!34080) (not e!40707))))

(assert (=> d!12541 (= res!34080 ((_ is Cons!1455) (toList!708 lt!25258)))))

(assert (=> d!12541 (= (contains!699 (toList!708 lt!25258) (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!25709)))

(declare-fun b!62008 () Bool)

(declare-fun e!40706 () Bool)

(assert (=> b!62008 (= e!40707 e!40706)))

(declare-fun res!34079 () Bool)

(assert (=> b!62008 (=> res!34079 e!40706)))

(assert (=> b!62008 (= res!34079 (= (h!2037 (toList!708 lt!25258)) (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!62009 () Bool)

(assert (=> b!62009 (= e!40706 (contains!699 (t!4837 (toList!708 lt!25258)) (tuple2!2061 lt!24963 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(assert (= (and d!12541 res!34080) b!62008))

(assert (= (and b!62008 (not res!34079)) b!62009))

(declare-fun m!55385 () Bool)

(assert (=> d!12541 m!55385))

(declare-fun m!55387 () Bool)

(assert (=> d!12541 m!55387))

(declare-fun m!55389 () Bool)

(assert (=> b!62009 m!55389))

(assert (=> b!61254 d!12541))

(declare-fun d!12543 () Bool)

(declare-fun res!34081 () Bool)

(declare-fun e!40708 () Bool)

(assert (=> d!12543 (=> res!34081 e!40708)))

(assert (=> d!12543 (= res!34081 (and ((_ is Cons!1455) (toList!708 lt!24948)) (= (_1!1040 (h!2037 (toList!708 lt!24948))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12543 (= (containsKey!128 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000) e!40708)))

(declare-fun b!62010 () Bool)

(declare-fun e!40709 () Bool)

(assert (=> b!62010 (= e!40708 e!40709)))

(declare-fun res!34082 () Bool)

(assert (=> b!62010 (=> (not res!34082) (not e!40709))))

(assert (=> b!62010 (= res!34082 (and (or (not ((_ is Cons!1455) (toList!708 lt!24948))) (bvsle (_1!1040 (h!2037 (toList!708 lt!24948))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1455) (toList!708 lt!24948)) (bvslt (_1!1040 (h!2037 (toList!708 lt!24948))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62011 () Bool)

(assert (=> b!62011 (= e!40709 (containsKey!128 (t!4837 (toList!708 lt!24948)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12543 (not res!34081)) b!62010))

(assert (= (and b!62010 res!34082) b!62011))

(declare-fun m!55391 () Bool)

(assert (=> b!62011 m!55391))

(assert (=> d!12025 d!12543))

(declare-fun d!12545 () Bool)

(declare-fun e!40711 () Bool)

(assert (=> d!12545 e!40711))

(declare-fun res!34083 () Bool)

(assert (=> d!12545 (=> res!34083 e!40711)))

(declare-fun lt!25710 () Bool)

(assert (=> d!12545 (= res!34083 (not lt!25710))))

(declare-fun lt!25712 () Bool)

(assert (=> d!12545 (= lt!25710 lt!25712)))

(declare-fun lt!25711 () Unit!1622)

(declare-fun e!40710 () Unit!1622)

(assert (=> d!12545 (= lt!25711 e!40710)))

(declare-fun c!8241 () Bool)

(assert (=> d!12545 (= c!8241 lt!25712)))

(assert (=> d!12545 (= lt!25712 (containsKey!128 (toList!708 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(assert (=> d!12545 (= (contains!697 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))) lt!25710)))

(declare-fun b!62012 () Bool)

(declare-fun lt!25713 () Unit!1622)

(assert (=> b!62012 (= e!40710 lt!25713)))

(assert (=> b!62012 (= lt!25713 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(assert (=> b!62012 (isDefined!78 (getValueByKey!124 (toList!708 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888))))))

(declare-fun b!62013 () Bool)

(declare-fun Unit!1679 () Unit!1622)

(assert (=> b!62013 (= e!40710 Unit!1679)))

(declare-fun b!62014 () Bool)

(assert (=> b!62014 (= e!40711 (isDefined!78 (getValueByKey!124 (toList!708 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!24888)))))))

(assert (= (and d!12545 c!8241) b!62012))

(assert (= (and d!12545 (not c!8241)) b!62013))

(assert (= (and d!12545 (not res!34083)) b!62014))

(assert (=> d!12545 m!53341))

(declare-fun m!55393 () Bool)

(assert (=> d!12545 m!55393))

(assert (=> b!62012 m!53341))

(declare-fun m!55395 () Bool)

(assert (=> b!62012 m!55395))

(assert (=> b!62012 m!53341))

(declare-fun m!55397 () Bool)

(assert (=> b!62012 m!55397))

(assert (=> b!62012 m!55397))

(declare-fun m!55399 () Bool)

(assert (=> b!62012 m!55399))

(assert (=> b!62014 m!53341))

(assert (=> b!62014 m!55397))

(assert (=> b!62014 m!55397))

(assert (=> b!62014 m!55399))

(assert (=> b!60941 d!12545))

(declare-fun bm!4790 () Bool)

(declare-fun call!4796 () ListLongMap!1385)

(declare-fun call!4794 () ListLongMap!1385)

(assert (=> bm!4790 (= call!4796 call!4794)))

(declare-fun b!62015 () Bool)

(declare-fun res!34087 () Bool)

(declare-fun e!40718 () Bool)

(assert (=> b!62015 (=> (not res!34087) (not e!40718))))

(declare-fun e!40719 () Bool)

(assert (=> b!62015 (= res!34087 e!40719)))

(declare-fun c!8242 () Bool)

(assert (=> b!62015 (= c!8242 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4791 () Bool)

(assert (=> bm!4791 (= call!4794 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!62016 () Bool)

(declare-fun e!40724 () Bool)

(declare-fun lt!25718 () ListLongMap!1385)

(assert (=> b!62016 (= e!40724 (= (apply!67 lt!25718 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!62017 () Bool)

(declare-fun e!40716 () Bool)

(assert (=> b!62017 (= e!40719 e!40716)))

(declare-fun res!34090 () Bool)

(declare-fun call!4797 () Bool)

(assert (=> b!62017 (= res!34090 call!4797)))

(assert (=> b!62017 (=> (not res!34090) (not e!40716))))

(declare-fun b!62018 () Bool)

(assert (=> b!62018 (= e!40716 (= (apply!67 lt!25718 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun b!62019 () Bool)

(declare-fun e!40723 () Bool)

(assert (=> b!62019 (= e!40723 e!40724)))

(declare-fun res!34084 () Bool)

(declare-fun call!4799 () Bool)

(assert (=> b!62019 (= res!34084 call!4799)))

(assert (=> b!62019 (=> (not res!34084) (not e!40724))))

(declare-fun b!62020 () Bool)

(declare-fun c!8246 () Bool)

(assert (=> b!62020 (= c!8246 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40721 () ListLongMap!1385)

(declare-fun e!40712 () ListLongMap!1385)

(assert (=> b!62020 (= e!40721 e!40712)))

(declare-fun b!62021 () Bool)

(declare-fun e!40720 () Bool)

(declare-fun e!40714 () Bool)

(assert (=> b!62021 (= e!40720 e!40714)))

(declare-fun res!34088 () Bool)

(assert (=> b!62021 (=> (not res!34088) (not e!40714))))

(assert (=> b!62021 (= res!34088 (contains!697 lt!25718 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62021 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!62022 () Bool)

(assert (=> b!62022 (= e!40718 e!40723)))

(declare-fun c!8247 () Bool)

(assert (=> b!62022 (= c!8247 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4792 () Bool)

(assert (=> bm!4792 (= call!4797 (contains!697 lt!25718 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62023 () Bool)

(declare-fun call!4795 () ListLongMap!1385)

(assert (=> b!62023 (= e!40712 call!4795)))

(declare-fun bm!4793 () Bool)

(declare-fun call!4798 () ListLongMap!1385)

(declare-fun c!8245 () Bool)

(declare-fun call!4793 () ListLongMap!1385)

(declare-fun c!8243 () Bool)

(assert (=> bm!4793 (= call!4793 (+!82 (ite c!8243 call!4794 (ite c!8245 call!4796 call!4798)) (ite (or c!8243 c!8245) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!62024 () Bool)

(declare-fun e!40717 () Bool)

(assert (=> b!62024 (= e!40717 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62025 () Bool)

(assert (=> b!62025 (= e!40712 call!4798)))

(declare-fun b!62026 () Bool)

(declare-fun e!40713 () Unit!1622)

(declare-fun Unit!1680 () Unit!1622)

(assert (=> b!62026 (= e!40713 Unit!1680)))

(declare-fun bm!4794 () Bool)

(assert (=> bm!4794 (= call!4798 call!4796)))

(declare-fun d!12547 () Bool)

(assert (=> d!12547 e!40718))

(declare-fun res!34091 () Bool)

(assert (=> d!12547 (=> (not res!34091) (not e!40718))))

(assert (=> d!12547 (= res!34091 (or (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))))

(declare-fun lt!25730 () ListLongMap!1385)

(assert (=> d!12547 (= lt!25718 lt!25730)))

(declare-fun lt!25723 () Unit!1622)

(assert (=> d!12547 (= lt!25723 e!40713)))

(declare-fun c!8244 () Bool)

(declare-fun e!40715 () Bool)

(assert (=> d!12547 (= c!8244 e!40715)))

(declare-fun res!34089 () Bool)

(assert (=> d!12547 (=> (not res!34089) (not e!40715))))

(assert (=> d!12547 (= res!34089 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun e!40722 () ListLongMap!1385)

(assert (=> d!12547 (= lt!25730 e!40722)))

(assert (=> d!12547 (= c!8243 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12547 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12547 (= (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25718)))

(declare-fun b!62027 () Bool)

(declare-fun lt!25721 () Unit!1622)

(assert (=> b!62027 (= e!40713 lt!25721)))

(declare-fun lt!25724 () ListLongMap!1385)

(assert (=> b!62027 (= lt!25724 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25715 () (_ BitVec 64))

(assert (=> b!62027 (= lt!25715 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25716 () (_ BitVec 64))

(assert (=> b!62027 (= lt!25716 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25731 () Unit!1622)

(assert (=> b!62027 (= lt!25731 (addStillContains!43 lt!25724 lt!25715 (zeroValue!1981 newMap!16) lt!25716))))

(assert (=> b!62027 (contains!697 (+!82 lt!25724 (tuple2!2061 lt!25715 (zeroValue!1981 newMap!16))) lt!25716)))

(declare-fun lt!25720 () Unit!1622)

(assert (=> b!62027 (= lt!25720 lt!25731)))

(declare-fun lt!25714 () ListLongMap!1385)

(assert (=> b!62027 (= lt!25714 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25734 () (_ BitVec 64))

(assert (=> b!62027 (= lt!25734 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25726 () (_ BitVec 64))

(assert (=> b!62027 (= lt!25726 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25719 () Unit!1622)

(assert (=> b!62027 (= lt!25719 (addApplyDifferent!43 lt!25714 lt!25734 (minValue!1981 newMap!16) lt!25726))))

(assert (=> b!62027 (= (apply!67 (+!82 lt!25714 (tuple2!2061 lt!25734 (minValue!1981 newMap!16))) lt!25726) (apply!67 lt!25714 lt!25726))))

(declare-fun lt!25732 () Unit!1622)

(assert (=> b!62027 (= lt!25732 lt!25719)))

(declare-fun lt!25729 () ListLongMap!1385)

(assert (=> b!62027 (= lt!25729 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25733 () (_ BitVec 64))

(assert (=> b!62027 (= lt!25733 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25727 () (_ BitVec 64))

(assert (=> b!62027 (= lt!25727 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25717 () Unit!1622)

(assert (=> b!62027 (= lt!25717 (addApplyDifferent!43 lt!25729 lt!25733 (zeroValue!1981 newMap!16) lt!25727))))

(assert (=> b!62027 (= (apply!67 (+!82 lt!25729 (tuple2!2061 lt!25733 (zeroValue!1981 newMap!16))) lt!25727) (apply!67 lt!25729 lt!25727))))

(declare-fun lt!25725 () Unit!1622)

(assert (=> b!62027 (= lt!25725 lt!25717)))

(declare-fun lt!25735 () ListLongMap!1385)

(assert (=> b!62027 (= lt!25735 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) lt!24892 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25722 () (_ BitVec 64))

(assert (=> b!62027 (= lt!25722 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25728 () (_ BitVec 64))

(assert (=> b!62027 (= lt!25728 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62027 (= lt!25721 (addApplyDifferent!43 lt!25735 lt!25722 (minValue!1981 newMap!16) lt!25728))))

(assert (=> b!62027 (= (apply!67 (+!82 lt!25735 (tuple2!2061 lt!25722 (minValue!1981 newMap!16))) lt!25728) (apply!67 lt!25735 lt!25728))))

(declare-fun b!62028 () Bool)

(assert (=> b!62028 (= e!40722 (+!82 call!4793 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun bm!4795 () Bool)

(assert (=> bm!4795 (= call!4795 call!4793)))

(declare-fun b!62029 () Bool)

(assert (=> b!62029 (= e!40723 (not call!4799))))

(declare-fun b!62030 () Bool)

(assert (=> b!62030 (= e!40719 (not call!4797))))

(declare-fun b!62031 () Bool)

(assert (=> b!62031 (= e!40721 call!4795)))

(declare-fun b!62032 () Bool)

(declare-fun res!34092 () Bool)

(assert (=> b!62032 (=> (not res!34092) (not e!40718))))

(assert (=> b!62032 (= res!34092 e!40720)))

(declare-fun res!34086 () Bool)

(assert (=> b!62032 (=> res!34086 e!40720)))

(assert (=> b!62032 (= res!34086 (not e!40717))))

(declare-fun res!34085 () Bool)

(assert (=> b!62032 (=> (not res!34085) (not e!40717))))

(assert (=> b!62032 (= res!34085 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!62033 () Bool)

(assert (=> b!62033 (= e!40714 (= (apply!67 lt!25718 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 lt!24892) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62033 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 lt!24892)))))

(assert (=> b!62033 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!62034 () Bool)

(assert (=> b!62034 (= e!40715 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62035 () Bool)

(assert (=> b!62035 (= e!40722 e!40721)))

(assert (=> b!62035 (= c!8245 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4796 () Bool)

(assert (=> bm!4796 (= call!4799 (contains!697 lt!25718 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12547 c!8243) b!62028))

(assert (= (and d!12547 (not c!8243)) b!62035))

(assert (= (and b!62035 c!8245) b!62031))

(assert (= (and b!62035 (not c!8245)) b!62020))

(assert (= (and b!62020 c!8246) b!62023))

(assert (= (and b!62020 (not c!8246)) b!62025))

(assert (= (or b!62023 b!62025) bm!4794))

(assert (= (or b!62031 bm!4794) bm!4790))

(assert (= (or b!62031 b!62023) bm!4795))

(assert (= (or b!62028 bm!4790) bm!4791))

(assert (= (or b!62028 bm!4795) bm!4793))

(assert (= (and d!12547 res!34089) b!62034))

(assert (= (and d!12547 c!8244) b!62027))

(assert (= (and d!12547 (not c!8244)) b!62026))

(assert (= (and d!12547 res!34091) b!62032))

(assert (= (and b!62032 res!34085) b!62024))

(assert (= (and b!62032 (not res!34086)) b!62021))

(assert (= (and b!62021 res!34088) b!62033))

(assert (= (and b!62032 res!34092) b!62015))

(assert (= (and b!62015 c!8242) b!62017))

(assert (= (and b!62015 (not c!8242)) b!62030))

(assert (= (and b!62017 res!34090) b!62018))

(assert (= (or b!62017 b!62030) bm!4792))

(assert (= (and b!62015 res!34087) b!62022))

(assert (= (and b!62022 c!8247) b!62019))

(assert (= (and b!62022 (not c!8247)) b!62029))

(assert (= (and b!62019 res!34084) b!62016))

(assert (= (or b!62019 b!62029) bm!4796))

(declare-fun b_lambda!2751 () Bool)

(assert (=> (not b_lambda!2751) (not b!62033)))

(assert (=> b!62033 t!4845))

(declare-fun b_and!3781 () Bool)

(assert (= b_and!3777 (and (=> t!4845 result!2435) b_and!3781)))

(assert (=> b!62033 t!4847))

(declare-fun b_and!3783 () Bool)

(assert (= b_and!3779 (and (=> t!4847 result!2437) b_and!3783)))

(assert (=> b!62024 m!53471))

(assert (=> b!62024 m!53471))

(assert (=> b!62024 m!53473))

(declare-fun m!55401 () Bool)

(assert (=> bm!4792 m!55401))

(declare-fun m!55403 () Bool)

(assert (=> bm!4796 m!55403))

(declare-fun m!55405 () Bool)

(assert (=> bm!4793 m!55405))

(assert (=> b!62021 m!53471))

(assert (=> b!62021 m!53471))

(declare-fun m!55407 () Bool)

(assert (=> b!62021 m!55407))

(declare-fun m!55409 () Bool)

(assert (=> bm!4791 m!55409))

(declare-fun m!55411 () Bool)

(assert (=> b!62028 m!55411))

(declare-fun m!55413 () Bool)

(assert (=> b!62016 m!55413))

(assert (=> b!62034 m!53471))

(assert (=> b!62034 m!53471))

(assert (=> b!62034 m!53473))

(assert (=> b!62033 m!53471))

(declare-fun m!55415 () Bool)

(assert (=> b!62033 m!55415))

(assert (=> b!62033 m!53471))

(declare-fun m!55417 () Bool)

(assert (=> b!62033 m!55417))

(assert (=> b!62033 m!53493))

(assert (=> b!62033 m!55415))

(assert (=> b!62033 m!53493))

(declare-fun m!55419 () Bool)

(assert (=> b!62033 m!55419))

(assert (=> d!12547 m!53453))

(assert (=> b!62027 m!53471))

(declare-fun m!55421 () Bool)

(assert (=> b!62027 m!55421))

(declare-fun m!55423 () Bool)

(assert (=> b!62027 m!55423))

(declare-fun m!55425 () Bool)

(assert (=> b!62027 m!55425))

(declare-fun m!55427 () Bool)

(assert (=> b!62027 m!55427))

(declare-fun m!55429 () Bool)

(assert (=> b!62027 m!55429))

(assert (=> b!62027 m!55409))

(declare-fun m!55431 () Bool)

(assert (=> b!62027 m!55431))

(declare-fun m!55433 () Bool)

(assert (=> b!62027 m!55433))

(assert (=> b!62027 m!55421))

(declare-fun m!55435 () Bool)

(assert (=> b!62027 m!55435))

(declare-fun m!55437 () Bool)

(assert (=> b!62027 m!55437))

(declare-fun m!55439 () Bool)

(assert (=> b!62027 m!55439))

(declare-fun m!55441 () Bool)

(assert (=> b!62027 m!55441))

(declare-fun m!55443 () Bool)

(assert (=> b!62027 m!55443))

(assert (=> b!62027 m!55441))

(declare-fun m!55445 () Bool)

(assert (=> b!62027 m!55445))

(assert (=> b!62027 m!55435))

(assert (=> b!62027 m!55431))

(declare-fun m!55447 () Bool)

(assert (=> b!62027 m!55447))

(declare-fun m!55449 () Bool)

(assert (=> b!62027 m!55449))

(declare-fun m!55451 () Bool)

(assert (=> b!62018 m!55451))

(assert (=> b!60941 d!12547))

(declare-fun d!12549 () Bool)

(assert (=> d!12549 (= (inRange!0 (ite c!7985 (index!3077 lt!25129) (ite c!7984 (index!3076 lt!25137) (index!3079 lt!25137))) (mask!5963 newMap!16)) (and (bvsge (ite c!7985 (index!3077 lt!25129) (ite c!7984 (index!3076 lt!25137) (index!3079 lt!25137))) #b00000000000000000000000000000000) (bvslt (ite c!7985 (index!3077 lt!25129) (ite c!7984 (index!3076 lt!25137) (index!3079 lt!25137))) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4688 d!12549))

(declare-fun d!12551 () Bool)

(assert (=> d!12551 (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!25736 () Unit!1622)

(assert (=> d!12551 (= lt!25736 (choose!329 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40725 () Bool)

(assert (=> d!12551 e!40725))

(declare-fun res!34093 () Bool)

(assert (=> d!12551 (=> (not res!34093) (not e!40725))))

(assert (=> d!12551 (= res!34093 (isStrictlySorted!280 (toList!708 lt!24948)))))

(assert (=> d!12551 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000) lt!25736)))

(declare-fun b!62036 () Bool)

(assert (=> b!62036 (= e!40725 (containsKey!128 (toList!708 lt!24948) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12551 res!34093) b!62036))

(assert (=> d!12551 m!53583))

(assert (=> d!12551 m!53583))

(assert (=> d!12551 m!53821))

(declare-fun m!55453 () Bool)

(assert (=> d!12551 m!55453))

(assert (=> d!12551 m!55149))

(assert (=> b!62036 m!53817))

(assert (=> b!61188 d!12551))

(assert (=> b!61188 d!12485))

(assert (=> b!61188 d!12357))

(declare-fun d!12553 () Bool)

(declare-fun e!40727 () Bool)

(assert (=> d!12553 e!40727))

(declare-fun res!34094 () Bool)

(assert (=> d!12553 (=> res!34094 e!40727)))

(declare-fun lt!25737 () Bool)

(assert (=> d!12553 (= res!34094 (not lt!25737))))

(declare-fun lt!25739 () Bool)

(assert (=> d!12553 (= lt!25737 lt!25739)))

(declare-fun lt!25738 () Unit!1622)

(declare-fun e!40726 () Unit!1622)

(assert (=> d!12553 (= lt!25738 e!40726)))

(declare-fun c!8248 () Bool)

(assert (=> d!12553 (= c!8248 lt!25739)))

(assert (=> d!12553 (= lt!25739 (containsKey!128 (toList!708 lt!25179) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12553 (= (contains!697 lt!25179 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25737)))

(declare-fun b!62037 () Bool)

(declare-fun lt!25740 () Unit!1622)

(assert (=> b!62037 (= e!40726 lt!25740)))

(assert (=> b!62037 (= lt!25740 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!25179) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62037 (isDefined!78 (getValueByKey!124 (toList!708 lt!25179) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62038 () Bool)

(declare-fun Unit!1681 () Unit!1622)

(assert (=> b!62038 (= e!40726 Unit!1681)))

(declare-fun b!62039 () Bool)

(assert (=> b!62039 (= e!40727 (isDefined!78 (getValueByKey!124 (toList!708 lt!25179) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12553 c!8248) b!62037))

(assert (= (and d!12553 (not c!8248)) b!62038))

(assert (= (and d!12553 (not res!34094)) b!62039))

(declare-fun m!55455 () Bool)

(assert (=> d!12553 m!55455))

(declare-fun m!55457 () Bool)

(assert (=> b!62037 m!55457))

(assert (=> b!62037 m!54861))

(assert (=> b!62037 m!54861))

(declare-fun m!55459 () Bool)

(assert (=> b!62037 m!55459))

(assert (=> b!62039 m!54861))

(assert (=> b!62039 m!54861))

(assert (=> b!62039 m!55459))

(assert (=> bm!4704 d!12553))

(declare-fun b!62040 () Bool)

(declare-fun e!40731 () Bool)

(declare-fun call!4800 () Bool)

(assert (=> b!62040 (= e!40731 call!4800)))

(declare-fun c!8249 () Bool)

(declare-fun bm!4797 () Bool)

(assert (=> bm!4797 (= call!4800 (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8249 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!8015 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457))) (ite c!8015 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)))))))

(declare-fun b!62041 () Bool)

(declare-fun e!40728 () Bool)

(assert (=> b!62041 (= e!40728 e!40731)))

(assert (=> b!62041 (= c!8249 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!62043 () Bool)

(declare-fun e!40730 () Bool)

(assert (=> b!62043 (= e!40730 (contains!698 (ite c!8015 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!62044 () Bool)

(declare-fun e!40729 () Bool)

(assert (=> b!62044 (= e!40729 e!40728)))

(declare-fun res!34096 () Bool)

(assert (=> b!62044 (=> (not res!34096) (not e!40728))))

(assert (=> b!62044 (= res!34096 (not e!40730))))

(declare-fun res!34095 () Bool)

(assert (=> b!62044 (=> (not res!34095) (not e!40730))))

(assert (=> b!62044 (= res!34095 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!62042 () Bool)

(assert (=> b!62042 (= e!40731 call!4800)))

(declare-fun d!12555 () Bool)

(declare-fun res!34097 () Bool)

(assert (=> d!12555 (=> res!34097 e!40729)))

(assert (=> d!12555 (= res!34097 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> d!12555 (= (arrayNoDuplicates!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8015 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457)) (ite c!7946 (Cons!1456 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) Nil!1457) Nil!1457))) e!40729)))

(assert (= (and d!12555 (not res!34097)) b!62044))

(assert (= (and b!62044 res!34095) b!62043))

(assert (= (and b!62044 res!34096) b!62041))

(assert (= (and b!62041 c!8249) b!62040))

(assert (= (and b!62041 (not c!8249)) b!62042))

(assert (= (or b!62040 b!62042) bm!4797))

(declare-fun m!55461 () Bool)

(assert (=> bm!4797 m!55461))

(declare-fun m!55463 () Bool)

(assert (=> bm!4797 m!55463))

(assert (=> b!62041 m!55461))

(assert (=> b!62041 m!55461))

(declare-fun m!55465 () Bool)

(assert (=> b!62041 m!55465))

(assert (=> b!62043 m!55461))

(assert (=> b!62043 m!55461))

(declare-fun m!55467 () Bool)

(assert (=> b!62043 m!55467))

(assert (=> b!62044 m!55461))

(assert (=> b!62044 m!55461))

(assert (=> b!62044 m!55465))

(assert (=> bm!4705 d!12555))

(declare-fun b!62045 () Bool)

(declare-fun e!40732 () Bool)

(declare-fun e!40734 () Bool)

(assert (=> b!62045 (= e!40732 e!40734)))

(declare-fun c!8250 () Bool)

(assert (=> b!62045 (= c!8250 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!4798 () Bool)

(declare-fun call!4801 () Bool)

(assert (=> bm!4798 (= call!4801 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3695 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992)))))))

(declare-fun b!62046 () Bool)

(declare-fun e!40733 () Bool)

(assert (=> b!62046 (= e!40733 call!4801)))

(declare-fun d!12557 () Bool)

(declare-fun res!34098 () Bool)

(assert (=> d!12557 (=> res!34098 e!40732)))

(assert (=> d!12557 (= res!34098 (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 (v!2403 (underlying!231 thiss!992))))))))

(assert (=> d!12557 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992)))) e!40732)))

(declare-fun b!62047 () Bool)

(assert (=> b!62047 (= e!40734 e!40733)))

(declare-fun lt!25742 () (_ BitVec 64))

(assert (=> b!62047 (= lt!25742 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!25741 () Unit!1622)

(assert (=> b!62047 (= lt!25741 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) lt!25742 #b00000000000000000000000000000000))))

(assert (=> b!62047 (arrayContainsKey!0 (_keys!3695 (v!2403 (underlying!231 thiss!992))) lt!25742 #b00000000000000000000000000000000)))

(declare-fun lt!25743 () Unit!1622)

(assert (=> b!62047 (= lt!25743 lt!25741)))

(declare-fun res!34099 () Bool)

(assert (=> b!62047 (= res!34099 (= (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) #b00000000000000000000000000000000) (_keys!3695 (v!2403 (underlying!231 thiss!992))) (mask!5963 (v!2403 (underlying!231 thiss!992)))) (Found!238 #b00000000000000000000000000000000)))))

(assert (=> b!62047 (=> (not res!34099) (not e!40733))))

(declare-fun b!62048 () Bool)

(assert (=> b!62048 (= e!40734 call!4801)))

(assert (= (and d!12557 (not res!34098)) b!62045))

(assert (= (and b!62045 c!8250) b!62047))

(assert (= (and b!62045 (not c!8250)) b!62048))

(assert (= (and b!62047 res!34099) b!62046))

(assert (= (or b!62046 b!62048) bm!4798))

(assert (=> b!62045 m!54185))

(assert (=> b!62045 m!54185))

(assert (=> b!62045 m!54187))

(declare-fun m!55469 () Bool)

(assert (=> bm!4798 m!55469))

(assert (=> b!62047 m!54185))

(declare-fun m!55471 () Bool)

(assert (=> b!62047 m!55471))

(declare-fun m!55473 () Bool)

(assert (=> b!62047 m!55473))

(assert (=> b!62047 m!54185))

(declare-fun m!55475 () Bool)

(assert (=> b!62047 m!55475))

(assert (=> b!61107 d!12557))

(assert (=> b!61158 d!12085))

(assert (=> d!11967 d!12105))

(declare-fun d!12559 () Bool)

(declare-fun res!34100 () Bool)

(declare-fun e!40735 () Bool)

(assert (=> d!12559 (=> res!34100 e!40735)))

(assert (=> d!12559 (= res!34100 (= (select (arr!1792 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12559 (= (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!40735)))

(declare-fun b!62049 () Bool)

(declare-fun e!40736 () Bool)

(assert (=> b!62049 (= e!40735 e!40736)))

(declare-fun res!34101 () Bool)

(assert (=> b!62049 (=> (not res!34101) (not e!40736))))

(assert (=> b!62049 (= res!34101 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!62050 () Bool)

(assert (=> b!62050 (= e!40736 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12559 (not res!34100)) b!62049))

(assert (= (and b!62049 res!34101) b!62050))

(assert (=> d!12559 m!54031))

(assert (=> b!62050 m!53207))

(declare-fun m!55477 () Bool)

(assert (=> b!62050 m!55477))

(assert (=> b!61259 d!12559))

(assert (=> d!12049 d!12067))

(declare-fun d!12561 () Bool)

(declare-fun e!40738 () Bool)

(assert (=> d!12561 e!40738))

(declare-fun res!34102 () Bool)

(assert (=> d!12561 (=> res!34102 e!40738)))

(declare-fun lt!25744 () Bool)

(assert (=> d!12561 (= res!34102 (not lt!25744))))

(declare-fun lt!25746 () Bool)

(assert (=> d!12561 (= lt!25744 lt!25746)))

(declare-fun lt!25745 () Unit!1622)

(declare-fun e!40737 () Unit!1622)

(assert (=> d!12561 (= lt!25745 e!40737)))

(declare-fun c!8251 () Bool)

(assert (=> d!12561 (= c!8251 lt!25746)))

(assert (=> d!12561 (= lt!25746 (containsKey!128 (toList!708 lt!24965) lt!24958))))

(assert (=> d!12561 (= (contains!697 lt!24965 lt!24958) lt!25744)))

(declare-fun b!62051 () Bool)

(declare-fun lt!25747 () Unit!1622)

(assert (=> b!62051 (= e!40737 lt!25747)))

(assert (=> b!62051 (= lt!25747 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24965) lt!24958))))

(assert (=> b!62051 (isDefined!78 (getValueByKey!124 (toList!708 lt!24965) lt!24958))))

(declare-fun b!62052 () Bool)

(declare-fun Unit!1682 () Unit!1622)

(assert (=> b!62052 (= e!40737 Unit!1682)))

(declare-fun b!62053 () Bool)

(assert (=> b!62053 (= e!40738 (isDefined!78 (getValueByKey!124 (toList!708 lt!24965) lt!24958)))))

(assert (= (and d!12561 c!8251) b!62051))

(assert (= (and d!12561 (not c!8251)) b!62052))

(assert (= (and d!12561 (not res!34102)) b!62053))

(declare-fun m!55479 () Bool)

(assert (=> d!12561 m!55479))

(declare-fun m!55481 () Bool)

(assert (=> b!62051 m!55481))

(assert (=> b!62051 m!53947))

(assert (=> b!62051 m!53947))

(declare-fun m!55483 () Bool)

(assert (=> b!62051 m!55483))

(assert (=> b!62053 m!53947))

(assert (=> b!62053 m!53947))

(assert (=> b!62053 m!55483))

(assert (=> d!12049 d!12561))

(assert (=> d!12049 d!12051))

(declare-fun d!12563 () Bool)

(assert (=> d!12563 (= (apply!67 (+!82 lt!24965 (tuple2!2061 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!24958) (apply!67 lt!24965 lt!24958))))

(assert (=> d!12563 true))

(declare-fun _$34!772 () Unit!1622)

(assert (=> d!12563 (= (choose!330 lt!24965 lt!24952 (minValue!1981 (v!2403 (underlying!231 thiss!992))) lt!24958) _$34!772)))

(declare-fun bs!2697 () Bool)

(assert (= bs!2697 d!12563))

(assert (=> bs!2697 m!53403))

(assert (=> bs!2697 m!53403))

(assert (=> bs!2697 m!53405))

(assert (=> bs!2697 m!53401))

(assert (=> d!12049 d!12563))

(assert (=> d!12049 d!12061))

(assert (=> b!60993 d!12161))

(assert (=> d!12021 d!12105))

(declare-fun d!12565 () Bool)

(assert (=> d!12565 (arrayContainsKey!0 (_keys!3695 newMap!16) lt!25163 #b00000000000000000000000000000000)))

(declare-fun lt!25748 () Unit!1622)

(assert (=> d!12565 (= lt!25748 (choose!13 (_keys!3695 newMap!16) lt!25163 #b00000000000000000000000000000000))))

(assert (=> d!12565 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!12565 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3695 newMap!16) lt!25163 #b00000000000000000000000000000000) lt!25748)))

(declare-fun bs!2698 () Bool)

(assert (= bs!2698 d!12565))

(assert (=> bs!2698 m!53713))

(declare-fun m!55485 () Bool)

(assert (=> bs!2698 m!55485))

(assert (=> b!61104 d!12565))

(declare-fun d!12567 () Bool)

(declare-fun res!34103 () Bool)

(declare-fun e!40739 () Bool)

(assert (=> d!12567 (=> res!34103 e!40739)))

(assert (=> d!12567 (= res!34103 (= (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) lt!25163))))

(assert (=> d!12567 (= (arrayContainsKey!0 (_keys!3695 newMap!16) lt!25163 #b00000000000000000000000000000000) e!40739)))

(declare-fun b!62054 () Bool)

(declare-fun e!40740 () Bool)

(assert (=> b!62054 (= e!40739 e!40740)))

(declare-fun res!34104 () Bool)

(assert (=> b!62054 (=> (not res!34104) (not e!40740))))

(assert (=> b!62054 (= res!34104 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!62055 () Bool)

(assert (=> b!62055 (= e!40740 (arrayContainsKey!0 (_keys!3695 newMap!16) lt!25163 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12567 (not res!34103)) b!62054))

(assert (= (and b!62054 res!34104) b!62055))

(assert (=> d!12567 m!53471))

(declare-fun m!55487 () Bool)

(assert (=> b!62055 m!55487))

(assert (=> b!61104 d!12567))

(declare-fun b!62056 () Bool)

(declare-fun e!40742 () SeekEntryResult!238)

(declare-fun lt!25750 () SeekEntryResult!238)

(assert (=> b!62056 (= e!40742 (seekKeyOrZeroReturnVacant!0 (x!10172 lt!25750) (index!3078 lt!25750) (index!3078 lt!25750) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun d!12569 () Bool)

(declare-fun lt!25751 () SeekEntryResult!238)

(assert (=> d!12569 (and (or ((_ is Undefined!238) lt!25751) (not ((_ is Found!238) lt!25751)) (and (bvsge (index!3077 lt!25751) #b00000000000000000000000000000000) (bvslt (index!3077 lt!25751) (size!2023 (_keys!3695 newMap!16))))) (or ((_ is Undefined!238) lt!25751) ((_ is Found!238) lt!25751) (not ((_ is MissingZero!238) lt!25751)) (and (bvsge (index!3076 lt!25751) #b00000000000000000000000000000000) (bvslt (index!3076 lt!25751) (size!2023 (_keys!3695 newMap!16))))) (or ((_ is Undefined!238) lt!25751) ((_ is Found!238) lt!25751) ((_ is MissingZero!238) lt!25751) (not ((_ is MissingVacant!238) lt!25751)) (and (bvsge (index!3079 lt!25751) #b00000000000000000000000000000000) (bvslt (index!3079 lt!25751) (size!2023 (_keys!3695 newMap!16))))) (or ((_ is Undefined!238) lt!25751) (ite ((_ is Found!238) lt!25751) (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3077 lt!25751)) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!238) lt!25751) (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3076 lt!25751)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!238) lt!25751) (= (select (arr!1792 (_keys!3695 newMap!16)) (index!3079 lt!25751)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!40741 () SeekEntryResult!238)

(assert (=> d!12569 (= lt!25751 e!40741)))

(declare-fun c!8254 () Bool)

(assert (=> d!12569 (= c!8254 (and ((_ is Intermediate!238) lt!25750) (undefined!1050 lt!25750)))))

(assert (=> d!12569 (= lt!25750 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (mask!5963 newMap!16)) (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (=> d!12569 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12569 (= (seekEntryOrOpen!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (_keys!3695 newMap!16) (mask!5963 newMap!16)) lt!25751)))

(declare-fun b!62057 () Bool)

(declare-fun e!40743 () SeekEntryResult!238)

(assert (=> b!62057 (= e!40743 (Found!238 (index!3078 lt!25750)))))

(declare-fun b!62058 () Bool)

(declare-fun c!8253 () Bool)

(declare-fun lt!25749 () (_ BitVec 64))

(assert (=> b!62058 (= c!8253 (= lt!25749 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62058 (= e!40743 e!40742)))

(declare-fun b!62059 () Bool)

(assert (=> b!62059 (= e!40741 e!40743)))

(assert (=> b!62059 (= lt!25749 (select (arr!1792 (_keys!3695 newMap!16)) (index!3078 lt!25750)))))

(declare-fun c!8252 () Bool)

(assert (=> b!62059 (= c!8252 (= lt!25749 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62060 () Bool)

(assert (=> b!62060 (= e!40742 (MissingZero!238 (index!3078 lt!25750)))))

(declare-fun b!62061 () Bool)

(assert (=> b!62061 (= e!40741 Undefined!238)))

(assert (= (and d!12569 c!8254) b!62061))

(assert (= (and d!12569 (not c!8254)) b!62059))

(assert (= (and b!62059 c!8252) b!62057))

(assert (= (and b!62059 (not c!8252)) b!62058))

(assert (= (and b!62058 c!8253) b!62060))

(assert (= (and b!62058 (not c!8253)) b!62056))

(assert (=> b!62056 m!53471))

(declare-fun m!55489 () Bool)

(assert (=> b!62056 m!55489))

(declare-fun m!55491 () Bool)

(assert (=> d!12569 m!55491))

(assert (=> d!12569 m!53471))

(declare-fun m!55493 () Bool)

(assert (=> d!12569 m!55493))

(assert (=> d!12569 m!53471))

(assert (=> d!12569 m!55491))

(declare-fun m!55495 () Bool)

(assert (=> d!12569 m!55495))

(declare-fun m!55497 () Bool)

(assert (=> d!12569 m!55497))

(declare-fun m!55499 () Bool)

(assert (=> d!12569 m!55499))

(assert (=> d!12569 m!53453))

(declare-fun m!55501 () Bool)

(assert (=> b!62059 m!55501))

(assert (=> b!61104 d!12569))

(assert (=> b!60980 d!12161))

(declare-fun d!12571 () Bool)

(declare-fun res!34105 () Bool)

(declare-fun e!40744 () Bool)

(assert (=> d!12571 (=> res!34105 e!40744)))

(assert (=> d!12571 (= res!34105 (and ((_ is Cons!1455) (t!4837 (toList!708 lt!24780))) (= (_1!1040 (h!2037 (t!4837 (toList!708 lt!24780)))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12571 (= (containsKey!128 (t!4837 (toList!708 lt!24780)) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)) e!40744)))

(declare-fun b!62062 () Bool)

(declare-fun e!40745 () Bool)

(assert (=> b!62062 (= e!40744 e!40745)))

(declare-fun res!34106 () Bool)

(assert (=> b!62062 (=> (not res!34106) (not e!40745))))

(assert (=> b!62062 (= res!34106 (and (or (not ((_ is Cons!1455) (t!4837 (toList!708 lt!24780)))) (bvsle (_1!1040 (h!2037 (t!4837 (toList!708 lt!24780)))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))) ((_ is Cons!1455) (t!4837 (toList!708 lt!24780))) (bvslt (_1!1040 (h!2037 (t!4837 (toList!708 lt!24780)))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355))))))

(declare-fun b!62063 () Bool)

(assert (=> b!62063 (= e!40745 (containsKey!128 (t!4837 (t!4837 (toList!708 lt!24780))) (select (arr!1792 (_keys!3695 (v!2403 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12571 (not res!34105)) b!62062))

(assert (= (and b!62062 res!34106) b!62063))

(assert (=> b!62063 m!53207))

(declare-fun m!55503 () Bool)

(assert (=> b!62063 m!55503))

(assert (=> b!61278 d!12571))

(declare-fun d!12573 () Bool)

(assert (=> d!12573 (= (apply!67 lt!25017 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1093 (getValueByKey!124 (toList!708 lt!25017) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2699 () Bool)

(assert (= bs!2699 d!12573))

(assert (=> bs!2699 m!54973))

(assert (=> bs!2699 m!54973))

(declare-fun m!55505 () Bool)

(assert (=> bs!2699 m!55505))

(assert (=> b!60987 d!12573))

(declare-fun d!12575 () Bool)

(assert (=> d!12575 (= (get!1093 (getValueByKey!124 (toList!708 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24956)) (v!2407 (getValueByKey!124 (toList!708 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24956)))))

(assert (=> d!12073 d!12575))

(declare-fun b!62066 () Bool)

(declare-fun e!40747 () Option!130)

(assert (=> b!62066 (= e!40747 (getValueByKey!124 (t!4837 (toList!708 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) lt!24956))))

(declare-fun b!62067 () Bool)

(assert (=> b!62067 (= e!40747 None!128)))

(declare-fun b!62065 () Bool)

(declare-fun e!40746 () Option!130)

(assert (=> b!62065 (= e!40746 e!40747)))

(declare-fun c!8256 () Bool)

(assert (=> b!62065 (= c!8256 (and ((_ is Cons!1455) (toList!708 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) (not (= (_1!1040 (h!2037 (toList!708 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))) lt!24956))))))

(declare-fun b!62064 () Bool)

(assert (=> b!62064 (= e!40746 (Some!129 (_2!1040 (h!2037 (toList!708 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))))

(declare-fun c!8255 () Bool)

(declare-fun d!12577 () Bool)

(assert (=> d!12577 (= c!8255 (and ((_ is Cons!1455) (toList!708 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) (= (_1!1040 (h!2037 (toList!708 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))) lt!24956)))))

(assert (=> d!12577 (= (getValueByKey!124 (toList!708 (+!82 lt!24944 (tuple2!2061 lt!24964 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))) lt!24956) e!40746)))

(assert (= (and d!12577 c!8255) b!62064))

(assert (= (and d!12577 (not c!8255)) b!62065))

(assert (= (and b!62065 c!8256) b!62066))

(assert (= (and b!62065 (not c!8256)) b!62067))

(declare-fun m!55507 () Bool)

(assert (=> b!62066 m!55507))

(assert (=> d!12073 d!12577))

(declare-fun e!40749 () Option!130)

(declare-fun b!62070 () Bool)

(assert (=> b!62070 (= e!40749 (getValueByKey!124 (t!4837 (toList!708 lt!25171)) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))

(declare-fun b!62071 () Bool)

(assert (=> b!62071 (= e!40749 None!128)))

(declare-fun b!62069 () Bool)

(declare-fun e!40748 () Option!130)

(assert (=> b!62069 (= e!40748 e!40749)))

(declare-fun c!8258 () Bool)

(assert (=> b!62069 (= c!8258 (and ((_ is Cons!1455) (toList!708 lt!25171)) (not (= (_1!1040 (h!2037 (toList!708 lt!25171))) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))))))))

(declare-fun b!62068 () Bool)

(assert (=> b!62068 (= e!40748 (Some!129 (_2!1040 (h!2037 (toList!708 lt!25171)))))))

(declare-fun c!8257 () Bool)

(declare-fun d!12579 () Bool)

(assert (=> d!12579 (= c!8257 (and ((_ is Cons!1455) (toList!708 lt!25171)) (= (_1!1040 (h!2037 (toList!708 lt!25171))) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992)))))))))))

(assert (=> d!12579 (= (getValueByKey!124 (toList!708 lt!25171) (_1!1040 (ite (or c!7936 c!7938) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2403 (underlying!231 thiss!992)))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2403 (underlying!231 thiss!992))))))) e!40748)))

(assert (= (and d!12579 c!8257) b!62068))

(assert (= (and d!12579 (not c!8257)) b!62069))

(assert (= (and b!62069 c!8258) b!62070))

(assert (= (and b!62069 (not c!8258)) b!62071))

(declare-fun m!55509 () Bool)

(assert (=> b!62070 m!55509))

(assert (=> b!61133 d!12579))

(declare-fun d!12581 () Bool)

(declare-fun e!40750 () Bool)

(assert (=> d!12581 e!40750))

(declare-fun res!34107 () Bool)

(assert (=> d!12581 (=> (not res!34107) (not e!40750))))

(declare-fun lt!25752 () ListLongMap!1385)

(assert (=> d!12581 (= res!34107 (contains!697 lt!25752 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25754 () List!1459)

(assert (=> d!12581 (= lt!25752 (ListLongMap!1386 lt!25754))))

(declare-fun lt!25755 () Unit!1622)

(declare-fun lt!25753 () Unit!1622)

(assert (=> d!12581 (= lt!25755 lt!25753)))

(assert (=> d!12581 (= (getValueByKey!124 lt!25754 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12581 (= lt!25753 (lemmaContainsTupThenGetReturnValue!43 lt!25754 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12581 (= lt!25754 (insertStrictlySorted!45 (toList!708 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12581 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25752)))

(declare-fun b!62072 () Bool)

(declare-fun res!34108 () Bool)

(assert (=> b!62072 (=> (not res!34108) (not e!40750))))

(assert (=> b!62072 (= res!34108 (= (getValueByKey!124 (toList!708 lt!25752) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62073 () Bool)

(assert (=> b!62073 (= e!40750 (contains!699 (toList!708 lt!25752) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12581 res!34107) b!62072))

(assert (= (and b!62072 res!34108) b!62073))

(declare-fun m!55511 () Bool)

(assert (=> d!12581 m!55511))

(declare-fun m!55513 () Bool)

(assert (=> d!12581 m!55513))

(declare-fun m!55515 () Bool)

(assert (=> d!12581 m!55515))

(declare-fun m!55517 () Bool)

(assert (=> d!12581 m!55517))

(declare-fun m!55519 () Bool)

(assert (=> b!62072 m!55519))

(declare-fun m!55521 () Bool)

(assert (=> b!62073 m!55521))

(assert (=> d!11999 d!12581))

(declare-fun bm!4799 () Bool)

(declare-fun call!4805 () ListLongMap!1385)

(declare-fun call!4803 () ListLongMap!1385)

(assert (=> bm!4799 (= call!4805 call!4803)))

(declare-fun b!62074 () Bool)

(declare-fun res!34112 () Bool)

(declare-fun e!40757 () Bool)

(assert (=> b!62074 (=> (not res!34112) (not e!40757))))

(declare-fun e!40758 () Bool)

(assert (=> b!62074 (= res!34112 e!40758)))

(declare-fun c!8259 () Bool)

(assert (=> b!62074 (= c!8259 (not (= (bvand lt!24882 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4800 () Bool)

(assert (=> bm!4800 (= call!4803 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun e!40763 () Bool)

(declare-fun b!62075 () Bool)

(declare-fun lt!25760 () ListLongMap!1385)

(assert (=> b!62075 (= e!40763 (= (apply!67 lt!25760 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62076 () Bool)

(declare-fun e!40755 () Bool)

(assert (=> b!62076 (= e!40758 e!40755)))

(declare-fun res!34115 () Bool)

(declare-fun call!4806 () Bool)

(assert (=> b!62076 (= res!34115 call!4806)))

(assert (=> b!62076 (=> (not res!34115) (not e!40755))))

(declare-fun b!62077 () Bool)

(assert (=> b!62077 (= e!40755 (= (apply!67 lt!25760 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun b!62078 () Bool)

(declare-fun e!40762 () Bool)

(assert (=> b!62078 (= e!40762 e!40763)))

(declare-fun res!34109 () Bool)

(declare-fun call!4808 () Bool)

(assert (=> b!62078 (= res!34109 call!4808)))

(assert (=> b!62078 (=> (not res!34109) (not e!40763))))

(declare-fun b!62079 () Bool)

(declare-fun c!8263 () Bool)

(assert (=> b!62079 (= c!8263 (and (not (= (bvand lt!24882 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!24882 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40760 () ListLongMap!1385)

(declare-fun e!40751 () ListLongMap!1385)

(assert (=> b!62079 (= e!40760 e!40751)))

(declare-fun b!62080 () Bool)

(declare-fun e!40759 () Bool)

(declare-fun e!40753 () Bool)

(assert (=> b!62080 (= e!40759 e!40753)))

(declare-fun res!34113 () Bool)

(assert (=> b!62080 (=> (not res!34113) (not e!40753))))

(assert (=> b!62080 (= res!34113 (contains!697 lt!25760 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62080 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!62081 () Bool)

(assert (=> b!62081 (= e!40757 e!40762)))

(declare-fun c!8264 () Bool)

(assert (=> b!62081 (= c!8264 (not (= (bvand lt!24882 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4801 () Bool)

(assert (=> bm!4801 (= call!4806 (contains!697 lt!25760 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62082 () Bool)

(declare-fun call!4804 () ListLongMap!1385)

(assert (=> b!62082 (= e!40751 call!4804)))

(declare-fun call!4802 () ListLongMap!1385)

(declare-fun c!8262 () Bool)

(declare-fun c!8260 () Bool)

(declare-fun call!4807 () ListLongMap!1385)

(declare-fun bm!4802 () Bool)

(assert (=> bm!4802 (= call!4802 (+!82 (ite c!8260 call!4803 (ite c!8262 call!4805 call!4807)) (ite (or c!8260 c!8262) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!62083 () Bool)

(declare-fun e!40756 () Bool)

(assert (=> b!62083 (= e!40756 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62084 () Bool)

(assert (=> b!62084 (= e!40751 call!4807)))

(declare-fun b!62085 () Bool)

(declare-fun e!40752 () Unit!1622)

(declare-fun Unit!1683 () Unit!1622)

(assert (=> b!62085 (= e!40752 Unit!1683)))

(declare-fun bm!4803 () Bool)

(assert (=> bm!4803 (= call!4807 call!4805)))

(declare-fun d!12583 () Bool)

(assert (=> d!12583 e!40757))

(declare-fun res!34116 () Bool)

(assert (=> d!12583 (=> (not res!34116) (not e!40757))))

(assert (=> d!12583 (= res!34116 (or (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))))

(declare-fun lt!25772 () ListLongMap!1385)

(assert (=> d!12583 (= lt!25760 lt!25772)))

(declare-fun lt!25765 () Unit!1622)

(assert (=> d!12583 (= lt!25765 e!40752)))

(declare-fun c!8261 () Bool)

(declare-fun e!40754 () Bool)

(assert (=> d!12583 (= c!8261 e!40754)))

(declare-fun res!34114 () Bool)

(assert (=> d!12583 (=> (not res!34114) (not e!40754))))

(assert (=> d!12583 (= res!34114 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun e!40761 () ListLongMap!1385)

(assert (=> d!12583 (= lt!25772 e!40761)))

(assert (=> d!12583 (= c!8260 (and (not (= (bvand lt!24882 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!24882 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12583 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12583 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25760)))

(declare-fun b!62086 () Bool)

(declare-fun lt!25763 () Unit!1622)

(assert (=> b!62086 (= e!40752 lt!25763)))

(declare-fun lt!25766 () ListLongMap!1385)

(assert (=> b!62086 (= lt!25766 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25757 () (_ BitVec 64))

(assert (=> b!62086 (= lt!25757 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25758 () (_ BitVec 64))

(assert (=> b!62086 (= lt!25758 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25773 () Unit!1622)

(assert (=> b!62086 (= lt!25773 (addStillContains!43 lt!25766 lt!25757 (zeroValue!1981 newMap!16) lt!25758))))

(assert (=> b!62086 (contains!697 (+!82 lt!25766 (tuple2!2061 lt!25757 (zeroValue!1981 newMap!16))) lt!25758)))

(declare-fun lt!25762 () Unit!1622)

(assert (=> b!62086 (= lt!25762 lt!25773)))

(declare-fun lt!25756 () ListLongMap!1385)

(assert (=> b!62086 (= lt!25756 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25776 () (_ BitVec 64))

(assert (=> b!62086 (= lt!25776 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25768 () (_ BitVec 64))

(assert (=> b!62086 (= lt!25768 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25761 () Unit!1622)

(assert (=> b!62086 (= lt!25761 (addApplyDifferent!43 lt!25756 lt!25776 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25768))))

(assert (=> b!62086 (= (apply!67 (+!82 lt!25756 (tuple2!2061 lt!25776 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25768) (apply!67 lt!25756 lt!25768))))

(declare-fun lt!25774 () Unit!1622)

(assert (=> b!62086 (= lt!25774 lt!25761)))

(declare-fun lt!25771 () ListLongMap!1385)

(assert (=> b!62086 (= lt!25771 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25775 () (_ BitVec 64))

(assert (=> b!62086 (= lt!25775 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25769 () (_ BitVec 64))

(assert (=> b!62086 (= lt!25769 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25759 () Unit!1622)

(assert (=> b!62086 (= lt!25759 (addApplyDifferent!43 lt!25771 lt!25775 (zeroValue!1981 newMap!16) lt!25769))))

(assert (=> b!62086 (= (apply!67 (+!82 lt!25771 (tuple2!2061 lt!25775 (zeroValue!1981 newMap!16))) lt!25769) (apply!67 lt!25771 lt!25769))))

(declare-fun lt!25767 () Unit!1622)

(assert (=> b!62086 (= lt!25767 lt!25759)))

(declare-fun lt!25777 () ListLongMap!1385)

(assert (=> b!62086 (= lt!25777 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25764 () (_ BitVec 64))

(assert (=> b!62086 (= lt!25764 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25770 () (_ BitVec 64))

(assert (=> b!62086 (= lt!25770 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62086 (= lt!25763 (addApplyDifferent!43 lt!25777 lt!25764 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25770))))

(assert (=> b!62086 (= (apply!67 (+!82 lt!25777 (tuple2!2061 lt!25764 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25770) (apply!67 lt!25777 lt!25770))))

(declare-fun b!62087 () Bool)

(assert (=> b!62087 (= e!40761 (+!82 call!4802 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!4804 () Bool)

(assert (=> bm!4804 (= call!4804 call!4802)))

(declare-fun b!62088 () Bool)

(assert (=> b!62088 (= e!40762 (not call!4808))))

(declare-fun b!62089 () Bool)

(assert (=> b!62089 (= e!40758 (not call!4806))))

(declare-fun b!62090 () Bool)

(assert (=> b!62090 (= e!40760 call!4804)))

(declare-fun b!62091 () Bool)

(declare-fun res!34117 () Bool)

(assert (=> b!62091 (=> (not res!34117) (not e!40757))))

(assert (=> b!62091 (= res!34117 e!40759)))

(declare-fun res!34111 () Bool)

(assert (=> b!62091 (=> res!34111 e!40759)))

(assert (=> b!62091 (= res!34111 (not e!40756))))

(declare-fun res!34110 () Bool)

(assert (=> b!62091 (=> (not res!34110) (not e!40756))))

(assert (=> b!62091 (= res!34110 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!62092 () Bool)

(assert (=> b!62092 (= e!40753 (= (apply!67 lt!25760 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62092 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_values!2050 newMap!16))))))

(assert (=> b!62092 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 newMap!16))))))

(declare-fun b!62093 () Bool)

(assert (=> b!62093 (= e!40754 (validKeyInArray!0 (select (arr!1792 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62094 () Bool)

(assert (=> b!62094 (= e!40761 e!40760)))

(assert (=> b!62094 (= c!8262 (and (not (= (bvand lt!24882 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!24882 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4805 () Bool)

(assert (=> bm!4805 (= call!4808 (contains!697 lt!25760 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12583 c!8260) b!62087))

(assert (= (and d!12583 (not c!8260)) b!62094))

(assert (= (and b!62094 c!8262) b!62090))

(assert (= (and b!62094 (not c!8262)) b!62079))

(assert (= (and b!62079 c!8263) b!62082))

(assert (= (and b!62079 (not c!8263)) b!62084))

(assert (= (or b!62082 b!62084) bm!4803))

(assert (= (or b!62090 bm!4803) bm!4799))

(assert (= (or b!62090 b!62082) bm!4804))

(assert (= (or b!62087 bm!4799) bm!4800))

(assert (= (or b!62087 bm!4804) bm!4802))

(assert (= (and d!12583 res!34114) b!62093))

(assert (= (and d!12583 c!8261) b!62086))

(assert (= (and d!12583 (not c!8261)) b!62085))

(assert (= (and d!12583 res!34116) b!62091))

(assert (= (and b!62091 res!34110) b!62083))

(assert (= (and b!62091 (not res!34111)) b!62080))

(assert (= (and b!62080 res!34113) b!62092))

(assert (= (and b!62091 res!34117) b!62074))

(assert (= (and b!62074 c!8259) b!62076))

(assert (= (and b!62074 (not c!8259)) b!62089))

(assert (= (and b!62076 res!34115) b!62077))

(assert (= (or b!62076 b!62089) bm!4801))

(assert (= (and b!62074 res!34112) b!62081))

(assert (= (and b!62081 c!8264) b!62078))

(assert (= (and b!62081 (not c!8264)) b!62088))

(assert (= (and b!62078 res!34109) b!62075))

(assert (= (or b!62078 b!62088) bm!4805))

(declare-fun b_lambda!2753 () Bool)

(assert (=> (not b_lambda!2753) (not b!62092)))

(assert (=> b!62092 t!4845))

(declare-fun b_and!3785 () Bool)

(assert (= b_and!3781 (and (=> t!4845 result!2435) b_and!3785)))

(assert (=> b!62092 t!4847))

(declare-fun b_and!3787 () Bool)

(assert (= b_and!3783 (and (=> t!4847 result!2437) b_and!3787)))

(assert (=> b!62083 m!53471))

(assert (=> b!62083 m!53471))

(assert (=> b!62083 m!53473))

(declare-fun m!55523 () Bool)

(assert (=> bm!4801 m!55523))

(declare-fun m!55525 () Bool)

(assert (=> bm!4805 m!55525))

(declare-fun m!55527 () Bool)

(assert (=> bm!4802 m!55527))

(assert (=> b!62080 m!53471))

(assert (=> b!62080 m!53471))

(declare-fun m!55529 () Bool)

(assert (=> b!62080 m!55529))

(assert (=> bm!4800 m!53227))

(declare-fun m!55531 () Bool)

(assert (=> bm!4800 m!55531))

(declare-fun m!55533 () Bool)

(assert (=> b!62087 m!55533))

(declare-fun m!55535 () Bool)

(assert (=> b!62075 m!55535))

(assert (=> b!62093 m!53471))

(assert (=> b!62093 m!53471))

(assert (=> b!62093 m!53473))

(assert (=> b!62092 m!53471))

(assert (=> b!62092 m!53759))

(assert (=> b!62092 m!53471))

(declare-fun m!55537 () Bool)

(assert (=> b!62092 m!55537))

(assert (=> b!62092 m!53493))

(assert (=> b!62092 m!53759))

(assert (=> b!62092 m!53493))

(assert (=> b!62092 m!53763))

(assert (=> d!12583 m!53453))

(assert (=> b!62086 m!53471))

(declare-fun m!55539 () Bool)

(assert (=> b!62086 m!55539))

(declare-fun m!55541 () Bool)

(assert (=> b!62086 m!55541))

(assert (=> b!62086 m!53227))

(declare-fun m!55543 () Bool)

(assert (=> b!62086 m!55543))

(declare-fun m!55545 () Bool)

(assert (=> b!62086 m!55545))

(assert (=> b!62086 m!53227))

(declare-fun m!55547 () Bool)

(assert (=> b!62086 m!55547))

(assert (=> b!62086 m!53227))

(assert (=> b!62086 m!55531))

(declare-fun m!55549 () Bool)

(assert (=> b!62086 m!55549))

(declare-fun m!55551 () Bool)

(assert (=> b!62086 m!55551))

(assert (=> b!62086 m!55539))

(declare-fun m!55553 () Bool)

(assert (=> b!62086 m!55553))

(declare-fun m!55555 () Bool)

(assert (=> b!62086 m!55555))

(declare-fun m!55557 () Bool)

(assert (=> b!62086 m!55557))

(declare-fun m!55559 () Bool)

(assert (=> b!62086 m!55559))

(declare-fun m!55561 () Bool)

(assert (=> b!62086 m!55561))

(assert (=> b!62086 m!55559))

(declare-fun m!55563 () Bool)

(assert (=> b!62086 m!55563))

(assert (=> b!62086 m!55553))

(assert (=> b!62086 m!55549))

(declare-fun m!55565 () Bool)

(assert (=> b!62086 m!55565))

(declare-fun m!55567 () Bool)

(assert (=> b!62086 m!55567))

(declare-fun m!55569 () Bool)

(assert (=> b!62077 m!55569))

(assert (=> d!11999 d!12583))

(assert (=> d!11999 d!12013))

(declare-fun d!12585 () Bool)

(assert (=> d!12585 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(assert (=> d!12585 true))

(declare-fun _$8!49 () Unit!1622)

(assert (=> d!12585 (= (choose!327 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24882 (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (get!1090 (select (arr!1793 (_values!2050 (v!2403 (underlying!231 thiss!992)))) from!355) (dynLambda!315 (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)) _$8!49)))

(declare-fun bs!2700 () Bool)

(assert (= bs!2700 d!12585))

(assert (=> bs!2700 m!53319))

(assert (=> bs!2700 m!53319))

(assert (=> bs!2700 m!53695))

(assert (=> bs!2700 m!53227))

(assert (=> bs!2700 m!53691))

(assert (=> d!11999 d!12585))

(assert (=> d!11999 d!12105))

(declare-fun lt!25778 () Bool)

(declare-fun d!12587 () Bool)

(assert (=> d!12587 (= lt!25778 (select (content!65 (toList!708 lt!25262)) (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun e!40765 () Bool)

(assert (=> d!12587 (= lt!25778 e!40765)))

(declare-fun res!34119 () Bool)

(assert (=> d!12587 (=> (not res!34119) (not e!40765))))

(assert (=> d!12587 (= res!34119 ((_ is Cons!1455) (toList!708 lt!25262)))))

(assert (=> d!12587 (= (contains!699 (toList!708 lt!25262) (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))) lt!25778)))

(declare-fun b!62095 () Bool)

(declare-fun e!40764 () Bool)

(assert (=> b!62095 (= e!40765 e!40764)))

(declare-fun res!34118 () Bool)

(assert (=> b!62095 (=> res!34118 e!40764)))

(assert (=> b!62095 (= res!34118 (= (h!2037 (toList!708 lt!25262)) (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(declare-fun b!62096 () Bool)

(assert (=> b!62096 (= e!40764 (contains!699 (t!4837 (toList!708 lt!25262)) (tuple2!2061 lt!24945 (zeroValue!1981 (v!2403 (underlying!231 thiss!992))))))))

(assert (= (and d!12587 res!34119) b!62095))

(assert (= (and b!62095 (not res!34118)) b!62096))

(declare-fun m!55571 () Bool)

(assert (=> d!12587 m!55571))

(declare-fun m!55573 () Bool)

(assert (=> d!12587 m!55573))

(declare-fun m!55575 () Bool)

(assert (=> b!62096 m!55575))

(assert (=> b!61256 d!12587))

(assert (=> b!61232 d!11971))

(assert (=> d!11973 d!12105))

(declare-fun d!12589 () Bool)

(assert (=> d!12589 (= (apply!67 lt!24992 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1093 (getValueByKey!124 (toList!708 lt!24992) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2701 () Bool)

(assert (= bs!2701 d!12589))

(assert (=> bs!2701 m!55051))

(assert (=> bs!2701 m!55051))

(declare-fun m!55577 () Bool)

(assert (=> bs!2701 m!55577))

(assert (=> b!60954 d!12589))

(declare-fun d!12591 () Bool)

(declare-fun e!40766 () Bool)

(assert (=> d!12591 e!40766))

(declare-fun res!34120 () Bool)

(assert (=> d!12591 (=> (not res!34120) (not e!40766))))

(declare-fun lt!25779 () ListLongMap!1385)

(assert (=> d!12591 (= res!34120 (contains!697 lt!25779 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun lt!25781 () List!1459)

(assert (=> d!12591 (= lt!25779 (ListLongMap!1386 lt!25781))))

(declare-fun lt!25782 () Unit!1622)

(declare-fun lt!25780 () Unit!1622)

(assert (=> d!12591 (= lt!25782 lt!25780)))

(assert (=> d!12591 (= (getValueByKey!124 lt!25781 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12591 (= lt!25780 (lemmaContainsTupThenGetReturnValue!43 lt!25781 (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12591 (= lt!25781 (insertStrictlySorted!45 (toList!708 call!4663) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12591 (= (+!82 call!4663 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) lt!25779)))

(declare-fun b!62097 () Bool)

(declare-fun res!34121 () Bool)

(assert (=> b!62097 (=> (not res!34121) (not e!40766))))

(assert (=> b!62097 (= res!34121 (= (getValueByKey!124 (toList!708 lt!25779) (_1!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (Some!129 (_2!1040 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(declare-fun b!62098 () Bool)

(assert (=> b!62098 (= e!40766 (contains!699 (toList!708 lt!25779) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(assert (= (and d!12591 res!34120) b!62097))

(assert (= (and b!62097 res!34121) b!62098))

(declare-fun m!55579 () Bool)

(assert (=> d!12591 m!55579))

(declare-fun m!55581 () Bool)

(assert (=> d!12591 m!55581))

(declare-fun m!55583 () Bool)

(assert (=> d!12591 m!55583))

(declare-fun m!55585 () Bool)

(assert (=> d!12591 m!55585))

(declare-fun m!55587 () Bool)

(assert (=> b!62097 m!55587))

(declare-fun m!55589 () Bool)

(assert (=> b!62098 m!55589))

(assert (=> b!60964 d!12591))

(declare-fun bm!4806 () Bool)

(declare-fun call!4812 () ListLongMap!1385)

(declare-fun call!4810 () ListLongMap!1385)

(assert (=> bm!4806 (= call!4812 call!4810)))

(declare-fun b!62099 () Bool)

(declare-fun res!34125 () Bool)

(declare-fun e!40773 () Bool)

(assert (=> b!62099 (=> (not res!34125) (not e!40773))))

(declare-fun e!40774 () Bool)

(assert (=> b!62099 (= res!34125 e!40774)))

(declare-fun c!8265 () Bool)

(assert (=> b!62099 (= c!8265 (not (= (bvand (extraKeys!1950 (_2!1041 lt!24880)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4807 () Bool)

(assert (=> bm!4807 (= call!4810 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (_2!1041 lt!24880)) (_values!2050 (_2!1041 lt!24880)) (mask!5963 (_2!1041 lt!24880)) (extraKeys!1950 (_2!1041 lt!24880)) (zeroValue!1981 (_2!1041 lt!24880)) (minValue!1981 (_2!1041 lt!24880)) #b00000000000000000000000000000000 (defaultEntry!2067 (_2!1041 lt!24880))))))

(declare-fun b!62100 () Bool)

(declare-fun e!40779 () Bool)

(declare-fun lt!25787 () ListLongMap!1385)

(assert (=> b!62100 (= e!40779 (= (apply!67 lt!25787 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 (_2!1041 lt!24880))))))

(declare-fun b!62101 () Bool)

(declare-fun e!40771 () Bool)

(assert (=> b!62101 (= e!40774 e!40771)))

(declare-fun res!34128 () Bool)

(declare-fun call!4813 () Bool)

(assert (=> b!62101 (= res!34128 call!4813)))

(assert (=> b!62101 (=> (not res!34128) (not e!40771))))

(declare-fun b!62102 () Bool)

(assert (=> b!62102 (= e!40771 (= (apply!67 lt!25787 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 (_2!1041 lt!24880))))))

(declare-fun b!62103 () Bool)

(declare-fun e!40778 () Bool)

(assert (=> b!62103 (= e!40778 e!40779)))

(declare-fun res!34122 () Bool)

(declare-fun call!4815 () Bool)

(assert (=> b!62103 (= res!34122 call!4815)))

(assert (=> b!62103 (=> (not res!34122) (not e!40779))))

(declare-fun b!62104 () Bool)

(declare-fun c!8269 () Bool)

(assert (=> b!62104 (= c!8269 (and (not (= (bvand (extraKeys!1950 (_2!1041 lt!24880)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 (_2!1041 lt!24880)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40776 () ListLongMap!1385)

(declare-fun e!40767 () ListLongMap!1385)

(assert (=> b!62104 (= e!40776 e!40767)))

(declare-fun b!62105 () Bool)

(declare-fun e!40775 () Bool)

(declare-fun e!40769 () Bool)

(assert (=> b!62105 (= e!40775 e!40769)))

(declare-fun res!34126 () Bool)

(assert (=> b!62105 (=> (not res!34126) (not e!40769))))

(assert (=> b!62105 (= res!34126 (contains!697 lt!25787 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000)))))

(assert (=> b!62105 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))))))

(declare-fun b!62106 () Bool)

(assert (=> b!62106 (= e!40773 e!40778)))

(declare-fun c!8270 () Bool)

(assert (=> b!62106 (= c!8270 (not (= (bvand (extraKeys!1950 (_2!1041 lt!24880)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4808 () Bool)

(assert (=> bm!4808 (= call!4813 (contains!697 lt!25787 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62107 () Bool)

(declare-fun call!4811 () ListLongMap!1385)

(assert (=> b!62107 (= e!40767 call!4811)))

(declare-fun bm!4809 () Bool)

(declare-fun c!8268 () Bool)

(declare-fun c!8266 () Bool)

(declare-fun call!4809 () ListLongMap!1385)

(declare-fun call!4814 () ListLongMap!1385)

(assert (=> bm!4809 (= call!4809 (+!82 (ite c!8266 call!4810 (ite c!8268 call!4812 call!4814)) (ite (or c!8266 c!8268) (tuple2!2061 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (_2!1041 lt!24880))) (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (_2!1041 lt!24880))))))))

(declare-fun b!62108 () Bool)

(declare-fun e!40772 () Bool)

(assert (=> b!62108 (= e!40772 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000)))))

(declare-fun b!62109 () Bool)

(assert (=> b!62109 (= e!40767 call!4814)))

(declare-fun b!62110 () Bool)

(declare-fun e!40768 () Unit!1622)

(declare-fun Unit!1684 () Unit!1622)

(assert (=> b!62110 (= e!40768 Unit!1684)))

(declare-fun bm!4810 () Bool)

(assert (=> bm!4810 (= call!4814 call!4812)))

(declare-fun d!12593 () Bool)

(assert (=> d!12593 e!40773))

(declare-fun res!34129 () Bool)

(assert (=> d!12593 (=> (not res!34129) (not e!40773))))

(assert (=> d!12593 (= res!34129 (or (bvsge #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))))))))

(declare-fun lt!25799 () ListLongMap!1385)

(assert (=> d!12593 (= lt!25787 lt!25799)))

(declare-fun lt!25792 () Unit!1622)

(assert (=> d!12593 (= lt!25792 e!40768)))

(declare-fun c!8267 () Bool)

(declare-fun e!40770 () Bool)

(assert (=> d!12593 (= c!8267 e!40770)))

(declare-fun res!34127 () Bool)

(assert (=> d!12593 (=> (not res!34127) (not e!40770))))

(assert (=> d!12593 (= res!34127 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))))))

(declare-fun e!40777 () ListLongMap!1385)

(assert (=> d!12593 (= lt!25799 e!40777)))

(assert (=> d!12593 (= c!8266 (and (not (= (bvand (extraKeys!1950 (_2!1041 lt!24880)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 (_2!1041 lt!24880)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12593 (validMask!0 (mask!5963 (_2!1041 lt!24880)))))

(assert (=> d!12593 (= (getCurrentListMap!405 (_keys!3695 (_2!1041 lt!24880)) (_values!2050 (_2!1041 lt!24880)) (mask!5963 (_2!1041 lt!24880)) (extraKeys!1950 (_2!1041 lt!24880)) (zeroValue!1981 (_2!1041 lt!24880)) (minValue!1981 (_2!1041 lt!24880)) #b00000000000000000000000000000000 (defaultEntry!2067 (_2!1041 lt!24880))) lt!25787)))

(declare-fun b!62111 () Bool)

(declare-fun lt!25790 () Unit!1622)

(assert (=> b!62111 (= e!40768 lt!25790)))

(declare-fun lt!25793 () ListLongMap!1385)

(assert (=> b!62111 (= lt!25793 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (_2!1041 lt!24880)) (_values!2050 (_2!1041 lt!24880)) (mask!5963 (_2!1041 lt!24880)) (extraKeys!1950 (_2!1041 lt!24880)) (zeroValue!1981 (_2!1041 lt!24880)) (minValue!1981 (_2!1041 lt!24880)) #b00000000000000000000000000000000 (defaultEntry!2067 (_2!1041 lt!24880))))))

(declare-fun lt!25784 () (_ BitVec 64))

(assert (=> b!62111 (= lt!25784 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25785 () (_ BitVec 64))

(assert (=> b!62111 (= lt!25785 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000))))

(declare-fun lt!25800 () Unit!1622)

(assert (=> b!62111 (= lt!25800 (addStillContains!43 lt!25793 lt!25784 (zeroValue!1981 (_2!1041 lt!24880)) lt!25785))))

(assert (=> b!62111 (contains!697 (+!82 lt!25793 (tuple2!2061 lt!25784 (zeroValue!1981 (_2!1041 lt!24880)))) lt!25785)))

(declare-fun lt!25789 () Unit!1622)

(assert (=> b!62111 (= lt!25789 lt!25800)))

(declare-fun lt!25783 () ListLongMap!1385)

(assert (=> b!62111 (= lt!25783 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (_2!1041 lt!24880)) (_values!2050 (_2!1041 lt!24880)) (mask!5963 (_2!1041 lt!24880)) (extraKeys!1950 (_2!1041 lt!24880)) (zeroValue!1981 (_2!1041 lt!24880)) (minValue!1981 (_2!1041 lt!24880)) #b00000000000000000000000000000000 (defaultEntry!2067 (_2!1041 lt!24880))))))

(declare-fun lt!25803 () (_ BitVec 64))

(assert (=> b!62111 (= lt!25803 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25795 () (_ BitVec 64))

(assert (=> b!62111 (= lt!25795 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000))))

(declare-fun lt!25788 () Unit!1622)

(assert (=> b!62111 (= lt!25788 (addApplyDifferent!43 lt!25783 lt!25803 (minValue!1981 (_2!1041 lt!24880)) lt!25795))))

(assert (=> b!62111 (= (apply!67 (+!82 lt!25783 (tuple2!2061 lt!25803 (minValue!1981 (_2!1041 lt!24880)))) lt!25795) (apply!67 lt!25783 lt!25795))))

(declare-fun lt!25801 () Unit!1622)

(assert (=> b!62111 (= lt!25801 lt!25788)))

(declare-fun lt!25798 () ListLongMap!1385)

(assert (=> b!62111 (= lt!25798 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (_2!1041 lt!24880)) (_values!2050 (_2!1041 lt!24880)) (mask!5963 (_2!1041 lt!24880)) (extraKeys!1950 (_2!1041 lt!24880)) (zeroValue!1981 (_2!1041 lt!24880)) (minValue!1981 (_2!1041 lt!24880)) #b00000000000000000000000000000000 (defaultEntry!2067 (_2!1041 lt!24880))))))

(declare-fun lt!25802 () (_ BitVec 64))

(assert (=> b!62111 (= lt!25802 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25796 () (_ BitVec 64))

(assert (=> b!62111 (= lt!25796 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000))))

(declare-fun lt!25786 () Unit!1622)

(assert (=> b!62111 (= lt!25786 (addApplyDifferent!43 lt!25798 lt!25802 (zeroValue!1981 (_2!1041 lt!24880)) lt!25796))))

(assert (=> b!62111 (= (apply!67 (+!82 lt!25798 (tuple2!2061 lt!25802 (zeroValue!1981 (_2!1041 lt!24880)))) lt!25796) (apply!67 lt!25798 lt!25796))))

(declare-fun lt!25794 () Unit!1622)

(assert (=> b!62111 (= lt!25794 lt!25786)))

(declare-fun lt!25804 () ListLongMap!1385)

(assert (=> b!62111 (= lt!25804 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (_2!1041 lt!24880)) (_values!2050 (_2!1041 lt!24880)) (mask!5963 (_2!1041 lt!24880)) (extraKeys!1950 (_2!1041 lt!24880)) (zeroValue!1981 (_2!1041 lt!24880)) (minValue!1981 (_2!1041 lt!24880)) #b00000000000000000000000000000000 (defaultEntry!2067 (_2!1041 lt!24880))))))

(declare-fun lt!25791 () (_ BitVec 64))

(assert (=> b!62111 (= lt!25791 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25797 () (_ BitVec 64))

(assert (=> b!62111 (= lt!25797 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000))))

(assert (=> b!62111 (= lt!25790 (addApplyDifferent!43 lt!25804 lt!25791 (minValue!1981 (_2!1041 lt!24880)) lt!25797))))

(assert (=> b!62111 (= (apply!67 (+!82 lt!25804 (tuple2!2061 lt!25791 (minValue!1981 (_2!1041 lt!24880)))) lt!25797) (apply!67 lt!25804 lt!25797))))

(declare-fun b!62112 () Bool)

(assert (=> b!62112 (= e!40777 (+!82 call!4809 (tuple2!2061 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (_2!1041 lt!24880)))))))

(declare-fun bm!4811 () Bool)

(assert (=> bm!4811 (= call!4811 call!4809)))

(declare-fun b!62113 () Bool)

(assert (=> b!62113 (= e!40778 (not call!4815))))

(declare-fun b!62114 () Bool)

(assert (=> b!62114 (= e!40774 (not call!4813))))

(declare-fun b!62115 () Bool)

(assert (=> b!62115 (= e!40776 call!4811)))

(declare-fun b!62116 () Bool)

(declare-fun res!34130 () Bool)

(assert (=> b!62116 (=> (not res!34130) (not e!40773))))

(assert (=> b!62116 (= res!34130 e!40775)))

(declare-fun res!34124 () Bool)

(assert (=> b!62116 (=> res!34124 e!40775)))

(assert (=> b!62116 (= res!34124 (not e!40772))))

(declare-fun res!34123 () Bool)

(assert (=> b!62116 (=> (not res!34123) (not e!40772))))

(assert (=> b!62116 (= res!34123 (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))))))

(declare-fun b!62117 () Bool)

(assert (=> b!62117 (= e!40769 (= (apply!67 lt!25787 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000)) (get!1090 (select (arr!1793 (_values!2050 (_2!1041 lt!24880))) #b00000000000000000000000000000000) (dynLambda!315 (defaultEntry!2067 (_2!1041 lt!24880)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62117 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_values!2050 (_2!1041 lt!24880)))))))

(assert (=> b!62117 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_keys!3695 (_2!1041 lt!24880)))))))

(declare-fun b!62118 () Bool)

(assert (=> b!62118 (= e!40770 (validKeyInArray!0 (select (arr!1792 (_keys!3695 (_2!1041 lt!24880))) #b00000000000000000000000000000000)))))

(declare-fun b!62119 () Bool)

(assert (=> b!62119 (= e!40777 e!40776)))

(assert (=> b!62119 (= c!8268 (and (not (= (bvand (extraKeys!1950 (_2!1041 lt!24880)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 (_2!1041 lt!24880)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4812 () Bool)

(assert (=> bm!4812 (= call!4815 (contains!697 lt!25787 #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12593 c!8266) b!62112))

(assert (= (and d!12593 (not c!8266)) b!62119))

(assert (= (and b!62119 c!8268) b!62115))

(assert (= (and b!62119 (not c!8268)) b!62104))

(assert (= (and b!62104 c!8269) b!62107))

(assert (= (and b!62104 (not c!8269)) b!62109))

(assert (= (or b!62107 b!62109) bm!4810))

(assert (= (or b!62115 bm!4810) bm!4806))

(assert (= (or b!62115 b!62107) bm!4811))

(assert (= (or b!62112 bm!4806) bm!4807))

(assert (= (or b!62112 bm!4811) bm!4809))

(assert (= (and d!12593 res!34127) b!62118))

(assert (= (and d!12593 c!8267) b!62111))

(assert (= (and d!12593 (not c!8267)) b!62110))

(assert (= (and d!12593 res!34129) b!62116))

(assert (= (and b!62116 res!34123) b!62108))

(assert (= (and b!62116 (not res!34124)) b!62105))

(assert (= (and b!62105 res!34126) b!62117))

(assert (= (and b!62116 res!34130) b!62099))

(assert (= (and b!62099 c!8265) b!62101))

(assert (= (and b!62099 (not c!8265)) b!62114))

(assert (= (and b!62101 res!34128) b!62102))

(assert (= (or b!62101 b!62114) bm!4808))

(assert (= (and b!62099 res!34125) b!62106))

(assert (= (and b!62106 c!8270) b!62103))

(assert (= (and b!62106 (not c!8270)) b!62113))

(assert (= (and b!62103 res!34122) b!62100))

(assert (= (or b!62103 b!62113) bm!4812))

(declare-fun b_lambda!2755 () Bool)

(assert (=> (not b_lambda!2755) (not b!62117)))

(declare-fun tb!1365 () Bool)

(declare-fun t!4849 () Bool)

(assert (=> (and b!60621 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 (_2!1041 lt!24880))) t!4849) tb!1365))

(declare-fun result!2439 () Bool)

(assert (=> tb!1365 (= result!2439 tp_is_empty!2409)))

(assert (=> b!62117 t!4849))

(declare-fun b_and!3789 () Bool)

(assert (= b_and!3785 (and (=> t!4849 result!2439) b_and!3789)))

(declare-fun t!4851 () Bool)

(declare-fun tb!1367 () Bool)

(assert (=> (and b!60620 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (_2!1041 lt!24880))) t!4851) tb!1367))

(declare-fun result!2441 () Bool)

(assert (= result!2441 result!2439))

(assert (=> b!62117 t!4851))

(declare-fun b_and!3791 () Bool)

(assert (= b_and!3787 (and (=> t!4851 result!2441) b_and!3791)))

(assert (=> b!62108 m!54155))

(assert (=> b!62108 m!54155))

(assert (=> b!62108 m!54159))

(declare-fun m!55591 () Bool)

(assert (=> bm!4808 m!55591))

(declare-fun m!55593 () Bool)

(assert (=> bm!4812 m!55593))

(declare-fun m!55595 () Bool)

(assert (=> bm!4809 m!55595))

(assert (=> b!62105 m!54155))

(assert (=> b!62105 m!54155))

(declare-fun m!55597 () Bool)

(assert (=> b!62105 m!55597))

(declare-fun m!55599 () Bool)

(assert (=> bm!4807 m!55599))

(declare-fun m!55601 () Bool)

(assert (=> b!62112 m!55601))

(declare-fun m!55603 () Bool)

(assert (=> b!62100 m!55603))

(assert (=> b!62118 m!54155))

(assert (=> b!62118 m!54155))

(assert (=> b!62118 m!54159))

(assert (=> b!62117 m!54155))

(declare-fun m!55605 () Bool)

(assert (=> b!62117 m!55605))

(assert (=> b!62117 m!54155))

(declare-fun m!55607 () Bool)

(assert (=> b!62117 m!55607))

(declare-fun m!55609 () Bool)

(assert (=> b!62117 m!55609))

(assert (=> b!62117 m!55605))

(assert (=> b!62117 m!55609))

(declare-fun m!55611 () Bool)

(assert (=> b!62117 m!55611))

(declare-fun m!55613 () Bool)

(assert (=> d!12593 m!55613))

(assert (=> b!62111 m!54155))

(declare-fun m!55615 () Bool)

(assert (=> b!62111 m!55615))

(declare-fun m!55617 () Bool)

(assert (=> b!62111 m!55617))

(declare-fun m!55619 () Bool)

(assert (=> b!62111 m!55619))

(declare-fun m!55621 () Bool)

(assert (=> b!62111 m!55621))

(declare-fun m!55623 () Bool)

(assert (=> b!62111 m!55623))

(assert (=> b!62111 m!55599))

(declare-fun m!55625 () Bool)

(assert (=> b!62111 m!55625))

(declare-fun m!55627 () Bool)

(assert (=> b!62111 m!55627))

(assert (=> b!62111 m!55615))

(declare-fun m!55629 () Bool)

(assert (=> b!62111 m!55629))

(declare-fun m!55631 () Bool)

(assert (=> b!62111 m!55631))

(declare-fun m!55633 () Bool)

(assert (=> b!62111 m!55633))

(declare-fun m!55635 () Bool)

(assert (=> b!62111 m!55635))

(declare-fun m!55637 () Bool)

(assert (=> b!62111 m!55637))

(assert (=> b!62111 m!55635))

(declare-fun m!55639 () Bool)

(assert (=> b!62111 m!55639))

(assert (=> b!62111 m!55629))

(assert (=> b!62111 m!55625))

(declare-fun m!55641 () Bool)

(assert (=> b!62111 m!55641))

(declare-fun m!55643 () Bool)

(assert (=> b!62111 m!55643))

(declare-fun m!55645 () Bool)

(assert (=> b!62102 m!55645))

(assert (=> d!12043 d!12593))

(declare-fun b!62121 () Bool)

(declare-fun res!34134 () Bool)

(declare-fun e!40780 () Bool)

(assert (=> b!62121 (=> (not res!34134) (not e!40780))))

(assert (=> b!62121 (= res!34134 (bvsge (size!2027 (_2!1041 lt!24880)) (_size!364 (_2!1041 lt!24880))))))

(declare-fun b!62120 () Bool)

(declare-fun res!34131 () Bool)

(assert (=> b!62120 (=> (not res!34131) (not e!40780))))

(assert (=> b!62120 (= res!34131 (and (= (size!2024 (_values!2050 (_2!1041 lt!24880))) (bvadd (mask!5963 (_2!1041 lt!24880)) #b00000000000000000000000000000001)) (= (size!2023 (_keys!3695 (_2!1041 lt!24880))) (size!2024 (_values!2050 (_2!1041 lt!24880)))) (bvsge (_size!364 (_2!1041 lt!24880)) #b00000000000000000000000000000000) (bvsle (_size!364 (_2!1041 lt!24880)) (bvadd (mask!5963 (_2!1041 lt!24880)) #b00000000000000000000000000000001))))))

(declare-fun b!62122 () Bool)

(declare-fun res!34133 () Bool)

(assert (=> b!62122 (=> (not res!34133) (not e!40780))))

(assert (=> b!62122 (= res!34133 (= (size!2027 (_2!1041 lt!24880)) (bvadd (_size!364 (_2!1041 lt!24880)) (bvsdiv (bvadd (extraKeys!1950 (_2!1041 lt!24880)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!62123 () Bool)

(assert (=> b!62123 (= e!40780 (and (bvsge (extraKeys!1950 (_2!1041 lt!24880)) #b00000000000000000000000000000000) (bvsle (extraKeys!1950 (_2!1041 lt!24880)) #b00000000000000000000000000000011) (bvsge (_vacant!364 (_2!1041 lt!24880)) #b00000000000000000000000000000000)))))

(declare-fun d!12595 () Bool)

(declare-fun res!34132 () Bool)

(assert (=> d!12595 (=> (not res!34132) (not e!40780))))

(assert (=> d!12595 (= res!34132 (validMask!0 (mask!5963 (_2!1041 lt!24880))))))

(assert (=> d!12595 (= (simpleValid!42 (_2!1041 lt!24880)) e!40780)))

(assert (= (and d!12595 res!34132) b!62120))

(assert (= (and b!62120 res!34131) b!62121))

(assert (= (and b!62121 res!34134) b!62122))

(assert (= (and b!62122 res!34133) b!62123))

(declare-fun m!55647 () Bool)

(assert (=> b!62121 m!55647))

(assert (=> b!62122 m!55647))

(assert (=> d!12595 m!55613))

(assert (=> d!11981 d!12595))

(assert (=> b!61192 d!12225))

(declare-fun d!12597 () Bool)

(assert (not d!12597))

(assert (=> b!60950 d!12597))

(declare-fun d!12599 () Bool)

(assert (=> d!12599 (isDefined!78 (getValueByKey!124 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!25805 () Unit!1622)

(assert (=> d!12599 (= lt!25805 (choose!329 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40781 () Bool)

(assert (=> d!12599 e!40781))

(declare-fun res!34135 () Bool)

(assert (=> d!12599 (=> (not res!34135) (not e!40781))))

(assert (=> d!12599 (= res!34135 (isStrictlySorted!280 (toList!708 lt!24948)))))

(assert (=> d!12599 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000) lt!25805)))

(declare-fun b!62124 () Bool)

(assert (=> b!62124 (= e!40781 (containsKey!128 (toList!708 lt!24948) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12599 res!34135) b!62124))

(assert (=> d!12599 m!53681))

(assert (=> d!12599 m!53681))

(assert (=> d!12599 m!53815))

(declare-fun m!55649 () Bool)

(assert (=> d!12599 m!55649))

(assert (=> d!12599 m!55149))

(assert (=> b!62124 m!53811))

(assert (=> b!61185 d!12599))

(assert (=> b!61185 d!12277))

(assert (=> b!61185 d!12279))

(declare-fun d!12601 () Bool)

(assert (=> d!12601 (= (inRange!0 (index!3077 lt!25274) (mask!5963 newMap!16)) (and (bvsge (index!3077 lt!25274) #b00000000000000000000000000000000) (bvslt (index!3077 lt!25274) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!61269 d!12601))

(declare-fun b!62126 () Bool)

(declare-fun e!40782 () Bool)

(assert (=> b!62126 (= e!40782 tp_is_empty!2409)))

(declare-fun mapNonEmpty!2931 () Bool)

(declare-fun mapRes!2931 () Bool)

(declare-fun tp!8097 () Bool)

(declare-fun e!40783 () Bool)

(assert (=> mapNonEmpty!2931 (= mapRes!2931 (and tp!8097 e!40783))))

(declare-fun mapKey!2931 () (_ BitVec 32))

(declare-fun mapRest!2931 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2931 () ValueCell!861)

(assert (=> mapNonEmpty!2931 (= mapRest!2930 (store mapRest!2931 mapKey!2931 mapValue!2931))))

(declare-fun b!62125 () Bool)

(assert (=> b!62125 (= e!40783 tp_is_empty!2409)))

(declare-fun condMapEmpty!2931 () Bool)

(declare-fun mapDefault!2931 () ValueCell!861)

(assert (=> mapNonEmpty!2930 (= condMapEmpty!2931 (= mapRest!2930 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2931)))))

(assert (=> mapNonEmpty!2930 (= tp!8096 (and e!40782 mapRes!2931))))

(declare-fun mapIsEmpty!2931 () Bool)

(assert (=> mapIsEmpty!2931 mapRes!2931))

(assert (= (and mapNonEmpty!2930 condMapEmpty!2931) mapIsEmpty!2931))

(assert (= (and mapNonEmpty!2930 (not condMapEmpty!2931)) mapNonEmpty!2931))

(assert (= (and mapNonEmpty!2931 ((_ is ValueCellFull!861) mapValue!2931)) b!62125))

(assert (= (and mapNonEmpty!2930 ((_ is ValueCellFull!861) mapDefault!2931)) b!62126))

(declare-fun m!55651 () Bool)

(assert (=> mapNonEmpty!2931 m!55651))

(declare-fun b!62128 () Bool)

(declare-fun e!40784 () Bool)

(assert (=> b!62128 (= e!40784 tp_is_empty!2409)))

(declare-fun mapNonEmpty!2932 () Bool)

(declare-fun mapRes!2932 () Bool)

(declare-fun tp!8098 () Bool)

(declare-fun e!40785 () Bool)

(assert (=> mapNonEmpty!2932 (= mapRes!2932 (and tp!8098 e!40785))))

(declare-fun mapKey!2932 () (_ BitVec 32))

(declare-fun mapRest!2932 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2932 () ValueCell!861)

(assert (=> mapNonEmpty!2932 (= mapRest!2929 (store mapRest!2932 mapKey!2932 mapValue!2932))))

(declare-fun b!62127 () Bool)

(assert (=> b!62127 (= e!40785 tp_is_empty!2409)))

(declare-fun condMapEmpty!2932 () Bool)

(declare-fun mapDefault!2932 () ValueCell!861)

(assert (=> mapNonEmpty!2929 (= condMapEmpty!2932 (= mapRest!2929 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2932)))))

(assert (=> mapNonEmpty!2929 (= tp!8095 (and e!40784 mapRes!2932))))

(declare-fun mapIsEmpty!2932 () Bool)

(assert (=> mapIsEmpty!2932 mapRes!2932))

(assert (= (and mapNonEmpty!2929 condMapEmpty!2932) mapIsEmpty!2932))

(assert (= (and mapNonEmpty!2929 (not condMapEmpty!2932)) mapNonEmpty!2932))

(assert (= (and mapNonEmpty!2932 ((_ is ValueCellFull!861) mapValue!2932)) b!62127))

(assert (= (and mapNonEmpty!2929 ((_ is ValueCellFull!861) mapDefault!2932)) b!62128))

(declare-fun m!55653 () Bool)

(assert (=> mapNonEmpty!2932 m!55653))

(declare-fun b_lambda!2757 () Bool)

(assert (= b_lambda!2741 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2757)))

(declare-fun b_lambda!2759 () Bool)

(assert (= b_lambda!2729 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2759)))

(declare-fun b_lambda!2761 () Bool)

(assert (= b_lambda!2727 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2761)))

(declare-fun b_lambda!2763 () Bool)

(assert (= b_lambda!2751 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2763)))

(declare-fun b_lambda!2765 () Bool)

(assert (= b_lambda!2731 (or (and b!60621 b_free!1985) (and b!60620 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))))) b_lambda!2765)))

(declare-fun b_lambda!2767 () Bool)

(assert (= b_lambda!2749 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2767)))

(declare-fun b_lambda!2769 () Bool)

(assert (= b_lambda!2753 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2769)))

(declare-fun b_lambda!2771 () Bool)

(assert (= b_lambda!2735 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2771)))

(declare-fun b_lambda!2773 () Bool)

(assert (= b_lambda!2739 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2773)))

(declare-fun b_lambda!2775 () Bool)

(assert (= b_lambda!2743 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2775)))

(declare-fun b_lambda!2777 () Bool)

(assert (= b_lambda!2733 (or (and b!60621 b_free!1985) (and b!60620 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))))) b_lambda!2777)))

(declare-fun b_lambda!2779 () Bool)

(assert (= b_lambda!2747 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2779)))

(declare-fun b_lambda!2781 () Bool)

(assert (= b_lambda!2745 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2781)))

(declare-fun b_lambda!2783 () Bool)

(assert (= b_lambda!2737 (or (and b!60621 b_free!1985 (= (defaultEntry!2067 (v!2403 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60620 b_free!1987) b_lambda!2783)))

(check-sat (not b!61717) (not b!61399) (not d!12427) (not b!61666) (not d!12439) (not b!61907) (not b!61292) (not b!61529) (not bm!4721) (not b!61283) (not b!61494) (not b!62112) (not d!12467) (not d!12309) (not b!61987) (not b!62066) (not d!12147) (not b!61370) (not b!61572) (not b_lambda!2777) (not b!61588) (not b!61517) (not b!61379) (not b!61659) (not b!61991) (not bm!4766) (not d!12521) (not b!61500) (not b!61349) (not b!61901) (not bm!4779) (not d!12505) (not b!61356) (not d!12267) (not d!12411) (not b!61802) (not b!62087) (not b!61652) (not d!12299) (not bm!4734) (not d!12483) (not b!61933) (not b!61762) (not d!12333) (not d!12465) (not b!61340) (not d!12475) (not d!12455) (not b!61575) (not bm!4742) (not b!61812) (not b!61700) (not bm!4743) (not b!61578) (not b!61707) (not b!62006) (not b!61457) (not d!12215) (not d!12485) (not b!61394) (not b!62016) (not b!62047) (not b!61347) (not b!62018) (not d!12599) (not d!12277) (not d!12289) (not d!12537) (not b!62100) (not bm!4800) (not d!12481) (not d!12373) (not d!12547) (not b!61861) (not b!61679) (not d!12263) (not b_lambda!2761) (not b!61460) (not d!12343) (not bm!4798) (not d!12471) (not b!62075) (not bm!4751) (not b!61795) (not b!61506) (not b!61449) (not d!12143) (not b!61566) (not d!12183) (not b!62011) (not b!61571) (not b!61996) (not d!12583) (not b_lambda!2719) (not bm!4710) (not b!61899) (not b!62036) (not b!62014) (not b!61972) (not b!61891) (not d!12527) (not b!61451) (not b!61334) (not b!61437) (not b!61760) (not d!12463) (not b!61860) (not b!62098) (not b!61520) (not d!12169) (not b!61423) (not b!61499) (not d!12191) (not bm!4736) (not bm!4732) (not d!12203) (not bm!4796) (not d!12591) (not bm!4761) (not b!61609) (not b!61951) (not b_lambda!2771) (not b!61556) (not d!12319) (not b!61586) (not d!12595) (not b_lambda!2717) (not b!61911) (not b_lambda!2779) (not b!61482) (not b!61657) (not b!61922) (not bm!4718) (not b!62001) (not b!61579) (not d!12497) (not b!61598) (not b!62097) (not bm!4759) (not b!62033) (not b!61727) (not b_lambda!2765) (not b!61621) (not b!61916) (not b!61767) (not d!12221) (not b!61628) (not d!12287) (not b!61345) b_and!3789 (not b!61798) (not b!61412) (not b_lambda!2775) (not b!61577) (not b!61393) (not d!12581) (not b!61603) (not d!12181) (not b!61346) (not d!12179) (not b!61888) (not bm!4782) (not b!61548) (not b!61646) (not b!61424) (not b!61625) (not b!61580) (not b!61780) (not b!61524) (not b_lambda!2721) (not b!61484) (not d!12307) (not b!61510) (not bm!4801) (not b!61465) (not b!61819) (not b!61720) (not d!12459) (not d!12193) (not b_lambda!2773) (not b!61963) (not bm!4728) (not d!12311) (not b!61516) (not b!61495) (not b!61774) (not d!12141) (not b!62121) (not d!12593) (not b!61948) (not b!61530) (not d!12093) (not b!61456) (not b!61937) (not b!61391) (not b!61563) (not b!61546) (not d!12501) (not b!61353) (not d!12329) (not b!61835) (not b_lambda!2755) (not b_next!1985) (not d!12325) (not d!12187) (not b!61527) (not d!12127) (not d!12125) (not b!62039) (not b_lambda!2763) (not b!62102) (not d!12589) (not b!61843) (not b!61362) (not b!61297) (not d!12587) (not b!61908) (not b!61673) (not d!12487) (not b!61783) (not b!61309) (not b!61584) (not d!12177) (not b!61732) (not d!12397) (not b!62093) (not d!12503) (not b!62086) (not b!61285) (not b!61975) (not bm!4730) (not b!61640) (not d!12259) (not b!61453) (not b!61435) (not b!61941) (not b!61561) (not d!12213) (not b_lambda!2725) (not d!12529) (not b!61837) (not d!12513) (not b!61955) (not b!61824) (not b!61454) (not d!12479) (not b!62044) (not d!12237) (not d!12353) (not b!61352) (not b!62096) (not d!12495) (not b!61544) (not b!61703) (not b!61545) (not bm!4809) (not d!12367) (not d!12517) (not b!61663) (not d!12239) (not b!61714) (not d!12405) (not b_next!1987) (not d!12391) (not b!62034) (not b!61519) (not b!61779) (not b!61728) (not b!61841) (not b!61286) (not d!12477) (not b!61606) (not b!61568) (not bm!4724) (not b!61433) (not b!61761) (not b!61641) (not d!12089) (not b!61388) (not b!61960) (not d!12205) (not d!12437) (not d!12291) (not b!61952) (not b!61631) (not b!61534) (not d!12207) (not d!12335) (not b!61981) (not b!61559) (not b!61310) (not b!61552) (not d!12563) (not d!12295) (not d!12255) (not d!12561) (not b!61890) (not b!62012) (not b!61939) (not b!62083) (not b!61511) (not d!12389) (not b!61934) (not b!61730) (not b!61792) (not b!61522) (not bm!4776) (not bm!4777) (not b!61440) (not b!61716) (not b_lambda!2767) (not b!61790) (not d!12447) (not b!61909) (not b!62007) (not b!61678) (not bm!4791) (not b!61623) (not d!12283) (not b!61503) (not b!61825) (not b!61367) (not b!61845) (not d!12539) (not b!61769) (not b!61850) (not d!12473) (not b!61839) (not b!61351) (not d!12101) (not b!61404) (not bm!4793) (not d!12345) (not b!61360) (not b!61287) (not b!61401) (not b!61829) (not d!12541) (not b!62050) (not b!62105) (not d!12349) (not b!62122) (not b!61490) (not b!61994) (not b!61540) (not d!12515) (not b!61842) (not b!61498) (not d!12415) (not b!62045) (not b!62080) (not bm!4792) (not d!12119) (not b!61369) (not b!62037) (not b!61364) (not b!61897) (not d!12331) (not b!61764) (not bm!4781) (not b!61807) (not b!61855) (not b!61973) (not b!61672) (not b!61906) (not b!61463) (not b!61643) (not b!61957) (not b!62077) b_and!3791 (not d!12551) (not b!61719) (not b!61462) (not d!12249) (not bm!4750) (not d!12281) (not b!61986) (not b!61886) (not d!12565) (not b!61581) (not b!61966) (not bm!4812) (not b!62124) (not bm!4737) (not b!61471) (not d!12379) (not d!12113) (not d!12573) (not b!61493) (not b!62027) (not b!61573) (not bm!4756) (not d!12519) (not d!12121) (not b!61905) (not b_lambda!2723) (not b!61822) (not d!12109) (not mapNonEmpty!2931) (not b!61635) (not b!61343) (not b!62073) (not b!61596) (not b!62092) (not d!12375) (not b!61397) (not b!61978) (not d!12365) (not b!61447) (not b!61421) (not d!12261) (not b!62055) (not d!12461) (not d!12323) (not b!62063) (not b!61300) (not b!61989) (not b!61713) tp_is_empty!2409 (not b!61374) (not b!61977) (not b!61810) (not b!61851) (not b!61298) (not b!62118) (not b!61634) (not b!62028) (not b_lambda!2781) (not d!12087) (not d!12139) (not d!12327) (not b!62043) (not bm!4788) (not d!12523) (not b!61984) (not b!62041) (not d!12441) (not b!61542) (not bm!4735) (not d!12347) (not bm!4760) (not b!61927) (not b!62056) (not d!12491) (not bm!4783) (not b!61942) (not b!61983) (not b!61917) (not b!62021) (not d!12545) (not b!61443) (not bm!4739) (not d!12421) (not bm!4746) (not b!62111) (not b!61815) (not d!12293) (not d!12185) (not b_lambda!2769) (not d!12163) (not bm!4754) (not d!12553) (not b!61428) (not bm!4723) (not bm!4770) (not b!61928) (not b!61997) (not b!61380) (not b!61600) (not b!61448) (not d!12425) (not b!61444) (not d!12305) (not d!12339) (not d!12135) (not b!61418) (not d!12209) (not d!12115) (not bm!4805) (not b!61466) (not b!61918) (not b!62070) (not b!61834) (not b!61539) (not d!12201) (not bm!4741) (not b_lambda!2701) (not b!61303) (not b!61817) (not b!62024) (not d!12149) (not b!62072) (not b!61925) (not b!61478) (not d!12531) (not b!62053) (not bm!4726) (not b!61434) (not b!61464) (not d!12569) (not b!61932) (not d!12303) (not b_lambda!2759) (not d!12585) (not b!61442) (not b!61469) (not b!61929) (not b!61290) (not b!61808) (not d!12219) (not d!12499) (not b!61711) (not bm!4747) (not d!12301) (not bm!4764) (not d!12217) (not b!61438) (not d!12507) (not b!61787) (not b!61923) (not d!12297) (not b!61649) (not d!12341) (not d!12533) (not d!12241) (not bm!4807) (not b!61508) (not bm!4749) (not d!12235) (not b!61650) (not b!61619) (not b!61902) (not b!61504) (not bm!4738) (not d!12433) (not d!12197) (not b!61669) (not b!61416) (not d!12211) (not d!12469) (not b!61339) (not d!12493) (not d!12399) (not b_lambda!2705) (not b!61721) (not b!61486) (not d!12247) (not bm!4768) (not b!61801) (not b_lambda!2757) (not d!12157) (not b!61562) (not b!61452) (not d!12489) (not d!12173) (not b!61644) (not b!61953) (not bm!4786) (not d!12123) (not b!61474) (not b!61342) (not b!61560) (not b!61967) (not b!61920) (not bm!4797) (not d!12199) (not b!61759) (not b!61848) (not d!12165) (not d!12525) (not b!61509) (not d!12385) (not d!12189) (not b!61976) (not d!12383) (not b!61938) (not bm!4802) (not b!61943) (not b!61592) (not d!12195) (not d!12511) (not b!61411) (not b!61383) (not b!61385) (not b!61497) (not b!61467) (not b!61770) (not bm!4729) (not b!61904) (not d!12269) (not b!61979) (not d!12509) (not b_lambda!2783) (not b!62009) (not b!62108) (not b!62051) (not b!61618) (not b!61567) (not b!61648) (not b!61682) (not d!12285) (not bm!4778) (not d!12251) (not d!12443) (not b!61570) (not bm!4808) (not b!61489) (not b!61936) (not d!12403) (not b!61514) (not mapNonEmpty!2932) (not b!61661) (not b!62117) (not d!12103))
(check-sat b_and!3789 b_and!3791 (not b_next!1985) (not b_next!1987))
