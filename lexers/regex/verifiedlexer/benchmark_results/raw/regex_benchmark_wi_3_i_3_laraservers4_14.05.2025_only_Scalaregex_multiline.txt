copying runtime jar...
[info] welcome to sbt 1.9.8 (Ubuntu Java 17.0.15)
[info] loading settings for project verifiedlexer-build from plugins.sbt ...
[info] loading project definition from /localhome/chassot/bolts/lexers/regex/verifiedlexer/project
[info] loading settings for project verifiedlexer from build.sbt ...
[info] set current project to VerifiedLexer (in build file:/localhome/chassot/bolts/lexers/regex/verifiedlexer/)
[info] compiling 61 Scala sources to /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/classes ...
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/Utils.scala:1080:4 
[warn] 1080 |    newList match {
[warn]      |    ^^^^^^^
[warn]      |    match may not be exhaustive.
[warn]      |
[warn]      |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]      |
[warn]      | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedLexer.scala:195:10 
[warn] 195 |          maxPrefWithoutSep match {
[warn]     |          ^^^^^^^^^^^^^^^^^
[warn]     |          match may not be exhaustive.
[warn]     |
[warn]     |          It would fail on pattern case: stainless.lang.Some(_)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedLexer.scala:224:45 
[warn] 224 |      val ret: Option[(Token[C], List[C])] = rulesArg match {
[warn]     |                                             ^^^^^^^^
[warn]     |             match may not be exhaustive.
[warn]     |
[warn]     |             It would fail on pattern case: stainless.collection.Nil()
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedLexer.scala:261:45 
[warn] 261 |      val ret: Option[(Token[C], List[C])] = rulesArg match {
[warn]     |                                             ^^^^^^^^
[warn]     |             match may not be exhaustive.
[warn]     |
[warn]     |             It would fail on pattern case: stainless.collection.Nil()
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedLexer.scala:824:6 
[warn] 824 |      rules match {
[warn]     |      ^^^^^
[warn]     |      match may not be exhaustive.
[warn]     |
[warn]     |      It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedLexer.scala:1936:6 
[warn] 1936 |      l1 match {
[warn]      |      ^^
[warn]      |match may not be exhaustive.
[warn]      |
[warn]      |It would fail on pattern case: _: stainless.collection.List[ch.epfl.lexer.Token[C]]
[warn]      |
[warn]      | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedRegex.scala:337:4 
[warn] 337 |    r match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: Concat(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:157:4 
[warn] 157 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:191:4 
[warn] 191 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:206:4 
[warn] 206 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:222:4 
[warn] 222 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:243:4 
[warn] 243 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:274:4 
[warn] 274 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListMap.scala:195:4 
[warn] 195 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListMap.scala:229:4 
[warn] 229 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListMap.scala:256:4 
[warn] 256 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListMap.scala:308:4 
[warn] 308 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListMap.scala:380:4 
[warn] 380 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/MutableLongMap.scala:347:4 
[warn] 347 |    c match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: EmptyCell()
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/MutableLongMap.scala:596:8 
[warn] 596 |        seekEntryRes match {
[warn]     |        ^^^^^^^^^^^^
[warn]     |match may not be exhaustive.
[warn]     |
[warn]     |It would fail on pattern case: ch.epfl.map.MutableLongMap.Intermediate(_, _, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/MutableLongMap.scala:1106:6 
[warn] 1106 |      intermediate match {
[warn]      |      ^^^^^^^^^^^^
[warn]      |match may not be exhaustive.
[warn]      |
[warn]      |It would fail on pattern case: _: ch.epfl.map.MutableLongMap.SeekEntryResult
[warn]      |
[warn]      | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/MutableLongMap.scala:1156:6 
[warn] 1156 |      intermediate match {
[warn]      |      ^^^^^^^^^^^^
[warn]      |match may not be exhaustive.
[warn]      |
[warn]      |It would fail on pattern case: _: ch.epfl.map.MutableLongMap.SeekEntryResult
[warn]      |
[warn]      | longer explanation available when compiling with `-explain`
[warn] 22 warnings found
[info] done compiling
[info] running org.openjdk.jmh.generators.bytecode.JmhBytecodeGenerator /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/classes /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/src_managed/jmh /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/resource_managed/jmh default
Processing 1003 classes from /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/classes with "reflection" generator
Writing out Java source to /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/src_managed/jmh and resources to /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/resource_managed/jmh
[info] compiling 58 Java sources to /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/classes ...
[info] done compiling
[info] running (fork) org.openjdk.jmh.Main -i 3 -wi 3 -f1 -t1 ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 5)
[info] # Run progress: 0.00% complete, ETA 00:25:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.165 us/op
[info] # Warmup Iteration   2: 0.148 us/op
[info] # Warmup Iteration   3: 0.145 us/op
[info] Iteration   1: 0.145 us/op
[info] Iteration   2: 0.147 us/op
[info] Iteration   3: 0.144 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   0.145 ±(99.9%) 0.020 us/op [Average]
[info]   (min, avg, max) = (0.144, 0.145, 0.147), stdev = 0.001
[info]   CI (99.9%): [0.126, 0.165] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 10)
[info] # Run progress: 4.00% complete, ETA 00:24:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.250 us/op
[info] # Warmup Iteration   2: 0.230 us/op
[info] # Warmup Iteration   3: 0.233 us/op
[info] Iteration   1: 0.229 us/op
[info] Iteration   2: 0.227 us/op
[info] Iteration   3: 0.227 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   0.228 ±(99.9%) 0.019 us/op [Average]
[info]   (min, avg, max) = (0.227, 0.228, 0.229), stdev = 0.001
[info]   CI (99.9%): [0.208, 0.247] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 15)
[info] # Run progress: 8.00% complete, ETA 00:23:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.352 us/op
[info] # Warmup Iteration   2: 0.322 us/op
[info] # Warmup Iteration   3: 0.325 us/op
[info] Iteration   1: 0.316 us/op
[info] Iteration   2: 0.324 us/op
[info] Iteration   3: 0.314 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   0.318 ±(99.9%) 0.092 us/op [Average]
[info]   (min, avg, max) = (0.314, 0.318, 0.324), stdev = 0.005
[info]   CI (99.9%): [0.226, 0.410] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 20)
[info] # Run progress: 12.00% complete, ETA 00:22:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.508 us/op
[info] # Warmup Iteration   2: 0.475 us/op
[info] # Warmup Iteration   3: 0.466 us/op
[info] Iteration   1: 0.470 us/op
[info] Iteration   2: 0.470 us/op
[info] Iteration   3: 0.467 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   0.469 ±(99.9%) 0.031 us/op [Average]
[info]   (min, avg, max) = (0.467, 0.469, 0.470), stdev = 0.002
[info]   CI (99.9%): [0.438, 0.500] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 25)
[info] # Run progress: 16.00% complete, ETA 00:21:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.540 us/op
[info] # Warmup Iteration   2: 0.507 us/op
[info] # Warmup Iteration   3: 0.496 us/op
[info] Iteration   1: 0.509 us/op
[info] Iteration   2: 0.493 us/op
[info] Iteration   3: 0.493 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   0.498 ±(99.9%) 0.161 us/op [Average]
[info]   (min, avg, max) = (0.493, 0.498, 0.509), stdev = 0.009
[info]   CI (99.9%): [0.337, 0.659] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 30)
[info] # Run progress: 20.00% complete, ETA 00:20:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.782 us/op
[info] # Warmup Iteration   2: 0.740 us/op
[info] # Warmup Iteration   3: 0.737 us/op
[info] Iteration   1: 0.727 us/op
[info] Iteration   2: 0.711 us/op
[info] Iteration   3: 0.711 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   0.716 ±(99.9%) 0.163 us/op [Average]
[info]   (min, avg, max) = (0.711, 0.716, 0.727), stdev = 0.009
[info]   CI (99.9%): [0.553, 0.879] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 35)
[info] # Run progress: 24.00% complete, ETA 00:19:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.975 us/op
[info] # Warmup Iteration   2: 0.933 us/op
[info] # Warmup Iteration   3: 0.924 us/op
[info] Iteration   1: 0.892 us/op
[info] Iteration   2: 0.891 us/op
[info] Iteration   3: 0.891 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   0.891 ±(99.9%) 0.013 us/op [Average]
[info]   (min, avg, max) = (0.891, 0.891, 0.892), stdev = 0.001
[info]   CI (99.9%): [0.878, 0.904] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 40)
[info] # Run progress: 28.00% complete, ETA 00:18:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.871 us/op
[info] # Warmup Iteration   2: 0.814 us/op
[info] # Warmup Iteration   3: 0.780 us/op
[info] Iteration   1: 0.794 us/op
[info] Iteration   2: 0.794 us/op
[info] Iteration   3: 0.781 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   0.790 ±(99.9%) 0.141 us/op [Average]
[info]   (min, avg, max) = (0.781, 0.790, 0.794), stdev = 0.008
[info]   CI (99.9%): [0.649, 0.930] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 45)
[info] # Run progress: 32.00% complete, ETA 00:17:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1.172 us/op
[info] # Warmup Iteration   2: 1.119 us/op
[info] # Warmup Iteration   3: 1.121 us/op
[info] Iteration   1: 1.086 us/op
[info] Iteration   2: 1.086 us/op
[info] Iteration   3: 1.104 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   1.092 ±(99.9%) 0.190 us/op [Average]
[info]   (min, avg, max) = (1.086, 1.092, 1.104), stdev = 0.010
[info]   CI (99.9%): [0.902, 1.282] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 50)
[info] # Run progress: 36.00% complete, ETA 00:16:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1.086 us/op
[info] # Warmup Iteration   2: 1.013 us/op
[info] # Warmup Iteration   3: 1.004 us/op
[info] Iteration   1: 0.994 us/op
[info] Iteration   2: 0.983 us/op
[info] Iteration   3: 0.985 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   0.987 ±(99.9%) 0.106 us/op [Average]
[info]   (min, avg, max) = (0.983, 0.987, 0.994), stdev = 0.006
[info]   CI (99.9%): [0.881, 1.093] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 55)
[info] # Run progress: 40.00% complete, ETA 00:15:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1.448 us/op
[info] # Warmup Iteration   2: 1.452 us/op
[info] # Warmup Iteration   3: 1.397 us/op
[info] Iteration   1: 1.411 us/op
[info] Iteration   2: 1.368 us/op
[info] Iteration   3: 1.381 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   1.387 ±(99.9%) 0.403 us/op [Average]
[info]   (min, avg, max) = (1.368, 1.387, 1.411), stdev = 0.022
[info]   CI (99.9%): [0.984, 1.790] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 60)
[info] # Run progress: 44.00% complete, ETA 00:14:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1.633 us/op
[info] # Warmup Iteration   2: 1.528 us/op
[info] # Warmup Iteration   3: 1.503 us/op
[info] Iteration   1: 1.513 us/op
[info] Iteration   2: 1.509 us/op
[info] Iteration   3: 1.497 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   1.507 ±(99.9%) 0.150 us/op [Average]
[info]   (min, avg, max) = (1.497, 1.507, 1.513), stdev = 0.008
[info]   CI (99.9%): [1.357, 1.656] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 65)
[info] # Run progress: 48.00% complete, ETA 00:13:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1.676 us/op
[info] # Warmup Iteration   2: 1.547 us/op
[info] # Warmup Iteration   3: 1.549 us/op
[info] Iteration   1: 1.460 us/op
[info] Iteration   2: 1.534 us/op
[info] Iteration   3: 1.485 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   1.493 ±(99.9%) 0.690 us/op [Average]
[info]   (min, avg, max) = (1.460, 1.493, 1.534), stdev = 0.038
[info]   CI (99.9%): [0.803, 2.183] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 70)
[info] # Run progress: 52.00% complete, ETA 00:12:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1.898 us/op
[info] # Warmup Iteration   2: 1.758 us/op
[info] # Warmup Iteration   3: 1.738 us/op
[info] Iteration   1: 1.752 us/op
[info] Iteration   2: 1.796 us/op
[info] Iteration   3: 1.719 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   1.756 ±(99.9%) 0.703 us/op [Average]
[info]   (min, avg, max) = (1.719, 1.756, 1.796), stdev = 0.039
[info]   CI (99.9%): [1.053, 2.459] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 75)
[info] # Run progress: 56.00% complete, ETA 00:11:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1.676 us/op
[info] # Warmup Iteration   2: 2.058 us/op
[info] # Warmup Iteration   3: 2.034 us/op
[info] Iteration   1: 2.009 us/op
[info] Iteration   2: 2.027 us/op
[info] Iteration   3: 1.989 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   2.008 ±(99.9%) 0.348 us/op [Average]
[info]   (min, avg, max) = (1.989, 2.008, 2.027), stdev = 0.019
[info]   CI (99.9%): [1.660, 2.356] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 80)
[info] # Run progress: 60.00% complete, ETA 00:10:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1.707 us/op
[info] # Warmup Iteration   2: 1.606 us/op
[info] # Warmup Iteration   3: 1.599 us/op
[info] Iteration   1: 1.550 us/op
[info] Iteration   2: 1.573 us/op
[info] Iteration   3: 1.596 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   1.573 ±(99.9%) 0.413 us/op [Average]
[info]   (min, avg, max) = (1.550, 1.573, 1.596), stdev = 0.023
[info]   CI (99.9%): [1.160, 1.986] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 85)
[info] # Run progress: 64.00% complete, ETA 00:09:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2.686 us/op
[info] # Warmup Iteration   2: 2.486 us/op
[info] # Warmup Iteration   3: 2.486 us/op
[info] Iteration   1: 2.475 us/op
[info] Iteration   2: 2.522 us/op
[info] Iteration   3: 2.492 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   2.496 ±(99.9%) 0.436 us/op [Average]
[info]   (min, avg, max) = (2.475, 2.496, 2.522), stdev = 0.024
[info]   CI (99.9%): [2.061, 2.932] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 90)
[info] # Run progress: 68.00% complete, ETA 00:08:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1.907 us/op
[info] # Warmup Iteration   2: 1.759 us/op
[info] # Warmup Iteration   3: 1.739 us/op
[info] Iteration   1: 1.759 us/op
[info] Iteration   2: 1.743 us/op
[info] Iteration   3: 1.735 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   1.745 ±(99.9%) 0.223 us/op [Average]
[info]   (min, avg, max) = (1.735, 1.745, 1.759), stdev = 0.012
[info]   CI (99.9%): [1.522, 1.969] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 95)
[info] # Run progress: 72.00% complete, ETA 00:07:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2.746 us/op
[info] # Warmup Iteration   2: 2.540 us/op
[info] # Warmup Iteration   3: 2.523 us/op
[info] Iteration   1: 2.554 us/op
[info] Iteration   2: 2.507 us/op
[info] Iteration   3: 2.500 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   2.520 ±(99.9%) 0.536 us/op [Average]
[info]   (min, avg, max) = (2.500, 2.520, 2.554), stdev = 0.029
[info]   CI (99.9%): [1.984, 3.056] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 100)
[info] # Run progress: 76.00% complete, ETA 00:06:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3.446 us/op
[info] # Warmup Iteration   2: 3.265 us/op
[info] # Warmup Iteration   3: 3.242 us/op
[info] Iteration   1: 3.262 us/op
[info] Iteration   2: 3.237 us/op
[info] Iteration   3: 3.221 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   3.240 ±(99.9%) 0.374 us/op [Average]
[info]   (min, avg, max) = (3.221, 3.240, 3.262), stdev = 0.020
[info]   CI (99.9%): [2.866, 3.613] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 110)
[info] # Run progress: 80.00% complete, ETA 00:05:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2.812 us/op
[info] # Warmup Iteration   2: 2.710 us/op
[info] # Warmup Iteration   3: 2.586 us/op
[info] Iteration   1: 2.504 us/op
[info] Iteration   2: 2.497 us/op
[info] Iteration   3: 2.560 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   2.520 ±(99.9%) 0.636 us/op [Average]
[info]   (min, avg, max) = (2.497, 2.520, 2.560), stdev = 0.035
[info]   CI (99.9%): [1.885, 3.156] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 120)
[info] # Run progress: 84.00% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3.361 us/op
[info] # Warmup Iteration   2: 3.163 us/op
[info] # Warmup Iteration   3: 3.189 us/op
[info] Iteration   1: 3.128 us/op
[info] Iteration   2: 3.099 us/op
[info] Iteration   3: 3.058 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   3.095 ±(99.9%) 0.639 us/op [Average]
[info]   (min, avg, max) = (3.058, 3.095, 3.128), stdev = 0.035
[info]   CI (99.9%): [2.456, 3.734] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 130)
[info] # Run progress: 88.00% complete, ETA 00:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3.227 us/op
[info] # Warmup Iteration   2: 3.034 us/op
[info] # Warmup Iteration   3: 3.017 us/op
[info] Iteration   1: 3.048 us/op
[info] Iteration   2: 2.971 us/op
[info] Iteration   3: 2.952 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   2.990 ±(99.9%) 0.927 us/op [Average]
[info]   (min, avg, max) = (2.952, 2.990, 3.048), stdev = 0.051
[info]   CI (99.9%): [2.064, 3.917] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 140)
[info] # Run progress: 92.00% complete, ETA 00:02:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3.550 us/op
[info] # Warmup Iteration   2: 3.356 us/op
[info] # Warmup Iteration   3: 3.414 us/op
[info] Iteration   1: 3.397 us/op
[info] Iteration   2: 3.340 us/op
[info] Iteration   3: 3.458 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   3.398 ±(99.9%) 1.075 us/op [Average]
[info]   (min, avg, max) = (3.340, 3.398, 3.458), stdev = 0.059
[info]   CI (99.9%): [2.323, 4.473] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 150)
[info] # Run progress: 96.00% complete, ETA 00:01:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4.007 us/op
[info] # Warmup Iteration   2: 3.865 us/op
[info] # Warmup Iteration   3: 3.858 us/op
[info] Iteration   1: 3.716 us/op
[info] Iteration   2: 3.559 us/op
[info] Iteration   3: 3.713 us/op
[info] Result "ch.epfl.lexer.benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline":
[info]   3.663 ±(99.9%) 1.645 us/op [Average]
[info]   (min, avg, max) = (3.559, 3.663, 3.716), stdev = 0.090
[info]   CI (99.9%): [2.017, 5.308] (assumes normal distribution)
[info] # Run complete. Total time: 00:25:07
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                  (size)  Mode  Cnt  Score   Error  Units
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline       5  avgt    3  0.145 ± 0.020  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      10  avgt    3  0.228 ± 0.019  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      15  avgt    3  0.318 ± 0.092  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      20  avgt    3  0.469 ± 0.031  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      25  avgt    3  0.498 ± 0.161  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      30  avgt    3  0.716 ± 0.163  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      35  avgt    3  0.891 ± 0.013  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      40  avgt    3  0.790 ± 0.141  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      45  avgt    3  1.092 ± 0.190  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      50  avgt    3  0.987 ± 0.106  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      55  avgt    3  1.387 ± 0.403  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      60  avgt    3  1.507 ± 0.150  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      65  avgt    3  1.493 ± 0.690  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      70  avgt    3  1.756 ± 0.703  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      75  avgt    3  2.008 ± 0.348  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      80  avgt    3  1.573 ± 0.413  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      85  avgt    3  2.496 ± 0.436  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      90  avgt    3  1.745 ± 0.223  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline      95  avgt    3  2.520 ± 0.536  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline     100  avgt    3  3.240 ± 0.374  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline     110  avgt    3  2.520 ± 0.636  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline     120  avgt    3  3.095 ± 0.639  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline     130  avgt    3  2.990 ± 0.927  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline     140  avgt    3  3.398 ± 1.075  us/op
[info] LexerRegexBenchmark.commentAccepting_scalaRegex_multiline     150  avgt    3  3.663 ± 1.645  us/op
[success] Total time: 1524 s (25:24), completed May 14, 2025, 8:27:42 AM
