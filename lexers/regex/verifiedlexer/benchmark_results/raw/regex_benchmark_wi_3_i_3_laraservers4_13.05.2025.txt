copying runtime jar...
[info] welcome to sbt 1.9.8 (Ubuntu Java 17.0.15)
[info] loading settings for project verifiedlexer-build from plugins.sbt ...
[info] loading project definition from /localhome/chassot/bolts/lexers/regex/verifiedlexer/project
[info] loading settings for project verifiedlexer from build.sbt ...
[info] set current project to VerifiedLexer (in build file:/localhome/chassot/bolts/lexers/regex/verifiedlexer/)
[info] compiling 61 Scala sources to /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/classes ...
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/Utils.scala:1080:4 
[warn] 1080 |    newList match {
[warn]      |    ^^^^^^^
[warn]      |    match may not be exhaustive.
[warn]      |
[warn]      |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]      |
[warn]      | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedLexer.scala:195:10 
[warn] 195 |          maxPrefWithoutSep match {
[warn]     |          ^^^^^^^^^^^^^^^^^
[warn]     |          match may not be exhaustive.
[warn]     |
[warn]     |          It would fail on pattern case: stainless.lang.Some(_)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedLexer.scala:224:45 
[warn] 224 |      val ret: Option[(Token[C], List[C])] = rulesArg match {
[warn]     |                                             ^^^^^^^^
[warn]     |             match may not be exhaustive.
[warn]     |
[warn]     |             It would fail on pattern case: stainless.collection.Nil()
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedLexer.scala:261:45 
[warn] 261 |      val ret: Option[(Token[C], List[C])] = rulesArg match {
[warn]     |                                             ^^^^^^^^
[warn]     |             match may not be exhaustive.
[warn]     |
[warn]     |             It would fail on pattern case: stainless.collection.Nil()
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedLexer.scala:824:6 
[warn] 824 |      rules match {
[warn]     |      ^^^^^
[warn]     |      match may not be exhaustive.
[warn]     |
[warn]     |      It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedLexer.scala:1936:6 
[warn] 1936 |      l1 match {
[warn]      |      ^^
[warn]      |match may not be exhaustive.
[warn]      |
[warn]      |It would fail on pattern case: _: stainless.collection.List[ch.epfl.lexer.Token[C]]
[warn]      |
[warn]      | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/lexer/VerifiedRegex.scala:337:4 
[warn] 337 |    r match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: Concat(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:157:4 
[warn] 157 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:191:4 
[warn] 191 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:206:4 
[warn] 206 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:222:4 
[warn] 222 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:243:4 
[warn] 243 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListLongMap.scala:274:4 
[warn] 274 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListMap.scala:195:4 
[warn] 195 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListMap.scala:229:4 
[warn] 229 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListMap.scala:256:4 
[warn] 256 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListMap.scala:308:4 
[warn] 308 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/ListMap.scala:380:4 
[warn] 380 |    l match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: stainless.collection.Cons(_, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/MutableLongMap.scala:347:4 
[warn] 347 |    c match {
[warn]     |    ^
[warn]     |    match may not be exhaustive.
[warn]     |
[warn]     |    It would fail on pattern case: EmptyCell()
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/MutableLongMap.scala:596:8 
[warn] 596 |        seekEntryRes match {
[warn]     |        ^^^^^^^^^^^^
[warn]     |match may not be exhaustive.
[warn]     |
[warn]     |It would fail on pattern case: ch.epfl.map.MutableLongMap.Intermediate(_, _, _)
[warn]     |
[warn]     | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/MutableLongMap.scala:1106:6 
[warn] 1106 |      intermediate match {
[warn]      |      ^^^^^^^^^^^^
[warn]      |match may not be exhaustive.
[warn]      |
[warn]      |It would fail on pattern case: _: ch.epfl.map.MutableLongMap.SeekEntryResult
[warn]      |
[warn]      | longer explanation available when compiling with `-explain`
[warn] -- [E029] Pattern Match Exhaustivity Warning: /localhome/chassot/bolts/lexers/regex/verifiedlexer/src/main/scala/ch/epfl/map/MutableLongMap.scala:1156:6 
[warn] 1156 |      intermediate match {
[warn]      |      ^^^^^^^^^^^^
[warn]      |match may not be exhaustive.
[warn]      |
[warn]      |It would fail on pattern case: _: ch.epfl.map.MutableLongMap.SeekEntryResult
[warn]      |
[warn]      | longer explanation available when compiling with `-explain`
[warn] 22 warnings found
[info] done compiling
[info] running org.openjdk.jmh.generators.bytecode.JmhBytecodeGenerator /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/classes /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/src_managed/jmh /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/resource_managed/jmh default
Processing 1003 classes from /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/classes with "reflection" generator
Writing out Java source to /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/src_managed/jmh and resources to /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/resource_managed/jmh
[info] compiling 43 Java sources to /localhome/chassot/bolts/lexers/regex/verifiedlexer/target/scala-3.5.2/classes ...
[info] done compiling
[info] running (fork) org.openjdk.jmh.Main -i 3 -wi 3 -f1 -t1 benchmark.LexerRegexBenchmark.*
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 5)
[info] # Run progress: 0.00% complete, ETA 02:30:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7.092 us/op
[info] # Warmup Iteration   2: 6.108 us/op
[info] # Warmup Iteration   3: 6.159 us/op
[info] Iteration   1: 6.106 us/op
[info] Iteration   2: 6.090 us/op
[info] Iteration   3: 6.116 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   6.104 ±(99.9%) 0.233 us/op [Average]
[info]   (min, avg, max) = (6.090, 6.104, 6.116), stdev = 0.013
[info]   CI (99.9%): [5.871, 6.336] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 10)
[info] # Run progress: 0.67% complete, ETA 02:29:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43.055 us/op
[info] # Warmup Iteration   2: 37.148 us/op
[info] # Warmup Iteration   3: 37.562 us/op
[info] Iteration   1: 36.984 us/op
[info] Iteration   2: 37.352 us/op
[info] Iteration   3: 36.132 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   36.823 ±(99.9%) 11.412 us/op [Average]
[info]   (min, avg, max) = (36.132, 36.823, 37.352), stdev = 0.626
[info]   CI (99.9%): [25.411, 48.234] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 15)
[info] # Run progress: 1.33% complete, ETA 02:28:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112.342 us/op
[info] # Warmup Iteration   2: 96.420 us/op
[info] # Warmup Iteration   3: 97.688 us/op
[info] Iteration   1: 96.712 us/op
[info] Iteration   2: 97.070 us/op
[info] Iteration   3: 94.418 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   96.067 ±(99.9%) 26.257 us/op [Average]
[info]   (min, avg, max) = (94.418, 96.067, 97.070), stdev = 1.439
[info]   CI (99.9%): [69.810, 122.323] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 20)
[info] # Run progress: 2.00% complete, ETA 02:27:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225.106 us/op
[info] # Warmup Iteration   2: 191.382 us/op
[info] # Warmup Iteration   3: 195.716 us/op
[info] Iteration   1: 191.052 us/op
[info] Iteration   2: 195.018 us/op
[info] Iteration   3: 191.486 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   192.519 ±(99.9%) 39.685 us/op [Average]
[info]   (min, avg, max) = (191.052, 192.519, 195.018), stdev = 2.175
[info]   CI (99.9%): [152.833, 232.204] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 25)
[info] # Run progress: 2.67% complete, ETA 02:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371.684 us/op
[info] # Warmup Iteration   2: 318.308 us/op
[info] # Warmup Iteration   3: 324.510 us/op
[info] Iteration   1: 319.336 us/op
[info] Iteration   2: 324.668 us/op
[info] Iteration   3: 319.618 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   321.207 ±(99.9%) 54.738 us/op [Average]
[info]   (min, avg, max) = (319.336, 321.207, 324.668), stdev = 3.000
[info]   CI (99.9%): [266.469, 375.945] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 30)
[info] # Run progress: 3.33% complete, ETA 02:25:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 581.515 us/op
[info] # Warmup Iteration   2: 498.299 us/op
[info] # Warmup Iteration   3: 511.181 us/op
[info] Iteration   1: 490.011 us/op
[info] Iteration   2: 502.248 us/op
[info] Iteration   3: 502.374 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   498.211 ±(99.9%) 129.568 us/op [Average]
[info]   (min, avg, max) = (490.011, 498.211, 502.374), stdev = 7.102
[info]   CI (99.9%): [368.643, 627.779] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 35)
[info] # Run progress: 4.00% complete, ETA 02:24:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 821.376 us/op
[info] # Warmup Iteration   2: 707.357 us/op
[info] # Warmup Iteration   3: 717.272 us/op
[info] Iteration   1: 707.493 us/op
[info] Iteration   2: 696.446 us/op
[info] Iteration   3: 700.680 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   701.539 ±(99.9%) 101.681 us/op [Average]
[info]   (min, avg, max) = (696.446, 701.539, 707.493), stdev = 5.574
[info]   CI (99.9%): [599.858, 803.221] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 40)
[info] # Run progress: 4.67% complete, ETA 02:23:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1150.030 us/op
[info] # Warmup Iteration   2: 979.419 us/op
[info] # Warmup Iteration   3: 1013.004 us/op
[info] Iteration   1: 969.142 us/op
[info] Iteration   2: 1001.871 us/op
[info] Iteration   3: 967.642 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   979.552 ±(99.9%) 352.895 us/op [Average]
[info]   (min, avg, max) = (967.642, 979.552, 1001.871), stdev = 19.343
[info]   CI (99.9%): [626.657, 1332.446] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 45)
[info] # Run progress: 5.33% complete, ETA 02:22:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1530.911 us/op
[info] # Warmup Iteration   2: 1306.558 us/op
[info] # Warmup Iteration   3: 1335.916 us/op
[info] Iteration   1: 1286.221 us/op
[info] Iteration   2: 1344.599 us/op
[info] Iteration   3: 1286.417 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   1305.746 ±(99.9%) 613.860 us/op [Average]
[info]   (min, avg, max) = (1286.221, 1305.746, 1344.599), stdev = 33.648
[info]   CI (99.9%): [691.886, 1919.606] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 50)
[info] # Run progress: 6.00% complete, ETA 02:21:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1970.386 us/op
[info] # Warmup Iteration   2: 1688.994 us/op
[info] # Warmup Iteration   3: 1708.649 us/op
[info] Iteration   1: 1682.219 us/op
[info] Iteration   2: 1694.457 us/op
[info] Iteration   3: 1654.747 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   1677.141 ±(99.9%) 371.009 us/op [Average]
[info]   (min, avg, max) = (1654.747, 1677.141, 1694.457), stdev = 20.336
[info]   CI (99.9%): [1306.132, 2048.150] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 55)
[info] # Run progress: 6.67% complete, ETA 02:20:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2495.382 us/op
[info] # Warmup Iteration   2: 2110.701 us/op
[info] # Warmup Iteration   3: 2179.336 us/op
[info] Iteration   1: 2149.536 us/op
[info] Iteration   2: 2152.708 us/op
[info] Iteration   3: 2120.751 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   2140.998 ±(99.9%) 321.202 us/op [Average]
[info]   (min, avg, max) = (2120.751, 2140.998, 2152.708), stdev = 17.606
[info]   CI (99.9%): [1819.796, 2462.200] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 60)
[info] # Run progress: 7.33% complete, ETA 02:19:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3093.744 us/op
[info] # Warmup Iteration   2: 2618.106 us/op
[info] # Warmup Iteration   3: 2640.483 us/op
[info] Iteration   1: 2679.964 us/op
[info] Iteration   2: 2632.173 us/op
[info] Iteration   3: 2643.996 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   2652.044 ±(99.9%) 454.108 us/op [Average]
[info]   (min, avg, max) = (2632.173, 2652.044, 2679.964), stdev = 24.891
[info]   CI (99.9%): [2197.936, 3106.152] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 65)
[info] # Run progress: 8.00% complete, ETA 02:18:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3818.747 us/op
[info] # Warmup Iteration   2: 3198.805 us/op
[info] # Warmup Iteration   3: 3301.216 us/op
[info] Iteration   1: 3250.565 us/op
[info] Iteration   2: 3264.764 us/op
[info] Iteration   3: 3222.120 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   3245.816 ±(99.9%) 396.162 us/op [Average]
[info]   (min, avg, max) = (3222.120, 3245.816, 3264.764), stdev = 21.715
[info]   CI (99.9%): [2849.654, 3641.978] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 70)
[info] # Run progress: 8.67% complete, ETA 02:17:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4702.513 us/op
[info] # Warmup Iteration   2: 4039.415 us/op
[info] # Warmup Iteration   3: 4055.085 us/op
[info] Iteration   1: 4037.834 us/op
[info] Iteration   2: 4161.203 us/op
[info] Iteration   3: 3939.015 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   4046.017 ±(99.9%) 2030.888 us/op [Average]
[info]   (min, avg, max) = (3939.015, 4046.017, 4161.203), stdev = 111.320
[info]   CI (99.9%): [2015.129, 6076.905] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 75)
[info] # Run progress: 9.33% complete, ETA 02:16:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5578.456 us/op
[info] # Warmup Iteration   2: 4675.102 us/op
[info] # Warmup Iteration   3: 4701.350 us/op
[info] Iteration   1: 4813.825 us/op
[info] Iteration   2: 4636.874 us/op
[info] Iteration   3: 4625.523 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   4692.074 ±(99.9%) 1926.396 us/op [Average]
[info]   (min, avg, max) = (4625.523, 4692.074, 4813.825), stdev = 105.592
[info]   CI (99.9%): [2765.678, 6618.470] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 80)
[info] # Run progress: 10.00% complete, ETA 02:15:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6687.918 us/op
[info] # Warmup Iteration   2: 5601.695 us/op
[info] # Warmup Iteration   3: 5761.583 us/op
[info] Iteration   1: 5751.010 us/op
[info] Iteration   2: 5707.672 us/op
[info] Iteration   3: 5678.054 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   5712.246 ±(99.9%) 669.411 us/op [Average]
[info]   (min, avg, max) = (5678.054, 5712.246, 5751.010), stdev = 36.693
[info]   CI (99.9%): [5042.835, 6381.656] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 85)
[info] # Run progress: 10.67% complete, ETA 02:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7687.371 us/op
[info] # Warmup Iteration   2: 6666.594 us/op
[info] # Warmup Iteration   3: 6656.763 us/op
[info] Iteration   1: 6692.899 us/op
[info] Iteration   2: 6584.237 us/op
[info] Iteration   3: 6599.041 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   6625.392 ±(99.9%) 1075.095 us/op [Average]
[info]   (min, avg, max) = (6584.237, 6625.392, 6692.899), stdev = 58.930
[info]   CI (99.9%): [5550.297, 7700.487] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 90)
[info] # Run progress: 11.33% complete, ETA 02:13:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8975.170 us/op
[info] # Warmup Iteration   2: 7623.992 us/op
[info] # Warmup Iteration   3: 7791.225 us/op
[info] Iteration   1: 7565.455 us/op
[info] Iteration   2: 7853.125 us/op
[info] Iteration   3: 7548.511 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   7655.697 ±(99.9%) 3123.094 us/op [Average]
[info]   (min, avg, max) = (7548.511, 7655.697, 7853.125), stdev = 171.187
[info]   CI (99.9%): [4532.603, 10778.791] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 95)
[info] # Run progress: 12.00% complete, ETA 02:12:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10447.548 us/op
[info] # Warmup Iteration   2: 8965.759 us/op
[info] # Warmup Iteration   3: 9171.216 us/op
[info] Iteration   1: 9101.723 us/op
[info] Iteration   2: 9043.303 us/op
[info] Iteration   3: 9088.447 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   9077.824 ±(99.9%) 558.698 us/op [Average]
[info]   (min, avg, max) = (9043.303, 9077.824, 9101.723), stdev = 30.624
[info]   CI (99.9%): [8519.126, 9636.522] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 100)
[info] # Run progress: 12.67% complete, ETA 02:11:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12189.975 us/op
[info] # Warmup Iteration   2: 10224.596 us/op
[info] # Warmup Iteration   3: 10610.293 us/op
[info] Iteration   1: 10271.473 us/op
[info] Iteration   2: 10334.454 us/op
[info] Iteration   3: 10386.557 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   10330.828 ±(99.9%) 1051.349 us/op [Average]
[info]   (min, avg, max) = (10271.473, 10330.828, 10386.557), stdev = 57.628
[info]   CI (99.9%): [9279.479, 11382.177] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 110)
[info] # Run progress: 13.33% complete, ETA 02:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15439.352 us/op
[info] # Warmup Iteration   2: 13412.156 us/op
[info] # Warmup Iteration   3: 13344.735 us/op
[info] Iteration   1: 13005.583 us/op
[info] Iteration   2: 13064.852 us/op
[info] Iteration   3: 14317.462 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   13462.633 ±(99.9%) 13516.720 us/op [Average]
[info]   (min, avg, max) = (13005.583, 13462.633, 14317.462), stdev = 740.897
[info]   CI (99.9%): [≈ 0, 26979.353] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 120)
[info] # Run progress: 14.00% complete, ETA 02:09:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19751.733 us/op
[info] # Warmup Iteration   2: 16762.879 us/op
[info] # Warmup Iteration   3: 17070.882 us/op
[info] Iteration   1: 16710.489 us/op
[info] Iteration   2: 17060.324 us/op
[info] Iteration   3: 16534.876 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   16768.563 ±(99.9%) 4880.090 us/op [Average]
[info]   (min, avg, max) = (16534.876, 16768.563, 17060.324), stdev = 267.494
[info]   CI (99.9%): [11888.473, 21648.653] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 130)
[info] # Run progress: 14.67% complete, ETA 02:08:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24947.365 us/op
[info] # Warmup Iteration   2: 20980.554 us/op
[info] # Warmup Iteration   3: 21451.275 us/op
[info] Iteration   1: 21230.979 us/op
[info] Iteration   2: 21592.052 us/op
[info] Iteration   3: 21179.554 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   21334.195 ±(99.9%) 4100.932 us/op [Average]
[info]   (min, avg, max) = (21179.554, 21334.195, 21592.052), stdev = 224.786
[info]   CI (99.9%): [17233.263, 25435.126] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 140)
[info] # Run progress: 15.33% complete, ETA 02:07:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30463.726 us/op
[info] # Warmup Iteration   2: 25729.731 us/op
[info] # Warmup Iteration   3: 26404.654 us/op
[info] Iteration   1: 25875.601 us/op
[info] Iteration   2: 25869.051 us/op
[info] Iteration   3: 25984.534 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   25909.729 ±(99.9%) 1183.392 us/op [Average]
[info]   (min, avg, max) = (25869.051, 25909.729, 25984.534), stdev = 64.866
[info]   CI (99.9%): [24726.337, 27093.121] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex
[info] # Parameters: (size = 150)
[info] # Run progress: 16.00% complete, ETA 02:06:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37010.742 us/op
[info] # Warmup Iteration   2: 31567.099 us/op
[info] # Warmup Iteration   3: 32422.999 us/op
[info] Iteration   1: 31565.911 us/op
[info] Iteration   2: 32557.381 us/op
[info] Iteration   3: 31867.327 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex":
[info]   31996.873 ±(99.9%) 9272.761 us/op [Average]
[info]   (min, avg, max) = (31565.911, 31996.873, 32557.381), stdev = 508.271
[info]   CI (99.9%): [22724.112, 41269.634] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 5)
[info] # Run progress: 16.67% complete, ETA 02:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11.363 us/op
[info] # Warmup Iteration   2: 9.695 us/op
[info] # Warmup Iteration   3: 9.687 us/op
[info] Iteration   1: 9.445 us/op
[info] Iteration   2: 9.573 us/op
[info] Iteration   3: 9.739 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   9.585 ±(99.9%) 2.694 us/op [Average]
[info]   (min, avg, max) = (9.445, 9.585, 9.739), stdev = 0.148
[info]   CI (99.9%): [6.892, 12.279] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 10)
[info] # Run progress: 17.33% complete, ETA 02:04:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76.086 us/op
[info] # Warmup Iteration   2: 63.561 us/op
[info] # Warmup Iteration   3: 63.436 us/op
[info] Iteration   1: 65.359 us/op
[info] Iteration   2: 63.321 us/op
[info] Iteration   3: 64.070 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   64.250 ±(99.9%) 18.812 us/op [Average]
[info]   (min, avg, max) = (63.321, 64.250, 65.359), stdev = 1.031
[info]   CI (99.9%): [45.438, 83.062] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 15)
[info] # Run progress: 18.00% complete, ETA 02:03:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209.154 us/op
[info] # Warmup Iteration   2: 176.561 us/op
[info] # Warmup Iteration   3: 183.596 us/op
[info] Iteration   1: 179.209 us/op
[info] Iteration   2: 183.192 us/op
[info] Iteration   3: 174.225 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   178.876 ±(99.9%) 81.969 us/op [Average]
[info]   (min, avg, max) = (174.225, 178.876, 183.192), stdev = 4.493
[info]   CI (99.9%): [96.907, 260.844] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 20)
[info] # Run progress: 18.67% complete, ETA 02:02:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 402.774 us/op
[info] # Warmup Iteration   2: 374.651 us/op
[info] # Warmup Iteration   3: 369.827 us/op
[info] Iteration   1: 371.392 us/op
[info] Iteration   2: 371.356 us/op
[info] Iteration   3: 367.515 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   370.088 ±(99.9%) 40.654 us/op [Average]
[info]   (min, avg, max) = (367.515, 370.088, 371.392), stdev = 2.228
[info]   CI (99.9%): [329.434, 410.742] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 25)
[info] # Run progress: 19.33% complete, ETA 02:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 711.453 us/op
[info] # Warmup Iteration   2: 666.550 us/op
[info] # Warmup Iteration   3: 660.097 us/op
[info] Iteration   1: 646.000 us/op
[info] Iteration   2: 660.394 us/op
[info] Iteration   3: 642.388 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   649.594 ±(99.9%) 173.793 us/op [Average]
[info]   (min, avg, max) = (642.388, 649.594, 660.394), stdev = 9.526
[info]   CI (99.9%): [475.801, 823.387] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 30)
[info] # Run progress: 20.00% complete, ETA 02:00:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1257.667 us/op
[info] # Warmup Iteration   2: 1040.669 us/op
[info] # Warmup Iteration   3: 1051.489 us/op
[info] Iteration   1: 1085.075 us/op
[info] Iteration   2: 1038.333 us/op
[info] Iteration   3: 1056.871 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   1060.093 ±(99.9%) 429.395 us/op [Average]
[info]   (min, avg, max) = (1038.333, 1060.093, 1085.075), stdev = 23.537
[info]   CI (99.9%): [630.698, 1489.488] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 35)
[info] # Run progress: 20.67% complete, ETA 01:59:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1739.058 us/op
[info] # Warmup Iteration   2: 1621.346 us/op
[info] # Warmup Iteration   3: 1604.694 us/op
[info] Iteration   1: 1599.853 us/op
[info] Iteration   2: 1583.728 us/op
[info] Iteration   3: 1606.797 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   1596.793 ±(99.9%) 215.915 us/op [Average]
[info]   (min, avg, max) = (1583.728, 1596.793, 1606.797), stdev = 11.835
[info]   CI (99.9%): [1380.878, 1812.708] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 40)
[info] # Run progress: 21.33% complete, ETA 01:58:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2553.548 us/op
[info] # Warmup Iteration   2: 2269.217 us/op
[info] # Warmup Iteration   3: 2271.757 us/op
[info] Iteration   1: 2313.738 us/op
[info] Iteration   2: 2232.901 us/op
[info] Iteration   3: 2268.492 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   2271.710 ±(99.9%) 739.139 us/op [Average]
[info]   (min, avg, max) = (2232.901, 2271.710, 2313.738), stdev = 40.515
[info]   CI (99.9%): [1532.571, 3010.850] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 45)
[info] # Run progress: 22.00% complete, ETA 01:57:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3303.214 us/op
[info] # Warmup Iteration   2: 3078.614 us/op
[info] # Warmup Iteration   3: 3101.323 us/op
[info] Iteration   1: 3083.794 us/op
[info] Iteration   2: 3007.667 us/op
[info] Iteration   3: 2994.596 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   3028.686 ±(99.9%) 878.807 us/op [Average]
[info]   (min, avg, max) = (2994.596, 3028.686, 3083.794), stdev = 48.170
[info]   CI (99.9%): [2149.879, 3907.493] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 50)
[info] # Run progress: 22.67% complete, ETA 01:56:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4495.244 us/op
[info] # Warmup Iteration   2: 4165.597 us/op
[info] # Warmup Iteration   3: 4130.506 us/op
[info] Iteration   1: 4150.283 us/op
[info] Iteration   2: 4057.928 us/op
[info] Iteration   3: 4070.302 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   4092.838 ±(99.9%) 914.596 us/op [Average]
[info]   (min, avg, max) = (4057.928, 4092.838, 4150.283), stdev = 50.132
[info]   CI (99.9%): [3178.242, 5007.434] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 55)
[info] # Run progress: 23.33% complete, ETA 01:55:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5835.256 us/op
[info] # Warmup Iteration   2: 5386.066 us/op
[info] # Warmup Iteration   3: 5334.573 us/op
[info] Iteration   1: 5335.597 us/op
[info] Iteration   2: 5356.848 us/op
[info] Iteration   3: 5293.231 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   5328.559 ±(99.9%) 590.860 us/op [Average]
[info]   (min, avg, max) = (5293.231, 5328.559, 5356.848), stdev = 32.387
[info]   CI (99.9%): [4737.699, 5919.418] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 60)
[info] # Run progress: 24.00% complete, ETA 01:54:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7550.872 us/op
[info] # Warmup Iteration   2: 7000.119 us/op
[info] # Warmup Iteration   3: 6985.455 us/op
[info] Iteration   1: 6822.462 us/op
[info] Iteration   2: 6830.589 us/op
[info] Iteration   3: 6952.889 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   6868.647 ±(99.9%) 1333.055 us/op [Average]
[info]   (min, avg, max) = (6822.462, 6868.647, 6952.889), stdev = 73.069
[info]   CI (99.9%): [5535.592, 8201.701] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 65)
[info] # Run progress: 24.67% complete, ETA 01:53:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9397.268 us/op
[info] # Warmup Iteration   2: 8676.531 us/op
[info] # Warmup Iteration   3: 8612.186 us/op
[info] Iteration   1: 8619.129 us/op
[info] Iteration   2: 8595.424 us/op
[info] Iteration   3: 8626.228 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   8613.594 ±(99.9%) 294.286 us/op [Average]
[info]   (min, avg, max) = (8595.424, 8613.594, 8626.228), stdev = 16.131
[info]   CI (99.9%): [8319.308, 8907.880] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 70)
[info] # Run progress: 25.33% complete, ETA 01:52:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13268.630 us/op
[info] # Warmup Iteration   2: 10765.810 us/op
[info] # Warmup Iteration   3: 10383.578 us/op
[info] Iteration   1: 10488.540 us/op
[info] Iteration   2: 10761.564 us/op
[info] Iteration   3: 10417.708 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   10555.938 ±(99.9%) 3312.431 us/op [Average]
[info]   (min, avg, max) = (10417.708, 10555.938, 10761.564), stdev = 181.566
[info]   CI (99.9%): [7243.507, 13868.369] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 75)
[info] # Run progress: 26.00% complete, ETA 01:51:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14121.844 us/op
[info] # Warmup Iteration   2: 13195.373 us/op
[info] # Warmup Iteration   3: 12678.781 us/op
[info] Iteration   1: 12962.017 us/op
[info] Iteration   2: 12851.944 us/op
[info] Iteration   3: 12776.639 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   12863.533 ±(99.9%) 1700.881 us/op [Average]
[info]   (min, avg, max) = (12776.639, 12863.533, 12962.017), stdev = 93.231
[info]   CI (99.9%): [11162.652, 14564.414] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 80)
[info] # Run progress: 26.67% complete, ETA 01:50:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17082.758 us/op
[info] # Warmup Iteration   2: 15708.453 us/op
[info] # Warmup Iteration   3: 15410.220 us/op
[info] Iteration   1: 15529.070 us/op
[info] Iteration   2: 15211.516 us/op
[info] Iteration   3: 15140.682 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   15293.756 ±(99.9%) 3773.578 us/op [Average]
[info]   (min, avg, max) = (15140.682, 15293.756, 15529.070), stdev = 206.843
[info]   CI (99.9%): [11520.178, 19067.333] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 85)
[info] # Run progress: 27.33% complete, ETA 01:49:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20264.932 us/op
[info] # Warmup Iteration   2: 18820.263 us/op
[info] # Warmup Iteration   3: 18536.928 us/op
[info] Iteration   1: 18841.703 us/op
[info] Iteration   2: 18389.712 us/op
[info] Iteration   3: 18734.183 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   18655.199 ±(99.9%) 4307.711 us/op [Average]
[info]   (min, avg, max) = (18389.712, 18655.199, 18841.703), stdev = 236.120
[info]   CI (99.9%): [14347.488, 22962.911] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 90)
[info] # Run progress: 28.00% complete, ETA 01:48:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23635.463 us/op
[info] # Warmup Iteration   2: 22032.408 us/op
[info] # Warmup Iteration   3: 21531.136 us/op
[info] Iteration   1: 21817.244 us/op
[info] Iteration   2: 21439.853 us/op
[info] Iteration   3: 22029.149 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   21762.082 ±(99.9%) 5445.677 us/op [Average]
[info]   (min, avg, max) = (21439.853, 21762.082, 22029.149), stdev = 298.496
[info]   CI (99.9%): [16316.405, 27207.759] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 95)
[info] # Run progress: 28.67% complete, ETA 01:47:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27762.061 us/op
[info] # Warmup Iteration   2: 25727.461 us/op
[info] # Warmup Iteration   3: 25469.679 us/op
[info] Iteration   1: 25470.350 us/op
[info] Iteration   2: 25201.677 us/op
[info] Iteration   3: 25543.583 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   25405.203 ±(99.9%) 3284.276 us/op [Average]
[info]   (min, avg, max) = (25201.677, 25405.203, 25543.583), stdev = 180.022
[info]   CI (99.9%): [22120.927, 28689.479] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 100)
[info] # Run progress: 29.33% complete, ETA 01:46:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32171.455 us/op
[info] # Warmup Iteration   2: 29842.372 us/op
[info] # Warmup Iteration   3: 29462.766 us/op
[info] Iteration   1: 29474.127 us/op
[info] Iteration   2: 29307.280 us/op
[info] Iteration   3: 29561.253 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   29447.554 ±(99.9%) 2354.441 us/op [Average]
[info]   (min, avg, max) = (29307.280, 29447.554, 29561.253), stdev = 129.055
[info]   CI (99.9%): [27093.113, 31801.995] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 110)
[info] # Run progress: 30.00% complete, ETA 01:45:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42604.148 us/op
[info] # Warmup Iteration   2: 39944.128 us/op
[info] # Warmup Iteration   3: 38637.210 us/op
[info] Iteration   1: 39704.936 us/op
[info] Iteration   2: 38348.047 us/op
[info] Iteration   3: 38538.007 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   38863.663 ±(99.9%) 13404.183 us/op [Average]
[info]   (min, avg, max) = (38348.047, 38863.663, 39704.936), stdev = 734.729
[info]   CI (99.9%): [25459.480, 52267.847] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 120)
[info] # Run progress: 30.67% complete, ETA 01:44:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54454.304 us/op
[info] # Warmup Iteration   2: 51346.808 us/op
[info] # Warmup Iteration   3: 49150.613 us/op
[info] Iteration   1: 49856.429 us/op
[info] Iteration   2: 50696.649 us/op
[info] Iteration   3: 49305.135 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   49952.738 ±(99.9%) 12784.075 us/op [Average]
[info]   (min, avg, max) = (49305.135, 49952.738, 50696.649), stdev = 700.738
[info]   CI (99.9%): [37168.663, 62736.813] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 130)
[info] # Run progress: 31.33% complete, ETA 01:43:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67999.375 us/op
[info] # Warmup Iteration   2: 63441.351 us/op
[info] # Warmup Iteration   3: 61999.685 us/op
[info] Iteration   1: 62135.675 us/op
[info] Iteration   2: 61464.830 us/op
[info] Iteration   3: 61017.910 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   61539.471 ±(99.9%) 10264.070 us/op [Average]
[info]   (min, avg, max) = (61017.910, 61539.471, 62135.675), stdev = 562.608
[info]   CI (99.9%): [51275.401, 71803.541] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 140)
[info] # Run progress: 32.00% complete, ETA 01:42:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86350.739 us/op
[info] # Warmup Iteration   2: 80523.867 us/op
[info] # Warmup Iteration   3: 79933.726 us/op
[info] Iteration   1: 79486.248 us/op
[info] Iteration   2: 78783.995 us/op
[info] Iteration   3: 78448.891 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   78906.378 ±(99.9%) 9658.163 us/op [Average]
[info]   (min, avg, max) = (78448.891, 78906.378, 79486.248), stdev = 529.396
[info]   CI (99.9%): [69248.215, 88564.541] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline
[info] # Parameters: (size = 150)
[info] # Run progress: 32.67% complete, ETA 01:41:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106510.435 us/op
[info] # Warmup Iteration   2: 99336.144 us/op
[info] # Warmup Iteration   3: 97373.935 us/op
[info] Iteration   1: 97785.109 us/op
[info] Iteration   2: 95866.868 us/op
[info] Iteration   3: 98376.745 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Regex_multiline":
[info]   97342.907 ±(99.9%) 23937.046 us/op [Average]
[info]   (min, avg, max) = (95866.868, 97342.907, 98376.745), stdev = 1312.070
[info]   CI (99.9%): [73405.861, 121279.954] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 5)
[info] # Run progress: 33.33% complete, ETA 01:40:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27.789 us/op
[info] # Warmup Iteration   2: 25.364 us/op
[info] # Warmup Iteration   3: 25.680 us/op
[info] Iteration   1: 24.843 us/op
[info] Iteration   2: 24.843 us/op
[info] Iteration   3: 24.843 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   24.843 ±(99.9%) 0.008 us/op [Average]
[info]   (min, avg, max) = (24.843, 24.843, 24.843), stdev = 0.001
[info]   CI (99.9%): [24.836, 24.851] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 10)
[info] # Run progress: 34.00% complete, ETA 01:39:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71.981 us/op
[info] # Warmup Iteration   2: 67.863 us/op
[info] # Warmup Iteration   3: 67.531 us/op
[info] Iteration   1: 66.983 us/op
[info] Iteration   2: 67.914 us/op
[info] Iteration   3: 65.711 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   66.869 ±(99.9%) 20.183 us/op [Average]
[info]   (min, avg, max) = (65.711, 66.869, 67.914), stdev = 1.106
[info]   CI (99.9%): [46.686, 87.053] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 15)
[info] # Run progress: 34.67% complete, ETA 01:38:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114.991 us/op
[info] # Warmup Iteration   2: 108.549 us/op
[info] # Warmup Iteration   3: 106.816 us/op
[info] Iteration   1: 107.303 us/op
[info] Iteration   2: 104.969 us/op
[info] Iteration   3: 104.984 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   105.752 ±(99.9%) 24.507 us/op [Average]
[info]   (min, avg, max) = (104.969, 105.752, 107.303), stdev = 1.343
[info]   CI (99.9%): [81.245, 130.259] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 20)
[info] # Run progress: 35.33% complete, ETA 01:37:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163.931 us/op
[info] # Warmup Iteration   2: 156.489 us/op
[info] # Warmup Iteration   3: 152.593 us/op
[info] Iteration   1: 153.906 us/op
[info] Iteration   2: 151.140 us/op
[info] Iteration   3: 155.188 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   153.411 ±(99.9%) 37.749 us/op [Average]
[info]   (min, avg, max) = (151.140, 153.411, 155.188), stdev = 2.069
[info]   CI (99.9%): [115.662, 191.161] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 25)
[info] # Run progress: 36.00% complete, ETA 01:36:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205.487 us/op
[info] # Warmup Iteration   2: 192.189 us/op
[info] # Warmup Iteration   3: 193.844 us/op
[info] Iteration   1: 187.710 us/op
[info] Iteration   2: 192.533 us/op
[info] Iteration   3: 186.464 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   188.902 ±(99.9%) 58.472 us/op [Average]
[info]   (min, avg, max) = (186.464, 188.902, 192.533), stdev = 3.205
[info]   CI (99.9%): [130.430, 247.374] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 30)
[info] # Run progress: 36.67% complete, ETA 01:35:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244.182 us/op
[info] # Warmup Iteration   2: 229.838 us/op
[info] # Warmup Iteration   3: 231.046 us/op
[info] Iteration   1: 223.993 us/op
[info] Iteration   2: 229.414 us/op
[info] Iteration   3: 222.604 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   225.337 ±(99.9%) 65.647 us/op [Average]
[info]   (min, avg, max) = (222.604, 225.337, 229.414), stdev = 3.598
[info]   CI (99.9%): [159.690, 290.984] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 35)
[info] # Run progress: 37.33% complete, ETA 01:34:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 287.785 us/op
[info] # Warmup Iteration   2: 271.030 us/op
[info] # Warmup Iteration   3: 262.958 us/op
[info] Iteration   1: 270.629 us/op
[info] Iteration   2: 264.670 us/op
[info] Iteration   3: 268.583 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   267.961 ±(99.9%) 55.239 us/op [Average]
[info]   (min, avg, max) = (264.670, 267.961, 270.629), stdev = 3.028
[info]   CI (99.9%): [212.721, 323.200] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 40)
[info] # Run progress: 38.00% complete, ETA 01:33:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336.002 us/op
[info] # Warmup Iteration   2: 309.985 us/op
[info] # Warmup Iteration   3: 313.134 us/op
[info] Iteration   1: 306.821 us/op
[info] Iteration   2: 312.964 us/op
[info] Iteration   3: 303.565 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   307.783 ±(99.9%) 87.068 us/op [Average]
[info]   (min, avg, max) = (303.565, 307.783, 312.964), stdev = 4.772
[info]   CI (99.9%): [220.716, 394.851] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 45)
[info] # Run progress: 38.67% complete, ETA 01:32:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375.919 us/op
[info] # Warmup Iteration   2: 353.915 us/op
[info] # Warmup Iteration   3: 345.950 us/op
[info] Iteration   1: 352.269 us/op
[info] Iteration   2: 342.738 us/op
[info] Iteration   3: 344.715 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   346.574 ±(99.9%) 91.768 us/op [Average]
[info]   (min, avg, max) = (342.738, 346.574, 352.269), stdev = 5.030
[info]   CI (99.9%): [254.806, 438.342] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 50)
[info] # Run progress: 39.33% complete, ETA 01:31:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427.766 us/op
[info] # Warmup Iteration   2: 394.683 us/op
[info] # Warmup Iteration   3: 396.060 us/op
[info] Iteration   1: 390.645 us/op
[info] Iteration   2: 391.169 us/op
[info] Iteration   3: 383.466 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   388.427 ±(99.9%) 78.522 us/op [Average]
[info]   (min, avg, max) = (383.466, 388.427, 391.169), stdev = 4.304
[info]   CI (99.9%): [309.904, 466.949] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 55)
[info] # Run progress: 40.00% complete, ETA 01:30:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 471.349 us/op
[info] # Warmup Iteration   2: 432.719 us/op
[info] # Warmup Iteration   3: 439.911 us/op
[info] Iteration   1: 429.582 us/op
[info] Iteration   2: 433.704 us/op
[info] Iteration   3: 424.180 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   429.155 ±(99.9%) 87.134 us/op [Average]
[info]   (min, avg, max) = (424.180, 429.155, 433.704), stdev = 4.776
[info]   CI (99.9%): [342.022, 516.289] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 60)
[info] # Run progress: 40.67% complete, ETA 01:29:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 509.685 us/op
[info] # Warmup Iteration   2: 471.916 us/op
[info] # Warmup Iteration   3: 470.646 us/op
[info] Iteration   1: 467.592 us/op
[info] Iteration   2: 460.631 us/op
[info] Iteration   3: 460.448 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   462.890 ±(99.9%) 74.299 us/op [Average]
[info]   (min, avg, max) = (460.448, 462.890, 467.592), stdev = 4.073
[info]   CI (99.9%): [388.591, 537.190] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 65)
[info] # Run progress: 41.33% complete, ETA 01:28:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 555.770 us/op
[info] # Warmup Iteration   2: 514.421 us/op
[info] # Warmup Iteration   3: 520.904 us/op
[info] Iteration   1: 502.651 us/op
[info] Iteration   2: 505.338 us/op
[info] Iteration   3: 516.373 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   508.121 ±(99.9%) 132.668 us/op [Average]
[info]   (min, avg, max) = (502.651, 508.121, 516.373), stdev = 7.272
[info]   CI (99.9%): [375.453, 640.789] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 70)
[info] # Run progress: 42.00% complete, ETA 01:27:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 602.151 us/op
[info] # Warmup Iteration   2: 554.535 us/op
[info] # Warmup Iteration   3: 551.484 us/op
[info] Iteration   1: 546.353 us/op
[info] Iteration   2: 551.398 us/op
[info] Iteration   3: 539.227 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   545.659 ±(99.9%) 111.566 us/op [Average]
[info]   (min, avg, max) = (539.227, 545.659, 551.398), stdev = 6.115
[info]   CI (99.9%): [434.093, 657.225] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 75)
[info] # Run progress: 42.67% complete, ETA 01:26:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 643.537 us/op
[info] # Warmup Iteration   2: 596.334 us/op
[info] # Warmup Iteration   3: 603.681 us/op
[info] Iteration   1: 585.296 us/op
[info] Iteration   2: 591.451 us/op
[info] Iteration   3: 590.767 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   589.171 ±(99.9%) 61.546 us/op [Average]
[info]   (min, avg, max) = (585.296, 589.171, 591.451), stdev = 3.374
[info]   CI (99.9%): [527.625, 650.718] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 80)
[info] # Run progress: 43.33% complete, ETA 01:25:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 686.381 us/op
[info] # Warmup Iteration   2: 634.267 us/op
[info] # Warmup Iteration   3: 642.789 us/op
[info] Iteration   1: 627.961 us/op
[info] Iteration   2: 633.844 us/op
[info] Iteration   3: 619.711 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   627.172 ±(99.9%) 129.522 us/op [Average]
[info]   (min, avg, max) = (619.711, 627.172, 633.844), stdev = 7.100
[info]   CI (99.9%): [497.650, 756.693] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 85)
[info] # Run progress: 44.00% complete, ETA 01:24:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 764.659 us/op
[info] # Warmup Iteration   2: 672.988 us/op
[info] # Warmup Iteration   3: 667.990 us/op
[info] Iteration   1: 679.166 us/op
[info] Iteration   2: 668.297 us/op
[info] Iteration   3: 663.490 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   670.318 ±(99.9%) 146.518 us/op [Average]
[info]   (min, avg, max) = (663.490, 670.318, 679.166), stdev = 8.031
[info]   CI (99.9%): [523.800, 816.835] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 90)
[info] # Run progress: 44.67% complete, ETA 01:23:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 781.265 us/op
[info] # Warmup Iteration   2: 722.703 us/op
[info] # Warmup Iteration   3: 732.831 us/op
[info] Iteration   1: 710.159 us/op
[info] Iteration   2: 721.741 us/op
[info] Iteration   3: 711.048 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   714.316 ±(99.9%) 117.586 us/op [Average]
[info]   (min, avg, max) = (710.159, 714.316, 721.741), stdev = 6.445
[info]   CI (99.9%): [596.730, 831.902] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 95)
[info] # Run progress: 45.33% complete, ETA 01:22:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 821.463 us/op
[info] # Warmup Iteration   2: 765.070 us/op
[info] # Warmup Iteration   3: 765.142 us/op
[info] Iteration   1: 749.450 us/op
[info] Iteration   2: 748.031 us/op
[info] Iteration   3: 758.837 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   752.106 ±(99.9%) 107.135 us/op [Average]
[info]   (min, avg, max) = (748.031, 752.106, 758.837), stdev = 5.872
[info]   CI (99.9%): [644.971, 859.241] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 100)
[info] # Run progress: 46.00% complete, ETA 01:21:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 862.973 us/op
[info] # Warmup Iteration   2: 797.172 us/op
[info] # Warmup Iteration   3: 782.569 us/op
[info] Iteration   1: 802.420 us/op
[info] Iteration   2: 788.560 us/op
[info] Iteration   3: 796.063 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   795.681 ±(99.9%) 126.575 us/op [Average]
[info]   (min, avg, max) = (788.560, 795.681, 802.420), stdev = 6.938
[info]   CI (99.9%): [669.105, 922.256] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 110)
[info] # Run progress: 46.67% complete, ETA 01:20:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 950.419 us/op
[info] # Warmup Iteration   2: 886.622 us/op
[info] # Warmup Iteration   3: 871.046 us/op
[info] Iteration   1: 864.004 us/op
[info] Iteration   2: 869.333 us/op
[info] Iteration   3: 864.249 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   865.862 ±(99.9%) 54.891 us/op [Average]
[info]   (min, avg, max) = (864.004, 865.862, 869.333), stdev = 3.009
[info]   CI (99.9%): [810.971, 920.753] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 120)
[info] # Run progress: 47.33% complete, ETA 01:19:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1031.550 us/op
[info] # Warmup Iteration   2: 955.123 us/op
[info] # Warmup Iteration   3: 967.506 us/op
[info] Iteration   1: 932.101 us/op
[info] Iteration   2: 932.226 us/op
[info] Iteration   3: 932.471 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   932.266 ±(99.9%) 3.433 us/op [Average]
[info]   (min, avg, max) = (932.101, 932.266, 932.471), stdev = 0.188
[info]   CI (99.9%): [928.833, 935.699] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 130)
[info] # Run progress: 48.00% complete, ETA 01:18:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1135.930 us/op
[info] # Warmup Iteration   2: 1049.850 us/op
[info] # Warmup Iteration   3: 1062.210 us/op
[info] Iteration   1: 1044.471 us/op
[info] Iteration   2: 1040.799 us/op
[info] Iteration   3: 1023.906 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   1036.392 ±(99.9%) 200.098 us/op [Average]
[info]   (min, avg, max) = (1023.906, 1036.392, 1044.471), stdev = 10.968
[info]   CI (99.9%): [836.294, 1236.490] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 140)
[info] # Run progress: 48.67% complete, ETA 01:17:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1207.236 us/op
[info] # Warmup Iteration   2: 1130.076 us/op
[info] # Warmup Iteration   3: 1110.933 us/op
[info] Iteration   1: 1120.524 us/op
[info] Iteration   2: 1095.955 us/op
[info] Iteration   3: 1110.351 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   1108.943 ±(99.9%) 225.215 us/op [Average]
[info]   (min, avg, max) = (1095.955, 1108.943, 1120.524), stdev = 12.345
[info]   CI (99.9%): [883.729, 1334.158] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper
[info] # Parameters: (size = 150)
[info] # Run progress: 49.33% complete, ETA 01:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1324.585 us/op
[info] # Warmup Iteration   2: 1201.149 us/op
[info] # Warmup Iteration   3: 1227.748 us/op
[info] Iteration   1: 1180.727 us/op
[info] Iteration   2: 1217.859 us/op
[info] Iteration   3: 1189.056 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper":
[info]   1195.881 ±(99.9%) 355.464 us/op [Average]
[info]   (min, avg, max) = (1180.727, 1195.881, 1217.859), stdev = 19.484
[info]   CI (99.9%): [840.417, 1551.344] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 5)
[info] # Run progress: 50.00% complete, ETA 01:15:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28.626 us/op
[info] # Warmup Iteration   2: 26.582 us/op
[info] # Warmup Iteration   3: 25.908 us/op
[info] Iteration   1: 26.046 us/op
[info] Iteration   2: 26.131 us/op
[info] Iteration   3: 26.400 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   26.192 ±(99.9%) 3.372 us/op [Average]
[info]   (min, avg, max) = (26.046, 26.192, 26.400), stdev = 0.185
[info]   CI (99.9%): [22.820, 29.565] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 10)
[info] # Run progress: 50.67% complete, ETA 01:14:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76.529 us/op
[info] # Warmup Iteration   2: 69.777 us/op
[info] # Warmup Iteration   3: 70.706 us/op
[info] Iteration   1: 68.942 us/op
[info] Iteration   2: 70.086 us/op
[info] Iteration   3: 69.512 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   69.513 ±(99.9%) 10.435 us/op [Average]
[info]   (min, avg, max) = (68.942, 69.513, 70.086), stdev = 0.572
[info]   CI (99.9%): [59.078, 79.948] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 15)
[info] # Run progress: 51.33% complete, ETA 01:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123.430 us/op
[info] # Warmup Iteration   2: 116.331 us/op
[info] # Warmup Iteration   3: 116.102 us/op
[info] Iteration   1: 113.282 us/op
[info] Iteration   2: 113.146 us/op
[info] Iteration   3: 113.162 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   113.197 ±(99.9%) 1.362 us/op [Average]
[info]   (min, avg, max) = (113.146, 113.197, 113.282), stdev = 0.075
[info]   CI (99.9%): [111.835, 114.558] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 20)
[info] # Run progress: 52.00% complete, ETA 01:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168.946 us/op
[info] # Warmup Iteration   2: 159.592 us/op
[info] # Warmup Iteration   3: 154.910 us/op
[info] Iteration   1: 158.994 us/op
[info] Iteration   2: 154.909 us/op
[info] Iteration   3: 158.855 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   157.586 ±(99.9%) 42.322 us/op [Average]
[info]   (min, avg, max) = (154.909, 157.586, 158.994), stdev = 2.320
[info]   CI (99.9%): [115.264, 199.908] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 25)
[info] # Run progress: 52.67% complete, ETA 01:11:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211.784 us/op
[info] # Warmup Iteration   2: 199.328 us/op
[info] # Warmup Iteration   3: 198.076 us/op
[info] Iteration   1: 195.821 us/op
[info] Iteration   2: 198.589 us/op
[info] Iteration   3: 196.936 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   197.115 ±(99.9%) 25.410 us/op [Average]
[info]   (min, avg, max) = (195.821, 197.115, 198.589), stdev = 1.393
[info]   CI (99.9%): [171.705, 222.525] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 30)
[info] # Run progress: 53.33% complete, ETA 01:10:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265.853 us/op
[info] # Warmup Iteration   2: 250.405 us/op
[info] # Warmup Iteration   3: 251.475 us/op
[info] Iteration   1: 243.652 us/op
[info] Iteration   2: 249.956 us/op
[info] Iteration   3: 242.095 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   245.234 ±(99.9%) 75.944 us/op [Average]
[info]   (min, avg, max) = (242.095, 245.234, 249.956), stdev = 4.163
[info]   CI (99.9%): [169.291, 321.178] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 35)
[info] # Run progress: 54.00% complete, ETA 01:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314.236 us/op
[info] # Warmup Iteration   2: 295.971 us/op
[info] # Warmup Iteration   3: 297.469 us/op
[info] Iteration   1: 286.038 us/op
[info] Iteration   2: 287.865 us/op
[info] Iteration   3: 295.538 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   289.814 ±(99.9%) 91.958 us/op [Average]
[info]   (min, avg, max) = (286.038, 289.814, 295.538), stdev = 5.041
[info]   CI (99.9%): [197.856, 381.772] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 40)
[info] # Run progress: 54.67% complete, ETA 01:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 364.308 us/op
[info] # Warmup Iteration   2: 336.829 us/op
[info] # Warmup Iteration   3: 345.943 us/op
[info] Iteration   1: 328.506 us/op
[info] Iteration   2: 336.543 us/op
[info] Iteration   3: 339.830 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   334.959 ±(99.9%) 106.284 us/op [Average]
[info]   (min, avg, max) = (328.506, 334.959, 339.830), stdev = 5.826
[info]   CI (99.9%): [228.676, 441.243] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 45)
[info] # Run progress: 55.33% complete, ETA 01:07:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 411.992 us/op
[info] # Warmup Iteration   2: 388.204 us/op
[info] # Warmup Iteration   3: 383.816 us/op
[info] Iteration   1: 381.190 us/op
[info] Iteration   2: 380.621 us/op
[info] Iteration   3: 381.287 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   381.033 ±(99.9%) 6.573 us/op [Average]
[info]   (min, avg, max) = (380.621, 381.033, 381.287), stdev = 0.360
[info]   CI (99.9%): [374.460, 387.606] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 50)
[info] # Run progress: 56.00% complete, ETA 01:06:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453.672 us/op
[info] # Warmup Iteration   2: 420.966 us/op
[info] # Warmup Iteration   3: 419.317 us/op
[info] Iteration   1: 415.823 us/op
[info] Iteration   2: 409.242 us/op
[info] Iteration   3: 409.206 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   411.424 ±(99.9%) 69.512 us/op [Average]
[info]   (min, avg, max) = (409.206, 411.424, 415.823), stdev = 3.810
[info]   CI (99.9%): [341.912, 480.936] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 55)
[info] # Run progress: 56.67% complete, ETA 01:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505.493 us/op
[info] # Warmup Iteration   2: 467.887 us/op
[info] # Warmup Iteration   3: 473.983 us/op
[info] Iteration   1: 458.770 us/op
[info] Iteration   2: 459.723 us/op
[info] Iteration   3: 463.893 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   460.795 ±(99.9%) 49.704 us/op [Average]
[info]   (min, avg, max) = (458.770, 460.795, 463.893), stdev = 2.724
[info]   CI (99.9%): [411.091, 510.499] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 60)
[info] # Run progress: 57.33% complete, ETA 01:04:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 547.303 us/op
[info] # Warmup Iteration   2: 506.967 us/op
[info] # Warmup Iteration   3: 513.958 us/op
[info] Iteration   1: 501.242 us/op
[info] Iteration   2: 506.046 us/op
[info] Iteration   3: 494.116 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   500.468 ±(99.9%) 109.509 us/op [Average]
[info]   (min, avg, max) = (494.116, 500.468, 506.046), stdev = 6.003
[info]   CI (99.9%): [390.959, 609.977] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 65)
[info] # Run progress: 58.00% complete, ETA 01:03:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 592.703 us/op
[info] # Warmup Iteration   2: 548.650 us/op
[info] # Warmup Iteration   3: 556.631 us/op
[info] Iteration   1: 538.379 us/op
[info] Iteration   2: 552.996 us/op
[info] Iteration   3: 535.411 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   542.262 ±(99.9%) 171.740 us/op [Average]
[info]   (min, avg, max) = (535.411, 542.262, 552.996), stdev = 9.414
[info]   CI (99.9%): [370.522, 714.001] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 70)
[info] # Run progress: 58.67% complete, ETA 01:02:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 645.063 us/op
[info] # Warmup Iteration   2: 603.202 us/op
[info] # Warmup Iteration   3: 597.670 us/op
[info] Iteration   1: 594.680 us/op
[info] Iteration   2: 589.887 us/op
[info] Iteration   3: 580.656 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   588.408 ±(99.9%) 130.042 us/op [Average]
[info]   (min, avg, max) = (580.656, 588.408, 594.680), stdev = 7.128
[info]   CI (99.9%): [458.366, 718.450] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 75)
[info] # Run progress: 59.33% complete, ETA 01:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 690.955 us/op
[info] # Warmup Iteration   2: 639.653 us/op
[info] # Warmup Iteration   3: 648.277 us/op
[info] Iteration   1: 631.793 us/op
[info] Iteration   2: 639.686 us/op
[info] Iteration   3: 624.263 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   631.914 ±(99.9%) 140.699 us/op [Average]
[info]   (min, avg, max) = (624.263, 631.914, 639.686), stdev = 7.712
[info]   CI (99.9%): [491.215, 772.612] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 80)
[info] # Run progress: 60.00% complete, ETA 01:00:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 739.278 us/op
[info] # Warmup Iteration   2: 690.699 us/op
[info] # Warmup Iteration   3: 678.264 us/op
[info] Iteration   1: 672.990 us/op
[info] Iteration   2: 672.547 us/op
[info] Iteration   3: 672.424 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   672.654 ±(99.9%) 5.431 us/op [Average]
[info]   (min, avg, max) = (672.424, 672.654, 672.990), stdev = 0.298
[info]   CI (99.9%): [667.223, 678.085] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 85)
[info] # Run progress: 60.67% complete, ETA 00:59:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 795.071 us/op
[info] # Warmup Iteration   2: 722.687 us/op
[info] # Warmup Iteration   3: 714.602 us/op
[info] Iteration   1: 733.430 us/op
[info] Iteration   2: 710.210 us/op
[info] Iteration   3: 713.836 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   719.159 ±(99.9%) 227.899 us/op [Average]
[info]   (min, avg, max) = (710.210, 719.159, 733.430), stdev = 12.492
[info]   CI (99.9%): [491.259, 947.058] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 90)
[info] # Run progress: 61.33% complete, ETA 00:58:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 833.118 us/op
[info] # Warmup Iteration   2: 770.489 us/op
[info] # Warmup Iteration   3: 774.548 us/op
[info] Iteration   1: 755.787 us/op
[info] Iteration   2: 754.815 us/op
[info] Iteration   3: 756.605 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   755.736 ±(99.9%) 16.350 us/op [Average]
[info]   (min, avg, max) = (754.815, 755.736, 756.605), stdev = 0.896
[info]   CI (99.9%): [739.386, 772.085] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 95)
[info] # Run progress: 62.00% complete, ETA 00:57:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 881.980 us/op
[info] # Warmup Iteration   2: 815.695 us/op
[info] # Warmup Iteration   3: 821.126 us/op
[info] Iteration   1: 802.207 us/op
[info] Iteration   2: 821.372 us/op
[info] Iteration   3: 802.258 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   808.612 ±(99.9%) 201.598 us/op [Average]
[info]   (min, avg, max) = (802.207, 808.612, 821.372), stdev = 11.050
[info]   CI (99.9%): [607.014, 1010.210] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 100)
[info] # Run progress: 62.67% complete, ETA 00:56:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 940.534 us/op
[info] # Warmup Iteration   2: 867.417 us/op
[info] # Warmup Iteration   3: 861.278 us/op
[info] Iteration   1: 846.050 us/op
[info] Iteration   2: 854.081 us/op
[info] Iteration   3: 853.445 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   851.192 ±(99.9%) 81.447 us/op [Average]
[info]   (min, avg, max) = (846.050, 851.192, 854.081), stdev = 4.464
[info]   CI (99.9%): [769.745, 932.639] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 110)
[info] # Run progress: 63.33% complete, ETA 00:55:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1025.725 us/op
[info] # Warmup Iteration   2: 946.494 us/op
[info] # Warmup Iteration   3: 939.502 us/op
[info] Iteration   1: 917.306 us/op
[info] Iteration   2: 942.574 us/op
[info] Iteration   3: 928.778 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   929.553 ±(99.9%) 230.823 us/op [Average]
[info]   (min, avg, max) = (917.306, 929.553, 942.574), stdev = 12.652
[info]   CI (99.9%): [698.730, 1160.375] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 120)
[info] # Run progress: 64.00% complete, ETA 00:54:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1116.687 us/op
[info] # Warmup Iteration   2: 1051.351 us/op
[info] # Warmup Iteration   3: 1041.152 us/op
[info] Iteration   1: 1032.566 us/op
[info] Iteration   2: 1022.836 us/op
[info] Iteration   3: 1049.702 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   1035.035 ±(99.9%) 248.158 us/op [Average]
[info]   (min, avg, max) = (1022.836, 1035.035, 1049.702), stdev = 13.602
[info]   CI (99.9%): [786.877, 1283.193] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 130)
[info] # Run progress: 64.67% complete, ETA 00:53:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1203.969 us/op
[info] # Warmup Iteration   2: 1133.478 us/op
[info] # Warmup Iteration   3: 1096.014 us/op
[info] Iteration   1: 1139.707 us/op
[info] Iteration   2: 1097.234 us/op
[info] Iteration   3: 1131.121 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   1122.687 ±(99.9%) 409.701 us/op [Average]
[info]   (min, avg, max) = (1097.234, 1122.687, 1139.707), stdev = 22.457
[info]   CI (99.9%): [712.986, 1532.389] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 140)
[info] # Run progress: 65.33% complete, ETA 00:52:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1317.014 us/op
[info] # Warmup Iteration   2: 1217.589 us/op
[info] # Warmup Iteration   3: 1186.647 us/op
[info] Iteration   1: 1193.191 us/op
[info] Iteration   2: 1196.488 us/op
[info] Iteration   3: 1213.832 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   1201.170 ±(99.9%) 202.298 us/op [Average]
[info]   (min, avg, max) = (1193.191, 1201.170, 1213.832), stdev = 11.089
[info]   CI (99.9%): [998.873, 1403.468] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline
[info] # Parameters: (size = 150)
[info] # Run progress: 66.00% complete, ETA 00:51:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1397.854 us/op
[info] # Warmup Iteration   2: 1293.811 us/op
[info] # Warmup Iteration   3: 1295.479 us/op
[info] Iteration   1: 1279.024 us/op
[info] Iteration   2: 1263.522 us/op
[info] Iteration   3: 1271.089 us/op
[info] Result "benchmark.LexerRegexBenchmark.commentAccepting_Zipper_multiline":
[info]   1271.212 ±(99.9%) 141.420 us/op [Average]
[info]   (min, avg, max) = (1263.522, 1271.212, 1279.024), stdev = 7.752
[info]   CI (99.9%): [1129.792, 1412.631] (assumes normal distribution)
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 5)
[info] # Run progress: 66.67% complete, ETA 00:50:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 10)
[info] # Run progress: 67.33% complete, ETA 00:48:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 15)
[info] # Run progress: 68.00% complete, ETA 00:47:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 20)
[info] # Run progress: 68.67% complete, ETA 00:45:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 25)
[info] # Run progress: 69.33% complete, ETA 00:44:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 30)
[info] # Run progress: 70.00% complete, ETA 00:43:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 35)
[info] # Run progress: 70.67% complete, ETA 00:41:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 40)
[info] # Run progress: 71.33% complete, ETA 00:40:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 45)
[info] # Run progress: 72.00% complete, ETA 00:39:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 50)
[info] # Run progress: 72.67% complete, ETA 00:37:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 55)
[info] # Run progress: 73.33% complete, ETA 00:36:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 60)
[info] # Run progress: 74.00% complete, ETA 00:35:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 65)
[info] # Run progress: 74.67% complete, ETA 00:34:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 70)
[info] # Run progress: 75.33% complete, ETA 00:32:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 75)
[info] # Run progress: 76.00% complete, ETA 00:31:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 80)
[info] # Run progress: 76.67% complete, ETA 00:30:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 85)
[info] # Run progress: 77.33% complete, ETA 00:29:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 90)
[info] # Run progress: 78.00% complete, ETA 00:28:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 95)
[info] # Run progress: 78.67% complete, ETA 00:27:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 100)
[info] # Run progress: 79.33% complete, ETA 00:26:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 110)
[info] # Run progress: 80.00% complete, ETA 00:25:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 120)
[info] # Run progress: 80.67% complete, ETA 00:24:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 130)
[info] # Run progress: 81.33% complete, ETA 00:23:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 140)
[info] # Run progress: 82.00% complete, ETA 00:22:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex
[info] # Parameters: (size = 150)
[info] # Run progress: 82.67% complete, ETA 00:21:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex(RegexBenchmark.scala:194)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.commentAccepting_scalaRegex_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 5)
[info] # Run progress: 83.33% complete, ETA 00:20:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 10)
[info] # Run progress: 84.00% complete, ETA 00:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 15)
[info] # Run progress: 84.67% complete, ETA 00:18:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 20)
[info] # Run progress: 85.33% complete, ETA 00:17:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 25)
[info] # Run progress: 86.00% complete, ETA 00:16:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 30)
[info] # Run progress: 86.67% complete, ETA 00:15:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 35)
[info] # Run progress: 87.33% complete, ETA 00:14:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 40)
[info] # Run progress: 88.00% complete, ETA 00:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 45)
[info] # Run progress: 88.67% complete, ETA 00:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 50)
[info] # Run progress: 89.33% complete, ETA 00:12:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 55)
[info] # Run progress: 90.00% complete, ETA 00:11:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 60)
[info] # Run progress: 90.67% complete, ETA 00:10:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 65)
[info] # Run progress: 91.33% complete, ETA 00:09:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 70)
[info] # Run progress: 92.00% complete, ETA 00:08:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 75)
[info] # Run progress: 92.67% complete, ETA 00:07:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 80)
[info] # Run progress: 93.33% complete, ETA 00:07:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 85)
[info] # Run progress: 94.00% complete, ETA 00:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 90)
[info] # Run progress: 94.67% complete, ETA 00:05:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 95)
[info] # Run progress: 95.33% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 100)
[info] # Run progress: 96.00% complete, ETA 00:04:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 110)
[info] # Run progress: 96.67% complete, ETA 00:03:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 120)
[info] # Run progress: 97.33% complete, ETA 00:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 130)
[info] # Run progress: 98.00% complete, ETA 00:02:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 140)
[info] # Run progress: 98.67% complete, ETA 00:01:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # JMH version: 1.32
[info] # VM version: JDK 17.0.15, OpenJDK 64-Bit Server VM, 17.0.15+6-Ubuntu-0ubuntu124.04
[info] # VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
[info] # VM options: <none>
[info] # Blackhole mode: full + dont-inline hint
[info] # Warmup: 3 iterations, 10 s each
[info] # Measurement: 3 iterations, 10 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Average time, time/op
[info] # Benchmark: benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline
[info] # Parameters: (size = 150)
[info] # Run progress: 99.33% complete, ETA 00:00:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: <failure>
[info] java.lang.ExceptionInInitializerError
[info] 	at benchmark.LexerRegexBenchmark.commentAccepting_scalaRegex_multiline(RegexBenchmark.scala:224)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_avgt_jmhStub(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:190)
[info] 	at benchmark.jmh_generated.LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.commentAccepting_scalaRegex_multiline_AverageTime(LexerRegexBenchmark_commentAccepting_scalaRegex_multiline_jmhTest.java:152)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[info] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info] 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:470)
[info] 	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[info] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[info] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[info] 	at java.base/java.lang.Thread.run(Thread.java:840)
[info] Caused by: java.util.regex.PatternSyntaxException: Unclosed character class near index 58
[info] //([a-zA-Z0-9 	+-/\*!?=()[]{}<>|\&%$§§°`^@#~;:,.éàèçù'"`]*)
[info]               	                                           ^
[info] 	at java.base/java.util.regex.Pattern.error(Pattern.java:2028)
[info] 	at java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.group0(Pattern.java:3050)
[info] 	at java.base/java.util.regex.Pattern.sequence(Pattern.java:2124)
[info] 	at java.base/java.util.regex.Pattern.expr(Pattern.java:2069)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1783)
[info] 	at java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)
[info] 	at java.base/java.util.regex.Pattern.compile(Pattern.java:1069)
[info] 	at scala.util.matching.Regex.<init>(Regex.scala:234)
[info] 	at scala.collection.StringOps$.r$extension(StringOps.scala:852)
[info] 	at benchmark.ScalaRegexUtils$.<clinit>(RegexBenchmark.scala:334)
[info] 	... 15 more
[info] # Run complete. Total time: 01:40:40
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                              (size)  Mode  Cnt      Score       Error  Units
[info] LexerRegexBenchmark.commentAccepting_Regex                  5  avgt    3      6.104 ±     0.233  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 10  avgt    3     36.823 ±    11.412  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 15  avgt    3     96.067 ±    26.257  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 20  avgt    3    192.519 ±    39.685  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 25  avgt    3    321.207 ±    54.738  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 30  avgt    3    498.211 ±   129.568  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 35  avgt    3    701.539 ±   101.681  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 40  avgt    3    979.552 ±   352.895  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 45  avgt    3   1305.746 ±   613.860  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 50  avgt    3   1677.141 ±   371.009  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 55  avgt    3   2140.998 ±   321.202  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 60  avgt    3   2652.044 ±   454.108  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 65  avgt    3   3245.816 ±   396.162  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 70  avgt    3   4046.017 ±  2030.888  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 75  avgt    3   4692.074 ±  1926.396  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 80  avgt    3   5712.246 ±   669.411  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 85  avgt    3   6625.392 ±  1075.095  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 90  avgt    3   7655.697 ±  3123.094  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                 95  avgt    3   9077.824 ±   558.698  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                100  avgt    3  10330.828 ±  1051.349  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                110  avgt    3  13462.633 ± 13516.720  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                120  avgt    3  16768.563 ±  4880.090  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                130  avgt    3  21334.195 ±  4100.932  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                140  avgt    3  25909.729 ±  1183.392  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex                150  avgt    3  31996.873 ±  9272.761  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline        5  avgt    3      9.585 ±     2.694  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       10  avgt    3     64.250 ±    18.812  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       15  avgt    3    178.876 ±    81.969  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       20  avgt    3    370.088 ±    40.654  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       25  avgt    3    649.594 ±   173.793  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       30  avgt    3   1060.093 ±   429.395  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       35  avgt    3   1596.793 ±   215.915  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       40  avgt    3   2271.710 ±   739.139  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       45  avgt    3   3028.686 ±   878.807  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       50  avgt    3   4092.838 ±   914.596  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       55  avgt    3   5328.559 ±   590.860  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       60  avgt    3   6868.647 ±  1333.055  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       65  avgt    3   8613.594 ±   294.286  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       70  avgt    3  10555.938 ±  3312.431  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       75  avgt    3  12863.533 ±  1700.881  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       80  avgt    3  15293.756 ±  3773.578  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       85  avgt    3  18655.199 ±  4307.711  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       90  avgt    3  21762.082 ±  5445.677  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline       95  avgt    3  25405.203 ±  3284.276  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline      100  avgt    3  29447.554 ±  2354.441  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline      110  avgt    3  38863.663 ± 13404.183  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline      120  avgt    3  49952.738 ± 12784.075  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline      130  avgt    3  61539.471 ± 10264.070  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline      140  avgt    3  78906.378 ±  9658.163  us/op
[info] LexerRegexBenchmark.commentAccepting_Regex_multiline      150  avgt    3  97342.907 ± 23937.046  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                 5  avgt    3     24.843 ±     0.008  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                10  avgt    3     66.869 ±    20.183  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                15  avgt    3    105.752 ±    24.507  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                20  avgt    3    153.411 ±    37.749  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                25  avgt    3    188.902 ±    58.472  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                30  avgt    3    225.337 ±    65.647  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                35  avgt    3    267.961 ±    55.239  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                40  avgt    3    307.783 ±    87.068  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                45  avgt    3    346.574 ±    91.768  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                50  avgt    3    388.427 ±    78.522  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                55  avgt    3    429.155 ±    87.134  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                60  avgt    3    462.890 ±    74.299  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                65  avgt    3    508.121 ±   132.668  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                70  avgt    3    545.659 ±   111.566  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                75  avgt    3    589.171 ±    61.546  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                80  avgt    3    627.172 ±   129.522  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                85  avgt    3    670.318 ±   146.518  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                90  avgt    3    714.316 ±   117.586  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper                95  avgt    3    752.106 ±   107.135  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper               100  avgt    3    795.681 ±   126.575  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper               110  avgt    3    865.862 ±    54.891  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper               120  avgt    3    932.266 ±     3.433  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper               130  avgt    3   1036.392 ±   200.098  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper               140  avgt    3   1108.943 ±   225.215  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper               150  avgt    3   1195.881 ±   355.464  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline       5  avgt    3     26.192 ±     3.372  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      10  avgt    3     69.513 ±    10.435  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      15  avgt    3    113.197 ±     1.362  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      20  avgt    3    157.586 ±    42.322  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      25  avgt    3    197.115 ±    25.410  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      30  avgt    3    245.234 ±    75.944  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      35  avgt    3    289.814 ±    91.958  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      40  avgt    3    334.959 ±   106.284  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      45  avgt    3    381.033 ±     6.573  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      50  avgt    3    411.424 ±    69.512  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      55  avgt    3    460.795 ±    49.704  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      60  avgt    3    500.468 ±   109.509  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      65  avgt    3    542.262 ±   171.740  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      70  avgt    3    588.408 ±   130.042  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      75  avgt    3    631.914 ±   140.699  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      80  avgt    3    672.654 ±     5.431  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      85  avgt    3    719.159 ±   227.899  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      90  avgt    3    755.736 ±    16.350  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline      95  avgt    3    808.612 ±   201.598  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline     100  avgt    3    851.192 ±    81.447  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline     110  avgt    3    929.553 ±   230.823  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline     120  avgt    3   1035.035 ±   248.158  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline     130  avgt    3   1122.687 ±   409.701  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline     140  avgt    3   1201.170 ±   202.298  us/op
[info] LexerRegexBenchmark.commentAccepting_Zipper_multiline     150  avgt    3   1271.212 ±   141.420  us/op
[success] Total time: 6057 s (01:40:57), completed May 13, 2025, 7:20:43 AM
